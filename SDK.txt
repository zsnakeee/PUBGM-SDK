//Generated by @snakee2019 (telegram)

Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 12]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 12]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60, Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c, Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74, Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78, Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c, Size: 132]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x104, Size: 4]
	Object*[] SyncPreLoadSet;//[Offset: 0x108, Size: 12]
	NavigationSystem* NavigationSystem;//[Offset: 0x130, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x134, Size: 4]
	GameStateBase* GameState;//[Offset: 0x138, Size: 4]
	AISystemBase* AISystem;//[Offset: 0x13c, Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x140, Size: 4]
	Level*[] Levels;//[Offset: 0x144, Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x150, Size: 12]
	Level* CurrentLevel;//[Offset: 0x160, Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x164, Size: 4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x168, Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x174, Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x178, Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x6e4, Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72a, Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x446e168

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 4]
	Model* Model;//[Offset: 0x8c, Size: 4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x254, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x264, Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x268, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 1]
	int HighDeviceMemoryTotalSize;//[Offset: 0x2c8, Size: 4]
	int LowDeviceMemoryTotalSize;//[Offset: 0x2cc, Size: 4]
	WorldSettings* WorldSettings;//[Offset: 0x308, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x310, Size: 12]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x614, Size: 4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x264, Size: 4]
	float MinDrawDistance;//[Offset: 0x268, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x26c, Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x270, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x274, Size: 4]
	bool UseScopeDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x279, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x27a, Size: 1]
	enum LightmapType;//[Offset: 0x27b, Size: 1]
	bool bForceInjectToHierarchicalSurfel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27c, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27c, Size: 1]
	bool bAsyncGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27d, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27d, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27d, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27d, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27d, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27d, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27d, Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27d, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27e, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27e, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27e, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27e, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27e, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27e, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27e, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27e, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27f, Size: 1]
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27f, Size: 1]
	bool bIdeaOutlineNew;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27f, Size: 1]
	bool bIdeaOutlineOcclusionHighlight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27f, Size: 1]
	bool bIdeaOverrideOutlineAndOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27f, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27f, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x280, Size: 16]
	LinearColor IdeaOutlineOcclusionColor;//[Offset: 0x290, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x2a4, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x2a9, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x2ac, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x2bc, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 1]
	bool bEnableTransparentZWrite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc, Size: 1]
	bool bOnlyAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cc, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cc, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cc, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cd, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cd, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cd, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cd, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cd, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cd, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cd, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cd, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ce, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ce, Size: 1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ce, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ce, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ce, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ce, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ce, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ce, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cf, Size: 1]
	bool bReceiveLandscapeShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cf, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cf, Size: 1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cf, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cf, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cf, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cf, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cf, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2d1, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x2d3, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2d4, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2d5, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x2d8, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x2dc, Size: 4]
	int TranslucencySortGroupPriority;//[Offset: 0x2e0, Size: 4]
	int VisibilityId;//[Offset: 0x2e4, Size: 4]
	byte PrimitiveShadingStrategy;//[Offset: 0x2ec, Size: 1]
	byte ShadingRate;//[Offset: 0x2ed, Size: 1]
	float FOVAdaptiveShadingFactor;//[Offset: 0x2f0, Size: 4]
	bool bUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 1]
	bool bAffectAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x2fc, Size: 4]
	float BoundsScale;//[Offset: 0x304, Size: 4]
	float OCBoundsScale;//[Offset: 0x308, Size: 4]
	int OCBoundsExtent;//[Offset: 0x30c, Size: 4]
	float LastSubmitTime;//[Offset: 0x310, Size: 4]
	float LastRenderTime;//[Offset: 0x314, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x318, Size: 4]
	float ShadowLastRenderTime;//[Offset: 0x31c, Size: 4]
	bool bFreezeMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x324, Size: 12]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x330, Size: 12]
	MaterialInterface*[] LODDefault;//[Offset: 0x344, Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x398, Size: 320]
	delegate OnComponentHit;//[Offset: 0x4d8, Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x4e4, Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x4f0, Size: 12]
	delegate OnComponentWake;//[Offset: 0x4fc, Size: 12]
	delegate OnComponentSleep;//[Offset: 0x508, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x520, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x52c, Size: 12]
	delegate OnClicked;//[Offset: 0x538, Size: 12]
	delegate OnReleased;//[Offset: 0x544, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x550, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x55c, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x568, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x574, Size: 12]
	<int,MaterialInterface*> LowLevelLODMaterial;//[Offset: 0x58c, Size: 60]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x5c8, Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x5cc, Size: 60]
	bool WasRecentlyRendered(float Tolerance);// 0x60f1548
	void WakeRigidBody(FName BoneName);// 0x60f14c8
	void WakeAllRigidBodies();// 0x60f14ac
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x60f1414
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x60f1390
	void SetUnderWater(bool bNewUnderWater);// 0x60f1310
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x60f1298
	void SetTranslucentSortGroupPriority(int NewTranslucentSortGroupPriority);// 0x60f1220
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x60f11a0
	void SetSimulatePhysics(bool bSimulate);// 0x5537ea0
	void SetRenderInMono(bool bValue);// 0x60f1120
	void SetRenderInMainPass(bool bValue);// 0x60f10a0
	void SetRenderCustomDepth(bool bValue);// 0x60f1020
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x60f0fa0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x60f0f20
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x60f0e0c
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x60f0ce8
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x60f0ce8
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x60f0bd4
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x60f0ac0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x60f0988
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x60f0988
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x60f0908
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x60f0888
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x60f0804
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x60f077c
	void SetMaterialByNameAsyncCallBack(FName MaterialSlotName, MaterialInterface* AssetPtr);// 0x60f05ac
	void SetMaterialByNameAsync(FName MaterialSlotName, FString MaterialPath);// 0x60f0400
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x60f033c
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x60f0278
	void SetMassScale(FName BoneName, float InMassScale);// 0x60f01ac
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x60f0090
	void SetMaskFilter(int InMaskFilter);// 0x60f0018
	void SetLODDefault(int LODIndex, MaterialInterface* LODMat);// 0x60eff5c
	void SetLockedAxis(byte LockedAxis);// 0x5f77180
	void SetLinearDamping(float InDamping);// 0x60efedc
	void SetIdeaOverrideOutlineAndOcclusion(bool bOutlineAndOcclusion);// 0x34190e8
	void SetIdeaOutlineUseNormalInVertexColor(bool bNewUseNormalInVertexColor);// 0x34190e8
	void SetIdeaOutlineOcclusionHighlight(bool bOcclusionHighlight);// 0x34190e8
	void SetIdeaOutlineOcclusionColor(out const LinearColor InOcclusionColor);// 0x60efe58
	void SetIdeaOutlineNew(bool bNew);// 0x34190e8
	void SetEnableGravity(bool bGravityEnabled);// 0x60e0b24
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x60efdd8
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x60efd60
	void SetDrawDyeing(bool bNewDrawOutline);// 0x60efce0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x60efc68
	void SetCustomDepthStencilValue(int Value);// 0x60efbf0
	void SetCullDistance(float NewCullDistance);// 0x60efb78
	void SetConstraintMode(byte ConstraintMode);// 0x60efaf8
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x60efa34
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x60ef9b4
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x60ef934
	void SetCollisionObjectType(byte Channel);// 0x368425c
	void SetCollisionEnabled(byte NewType);// 0x34849b0
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x60ef874
	void SetCastShadow(bool NewCastShadow);// 0x351c83c
	void SetCastPhotonShadow(bool bNewCastPhotonShadow);// 0x60ef7f4
	void SetBoundsScale(float NewBoundsScale);// 0x60ef77c
	void SetAngularDamping(float InDamping);// 0x60ef6fc
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x60ef630
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x60ef554
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x60ef44c
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x60ef370
	void SetAllMassScale(float InMassScale);// 0x60ef2f0
	void SetAffectAO(bool bNewAffectAO);// 0x60ef270
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x60ef184
	void PutRigidBodyToSleep(FName BoneName);// 0x60ef10c
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x60ef044
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x60eef70
	void K2_SetMoveIgnoreMask(int InIgnoreMask);// 0x60eeefc
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x60eebb4
	bool K2_IsQueryCollisionEnabled();// 0x60eeb74
	bool K2_IsPhysicsCollisionEnabled();// 0x60eeb34
	bool K2_IsCollisionEnabled();// 0x60eeafc
	int K2_GetMoveIgnoreMask();// 0x60eeae0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x60eea60
	bool IsOverlappingActor(const Actor* Other);// 0x60ee9e0
	bool IsGravityEnabled();// 0x60ee9b0
	bool IsAnyRigidBodyAwake();// 0x5fec04c
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x60ee8ec
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x60ee828
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x60ee7ec
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x60ee708
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x60ee674
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x60ee5e0
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x60ee534
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x60ee534
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x60ee468
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x60ee354
	int GetNumMaterials();// 0x60ee324
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x60ee248
	MaterialInterface* GetMaterialAsync(int ElementIndex, delegate MaterialCallback);// 0x60ee150
	MaterialInterface* GetMaterial(int ElementIndex);// 0x60ee0c8
	float GetMassScale(FName BoneName);// 0x60ee040
	float GetMass();// 0x60ee010
	int GetMaskFilter();// 0x60edff4
	float GetLinearDamping();// 0x376cb2c
	Vector GetInertiaTensor(FName BoneName);// 0x60edf58
	byte GetCollisionResponseToChannel(byte Channel);// 0x60eded0
	FName GetCollisionProfileName();// 0x60ede90
	byte GetCollisionObjectType();// 0x3888050
	byte GetCollisionEnabled();// 0x60ede60
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x60edd30
	Vector GetCenterOfMass(FName BoneName);// 0x60edc9c
	float GetAngularDamping();// 0x60edc6c
	void ForceRecoverMaterial(int ElementIndex);// 0x60edbec
	void ForceClearMaterial(int ElementIndex);// 0x60edb6c
	MaterialInstanceDynamic* CreateDynamicMaterialInstanceAsync(int ElementIndex, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x60eda30
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x60ed964
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterialAsync(int ElementIndex, MaterialInterface* Parent, delegate MaterialInstCallback);// 0x60ed828
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x60ed75c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicAsync(int ElementIndex, delegate MaterialInstCallback);// 0x60ed664
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x36834f4
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x60ed5a4
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x60ed4e4
	void ClearMoveIgnoreComponents();// 0x60ed4b4
	void ClearMoveIgnoreActors();// 0x60ed4a0
	bool CanCharacterStepUp(Pawn* Pawn);// 0x60ed418
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x60ed1d4
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x60ed2e4
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x60ed1d4
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x60ed030
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x60ece8c
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x60ecd74
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x60ecc5c
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x60ecb44
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x60eca2c
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x60ec914
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x60ec7fc
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x60ec6c0
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x60ec5a8

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xc8, Size: 4]
	FName AttachSocketName;//[Offset: 0xd0, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 12]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe4, Size: 12]
	Vector RelativeLocation;//[Offset: 0x118, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x124, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x130, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x1a0, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac, Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x1b0, Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b4, Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x1b8, Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x1c0, Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x1c8, Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc, Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x1d0, Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x1d8, Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 1]
	byte Mobility;//[Offset: 0x1dd, Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x1e0, Size: 4]
	byte DetailMode;//[Offset: 0x1e4, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x230, Size: 12]
	void ToggleVisibility(bool bPropagateToChildren);// 0x38e939c
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x6107f78
	void SetWorldScale3D(Vector NewScale);// 0x6107f08
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x6107e30
	void SetSkipUpdateChildTransforms(bool EnableSkipUpdateChildTransforms);// 0x6107db4
	void SetRelativeScale3D(Vector NewScale3D);// 0x4071694
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x6107ce0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x6107bc0
	void ResetRelativeTransform();// 0x6107bac
	void OnRep_Visibility(bool OldValue);// 0x6107b2c
	void OnRep_Transform();// 0x6107b18
	void OnRep_AttachSocketName();// 0x6107b04
	void OnRep_AttachParent();// 0x6107b04
	void OnRep_AttachChildren();// 0x6107af0
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x61078d0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6107710
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6107518
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6107360
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6107140
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6106f7c
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6106d84
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6106bcc
	Transform K2_GetComponentToWorld();// 0x6106b6c
	Vector K2_GetComponentScale();// 0x6106b24
	Rotator K2_GetComponentRotation();// 0x6106adc
	Vector K2_GetComponentLocation();// 0x6106a94
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x6106944
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x610675c
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x6106600
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x61063e0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6106228
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6106070
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6105eb8
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6105d00
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6105ae0
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6105928
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6105770
	bool IsVisible();// 0x6105740
	bool IsSimulatingPhysics(FName BoneName);// 0x61056b8
	bool IsAnySimulatingPhysics();// 0x35e383c
	Vector GetUpVector();// 0x6105670
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x6105574
	Rotator GetSocketRotation(FName InSocketName);// 0x61054d8
	Quat GetSocketQuaternion(FName InSocketName);// 0x610543c
	Vector GetSocketLocation(FName InSocketName);// 0x61053a0
	Vector GetRightVector();// 0x6105358
	Transform GetRelativeTransform();// 0x61052f8
	PhysicsVolume* GetPhysicsVolume();// 0x61052d0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x6105204
	int GetNumChildrenComponents();// 0x61051dc
	Vector GetForwardVector();// 0x60d4290
	Vector GetComponentVelocity();// 0x610518c
	Transform GetComponentTransformViewTranslatedBP();// 0x6105150
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x6105050
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x6104f30
	SceneComponent* GetChildComponent(int ChildIndex);// 0x6104eb0
	FName GetAttachSocketName();// 0x6104e94
	SceneComponent* GetAttachParent();// 0x3f7fc84
	FName[] GetAllSocketNames();// 0x6104dd4
	bool DoesSocketExist(FName InSocketName);// 0x6104d4c
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x6104c74

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bCallPreReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x70, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x88, Size: 1]
	enum CreationMethod;//[Offset: 0x8a, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x8c, Size: 12]
	delegate OnComponentActivated;//[Offset: 0x9c, Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xa8, Size: 12]
	void ToggleActive();// 0x35bc7fc
	void SetTickGroup(byte NewTickGroup);// 0x5f7b65c
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x5f7b5dc
	void SetIsReplicated(bool ShouldReplicate);// 0x5f7b55c
	void SetComponentTickInterval(float TickInterval);// 0x5f7b4e4
	void SetComponentTickEnabled(bool bEnabled);// 0x3d4c1ac
	void SetAutoActivate(bool bNewAutoActivate);// 0x3387d38
	void SetActive(bool bNewActive, bool bReset);// 0x5f7b40c
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5f7b38c
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5f7b30c
	void ReceiveTick(float DeltaSeconds);// 0x446e168
	void ReceiveEndPlay(byte EndPlayReason);// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void OnRep_Replicates();// 0x5f7b2f8
	void OnRep_IsActive();// 0x5f7b2e4
	void K2_DestroyComponent(Object* Object);// 0x5f7b26c
	bool IsComponentTickEnabled();// 0x5f7b244
	bool IsBeingDestroyed();// 0x5f7b224
	bool IsActive();// 0x3a040ec
	Actor* GetOwner();// 0x5f7b208
	float GetComponentTickInterval();// 0x5f7b1e0
	void ForceNetUpdate();// 0x35c6f04
	void Deactivate();// 0x35bc7c4
	bool ComponentHasTag(FName Tag);// 0x5f7b160
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5f7b0e0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5f7b060
	void Activate(bool bReset);// 0x3387cb0

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x330, Size: 4]
	int Priority;//[Offset: 0x334, Size: 4]
	float FluidFriction;//[Offset: 0x338, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x308, Size: 1]
	Color BrushColor;//[Offset: 0x30c, Size: 4]
	int PolyFlags;//[Offset: 0x310, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 1]
	Model* Brush;//[Offset: 0x318, Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x31c, Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x324, Size: 12]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float CustomTimeDilation;//[Offset: 0x5c, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x61, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x62, Size: 1]
	byte RemoteRole;//[Offset: 0x63, Size: 1]
	Actor* Owner;//[Offset: 0x64, Size: 4]
	byte WorldParallelismID;//[Offset: 0x68, Size: 1]
	FName NetDriverName;//[Offset: 0x70, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x78, Size: 72]
	float InitialLifeSpan;//[Offset: 0xc0, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xc8, Size: 56]
	byte Role;//[Offset: 0x100, Size: 1]
	byte NetDormancy;//[Offset: 0x101, Size: 1]
	byte AutoReceiveInput;//[Offset: 0x102, Size: 1]
	int InputPriority;//[Offset: 0x104, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x108, Size: 4]
	float NetCullDistanceSquared;//[Offset: 0x10c, Size: 4]
	int NetTag;//[Offset: 0x110, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x118, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x11c, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x120, Size: 4]
	byte ActorReplicateFreqLODGroupID;//[Offset: 0x124, Size: 1]
	bool bLowRepFreqOptimizedNAK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x125, Size: 1]
	float NetPriority;//[Offset: 0x128, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x130, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x130, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x130, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x130, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x130, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x130, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x131, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x131, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x131, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x131, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x131, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x132, Size: 1]
	Pawn* Instigator;//[Offset: 0x140, Size: 4]
	Actor*[] Children;//[Offset: 0x144, Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x150, Size: 4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x154, Size: 12]
	FName[] Layers;//[Offset: 0x168, Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x174, Size: 8]
	FName[] Tags;//[Offset: 0x17c, Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x188, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x190, Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x19c, Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x1a8, Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x1b4, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1c0, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1cc, Size: 12]
	delegate OnClicked;//[Offset: 0x1d8, Size: 12]
	delegate OnReleased;//[Offset: 0x1e4, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1f0, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x1fc, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x208, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x214, Size: 12]
	delegate OnActorHit;//[Offset: 0x220, Size: 12]
	delegate OnDestroyed;//[Offset: 0x22c, Size: 12]
	delegate OnEndPlay;//[Offset: 0x238, Size: 12]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2bc, Size: 12]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2c8, Size: 12]
	int ParallelWorldId;//[Offset: 0x2e4, Size: 4]
	bool bAlwaysRelevantToParallelWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	delegate OnActorEnterParallelWorld;//[Offset: 0x2ec, Size: 12]
	delegate OnActorLeaveParallelWorld;//[Offset: 0x2f8, Size: 12]
	int RealParallelWorldId;//[Offset: 0x304, Size: 4]
	bool WasRecentlyRendered(float Tolerance);// 0x5f774f0
	void UserConstructionScript();// 0x446e168
	void TearOff();// 0x33bb640
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x5f77434
	void SetTickGroup(byte NewTickGroup);// 0x5f773bc
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x5f7733c
	void SetReplicates(bool bInReplicates);// 0x5f772bc
	void SetReplicateMovement(bool bInReplicateMovement);// 0x377c118
	void SetParallelWorldId(int InWorldId, int Masks);// 0x5f77200
	void SetOwner(Actor* NewOwner);// 0x3d4604c
	void SetNetUpdateGroupID(byte InGroupID);// 0x5f77180
	void SetNetUpdateGroup(Actor* InConnectionActor);// 0x5f77100
	void SetNetDormancy(byte NewDormancy);// 0x5f77088
	void SetLifeSpan(float InLifespan);// 0x5f77008
	void SetActorTickInterval(float TickInterval);// 0x5f76f90
	void SetActorTickEnabled(bool bEnabled);// 0x5f76f10
	void SetActorScale3D(Vector NewScale3D);// 0x5f76ea0
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x5f76e30
	void SetActorHiddenInGame(bool bNewHidden);// 0x3d4c454
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x5f76db0
	void ResetParallelWorldId(int Masks);// 0x5f76d38
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3430458
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x34304d8
	void ReceiveTick(float DeltaSeconds);// 0x446e168
	void ReceiveReInitForReplay();// 0x446e168
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x446e168
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x446e168
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x446e168
	void ReceiveEndPlay(byte EndPlayReason);// 0x446e168
	void ReceiveDestroyed();// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x446e168
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x446e168
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x446e168
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x446e168
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x446e168
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x446e168
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x446e168
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x446e168
	void ReceiveActorEndCursorOver();// 0x446e168
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x446e168
	void ReceiveActorBeginCursorOver();// 0x446e168
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x5f76c24
	void OnRep_ReplicateMovement();// 0x3431c88
	void OnRep_ReplicatedMovement();// 0x347ab2c
	void OnRep_Owner();// 0x35bc7fc
	void OnRep_Instigator();// 0x33bae20
	void OnRep_AttachmentReplication();// 0x35c7c6c
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x5f76a88
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x3a09ba4
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x5f769c0
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f767a0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x5f766d0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f764b0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f762f8
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f76140
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f75f34
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f75d78
	void K2_OnReset();// 0x446e168
	void K2_OnEndViewTarget(PlayerController* PC);// 0x446e168
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x446e168
	SceneComponent* K2_GetRootComponent();// 0x38d2b70
	Rotator K2_GetActorRotation();// 0x5f75c84
	Vector K2_GetActorLocation();// 0x5f75bc0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x5f75ac0
	void K2_DestroyComponent(ActorComponent* Component);// 0x5f75a48
	void K2_DestroyActor();// 0x3381a50
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x5f75868
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x5f75688
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x5f75534
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x5f753e0
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f751c0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f75008
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f74e50
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f74c30
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f74a74
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5f748bc
	bool IsOverlappingActor(const Actor* Other);// 0x5f7483c
	bool IsChildActor();// 0x5f74814
	bool IsActorTickEnabled();// 0x5f747ec
	bool IsActorBeingDestroyed();// 0x5f747c8
	bool HasAuthority();// 0x5f747a0
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x5f74720
	Vector GetVelocity();// 0x37f4158
	Transform GetTransform();// 0x5f746d4
	bool GetTickableWhenPaused();// 0x5f746ac
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x5f7462c
	byte GetRole();// 0x5f74604
	byte GetRemoteRole();// 0x5f745e8
	ChildActorComponent* GetParentComponent();// 0x5f745c0
	Actor* GetParentActor();// 0x5f74598
	int GetParallelWorldId();// 0x5f74570
	Actor* GetOwner();// 0x5f74554
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x5f74488
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x5f74374
	byte GetLocalRole();// 0x5f74358
	float GetLifeSpan();// 0x5f74328
	Controller* GetInstigatorController();// 0x5f74300
	Pawn* GetInstigator();// 0x3588ed4
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x5f73ffc
	float GetInputAxisValue(const FName InputAxisName);// 0x5f73f7c
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x5f73c84
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x5f73c04
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x5f73b84
	float GetGameTimeSinceCreation();// 0x5f73b5c
	float GetDotProductTo(const Actor* OtherActor);// 0x5f73adc
	float GetDistanceTo(const Actor* OtherActor);// 0x5f73a5c
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x5f73908
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x5f73800
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x5f73780
	FName GetAttachParentSocketName();// 0x5f73740
	Actor* GetAttachParentActor();// 0x5f73718
	void GetAttachedActors(out Actor*[] OutActors);// 0x5f7364c
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x5f73530
	Vector GetActorUpVector();// 0x5f734bc
	float GetActorTimeDilation();// 0x5f73494
	float GetActorTickInterval();// 0x5f7346c
	Vector GetActorScale3D();// 0x5f73424
	Vector GetActorRightVector();// 0x5f733b0
	Vector GetActorRelativeScale3D();// 0x5f73368
	Vector GetActorForwardVector();// 0x5f732f4
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x5f73214
	bool GetActorEnableCollision();// 0x5f731f4
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x5f730cc
	void ForceNetUpdate();// 0x35c6f04
	void ForceNetConsider();// 0x38b475c
	void FlushNetDormancy();// 0x5f730b8
	void EnableInput(PlayerController* PlayerController);// 0x5f73038
	void DisableInput(PlayerController* PlayerController);// 0x40628d0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x5f72fb8
	bool BeenInParallelWorld();// 0x5f72f90
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5f72f10
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5f72e90
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x5f72cd0
	bool ActorHasTag(FName Tag);// 0x5f72c4c

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x608, Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x60c, Size: 4]
	Vector PrePivot;//[Offset: 0x610, Size: 12]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 52]
	FName BoneName;//[Offset: 0x50, Size: 8]
	byte PhysicsType;//[Offset: 0x58, Size: 1]
	bool bCustomizePhysicsBlendWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0x5c, Size: 4]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x64, Size: 4]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x6c, Size: 12]
	byte CollisionReponse;//[Offset: 0x78, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0x7c, Size: 12]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0x88, Size: 12]
	byte[] BoxCollisionEnabledList;//[Offset: 0x94, Size: 12]
	byte[] ConvexCollisionEnabledList;//[Offset: 0xa0, Size: 12]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xac, Size: 12]
	byte CollisionTraceFlag;//[Offset: 0xb8, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xc0, Size: 320]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x200, Size: 16]
	float BuildScale;//[Offset: 0x210, Size: 4]
	Vector BuildScale3D;//[Offset: 0x214, Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 12]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Vector Center;//[Offset: 0x50, Size: 12]
	float Radius;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float X;//[Offset: 0x78, Size: 4]
	float Y;//[Offset: 0x7c, Size: 4]
	float Z;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float Radius;//[Offset: 0x78, Size: 4]
	float Length;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10, Size: 12]
	Box ElemBox;//[Offset: 0x1c, Size: 28]
	Transform Transform;//[Offset: 0x40, Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float Restitution;//[Offset: 0x24, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	Color MaterialColor;//[Offset: 0x2c, Size: 4]
	float Density;//[Offset: 0x30, Size: 4]
	float RaiseMassToPower;//[Offset: 0x34, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x38, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x3c, Size: 4]
	byte SurfaceType;//[Offset: 0x40, Size: 1]
	float TireFrictionScale;//[Offset: 0x44, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x48, Size: 12]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: StaticMesh.Object
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int MinLOD;//[Offset: 0x2c, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 12]
	StaticMaterial[] StaticMaterials;//[Offset: 0x3c, Size: 12]
	float LightmapUVDensity;//[Offset: 0x48, Size: 4]
	int LightMapResolution;//[Offset: 0x4c, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x50, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x54, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x5c, Size: 4]
	int LODForCollision;//[Offset: 0x60, Size: 4]
	float CullingScreenSize;//[Offset: 0x64, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bLazyLoadBulkData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 1]
	bool bEnableTransparentRenderOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xa4, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd4, Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xe8, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xf4, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x100, Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x11c, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x128, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bEnableMeshletCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	ClusterNode_Mesh[] ClusterNodesTree;//[Offset: 0x138, Size: 12]
	int ElementToIgnoreForTexFactor;//[Offset: 0x144, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x148, Size: 12]
	NavCollision* NavCollision;//[Offset: 0x154, Size: 4]
	int GetNumSections(int InLOD);// 0x612d2d4
	int GetNumLODs();// 0x612d2ac
	int GetMaterialIndex(FName MaterialSlotName);// 0x612d22c
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x612d1ac
	BoxSphereBounds GetBounds();// 0x612d158
	Box GetBoundingBox();// 0x612d104

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20, Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x40, Size: 12]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x609778c
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x6097624
	PhysicalMaterial* GetPhysicalMaterial();// 0x36324c4
	Material* GetBaseMaterial();// 0x60975fc

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x58, Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x90, Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc8, Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0x100, Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x138, Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x170, Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a8, Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e8, Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x220, Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x258, Size: 56]
	byte MaterialDomain;//[Offset: 0x290, Size: 1]
	byte BlendMode;//[Offset: 0x291, Size: 1]
	byte DecalBlendMode;//[Offset: 0x292, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x293, Size: 1]
	byte ShadingModel;//[Offset: 0x294, Size: 1]
	byte ShadingRate;//[Offset: 0x295, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x298, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x29c, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	byte OITBlendMode;//[Offset: 0x2a1, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8, Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8, Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328, Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360, Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398, Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0, Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408, Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x440, Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478, Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678, Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0, Size: 56]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x6f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x740, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x790, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x790, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x790, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x790, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x790, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x790, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x790, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x794, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x798, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x79c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x7a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x7a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x7ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x7b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x7b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x7b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x7c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7ce, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cf, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d0, Size: 1]
	bool bShadowUseTentFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d1, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d1, Size: 1]
	bool bUsedWithLandscapeShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d1, Size: 1]
	bool bUseLandscapeMultiLayer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d1, Size: 1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d2, Size: 1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d2, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d2, Size: 1]
	byte ShadowOverride;//[Offset: 0x7d3, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x7d4, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d5, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d5, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d5, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d5, Size: 1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d5, Size: 1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d5, Size: 1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d5, Size: 1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d5, Size: 1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d6, Size: 1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d6, Size: 1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d6, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d6, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d6, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d6, Size: 1]
	bool bApplyFogInscattering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d6, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d6, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x7d7, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 1]
	bool bUsedWithTexture2DArrayShaderVariant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 1]
	float MaxDisplacement;//[Offset: 0x7dc, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e0, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e0, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e0, Size: 1]
	int EditorX;//[Offset: 0x7e4, Size: 4]
	int EditorY;//[Offset: 0x7e8, Size: 4]
	int EditorPitch;//[Offset: 0x7ec, Size: 4]
	int EditorYaw;//[Offset: 0x7f0, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x7f4, Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x800, Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x80c, Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x818, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x818, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x818, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x818, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x818, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x818, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x818, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x819, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x819, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x819, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x81c, Size: 4]
	byte BlendableLocation;//[Offset: 0x820, Size: 1]
	int BlendablePriority;//[Offset: 0x824, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	byte RefractionMode;//[Offset: 0x829, Size: 1]
	float RefractionDepthBias;//[Offset: 0x82c, Size: 4]
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x830, Size: 1]
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x830, Size: 1]
	bool bEnableMeshDiscard;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x830, Size: 1]
	bool bEnableMeshArcPlaneClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x830, Size: 1]
	bool bUsedWithMultiPassInstanceID;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x830, Size: 1]
	bool bIsEnhancedUImage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x830, Size: 1]
	Guid StateID;//[Offset: 0x834, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x8dc, Size: 12]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Color Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector Constant;//[Offset: 0x34, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float ConstantX;//[Offset: 0x34, Size: 4]
	float ConstantY;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 4]
	FString Desc;//[Offset: 0x24, Size: 12]
	Color BorderColor;//[Offset: 0x30, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38, Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid StateID;//[Offset: 0x1c, Size: 16]
	FString Description;//[Offset: 0x2c, Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c, Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 12]
	int Mask;//[Offset: 0xc, Size: 4]
	int MaskR;//[Offset: 0x10, Size: 4]
	int MaskG;//[Offset: 0x14, Size: 4]
	int MaskB;//[Offset: 0x18, Size: 4]
	int MaskA;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateID;//[Offset: 0x1c, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20, Size: 16]
	int LODBias;//[Offset: 0x30, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x48, Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x54, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	byte CompressionSettings;//[Offset: 0x59, Size: 1]
	byte Filter;//[Offset: 0x5a, Size: 1]
	byte LODGroup;//[Offset: 0x5b, Size: 1]
	byte CrunchSetting;//[Offset: 0x5c, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x60, Size: 4]
	byte BasisSetting;//[Offset: 0x64, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x68, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 12]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 12]
	Vector RelativeScale;//[Offset: 0x40, Size: 12]
	FString Tag;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ClusterNode_Mesh
	Vector BoundMin;//[Offset: 0x0, Size: 12]
	int FirstChild;//[Offset: 0xc, Size: 4]
	Vector BoundMax;//[Offset: 0x10, Size: 12]
	int LastChild;//[Offset: 0x1c, Size: 4]
	int FirstInstance;//[Offset: 0x20, Size: 4]
	int LastInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58, Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64, Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70, Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c, Size: 4]
	float ;//[Offset: 0x20, Size: 4]
	Color DrawColor;//[Offset: 0x24, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19, Size: 1]
	byte DOFMode;//[Offset: 0x1a, Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b, Size: 1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 4]
	float MassInKgOverride;//[Offset: 0x64, Size: 4]
	float LinearDamping;//[Offset: 0x68, Size: 4]
	float AngularDamping;//[Offset: 0x6c, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 12]
	Vector COMNudge;//[Offset: 0x7c, Size: 12]
	float MassScale;//[Offset: 0x88, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 12]
	byte ObjectType;//[Offset: 0x98, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4, Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8, Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0, Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8, Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 1]
	byte EndTickGroup;//[Offset: 0x5, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	float TickInterval;//[Offset: 0x30, Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]
	bool LocationQuantizationLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	FName LocationQuantizationLODGroup;//[Offset: 0x38, Size: 8]
	byte ForcedLocationQuantizationLOD;//[Offset: 0x40, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 12]
	FName AttachSocket;//[Offset: 0x28, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 4]
	byte ExtraData;//[Offset: 0x34, Size: 1]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x600d040
	bool WasControllerKeyJustPressed(Key Key);// 0x600d040
	bool IsControllerKeyDown(Key Key);// 0x600d040
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x600cec0
	Vector GetControllerVectorKeyState(Key Key);// 0x600cbbc
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x600cadc
	float GetControllerKeyTimeDown(Key Key);// 0x600c6c0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x600c9b8
	float GetControllerAnalogKeyState(Key Key);// 0x600c6c0

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30c, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30c, Size: 1]
	bool bRoleReplicationOptim;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30c, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30c, Size: 1]
	float BaseEyeHeight;//[Offset: 0x310, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x314, Size: 1]
	enum AutoPossessAI;//[Offset: 0x315, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x318, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x31c, Size: 4]
	byte RemoteViewPitch;//[Offset: 0x320, Size: 1]
	Controller* LastHitBy;//[Offset: 0x324, Size: 4]
	Controller* Controller;//[Offset: 0x328, Size: 4]
	Vector ControlInputVector;//[Offset: 0x334, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x340, Size: 12]
	void SpawnDefaultController();// 0x38af094
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x390585c
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x60cc8c0
	void ReceiveUnpossessed(Controller* OldController);// 0x446e168
	void ReceivePossessed(Controller* NewController);// 0x446e168
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x60cc76c
	void OnRep_PlayerState();// 0x344a258
	void OnRep_Controller();// 0x364b06c
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x60cc658
	Vector K2_GetMovementInputVector();// 0x60cc5b8
	bool IsPlayerControlled();// 0x60cc628
	bool IsMoveInputIgnored();// 0x5fc32b4
	bool IsLocallyControlled();// 0x3903aac
	bool IsControlled();// 0x60cc600
	Vector GetPendingMovementInputVector();// 0x60cc5b8
	Vector GetNavAgentLocation();// 0x5fc31c0
	PawnMovementComponent* GetMovementComponent();// 0x37ecc2c
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x60cc540
	Vector GetLastMovementInputVector();// 0x3780580
	Rotator GetControlRotation();// 0x60cc4f0
	Controller* GetController();// 0x60cc4d4
	Rotator GetBaseAimRotation();// 0x60cc484
	void DetachFromControllerPendingDestroy();// 0x3ee1b0c
	Vector ConsumeMovementInputVector();// 0x60cc434
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x60cc320
	void AddControllerYawInput(float Val);// 0x60cc2a0
	void AddControllerRollInput(float Val);// 0x33dbb40
	void AddControllerPitchInput(float Val);// 0x60cc220

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x30c, Size: 4]
	Character* Character;//[Offset: 0x318, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x31c, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x320, Size: 4]
	Rotator ControlRotation;//[Offset: 0x324, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	FName StateName;//[Offset: 0x340, Size: 8]
	Actor* ObservedActor;//[Offset: 0x348, Size: 4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x34c, Size: 12]
	void UnPossess();// 0x37c0828
	void StopMovement();// 0x3429d34
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x5fc3510
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x37bcb9c
	void SetIgnoreLookInput(bool bNewLookInput);// 0x5fc3488
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x37bc3a8
	void ResetIgnoreMoveInput();// 0x37af6b0
	void ResetIgnoreLookInput();// 0x5fc346c
	void ResetIgnoreInputFlags();// 0x5fc3450
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x446e168
	void Possess(Pawn* InPawn);// 0x3745c90
	void OnRep_PlayerState();// 0x344a258
	void OnRep_Pawn();// 0x364b06c
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x5fc3334
	Pawn* K2_GetPawn();// 0x3cd2218
	bool IsPlayerController();// 0x5fc3314
	bool IsMoveInputIgnored();// 0x5fc32e4
	bool IsLookInputIgnored();// 0x5fc32b4
	bool IsLocalPlayerController();// 0x5fc3270
	bool IsLocalController();// 0x5fc3240
	Actor* GetViewTarget();// 0x5fc3210
	Rotator GetDesiredRotation();// 0x5fc31c0
	Rotator GetControlRotation();// 0x5fc3170
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x5fc30a4
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x5fc2fdc
	PlayerController* CastToPlayerController();// 0x5fc2fb4

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x34c, Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x350, Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x354, Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x358, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x388, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x3b8, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x3bc, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x3d0, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3e0, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x3f0, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3f4, Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3f8, Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3fc, Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x400, Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x408, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 1]
	byte Ping;//[Offset: 0x40d, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40e, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40e, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40e, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40e, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40e, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40e, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40e, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40e, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x410, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x414, Size: 4]
	int JumpMaxCount;//[Offset: 0x418, Size: 4]
	int JumpCurrentCount;//[Offset: 0x41c, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x420, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x424, Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x43c, Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x448, Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x454, Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4f0, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x530, Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x540, Size: 224]
	void UnCrouch(bool bClientSimulation);// 0x5fb86a8
	void StopJumping();// 0x37d7520
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x5fb8628
	void SetReplicateMovement(bool bInReplicateMovement);// 0x377c118
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x5fb8564
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x5fb844c
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x5fb82cc
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x5fb82b8
	void OnRep_RootMotion();// 0x5fb82a4
	void OnRep_ReplicatedBasedMovement();// 0x375e0a4
	void OnRep_IsCrouched();// 0x3429874
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x446e168
	void OnLanded(out const HitResult Hit);// 0x446e168
	void OnJumped();// 0x375e670
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x5fb8188
	void K2_UpdateCustomMovement(float DeltaTime);// 0x446e168
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x446e168
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x446e168
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x446e168
	void Jump();// 0x36b6e28
	bool IsPlayingRootMotion();// 0x5fb8160
	bool IsPlayingNetworkedRootMotionMontage();// 0x5fb8138
	bool IsJumpProvidingForce();// 0x5fb8108
	AnimMontage* GetCurrentMontage();// 0x5fb80e0
	Vector GetBaseTranslationOffset();// 0x5fb80bc
	Rotator GetBaseRotationOffsetRotator();// 0x5fb8058
	float GetAnimRootMotionTranslationScale();// 0x5fb8030
	void Crouch(bool bClientSimulation);// 0x5fb7fa8
	void ClientCheatWalk();// 0x375e440
	void ClientCheatGhost();// 0x360d384
	void ClientCheatFly();// 0x37d8090
	bool CanJumpInternal();// 0x5fb7f78
	bool CanJump();// 0x5fb7f50
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x5fb7e88

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x7a4, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x7a8, Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x7ac, Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x7b0, Size: 4]
	AnimInstance*[] SubInstances;//[Offset: 0x7b4, Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x7c0, Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x7c4, Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x7f8, Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x804, Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x824, Size: 4]
	enum UseAsyncScene;//[Offset: 0x828, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x829, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x82a, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x82b, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82c, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x82c, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x82c, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x82c, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x82c, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x82c, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x830, Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83c, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83c, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83c, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83c, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x83c, Size: 1]
	float ClothBlendWeight;//[Offset: 0x840, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x848, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x854, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x854, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x854, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x856, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x858, Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85c, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85d, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85d, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85d, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85d, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85d, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85d, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x85d, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x85d, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x85e, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x860, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x870, Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x938, Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x93c, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x940, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0xa30, Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0xac4, Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0xac8, Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xacc, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xacc, Size: 1]
	float DefaultPosition;//[Offset: 0xad0, Size: 4]
	float DefaultPlayRate;//[Offset: 0xad4, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xad8, Size: 4]
	float LastPoseTickTime;//[Offset: 0xadc, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0a, Size: 1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x6110aac
	void SuspendClothingSimulation();// 0x6110a98
	void Stop();// 0x6110a84
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x6110974
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x34190e8
	void SetTeleportRotationThreshold(float Threshold);// 0x61108fc
	void SetTeleportDistanceThreshold(float Threshold);// 0x6110884
	void SetPosition(float InPos, bool bFireNotifies);// 0x61107c0
	void SetPlayRate(float Rate);// 0x6110748
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x61106d0
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x61105ac
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x6110498
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x6110418
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x61102fc
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x6110234
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x61101b4
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x61100e8
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x610ffcc
	void SetClothMaxDistanceScale(float Scale);// 0x610ff54
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x610fe84
	void SetAnimInstanceClass(class Object NewClass);// 0x610fe0c
	void SetAnimationMode(byte InAnimationMode);// 0x610fd94
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x610fd1c
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x610fbc8
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x610faac
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x610fa2c
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x610f90c
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x610f7ec
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x610f69c
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x610f61c
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x610f558
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x610f42c
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x610f2b8
	void ResumeClothingSimulation();// 0x610f2a4
	void ResetClothTeleportMode();// 0x610f290
	void ResetAllowedAnimCurveEvaluation();// 0x610f27c
	void ResetAllBodiesSimulatePhysics();// 0x610f268
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x610f1a4
	void Play(bool bLooping);// 0x610f124
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x610ef7c
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x610ed90
	bool IsPlaying();// 0x610ed68
	bool IsClothingSimulationSuspended();// 0x610ed40
	bool IsBodyGravityEnabled(FName BoneName);// 0x610ecc0
	float GetTeleportRotationThreshold();// 0x610ec98
	float GetTeleportDistanceThreshold();// 0x610ec98
	AnimInstance*[] GetSubAnimInstances();// 0x610ebd8
	Vector GetSkeletalCenterOfMass();// 0x610eb90
	AnimInstance* GetPostProcessInstance();// 0x610eb68
	float GetPosition();// 0x610eb40
	float GetPlayRate();// 0x610eb18
	float GetMorphTarget(FName MorphTargetName);// 0x610ea98
	bool GetDisableAnimCurves();// 0x610ea74
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x610e8f4
	float GetClothMaxDistanceScale();// 0x610e8cc
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x610e7f8
	AnimInstance* GetAnimInstance();// 0x610e7d0
	byte GetAnimationMode();// 0x610e7a8
	bool GetAllowedAnimCurveEvaluate();// 0x610e788
	void ForceClothNextUpdateTeleportAndReset();// 0x610e774
	void ForceClothNextUpdateTeleport();// 0x610e760
	FName FindConstraintBoneName(int ConstraintIndex);// 0x610e6d8
	void ClearMorphTargets();// 0x610e6c4
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x610e5b4
	void BindClothToMasterPoseComponent();// 0x610e5a0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x610e4d4
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x610e36c
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x610e204
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x610e0e4

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x628, Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x62c, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b4, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x6d0, Size: 4]
	int ForcedLodModel;//[Offset: 0x6d4, Size: 4]
	int MinLodModel;//[Offset: 0x6d8, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6e8, Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x6f4, Size: 4]
	Color WireframeColor;//[Offset: 0x6f8, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6fc, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6fc, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6fc, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6fc, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70c, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70c, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70c, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x70d, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70e, Size: 1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70f, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70f, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x71d, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71e, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71e, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x720, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x724, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x73c, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77a, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x6114968
	void UnHideBoneByName(FName BoneName);// 0x61148f0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x611472c
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x6114568
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x6114458
	bool SetSkinWeightProfile(FName InProfileName);// 0x61143d8
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x61142c8
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x61141fc
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReinit);// 0x6114130
	void SetMinLOD(int InNewMinLOD);// 0x61140b8
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x6114040
	void SetForcedLOD(int InNewForcedLOD);// 0x6113fc8
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x6113f48
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x6113ec8
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x6113e50
	void ResetAnimUROParams(float[] DistanceFactors, int MaxEvalRateForInterpolation);// 0x6113cb4
	bool IsUsingSkinWeightProfile();// 0x6113c94
	bool IsBoneHiddenByName(FName BoneName);// 0x6113c14
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x6113b50
	FName GetSocketBoneName(FName InSocketName);// 0x6113ac4
	FName GetParentBone(FName BoneName);// 0x6113a38
	int GetNumLODs();// 0x6113a10
	int GetNumBones();// 0x61139e8
	FName GetCurrentSkinWeightProfileName();// 0x61139c4
	FName GetBoneName(int BoneIndex);// 0x611393c
	int GetBoneIndex(FName BoneName);// 0x61138bc
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x6113744
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x609c530
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x609c420
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x609c2f8
	void DisableMeshClipPlane(int PlaneIndex);// 0x33ce2e4
	void DisableMeshClipArc();// 0x33e5ee0
	void DisableMeshClip4Planes();// 0x3570b38
	void ClearVertexColorOverride(int LODIndex);// 0x61136cc
	void ClearSkinWeightProfile();// 0x3365b48
	void ClearSkinWeightOverride(int LODIndex);// 0x6113654
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x6113588

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x608, Size: 12]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x609ced8
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x609ce14
	void SetLayerVisibilityValue(byte Layer, bool Visible, bool bPropagateToChildren);// 0x609ccf8
	void SetLayerVisibilityEnable(bool Enable, bool bPropagateToChildren);// 0x609cc20
	void SetLayerCastShadowValue(byte Layer, bool NewCastShadow);// 0x609cb54
	void SetLayerCastShadowEnable(bool Enable);// 0x609cacc
	void SetCastShadow(bool NewCastShadow);// 0x351c83c
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x609c9b8
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x609c930
	FName[] GetMaterialSlotNames();// 0x609c868
	MaterialInterface*[] GetMaterials();// 0x609c7a0
	int GetMaterialIndex(FName MaterialSlotName);// 0x609c718
	bool GetLayerVisibilityValue(byte Layer);// 0x609c690
	bool GetLayerCastShadowValue(byte Layer);// 0x609c608
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x609c530
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x609c420
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x609c2f8
	void DisableMeshClipPlane(int PlaneIndex);// 0x33ce2e4
	void DisableMeshClipArc();// 0x33e5ee0
	void DisableMeshClip4Planes();// 0x3570b38

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20, Size: 4]
	byte RootMotionMode;//[Offset: 0x24, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c, Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38, Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44, Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50, Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118, Size: 12]
	bool bDispatchQueuedAnimEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	bool bNeedReInitializeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	bool bForceParallelUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee, Size: 1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x5f86778
	Pawn* TryGetPawnOwner();// 0x38059cc
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x5f866bc
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x5f865a4
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x5f864e0
	void SetRootMotionMode(byte Value);// 0x5f86460
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x5f8639c
	void SetForceParallelUpdateAnimation(bool bForce);// 0x5f8631c
	void SavePoseSnapshot(FName SnapshotName);// 0x5f8629c
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x5f8621c
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x5f85fa4
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x5f85dbc
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x5f85d00
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x5f85c44
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x5f85b88
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x5f85a80
	void Montage_Resume(const AnimMontage* Montage);// 0x5f85a08
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x380a890
	void Montage_Pause(const AnimMontage* Montage);// 0x5f85990
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x5f858d4
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x5f85818
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x5f85798
	bool Montage_IsActive(const AnimMontage* Montage);// 0x5f85718
	float Montage_GetPosition(const AnimMontage* Montage);// 0x5f85698
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x5f85618
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x5f85540
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x5f854c0
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x5f85438
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x5f853b8
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x5f852e8
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x5f85178
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x5f850b4
	bool IsAnyMontagePlaying();// 0x5f8508c
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x5f84fc0
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x5f84e90
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x5f84df8
	AnimInstance* GetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x5f84d78
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x5f84cb4
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x5f84bf0
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x5f84b2c
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x5f84a68
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x5f849a4
	SkeletalMeshComponent* GetOwningComponent();// 0x5f8497c
	Actor* GetOwningActor();// 0x5f84954
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x5f84890
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x5f847cc
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x5f84708
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x5f84644
	float GetInstanceMachineWeight(int MachineIndex);// 0x5f845c4
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x5f84544
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x5f844c4
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x5f84444
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x5f843c4
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x5f84344
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x5f842c4
	float GetCurveValue(FName CurveName);// 0x5f84244
	FName GetCurrentStateName(int MachineIndex);// 0x5f841bc
	AnimMontage* GetCurrentActiveMontage();// 0x5f84194
	AnimMontage* GetCurMontageBySlot(FName SlotName);// 0x5f84114
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x5f84094
	void DestroyAllSubAnimInstances();// 0x5f84080
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x5f83fbc
	void ClearMorphTargets();// 0x5f83fa8
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x5f83ec8
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x446e168
	void BlueprintPostEvaluateAnimation();// 0x446e168
	void BlueprintInitializeAnimation();// 0x446e168
	void BlueprintBeginPlay();// 0x446e168

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20, Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c, Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124, Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c, Size: 60]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8, Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 12]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	FName BoneName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x611256c
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x61124dc

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 12]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 4]
	FName NotifyName;//[Offset: 0x38, Size: 8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 4]
	float Duration;//[Offset: 0x48, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	byte MontageTickType;//[Offset: 0x71, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 4]
	byte NotifyFilterType;//[Offset: 0x78, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int TrackIndex;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 4]
	int SlotIndex;//[Offset: 0x8, Size: 4]
	int SegmentIndex;//[Offset: 0xc, Size: 4]
	byte LinkMethod;//[Offset: 0x10, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 4]
	float SegmentLength;//[Offset: 0x18, Size: 4]
	float LinkValue;//[Offset: 0x1c, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x446e168
	FString GetNotifyName();// 0x5f8dedc

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c, Size: 12]
	float SequenceLength;//[Offset: 0x68, Size: 4]
	float RateScale;//[Offset: 0x6c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70, Size: 12]
	float GetPlayLength();// 0x5f8fec0

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20, Size: 4]
	AnimMetaData*[] MetaData;//[Offset: 0x44, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 12]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 12]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 84]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41, Size: 1]
	float DefaultValue;//[Offset: 0x44, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x446e168
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x446e168
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x446e168
	FString GetNotifyName();// 0x5f8dedc

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c, Size: 44]
	float BlendInTime;//[Offset: 0xa8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 44]
	float BlendOutTime;//[Offset: 0xd8, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc, Size: 4]
	FName SyncGroup;//[Offset: 0xe0, Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec, Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x104, Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110, Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c, Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x12a, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c, Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138, Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144, Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 4]
	float blendTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float GetFloatValue(float InTime);// 0x5fc7024

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x5fc6a60
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x5fc6980

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28, Size: 8]
	float StartTime;//[Offset: 0x30, Size: 4]
	FName NextSectionName;//[Offset: 0x38, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 12]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 4]
	float StartPos;//[Offset: 0x4, Size: 4]
	float AnimStartTime;//[Offset: 0x8, Size: 4]
	float AnimEndTime;//[Offset: 0xc, Size: 4]
	float AnimPlayRate;//[Offset: 0x10, Size: 4]
	int LoopingCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28, Size: 8]
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 12]
	FName[] BoneNames;//[Offset: 0xc, Size: 12]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 8]
	FName SnapshotName;//[Offset: 0x20, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x5c, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x78, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x94, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xa0, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xac, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 12]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc4, Size: 12]
	byte SkelMirrorAxis;//[Offset: 0xd0, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0xd1, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd4, Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe0, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe0, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe0, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe0, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xe4, Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xe8, Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xec, Size: 4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xf0, Size: 12]
	MorphTarget*[] MorphTargets;//[Offset: 0xfc, Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x218, Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x224, Size: 4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x228, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x234, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x244, Size: 12]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x25c, Size: 12]
	int NumSockets();// 0x610b018
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x610af4c
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x610aecc
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x610ae4c
	BoxSphereBounds GetImportedBounds();// 0x610adf8
	BoxSphereBounds GetBounds();// 0x610ada4
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x610acc8
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x610ac48

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x14, Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20, Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30, Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178, Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204, Size: 532]
	FName[] RemovedBones;//[Offset: 0x418, Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x424, Size: 12]
	AnimSequence* BakePose;//[Offset: 0x430, Size: 4]
	FString SourceImportFilename;//[Offset: 0x434, Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	byte TextureImportance;//[Offset: 0x1d, Size: 1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c, Size: 12]
	int BaseLOD;//[Offset: 0x38, Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44, Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144, Size: 4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte TextureWidth;//[Offset: 0x3, Size: 1]
	byte TextureHeight;//[Offset: 0x4, Size: 1]
	byte SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	byte TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24, Size: 68]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 1]
	byte Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	byte TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 1]
	byte BlendMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80, Size: 12]
	float StreamableFirstChunkSecond;//[Offset: 0x98, Size: 4]
	float StreamableFollowingChunkSecond;//[Offset: 0x9c, Size: 4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x108, Size: 1]
	byte RefPoseType;//[Offset: 0x109, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x10c, Size: 4]
	int RefFrameIndex;//[Offset: 0x110, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x114, Size: 4]
	FName RetargetSource;//[Offset: 0x118, Size: 8]
	enum Interpolation;//[Offset: 0x120, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x122, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x128, Size: 12]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24, Size: 104]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4, Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c, Size: 12]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28, Size: 12]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34, Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc, Size: 4]
	BodySetup*[] BodySetup;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2b0, Size: 12]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10, Size: 8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 8]
	Vector Pos1;//[Offset: 0x28, Size: 12]
	Vector PriAxis1;//[Offset: 0x34, Size: 12]
	Vector SecAxis1;//[Offset: 0x40, Size: 12]
	Vector Pos2;//[Offset: 0x4c, Size: 12]
	Vector PriAxis2;//[Offset: 0x58, Size: 12]
	Vector SecAxis2;//[Offset: 0x64, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c, Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58, Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 12]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 4]
	byte BlueprintType;//[Offset: 0x68, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 12]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]
	FName VariableName;//[Offset: 0x60, Size: 8]
	FName AttachToName;//[Offset: 0x68, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 12]
	Guid VariableGuid;//[Offset: 0x9c, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 4]
	byte LengthMode;//[Offset: 0x20, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 12]
	Guid TimelineGuid;//[Offset: 0x60, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	Vector GetVectorValue(float InTime);// 0x5fc8294

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	LinearColor GetLinearColorValue(float InTime);// 0x5fc740c

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 12]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 12]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 4]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 12]
	Guid AssetGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	float SavedPosition;//[Offset: 0x8, Size: 4]
	float SavedPlayRate;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x12c, Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float GravityScale;//[Offset: 0x134, Size: 4]
	float MaxStepHeight;//[Offset: 0x138, Size: 4]
	float JumpZVelocity;//[Offset: 0x13c, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x140, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x144, Size: 4]
	float WalkableFloorZ;//[Offset: 0x148, Size: 4]
	byte MovementMode;//[Offset: 0x14c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x14d, Size: 1]
	float GroundFriction;//[Offset: 0x170, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x174, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x178, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x17c, Size: 4]
	float MaxFlySpeed;//[Offset: 0x180, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x184, Size: 4]
	float MaxAcceleration;//[Offset: 0x188, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x18c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x190, Size: 4]
	float BrakingFriction;//[Offset: 0x194, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x19c, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1a0, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1a4, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1a8, Size: 4]
	float AirControl;//[Offset: 0x1ac, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1b0, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1b4, Size: 4]
	float FallingLateralFriction;//[Offset: 0x1b8, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1bc, Size: 4]
	float Buoyancy;//[Offset: 0x1c0, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1c4, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1c8, Size: 4]
	Rotator RotationRate;//[Offset: 0x1cc, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1dc, Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1e0, Size: 4]
	float OutofWaterZ;//[Offset: 0x1e4, Size: 4]
	float Mass;//[Offset: 0x1e8, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x1f4, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x1f8, Size: 4]
	float PushForceFactor;//[Offset: 0x1fc, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x200, Size: 4]
	float TouchForceFactor;//[Offset: 0x204, Size: 4]
	float MinTouchForce;//[Offset: 0x208, Size: 4]
	float MaxTouchForce;//[Offset: 0x20c, Size: 4]
	float RepulsionForce;//[Offset: 0x210, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x218, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x21c, Size: 4]
	Vector Acceleration;//[Offset: 0x220, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x22c, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x250, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x25c, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x260, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x26c, Size: 12]
	float AnalogInputModifier;//[Offset: 0x278, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x284, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x288, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x28c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x290, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x294, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x298, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x29c, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2a0, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2a4, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2a8, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2ac, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2b0, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2b4, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2b8, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2bd, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2c0, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2c4, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2c8, Size: 160]
	byte DefaultLandMovementMode;//[Offset: 0x368, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x369, Size: 1]
	byte GroundMovementMode;//[Offset: 0x36a, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36b, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x36b, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x36b, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x36b, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x36b, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x36b, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x370, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x370, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x370, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x370, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x370, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x370, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x370, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x371, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x371, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x371, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x371, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x371, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x371, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x371, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x372, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x372, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x372, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x372, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x372, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x384, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x388, Size: 12]
	int AvoidanceUID;//[Offset: 0x394, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x398, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x39c, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3a0, Size: 4]
	float AvoidanceWeight;//[Offset: 0x3a4, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x3a8, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x460, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x464, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x468, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x46c, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x470, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x474, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x478, Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4bc, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4c0, Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5e0, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x620, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x5fbc2c4
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x5fbc24c
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x5fbc188
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x5fbc104
	void SetGroupsToIgnore(int GroupFlags);// 0x5fbc08c
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x5fbc008
	void SetGroupsToAvoid(int GroupFlags);// 0x5fbbf90
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x5fbbf0c
	void SetAvoidanceGroup(int GroupFlags);// 0x5fbbe94
	void SetAvoidanceEnabled(bool bEnable);// 0x5fbbe14
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x5fbbcc0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5fbb788
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5fbb250
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5fbaec4
	float K2_GetWalkableFloorZ();// 0x3588ddc
	float K2_GetWalkableFloorAngle();// 0x3588db4
	float K2_GetModifiedMaxAcceleration();// 0x5fbae94
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x5fbad70
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x5fbab74
	bool IsWalking();// 0x3780e88
	bool IsWalkable(out const HitResult Hit);// 0x36be508
	float GetValidPerchRadius();// 0x5fbab4c
	float GetPerchRadiusThreshold();// 0x5fbab24
	PrimitiveComponent* GetMovementBase();// 0x5fbaafc
	float GetMinAnalogSpeed();// 0x5fbaacc
	float GetMaxJumpHeightWithJumpTime();// 0x5fbaa9c
	float GetMaxJumpHeight();// 0x376569c
	float GetMaxBrakingDeceleration();// 0x5fbaa6c
	float GetMaxAcceleration();// 0x5fbaa3c
	Vector GetImpartedMovementBaseVelocity();// 0x36be180
	Vector GetCurrentAcceleration();// 0x36bdeb8
	Character* GetCharacterOwner();// 0x36c5258
	float GetAnalogInputModifier();// 0x5fbaa14
	void FlushServerMoves();// 0x5fba9f8
	void DisableMovement();// 0x5fba9dc
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5fba79c
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5fba394
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5fba070
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5fb9dc8
	void ClientAckGoodMove(float TimeStamp);// 0x3ecb34c
	void ClearAccumulatedForces();// 0x5fb9dac
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x33e78fc
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x5fb9c50
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x5fb9b84
	void AddForce(Vector force);// 0x5fb9b0c

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x120, Size: 4]
	Vector K2_GetInputVector();// 0x60cd55c
	bool IsMoveInputIgnored();// 0x60cd5a4
	Vector GetPendingInputVector();// 0x60cd55c
	Pawn* GetPawnOwner();// 0x60cd534
	Vector GetLastInputVector();// 0x60cd4ec
	Vector ConsumeInputVector();// 0x60cd49c
	void AddInputVector(Vector WorldVector, bool bForce);// 0x34cf004

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf4, Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x10c, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 1]
	MovementProperties MovementState;//[Offset: 0x114, Size: 4]
	void StopMovementKeepPathing();// 0x60abbf8
	void StopActiveMovement();// 0x345b448
	bool IsSwimming();// 0x406c54c
	bool IsMovingOnGround();// 0x3780e88
	bool IsFlying();// 0x60abbc8
	bool IsFalling();// 0x60abb98
	bool IsCrouching();// 0x5f9afbc

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xbc, Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 4]
	Vector Velocity;//[Offset: 0xc8, Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xd5, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 1]
	void StopMovementImmediately();// 0x36ba0c8
	void SnapUpdatedComponentToPlane();// 0x609f804
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x337d2e4
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x609f78c
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x609f714
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x609f64c
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x609f5c4
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x609f544
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x365f4c4
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x609f344
	float K2_GetModifiedMaxSpeed();// 0x609f314
	float K2_GetMaxSpeedModifier();// 0x609f2e4
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x3444e48
	Vector GetPlaneConstraintOrigin();// 0x609f2b0
	Vector GetPlaneConstraintNormal();// 0x609f27c
	enum GetPlaneConstraintAxisSetting();// 0x609f260
	PhysicsVolume* GetPhysicsVolume();// 0x33e74b8
	float GetMaxSpeed();// 0x609f230
	float GetGravityZ();// 0x609f200
	Vector ConstrainNormalToPlane(Vector Normal);// 0x609f164
	Vector ConstrainLocationToPlane(Vector Location);// 0x609f0c8
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x609f02c

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]
	Vector[] TriangleVertexLocationArray;//[Offset: 0x84, Size: 12]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x308, Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x310, Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x360, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x360, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x360, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x360, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x361, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x364, Size: 4]
	uint32 DataVersion;//[Offset: 0x368, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3f4, Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18, Size: 8]
	Color Color;//[Offset: 0x20, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30, Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 12]
	int AreaID;//[Offset: 0xc, Size: 4]
	class Object* AreaClass;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 144]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x618, Size: 4]
	float CapsuleRadius;//[Offset: 0x61c, Size: 4]
	float CapsuleHeight;//[Offset: 0x620, Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x5fb6cc4
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x5fb6bfc
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x5fb6b34
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x5fb6a48
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5fb6964
	float GetUnscaledCapsuleRadius();// 0x5fb6948
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x5fb6914
	float GetUnscaledCapsuleHalfHeight();// 0x5fb68f8
	float GetShapeScale();// 0x5fb6888
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x5fb6730
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5fb65e0
	float GetScaledCapsuleRadius();// 0x5fb6560
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x5fb64d0
	float GetScaledCapsuleHalfHeight();// 0x5fb6450

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x608, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x60c, Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x610, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x610, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x610, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x614, Size: 4]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	bool bNearPushBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bPushedByBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 12]
	Rotator Rotation;//[Offset: 0x20, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 224]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 4]
	float Position;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x308, Size: 4]
	byte Ping;//[Offset: 0x30c, Size: 1]
	FString PlayerName;//[Offset: 0x310, Size: 12]
	int PlayerID;//[Offset: 0x328, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x32c, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x32c, Size: 1]
	int StartTime;//[Offset: 0x330, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x334, Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x33c, Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x348, Size: 12]
	Pawn* PawnPrivate;//[Offset: 0x360, Size: 4]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x446e168
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x446e168
	void OnRep_UniqueId();// 0x3487c10
	void OnRep_Score();// 0x33510e0
	void OnRep_PlayerName();// 0x334c7ac
	void OnRep_bIsInactive();// 0x3363a08

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	float DamageImpulse;//[Offset: 0x20, Size: 4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 4]
	float DamageFalloff;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x358, Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x360, Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x364, Size: 4]
	HUD* MyHUD;//[Offset: 0x36c, Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x370, Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x374, Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x37c, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x394, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x398, Size: 12]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x3a4, Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x3b4, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x3b8, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3c4, Size: 12]
	int ClientCap;//[Offset: 0x3d0, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x3d4, Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x3d8, Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x3dc, Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3e0, Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44e, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x44f, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x47c, Size: 4]
	NetConnection* NetConnection;//[Offset: 0x480, Size: 4]
	float InputYawScale;//[Offset: 0x490, Size: 4]
	float InputPitchScale;//[Offset: 0x494, Size: 4]
	float InputRollScale;//[Offset: 0x498, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49c, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49c, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49c, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x49c, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x49c, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x49c, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x4a0, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x4a4, Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x4b0, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x4b1, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x4b2, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x4b3, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x4b4, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c8, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x538, Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x53c, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x548, Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x58c, Size: 4]
	Vector SpawnLocation;//[Offset: 0x590, Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x5a2, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x5a4, Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x60e351c
	bool WasInputKeyJustPressed(Key Key);// 0x60e3228
	void ToggleSpeaking(bool bInSpeaking);// 0x60e31a0
	void SwitchLevel(FString URL);// 0x60e30dc
	void StopHapticEffect(enum Hand);// 0x60e3064
	void StartFire(byte FireModeNum);// 0x60e2fe4
	void SetVirtualJoystickVisibility(bool bVisible);// 0x60e2f5c
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x60e2dbc
	void SetName(FString S);// 0x60e2cf8
	void SetMouseLocation(const int X, const int Y);// 0x60e2c3c
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x60e2b80
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x60e2a80
	void SetControllerLightColor(Color Color);// 0x60e2a10
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x60e2844
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x60e2738
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x60e2628
	void ServerViewPrevPlayer();// 0x60e25cc
	void ServerViewNextPlayer();// 0x60e2570
	void ServerVerifyViewTarget();// 0x60e2514
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x60e2408
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x60e2304
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x60e1de8
	void ServerToggleAILogging();// 0x60e1d8c
	void ServerShortTimeout();// 0x60e1d30
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x60e1c68
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x60e1b50
	void ServerRestartPlayer();// 0x60e1af4
	void ServerPause();// 0x60e1a98
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x60e19f4
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x60e14d8
	void ServerCheckClientPossessionReliable();// 0x60e147c
	void ServerCheckClientPossession();// 0x60e1420
	void ServerChangeName(FString S);// 0x60e132c
	void ServerCamera(FName NewMode);// 0x60e1278
	void ServerAcknowledgePossession(Pawn* P);// 0x60e11c4
	void SendToConsole(FString Command);// 0x60e1100
	void RestartLevel();// 0x38122a4
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x60e0fe0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x60e0e90
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x60e0bb0
	void Pause();// 0x36fb1f0
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x60e0b24
	void LocalTravel(FString URL);// 0x60e0a60
	bool IsInputKeyDown(Key Key);// 0x60e076c
	void GetViewportSize(out int SizeX, out int SizeY);// 0x60e068c
	SpectatorPawn* GetSpectatorPawn();// 0x60e0670
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x60e0588
	Vector GetInputVectorKeyState(Key Key);// 0x60e0284
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x60e0104
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x60e0024
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x60dfea0
	float GetInputKeyTimeDown(Key Key);// 0x60dfba8
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x60dfa84
	float GetInputAnalogKeyState(Key Key);// 0x60df78c
	HUD* GetHUD();// 0x60df764
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x60df558
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x60df3a0
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x60df1e8
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x60df020
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x60deeac
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x60ded38
	Vector GetFocalLocation();// 0x37a9078
	void FOV(float NewFOV);// 0x60decb8
	void EnableCheats();// 0x60dec9c
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x60deb30
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x60dea50
	void ConsoleKey(Key Key);// 0x60de75c
	void ClientWasKicked(const FText KickReason);// 0x60de5c8
	void ClientVoiceHandshakeComplete();// 0x38da714
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x60de410
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x60de0a4
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x60ddef4
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x60ddd54
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x60ddbb8
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x60ddaf4
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x60dda28
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x60dd9a8
	void ClientStartOnlineSession();// 0x33e5ea8
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x36cf160
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x60dd8a0
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x60dd818
	void ClientSetHUD(class HUD NewHUDClass);// 0x60dd798
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x60dd690
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x60dd514
	void ClientSetCameraMode(FName NewCamMode);// 0x60dd494
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x60dd2f0
	void ClientSetBlockOnAsyncLoading();// 0x60dd2d4
	void ClientReturnToMainMenu(FString ReturnReason);// 0x60dd210
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x60dd190
	void ClientRestart(Pawn* NewPawn);// 0x60dd110
	void ClientReset();// 0x37e56e0
	void ClientRepObjRef(Object* Object);// 0x3767754
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x60dcf78
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x60dce1c
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x60dccf8
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x60dcba4
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x60dca9c
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x60dc930
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x60dc7dc
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x60dc50c
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x60dc1a0
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x60dc04c
	void ClientIgnoreMoveInput(bool bIgnore);// 0x60dbfc4
	void ClientIgnoreLookInput(bool bIgnore);// 0x3462958
	void ClientGotoState(FName NewState);// 0x60dbf44
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x60dbe78
	void ClientForceGarbageCollection();// 0x3ecc1b8
	void ClientFlushLevelStreaming();// 0x60dbe64
	void ClientEndOnlineSession();// 0x33e5ec4
	void ClientEnableNetworkVoice(bool bEnable);// 0x60dbddc
	void ClientCommitMapChange();// 0x3ecb314
	void ClientClearCameraLensEffects();// 0x60dbdc0
	void ClientCapBandwidth(int Cap);// 0x60dbd40
	void ClientCancelPendingMapChange();// 0x36c85c4
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x60dbc34
	void ClearAudioListenerOverride();// 0x60dbc20
	void Camera(FName NewMode);// 0x60dbba0
	void AddYawInput(float Val);// 0x60dbb20
	void AddRollInput(float Val);// 0x60dbaa0
	void AddPitchInput(float Val);// 0x60dba20
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x37a1e04

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x308, Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30c, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30c, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30c, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30c, Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30c, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x310, Size: 12]
	FName[] DebugDisplay;//[Offset: 0x324, Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x330, Size: 12]
	Canvas* Canvas;//[Offset: 0x33c, Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x340, Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x344, Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x350, Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x354, Size: 4]
	Actor* UpdateShowDebugTargetActor();// 0x446e168
	void ShowHUD();// 0x33510e0
	void ShowDebugToggleSubCategory(FName Category);// 0x600718c
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x6007114
	void ShowDebugForMoifiedTargetActor();// 0x6007100
	void ShowDebug(FName DebugType);// 0x6007080
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x6006fbc
	void RemoveAllDebugStrings();// 0x6006fa8
	void ReceiveHitBoxRelease(const FName BoxName);// 0x446e168
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x446e168
	void ReceiveHitBoxClick(const FName BoxName);// 0x446e168
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x446e168
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x446e168
	Vector Project(Vector Location);// 0x6006f14
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x6006d18
	PlayerController* GetOwningPlayerController();// 0x358ebb4
	Pawn* GetOwningPawn();// 0x6006cf0
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x6006a98
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x6006900
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6006488
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x6006210
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x6006074
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x6005cf0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x6005ac8
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x60056f0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x600550c
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x60053a8
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x600520c
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x6004e1c

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 4]
	float OrgY;//[Offset: 0x20, Size: 4]
	float ClipX;//[Offset: 0x24, Size: 4]
	float ClipY;//[Offset: 0x28, Size: 4]
	Color DrawColor;//[Offset: 0x2c, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	int SizeX;//[Offset: 0x34, Size: 4]
	int SizeY;//[Offset: 0x38, Size: 4]
	Plane ColorModulate;//[Offset: 0x40, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x5fb5610
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x5fb5500
	Vector K2_Project(Vector WorldLocation);// 0x5fb546c
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x5fb52c8
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x5fb4ff4
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x5fb4bec
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x5fb4a58
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x5fb48b4
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x5fb469c
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x5fb4544
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x5fb4444
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x5fb3f24
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x5fb3e08

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xa8, Size: 4]
	int LevelIndex;//[Offset: 0xac, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xb0, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xb4, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xc0, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xca, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xca, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xca, Size: 1]
	byte AddressX;//[Offset: 0xcb, Size: 1]
	byte AddressY;//[Offset: 0xcc, Size: 1]
	int Blueprint_GetSizeY();// 0x61347f4
	int Blueprint_GetSizeX();// 0x61347cc

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 12]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 12]
	int IsRemapped;//[Offset: 0x3c, Size: 4]
	float EmScale;//[Offset: 0x40, Size: 4]
	float Ascent;//[Offset: 0x44, Size: 4]
	float Descent;//[Offset: 0x48, Size: 4]
	float Leading;//[Offset: 0x4c, Size: 4]
	int Kerning;//[Offset: 0x50, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 144]
	int NumCharacters;//[Offset: 0xe4, Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 12]
	float ScalingFactor;//[Offset: 0xf4, Size: 4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 4]
	FName LegacyFontName;//[Offset: 0x100, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 24]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 12]
	float Height;//[Offset: 0xc, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	byte CharacterSet;//[Offset: 0x11, Size: 1]
	FString Chars;//[Offset: 0x14, Size: 12]
	FString UnicodeRange;//[Offset: 0x20, Size: 12]
	FString CharsFilePath;//[Offset: 0x2c, Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 4]
	int XPadding;//[Offset: 0x64, Size: 4]
	int YPadding;//[Offset: 0x68, Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int Kerning;//[Offset: 0x80, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc, Size: 12]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 12]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 12]
	enum Hinting;//[Offset: 0xc, Size: 1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0, Size: 12]
	Int32Range[] CharacterRanges;//[Offset: 0xc, Size: 12]
	float ScalingFactor;//[Offset: 0x18, Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 12]
	FString DebugText;//[Offset: 0x1c, Size: 12]
	float TimeRemaining;//[Offset: 0x28, Size: 4]
	float Duration;//[Offset: 0x2c, Size: 4]
	Color TextColor;//[Offset: 0x30, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float FontScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x308, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x30c, Size: 4]
	float DefaultFOV;//[Offset: 0x318, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x320, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x328, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x370, Size: 1408]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8f0, Size: 1408]
	TViewTarget ViewTarget;//[Offset: 0xe70, Size: 1424]
	TViewTarget PendingViewTarget;//[Offset: 0x1400, Size: 1424]
	CameraModifier*[] ModifierList;//[Offset: 0x19a4, Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x19b0, Size: 12]
	float FreeCamDistance;//[Offset: 0x19bc, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x19c0, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x19cc, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x19e8, Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x19f4, Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x19f8, Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1a18, Size: 12]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1a30, Size: 12]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1a3c, Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x1a48, Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4c, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a4c, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a4c, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a4d, Size: 1]
	float ViewPitchMin;//[Offset: 0x1a50, Size: 4]
	float ViewPitchMax;//[Offset: 0x1a54, Size: 4]
	float ViewYawMin;//[Offset: 0x1a58, Size: 4]
	float ViewYawMax;//[Offset: 0x1a5c, Size: 4]
	float ViewRollMin;//[Offset: 0x1a60, Size: 4]
	float ViewRollMax;//[Offset: 0x1a64, Size: 4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x60d9288
	void StopCameraFade();// 0x3429890
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x60d91bc
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x60d90f0
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x3766e1c
	void StopAllCameraShakes(bool bImmediately);// 0x60d9068
	void StopAllCameraAnims(bool bImmediate);// 0x60d8fe0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x60d8df4
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x60d8ce0
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x5fed56c
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x381a670
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x60d8b84
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x60d8860
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x60d86f8
	void OnPhotographySessionStart();// 0x3487c10
	void OnPhotographySessionEnd();// 0x3363a08
	void OnPhotographyMultiPartCaptureStart();// 0x334c7ac
	void OnPhotographyMultiPartCaptureEnd();// 0x33510e0
	PlayerController* GetOwningPlayerController();// 0x3766ee8
	float GetFOVAngle();// 0x5fbaa9c
	Rotator GetCameraRotation();// 0x60d86b0
	Vector GetCameraLocation();// 0x60d8668
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x60d85e0
	void ClearCameraLensEffects();// 0x3ee14b0
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x446e168
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x3426b30
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x60d8558

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1392]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1312]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x560, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTDefaultOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSkyLightScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	byte BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc, Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2d4, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2dc, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e0, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2fc, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x300, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x304, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x308, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x30c, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x310, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x314, Size: 4]
	bool BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]
	Texture2D* BlindWatermarkingTexture;//[Offset: 0x31c, Size: 4]
	bool bOverride_BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	bool bOverride_ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 1]
	bool bOverride_BlindWatermarkingTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 1]
	float AutoExposureBias;//[Offset: 0x324, Size: 4]
	float HistogramLogMin;//[Offset: 0x328, Size: 4]
	float HistogramLogMax;//[Offset: 0x32c, Size: 4]
	float LensFlareIntensity;//[Offset: 0x330, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x334, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x344, Size: 4]
	int LensFlareCount;//[Offset: 0x348, Size: 4]
	float LensFlareThreshold;//[Offset: 0x34c, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x350, Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x354, Size: 16]
	float VignetteIntensity;//[Offset: 0x3d4, Size: 4]
	float GrainJitter;//[Offset: 0x3d8, Size: 4]
	float GrainIntensity;//[Offset: 0x3dc, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3e0, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3e4, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3e8, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ec, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3f0, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3f4, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3f8, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x404, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x408, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x40c, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x410, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x414, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x424, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x428, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x42c, Size: 4]
	float SRTDefaultOcclusion;//[Offset: 0x430, Size: 4]
	float SRTSkyLightScale;//[Offset: 0x434, Size: 4]
	float SRTFilterSmoothness;//[Offset: 0x438, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x43c, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x44c, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x450, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x454, Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x458, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x45c, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x460, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x464, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x468, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x46c, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x470, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x474, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x478, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x480, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x484, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x488, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x490, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x494, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x498, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4a0, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4a4, Size: 4]
	float MotionBlurMax;//[Offset: 0x4a8, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4ac, Size: 4]
	float LPVIntensity;//[Offset: 0x4b0, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4b4, Size: 4]
	float LPVSize;//[Offset: 0x4b8, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4bc, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4c0, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4c4, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4c8, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4cc, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4d0, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4d4, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4d8, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4dc, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4e0, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4e4, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4e8, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4ec, Size: 4]
	float LPVFadeRange;//[Offset: 0x4f0, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4f4, Size: 4]
	float ScreenPercentage;//[Offset: 0x4f8, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x4fc, Size: 12]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x508, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x50c, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x510, Size: 4]
	Object*[] Blendables;//[Offset: 0x514, Size: 12]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1392]
	PlayerState* PlayerState;//[Offset: 0x580, Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	byte Priority;//[Offset: 0x1d, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 4]
	float AlphaInTime;//[Offset: 0x24, Size: 4]
	float AlphaOutTime;//[Offset: 0x28, Size: 4]
	float Alpha;//[Offset: 0x2c, Size: 4]
	bool IsDisabled();// 0x3431ca4
	Actor* GetViewTarget();// 0x3353584
	void EnableModifier();// 0x36ab230
	void DisableModifier(bool bImmediate);// 0x34312e8
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x446e168
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x446e168

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x34c, Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x350, Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x354, Size: 4]
	Transform RelativeTransform;//[Offset: 0x360, Size: 48]
	float BaseFOV;//[Offset: 0x390, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x394, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x398, Size: 12]
	float DistFromCamera;//[Offset: 0x3a4, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x308, Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30c, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x310, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x31c, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x328, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x334, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x340, Size: 12]
	void ToggleActive();// 0x5fd9038
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5fd8f78
	void SetTemplate(ParticleSystem* NewTemplate);// 0x3348400
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5fd8ebc
	void SetFloatParameter(FName ParameterName, float Param);// 0x5fd8df8
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5fd8d30
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x5fd8c74
	void OnRep_bCurrentlyActive();// 0x334c7ac
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x334c7c8
	bool IsActive();// 0x5fd8c4c
	void Deactivate();// 0x5fd8c38
	void Activate();// 0x5fd8c24

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x608, Size: 4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x60c, Size: 12]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x618, Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x625, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x625, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x625, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x625, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x626, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x626, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x626, Size: 1]
	byte LODMethod;//[Offset: 0x628, Size: 1]
	enum RequiredSignificance;//[Offset: 0x629, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x62c, Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x638, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x644, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x650, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x65c, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x668, Size: 12]
	Vector OldPosition;//[Offset: 0x674, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x680, Size: 12]
	float WarmupTime;//[Offset: 0x68c, Size: 4]
	float WarmupTickRate;//[Offset: 0x690, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x698, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x6a0, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x6c0, Size: 12]
	float CustomTimeDilation;//[Offset: 0x6d4, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x718, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x720, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x728, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x729, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x72a, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x754, Size: 12]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x60c93b8
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x60cb190
	void SetTemplate(ParticleSystem* NewTemplate);// 0x60cb118
	void SetSocketName(FName InSocketName);// 0x60cb0a0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x60cafe4
	void SetLODLevel(int InLODLevel);// 0x3ecd34c
	void SetFloatParameter(FName ParameterName, float Param);// 0x60c92ec
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x60caf10
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x60c9214
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x60cae04
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x60cacfc
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x60cabf0
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x60caae4
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x60ca9dc
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x60ca8d0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x60ca80c
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x60ca6dc
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x60ca538
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x60c9150
	void OnMaterialLoaded(MaterialInterface* MaterialInstance, int ElementIndex);// 0x60ca47c
	int GetNumActiveParticles();// 0x60ca454
	MaterialInterface* GetNamedMaterial(FName InName);// 0x60ca3cc
	int GetLODLevel();// 0x60ca39c
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x60ca280
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x60ca160
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x60ca044
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x60c9f28
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x60c9e08
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x60c9cec
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x60c9c14
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x60c9a74
	void EndTrails();// 0x60c9a60
	void CreateNamedDynamicMaterialInstanceAsync(FName InName, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x60c991c
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x60c9850
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x60c96f8

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x60c93b8
	void SetFloatParameter(FName ParameterName, float Param);// 0x60c92ec
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x60c9214
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x60c9150

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 1]
	bool bAlwaysUpdateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 4]
	float WarmupTime;//[Offset: 0x28, Size: 4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bUseNewLodFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	byte LODMethod;//[Offset: 0x4e, Size: 1]
	float[] LODDistances;//[Offset: 0x50, Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x60, Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0x8c, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	float Delay;//[Offset: 0x94, Size: 4]
	float DelayLow;//[Offset: 0x98, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa0, Size: 4]
	enum InsignificantReaction;//[Offset: 0xa4, Size: 1]
	float InsignificanceDelay;//[Offset: 0xa8, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xac, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb0, Size: 12]
	float MacroUVRadius;//[Offset: 0xbc, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc4, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe0, Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xec, Size: 12]
	bool ContainsEmitterType(class Object TypeData);// 0x60c5d90

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20, Size: 8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x50, Size: 4]
	byte DetailMode;//[Offset: 0x54, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	enum SignificanceLevel;//[Offset: 0x56, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 12]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 12]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 12]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 12]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x2c, Size: 4]
	MaterialInterface* MaterialPath;//[Offset: 0x30, Size: 40]
	Vector EmitterOrigin;//[Offset: 0x58, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x64, Size: 12]
	byte ScreenAlignment;//[Offset: 0x70, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x74, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x78, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	byte SortMode;//[Offset: 0x7d, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e, Size: 1]
	float EmitterDuration;//[Offset: 0x80, Size: 4]
	float EmitterDurationLow;//[Offset: 0x84, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	int EmitterLoops;//[Offset: 0x8c, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x90, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0xb8, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xbc, Size: 12]
	float EmitterDelay;//[Offset: 0xc8, Size: 4]
	float EmitterDelayLow;//[Offset: 0xcc, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 1]
	byte InterpolationMethod;//[Offset: 0xd1, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xd4, Size: 4]
	int SubImages_Vertical;//[Offset: 0xd8, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	float RandomImageTime;//[Offset: 0xe0, Size: 4]
	int RandomImageChanges;//[Offset: 0xe4, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xec, Size: 12]
	float MacroUVRadius;//[Offset: 0xf8, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	int MaxDrawCount;//[Offset: 0x100, Size: 4]
	enum UVFlippingMode;//[Offset: 0x104, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0x108, Size: 4]
	Texture2D* CutoutTexturePath;//[Offset: 0x110, Size: 40]
	byte BoundingMode;//[Offset: 0x138, Size: 1]
	byte OpacitySourceMode;//[Offset: 0x139, Size: 1]
	float AlphaThreshold;//[Offset: 0x13c, Size: 4]
	int CutoutSubImagesX;//[Offset: 0x140, Size: 4]
	int CutoutSubImagesY;//[Offset: 0x144, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0x148, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0x14c, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0x158, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x168, Size: 12]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x174, Size: 12]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	byte LODValidity;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 28]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 1]
	byte EntryCount;//[Offset: 0x1, Size: 1]
	byte EntryStride;//[Offset: 0x2, Size: 1]
	byte SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0xc, Size: 12]
	byte LockFlag;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x58, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x80, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x84, Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x90, Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2d, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x70, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x74, Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xb4, Size: 4]
	None RotationRateAmount;//[Offset: 0xb8, Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	Vector MinValueVec;//[Offset: 0x24, Size: 12]
	Vector MaxValueVec;//[Offset: 0x30, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2c, Size: 1]
	FName EventName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 12]
	int ActiveTab;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 12]
	float ViewStartInput;//[Offset: 0x18, Size: 4]
	float ViewEndInput;//[Offset: 0x1c, Size: 4]
	float ViewStartOutput;//[Offset: 0x20, Size: 4]
	float ViewEndOutput;//[Offset: 0x24, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 4]
	Color CurveColor;//[Offset: 0x4, Size: 4]
	FString CurveName;//[Offset: 0x8, Size: 12]
	int bHideCurve;//[Offset: 0x14, Size: 4]
	int bColorCurve;//[Offset: 0x18, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 4]
	int bClamp;//[Offset: 0x20, Size: 4]
	float ClampLow;//[Offset: 0x24, Size: 4]
	float ClampHigh;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x6096ebc
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x6096e00
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x6096d3c
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x6096c3c
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x6096bac
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x6096b2c
	float K2_GetScalarParameterValue(FName ParameterName);// 0x6096aac
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x6096a34
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x60969bc
	void CopyInterpParameters(MaterialInstance* Source);// 0x6096944

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	MaterialInterface* Parent;//[Offset: 0x54, Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x5c, Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x68, Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x74, Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x80, Size: 12]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x8c, Size: 60]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xcc, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0xf0, Size: 12]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 4]
	int FontPage;//[Offset: 0xc, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bOverride_MeshArcPlaneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	byte BlendMode;//[Offset: 0xc, Size: 1]
	byte ShadingModel;//[Offset: 0xd, Size: 1]
	byte ShadingRate;//[Offset: 0xe, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bEnableMeshArcPlaneClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x30, Size: 12]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakeMap;//[Offset: 0x3c, Size: 60]
	float SplitScreenShakeScale;//[Offset: 0x78, Size: 4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float OscillationDuration;//[Offset: 0x20, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 12]
	float AnimPlayRate;//[Offset: 0x80, Size: 4]
	float AnimScale;//[Offset: 0x84, Size: 4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 4]
	float ShakeScale;//[Offset: 0x134, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 4]
	void ReceiveStopShake(bool bImmediately);// 0x446e168
	void ReceivePlayShake(float Scale);// 0x446e168
	bool ReceiveIsFinished();// 0x34533b0
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x446e168

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 4]
	float AnimLength;//[Offset: 0x20, Size: 4]
	Box BoundingBox;//[Offset: 0x24, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float BaseFOV;//[Offset: 0x44, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 1312]
	float BasePostProcessBlendWeight;//[Offset: 0x570, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 12]
	FName GroupName;//[Offset: 0x30, Size: 8]
	Color GroupColor;//[Offset: 0x38, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 4]
	byte ActiveCondition;//[Offset: 0x34, Size: 1]
	FString TrackTitle;//[Offset: 0x38, Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 4]
	float PlayRate;//[Offset: 0x3c, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 4]
	byte PlaySpace;//[Offset: 0x58, Size: 1]
	void Stop(bool bImmediate);// 0x5fae7a8
	void SetScale(float NewDuration);// 0x35639fc
	void SetDuration(float NewDuration);// 0x5fae730
	void SetCurrentTime(float NewTime);// 0x5fae6b8

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 4]
	Actor* GroupActor;//[Offset: 0x20, Size: 4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 12]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 12]
	FName LookAtGroupName;//[Offset: 0x80, Size: 8]
	float LinCurveTension;//[Offset: 0x88, Size: 4]
	float AngCurveTension;//[Offset: 0x8c, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	byte RotMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 12]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 12]
	Rotator ResetRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x308, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x30c, Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x310, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	float AspectRatio;//[Offset: 0x320, Size: 4]
	float FOVAngle;//[Offset: 0x324, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x328, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x330, Size: 1312]
	int GetAutoActivatePlayerIndex();// 0x5fae108

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x260, Size: 4]
	float OrthoWidth;//[Offset: 0x264, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x268, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x26c, Size: 4]
	float AspectRatio;//[Offset: 0x270, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 1]
	bool bAutoFixFovByAspectRatio;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 1]
	byte ProjectionMode;//[Offset: 0x275, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x278, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x280, Size: 1312]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x800, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x5faf2e4
	void SetProjectionMode(byte InProjectionMode);// 0x5faf270
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x5faf1fc
	void SetOrthoWidth(float InOrthoWidth);// 0x5faf188
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x5faf114
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x5faf0a0
	void SetFieldOfView(float InFieldOfView);// 0x35541e8
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x5faf018
	void SetAutoFixFovByAspectRatio(bool bInAutoFixFovByAspectRatio);// 0x5faef98
	void SetAspectRatio(float InAspectRatio);// 0x5faef24
	void SetActive(bool bNewActive, bool bReset);// 0x5f7b40c
	void RemoveBlendable(interface classNone InBlendableObject);// 0x5faee34
	void OnViewportSizeChanged(Vector2D OldViewportSize, Vector2D NewViewportSize);// 0x5faed80
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x35a89b0
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x5faed08
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5faebd8

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 4]
	void Walk();// 0x36ab230
	void ViewSelf();// 0x33bae20
	void ViewPlayer(FString S);// 0x5fbfae4
	void ViewClass(class Actor DesiredClass);// 0x3786898
	void ViewActor(FName actorName);// 0x3381e2c
	void TriggerCrash();// 0x5fbfad0
	void ToggleDebugCamera();// 0x339cdf4
	void ToggleAILogging();// 0x3381474
	void TestCollisionDistance();// 0x5fbfab4
	void Teleport();// 0x35bc7e0
	void Summon(FString ClassName);// 0x3cd2708
	void StreamLevelOut(FName PackageName);// 0x5fbfa34
	void StreamLevelIn(FName PackageName);// 0x5fbf9b4
	void Slomo(float NewTimeDilation);// 0x5fbf934
	void SetWorldOrigin();// 0x5fbf920
	void SetNavDrawDistance(float DrawDistance);// 0x5fbf8a8
	void SetMouseSensitivityToDefault();// 0x5fbf894
	void ServerToggleAILogging();// 0x5fbf838
	void ReceiveInitCheatManager();// 0x446e168
	void ReceiveEndPlay();// 0x446e168
	void RebuildNavigation();// 0x5fbf81c
	void PlayersOnly();// 0x3388014
	void OnlyLoadLevel(FName PackageName);// 0x36d7394
	void LogLoc();// 0x5fbf800
	void InvertMouse();// 0x5fbf7ec
	void God();// 0x36ac494
	void Ghost();// 0x3ce2364
	void FreezeFrame(float Delay);// 0x338b738
	void Fly();// 0x3387ff8
	void FlushLog();// 0x5fbf7d0
	void EnableDebugCamera();// 0x5fbf7b4
	void DumpVoiceMutingState();// 0x3911b98
	void DumpPartyState();// 0x5fbf798
	void DumpOnlineSessionState();// 0x5fbf77c
	void DumpChatState();// 0x5fbf760
	void DisableDebugCamera();// 0x5fbf744
	void DestroyTarget();// 0x3388438
	void DestroyPawns(class Pawn aClass);// 0x5fbf6c4
	void DestroyAllPawnsExceptTarget();// 0x341f4c8
	void DestroyAll(class Actor aClass);// 0x535ae48
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x5fbf600
	void DebugCapsuleSweepPawn();// 0x36d1df0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x5fbf578
	void DebugCapsuleSweepClear();// 0x386ca8c
	void DebugCapsuleSweepChannel(byte Channel);// 0x5fbf4f8
	void DebugCapsuleSweepCapture();// 0x38a3c58
	void DebugCapsuleSweep();// 0x3381f48
	void DamageTarget(float DamageAmount);// 0x5fbf478
	void CheatScript(FString ScriptName);// 0x5fbf320
	void ChangeSize(float F);// 0x5fbf2a0
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x5fbf0a4
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x5fbeec4
	void BugIt(FString ScreenShotDescription);// 0x5fbee00

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ad, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5ad, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5b0, Size: 4]
	float SpeedScale;//[Offset: 0x5c4, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x5c8, Size: 4]
	float InitialAccel;//[Offset: 0x5cc, Size: 4]
	float InitialDecel;//[Offset: 0x5d0, Size: 4]
	void ToggleDisplay();// 0x5fca0a0
	void ShowDebugSelectedInfo();// 0x377c1a0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x5fca028
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x446e168
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x446e168
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x446e168
	Actor* GetSelectedActor();// 0x5fca000

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x608, Size: 4]
	float FrustumAngle;//[Offset: 0x60c, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x610, Size: 4]
	float FrustumStartDist;//[Offset: 0x614, Size: 4]
	float FrustumEndDist;//[Offset: 0x618, Size: 4]
	Texture* Texture;//[Offset: 0x61c, Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160, Size: 12]
	FName[] InvertedAxis;//[Offset: 0x190, Size: 12]
	void SetMouseSensitivity(const float Sensitivity);// 0x60e7c3c
	void SetBind(FName BindName, FString Command);// 0x60e7b34
	void InvertAxisKey(const Key AxisKey);// 0x60e7848
	void InvertAxis(const FName AxisName);// 0x60e77d0
	void ClearSmoothing();// 0x60e77bc

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 16]
	FString Command;//[Offset: 0x10, Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 12]
	float Duration;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 12]
	NetDriver* Driver;//[Offset: 0x3c, Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 12]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 12]
	Actor* ViewTarget;//[Offset: 0x60, Size: 4]
	Actor* OwningActor;//[Offset: 0x64, Size: 4]
	Actor* ObserveTarget;//[Offset: 0x68, Size: 4]
	int MaxPacket;//[Offset: 0x6c, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool RecordLifetimeChangelist;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xf0, Size: 12]
	double LastReceiveTime;//[Offset: 0x148, Size: 8]
	bool bOpenClampBandwidthDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x293c0, Size: 1]
	float MaxBandwitdhDeltaTime;//[Offset: 0x293c4, Size: 4]
	Channel*[] ChannelsToTick;//[Offset: 0x29534, Size: 12]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x2b02c, Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38, Size: 4]
	int MaxClientRate;//[Offset: 0x3c, Size: 4]
	float ServerTravelPause;//[Offset: 0x40, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44, Size: 4]
	float RelevantTimeout;//[Offset: 0x48, Size: 4]
	float KeepAliveTime;//[Offset: 0x4c, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50, Size: 4]
	float ConnectionTimeout;//[Offset: 0x54, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x58, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x60, Size: 4]
	NetConnection*[] ClientConnections;//[Offset: 0x64, Size: 12]
	World* World;//[Offset: 0x7c, Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x90, Size: 4]
	Property* RoleProperty;//[Offset: 0x94, Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x98, Size: 4]
	FName NetDriverName;//[Offset: 0xa0, Size: 8]
	float Time;//[Offset: 0xcc, Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x404, Size: 60]
	NetOptimConfig* NetOptimConfig;//[Offset: 0x490, Size: 4]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: NetOptimConfig.WorldSubsystem.Subsystem.Object
	bool ActorRepNetNotRelevantLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	<byte,ActorRepNetNotRelevantLODConfig> ActorRepNetNotRelevantLODGroups;//[Offset: 0x24, Size: 60]
	<byte,ActorReplicateFreqLODGroup> ActorReplicateFreqLODGroups;//[Offset: 0x60, Size: 60]

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: ActorRepNetNotRelevantLODConfig
	FName Category;//[Offset: 0x0, Size: 8]
	bool LODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float LODDeltaTime;//[Offset: 0xc, Size: 4]
	float LODDistFactor;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ActorReplicateFreqLODGroup
	FName Category;//[Offset: 0x0, Size: 8]
	bool LODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool LODDistEnhancedOnBack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float LODBackEnhanceMinDistSq;//[Offset: 0xc, Size: 4]
	float LODBackEnhanceFactor;//[Offset: 0x10, Size: 4]
	float LODLongDistViewFactor;//[Offset: 0x14, Size: 4]
	ActorReplicateFreqLODConfig[] LODDistConfigs;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ActorReplicateFreqLODConfig
	float DistSquared;//[Offset: 0x0, Size: 4]
	float NetUpdateFreq;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 12]
	float ActiveOpacity;//[Offset: 0x28, Size: 4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 4]
	float TimeUntilReset;//[Offset: 0x34, Size: 4]
	float ActivationDelay;//[Offset: 0x38, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float StartupDelay;//[Offset: 0x40, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 4]
	Texture2D* Image2;//[Offset: 0x4, Size: 4]
	SlateBrush Brush1;//[Offset: 0x8, Size: 152]
	SlateBrush Brush2;//[Offset: 0xa0, Size: 152]
	Vector2D Center;//[Offset: 0x138, Size: 8]
	Vector2D VisualSize;//[Offset: 0x140, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x148, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x150, Size: 8]
	Vector2D InputScale;//[Offset: 0x158, Size: 8]
	Key MainInputKey;//[Offset: 0x160, Size: 16]
	Key AltInputKey;//[Offset: 0x170, Size: 16]

--------------------------------
Class: SlateBrush
	Vec ImageSize;//[Offset: 0x4, Size: 8]
	Margin Margin;//[Offset: 0xc, Size: 16]
	SlateColor TintColor;//[Offset: 0x1c, Size: 28]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Object* ResourceObject;//[Offset: 0x3c, Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40, Size: 40]
	FName ResourceName;//[Offset: 0x68, Size: 8]
	Box2D UVRegion;//[Offset: 0x70, Size: 20]
	byte DrawAs;//[Offset: 0x84, Size: 1]
	byte Tiling;//[Offset: 0x85, Size: 1]
	byte Mirroring;//[Offset: 0x86, Size: 1]
	byte ImageType;//[Offset: 0x87, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x34c, Size: 4]
	float BaseLookUpRate;//[Offset: 0x350, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x354, Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x358, Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x35c, Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 1]
	void TurnAtRate(float Rate);// 0x5fccab4
	void MoveUp_World(float Val);// 0x5fcca34
	void MoveRight(float Val);// 0x380d634
	void MoveForward(float Val);// 0x5fcc9b4
	void LookUpAtRate(float Rate);// 0x5fcc93c

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x618, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x6120fa8
	float GetUnscaledSphereRadius();// 0x5fb68f8
	float GetShapeScale();// 0x5fb6888
	float GetScaledSphereRadius();// 0x5fb6450

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x628, Size: 4]
	int LowDeviceForcedLodModel;//[Offset: 0x62c, Size: 4]
	int PreviousLODLevel;//[Offset: 0x630, Size: 4]
	int MinLOD;//[Offset: 0x634, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x638, Size: 4]
	byte TileLength;//[Offset: 0x678, Size: 1]
	byte TileNum;//[Offset: 0x679, Size: 1]
	Texture2D* TileTexture;//[Offset: 0x67c, Size: 4]
	Vector2D TileLocalMin;//[Offset: 0x680, Size: 8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x688, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x688, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x688, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x688, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x688, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x688, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x688, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x688, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x689, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x689, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x689, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x689, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x689, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x689, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x689, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x68c, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x690, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x694, Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x6a8, Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x6b8, Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x6f4, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x70c, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x720, Size: 12]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x72c, Size: 12]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x55ddbf4
	void SetOverrideCullingScreenSizeEnable(bool bEnable);// 0x612de24
	void SetOverrideCullingScreenSize(float ScreenSize);// 0x612ddac
	void SetLowDeviceForcedLodModel(int NewLowDeviceForcedLodModel);// 0x612dd34
	void SetForcedLodModel(int NewForcedLodModel);// 0x612dcbc
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x34fdbfc
	void SetDirty();// 0x612dca8
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x612dc30
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x612db58
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x609c530
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x609c420
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x609c2f8
	void DisableMeshClipPlane(int PlaneIndex);// 0x33ce2e4
	void DisableMeshClipArc();// 0x33e5ee0
	void DisableMeshClip4Planes();// 0x3570b38

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 12]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 1]
	byte Y;//[Offset: 0x1, Size: 1]
	byte Z;//[Offset: 0x2, Size: 1]
	byte W;//[Offset: 0x3, Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd4, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe8, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf8, Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x118, Size: 16]
	Margin Padding;//[Offset: 0x128, Size: 16]
	WAnimTime WAnimTime;//[Offset: 0x138, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x148, Size: 12]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x154, Size: 12]
	delegate OnTouchStart;//[Offset: 0x160, Size: 16]
	delegate OnTouchMove;//[Offset: 0x170, Size: 16]
	delegate OnTouchEnd;//[Offset: 0x180, Size: 16]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x190, Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x19c, Size: 4]
	int Priority;//[Offset: 0x1a0, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a4, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a4, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a4, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a4, Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a4, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a4, Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	FName[] autoPlayNameList;//[Offset: 0x1a8, Size: 12]
	enum TickFrequency;//[Offset: 0x1b4, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1b8, Size: 4]
	void UnregisterInputComponent();// 0x5387298
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x446e168
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x53871cc
	void StopListeningForAllInputActions();// 0x53871b8
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x5387140
	void SetWAnimTime(WAnimTime InWAnimTime);// 0x53870b8
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x5386ff8
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x5386f3c
	void SetPadding(Margin InPadding);// 0x5386eb4
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x5386e3c
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x5386dc4
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x5386d08
	void SetInputActionPriority(int NewPriority);// 0x5386c90
	void SetInputActionBlocking(bool bShouldBlock);// 0x5386c10
	void SetForegroundColor(SlateColor InForegroundColor);// 0x53868f0
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x5386870
	void SetDesiredSizeInViewport(Vector2D Size);// 0x5386800
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x5386784
	void SetAnchorsInViewport(Anchors Anchors);// 0x53866fc
	void SetAlignmentInViewport(Vector2D Alignment);// 0x538668c
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x5386614
	void RemoveFromViewport();// 0x5386600
	void RegisterInputComponent();// 0x53865ec
	void PreConstruct(bool IsDesignTime);// 0x446e168
	void PlaySound(SoundBase* SoundToPlay);// 0x5386574
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x53863a0
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x5386210
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x5386190
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x446e168
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x446e168
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x446e168
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x446e168
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x446e168
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x446e168
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x446e168
	void OnPaint(out PaintContext Context);// 0x446e168
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x446e168
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x446e168
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x446e168
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x446e168
	void OnMouseCaptureLost();// 0x446e168
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x446e168
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x446e168
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x446e168
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x446e168
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x446e168
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x446e168
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x446e168
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x446e168
	void OnFocusLost(FocusEvent InFocusEvent);// 0x446e168
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x446e168
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x446e168
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x446e168
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x446e168
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOpe* Operation);// 0x446e168
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x446e168
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x5386110
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x3381a6c
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x446e168
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x446e168
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x5385f80
	bool IsPlayingAnimation();// 0x5385f58
	bool IsListeningForInputAction(FName ActionName);// 0x5385ed8
	bool IsInViewport();// 0x5385ca4
	bool IsInteractable();// 0x446e168
	bool IsAnyAnimationPlaying();// 0x5385eb0
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x5385e30
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x5385db0
	Widget* GetWidgetFromName(out const FName Name);// 0x5385d1c
	Pawn* GetOwningPlayerPawn();// 0x5385cf4
	PlayerController* GetOwningPlayer();// 0x3353584
	LocalPlayer* GetOwningLocalPlayer();// 0x5385ccc
	bool GetIsVisible();// 0x5385ca4
	bool GetDontPaintWhenChildEmpty();// 0x5385c7c
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x5385bfc
	Anchors GetAnchorsInViewport();// 0x5385bb8
	Vector2D GetAlignmentInViewport();// 0x5385b78
	void Destruct();// 0x446e168
	void Construct();// 0x446e168
	void AddToViewport(int ZOrder);// 0x5385b00
	bool AddToPlayerScreen(int ZOrder);// 0x5385a80

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 16]
	FText ToolTipText;//[Offset: 0x30, Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 1]
	bool bDisableVolatileInSlateGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9c, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0x9d, Size: 1]
	byte PreservedLayerNum;//[Offset: 0x9e, Size: 1]
	byte Cursor;//[Offset: 0x9f, Size: 1]
	enum Clipping;//[Offset: 0xa0, Size: 1]
	enum Visibility;//[Offset: 0xa1, Size: 1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	enum WidgetVisible;//[Offset: 0xa3, Size: 1]
	bool bOpenReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	bool bReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa8, Size: 4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc4, Size: 12]
	void SetWidgetRender(const enum InWidgetVisible);// 0x538c8c8
	void SetVisibility(enum InVisibility);// 0x538c848
	void SetUserFocus(PlayerController* PlayerController);// 0x538c7d0
	void SetToolTipText(out const FText InToolTipText);// 0x538c62c
	void SetToolTip(Widget* Widget);// 0x538c5b4
	void SetRenderTranslation(Vector2D Translation);// 0x538c544
	void SetRenderTransformPivot(Vector2D Pivot);// 0x538c4d4
	void SetRenderTransform(WidgetTransform InTransform);// 0x538c3fc
	void SetRenderShear(Vector2D Shear);// 0x538c38c
	void SetRenderScale(Vector2D Scale);// 0x538c31c
	void SetRenderAngle(float Angle);// 0x538c2a4
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x538c19c
	void SetKeyboardFocus();// 0x538c188
	void SetIsEnabled(bool bInIsEnabled);// 0x3387cb0
	void SetCursor(byte InCursor);// 0x538c110
	void SetClipping(enum InClipping);// 0x538c098
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x538bfdc
	void ResetCursor();// 0x538bfc8
	void RemoveFromParent();// 0x35bc7e0
	EventReply OnReply__DelegateSignature();// 0x446e168
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x446e168
	bool IsVisible();// 0x538bfa0
	bool IsHovered();// 0x538bf78
	void InvalidateLayoutAndVolatility();// 0x538bf64
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x538bee4
	bool HasUserFocus(PlayerController* PlayerController);// 0x538be64
	bool HasMouseCapture();// 0x538be3c
	bool HasKeyboardFocus();// 0x538be14
	bool HasFocusedDescendants();// 0x538bdec
	bool HasAnyUserFocus();// 0x538bdc4
	enum GetWidgetRender();// 0x538bd9c
	Widget* GetWidget__DelegateSignature();// 0x446e168
	enum GetVisibility();// 0x538bd74
	Geometry GetTickSpaceGeometry();// 0x538bcf4
	Widget* GetTheTemplate();// 0x538bd4c
	FText GetText__DelegateSignature();// 0x446e168
	enum GetSlateVisibility__DelegateSignature();// 0x446e168
	SlateColor GetSlateColor__DelegateSignature();// 0x446e168
	SlateBrush GetSlateBrush__DelegateSignature();// 0x446e168
	PanelWidget* GetParent();// 0x538bd24
	Geometry GetPaintSpaceGeometry();// 0x538bcf4
	PlayerController* GetOwningPlayer();// 0x3353584
	byte GetMouseCursor__DelegateSignature();// 0x446e168
	LinearColor GetLinearColor__DelegateSignature();// 0x446e168
	bool GetIsEnabled();// 0x538bccc
	int GetInt32__DelegateSignature();// 0x446e168
	float GetFloat__DelegateSignature();// 0x446e168
	Vector2D GetDesiredSize();// 0x538bc8c
	enum GetClipping();// 0x538bc64
	enum GetCheckBoxState__DelegateSignature();// 0x446e168
	Geometry GetCachedGeometry();// 0x538bc34
	Geometry GetCachedAllottedGeometry();// 0x538bc04
	bool GetBool__DelegateSignature();// 0x446e168
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x446e168
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x446e168
	void ForceVolatile(bool bForce);// 0x538bb84
	void ForceLayoutPrepass();// 0x538bb70
	void DisableVolatileInSlateGI(bool bDisabled);// 0x538baf0
	void AdaptationWidgetSlot(out const Margin InOffset);// 0x538ba60

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 4]
	Widget* Content;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xd0, Size: 12]
	bool RemoveChildAt(int Index);// 0x5370754
	bool RemoveChild(Widget* Content);// 0x53706d4
	bool HasChild(Widget* Content);// 0x5370654
	bool HasAnyChildren();// 0x537062c
	int GetChildrenCount();// 0x5370604
	int GetChildIndex(Widget* Content);// 0x5370584
	Widget* GetChildAt(int Index);// 0x5370504
	void ClearChildren();// 0x53704f0
	PanelSlot* AddChild(Widget* Content);// 0x5370470

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float Angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98, Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 12]
	FName DestinationProperty;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0xc, Size: 4]
	Field* Field;//[Offset: 0x10, Size: 4]

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: WAnimTime
	float PlayTime;//[Offset: 0x0, Size: 4]
	float PlayTime;//[Offset: 0x4, Size: 4]
	float PlayTime;//[Offset: 0x8, Size: 4]
	float PlayTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220, Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c, Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238, Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c, Size: 12]
	float GetStartTime();// 0x538d864
	float GetEndTime();// 0x538d83c

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x40, Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1d4, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1d8, Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 16]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 12]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 4]
	FloatRange SelectionRange;//[Offset: 0x74, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x84, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float FixedFrameInterval;//[Offset: 0x98, Size: 4]
	float InTime;//[Offset: 0x9c, Size: 4]
	float OutTime;//[Offset: 0xa0, Size: 4]
	float StartTime;//[Offset: 0xa4, Size: 4]
	float EndTime;//[Offset: 0xa8, Size: 4]
	bool bLowDeviceFrameRateLimitEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int LowDeviceFrameLimit;//[Offset: 0xb0, Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c, Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20, Size: 12]
	enum Ownership;//[Offset: 0x2c, Size: 1]
	enum DeviceLevel;//[Offset: 0x2d, Size: 1]
	enum UserQualitySettingLevel;//[Offset: 0x2e, Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c, Size: 4]
	Guid ParentGuid;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 12]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114, Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x14, Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 56]
	FName EvaluationGroup;//[Offset: 0x68, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4, Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34, Size: 16]
	int HierarchicalBias;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 12]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4, Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40, Size: 60]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 4]
	Widget*[] AllWidgets;//[Offset: 0x20, Size: 12]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38, Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c, Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	int ControllerId;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24, Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28, Size: 12]
	World* World;//[Offset: 0x58, Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c, Size: 4]
	void SSSwapControllers();// 0x3431c88
	void ShowTitleSafeArea();// 0x33bb640
	void SetConsoleTarget(int playerIndex);// 0x338b738
	static void RemoveViewportChangeDelegate(out const delegate Delegate);// 0x60032ac
	static void AddViewportChangeDelegate(out const delegate Delegate);// 0x60031ec

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 12]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 4]
	class Object* WithinClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24, Size: 12]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30, Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c, Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	void ReceiveShutdown();// 0x446e168
	void ReceiveInit();// 0x446e168
	void HandleTravelError(byte FailureType);// 0x446e168
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x446e168
	int GetDeviceLevel();// 0x33c5330
	void DebugRemovePlayer(int ControllerId);// 0x5fbf934
	void DebugCreatePlayer(int ControllerId);// 0x36324f4

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x24, Size: 4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x28, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x34, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x40, Size: 4]
	float Priority;//[Offset: 0x44, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x48, Size: 4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x4c, Size: 12]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x58, Size: 4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 12]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 12]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	byte OutputTarget;//[Offset: 0x25, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float EQPriority;//[Offset: 0x20, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 12]
	float InitialDelay;//[Offset: 0x6c, Size: 4]
	float FadeInTime;//[Offset: 0x70, Size: 4]
	float Duration;//[Offset: 0x74, Size: 4]
	float FadeOutTime;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 4]
	float PitchAdjuster;//[Offset: 0x8, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 532]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	byte DistanceType;//[Offset: 0x7e, Size: 1]
	float OmniRadius;//[Offset: 0x80, Size: 4]
	float StereoSpread;//[Offset: 0x84, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0x88, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0x8c, Size: 4]
	float RadiusMin;//[Offset: 0x90, Size: 4]
	float RadiusMax;//[Offset: 0x94, Size: 4]
	float LPFRadiusMin;//[Offset: 0x98, Size: 4]
	float LPFRadiusMax;//[Offset: 0x9c, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xa0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xa4, Size: 88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xfc, Size: 88]
	float LPFFrequencyAtMin;//[Offset: 0x154, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x158, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x15c, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x160, Size: 4]
	float FocusAzimuth;//[Offset: 0x164, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x168, Size: 4]
	float FocusDistanceScale;//[Offset: 0x16c, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x170, Size: 4]
	float FocusPriorityScale;//[Offset: 0x174, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x178, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x17c, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x180, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x184, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x188, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x18c, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x190, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x194, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x198, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x19c, Size: 4]
	enum ReverbSendMethod;//[Offset: 0x1a0, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x1a4, Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x1a8, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x1ac, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x1b0, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x1b4, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1b8, Size: 88]
	float ManualReverbSendLevel;//[Offset: 0x210, Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8, Size: 88]
	byte AttenuationShape;//[Offset: 0x60, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x64, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x68, Size: 12]
	float ConeOffset;//[Offset: 0x74, Size: 4]
	float FalloffDistance;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 12]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 4]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 12]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x1cc, Size: 1]
	float SourceBusDuration;//[Offset: 0x1d0, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 1]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x6c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	int StreamingPriority;//[Offset: 0x74, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 1]
	byte SoundGroup;//[Offset: 0x7a, Size: 1]
	FString SpokenText;//[Offset: 0x7c, Size: 12]
	float SubtitlePriority;//[Offset: 0x88, Size: 4]
	float Volume;//[Offset: 0x8c, Size: 4]
	float Pitch;//[Offset: 0x90, Size: 4]
	int NumChannels;//[Offset: 0x94, Size: 4]
	int SampleRate;//[Offset: 0x98, Size: 4]
	int RawPCMDataSize;//[Offset: 0x9c, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xa0, Size: 12]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xac, Size: 12]
	CurveTable* Curves;//[Offset: 0xb8, Size: 4]
	CurveTable* InternalCurves;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 12]
	float Time;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 12]
	SubtitleCue[] Subtitles;//[Offset: 0xc, Size: 12]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 12]
	Object* Payload;//[Offset: 0x28, Size: 4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 4]
	enum Pivot;//[Offset: 0x30, Size: 1]
	Vector2D Offset;//[Offset: 0x34, Size: 8]
	delegate OnDrop;//[Offset: 0x3c, Size: 12]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 12]
	delegate OnDragged;//[Offset: 0x54, Size: 12]
	void Drop(out const PointerEvent PointerEvent);// 0x5362944
	void Dragged(out const PointerEvent PointerEvent);// 0x5362710
	void DragCancelled(out const PointerEvent PointerEvent);// 0x53624dc

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x308, Size: 4]
	FName MatineeControllerName;//[Offset: 0x310, Size: 8]
	float PlayRate;//[Offset: 0x318, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	float ForceStartPosition;//[Offset: 0x320, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x324, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x324, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x324, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x324, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x328, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x330, Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x340, Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x34c, Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x358, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x358, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x358, Size: 1]
	float InterpPosition;//[Offset: 0x35c, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x364, Size: 1]
	delegate OnPlay;//[Offset: 0x368, Size: 12]
	delegate OnStop;//[Offset: 0x374, Size: 12]
	delegate OnPause;//[Offset: 0x380, Size: 12]
	void Stop();// 0x3363a08
	void SetPosition(float NewPosition, bool bJump);// 0x609b734
	void SetLoopingState(bool bNewLooping);// 0x3684c58
	void Reverse();// 0x3487c10
	void Play();// 0x334c7ac
	void Pause();// 0x3348728
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x609b58c
	void ChangePlaybackDirection();// 0x33492e8

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 4]
	float PathBuildTime;//[Offset: 0x20, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 4]
	float EdSectionStart;//[Offset: 0x34, Size: 4]
	float EdSectionEnd;//[Offset: 0x38, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 12]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 12]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x260, Size: 4]
	Actor* ChildActor;//[Offset: 0x264, Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x268, Size: 4]
	void SetChildActorClass(class Actor InClass);// 0x5fc0eec

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 4]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x446e168
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6076bc0
	bool RemoteEvent(FName EventName);// 0x6076b38
	void LevelReset();// 0x446e168

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x30c, Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x310, Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x314, Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x608, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60c, Size: 1]
	float ScreenSize;//[Offset: 0x610, Size: 4]
	float U;//[Offset: 0x614, Size: 4]
	float UL;//[Offset: 0x618, Size: 4]
	float V;//[Offset: 0x61c, Size: 4]
	float VL;//[Offset: 0x620, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x5fa0f74
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x5fa0ddc
	void SetSprite(Texture2D* NewSprite);// 0x34386b8

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x310, Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31c, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31c, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31c, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31c, Size: 1]
	bool bEnableParallelWorld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31c, Size: 1]
	int[] ParallelWorldIds;//[Offset: 0x320, Size: 12]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x32c, Size: 1]
	float KillZ;//[Offset: 0x330, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x334, Size: 4]
	float WorldGravityZ;//[Offset: 0x338, Size: 4]
	float GlobalGravityZ;//[Offset: 0x33c, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x340, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x344, Size: 4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x348, Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x34c, Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x350, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x358, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x364, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x368, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 1]
	float MaxWorldSize;//[Offset: 0x370, Size: 4]
	int RegionSizeNear;//[Offset: 0x374, Size: 4]
	int RegionSizeFar;//[Offset: 0x378, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	int Graduation;//[Offset: 0x380, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x384, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 1]
	int VisibilityCellSize;//[Offset: 0x38c, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x390, Size: 1]
	bool bDSPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x391, Size: 1]
	bool bUsePrecomputed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x391, Size: 1]
	byte CurrentDSPVSCategory;//[Offset: 0x392, Size: 1]
	<byte,DSPVSParameter> DSPVSCategorys;//[Offset: 0x394, Size: 60]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x3d4, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x424, Size: 100]
	SurfelRayTracingSettings SurfelRayTracingSettings;//[Offset: 0x488, Size: 64]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x4c8, Size: 16]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x4d8, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x4fc, Size: 4]
	float WorldToMeters;//[Offset: 0x500, Size: 4]
	float MonoCullingDistance;//[Offset: 0x504, Size: 4]
	BookMark* BookMarks;//[Offset: 0x508, Size: 4]
	float TimeDilation;//[Offset: 0x530, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x534, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x538, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x53c, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x540, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x544, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x548, Size: 4]
	PlayerState* Pauser;//[Offset: 0x54c, Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x550, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x550, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x554, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x560, Size: 12]
	bool bEnableUnLoadLevelGCMemoryOptimitize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	float[] LODRelativeDistances;//[Offset: 0x570, Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	int WorldCompositionNums;//[Offset: 0x580, Size: 4]
	int CompositionBlockLength;//[Offset: 0x584, Size: 4]
	void OnRep_WorldGravityZ();// 0x334c7ac

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x308, Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x314, Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x318, Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x31c, Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x320, Size: 4]
	class HUD* HUDClass;//[Offset: 0x324, Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x328, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x32c, Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x330, Size: 4]
	GameSession* GameSession;//[Offset: 0x334, Size: 4]
	GameStateBase* GameState;//[Offset: 0x338, Size: 4]
	FText DefaultPlayerName;//[Offset: 0x33c, Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 1]
	void StartPlay();// 0x3428000
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x5fed730
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x5fed600
	bool ShouldReset(Actor* ActorToReset);// 0x5fed56c
	void ReturnToMainMenuHost();// 0x5fed550
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x5fed430
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3609700
	void RestartPlayer(Controller* NewPlayer);// 0x33dbb40
	void ResetLevel();// 0x5fed414
	bool PlayerCanRestart(PlayerController* Player);// 0x5fed38c
	bool MustSpectate(PlayerController* NewPlayerController);// 0x5fed304
	void K2_PostLogin(PlayerController* NewPlayer);// 0x446e168
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x446e168
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x446e168
	void K2_OnLogout(Controller* ExitingController);// 0x446e168
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x446e168
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x5fed1fc
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x5fed138
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x334c7c8
	bool HasMatchStarted();// 0x5fc3240
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x3494aa4
	int GetNumSpectators();// 0x5fc3210
	int GetNumPlayers();// 0x5fbaacc
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x5fed0b0
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x5fecfa0
	Actor* ChoosePlayerStart(Controller* Player);// 0x5fecf18
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x3ecb0d0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x3428298

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x308, Size: 4]
	int MaxPlayers;//[Offset: 0x30c, Size: 4]
	int MaxPartySize;//[Offset: 0x310, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x314, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	FName SessionName;//[Offset: 0x318, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x308, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x30c, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x310, Size: 4]
	PlayerState*[] PlayerArray;//[Offset: 0x314, Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x324, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x328, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x32c, Size: 4]
	void OnRep_SpectatorClass();// 0x364b06c
	void OnRep_ReplicatedWorldTimeSeconds();// 0x35e3d78
	void OnRep_ReplicatedHasBegunPlay();// 0x344a258
	void OnRep_GameModeClass();// 0x34483e8
	bool HasMatchStarted();// 0x3820464
	bool HasBegunPlay();// 0x38c74c4
	float GetServerWorldTimeSeconds();// 0x37ecc2c
	float GetPlayerStartTime(Controller* Controller);// 0x60007b4
	float GetPlayerRespawnDelay(Controller* Controller);// 0x600072c

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x308, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x30c, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x310, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x314, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x318, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x320, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x324, Size: 4]
	int BadPingThreshold;//[Offset: 0x328, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x32c, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x330, Size: 4]
	float PercentForBadPing;//[Offset: 0x334, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x338, Size: 4]
	float MoveRepSize;//[Offset: 0x33c, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x340, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x344, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x348, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x34c, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x350, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x354, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x358, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x35c, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x360, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x364, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x36c, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x374, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x378, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x37c, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x380, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 1]

--------------------------------
Class: DSPVSParameter
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	int DSVisibilityCellSize;//[Offset: 0x4, Size: 4]
	float CellSizeXYInCentimeterWhenCoverWholeMap;//[Offset: 0x8, Size: 4]
	byte DSVisibilityAggressiveness;//[Offset: 0xc, Size: 1]
	int[] DSDebugGroups;//[Offset: 0x10, Size: 12]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: SurfelRayTracingSettings
	bool bAllowSurfelRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	Vector SurfelVoxelSize;//[Offset: 0x4, Size: 12]
	IntVector SurfelHierarchyDimension;//[Offset: 0x10, Size: 12]
	Vector IrradianceVolumeCellSize;//[Offset: 0x1c, Size: 12]
	IntVector IrradianceVolumeDimension;//[Offset: 0x28, Size: 12]
	uint32 IrradianceVolumeCellDim;//[Offset: 0x34, Size: 4]
	uint32 SurfelInjectSingleSize;//[Offset: 0x38, Size: 4]
	uint32 SurfelPoolInitScale;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	byte ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 4]
	float Volume;//[Offset: 0x8, Size: 4]
	float FadeTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c, Size: 4]
	float Diffusion;//[Offset: 0x20, Size: 4]
	float Gain;//[Offset: 0x24, Size: 4]
	float GainHF;//[Offset: 0x28, Size: 4]
	float DecayTime;//[Offset: 0x2c, Size: 4]
	float DecayHFRatio;//[Offset: 0x30, Size: 4]
	float ReflectionsGain;//[Offset: 0x34, Size: 4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 4]
	float LateGain;//[Offset: 0x3c, Size: 4]
	float LateDelay;//[Offset: 0x40, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 12]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 4]
	Actor* InViewer;//[Offset: 0x4, Size: 4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 4]
	Vector ViewLocation;//[Offset: 0xc, Size: 12]
	Vector ViewDir;//[Offset: 0x18, Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20, Size: 8]
	World* WorldAsset;//[Offset: 0x28, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 12]
	Transform LevelTransform;//[Offset: 0x70, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa3, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa3, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa3, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa3, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 1]
	int LevelLODIndex;//[Offset: 0xa8, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 1]
	Color DrawColor;//[Offset: 0xb0, Size: 4]
	LinearColor LevelColor;//[Offset: 0xb4, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc4, Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xd0, Size: 4]
	FString[] Keywords;//[Offset: 0xd8, Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe4, Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xf0, Size: 12]
	delegate OnLevelShown;//[Offset: 0xfc, Size: 12]
	delegate OnLevelHidden;//[Offset: 0x108, Size: 12]
	delegate OnStatusChanged;//[Offset: 0x114, Size: 12]
	Level* LoadedLevel;//[Offset: 0x12c, Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 4]
	Level*[] UnloadingLevels;//[Offset: 0x134, Size: 12]
	bool IsStreamingStatePending();// 0x6077524
	bool IsLevelVisible();// 0x60774fc
	bool IsLevelLoaded();// 0x60774d8
	FName GetWorldAssetPackageFName();// 0x6077498
	Level* GetLoadedLevel();// 0x36c5258
	LevelScriptActor* GetLevelScriptActor();// 0x6077470
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x6077310

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x330, Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 1]
	byte StreamingUsage;//[Offset: 0x33d, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x534, Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x7b4, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ce, Size: 1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cf, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x7ec, Size: 4]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 4]
	Level* Level;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4, Size: 60]
	<FName,ObjectPoolClassConfig> mapClassConfigs;//[Offset: 0x40, Size: 60]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0, Size: 4]
	int ObjectLifePeriodTime;//[Offset: 0x4, Size: 4]
	Object*[] Pool;//[Offset: 0x8, Size: 12]
	<Object*,uint32> RecycleTime;//[Offset: 0x14, Size: 60]
	int Size;//[Offset: 0x50, Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]

--------------------------------
Class: ObjectPoolClassConfig
	FName ObjectClassName;//[Offset: 0x0, Size: 8]
	bool ObjectPoolEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int PoolSize;//[Offset: 0xc, Size: 4]
	int LifePeriodTime;//[Offset: 0x10, Size: 4]
	bool UseOldPoolLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool DisableOnLowMemDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	int BackendSwitchType;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c, Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20, Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x28, Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	enum DataGatheringMode;//[Offset: 0x2d, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x30, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x34, Size: 12]
	float UpdateInterval;//[Offset: 0x40, Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x44, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x48, Size: 12]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x54, Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa8, Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb4, Size: 12]
	enum OperationMode;//[Offset: 0x15c, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x60a69d4
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x60a695c
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x60a689c
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x60a67e8
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x60a6770
	void SetGeometryGatheringMode(enum NewMode);// 0x60a66f8
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x60a66e4
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x60a65e4
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x60a6438
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x60a63c0
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x60a61c0
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x60a5fd0
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x60a5de0
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x60a5bf0
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x60a5b78
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x60a5b00
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x60a5954
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x60a57a8
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x60a55a4
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x60a53a0
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x60a5328
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x60a517c
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x60a4f9c

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 4]
	float TravelCostOverride;//[Offset: 0x4, Size: 4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x330, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c, Size: 12]
	Vector[] PathPoints;//[Offset: 0x28, Size: 12]
	byte RecalculateOnInvalidation;//[Offset: 0x34, Size: 1]
	bool IsValid();// 0x60a4648
	bool IsStringPulled();// 0x34dfb20
	bool IsPartial();// 0x60a4620
	float GetPathLength();// 0x60a45f8
	float GetPathCost();// 0x60a45d0
	FString GetDebugString();// 0x60a4510
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x60a4490
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x60a43c0

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 24]
	FName AISystemModuleName;//[Offset: 0x38, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 4]
	float TestHeightDifference;//[Offset: 0x34, Size: 4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x5fa09bc
	int GetObjectCount();// 0x5fa0994
	int GetNewAvoidanceUID();// 0x5fa096c
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x5fa08dc

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 4]
	<Level*> Levels;//[Offset: 0x14, Size: 60]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 4]
	World* World;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0xd4, Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xe0, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xec, Size: 4]
	FString PVEBordersName;//[Offset: 0xf0, Size: 12]
	FString[] UnloadTileOnServer;//[Offset: 0xfc, Size: 12]
	<FString> UnloadTileSet;//[Offset: 0x108, Size: 60]
	bool bClientUseInitViewpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	Vector ClientInitViewPoint;//[Offset: 0x160, Size: 12]
	LevelStreaming*[] LandScapeStreamingLevel;//[Offset: 0x16c, Size: 12]
	bool SetStreamingDistanceScalePerLevel(out const FName LevelName, float Scale);// 0x6142fa0
	bool SetStreamingDistanceScaleByLayer(FString LayerName, float Scale);// 0x6142e98
	bool SetStreamingDistanceScaleAllLevel(float Scale);// 0x6142e18
	bool RemoveDynamicTile(FString TilePackageNameStr);// 0x6142d54
	LevelStreaming* GetDynamicTile(FString TilePackageNameStr);// 0x6142c90
	void AddEnableStreamingTile(int EnableTileIdx);// 0x6142c18
	void AddEnableStreamingLayer(FString EnableLayerName);// 0x6142ac0
	LevelStreaming* AddDynamicTile(FString TilePackageNameStr, int X, int Y, bool bAllowCopy, bool bDisableDistanceStreaming);// 0x61428d4

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: AkAmbientSound.Actor.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x308, Size: 4]
	AkComponent* AkComponent;//[Offset: 0x30c, Size: 4]
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	void StopAmbientSound();// 0x6db7cf0
	void StartAmbientSound();// 0x6db7cdc

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MinimumDuration;//[Offset: 0x28, Size: 4]
	float MaximumDuration;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x260, Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x264, Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x270, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x274, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x278, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x282, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x284, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x288, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x28c, Size: 4]
	FString EventName;//[Offset: 0x290, Size: 12]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x343d13c
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x6dbee08
	void StopPlayingID(int StopEventID);// 0x6dbed90
	void Stop();// 0x6dbed7c
	int SetSwitch(FString SwitchGroup, FString SwitchState);// 0x6dbeb04
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x6dbea84
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x6dbe8e8
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x6dbe708
	void SetOutputBusVolume(float BusVolume);// 0x6dbe690
	void SetListeners(out const AkComponent*[] Listeners);// 0x6dbe5c4
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x6dbe54c
	void SetAutoDestroy(bool in_AutoDestroy);// 0x6dbe4d0
	void SetAttenuationScalingFactor(float Value);// 0x6dbe458
	int SeekOnEvent(FString in_EventName, int in_iPosition);// 0x6dbe350
	void PostTrigger(FString Trigger);// 0x6dbe1f8
	int PostAssociatedAkEvent();// 0x6dbe1d0
	int PostAkEventByName(FString in_EventName);// 0x6dbe10c
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x6dbe004
	float GetAttenuationRadius();// 0x6dbdfdc
	void GetAkGameObjectName(out FString Name);// 0x6dbdf10

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x340, Size: 1312]
	float Priority;//[Offset: 0x860, Size: 4]
	float BlendRadius;//[Offset: 0x864, Size: 4]
	float BlendWeight;//[Offset: 0x868, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 1]
	void RemoveBlendable(interface classNone InBlendableObject);// 0x60eb024
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x60eaef4

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x310, Size: 4]
	void SetRadius(float NewRadius);// 0x60e8a14
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x60e899c

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x308, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	void ToggleEnabled();// 0x607865c
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x60785ec
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6078574
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x60784fc
	void SetLightColor(LinearColor NewLightColor);// 0x6078480
	void SetEnabled(bool bSetEnabled);// 0x6078400
	void SetCastShadows(bool bNewValue);// 0x6078380
	void SetBrightness(float NewBrightness);// 0x6078308
	void SetAffectTranslucentLighting(bool bNewValue);// 0x6078288
	void OnRep_bEnabled();// 0x33510e0
	bool IsEnabled();// 0x6078260
	LinearColor GetLightColor();// 0x607821c
	float GetBrightness();// 0x60781f4

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x288, Size: 4]
	float MaxDrawDistance;//[Offset: 0x28c, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x290, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	int ShadowMapChannel;//[Offset: 0x298, Size: 4]
	float MinRoughness;//[Offset: 0x2a0, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x2a4, Size: 4]
	int LightPriority;//[Offset: 0x2a8, Size: 4]
	float ShadowBias;//[Offset: 0x2ac, Size: 4]
	float ShadowSharpen;//[Offset: 0x2b0, Size: 4]
	float ContactShadowLength;//[Offset: 0x2b4, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2b9, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2bc, Size: 4]
	Vector LightFunctionScale;//[Offset: 0x2c0, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x2cc, Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	float IESBrightnessScale;//[Offset: 0x2d4, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x2d8, Size: 4]
	float DisabledBrightness;//[Offset: 0x2dc, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	float BloomScale;//[Offset: 0x2e4, Size: 4]
	float BloomThreshold;//[Offset: 0x2e8, Size: 4]
	Color BloomTint;//[Offset: 0x2ec, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2f4, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x60795a4
	void SetTemperature(float NewTemperature);// 0x607952c
	void SetShadowBias(float NewValue);// 0x60794b4
	void SetLightPriority(int Priority);// 0x607943c
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x60793cc
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6079354
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x60792dc
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x6079264
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x607919c
	void SetIntensity(float NewIntensity);// 0x6079124
	void SetIndirectLightingIntensity(float NewIntensity);// 0x60790ac
	void SetIESTexture(TextureLightProfile* NewValue);// 0x6079034
	void SetEnableLightShaftBloom(bool bNewValue);// 0x6078fb4
	void SetBloomTint(Color NewValue);// 0x6078f44
	void SetBloomThreshold(float NewValue);// 0x6078ecc
	void SetBloomScale(float NewValue);// 0x6078e54
	void SetAffectTranslucentLighting(bool bNewValue);// 0x6078dd4
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x6078d54
	void ForceUpdateShadowState();// 0x6078d40

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x260, Size: 16]
	float Brightness;//[Offset: 0x270, Size: 4]
	float Intensity;//[Offset: 0x274, Size: 4]
	Color LightColor;//[Offset: 0x278, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27c, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x280, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x284, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x607bb74
	void SetCastShadows(bool bNewValue);// 0x607baf4
	LinearColor GetLightColor();// 0x607bab0

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xe4, Size: 4]
	float TextureMultiplier;//[Offset: 0xe8, Size: 4]

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x35c, Size: 4]
	float AttenuationRadius;//[Offset: 0x360, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 1]
	float LightFalloffExponent;//[Offset: 0x368, Size: 4]
	float SourceRadius;//[Offset: 0x36c, Size: 4]
	float SoftSourceRadius;//[Offset: 0x370, Size: 4]
	float SourceLength;//[Offset: 0x374, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x37c, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x380, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x388, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x60e9128
	void SetSourceLength(float NewValue);// 0x60e90b0
	void SetSoftSourceRadius(float bNewValue);// 0x60e9038
	void SetSimulateRectLight(bool NewValue);// 0x60e8fb8
	void SetSimulatePortalLight(bool NewValue);// 0x60e8f38
	void SetRectLightSourceWidth(float NewValue);// 0x60e8ec0
	void SetRectLightSourceHeight(float NewValue);// 0x60e8e48
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x60e8dd0
	void SetAttenuationRadius(float NewRadius);// 0x60e8d58

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x308, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	void OnRep_bEnabled();// 0x33510e0

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x288, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x28c, Size: 4]
	TextureCube* ProcessedCubemap;//[Offset: 0x290, Size: 4]
	float SourceCubemapAngle;//[Offset: 0x294, Size: 4]
	int CubemapResolution;//[Offset: 0x298, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x29c, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x2a4, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x2b4, Size: 4]
	float Contrast;//[Offset: 0x2b8, Size: 4]
	float OcclusionExponent;//[Offset: 0x2bc, Size: 4]
	float MinOcclusion;//[Offset: 0x2c0, Size: 4]
	Color OcclusionTint;//[Offset: 0x2c4, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x2c8, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x368, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x61188b8
	void SetOcclusionTint(out const Color InTint);// 0x6118834
	void SetOcclusionExponent(float InOcclusionExponent);// 0x61187bc
	void SetOcclusionContrast(float InOcclusionContrast);// 0x6118744
	void SetMinOcclusion(float InMinOcclusion);// 0x61186cc
	void SetLightColor(LinearColor NewLightColor);// 0x6118650
	void SetIntensity(float NewIntensity);// 0x61185d8
	void SetIndirectLightingIntensity(float NewIntensity);// 0x6118560
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x6118460
	void SetCubemap(TextureCube* NewCubemap);// 0x61183e8
	void RecaptureSky();// 0x61183d4

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x30c, Size: 4]

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x308, Size: 4]

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x260, Size: 4]
	enum ReflectionSourceType;//[Offset: 0x264, Size: 1]
	float Brightness;//[Offset: 0x268, Size: 4]
	float RealtimeBrightness;//[Offset: 0x26c, Size: 4]
	float RealtimeAngle;//[Offset: 0x270, Size: 4]
	Vector RealtimeColor;//[Offset: 0x274, Size: 12]
	Vector CaptureOffset;//[Offset: 0x280, Size: 12]
	bool bUseHighPrecisionNormalize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	float DesaturatedNormalizeRatio;//[Offset: 0x294, Size: 4]
	Vector4 IrradianceMap;//[Offset: 0x2a0, Size: 16]
	Guid StateID;//[Offset: 0x320, Size: 16]
	void SetRealtimeColor(Vector InColor);// 0x60f86b4
	void SetRealtimeBrightness(float InBrightness);// 0x60f863c
	void SetRealtimeAngle(float InAngle);// 0x60f85c4

--------------------------------
Class: DecalBakingActorMgr.DecalBakingActor.Actor.Object
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x34c, Size: 12]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x358, Size: 12]
	float RTCacheLifeTime;//[Offset: 0x364, Size: 4]
	int MaxRTCacheCount;//[Offset: 0x368, Size: 4]
	float RTCacheLifeTimeII;//[Offset: 0x36c, Size: 4]
	int MaxRTCacheCountII;//[Offset: 0x370, Size: 4]
	float TickUpdateCacheInterval;//[Offset: 0x374, Size: 4]
	void ResetDecalBakingRTCacheParam();// 0x3472c58
	static DecalBakingActorMgr* GetWorldInstance(Object* WorldContextObject);// 0x3472be0
	Vector GetSpawanDBPActorLocationByDiyData(out const DIYData InDIYData, SceneComponent* InSceneComponent);// 0x3472aa0
	DecalParameter[] GetRelativeDecalParameterFromWorld(SceneComponent* InSceneComponent);// 0x3472990
	static DecalBakingActorMgr* GetInstance();// 0x3472968
	DecalParameter[] GetDecalParameterFromWorld(Actor* InActor);// 0x3472860
	DecalParameter GetDecalParameter(SceneComponent* InSceneComponent, DecalBakingParameterComponent* InComponent);// 0x3472784
	TextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);// 0x34726c0
	DecalParameter ConvertDIYDataToDecalParam(out const DIYData InDIYData);// 0x34725c0
	DIYData ConvertDecalParamToDIYData(SceneComponent* InSceneComponent, DecalBakingParameterActor* InDBPActor, bool ZProjection);// 0x347248c
	void ClearDecalBackingRTCacheII(enum InType, FString PlayerUID);// 0x34722ec
	void ClearDecalBackingRTCache(enum InType, FString PlayerUID, bool bCacheII);// 0x34720fc

--------------------------------
Class: DecalBakingActor.Actor.Object
	uint32 MaxDecalProcessPerFame;//[Offset: 0x308, Size: 4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x30c, Size: 12]
	void SetMaxDecalProcessPerFame(int InValue);// 0x36a7ec0
	void OnBakingFinished(TextureRenderTarget2D* InRenderTarget);// 0x334c7c8
	int GetMaxDecalProcessPerFame();// 0x33e32fc
	int FindDecalBakingRequestID(TextureRenderTarget2D* RenderTarget);// 0x5fcb6e0
	void EndDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x5fcb668
	void DoCompression(TextureRenderTarget2D* InRenderTarget);// 0x5fcb5f0
	Texture* CompressTexture(TextureRenderTarget2D* InRenderTarget, bool bInRGBA, bool bUsePunchthroughAlpha, bool bUseOptimizeOpaque);// 0x5fcb480
	void CancelDecalBakingRequest(int RequestID);// 0x5fcb408
	void BeginDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x5fcb390
	int BakeDecalForStaticMesh(TextureRenderTarget2D* RenderTarget, StaticMesh* StaticMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x5fcb154
	int BakeDecalForSkeletalMesh(TextureRenderTarget2D* RenderTarget, SkeletalMesh* SkeletalMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x5fcaf18

--------------------------------
Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x4, Size: 4]
	DecalParameter[] DecalParams;//[Offset: 0xc, Size: 12]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DecalParameter
	Texture2D* DecalTe;//[Offset: 0x0, Size: 4]

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xb0, Size: 4]
	int SizeY;//[Offset: 0xb4, Size: 4]
	LinearColor ClearColor;//[Offset: 0xb8, Size: 16]
	byte AddressX;//[Offset: 0xc8, Size: 1]
	byte AddressY;//[Offset: 0xc9, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xca, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xcb, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 1]
	byte OverrideFormat;//[Offset: 0xcd, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: DecalBakingRTCache
	enum DecalBakingType;//[Offset: 0x0, Size: 1]
	FString PlayerUID;//[Offset: 0x4, Size: 12]
	int WeaponAvatarID;//[Offset: 0x10, Size: 4]
	TextureRenderTarget2D* TextureRenderTarget;//[Offset: 0x14, Size: 4]
	float LastActiveTime;//[Offset: 0x18, Size: 4]
	bool bMainRoleRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: DIYData
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	LinearColor Color;//[Offset: 0x4, Size: 16]
	Vector2D Scale;//[Offset: 0x14, Size: 8]
	Vector2D Offset;//[Offset: 0x1c, Size: 8]
	float Rotation;//[Offset: 0x24, Size: 4]
	enum Direction;//[Offset: 0x28, Size: 1]
	LinearColor UVClip;//[Offset: 0x2c, Size: 16]
	LinearColor UVInfo;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: DecalBakingParameterComponent.SceneComponent.ActorComponent.Object
	Texture2D* DecalTexture;//[Offset: 0x260, Size: 4]
	Vector DecalSize;//[Offset: 0x264, Size: 12]
	Vector4 UVScaleBias;//[Offset: 0x270, Size: 16]
	LinearColor TintColor;//[Offset: 0x280, Size: 16]
	Vector4 CropUVScaleBias;//[Offset: 0x290, Size: 16]
	float CropRotation;//[Offset: 0x2a0, Size: 4]
	bool bEnableDepthCompare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	LinearColor GetUVScaleBias();// 0x5fcbf54
	BoxSphereBounds GetDecalBounds();// 0x5fcbf00
	LinearColor GetCropUVScaleBias();// 0x5fcbee0

--------------------------------
Class: DecalBakingParameterActor.Actor.Object
	DecalBakingParameterComponent* DecalBakingParam;//[Offset: 0x308, Size: 4]

--------------------------------
Class: SceneCaptureCameraActor.CameraActor.Actor.Object
	WidgetCaptureComponent2D* SceneCaptureComponent;//[Offset: 0x850, Size: 4]

--------------------------------
Class: WidgetCaptureComponent2D.SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2c4, Size: 1]
	float FOVAngle;//[Offset: 0x2c8, Size: 4]
	float OrthoWidth;//[Offset: 0x2cc, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2d0, Size: 4]
	byte CaptureSource;//[Offset: 0x2d4, Size: 1]
	byte CompositeMode;//[Offset: 0x2d5, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 1312]
	float PostProcessBlendWeight;//[Offset: 0x800, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x810, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x854, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x860, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 1]
	void CaptureScene();// 0x61043d4
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x61042a4

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x25d, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x260, Size: 12]
	Actor*[] HiddenActors;//[Offset: 0x26c, Size: 12]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x278, Size: 12]
	Actor*[] ShowOnlyActors;//[Offset: 0x284, Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 1]
	float LODDistanceFactor;//[Offset: 0x294, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x298, Size: 4]
	int CaptureSortPriority;//[Offset: 0x29c, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x2a0, Size: 12]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x6103d08
	void ShowOnlyActorComponents(Actor* InActor);// 0x6103c90
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x6103c18
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x6103ba0
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x6103b28
	void HideComponent(PrimitiveComponent* InComponent);// 0x6103ab0
	void HideActorComponents(Actor* InActor);// 0x6103a38
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x61039c0
	void ClearHiddenComponents();// 0x61039ac

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x308, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	void OnRep_bEnabled();// 0x33510e0

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x260, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x264, Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x274, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x278, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x27c, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x28c, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x290, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x294, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x2a4, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2b4, Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x2b8, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x2bc, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2cc, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2d0, Size: 4]
	float DirectionalInscatteringGapControl;//[Offset: 0x2d4, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x2d8, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2dc, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2e0, Size: 16]
	float FogHeightFalloff;//[Offset: 0x2f0, Size: 4]
	float FogMaxOpacity;//[Offset: 0x2f4, Size: 4]
	float StartDistance;//[Offset: 0x2f8, Size: 4]
	float FogCutoffDistance;//[Offset: 0x2fc, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x304, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x308, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x30c, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x31c, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x320, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x324, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x32c, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x330, Size: 4]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x340, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x5fe8928
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x5fe88b0
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x5fe87d0
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x5fe8758
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x5fe86e0
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x5fe8664
	void SetVolumetricFogDistance(float NewValue);// 0x5fe85ec
	void SetVolumetricFogAlbedo(Color NewValue);// 0x5fe857c
	void SetVolumetricFog(bool bNewValue);// 0x5fe84fc
	void SetStartDistance(float Value);// 0x5fe8484
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x5fe840c
	void SetInscatteringTextureTint(LinearColor Value);// 0x5fe8390
	void SetInscatteringColorCubemapAngle(float Value);// 0x5fe8318
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x5fe82a0
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x5fe8228
	void SetFogMaxOpacity(float Value);// 0x5fe81b0
	void SetFogInscatteringColor(LinearColor Value);// 0x5fe8134
	void SetFogHeightFalloff(float Value);// 0x5fe80bc
	void SetFogDensity(float Value);// 0x5f9a138
	void SetFogCutoffDistance(float Value);// 0x5fe8044
	void SetDirectionalInscatteringStartDistance(float Value);// 0x5fe7fcc
	void SetDirectionalInscatteringGapControl(float Value);// 0x5fe7f54
	void SetDirectionalInscatteringExponent(float Value);// 0x5fe7edc
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x5fe7e60
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x5fe7da0
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x5fe7ce4

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x310, Size: 4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x612b968
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x612b8f0

--------------------------------
Class: SpotLightComponent.PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x394, Size: 4]
	float OuterConeAngle;//[Offset: 0x398, Size: 4]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 1]
	float NearPlaneOffset;//[Offset: 0x3a0, Size: 4]
	float FarPlaneOffset;//[Offset: 0x3a4, Size: 4]
	float LightShaftConeAngle;//[Offset: 0x3a8, Size: 4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x612be10
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x612bd98

--------------------------------
Class: Bp_MInitv_RandomEvent_Trigger_C.Actor.Object
	void UserConstructionScript();// 0x446e168
	BoxComponent* Box;//[Offset: 0x308, Size: 4]
	FString EventName;//[Offset: 0x30c, Size: 12]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x618, Size: 12]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x5fac95c
	Vector GetUnscaledBoxExtent();// 0x5fac930
	Vector GetScaledBoxExtent();// 0x5fac8dc

--------------------------------
Class: BP_MiniTVSpline_C.Actor.Object
	void UserConstructionScript();// 0x446e168
	SplineComponent* Spline;//[Offset: 0x308, Size: 4]
	bool MoveActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x608, Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x658, Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x66c, Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x680, Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x694, Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x6ac, Size: 4]
	float Duration;//[Offset: 0x6b0, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b6, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b7, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ba, Size: 1]
	float LoopPosition;//[Offset: 0x6bc, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x6c0, Size: 12]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	void UpdateSpline();// 0x61261e0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x612610c
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x6125fac
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x60efe58
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x6125df8
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x6125c98
	void SetSplineWorldPoints(out const Vector[] Points);// 0x6125bc4
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x6125abc
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x612595c
	void SetSplineLocalPoints(out const Vector[] Points);// 0x6125888
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x60efe58
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x6125728
	void SetDrawDebug(bool bShow);// 0x61256a8
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x61255dc
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x61254c8
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x61253f8
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x6125334
	bool IsClosedLoop();// 0x612530c
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x6125278
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x6125194
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x6125100
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x612501c
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x6124f88
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x6124ef4
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x6124e10
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x6124d7c
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6124c58
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6124b84
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6124ab0
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x6124924
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x61247e8
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x61246ac
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6124588
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x612338c
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x61244b4
	byte GetSplinePointType(int PointIndex);// 0x6124434
	float GetSplineLength();// 0x612440c
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x6124330
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x61242a0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x6124210
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x61240ec
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6124018
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6123f44
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6123e34
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6123d70
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6123cac
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6123b88
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6123ab4
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x61239e0
	int GetNumberOfSplinePoints();// 0x61239b8
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6123894
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x61237c0
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x61236ec
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x6123584
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x6123460
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x612338c
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x612330c
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x612328c
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x612320c
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x61230e8
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6123014
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6122f40
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x6122eb0
	float GetCurvatureAtSplinePoint(int PointIndex);// 0x6122e30
	float GetCurvatureAtDistance(float Distance);// 0x6122db0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6122cdc
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6122bf8
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x6122aac
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x61229c8
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x612292c
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6122848
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6122774
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6122690
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x61225ac
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x6122520
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x612243c
	void ClearSplinePoints(bool bUpdateSpline);// 0x61223bc
	void AddSplineWorldPoint(out const Vector Position);// 0x6122330
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x61221d0
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x61220b8
	void AddSplineLocalPoint(out const Vector Position);// 0x612202c
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x6121f10
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x6121e08

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 20]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: Halloween_CarPosition_C.Actor.Object
	void UserConstructionScript();// 0x446e168
	ArrowComponent* Arrow;//[Offset: 0x308, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x30c, Size: 4]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x608, Size: 4]
	float ArrowSize;//[Offset: 0x60c, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	float ScreenSize;//[Offset: 0x614, Size: 4]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x618, Size: 1]
	void SetArrowColor(LinearColor NewColor);// 0x5f97098

--------------------------------
Class: Lobby_Main_int_C.LuaLevelScriptActor.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x360, Size: 4]
	void RegistPersistLevelObjs(FrontendUtils* Utils);// 0x446e168
	void InpActEvt_N_K2Node_InputKeyEvent(Key Key);// 0x446e168
	void InpActEvt_B_K2Node_InputKeyEvent(Key Key);// 0x446e168
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x446e168
	void InpActEvt_BackSpace_K2Node_InputKeyEvent(Key Key);// 0x446e168
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x446e168
	void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x446e168
	void ReceiveTick(float DeltaSeconds);// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void ReceiveEndPlay(byte EndPlayReason);// 0x446e168
	void OnViewportChanged(Vector2D OldViewportSize, Vector2D NewViewportSize);// 0x446e168
	void ExecuteUbergraph_Lobby_Main_int(int EntryPoint, Key K2Node_InputKeyEvent_Key5, FString ___string_Variable, FString ___string_Variable2, Key K2Node_InputKeyEvent_Key2, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputKeyEvent_Key, bool CallFunc_CheckIfMenuOpen_ret, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector K2Node_InputVectorAxisEvent_AxisValue, Key K2Node_InputKeyEvent_Key3, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, LuaBPVar CallFunc_FloatToLVar_ReturnValue, LuaBPVar CallFunc_FloatToLVar_ReturnValue2, LuaBPVar CallFunc_FloatToLVar_ReturnValue3, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, LuaBPVar ___struct_Variable, LuaBPVar CallFunc_RequireAndCallLuaWithArgs_OutA, LuaBPVar CallFunc_RequireAndCallLuaWithArgs_OutB, LuaBPVar CallFunc_RequireAndCallLuaWithArgs_OutC, LuaBPVar CallFunc_RequireAndCallLuaWithArgs_OutD, GameInstance* CallFunc_GetGameInstance_ReturnValue, Key K2Node_InputKeyEvent_Key4, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess2, int CallFunc_PostEventAtLocation_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, float K2Node_Event_DeltaSeconds, FrontendUtils* CallFunc_GetUtils_ReturnValue, FString ___string_Variable3, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, byte K2Node_Event_EndPlayReason, Vector2D K2Node_CustomEvent_OldViewportSize, Vector2D K2Node_CustomEvent_NewViewportSize);// 0x446e168
	void Dispatcher_OpenBox__DelegateSignature(SkeletalMeshActor* NewParam);// 0x446e168
	FrontendUtils* frontUtils;//[Offset: 0x364, Size: 4]
	bool blockBackScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	FName lastSceneCamera;//[Offset: 0x370, Size: 8]
	SettingConfig_C* SetConfig;//[Offset: 0x378, Size: 4]
	delegate Dispatcher_OpenBox;//[Offset: 0x37c, Size: 12]
	Vector2D viewportSize;//[Offset: 0x388, Size: 8]
	float accumTime;//[Offset: 0x390, Size: 4]
	int folderDevice;//[Offset: 0x394, Size: 4]
	SkyLight* SkyLight_1_EdGraph_4_RefProperty;//[Offset: 0x398, Size: 4]
	PointLight* PointLight_0_EdGraph_4_RefProperty;//[Offset: 0x39c, Size: 4]
	DirectionalLight* DirectionalLight_0_EdGraph_4_RefProperty;//[Offset: 0x3a0, Size: 4]
	CameraActor* LobbySecondCam_EdGraph_4_RefProperty;//[Offset: 0x3a4, Size: 4]
	CameraActor* LobbyFirstCam_EdGraph_4_RefProperty;//[Offset: 0x3a8, Size: 4]

--------------------------------
Class: LuaLevelScriptActor.LevelScriptActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x350, Size: 12]
	void UnRegistLuaTick();// 0x720673c
	void RegistLuaTick(float TickInterval);// 0x72078a8

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 4]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x20, Size: 12]
	FName CurrentSceneCameraName;//[Offset: 0x30, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x38, Size: 12]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x44, Size: 60]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x80, Size: 12]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x8c, Size: 60]
	PointLight*[] ScenePointLightList;//[Offset: 0xc8, Size: 12]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xd4, Size: 60]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x110, Size: 60]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x1a8, Size: 12]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x1b4, Size: 4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x1b8, Size: 4]
	FString GlobalUIContainerClassName;//[Offset: 0x1bc, Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x1c8, Size: 12]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x1d4, Size: 60]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x210, Size: 12]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x21c, Size: 60]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x280, Size: 60]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce, bool bAutoFixAspect);// 0x624fcd0
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x624fbb0
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x624f9e0
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x624f780
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x624f560
	void SetAutoFixFovByAspectRatio(CameraActor* CameraActor, bool bInAutoFixFov);// 0x624f498
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x624f3dc
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x624f320
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x624f264
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x624f1a8
	void PopAllPushedUI();// 0x624f194
	void OnAllSceneCamerasRegistered();// 0x3387ff8
	bool IsPushedPanel(out const FName managerName);// 0x624f100
	bool IsNoRenderClient();// 0x624f0d8
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x624ef78
	FString GetUIStackTopSrcTag();// 0x624eeb8
	FString GetUIStackTopDstTag();// 0x624edf8
	FString GetUIStackTop();// 0x624ed38
	CameraActor* GetSceneCamera();// 0x624ed10
	FrontendHUD* GetOwningFrontendHUD();// 0x624ece8
	Object* GetGlobalUIEventDispatcher();// 0x624ecc0
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x624ec40
	void EnableLobbyMainLight(bool NewEnable);// 0x624ebc0
	void ClearAllSceneCameras();// 0x624ebac

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c, Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34, Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40, Size: 4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44, Size: 12]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50, Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0, Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4, Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8, Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac, Size: 4]
	FName CurrentGameStatus;//[Offset: 0xb0, Size: 8]
	FName LastGameStatus;//[Offset: 0xb8, Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	FName PendingGameStatus;//[Offset: 0xc8, Size: 8]
	FString LatestGameStatusURL;//[Offset: 0xd0, Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xdc, Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xe8, Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xf4, Size: 12]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x10c, Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x118, Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x124, Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x130, Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x13c, Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x148, Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x154, Size: 4]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x624e1e4
	void StandAloneSwitchGameStatus(FName InGameStatus, FString Options);// 0x624e030
	void OnPreLoadMap(FString MapName);// 0x624df6c
	void OnPostLoadMapWithWorld(World* World);// 0x624deec
	void OnGameViewportClientCreated();// 0x3365b48
	World* GetWorld();// 0x624debc
	FrontendUtils* GetUtils();// 0x624de94
	PlayerController* GetPlayerController();// 0x624de6c
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x624dd0c
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x624dc8c
	GameViewportClient* GetGameViewportClient();// 0x624dc64
	GameMode* GetGameMode();// 0x624dc3c
	GameInstance* GetGameInstance();// 0x600159c
	Object*[] FindRegistedUIFunctionList(FString strMsg, FString moduleMsg);// 0x624da74
	void EnableGuiTest(bool bEnable);// 0x624d9f4
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget, FString module);// 0x624d8f4
	void ClearLogicManagerListByStatus(FName PendingStatus, bool bIsForceDelete);// 0x624d828
	void ClearLogicManagerByName(FString managerName);// 0x624d6d0

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	int iUIControlState;//[Offset: 0x38, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x3c, Size: 4]
	FName[] GameStatusList;//[Offset: 0x4c, Size: 12]
	class Object[] WidgetUClassList;//[Offset: 0x7c, Size: 12]
	UAEUserWidget*[] WidgetList;//[Offset: 0x88, Size: 12]
	Object*[] DelayMessage_Obj;//[Offset: 0xa4, Size: 12]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x62516f8
	bool IsEnableRemoveDynamicWidgets();// 0x62516d0
	UAEUserWidget*[] GetWidgetList();// 0x6251610
	UAEUserWidget* GetWidgetByName(FString InName);// 0x625154c
	UAEUserWidget* GetWidgetByClass(class Object InClass);// 0x62514cc
	FrontendHUD* GetOwningFrontendHUD();// 0x6000f68
	int GetDefaultSceneCamera();// 0x600109c
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x62512ec

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x204, Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x208, Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x20c, Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x210, Size: 4]
	Property*[] Params;//[Offset: 0x28c, Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x2a0, Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x2b0, Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x2d0, Size: 32]
	float TickRate;//[Offset: 0x2f0, Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f7, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2f8, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x300, Size: 8]
	enum FadingStatus;//[Offset: 0x310, Size: 1]
	float CurrentOpacity;//[Offset: 0x314, Size: 4]
	float FadingInTime;//[Offset: 0x318, Size: 4]
	float FadingOutTime;//[Offset: 0x31c, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 1]
	FString UIMsgPrefix;//[Offset: 0x324, Size: 12]
	FString[] UIMsgFunctionList;//[Offset: 0x330, Size: 12]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	FString MoudleToRegisted;//[Offset: 0x340, Size: 12]
	bool Visible();// 0x625751c
	void UnRegistFromGameFrontendHUD();// 0x6257508
	void SynchronizeBlueprintProperties();// 0x446e168
	void Show();// 0x62574f4
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x625747c
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x6257404
	static void SetOnWidgetShow(delegate onShow);// 0x6257368
	static void SetOnWidgetHide(delegate OnHide);// 0x62572cc
	static void SetOnClearUIStack(delegate onClear);// 0x6257230
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x62570e8
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x6257070
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x6256fac
	void ReceiveShow();// 0x446e168
	void ReceiveHide();// 0x446e168
	void ReceivedMountWidget();// 0x3332384
	void ReceivedInitWidget();// 0x446e168
	void ReCachedUIMsgFunction();// 0x6256f98
	static void PushOpenedUIStack(FString Name);// 0x6256ee4
	static void PopOpenedUIStack(FString curOpen);// 0x6256e30
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x446e168
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x446e168
	void OnRightClicked(Vector2D TempScreenPos);// 0x446e168
	void OnFadeOutFinished();// 0x6256e14
	void OnFadeInFinished();// 0x343ead8
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x446e168
	void OnClicked(Vector2D TempScreenPos);// 0x446e168
	void OnClearUIStack__DelegateSignature();// 0x446e168
	bool IntCompare(int A, int B, enum CompareType);// 0x6256d0c
	void InitWidget(bool Recursive);// 0x6256c8c
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x35d5330
	void Hide();// 0x6256c78
	void HandleUIMessageBattle(FString UIMessage);// 0x6256bbc
	void HandleUIMessage(FString UIMessage);// 0x6256b00
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x625696c
	Widget* GetWidgetContainsName(FString Name);// 0x62568a8
	UAEUserWidget* GetParentWidget();// 0x6256880
	PlayerController* GetOwningPlayer();// 0x3353584
	LogicManagerBase* GetOwningLogicManager();// 0x6256858
	FrontendHUD* GetOwningFrontendHUD();// 0x6256830
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x62567b0
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x6256664
	UserWidget* GetChildWidget(FString WName);// 0x62565a0
	Margin GetAdapation();// 0x6256578
	bool FloatCompare(float A, float B, enum CompareType);// 0x6256470
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget);// 0x62563f8
	void DestroyWidget();// 0x62563e4
	static void ClearOpenedUIStack();// 0x62563d0
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x6256314
	void ClearFunctionCache();// 0x6256300
	void ClearClassWidgetTree();// 0x62562ec
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x354f184

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x354, Size: 12]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x337d2e4
	void RemoveWidget(UserWidget* Widget);// 0x62592e0
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x359a934
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x6259224
	void AddWidgetInternal(UserWidget* Widget);// 0x3844f04
	void AddWidget(UserWidget* Widget);// 0x62591ac

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 12]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAntialiased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 1]
	float RTScale;//[Offset: 0x628, Size: 4]
	enum Space;//[Offset: 0x62c, Size: 1]
	enum TimingPolicy;//[Offset: 0x62d, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x630, Size: 4]
	IntPoint DrawSize;//[Offset: 0x634, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d, Size: 1]
	float RedrawTime;//[Offset: 0x640, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x650, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 1]
	Vector2D Pivot;//[Offset: 0x660, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x66c, Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x670, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x680, Size: 16]
	float OpacityFromTexture;//[Offset: 0x690, Size: 4]
	enum BlendMode;//[Offset: 0x694, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x696, Size: 1]
	UserWidget* Widget;//[Offset: 0x698, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x6ac, Size: 4]
	MaterialInterface* TranslucentMaterialAA;//[Offset: 0x6b0, Size: 4]
	MaterialInterface* TranslucentMaterialAA_OneSided;//[Offset: 0x6b4, Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x6b8, Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x6bc, Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x6c0, Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x6c4, Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x6c8, Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x6cc, Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x6d0, Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x6d4, Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9, Size: 1]
	FName SharedLayerName;//[Offset: 0x6e0, Size: 8]
	int LayerZOrder;//[Offset: 0x6e8, Size: 4]
	enum GeometryMode;//[Offset: 0x6ec, Size: 1]
	float CylinderArcAngle;//[Offset: 0x6f0, Size: 4]
	void SetWidget(UserWidget* Widget);// 0x5394b90
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x5394b14
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x5394a9c
	void SetDrawSize(Vector2D Size);// 0x5394a2c
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x53949b0
	void RequestRedraw();// 0x5394994
	UserWidget* GetUserWidgetObject();// 0x3579a9c
	TextureRenderTarget2D* GetRenderTarget();// 0x539496c
	LocalPlayer* GetOwnerPlayer();// 0x5394944
	MaterialInstanceDynamic* GetMaterialInstance();// 0x539491c
	Vector2D GetDrawSize();// 0x53948dc

--------------------------------
Class: Image.Widget.Visual.Object
	bool bIsEnhancedImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	SlateBrush Brush;//[Offset: 0xd8, Size: 152]
	delegate BrushDelegate;//[Offset: 0x170, Size: 16]
	delegate OnSetBrushAsyncComplete;//[Offset: 0x180, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x190, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1a0, Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 1]
	FString imageSrcPath;//[Offset: 0x1b4, Size: 12]
	float HitTestAreaRadius;//[Offset: 0x1c0, Size: 4]
	bool bFixOverScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	Vector2D ScalePivot;//[Offset: 0x1c8, Size: 8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1d0, Size: 16]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	bool bAsyncLoadImageAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 1]
	SoftObjectPath AsyncLoadResourcePath;//[Offset: 0x1e8, Size: 24]
	void SetOpacity(float InOpacity);// 0x53686b8
	void SetDontPaintWhenColorZero(bool Enable);// 0x5368638
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x53685b8
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x536853c
	void SetBrushResourceFromPathSync(FString ResourcePath);// 0x5368480
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x53683bc
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x53682f8
	void SetBrushFromPathAsync(FString ResourcePath, bool bMatchSize);// 0x53681f0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x5368178
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x5368080
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x5368008
	void SetBrush(out const SlateBrush InBrush);// 0x5367ea0
	void SeFixOverScale(bool Enable);// 0x5367e20
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x5367df8
	bool GetDontPaintWhenColorZero();// 0x5367dd0
	bool GetDontPaintWhenAlphaZero();// 0x5367da8

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20, Size: 152]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x358, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 1]
	int NumSpectators;//[Offset: 0x364, Size: 4]
	int NumPlayers;//[Offset: 0x368, Size: 4]
	int NumBots;//[Offset: 0x36c, Size: 4]
	float MinRespawnDelay;//[Offset: 0x370, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x374, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x378, Size: 4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x37c, Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x388, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	void StartMatch();// 0x380d6b4
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x33ce2e4
	void Say(FString Msg);// 0x5fec098
	void RestartGame();// 0x5fec07c
	bool ReadyToStartMatch();// 0x37d58d4
	bool ReadyToEndMatch();// 0x5fec04c
	void K2_OnSetMatchState(FName NewState);// 0x446e168
	bool IsMatchInProgress();// 0x5fec01c
	bool HasMatchEnded();// 0x5febfec
	FName GetMatchState();// 0x5febfc8
	void EndMatch();// 0x5febfac
	void AbortMatch();// 0x5febf90

--------------------------------
Class: LuaBPVar

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x3353554
	static GameBackendHUD* GetInstance();// 0x3cd113c
	GameFrontendHUD* GetGameFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x3cd10bc
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x3cd103c

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x1c, Size: 4]
	FString BackendUtilsClassName;//[Offset: 0x20, Size: 12]
	BackendUtils* Utils;//[Offset: 0x2c, Size: 4]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x30, Size: 12]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x3c, Size: 60]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x624c574
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x624c4f4

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x3cd0d90

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c, Size: 12]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x28, Size: 12]
	FString ManualTableDirectory;//[Offset: 0x34, Size: 12]
	bool AllowItemTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	UAEDataTable*[] TableObjList;//[Offset: 0x104, Size: 12]
	World* CurWorld;//[Offset: 0x110, Size: 4]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x114, Size: 60]
	<FName,UAEDataTable*> TableObjMap_Mod;//[Offset: 0x150, Size: 60]
	delegate OnTableCreateInFighting;//[Offset: 0x18c, Size: 12]
	FString PathCompressionConfigsPath;//[Offset: 0x264, Size: 12]
	bool bIsPathCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bIsPathCompressionCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	int PathCompressionCacheMaxSize;//[Offset: 0x274, Size: 4]
	bool bTranslationFallBackUnloadDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	bool bShrinkTranslationMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	FString BaseTableRelativeDir;//[Offset: 0x280, Size: 12]
	FString ModTableRelativeDir;//[Offset: 0x28c, Size: 12]
	<FName,ModTable*> ModTableMap;//[Offset: 0x298, Size: 60]
	<FName,UAEDataTable*> ModTableObjMap;//[Offset: 0x2d4, Size: 60]
	UAEDataTable*[] InGameTableObjList;//[Offset: 0x310, Size: 12]
	<FName,bool> CheckNeedModMap;//[Offset: 0x31c, Size: 60]
	FString CurrentModName;//[Offset: 0x358, Size: 12]
	FString EmptyModName;//[Offset: 0x364, Size: 12]
	<FString,BaseTableResMap*> LoadedTableMap;//[Offset: 0x370, Size: 60]
	<FString,bool> CheckMapTable;//[Offset: 0x3ac, Size: 60]
	<FString,DataTableProxy*> TableCache;//[Offset: 0x3e8, Size: 60]
	void ReleaseTable(FName TableFName);// 0x3a2bcbc
	UAEDataTable* GetTablePtr_Mod(FName tableName);// 0x3a2bc3c
	UAEDataTable* GetTablePtr(FName tableName, bool bCheckModTable);// 0x3a2bb68
	BaseTableResMap* GetTableMap(FString tableName);// 0x3a2baa4
	static bool GetTableData(FString tableName, FString Key, out TableRowBase OutRow);// 0x3a2b1b8
	static UAETableManager* GetInstance();// 0x3a2b190
	static FString GetDomainByID(const int ID);// 0x3a2b090
	static UAEDataTable* GetDataTableStatic_Mod(FString tableName);// 0x3a2afd4
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x3a2af18
	DataTableProxy* GetDataTableProxy(FString tableName, bool bTempory);// 0x3a2ae08

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0x7c, Size: 60]
	bool SetTableData_String(FString KeyValue, FString TagName, FString Value);// 0x62542ac
	bool SetTableData_Int32(FString KeyValue, FString TagName, int Value);// 0x6254120
	bool SetTableData_Float(FString KeyValue, FString TagName, float Value);// 0x6253f94
	FString GetTableName();// 0x6253ed4
	FString GetRealTableName(FString tableName);// 0x6253d90
	bool ConditionAddEmptyRow(out const FName RowName);// 0x6253cfc

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: ModTable.Object

--------------------------------
Class: BaseTableResMap.Object
	ScriptStruct* DataStruct;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: DataTableProxy.Object
	DataTable* ModDataTable;//[Offset: 0x1c, Size: 4]
	DataTable* DataTable;//[Offset: 0x20, Size: 4]
	DataTableRowDesc* Desc;//[Offset: 0x9c, Size: 4]

--------------------------------
Class: DataTableRowDesc.Object

--------------------------------
Class: TableRowBase

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnHandleWebviewActionDelegate;//[Offset: 0x15c, Size: 12]
	delegate OnGetTicketNotifyDelegate;//[Offset: 0x168, Size: 12]
	delegate OnHandleServerListDownload;//[Offset: 0x174, Size: 12]
	delegate OnUIStatReport;//[Offset: 0x180, Size: 12]
	delegate OnReportClientTool;//[Offset: 0x18c, Size: 12]
	FString CSVTableRelativeDir;//[Offset: 0x198, Size: 12]
	<FName,FString> GameStatusMap;//[Offset: 0x1a4, Size: 60]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bEnableReportMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 1]
	GVoiceInterface* GVoice;//[Offset: 0x1f4, Size: 4]
	bool IsNewGVoiceCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	BugReporter* GameBugReporter;//[Offset: 0x1fc, Size: 4]
	GMLogShare* LogShare;//[Offset: 0x200, Size: 4]
	int MaxUpdateRetryTimes;//[Offset: 0x204, Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x210, Size: 4]
	Translator* Translator;//[Offset: 0x214, Size: 4]
	HttpWrapper* HttpWrapper;//[Offset: 0x218, Size: 4]
	GCPufferDownloader* GPuffer;//[Offset: 0x21c, Size: 4]
	LaggingReporter* LaggingReporter;//[Offset: 0x220, Size: 4]
	AsyncTaskDownloader* DownloadTask;//[Offset: 0x228, Size: 4]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x273, Size: 1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bEnableEditorPufferDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	CDNUpdate* CDNUpdater;//[Offset: 0x28c, Size: 4]
	int ODPaksPoolSize;//[Offset: 0x290, Size: 4]
	int ODPaksPoolSizeLowend;//[Offset: 0x294, Size: 4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x298, Size: 4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	FName UnrealNetworkStatus;//[Offset: 0x2c0, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x2d8, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x2ec, Size: 4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	FString[] PersistentLuaManager;//[Offset: 0x2f4, Size: 12]
	bool bPatchReInitSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x308, Size: 4]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x30c, Size: 4]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x310, Size: 4]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x314, Size: 4]
	FString ScriptBPRelativeDir;//[Offset: 0x31c, Size: 12]
	FString ScriptRelativeDir;//[Offset: 0x328, Size: 12]
	FString InGameLuaDir;//[Offset: 0x334, Size: 12]
	FString PreloadLuaFileRelativePath;//[Offset: 0x340, Size: 12]
	FString[] LuaDirList;//[Offset: 0x34c, Size: 12]
	FString[] NoGCPackage;//[Offset: 0x358, Size: 12]
	float LuaTickTime;//[Offset: 0x364, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	int PingFirstReportIntervalSecond;//[Offset: 0x388, Size: 4]
	int PingReportIntervalSecond;//[Offset: 0x38c, Size: 4]
	int LossSyncIntervalSecond;//[Offset: 0x390, Size: 4]
	int PlayerStatusReportIntervalSecond;//[Offset: 0x394, Size: 4]
	int vmInstrumentOptimization;//[Offset: 0x398, Size: 4]
	TssManager* TssMgr;//[Offset: 0x39c, Size: 4]
	float PingReportInterval;//[Offset: 0x3c0, Size: 4]
	int64 DeactivatedThreshold;//[Offset: 0x4a0, Size: 8]
	int64 TimePassThreshold;//[Offset: 0x4a8, Size: 8]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x4b0, Size: 4]
	delegate UIStackChangeDelegate;//[Offset: 0x4b4, Size: 12]
	delegate UIStackRecoverDelegate;//[Offset: 0x4c0, Size: 12]
	delegate OnFRefreshAdaptationUIEvent;//[Offset: 0x4cc, Size: 12]
	delegate OnFRefreshAdaptationExUIEvent;//[Offset: 0x4d8, Size: 12]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x540, Size: 4]
	int FpsForWindowClient;//[Offset: 0x544, Size: 4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x548, Size: 4]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	int GDPRUserType;//[Offset: 0x558, Size: 4]
	bool bShouldShowAdaptTipInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	float fLaggingFPSDiffThreshold;//[Offset: 0x560, Size: 4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x564, Size: 4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x568, Size: 4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x56c, Size: 4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x570, Size: 4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x574, Size: 4]
	float fFPSReportInterval;//[Offset: 0x578, Size: 4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	Package*[] NoGcPackages;//[Offset: 0x590, Size: 12]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59f, Size: 1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 1]
	bool bCheckWorldNameForLoadConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 1]
	ColorBlindnessMgr* ColorBlindnessMgrInstace;//[Offset: 0x62c, Size: 4]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x630, Size: 12]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x640, Size: 4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x644, Size: 4]
	FString BattleUtilsClassName;//[Offset: 0x648, Size: 12]
	BattleUtils* BattleUtils;//[Offset: 0x654, Size: 4]
	delegate OnImagePickDetectEvent;//[Offset: 0x660, Size: 16]
	delegate OnPermissionResultEvent;//[Offset: 0x670, Size: 16]
	FString CurrentMapName;//[Offset: 0x680, Size: 12]
	void VNGPostPersonalInfo(FString OpenID, FString Name, FString passportId, FString email, FString phone, FString address);// 0x3cd4db8
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x3cd4c60
	void TimeStatisticStop(int Type, FString Name);// 0x3cd4ac0
	void TimeStatisticStart(int Type);// 0x3cd4a48
	void TickUdpCollector(float DeltaTime);// 0x3cd49d0
	void StatisVisibilityWidget(Widget* Widget);// 0x34fdbfc
	void StatisLoadedTexture(Texture* Texture);// 0x34fdbfc
	bool StartGrayUpdate();// 0x3cd49a8
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x3cd4994
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x3cd4980
	void ShutdownUnrealNetwork();// 0x35bc7fc
	void SetShouldShowAdaptTipInLobby(bool bShoudShow);// 0x3cd4900
	void SetGameSubMode(FString SubMode);// 0x3cd4844
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x3cd4698
	void SetClientEnterBattleStage(FString InStageStr);// 0x3cd45dc
	void SetAccountByWebLogin(int Channel, FString OpenID, FString userId, FString TokenID, const int ExpireTime);// 0x3cd4388
	void RetryDownload();// 0x3cd4374
	void RetryCDNDownload();// 0x3cd4360
	void RequestPhotoPermission(delegate PermissionResultEvent);// 0x3cd42bc
	void RequestCameraPermission(delegate PermissionResultEvent);// 0x3cd4218
	void ReportNetContinuousSaturate();// 0x3cd4204
	void ReleaseBattleUtils();// 0x3cd41f0
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x3cd414c
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x3cd3f84
	void PickImageDetectQRCode(delegate ImagePickDetectEvent);// 0x3cd3ee0
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x3cd3dd8
	void OnWebviewActionNotify(FString URL);// 0x3cd3c80
	void OnUAAssistantEvent(out const UAAssistantInfoWrapper UAAssistentInfo);// 0x3cd3b74
	void OnSDKCallbackEvent(out const SDKCallbackInfoWrapper sdkCallbackInfo);// 0x3cd3a68
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x3cd399c
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x3cd37ac
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x3cd36a0
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x3cd3590
	void OnNotUpdateFinished();// 0x3cd357c
	void OnLoginFlowNotify(int _Flow, int _Param, FString ExtraData);// 0x3cd3394
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x3cd32d8
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x3cd3218
	void OnGetTicketNotify(FString Ticket);// 0x3cd30c0
	void OnGetShortUrlNotify(int Ret, FString ShortUrl);// 0x3cd2f20
	void OnGetCountryNoNotify(int country);// 0x3cd2ea8
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x3cd2d64
	void OnGCloudNetStateChangeNotify(int State, int EventParam1, int EventParam2, int EventParam3);// 0x3cd2c1c
	void OnGameMasterEvent(FString EventName, int Ret);// 0x3cd2a80
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x3cd2978
	void OnAreaChanged(FString InArea);// 0x3cd28bc
	void NotifyLoadingUIOperation(int OperationType);// 0x3cd2844
	void MakeToSuppotAdaptation(PanelSlot* PanelSlot);// 0x3cd27cc
	void LuaDoString(FString LuaString);// 0x3cd2708
	bool IsWindowOB();// 0x34dfb20
	bool IsInstallPlatform(FString PlatForm);// 0x3cd25a8
	bool IsCEHideLobbyUI();// 0x3cd2580
	bool HasAnyNetMsgToHandle();// 0x3cd2558
	bool GetWidgetRenderCanChange();// 0x3cd2530
	SaveGame* GetUserSettings();// 0x33c3dec
	GDolphinUpdater* GetUpdater();// 0x38d0dc0
	Translator* GetTranslator();// 0x3cd2514
	bool GetShouldShowAdaptTipInLobby();// 0x3cd24ec
	SettingSubsystem* GetSettingSubsystem();// 0x3cd24c4
	GCPufferDownloader* GetPufferDownloader();// 0x3cd24a8
	FString GetPlayerStatusReportInfo();// 0x3cd23e8
	FString GetPingReportInfo();// 0x3cd2328
	int GetPhotoPermission();// 0x3cd2300
	FString GetPacketLossReportInfo();// 0x3cd2240
	LuaStateWrapper* GetLuaStateWrapper();// 0x358ebb4
	LuaEventBridge* GetLuaEventBridge();// 0x3cd2218
	LuaBlueprintMgr* GetLuaBlueprintSysMgr();// 0x3cd21f0
	HttpWrapper* GetHttpWrapper();// 0x3cd21d4
	GVoiceInterface* GetGVoiceInterface();// 0x33c3aec
	FString GetGameSubMode();// 0x3cd216c
	GameStateBase* GetGameState();// 0x3cd2144
	FString GetFPSReportInfo();// 0x3cd2084
	EffectSettingMgr* GetEffectSettingMgr();// 0x3cd2054
	int GetDetailNetInfoFromGCloud();// 0x33a3d0c
	ColorBlindnessMgr* GetColorBlindnessMgr();// 0x36324c4
	Object* GetClientNetObj();// 0x3cd202c
	FString GetClientEnterBattleStage();// 0x3cd1fc4
	int GetCameraPermission();// 0x3cd1f9c
	BugReporter* GetBugReporter();// 0x3cd1f74
	BattleUtils* GetBattleUtils();// 0x3cd1f4c
	FString GetBattleIDHexStr();// 0x3cd1e8c
	int GetAutoRunModID();// 0x33a3d0c
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x3cd1e64
	void FinishModifyUserSettings();// 0x3cd1e50
	void EnableFPSAndMemoryLog(bool bEnable);// 0x3cd1dd0
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x3cd1d48
	void DispatchConfirmMisKill(FString KillerName);// 0x3cd1c9c
	Texture2D* CreateQRCodeTexture(FString Text);// 0x3cd1bd8
	void CreateBattleUtils();// 0x3cd1bc4
	void CallGlobalScriptFunction(FString InFunctionName);// 0x3cd1b00
	void BeginModifyUserSettings();// 0x3cd1aec
	void BattleUtilsGameEnd();// 0x3cd1ad8
	void AfterLoadedEditorLogin();// 0x3cd1ac4
	void AddAdaptationWidgetDelegateEx(PanelSlot* PanelSlot);// 0x3cd1a4c
	void AddAdaptationWidgetDelegate(PanelSlot* PanelSlot);// 0x3cd19d4

--------------------------------
Class: GVoiceInterface.Object
	int lbsRoomMemberID;//[Offset: 0x24, Size: 4]
	delegate CheckTempLbsRoomOnJoinRoom;//[Offset: 0x40, Size: 16]
	delegate CheckTempLbsRoomOnQuitRoom;//[Offset: 0x50, Size: 16]
	delegate OnSTTReportCallback;//[Offset: 0x60, Size: 16]
	delegate OnRSTSCallback;//[Offset: 0x70, Size: 16]
	delegate OnRSTSSpeechToTextCallback;//[Offset: 0x80, Size: 16]
	FString ServerInfo;//[Offset: 0x9c, Size: 12]
	uint32 openGvoiceLog;//[Offset: 0xa8, Size: 4]
	uint32 MicVolumeMUFactor;//[Offset: 0xac, Size: 4]
	uint32 SpeekerVolumeMUFactor;//[Offset: 0xb0, Size: 4]
	int RoomOperationTimeout;//[Offset: 0xb4, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 4]
	delegate OpenMicFail;//[Offset: 0x130, Size: 16]
	delegate OpenMicSuccess;//[Offset: 0x140, Size: 16]
	delegate CloseMicFail;//[Offset: 0x150, Size: 16]
	delegate CloseMicSuccess;//[Offset: 0x160, Size: 16]
	delegate OpenSpeakerFail;//[Offset: 0x170, Size: 16]
	delegate OpenSpeakerSuccess;//[Offset: 0x180, Size: 16]
	delegate CloseSpeakerFail;//[Offset: 0x190, Size: 16]
	delegate CloseSpeakerSuccess;//[Offset: 0x1a0, Size: 16]
	delegate JoinRoomFail;//[Offset: 0x1b0, Size: 16]
	delegate JoinRoomNotify;//[Offset: 0x1c0, Size: 16]
	delegate QuitRoomNotify;//[Offset: 0x1d0, Size: 16]
	delegate JoinLbsRoomNotify;//[Offset: 0x1e0, Size: 16]
	delegate QuitLbsRoomNotify;//[Offset: 0x1f0, Size: 16]
	delegate RoomStatusUpdatedNotify;//[Offset: 0x200, Size: 16]
	delegate SetAppInfoSuccess;//[Offset: 0x210, Size: 16]
	delegate SetAppInfoFail;//[Offset: 0x220, Size: 16]
	delegate GetReconnectInfo;//[Offset: 0x230, Size: 16]
	delegate ImSpeakingNotify;//[Offset: 0x240, Size: 16]
	delegate TestMicFail;//[Offset: 0x250, Size: 16]
	delegate TestMicSuccess;//[Offset: 0x260, Size: 16]
	delegate QuitRoomFail;//[Offset: 0x270, Size: 16]
	delegate DownLoadFileNotify;//[Offset: 0x280, Size: 16]
	delegate SpeechToTextNotify;//[Offset: 0x290, Size: 16]
	delegate UploadFileNotify;//[Offset: 0x2a0, Size: 16]
	delegate ApplyMessageKeyNotify;//[Offset: 0x2b0, Size: 16]
	delegate MemberIsSpeakingNotify;//[Offset: 0x2c0, Size: 16]
	delegate LbsMemberIsSpeakingNotify;//[Offset: 0x2d0, Size: 16]
	delegate OnMuteSwitchResult;//[Offset: 0x2e0, Size: 16]
	delegate ReportVoiceTimeToServer;//[Offset: 0x2f0, Size: 16]
	delegate RecordSuccess;//[Offset: 0x300, Size: 16]
	delegate RecordFail;//[Offset: 0x310, Size: 16]
	delegate UploadSuccess;//[Offset: 0x320, Size: 16]
	delegate UploadFail;//[Offset: 0x330, Size: 16]
	delegate SpeechToTextSuccess;//[Offset: 0x340, Size: 16]
	delegate SpeechToTextFail;//[Offset: 0x350, Size: 16]
	delegate DownloadFileSuccess;//[Offset: 0x360, Size: 16]
	delegate DownloadFileFail;//[Offset: 0x370, Size: 16]
	delegate EnableRoomMicrophone;//[Offset: 0x380, Size: 16]
	delegate ExitInfectionGameMode;//[Offset: 0x390, Size: 16]
	delegate JoinInfectionGameMode;//[Offset: 0x3a0, Size: 16]
	delegate RequestPrivacyInSetting;//[Offset: 0x3b0, Size: 16]
	delegate OnReportPlayerCallback;//[Offset: 0x3c0, Size: 16]
	delegate OnGVoiceEvent;//[Offset: 0x3d0, Size: 16]
	int VoiceSpeechToText(FString InFileID, int InTimeout, int InLanguage);// 0x3ce6dd8
	void UploadRecordFile(bool InPermanent);// 0x3ce6d58
	int UploadRecordedFile(FString InFilePath, int InTimeout, bool InPermanent);// 0x3ce6c04
	int UpdateVoiceCoordinate(FString InRoomName, int64 X, int64 Y, int64 Z, int64 Radius);// 0x3ce6a08
	void TestMic();// 0x3ce69f4
	bool TeamSpeakerEnable();// 0x3ce69d8
	bool TeamMicphoneEnable();// 0x3ce69bc
	void SwitchMode(enum CharMode);// 0x3ce6944
	void SwitchMicphoneWhenCorpsMode();// 0x3ce6930
	void SwitchCampRoom(enum campMode);// 0x3ce68b8
	int StopRecording();// 0x3ce6890
	void StopRecord();// 0x3ce687c
	void StopPlayRecordFile();// 0x3ce6868
	void StopInterphone();// 0x3ce6854
	void StopCampMode();// 0x3ce6840
	int StartRecording(FString InFilePath, bool InNotVoip);// 0x3ce6730
	void StartRecord();// 0x3ce671c
	void StartInterphone();// 0x3ce6708
	void StartCampMode(FString ZombieCampRoomName, FString ManCampRoomName, FString userId);// 0x3ce6544
	void SpeechToText();// 0x3ce6530
	void ShowOpenSpeakerAtFirstMsg();// 0x35bc7fc
	void ShowCorpsModeCannotUseLBSVoice();// 0x36ac494
	void SetVoiceServer(FString ServerInfo);// 0x3ce6474
	void SetVoiceMode(int Type);// 0x3ce63fc
	void SetSpeakerVolum(float Value);// 0x3ce6384
	void SetSpeakerStatus(bool Flag);// 0x3ce6304
	int SetServerInfo(FString URL, FString InDefaultIpSvr);// 0x3ce61bc
	void SetRoomOperationTimeout(int InTimeout);// 0x3ce6144
	void SetReportBufferTime(int nTimeSec);// 0x3ce60cc
	void SetPlayerVolume(FString InPlayerId, int InVol);// 0x3ce5f30
	int SetNotify();// 0x3ce5f08
	int SetMode(int InGVMode);// 0x3ce5e88
	void SetMicphoneVolum(float Value);// 0x3ce5e10
	void SetMicphoneStatus(bool Flag);// 0x3ce5d90
	void SetLbsVoiceRadius(float Radius);// 0x3ce5d1c
	void SetLbsRoomEnableStatus(bool Flag);// 0x3ce5c9c
	void SetGVoiceSupportBackgroundChat(bool isSupportBGChat);// 0x3ce5c1c
	void SetGVoiceChatServiceEnable(bool IsEnable);// 0x3ce5b9c
	void SetGMServerUrl(FString InServerUrl);// 0x3ce5aa0
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x3ce5a28
	void SetFeature(int8 InFeature, bool Inactive);// 0x3ce5964
	void SetCurrentDownloadFieldID(FString filedId);// 0x3ce57cc
	int SetAppInfo(FString InAppId, FString InAppKey, FString InOpenId);// 0x3ce5600
	void SetAllVoiceStatus(bool Flag);// 0x343ee18
	void RSTSStopRecording();// 0x3ce55ec
	int RSTSSpeechToText(int InSrcLang);// 0x3ce556c
	void ResetWhenLogOut();// 0x3ce5558
	bool ReportPlayers(FString InExtraInfo, FString[] InOpenids);// 0x3ce522c
	int ReportFileForAbroad(FString InFilePath, bool InTranslate, bool InChangeVoice, int InTime);// 0x3ce5080
	void ReactiveLbsStatus();// 0x3ce506c
	int QuitVoiceRoom(FString InRoomName);// 0x3ce4fa8
	void QuitTempLbsRoom(FString roomStr);// 0x3ce4e50
	void QuitRoom();// 0x3ce4e3c
	void QuitCommonRoom(FString InRoomName);// 0x3ce4d80
	int Poll();// 0x3ce4d58
	void PlayRecordFile();// 0x3ce4d44
	int PlayRecordedFile(FString InDownloadInFilePath);// 0x3ce4c80
	int OpenVoiceSpeaker();// 0x3ce4c58
	int OpenVoiceMic();// 0x3ce4c30
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x3ce4bb0
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x3ce4b28
	int OpenTeamInterphone();// 0x3ce4b00
	void OpenSpeakerByTempLbs(bool Open);// 0x3ce4a80
	int OpenSpeaker();// 0x3ce4a58
	void OpenMicByTempLbs(bool Open);// 0x3ce49d8
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x3ce49c4
	int OpenMic();// 0x3ce499c
	void OpenIngameSpeaker();// 0x3ce4988
	int OpenIngameMicphone();// 0x3ce4960
	void OpenAllSpeaker(bool ShowTips);// 0x3ce48e0
	int OpenAllMicphone(bool ShowTips);// 0x3ce4858
	int OpenAllInterphone();// 0x3ce4830
	void OnRoomTypeChanged(FString itemtext);// 0x3ce4704
	void OnResume();// 0x3ce46f0
	void OnPause();// 0x3ce46dc
	bool LbsSpeakerEnable();// 0x3ce46c0
	bool LbsMicphoneEnable();// 0x3ce46a4
	void JoinTempLbsRoom(FString room, FString userId);// 0x3ce4434
	int JoinTeamRoom(FString InRoomName);// 0x3ce4370
	void JoinRoom(FString room, FString userId);// 0x3ce4100
	int JoinRangeRoom(FString InRoomName);// 0x3ce403c
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x3ce3dcc
	void JoinCommonRoom(FString InRoomName);// 0x3ce3d10
	bool IsTeamInterphoneOpenned();// 0x3ce3cf4
	bool IsSpeaking();// 0x3ce3ccc
	bool IsNewGVoiceInterface();// 0x3ce3cb0
	bool IsLbsInterphoneOpenned();// 0x3ce3c94
	bool IsInterphoneMode();// 0x3ce3c58
	bool IsGVoiceEnable();// 0x3ce3c30
	bool IsEnableCivilFile();// 0x3ce3c08
	int Invoke(uint32 InCmd, uint32 InParam1, uint32 InParam2, FString InExterInfo);// 0x3ce3a74
	void InitGVoiceComponent(FString userId);// 0x3ce391c
	int InitGVoice();// 0x3ce38f4
	void Init();// 0x3ce38e0
	bool HaveTeamRoom();// 0x3ce38b8
	bool HaveLbsRoom();// 0x3ce3890
	float GetVoiceLength();// 0x3ce3868
	FString GetTeamRoomName();// 0x3ce37a8
	int GetRoomStatus(FString InRoomName);// 0x3ce36e4
	int GetPlayerVolume(FString InPlayerId);// 0x3ce3584
	int GetMicState();// 0x3ce355c
	FString GetLocalRecordFilePath(FString InFileName);// 0x3ce3418
	FString GetLbsRoomName();// 0x3ce3358
	FString GetGMServerUrl();// 0x3ce3240
	void GetAuthKey();// 0x3ce322c
	int GetAudioDeviceConnectionState();// 0x3ce3204
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x3ce3140
	int ForbidMemberVoice(int InMember, bool InEnable, FString InRoomName);// 0x3ce2fe8
	void ForbidLbsMemberVoiceById(int memberID, bool IsEnable);// 0x3ce2f24
	void EnbleMicAndSpeakerByRoomName(FString RoomName, bool Enable);// 0x3ce2d7c
	void EnableVoiceChat(bool InEnable);// 0x3ce2cfc
	int EnableRoomSpeaker(FString InRoomName, bool InEnable);// 0x3ce2bec
	int EnableReportForAbroad(bool InIsWholeRoundaudit);// 0x3ce2b64
	bool EnableReportALLAbroad(bool InEnable, bool InWithEncryption, int InTimeout);// 0x3ce2a44
	int EnableMultiRoom(bool InEnable);// 0x3ce29bc
	void EnableLog(bool InEnable);// 0x3ce293c
	int EnableGVoiceRoomMicrophone(FString InRoomName, bool InEnable);// 0x3ce282c
	int EnableCivilFile(bool Enable);// 0x3ce27a4
	void DownloadRecordFile(bool InPermanent);// 0x3ce2724
	int DownloadRecordedFile(FString InFileID, FString InDownloadInFilePath, int InTimeout, bool InPermanent);// 0x3ce2548
	void CommonTestMic();// 0x3ce2534
	int CloseVoiceSpeaker();// 0x3ce250c
	int CloseVoiceMic();// 0x3ce24e4
	void CloseSpeaker();// 0x3ce24d0
	void CloseMic();// 0x3ce24bc
	void CloseIngameSpeaker();// 0x3431c88
	void CloseIngameMicphone();// 0x33bb640
	void CloseAllSpeaker(bool ShowTips);// 0x3ce243c
	void CloseAllMicphone(bool ShowTips);// 0x3ce23bc
	int CheckDeviceMuteState();// 0x3ce2394
	void CheckAndEnableRoomSpeaker();// 0x3ce2380
	void ChatShowAgeRestrictionMsgInLobby();// 0x36ab230
	void ChatShowAgeRestrictionMsgInFighting();// 0x3ce2364
	void ChatShowAgeRestrictionMsgInChat();// 0x3387ff8
	void ChatRequestPrivacyInSetting();// 0x3ce2350
	void ChatRequestPrivacyInGame();// 0x3ce233c
	int ApplyMessageKey();// 0x3ce2314
	void AlwaysDisableRoomMic(FString InRoomName, bool WithClear);// 0x3ce220c

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x3cc3b84
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x3cc37a0
	void ReadZipLog(FString Filename);// 0x3cc3648
	byte[] CompressLog(bool pullAllLog);// 0x3cc3538

--------------------------------
Class: GMLogShare.Object
	static void ShareLogFile();// 0x37545c8
	static void Init();// 0x3ce1b34

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x50, Size: 60]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x124, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x128, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x12c, Size: 4]
	bool EnableRandomBackupURL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool EnablePufferUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	FString UpdateInfoPath;//[Offset: 0x144, Size: 12]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	void StartAppUpdate();// 0x3cdb51c
	void SetEnableCDNGetVersion(bool Enable);// 0x3cdb49c
	void OnUpdateError(int curVersionStage, int ErrorCode);// 0x3cdb3e0
	void OnDolphinBGDownloadDone();// 0x3cdb3cc
	void OnAreaChanged(FString InArea);// 0x3cdb310
	bool IsUpdating();// 0x3cdb2e8
	bool IsInstallInApp();// 0x3cdb2c0
	bool IsGrayUpdate();// 0x3cdb298
	bool IsExamine();// 0x34dfb20
	void Install();// 0x3cdb284
	int GetTotalValue();// 0x3cdb25c
	int GetCurValue();// 0x3cdb234
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x3cdb0f4
	float GetCurPercent();// 0x3cdb0cc
	uint32 GetChannelIDWithHUD(GameFrontendHUD* InGameFrontendHUD);// 0x3cdb04c
	uint32 GetChannelID();// 0x3cdb024
	void FinishUpdate();// 0x3cdb010
	void FinishPufferUpdate();// 0x3cdaffc
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x34190e8
	bool EnableCDNGetVersion();// 0x3cdafd4
	void ContinueUpdate();// 0x3cdafc0
	void CancelUpdate();// 0x3cdafac
	void CancelAppUpdate();// 0x3cdaf98

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x1c, Size: 12]
	FString StoredAccessToken;//[Offset: 0x28, Size: 12]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x38, Size: 16]
	delegate OnDetectDelegate;//[Offset: 0x48, Size: 16]
	delegate OnTranslateDelegate;//[Offset: 0x58, Size: 16]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 4]
	void TranslateV2(int Channel, int ID, FString Text);// 0x3d42700
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3d423c0
	void PostMsg(FString URL, FString Content);// 0x3d42280
	void OnTranslateV2(bool Success, FString Data);// 0x3d42174
	void OnTranslate__DelegateSignature(bool IsSuccess, FString LanguageFrom, FString Translation);// 0x446e168
	void OnTranslate(bool Success, FString Data);// 0x3d42068
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x3d41f5c
	void OnGetAccessToken__DelegateSignature(bool IsSuccess, FString Token);// 0x446e168
	void OnGetAccessToken(bool Success, FString Data);// 0x3d41e50
	void OnDetectV2(bool Success, FString Data);// 0x3d41d44
	void OnDetect__DelegateSignature(bool IsSuccess, FString from, FString to);// 0x446e168
	void OnDetect(bool Success, FString Data);// 0x3d41c38
	bool HasTranslating();// 0x3d41c10
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3d4187c
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3d4153c

--------------------------------
Class: HttpWrapper.Object
	delegate OnResponseEvent;//[Offset: 0x1c, Size: 12]
	delegate OnImageDownloadResponseEvent;//[Offset: 0x28, Size: 12]
	void SimplePostForLua(FString URL, FString Content, int Priority, int QueueType);// 0x3cedddc
	void SetQueueSize(int QueueType, int InSize);// 0x3cedd20
	void SetQueueEnable(bool InEnableQueue);// 0x3cedca4
	void SetPoolEnable(bool InEnablePool);// 0x3cedc1c
	int RequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority, int QueueType);// 0x3ced8e8
	int ImageDownloadRequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority);// 0x3ced5f8
	bool GetQueueEnable();// 0x3ced5dc
	bool GetPoolEnable();// 0x3ced5b4
	int GetInternalIndex();// 0x3ced598
	void CancelRequestAll(int QueueType);// 0x3ced520
	void CancelRequest(int QueueType, int ReqIndex);// 0x3ced464

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	FString DownloadDir;//[Offset: 0x2a4, Size: 12]
	FString PufferTmpDir;//[Offset: 0x2b0, Size: 12]
	uint32 CleanFlagVer;//[Offset: 0x2bc, Size: 4]
	FString[] CleanFileNamePattern;//[Offset: 0x2c0, Size: 12]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 1]
	FString[] PreFetchPakNames;//[Offset: 0x2d0, Size: 12]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x2dc, Size: 4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x2e4, Size: 4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x2e8, Size: 4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x2ec, Size: 4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x2f0, Size: 4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x2f4, Size: 12]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x304, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x308, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x30c, Size: 4]
	bool DisableBGDownloadNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	float PreFetchODPaks_StartTime;//[Offset: 0x314, Size: 4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x318, Size: 12]
	bool StopTask(uint64 TaskId);// 0x3ce08f0
	int StopMergeBinDiffPak(int outterTaskID);// 0x3ce0870
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x3ce07f0
	void StopBGDownloadNotification();// 0x3ce07dc
	bool StopAllTask();// 0x3ce07b4
	void StartDownloadItem(uint32 ItemID, uint32 Priority, delegate downloadDelegate);// 0x3ce0688
	void StartBGDownloadNotification(uint64 InDownloadedSize);// 0x3ce060c
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x3ce0400
	void SetTempProductIdBase(int ProductIdRaw);// 0x3ce0388
	void SetTempProductId(FString ProductIdRaw);// 0x3ce0230
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, FString FileList, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x3cdff0c
	void SetIOSBGDownloadAttribute(bool bEnableCellularAccess, bool bEnableResumeData, int nMinFileSize, int nMaxTasks);// 0x3cdfdac
	bool SetImmDLMaxSpeed(uint64 MaxSpeed);// 0x3cdfd28
	void SetBattleDownloadSwitch(bool Enable);// 0x3cdfca8
	static int ReturnSplitMiniPakFilelist_LuaState();// 0x3cddad0
	static int ReturnLocalFiles_LuaState();// 0x3cddad0
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x3cdfaf8
	bool RemountPakFiles();// 0x3cdfad0
	FString ReadFile(FString Filename);// 0x3cdf8f0
	bool PreFetchPakFiles();// 0x3cdf8c8
	int PreFetchODPakFilesUpdate();// 0x3cdf8a0
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x3cdf818
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x3cdf798
	bool PreFetchODPakFiles(bool Start);// 0x3cdf710
	void OnItemDownloadedInFighting(FString PackHash, FString ErrorCode);// 0x3cdf4a0
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x3cdf300
	int MoveFileTo(FString Filename, FString from, FString to);// 0x3cdef70
	int MoveFile(FString from, FString to);// 0x3cdecf8
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x3cde8d0
	bool IsODPaks(FString FilePath);// 0x3cde770
	bool IsODFileExists(FString Path);// 0x3cde6ac
	bool IsInitSuccess();// 0x3cde684
	bool IsFileReady(FString FilePath);// 0x3cde524
	bool IsFileExist(FString Filename, FString extension);// 0x3cde2ac
	bool InitializeODPaks();// 0x3cde284
	FString GetTempWorkPath();// 0x3cde1c4
	void GetProductIDBase(out int[] ProductIDs);// 0x3cde0f8
	void GetProductID(out int[] ProductIDs);// 0x3cde02c
	int GetODPakNum();// 0x3cde004
	FString GetODPakName(FString Path);// 0x3cddec0
	uint32 GetInitErrcode();// 0x3cdde98
	uint64 GetFileSizeCompressed(FString FilePath);// 0x3cddd38
	float GetFileSize(FString Filename);// 0x3cddbd4
	FString GetDownloadPath();// 0x3cddb14
	float GetCurrentSpeed();// 0x3cddaec
	int GetBatchODPaksDownloadList_LuaState();// 0x3cddad0
	void EnableUseOldInterface(bool Enable);// 0x3cdda50
	bool DeleteFileEvenIfUnfinished(FString FilePath);// 0x3cdd8f0
	static bool DeleteFile(FString fullPath);// 0x3cdd798
	bool ConvertPreFetchFiles();// 0x3cdd770
	FString ConvertItemIdToPakName(uint32 ItemID);// 0x3cdd668
	bool ClearUselessODPaks();// 0x3cdd640
	bool ClearPreFetchODPaksFiles();// 0x3cdd618
	bool ClearPreFetchFiles();// 0x3cdd5f0
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x3cdd404

--------------------------------
Class: LaggingReporter.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x3c, Size: 12]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x3cbf6c8

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x3431c88

--------------------------------
Class: CDNUpdate.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x90, Size: 4]
	void StartUpdateApp();// 0x3cce898
	void StartAppUpdate(bool StartGrayUpdate);// 0x3cce818
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x3cce74c
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x3cce680
	bool IsUpdating();// 0x3cce658
	bool IsGrayUpdate();// 0x3cce630
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x3cce4f0
	void FinishUpdate();// 0x3cce4dc
	void ContinueUpdate();// 0x3cce4c8
	void CancelUpdate();// 0x3cce4b4

--------------------------------
Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x28, Size: 60]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x64, Size: 60]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xa0, Size: 60]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0xdc, Size: 12]
	Property*[] Params;//[Offset: 0xe8, Size: 12]
	void SyncLuaRegisterEventNum(FString EventType, FString EventId, int Number);// 0x3a0e970
	LuaTemBPData*[] GetCurrentParam();// 0x3a0e908
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x3a0e880
	bool CheckNeedPostEventWithFilterKey(out const uint32 FilterKey, FString EventType, FString EventId, bool bCheckNeedPostLua);// 0x3a0e690
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventId, const bool bActive);// 0x3a0e4a8

--------------------------------
Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0, Size: 12]

--------------------------------
Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0, Size: 8]
	FString FunctionName;//[Offset: 0x8, Size: 12]
	FString EventType;//[Offset: 0x14, Size: 12]
	FString EventId;//[Offset: 0x20, Size: 12]

--------------------------------
Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	FString LuaManagerName;//[Offset: 0x24, Size: 12]
	FString ShowUI;//[Offset: 0x30, Size: 12]
	FString HideUI;//[Offset: 0x3c, Size: 12]
	FString CheckWindowOpen;//[Offset: 0x48, Size: 12]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x1c, Size: 60]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x3cf61d0
	void AddSystem(const FString SystemName, const FString BPPath);// 0x3cf5f60

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	void Init();// 0x446e168

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x1c, Size: 12]
	FString TssCDNHostInfo;//[Offset: 0x28, Size: 12]
	FString TssBuildInIpInfo;//[Offset: 0x34, Size: 12]
	int TssLocal;//[Offset: 0x40, Size: 4]
	static int SendSkdData_LuaState();// 0x3cddad0
	static int SendEigeninfoData_LuaState();// 0x3cddad0
	static uint32 SaveSendEigeninfoCode_LuaState();// 0x3cddad0
	static int OnRecvData_LuaState();// 0x3cddad0
	static uint32 InvokeSDKIoctl(int Command, FString InCmdData);// 0x3d42d80
	static int GetUserTag4Lua_LuaState();// 0x3cddad0
	static int GetDeviceFeature_LuaState();// 0x3cddad0
	static int EigenArrayObfuscationVerify_LuaState();// 0x3cddad0

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 12]
	delegate OnFail;//[Offset: 0x28, Size: 12]
	FString FileURL;//[Offset: 0x34, Size: 12]
	FString CompreesedFileUrl;//[Offset: 0x40, Size: 12]
	FString FileSavePath;//[Offset: 0x4c, Size: 12]
	FString CompreesedFileSavePath;//[Offset: 0x58, Size: 12]
	FString UrlHash;//[Offset: 0x64, Size: 12]
	FString CompreesedUrlHash;//[Offset: 0x70, Size: 12]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	void Start(FString URL);// 0x3cee894
	static ImageDownloader* MakeDownloaderInGame();// 0x3cee86c
	static ImageDownloader* MakeDownloader();// 0x3cee844
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x3cee6e4
	static FString CheckAndGetEncryptUrl(out FString InUrl);// 0x3cee598

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x44, Size: 60]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0x90, Size: 12]
	void TickUDPPing(float DeltaTime);// 0x3d4a8e4
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x3d4a5e8
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x3d4a408
	void OnPingServerResultDelegate__DelegateSignature(FString address, int IsSuccess, float Time);// 0x446e168
	bool IsChooingZoneAccess();// 0x3d4a3e0
	bool isAllZoneHasPingValue();// 0x3d4a3b8
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x3d4a228
	float GetZoneServerDelay(FString ServerAddress);// 0x3d4a0c4
	int GetMinDealyAddress();// 0x3d4a09c
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x3d49efc

--------------------------------
Class: PingServerInfo

--------------------------------
Class: Package.Object

--------------------------------
Class: ColorBlindnessMgr.Object
	<int,LinearColor> CBColorMap;//[Offset: 0x1c, Size: 60]
	<int,ParticleSysColor> CBParticleColorMap;//[Offset: 0x58, Size: 60]
	<uint32,ImageOriginal> HandleCBColorImageContaner;//[Offset: 0x94, Size: 60]
	<uint32,HandleMesh> HandleCBColorMeshContaner;//[Offset: 0xd0, Size: 60]
	<uint32,HandleParticleSystem> HandleCBColorParticleContaner;//[Offset: 0x10c, Size: 60]
	void Reset();// 0x3449134
	void RemoveParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x34490bc
	void RemoveMeshComponent(MeshComponent* Mesh);// 0x3449044
	void RemoveImage(Image* Image);// 0x3448fcc
	void HandleUserSettingChange();// 0x3448fb8
	LinearColor GetColorByType(int Type);// 0x3448f2c
	void Clear();// 0x3448f18
	void AddParticleSystem(ParticleSystemComponent* ParticleSystem, int Type);// 0x3448e5c
	void AddMeshComponent(MeshComponent* Mesh, int Type);// 0x3448da0
	void AddImage(Image* Image, LinearColor Color, int Type);// 0x3448c94
	void AddColorByType(FString Type, LinearColor Color);// 0x3448af0

--------------------------------
Class: ParticleSysColor
	<FString,LinearColor> colorMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ImageOriginal
	LinearColor OriginalColir;//[Offset: 0x8, Size: 16]
	int Type;//[Offset: 0x18, Size: 4]

--------------------------------
Class: HandleMesh
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HandleParticleSystem
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 8]

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x1c, Size: 60]
	void SetMaxTaskNum(int Num);// 0x34c25c4
	void RunNextTask();// 0x3cbe208
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x3cbe09c
	void ClearOneTask(FString ObjectPath);// 0x3cbdf44
	void ClearAllTask();// 0x3cbdf30
	void AddTask(FString ObjectPath, int LoadPriority);// 0x3cbdd94

--------------------------------
Class: BattleUtils.Object
	GameFrontendHUD* OwningFrontendHUD;//[Offset: 0x60, Size: 4]
	UAEGameMode* BattleGameMode;//[Offset: 0x78, Size: 4]
	BattlePlayer*[] BattlePlayerList;//[Offset: 0x7c, Size: 12]
	BattleGameInfo CachedBattleGameInfo;//[Offset: 0x88, Size: 48]
	GameModeAIPlayerParams CachedAIPlayerParams;//[Offset: 0xb8, Size: 792]
	FString LuaFilePath;//[Offset: 0x3d0, Size: 12]
	uint32 SyncNewBattlePlayer(uint64 UId, out const PlayerInfoData Info);// 0x3cc2198
	void SyncGameInfo(out const BattleGameInfo Info);// 0x3cc208c
	void SyncGameExit();// 0x3cc2078
	void SyncBattlePlayerExit(uint64 UId, FName PlayerType, FString Reason);// 0x3cc1e7c
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x3cc1da4
	GameModeAIPlayerParams RetrieveAIPlayerParams(PlayerID PlayerID);// 0x3cc1cbc
	void ResponPlayerWeaponDIYData(uint64 PlayerUID, WeaponDIYData InWeaponDIYData);// 0x3cc1b90
	void RequestSomePlayersBattleData(uint64[] PlayerUIDList, byte DataType);// 0x3cc19f4
	void RequestPlayerWeaponDIYData(uint64 PlayerUID, int WeaponSkinID, int PlanID);// 0x3cc18ec
	void RequestOnePlayersBattleData(uint64 PlayerUID, byte DataType);// 0x3cc1824
	void RequestAllPlayersBattleData(byte DataType);// 0x3cc17ac
	void OnPostLoadMapWithWorld(World* World);// 0x3cc1734
	BattlePlayer* NewBattlePlayer();// 0x3cc170c
	BattleAIPlayer* NewBattleAIPlayer();// 0x3cc16e4
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x3cc1654
	UAEGameMode* GetBattleGameMode();// 0x3cc162c
	void GenerateAIPlayerParams(out const PlayerInfoData Info);// 0x3cc1514
	BattlePlayer* FindPlayerByUID(uint64 UId, FName PlayerType);// 0x3cc1448
	BattlePlayer* FindPlayerByPlayerName(FString PlayerName, FName PlayerType);// 0x3cc12a0
	BattlePlayer* FindPlayerByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x3cc11dc

--------------------------------
Class: UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x3e0, Size: 8]
	float GridCheckSize;//[Offset: 0x3e8, Size: 4]
	float DeepCheckSize;//[Offset: 0x3ec, Size: 4]
	float HeightCheckSize;//[Offset: 0x3f0, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x3f4, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	bool bUseDefaultResultRules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x407, Size: 1]
	int AntiDataCD;//[Offset: 0x408, Size: 4]
	int WeatherID;//[Offset: 0x40c, Size: 4]
	FString WeatherName;//[Offset: 0x410, Size: 12]
	int RoomMode;//[Offset: 0x41c, Size: 4]
	int SeasonIdx;//[Offset: 0x420, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x424, Size: 4]
	FString ItemTableName;//[Offset: 0x428, Size: 12]
	FString ItemClassPath;//[Offset: 0x434, Size: 12]
	FString ReplayPushURL;//[Offset: 0x440, Size: 12]
	int ReplayType;//[Offset: 0x44c, Size: 4]
	FString ReplayTitle;//[Offset: 0x450, Size: 12]
	enum EnableObserverEnemyTrace;//[Offset: 0x45c, Size: 1]
	FString[] ItemSpawnTableList;//[Offset: 0x460, Size: 12]
	FString[] IgnoreItemClassPathList;//[Offset: 0x46c, Size: 12]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x478, Size: 12]
	<uint64,CharacterMoveDragData> CharacterMoveDragDataMap;//[Offset: 0x484, Size: 60]
	<uint64,ParachuteDragData> ParachuteDragDataMap;//[Offset: 0x4c0, Size: 60]
	<uint64,VehicleMoveDragData> VehicleMoveDrag;//[Offset: 0x4fc, Size: 60]
	<uint64,CharacterShootVerifyData> CharacterShootVerifyDataMap;//[Offset: 0x538, Size: 60]
	<uint64,CharacterShootVerifyStat> CharacterShootVerifyStatMap;//[Offset: 0x574, Size: 60]
	uint32 ServerStartTime;//[Offset: 0x5b0, Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x5b8, Size: 12]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x5c8, Size: 12]
	FString VehicleTableName;//[Offset: 0x5d4, Size: 12]
	FString VehicleClassPath;//[Offset: 0x5e0, Size: 12]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 1]
	Vector RegionCenter;//[Offset: 0x5f0, Size: 12]
	float RegionRadius;//[Offset: 0x5fc, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x600, Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x63c, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x640, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x644, Size: 4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x64c, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x650, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x654, Size: 4]
	float RescueSelfRestoreDuration;//[Offset: 0x658, Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x65c, Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x660, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x665, Size: 1]
	FString NetObjectPathNameMappingCSV;//[Offset: 0x668, Size: 12]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x674, Size: 12]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x680, Size: 4]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x684, Size: 12]
	Actor*[] DynamicTriggers;//[Offset: 0x690, Size: 12]
	int IsGameModeFpp;//[Offset: 0x69c, Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x6a4, Size: 12]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x6b0, Size: 60]
	VehicleAvatarReplaceCfg[] VehicleAvatarReplaceCfgList;//[Offset: 0x6ec, Size: 12]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x6fc, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x708, Size: 12]
	int[] DynamicLevelArray;//[Offset: 0x714, Size: 12]
	FString RoomType;//[Offset: 0x720, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 1]
	int ZoneID;//[Offset: 0x730, Size: 4]
	int nClientType;//[Offset: 0x734, Size: 4]
	int nBattleType;//[Offset: 0x738, Size: 4]
	delegate OnGameModeStateChanged;//[Offset: 0x760, Size: 12]
	delegate SendTeamBattleResult;//[Offset: 0x7ec, Size: 12]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 1]
	bool[] EnabledCollectedEventDataEventIds;//[Offset: 0xab4, Size: 12]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	float OBInfoTimeStep;//[Offset: 0xc18, Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0xc3c, Size: 12]
	UAEPlayerController*[] KickFlagControllerList;//[Offset: 0xc48, Size: 12]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0xc54, Size: 12]
	class UAEAdvertisementActor* AdvertisementActorBP;//[Offset: 0xcf4, Size: 4]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0xcf8, Size: 12]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0xd04, Size: 12]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0xd10, Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1c, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0xd20, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0xd2c, Size: 12]
	FString GrenadeEffectPath;//[Offset: 0xd38, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd45, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd46, Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd47, Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0xd48, Size: 12]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd54, Size: 1]
	float FestivalAirDropProb;//[Offset: 0xd58, Size: 4]
	float MonsterDropPar;//[Offset: 0xd5c, Size: 4]
	float SceneDropParam;//[Offset: 0xd60, Size: 4]
	uint32 DSOpenSwtich;//[Offset: 0xd64, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xd68, Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xd6c, Size: 4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd70, Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0xd74, Size: 12]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0xd80, Size: 12]
	FString SeasonStatueClassPath;//[Offset: 0xd8c, Size: 12]
	FString StatueBaseClassPath;//[Offset: 0xd98, Size: 12]
	StatueBaseData StatueBaseInfo;//[Offset: 0xda4, Size: 84]
	int BattleStopJoin;//[Offset: 0xdf8, Size: 4]
	int nSignalGunEffectId;//[Offset: 0xdfc, Size: 4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0xe00, Size: 12]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe80, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0xe84, Size: 12]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed1, Size: 1]
	int StandAloneTestPlayerKey;//[Offset: 0xed4, Size: 4]
	FName StandAloneTestPlayerType;//[Offset: 0xed8, Size: 8]
	void WriteStatistics();// 0x3ece0cc
	void SyncPlayerNames();// 0x380dd00
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x3ecdf90
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x3ecde50
	void SetVehicleReportEntry(uint32 InUniqueID, VehicleReportEntry InEntry);// 0x3ecdd58
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x3ecdc50
	void SetMaxWeaponReportNum(int Num);// 0x3ecdbdc
	void SetKillerPlayerKey(Controller* VictimPlayer, uint32 KillerPlayerKey);// 0x3ecdb18
	void SetGameEndReportData();// 0x33dbe7c
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x3ecda64
	void RetrieveBattleData(out BattleData OutBattleData);// 0x3ecd9d0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3609700
	void ResetGameParamsFromGameMode();// 0x3ecd9b4
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x3ecd8f0
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x3ecd7bc
	bool ReportCollectedEventDataWithPlayersValidation(World* World, byte EventId, delegate CollectReportedEventDataCallback);// 0x3ecd688
	bool ReportCollectedEventData(out const FString UId, byte EventId, out const CollectedEventData Data);// 0x3ecd490
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x3ecd3cc
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x3ecd34c
	void RefreshWorldActiveRange();// 0x3ecd330
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x3ecd26c
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 UId, int IdxInTeam);// 0x3eccf98
	int RecoardAlivePlayerNum();// 0x3eccf68
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x3eccee0
	void OnStandAloneGameEnd();// 0x36be7a8
	void OnReportNetworkData();// 0x33db7bc
	void OnPlayerFiring(uint32 InPlayerKey);// 0x3ecce60
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x336b494
	void OnPlayerBreathChange(uint32 InPlayerKey, float InBreath);// 0x3eccd9c
	void OnObserverLogout(UAEPlayerController* InController);// 0x3eccd1c
	void OnObserverLogin(UAEPlayerController* InController);// 0x3eccc9c
	void OnMsg(FString Msg);// 0x3eccbd8
	void OnAirDropBoxLanded(int boxId, out const Vector pos);// 0x3eccb08
	void OnAirDropBoxEmpty(int boxId);// 0x3ecca88
	void NotifyPlayerExitWhenNotStarted(uint32 PlayerKey, FName PlayerType, FString Reason);// 0x3933188
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x3932e8c
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x3ecc9c4
	void NotifyGameModeParamsChanged(out const GameModeParams GameModeParams);// 0x3ecc92c
	void NotifyGameModeLuckmate(int64 MyUID, int64 LuckmateUID);// 0x3ecc854
	void NotifyGameModeInit();// 0x38da714
	void NotifyExistPlayerReEnter(uint32 PlayerKey);// 0x3ecc7d4
	void NotifyAIPlayerEnter(uint32 PlayerKey, bool IsMLAI);// 0x3ecc708
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x33db594
	float ModifyVehicleDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* VictimVehicle, Actor* DamageCauser);// 0x38ef5d8
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x3ecc544
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x3ecc3d0
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x3ecc344
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController);// 0x3ecc2c4
	bool IsCollectedEventEnabled(byte EventId);// 0x3ecc244
	void InitWorldActiveRange();// 0x3ecc228
	void InitSeasonStatue();// 0x36be7e0
	void InitMissionBoard();// 0x3ecc20c
	void InitGenerator();// 0x3ecc1f0
	void InitGameParamsFromGameMode();// 0x3ecc1d4
	void InitDynamicTriggers();// 0x36c85c4
	void InitDynamicBuildingGroups();// 0x3ecc1b8
	void InitBornWithApple();// 0x36fb62c
	void Heartbeat();// 0x3ecc1a4
	bool HasVehicleReportEntry(uint32 InUniqueID);// 0x3ecc0bc
	bool HasDynamicBuildingGroup();// 0x3ecc094
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x3ecbef8
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x3ecbe34
	VehicleReportEntry GetVehicleReportEntry(uint32 InUniqueID);// 0x3ecbcfc
	int GetSurvivingTeamCount();// 0x3ecbccc
	int GetSurvivingCharacterCount();// 0x3ecbc9c
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x3ecbb48
	void GetPlayerRealtimeVerifyInfo(uint32 PlayerKey, out RealtimeVerifyInfo RealtimeVerifyInfo);// 0x33db0fc
	UAEPlayerController* GetPlayerControllerWithUID(uint64 UId);// 0x3ecbac4
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x3ecb970
	void GetPlayerAndRealAiNum(out HeartBeatData Data);// 0x3ecb8cc
	UAEPlayerController*[] GetObserverControllerList();// 0x3ecb80c
	void GetMonsterNum(out HeartBeatData Data);// 0x3ecb768
	int GetMaxWeaponReportNum();// 0x3ecb74c
	Vector GetClassicPlaneDirection();// 0x3ecb6fc
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x3ecb638
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x3ecb574
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x33dab6c
	Controller* FindControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x3ecb4b0
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x3ecb3cc
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x3ecb34c
	void DestroyAllPickUpObjs();// 0x3365b48
	void DeleteSeasonStatue();// 0x3ecb330
	void DeleteDynamicLoadItem();// 0x3ecb314
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x3ecb294
	void CreateDynamicBuildingGroups(Vector Offset);// 0x3ecb224
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0x446e168
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x3ecb0d0
	void AddAirDropBox(int boxId, out const Vector pos);// 0x3ecb000

--------------------------------
Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x3d4, Size: 12]

--------------------------------
Class: DSSwitchInfo
	int KeyNum;//[Offset: 0x0, Size: 4]
	FString SValue;//[Offset: 0x4, Size: 12]

--------------------------------
Class: CharacterMoveDragData
	CharacterMoveDrag[] Drag;//[Offset: 0x0, Size: 12]
	[] SimulateDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: CharacterMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	<byte,int> ReasonCount;//[Offset: 0x4, Size: 60]
	DistanceDragData[] ExceedsDistances;//[Offset: 0x40, Size: 12]

--------------------------------
Class: DistanceDragData
	float CX;//[Offset: 0x0, Size: 4]
	float CY;//[Offset: 0x4, Size: 4]
	float CZ;//[Offset: 0x8, Size: 4]
	float SX;//[Offset: 0xc, Size: 4]
	float SY;//[Offset: 0x10, Size: 4]
	float SZ;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterSimulateMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int DragCount;//[Offset: 0x8, Size: 4]
	int ShakeCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ParachuteDragData
	uint32 MyDrag;//[Offset: 0x0, Size: 4]
	uint32 OtherDrag;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleMoveDragData
	VehicleMoveDrag[] MoveDrag;//[Offset: 0x0, Size: 12]
	VehicleMoveDrag[] SimulatedMoveDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	byte VehicleType;//[Offset: 0x4, Size: 1]
	byte[] Reasons;//[Offset: 0x8, Size: 12]
	int[] Counters;//[Offset: 0x14, Size: 12]

--------------------------------
Class: CharacterShootVerifyData
	<byte,int> ShootVerifyFailed;//[Offset: 0x0, Size: 60]

--------------------------------
Class: CharacterShootVerifyStat
	<byte,int> ShootVerifyStat;//[Offset: 0x0, Size: 60]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x25d, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	int WorldCompositionID;//[Offset: 0x260, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x264, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x268, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	void SetGroupValid(bool Valid);// 0x3ea3440
	bool IsValidGroup();// 0x3ea3410
	int FindWorldCompositionID();// 0x3ea33e8
	void DoPickUp();// 0x3ea33d4

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 12]
	FString TriggerClassPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 12]
	int ActID;//[Offset: 0xc, Size: 4]
	FString Path;//[Offset: 0x10, Size: 12]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	int[] PosIdxList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: DynamicBuildingGroupTransform
	float LocX;//[Offset: 0x0, Size: 4]
	float LocY;//[Offset: 0x4, Size: 4]
	float LocZ;//[Offset: 0x8, Size: 4]
	float RotX;//[Offset: 0xc, Size: 4]
	float RotY;//[Offset: 0x10, Size: 4]
	float RotZ;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VehicleAvatarReplaceCfg
	int OriginID;//[Offset: 0x0, Size: 4]
	int[] SkinIDList;//[Offset: 0x4, Size: 12]
	float[] ProbabilityDistribute;//[Offset: 0x10, Size: 12]
	int MaxNum;//[Offset: 0x1c, Size: 4]
	int CurrentNum;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AirDropBoxInOb
	int boxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x648, Size: 8]
	FString PlayerName;//[Offset: 0x650, Size: 12]
	uint32 PlayerKey;//[Offset: 0x65c, Size: 4]
	uint64 UId;//[Offset: 0x660, Size: 8]
	FString PlayerOpenID;//[Offset: 0x668, Size: 12]
	int TeamID;//[Offset: 0x674, Size: 4]
	int64 IdxInTeam;//[Offset: 0x678, Size: 8]
	int CampID;//[Offset: 0x680, Size: 4]
	Vector CharacterLocation;//[Offset: 0x684, Size: 12]
	int RoomMode;//[Offset: 0x690, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x694, Size: 20]
	int planeAvatarId;//[Offset: 0x6a8, Size: 4]
	int DyeDebugFlag;//[Offset: 0x6ac, Size: 4]
	int PlayerStartID;//[Offset: 0x6b0, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x6b8, Size: 48]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	FString PlanetailResLink;//[Offset: 0x6ec, Size: 12]
	int InPacketLossRate;//[Offset: 0x6f8, Size: 4]
	int OutPacketLossRate;//[Offset: 0x6fc, Size: 4]
	int ClientNetworkType;//[Offset: 0x700, Size: 4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 1]
	int GameReplayType;//[Offset: 0x720, Size: 4]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x724, Size: 48]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x754, Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x760, Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x76c, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	FString Nation;//[Offset: 0x774, Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x788, Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x78c, Size: 4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x790, Size: 12]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x79c, Size: 12]
	int RolewearIndex;//[Offset: 0x7a8, Size: 4]
	int[] equip_plating_list;//[Offset: 0x7ac, Size: 12]
	GameModePlayerItem[] InitialSharedSkin;//[Offset: 0x7b8, Size: 12]
	GameModePlayerKnapsackSingleInfo InitialSharedKnapsack;//[Offset: 0x7c4, Size: 80]
	bool bSharedSkinOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 1]
	bool bUsingSharedSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x815, Size: 1]
	bool bSubscribeBagOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x816, Size: 1]
	int FashionBagStartIndex;//[Offset: 0x818, Size: 4]
	int VehicleSkinInReady;//[Offset: 0x81c, Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x824, Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x830, Size: 28]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x84c, Size: 12]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0x858, Size: 12]
	delegate OnInitialWeaponScheme;//[Offset: 0x864, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x870, Size: 4]
	int PveLevel;//[Offset: 0x874, Size: 4]
	int[] InitialCharSkillList;//[Offset: 0x878, Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x884, Size: 12]
	GameModePlayerItems[] InitialVehicleAvatarSkinList;//[Offset: 0x890, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x89c, Size: 4]
	int[] HolographyList;//[Offset: 0x8a0, Size: 12]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0x8ac, Size: 12]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x8b8, Size: 12]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0x8c4, Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x8d0, Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x8e0, Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0x8ec, Size: 60]
	<int,int> GrenadeAvatarItemList;//[Offset: 0x964, Size: 60]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x9a0, Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0x9ac, Size: 60]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x9e8, Size: 60]
	<int,VehicleAvatarSkinList> VehicleAvatarSkinList;//[Offset: 0xa24, Size: 60]
	int[] VehicleMusicList;//[Offset: 0xa60, Size: 12]
	int[] DefaultVehicleMusic;//[Offset: 0xa6c, Size: 12]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0xa78, Size: 12]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0xa84, Size: 12]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0xa90, Size: 60]
	<int,int> InitialWeaponPendantList;//[Offset: 0xacc, Size: 60]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xb08, Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xb14, Size: 12]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xb20, Size: 12]
	uint32 TaskSyncToDsTs;//[Offset: 0xb2c, Size: 4]
	int AnchorPlatResID;//[Offset: 0xb30, Size: 4]
	int AnchorPlatColorID;//[Offset: 0xb34, Size: 4]
	delegate OnPlayerGotoSpectatingDelegate;//[Offset: 0xb38, Size: 12]
	delegate OnReceiveUIMessage;//[Offset: 0xb4c, Size: 12]
	int64 LastGameResultTime;//[Offset: 0xb58, Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb61, Size: 1]
	FString IpCountryStr;//[Offset: 0xb64, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb71, Size: 1]
	uint32 ObserverFlags;//[Offset: 0xb74, Size: 4]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78, Size: 1]
	LobbyWatchInfo LobbyWatchInfo;//[Offset: 0xb7c, Size: 8]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0xb84, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0xb88, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 1]
	float UpdateOBCircleCounter;//[Offset: 0xb90, Size: 4]
	float UpdateOBCircleInterval;//[Offset: 0xb94, Size: 4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98, Size: 1]
	bool bWaitRetryGotoSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb99, Size: 1]
	FString[] FriendObservers;//[Offset: 0xb9c, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba9, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb0, Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xbf8, Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc05, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xc14, Size: 12]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xc20, Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xc2c, Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xc38, Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xc44, Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xc50, Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xc5c, Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xc68, Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0xc74, Size: 12]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0xc80, Size: 12]
	bool bCanWatchEnemyInRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca4, Size: 1]
	Object*[] SecurityObjs;//[Offset: 0xcfc, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0xd08, Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd14, Size: 1]
	float NotifyTimeOut;//[Offset: 0xd18, Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0xd1c, Size: 4]
	FString NeedLoadLevelName;//[Offset: 0xd20, Size: 12]
	FString NeedLoadedLevelFullName;//[Offset: 0xd2c, Size: 12]
	bool IsTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd38, Size: 1]
	int AntiDataCD;//[Offset: 0xd48, Size: 4]
	int ModeID;//[Offset: 0xd4c, Size: 4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	float ClientToDSFlowLimitTime;//[Offset: 0xd70, Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0xd74, Size: 4]
	FString UsingNetObjectPathNameMappingCSV;//[Offset: 0xd88, Size: 12]
	bool UseingWeaponScheme();// 0x3edbcec
	void TestShowLongTimeNoOperation();// 0x3edbcb0
	void TestShowConfirmDialogOfMisKill();// 0x3edbc9c
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x3edbb18
	void SyncDailyTaskStoreInfo(DailyTaskStoreInfo[] NewDailyTaskStoreList);// 0x3edb9bc
	void SetUsedSimulationCVar(bool Value);// 0x3edb93c
	static void SetTargetMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x3edb85c
	void SetPanels(out const UAEUserWidget*[] panels);// 0x3edb788
	void SetIsInPetSpectator(bool inIsInPetSpectator);// 0x3edb708
	static void SetDSMsgReceiveDelegate(delegate InDelegate);// 0x3edb66c
	static void SetClientMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x3edb58c
	void ServerSetVoiceId(int VoiceID);// 0x3edb4d8
	void ServerKickSelf();// 0x3edb47c
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x3edb3c8
	void ServerExitGame();// 0x3edb36c
	void ServerAcknowledgeReconnection(uint32 Token);// 0x3edb2b8
	void SendNetObjectPathNameMappingHashToServer(uint32 VersionHash);// 0x3edb204
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x3edb0f4
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x3edafe4
	void RPC_Server_SyncClientNetInfo(int InLoss, int OutLoss, int InNetworkType);// 0x3edaea0
	void RPC_Server_ReportClientNetInfo(int AvgPing, int MaxPing, int MinPing, int LostPackRate, int AvgNoOutlier, int StdNoOutlier, int NumNoOutlier, int InLoss, int OutLoss);// 0x3edab88
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x3edaa4c
	void RPC_LuaClientToDS(int ID, const byte[] Content);// 0x3eda910
	void Respawn();// 0x3eda8f4
	void ResetUsedSimulationCVar();// 0x3eda8e0
	void ReleaseInGameUI();// 0x3eda8c4
	void ReceivePostLoginInit();// 0x446e168
	void PrintStatistics();// 0x3365b48
	void PlayerStartIDReceived();// 0x3eda8b0
	void OnRep_WeaponAvatarDataList();// 0x37adfa8
	void OnRep_UsingNetObjectPathNameMappingCSV();// 0x3eda89c
	void OnRep_UsedSimulation();// 0x37adf8c
	void OnRep_PveLevel();// 0x3eda880
	void OnRep_PlayerOBInfoList();// 0x3eda86c
	void OnRep_LobbyWatchInfo();// 0x3eda850
	void OnRep_LastGameResultTime();// 0x3eda834
	void OnRep_IsSpectatingEnemy();// 0x36fd078
	void OnRep_IsSpectating();// 0x3eda818
	void OnRep_IsObserver();// 0x3eda7fc
	void OnRep_InitialWeaponSchemeInfo();// 0x3eda7e8
	void OnRep_InitialEquipmentAvatar();// 0x37ade90
	void OnRep_InitialConsumableAvatar();// 0x37ade74
	void OnRep_FriendObservers();// 0x3eda7cc
	void OnRep_CurWeaponSchemeIndex();// 0x3365b48
	void OnRep_bRoomOwner();// 0x3eda7b0
	void OnNetObjectPathNameMappingTableAsyncLoad();// 0x3eda79c
	void NotifyEnterBattle();// 0x3eda788
	void KickSelf();// 0x3365b48
	bool IsTeammateSpectator();// 0x3eda760
	bool IsSpectatorOrDemoPlayer();// 0x3eda738
	bool IsSpectator();// 0x3eda710
	bool IsRoomMode();// 0x3eda6ec
	bool IsPureSpectator();// 0x3eda6c4
	bool IsObserver();// 0x3eda69c
	bool IsInSpectatingEnemy();// 0x3eda674
	bool IsInSpectating();// 0x3eda64c
	bool IsInPetSpectator();// 0x3eda624
	bool IsHawkEyeSpectator();// 0x3eda5fc
	bool IsFriendOrEnemySpectator();// 0x3eda5d4
	bool IsFriendObserver();// 0x3eda5ac
	bool IsExited();// 0x3eda584
	bool IsDemoRecSpectator();// 0x3eda55c
	bool IsDemoPlaySpectator();// 0x3eda534
	bool IsDemoPlayGlobalObserver();// 0x3eda50c
	bool IsDeathSpectator();// 0x3eda4e4
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x3eda438
	void InitWeaponAvatarItems();// 0x3eda41c
	void InitVehicleMusicList();// 0x3eda400
	void InitVehicleAvatarSkinList();// 0x37ab52c
	void InitVehicleAvatarList();// 0x37ab510
	void InitVehicleAdvanceAvatarList();// 0x3eda3e4
	void InitIngameUI();// 0x3eda3c8
	void InitGrenadeAvatarList(bool ReInitial);// 0x3eda340
	int GotoSpectating(int PlayerID);// 0x37aa8e8
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x3eda26c
	int GetWeaponAvatarItemId(int ID);// 0x37aa598
	void GetVisibleLevelsLoadedName(out FString[] VisibleLevels);// 0x3eda138
	FString GetLobbyWatchedPlayerKeyAsString();// 0x3eda078
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskId);// 0x3ed9fe8
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x3ed9fc0
	uint32 GetCurrentOBPlayerKey();// 0x3ed9f90
	int GetCurrentOBPlayerInfoIndex();// 0x3ed9f68
	void ForceNetReady();// 0x3ed9f54
	void ExitGame();// 0x3ed9f40
	void ExhaustCPU();// 0x3ed9f2c
	void ExecDSCommand(const FString DSCommand);// 0x37a7c64
	void ExcuteIntRecord(FString Key, int Count);// 0x3ed9d90
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x3ed9bf4
	void EnableInGameUI();// 0x3ed9be0
	void DumpUAENetActors();// 0x3ed9bcc
	void DumpRegions();// 0x3ed9bb8
	void DumpNetActors();// 0x3365b48
	void DumpCharacters();// 0x3ed9ba4
	void DumpAllUI();// 0x3365b48
	void DumpAllObjects();// 0x3365b48
	void DumpAllActors();// 0x3365b48
	void DoCrash();// 0x3365b48
	void DisableInGameUI();// 0x3ed9b90
	void DelayEnterBattleCheck();// 0x3ed9b74
	void DealWithPickUpFailed(ItemDefineID DefineID);// 0x3ed9ae4
	void ClientShowTeammateEscapeNotice();// 0x3ed9ac8
	void ClientRPC_CastUIMsgWithStrings(FString strMsg, FString module, const int TipsID, FString Param1, FString Param2);// 0x3ed982c
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x3ed96a0
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x3ed9558
	void ClientInitPlayerOBInfoButton();// 0x3ed953c
	void ClientBroadcastRespawnComplete();// 0x36d0c68
	void ClientBroadcastReconnectionSuccessful();// 0x3ed9520
	void ClientAcknowledgeReconnection(uint32 Token);// 0x36d0b60
	void CheckPlayerOBInfoButtonInit();// 0x3ed9504
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x3ed947c
	void CastUIMsg(FString strMsg, FString module);// 0x3ed9334
	enum CanPickUpItem(ItemDefineID DefineID);// 0x3ed929c
	void BroadcastUIMessage(FString MessageName, const int TipsIDOrType, FString Param1, FString Param2);// 0x3ed9090
	void BroadcastRespawnComplete();// 0x3ed907c

--------------------------------
Class: LuaPlayerController.PlayerController.Controller.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x5f4, Size: 60]
	FString LuaFilePath;//[Offset: 0x630, Size: 12]

--------------------------------
Class: LuaNetSerialization

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 12]
	int WeatherID;//[Offset: 0xc, Size: 4]
	float WeatherTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 12]
	FString LocalAddr;//[Offset: 0xc, Size: 12]
	float AvgPing;//[Offset: 0x18, Size: 4]
	float MaxPing;//[Offset: 0x1c, Size: 4]
	float HighPingPercent;//[Offset: 0x20, Size: 4]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0, Size: 4]
	int upassLevel;//[Offset: 0x4, Size: 4]
	int upassScore;//[Offset: 0x8, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	FString iconUrl;//[Offset: 0x10, Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int upassKeepBuy;//[Offset: 0x20, Size: 4]
	int upassCurValue;//[Offset: 0x24, Size: 4]
	int pass_type;//[Offset: 0x28, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UId;//[Offset: 0x8, Size: 8]
	int ZoneID;//[Offset: 0x10, Size: 4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	int WinCount;//[Offset: 0x24, Size: 4]
	int TopTenCount;//[Offset: 0x28, Size: 4]
	int KillNum;//[Offset: 0x2c, Size: 4]
	float KDNum;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 12]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0, Size: 4]
	int BagSkin;//[Offset: 0x4, Size: 4]
	int HelmetSkin;//[Offset: 0x8, Size: 4]
	int FlySkin;//[Offset: 0xc, Size: 4]
	int GrenadeSkin;//[Offset: 0x10, Size: 4]
	GameModePlayerConsumableAvatar ConsumableAvatarList;//[Offset: 0x14, Size: 16]
	GameModePlayerItem[] WeaponList;//[Offset: 0x24, Size: 12]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x30, Size: 12]
	GameModePlayerItem[] BackPackPendantList;//[Offset: 0x3c, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x48, Size: 4]
	int WingmanSkin;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatarShoulei;//[Offset: 0x0, Size: 4]
	int GrenadeAvatarSmoke;//[Offset: 0x4, Size: 4]
	int GrenadeAvatarStun;//[Offset: 0x8, Size: 4]
	int GrenadeAvatarBurn;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]
	int PetCfgId;//[Offset: 0x8, Size: 4]
	int PetColor;//[Offset: 0xc, Size: 4]
	int[] PetAvatarList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 80]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int WearIndex;//[Offset: 0x54, Size: 4]

--------------------------------
Class: GameModePlayeWeaponSchemeInfo
	int SchemeIndex;//[Offset: 0x0, Size: 4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	GameModePlayeWeaponSchemeSlotInfo[] SlotList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayeWeaponSchemeSlotInfo
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int[] AttachList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: GameModePlayerItems
	GameModePlayerItem[] Items;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0, Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x4, Size: 12]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int ParticleID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0, Size: 4]
	int HelmetAvatar;//[Offset: 0x4, Size: 4]
	int ArmorAvatar;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0, Size: 4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleAvatarSkinList
	int[] SkinList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: GameModeWeaponDIYPlanData
	int WeaponAvatarID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DailyTaskStoreInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	int State;//[Offset: 0x4, Size: 4]
	int Progress;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LobbyWatchInfo
	uint32 WatchedPlayerKey;//[Offset: 0x0, Size: 4]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameModePlayerParams
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x4, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	int8 PlatID;//[Offset: 0x24, Size: 1]
	FName PlayerType;//[Offset: 0x28, Size: 8]
	FString PlayerName;//[Offset: 0x30, Size: 12]
	uint32 PlayerKey;//[Offset: 0x3c, Size: 4]
	int TeamID;//[Offset: 0x40, Size: 4]
	int64 IdxInTeam;//[Offset: 0x48, Size: 8]
	int PlayerBornPointID;//[Offset: 0x50, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	byte gender;//[Offset: 0x56, Size: 1]
	FString PIC_URL;//[Offset: 0x58, Size: 12]
	int Level;//[Offset: 0x64, Size: 4]
	int Segment_Level;//[Offset: 0x68, Size: 4]
	int AceImprintShowId;//[Offset: 0x6c, Size: 4]
	int AceImprintBaseId;//[Offset: 0x70, Size: 4]
	int AvatarBoxId;//[Offset: 0x74, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	uint64 MLAIDisplayUID;//[Offset: 0x80, Size: 8]
	GameModePlayerItem[] ItemList;//[Offset: 0x88, Size: 12]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0x94, Size: 12]
	int[] equip_plating_list;//[Offset: 0xa0, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0xac, Size: 12]
	int RolewearIndex;//[Offset: 0xb8, Size: 4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xbc, Size: 12]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xc8, Size: 12]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0xd4, Size: 12]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xe0, Size: 12]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0xec, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0xf8, Size: 12]
	GameModeWeaponDIYPlanData[] WeaponDIYPlanData;//[Offset: 0x104, Size: 12]
	int VehicleSkinInReady;//[Offset: 0x110, Size: 4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x114, Size: 52]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x148, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x178, Size: 28]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x194, Size: 12]
	GameModePlayeWeaponSchemeInfo[] WeaponSchemeInfoList;//[Offset: 0x1a0, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x1ac, Size: 4]
	int PveLevel;//[Offset: 0x1b0, Size: 4]
	int[] CharSkillList;//[Offset: 0x1b4, Size: 12]
	GameModePlayerBanChat banChat;//[Offset: 0x1c0, Size: 16]
	GameModePlayerBanChat banTarget;//[Offset: 0x1d0, Size: 16]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x1e0, Size: 12]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x1ec, Size: 12]
	int[] audioChat;//[Offset: 0x1f8, Size: 12]
	FName CurrentPlayerState;//[Offset: 0x208, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x210, Size: 8]
	float SyncedTimestamp;//[Offset: 0x218, Size: 4]
	float DestinyValue;//[Offset: 0x21c, Size: 4]
	float WarmScore;//[Offset: 0x220, Size: 4]
	float AIAllocMarkValue;//[Offset: 0x224, Size: 4]
	int LeaderCount;//[Offset: 0x228, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x230, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x238, Size: 12]
	uint64 LastGameBattleID;//[Offset: 0x248, Size: 8]
	float RatingScore;//[Offset: 0x250, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	float MaxRankingScore;//[Offset: 0x258, Size: 4]
	uint32 ObserverFlags;//[Offset: 0x25c, Size: 4]
	uint64 WatchPlayerKey;//[Offset: 0x260, Size: 8]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0x26c, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0x270, Size: 4]
	byte PlatformGender;//[Offset: 0x274, Size: 1]
	int planeAvatarId;//[Offset: 0x278, Size: 4]
	int DyeDebugFlag;//[Offset: 0x27c, Size: 4]
	FString Nation;//[Offset: 0x280, Size: 12]
	int MatchLabel;//[Offset: 0x28c, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x290, Size: 4]
	int AnchorPlatResID;//[Offset: 0x294, Size: 4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x2a0, Size: 8]
	int64 CorpsID;//[Offset: 0x2a8, Size: 8]
	int64 CampID;//[Offset: 0x2b0, Size: 8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 1]
	FString IpCountryStr;//[Offset: 0x2bc, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	int VeteranRecruitIndex;//[Offset: 0x2cc, Size: 4]
	int MatchStrategyLabel;//[Offset: 0x2d0, Size: 4]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x2d4, Size: 12]
	int LandId;//[Offset: 0x2e0, Size: 4]
	int FollowType;//[Offset: 0x2e4, Size: 4]
	uint64 FollowUID;//[Offset: 0x2e8, Size: 8]
	uint32 TaskSyncToDsTs;//[Offset: 0x2f0, Size: 4]
	uint64 LuckmateUID;//[Offset: 0x2f8, Size: 8]
	int CollectedEventType;//[Offset: 0x300, Size: 4]

--------------------------------
Class: GameModePlayerAliasInfo
	int aliasID;//[Offset: 0x0, Size: 4]
	FString aliasTitle;//[Offset: 0x4, Size: 12]
	FString aliasNation;//[Offset: 0x10, Size: 12]
	int aliasRank;//[Offset: 0x1c, Size: 4]
	FString aliasPartnerName;//[Offset: 0x20, Size: 12]
	int aliasPartnerRelation;//[Offset: 0x2c, Size: 4]
	int aliasRankID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AchievementPrize
	int MedalAvatarID;//[Offset: 0x0, Size: 4]
	int NotifyTitleAvatarID;//[Offset: 0x4, Size: 4]
	int ScoreBoardAvatarID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x354, Size: 12]
	bool bMultiAdvertisement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	<byte,Texture2D*> IdTextureMap;//[Offset: 0x364, Size: 60]
	StaticMesh* StaticMesh;//[Offset: 0x3a0, Size: 4]
	FString StaticMeshPath;//[Offset: 0x3a4, Size: 12]
	FrontendHUD* FrontendHUD;//[Offset: 0x3b0, Size: 4]
	int ID;//[Offset: 0x3b4, Size: 4]
	float NetCullDistance;//[Offset: 0x3b8, Size: 4]
	void SetStaticMeshPath(FString InMeshPath);// 0x3ebe31c
	void SetStaticMesh(StaticMesh* InStaticMesh);// 0x3744cc4
	void SetScale(Vector inScale);// 0x3ebe2a4
	void SetId(int InputID);// 0x3ebe22c
	void SetCulDistance(float CulDistance);// 0x3494400
	void RequestHttpImageByUrl(FString PicUrl);// 0x3ebe170
	void ReplaceTexture(Texture2D* Texture);// 0x3ebe0f8
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x3ebdff0
	void OnRep_MeshPath();// 0x446e168
	void OnRep_Id();// 0x446e168
	void OnClientLoadMesh();// 0x446e168
	void InitImageDownloadUtil();// 0x3ebdfdc

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x308, Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x30d, Size: 1]

--------------------------------
Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	FString HttpImgPath;//[Offset: 0xc, Size: 12]
	Vector Loc;//[Offset: 0x18, Size: 12]
	Rotator Rot;//[Offset: 0x24, Size: 12]
	Vector Scale;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	int CulDistance;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MissionBoardConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	float Progress;//[Offset: 0x30, Size: 4]
	FString CountOrTime;//[Offset: 0x34, Size: 12]
	int TipId;//[Offset: 0x40, Size: 4]

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x20c, Size: 12]
	byte BornIslandGroupType;//[Offset: 0x218, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x21c, Size: 208]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x2ec, Size: 60]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x328, Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 1]
	FString[] AreaIDList;//[Offset: 0x338, Size: 12]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x344, Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x350, Size: 12]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x35c, Size: 12]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x368, Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x3a4, Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x3c4, Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x3c8, Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x3cc, Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x408, Size: 60]
	Actor*[] BornIslandItems;//[Offset: 0x444, Size: 12]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x450, Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45e, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x460, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x468, Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x4b0, Size: 12]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x4c8, Size: 12]
	FString CookedBandFilePath;//[Offset: 0x510, Size: 12]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x55c, Size: 12]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x568, Size: 60]
	int DSSwitchSyncLoadId;//[Offset: 0x5a4, Size: 4]
	bool bUseDynamicSpotConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	DynamicSpotConfig[] DynamicSpotConfigs;//[Offset: 0x5ac, Size: 12]
	bool bEnablePreCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	int RandomSpotCountPerTick;//[Offset: 0x5f8, Size: 4]
	delegate PreCalculateCompleted;//[Offset: 0x638, Size: 12]
	bool bCheckPreCalculateComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	bool bEnablePrimeItemCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	PrimeItemCircleConfig[] PrimeItemCircleConfigs;//[Offset: 0x648, Size: 12]
	<Vector,UAESpotGroupObject*> SpotGroupObjectsMapByLoc;//[Offset: 0x678, Size: 60]
	bool bRemovableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	int RemoveGeneratedItemPerTick;//[Offset: 0x730, Size: 4]
	int RemoveDropGroundItemPerTick;//[Offset: 0x734, Size: 4]
	bool bAddHouseActorSerializeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	void WriteItemSpotStatisticsDatas();// 0x3ea91bc
	void WriteItemClassStatisticsDatas_V15();// 0x3365b48
	void WriteItemClassStatisticsDatas();// 0x3ea91a8
	void WriteGroupStatisticsDatas();// 0x3ea9194
	void WriteBuildingStatisticsDatas();// 0x3ea9180
	void WriteAreaItemStatisticsDatas();// 0x3ea916c
	void WriteAllStatisticsDatasToLog();// 0x337fc0c
	void WriteAllStatisticsDatas();// 0x3625e8c
	void SetCatetoryRate(<FString,float> Rates);// 0x3ea8fc0
	bool RemoveSpotInfo(bool bFirstEnterState);// 0x3ea8f38
	void RemoveItemOnTick();// 0x3ea8f24
	bool RemoveDropGround(bool bFirstEnterState);// 0x3ea8e9c
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x3ea8db8
	void RegisterBornIslandItem(Actor* Item);// 0x3844f84
	UAEDataTable* ReadItemGenerateTable(FString TablePath);// 0x3ea8c58
	void ReAddAllSpot();// 0x3ea8c44
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x3ea8a8c
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x3ea8974
	void RandomBornIslandGroups();// 0x337f8d4
	void OnAsyncLoadItemClassFinish(class Actor ActorClassPtr, ItemGenerateSpawnClass SpawnClass);// 0x3ea8720
	void LuaCustomFunctionAfterGenerate(out ItemGenerateSpawnClass SpawnClass, Actor* ItemActor);// 0x3ea85d8
	bool LuaAddRandomItemClassArray(ItemGenerateSpawnClass SpawnClass);// 0x3ea84b8
	void LoadItemGenerateTable();// 0x3566944
	bool IsCatetoryEnabled();// 0x3ea8490
	void InitCatetorys();// 0x3ea847c
	void InitCategoryEx();// 0x3ea8468
	bool GMGenerateAllSpot(FString ItemPath);// 0x3ea8308
	FString[] GetSpotTags();// 0x3ea81ac
	Vector[] GetSpotLocsByTag(FString ExTag);// 0x3ea8068
	int GetSpotLocInPolygon(Vector[] Anchors, out Vector[] OutLocs, int RandomNum);// 0x3ea7e28
	int GetSpotLocInCircle(Vector Center, int Radius, out Vector[] OutLocs, int RandomNum);// 0x3ea7c84
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x3ea7b5c
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, ItemSpotSceneComponent* SpotComponent);// 0x3ea787c
	int GetItemDefineID(class Object PickUpClass);// 0x446e168
	float GetCatetoryRate(FString Catetory);// 0x3ea77b4
	void GenerateSpotOnTick(float DeltaTime);// 0x3422848
	Vector FindASpawnLoc(World* InWorld, const Vector TraceStart);// 0x3ea76dc
	void EnableRemoveItem();// 0x3ea76c8
	void EnableRefreshAllSpot();// 0x3ea76b4
	void EnablePrimeItemPolygon(Vector[] Anchors, int PrimeConfigIndex);// 0x3ea7514
	void EnablePrimeItemCircle(Vector Center, int Radius, int PrimeConfigIndex);// 0x3ea7418
	void EnableDynamicSpotConfigByIndex(int DynamicIndex);// 0x3ea73a0
	void DoPickUp(int ItemSpotDataIndex, FString Value, FString Category);// 0x3ea7214
	void DeleteBornIslandItems();// 0x3ea7200
	bool CheckShouldGenerateItem(int ItemID);// 0x3ea7178
	void CheckRecoverItems();// 0x3ea7164
	bool CheckInPolygon(out const Vector pos, out const Vector[] Anchors);// 0x3ea703c
	bool CheckInCircle(out const Vector pos, out const Vector Center, out int Radius);// 0x3ea6f04
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x3ea6dd0
	void AddDropGround(Actor* InActor);// 0x3ea6d58

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0x14c, Size: 4]
	FString ItemTableName;//[Offset: 0x150, Size: 12]
	FString[] ItemSpawnTableList;//[Offset: 0x15c, Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0x168, Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x170, Size: 60]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x1ac, Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x1b8, Size: 60]
	FString CookedFilePath;//[Offset: 0x1f4, Size: 12]
	FString[] CookedFileAddPathArray;//[Offset: 0x200, Size: 12]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x34228c8
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x34219a8
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x3421718
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x3e85100
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x3e85034
	void GenerateSpots();// 0x35dcbb8
	void GenerateSpotOnTick(float DeltaTime);// 0x3422848
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x3e84de4
	void CheckTileLevelsVisible();// 0x3e84dd0

--------------------------------
Class: ItemActorComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: LuaActorComponent.ActorComponent.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x100, Size: 60]
	FString LuaFilePath;//[Offset: 0x13c, Size: 12]
	void UnRegistLuaTick();// 0x720673c
	void RegistLuaTick(float TickInterval);// 0x7206b58

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x25d, Size: 1]
	int ID;//[Offset: 0x260, Size: 4]
	int WorldCompositionID;//[Offset: 0x264, Size: 4]
	float HalfHeight;//[Offset: 0x268, Size: 4]
	int SpotProbability;//[Offset: 0x26c, Size: 4]
	float LineOffsetZ;//[Offset: 0x270, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	void SetSpotValid(bool Valid);// 0x3ebd8c8
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x3ebd5d4
	bool IsSpotValid();// 0x3ebd5a4
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x3ebd3d8
	bool GenerateSpot();// 0x38b87a0
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x3ebd260

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 12]
	int Weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x4, Size: 4]
	FString ItemPath;//[Offset: 0x8, Size: 12]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString MetaData;//[Offset: 0x18, Size: 12]
	FString ItemValue;//[Offset: 0x24, Size: 12]
	FString ItemCategory;//[Offset: 0x30, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x40, Size: 12]
	Vector SpotGroupLoc;//[Offset: 0x4c, Size: 12]
	Rotator SpotRotator;//[Offset: 0x58, Size: 12]
	int SpotPercent;//[Offset: 0x64, Size: 4]
	FString SpotDefaultTag;//[Offset: 0x6c, Size: 12]
	Actor* HostActor;//[Offset: 0x80, Size: 4]
	Actor* AttachedActor;//[Offset: 0x84, Size: 4]
	int SpotIndex;//[Offset: 0x9c, Size: 4]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	Vector RelativeLoc;//[Offset: 0xa4, Size: 12]

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c, Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88, Size: 60]
	AreaItemStatisticsData[] AreaItemStatisticsData;//[Offset: 0xc4, Size: 12]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllSpotCount;//[Offset: 0x10, Size: 4]
	int AllValidSpotCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4, Size: 12]
	float BuildingLocationX;//[Offset: 0x10, Size: 4]
	float BuildingLocationY;//[Offset: 0x14, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c, Size: 4]
	int AllSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidSpotCount;//[Offset: 0x24, Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28, Size: 60]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18, Size: 12]
	int ItemTogetherCount;//[Offset: 0x24, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: AreaItemStatisticsData.TableRowBase
	FString ItemName;//[Offset: 0x4, Size: 12]
	int UId;//[Offset: 0x10, Size: 4]
	int ItemID;//[Offset: 0x14, Size: 4]
	int GroupType;//[Offset: 0x18, Size: 4]
	int SpotType;//[Offset: 0x1c, Size: 4]
	FString AreaName;//[Offset: 0x20, Size: 12]
	Vector Location;//[Offset: 0x2c, Size: 12]
	float X;//[Offset: 0x38, Size: 4]
	float Y;//[Offset: 0x3c, Size: 4]
	int GameTime;//[Offset: 0x40, Size: 4]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18, Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ItemRegionCircle
	Vector Center;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float RadiusSquared2D;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ExtraItemSpawn
	int SpawnPercent;//[Offset: 0x0, Size: 4]
	FString SpawnItemValue;//[Offset: 0x4, Size: 12]
	FString SpawnItemCategory;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x4, Size: 12]
	FString ItemCategory;//[Offset: 0x10, Size: 12]
	int ItemWeight;//[Offset: 0x1c, Size: 4]
	FString ItemPath;//[Offset: 0x20, Size: 12]
	int ItemStackCount;//[Offset: 0x2c, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x30, Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x3c, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x40, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x270, Size: 4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x274, Size: 12]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x280, Size: 12]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x3eadbb4
	void RepeatSpots();// 0x3eadba0
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x3eadb28
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x3ead98c
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x3ead83c
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x3ead718

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x278, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	byte SpotGroupType;//[Offset: 0x27e, Size: 1]
	float RepeatGenerateItemCD;//[Offset: 0x280, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x284, Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x288, Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x294, Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x298, Size: 60]
	Actor*[] CacheItems;//[Offset: 0x2d4, Size: 12]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x3eae6a4
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x3eae5ec
	bool GenerateSpot();// 0x38b87a0
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x3eae4e8
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x3eae278
	int CountCacheItemValeCategory();// 0x3eae250
	void ClearCacheItems();// 0x3eae23c

--------------------------------
Class: DateTime

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xa0, Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0xa8, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: AreaItemsLimitEdit
	int AreaX;//[Offset: 0x0, Size: 4]
	int AreaY;//[Offset: 0x4, Size: 4]
	GenerateItemLimit[] ItemsMaxLimitEdit;//[Offset: 0x8, Size: 12]
	GenerateItemLimit[] ItemsMinLimitEdit;//[Offset: 0x14, Size: 12]

--------------------------------
Class: GenerateItemLimit
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AreaItemsLimit
	RegionID RegionID;//[Offset: 0x0, Size: 12]
	bool IsBeginGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool IsCheckRecoverItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	Vector[] AvailablePosi;//[Offset: 0x10, Size: 12]
	<int,AreaItemsNum> ItemsMaxLimit;//[Offset: 0x1c, Size: 60]
	<int,AreaItemsNum> ItemsMinLimit;//[Offset: 0x58, Size: 60]

--------------------------------
Class: RegionID

--------------------------------
Class: AreaItemsNum
	int LimitNum;//[Offset: 0x0, Size: 4]
	int CurNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: DynamicSpotConfig
	FString Comment;//[Offset: 0x0, Size: 12]
	bool bDefaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	FString DynamicSpotPath;//[Offset: 0x10, Size: 12]
	CustomSpotConfig CustomSpotConfig;//[Offset: 0x1c, Size: 28]
	SpotGroupProperty[] SpotGroupProperties;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CustomSpotConfig
	bool bGenerateAtBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int NeedGroupMin;//[Offset: 0x4, Size: 4]
	int NeedGroupMax;//[Offset: 0x8, Size: 4]
	bool bSpotPerGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int NeedSpotPerGroupMin;//[Offset: 0x10, Size: 4]
	int NeedSpotPerGroupMax;//[Offset: 0x14, Size: 4]
	bool bUseCookedRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: PrimeItemCircleConfig
	SpotGroupProperty[] PrimeItemCircleProperties;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UAESpotGroupObject.Object
	Object* Host;//[Offset: 0x58, Size: 4]

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	bool bCanBackupVehicleSpotDatas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x210, Size: 12]
	byte RegionType;//[Offset: 0x21c, Size: 1]
	BackupVehicleSpotData[] BackupVehicleSpotDatas;//[Offset: 0x220, Size: 12]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x22c, Size: 12]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x238, Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x248, Size: 60]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x284, Size: 60]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x2c0, Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x2fc, Size: 72]
	UAEDataTable* VehicleDataTable;//[Offset: 0x344, Size: 4]
	void WriteVehicleSpotStatisticsFromSpotFile();// 0x3365b48
	void WriteVehicleSpotStatisticsDatas_V15();// 0x3365b48
	void WriteVehicleSpotStatisticsDatas();// 0x3365b48
	void WriteVehicleClassStatisticsDatas_V15();// 0x3365b48
	void WriteVehicleClassStatisticsDatas();// 0x3365b48
	void WriteAllVehicleStatisticsDatasToLog();// 0x3365b48
	void WriteAllVehicleStatisticsDatas_V15();// 0x3365b48
	void WriteAllVehicleStatisticsDatas();// 0x3365b48
	void SetAllVehicleNumRate(<FString,float> Rates);// 0x3eeaf24
	void RegisterVehicleGenerateSpawnData(out const VehicleGenerateSpawnData Data);// 0x3eeae1c
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x3421718
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x3eeac48
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x3eeaa74
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x3eea8a0
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x3eea6cc
	void RandomGroups();// 0x337d1f4
	void LoadVehicleGenerateTable();// 0x446e168
	bool GMGenerateAllVehicleSpot(FString VehiclePath);// 0x3eea56c
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoWithCategory(out VehicleSpotProperty SpotProperty, FString Category);// 0x3eea200
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType, FString InCategory);// 0x3ee9fec
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out const VehicleSpotProperty SpotProperty, FString InCategory);// 0x3ee9d1c
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x3ee9ad4
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x3ee9904
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x3e85100
	void GenerateSpotOnTick(float DeltaTime);// 0x3422848
	bool DynamicSpawnVehicleBySpotId(int ID, FString Category);// 0x3ee975c
	void DeleteGroups();// 0x3ee9748
	bool CanDynamicSpawnVehicle(Vector SpawnLocation, Vector TestLocationOffset, Vector TestBoxSize);// 0x3ee9630
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x3ee93b8
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x3ee91cc

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x27c, Size: 1]
	byte RegionType;//[Offset: 0x27d, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27f, Size: 1]
	float RandomRotationMin;//[Offset: 0x280, Size: 4]
	float RandomRotationMax;//[Offset: 0x284, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x288, Size: 32]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x2ac, Size: 4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x3eed134
	bool GenerateSpot();// 0x38b87a0

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 12]
	FString VehiclePath;//[Offset: 0xc, Size: 12]
	float FuelPercent;//[Offset: 0x18, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: BackupVehicleSpotData
	int ID;//[Offset: 0x0, Size: 4]
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	byte SpotType;//[Offset: 0x5, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x8, Size: 12]
	Rotator SpotRotator;//[Offset: 0x14, Size: 12]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int FuelPercentMin;//[Offset: 0x10, Size: 4]
	int FuelPercentMax;//[Offset: 0x14, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	byte RandomType;//[Offset: 0x19, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x20, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x24, Size: 4]
	float ProbabilityPersent;//[Offset: 0x28, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int TotalCountRangeMin;//[Offset: 0x10, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 12]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x4, Size: 12]
	FString VehiclePath;//[Offset: 0x10, Size: 12]
	int VehicleWeight;//[Offset: 0x1c, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 12]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc, Size: 60]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	FString VehiclePath;//[Offset: 0x8, Size: 12]
	float VehicleLocationX;//[Offset: 0x14, Size: 4]
	float VehicleLocationY;//[Offset: 0x18, Size: 4]
	float VehicleLocationZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int AllVehicleCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SeasonStatueData
	FString Name;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	FString Nation;//[Offset: 0x30, Size: 12]
	int AGender;//[Offset: 0x3c, Size: 4]
	int Head;//[Offset: 0x40, Size: 4]
	int Hair;//[Offset: 0x44, Size: 4]
	int WeaponID;//[Offset: 0x48, Size: 4]
	int[] AvatarList;//[Offset: 0x4c, Size: 12]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x58, Size: 12]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0, Size: 12]
	FString MatPath;//[Offset: 0xc, Size: 12]
	FString TeamFlag;//[Offset: 0x18, Size: 12]
	FString TeamName;//[Offset: 0x24, Size: 12]
	Vector Loc;//[Offset: 0x30, Size: 12]
	Rotator Rot;//[Offset: 0x3c, Size: 12]
	Vector Scale;//[Offset: 0x48, Size: 12]

--------------------------------
Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0, Size: 12]
	float AttrValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 8]
	FString CorpsName;//[Offset: 0x8, Size: 12]
	int Icon;//[Offset: 0x14, Size: 4]
	int SegmentLevel;//[Offset: 0x18, Size: 4]

--------------------------------
Class: VehicleReportEntry
	uint32 VehicleID;//[Offset: 0x0, Size: 4]
	int VehicleShapeType;//[Offset: 0x4, Size: 4]
	bool IsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float FirstAttackedTime;//[Offset: 0xc, Size: 4]
	float LastAttackedTime;//[Offset: 0x10, Size: 4]
	bool Drived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainTeamCount;//[Offset: 0xc, Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x10, Size: 4]
	float PlaneDirectionX;//[Offset: 0x14, Size: 4]
	float PlaneDirectionY;//[Offset: 0x18, Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x1c, Size: 60]
	<FString,float> PlayersOnlineTime;//[Offset: 0x58, Size: 60]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x94, Size: 12]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 12]
	int CorpsHeadIcon;//[Offset: 0xc, Size: 4]
	int KilledNum;//[Offset: 0x10, Size: 4]
	int SegmentLevel;//[Offset: 0x14, Size: 4]
	int RealtimeRank;//[Offset: 0x18, Size: 4]
	int DefeatPlayerNum;//[Offset: 0x1c, Size: 4]
	float TotalDamage;//[Offset: 0x20, Size: 4]
	float SurvivalTime;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BattleData
	int WatcherNum;//[Offset: 0x0, Size: 4]
	int CircleNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CollectedEventData
	<FString,FString> KeyValueMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: GameModeParams
	FName CurrentGameModeState;//[Offset: 0x0, Size: 8]
	int MaxKillTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DSAIDropInfo
	uint64 BattleID;//[Offset: 0x0, Size: 8]
	int nts;//[Offset: 0x8, Size: 4]
	DSAIDropItem[] ais;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DSAIDropItem
	uint64 UId;//[Offset: 0x0, Size: 8]
	int Time;//[Offset: 0x8, Size: 4]
	int8 hlv;//[Offset: 0xc, Size: 1]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	bool IsForcedNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	float surviveTime;//[Offset: 0x404, Size: 4]
	float Pronetime;//[Offset: 0x408, Size: 4]
	float marchDistance;//[Offset: 0x414, Size: 4]
	float travelDistance;//[Offset: 0x418, Size: 4]
	float DriveDistance;//[Offset: 0x41c, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x420, Size: 4]
	int destroyVehicleNum;//[Offset: 0x424, Size: 4]
	int rescueTimes;//[Offset: 0x428, Size: 4]
	uint64[] RescueTeammatesList;//[Offset: 0x42c, Size: 12]
	int NormalItemsNum;//[Offset: 0x438, Size: 4]
	int SeniorItemsNum;//[Offset: 0x43c, Size: 4]
	int GVMemberID;//[Offset: 0x440, Size: 4]
	FName PlayerType;//[Offset: 0x448, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x450, Size: 8]
	uint32 PlayerKey;//[Offset: 0x458, Size: 4]
	FString PlayerUID;//[Offset: 0x45c, Size: 12]
	FString MLAIStringUID;//[Offset: 0x468, Size: 12]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	FString iconUrl;//[Offset: 0x478, Size: 12]
	int gender;//[Offset: 0x484, Size: 4]
	int PlayerLevel;//[Offset: 0x488, Size: 4]
	int SegmentLevel;//[Offset: 0x48c, Size: 4]
	int AceImprintShowId;//[Offset: 0x490, Size: 4]
	int AceImprintBaseId;//[Offset: 0x494, Size: 4]
	int AvatarBoxId;//[Offset: 0x498, Size: 4]
	int planeAvatarId;//[Offset: 0x49c, Size: 4]
	int CampID;//[Offset: 0x4a0, Size: 4]
	int resID;//[Offset: 0x4a4, Size: 4]
	uint64 UId;//[Offset: 0x4a8, Size: 8]
	uint64 MLAIDisplayUID;//[Offset: 0x4b0, Size: 8]
	FString OpenID;//[Offset: 0x4b8, Size: 12]
	FString Nation;//[Offset: 0x4c4, Size: 12]
	int TeamID;//[Offset: 0x4d0, Size: 4]
	int64 IdxInTeam;//[Offset: 0x4d8, Size: 8]
	int PlayerBornPointID;//[Offset: 0x4e0, Size: 4]
	int Kills;//[Offset: 0x4e4, Size: 4]
	int KillsBeforeDie;//[Offset: 0x4e8, Size: 4]
	int Knockouts;//[Offset: 0x4ec, Size: 4]
	int AIKills;//[Offset: 0x4f0, Size: 4]
	int MlAIDeliverNum;//[Offset: 0x4f8, Size: 4]
	int OriginalMlAIDeliverNum;//[Offset: 0x4fc, Size: 4]
	int Assists;//[Offset: 0x500, Size: 4]
	uint64[] AssistTeammatesList;//[Offset: 0x504, Size: 12]
	int[] OvertimeAssistsTime;//[Offset: 0x54c, Size: 12]
	byte PlatformGender;//[Offset: 0x558, Size: 1]
	int MatchStrategyLabel;//[Offset: 0x55c, Size: 4]
	int MatchLabel;//[Offset: 0x560, Size: 4]
	uint32 Killer;//[Offset: 0x564, Size: 4]
	uint32 KillerIGPlayerKey;//[Offset: 0x568, Size: 4]
	FString BeKilledOpenID;//[Offset: 0x56c, Size: 12]
	FString KillerName;//[Offset: 0x578, Size: 12]
	uint32 KillerType;//[Offset: 0x584, Size: 4]
	int KillerWeaponID;//[Offset: 0x588, Size: 4]
	uint32 KillerDeliveryType;//[Offset: 0x58c, Size: 4]
	uint32 DeadCircleIndex;//[Offset: 0x590, Size: 4]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x598, Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x5a0, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x5a4, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x5a8, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x5ac, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x5b0, Size: 4]
	int HeadShotNum;//[Offset: 0x5b4, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x5b8, Size: 4]
	int KillNumByGrende;//[Offset: 0x5bc, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x5c0, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x5c4, Size: 4]
	int UseFlashGrenadeNum;//[Offset: 0x5c8, Size: 4]
	int UseBurnGrenadeNum;//[Offset: 0x5cc, Size: 4]
	int MaxKillDistance;//[Offset: 0x5d0, Size: 4]
	int HealTimes;//[Offset: 0x5d4, Size: 4]
	float DamageAmount;//[Offset: 0x5d8, Size: 4]
	int MeleeKillTimes;//[Offset: 0x5dc, Size: 4]
	float MeleeDamageAmount;//[Offset: 0x5e0, Size: 4]
	float RangedDamagedAmount;//[Offset: 0x5e4, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x5e8, Size: 4]
	float HealAmount;//[Offset: 0x5ec, Size: 4]
	FString[] KillFlow;//[Offset: 0x5f0, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x5fc, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x608, Size: 12]
	float InDamageAmount;//[Offset: 0x614, Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x624, Size: 12]
	int PickUpItemTimes;//[Offset: 0x630, Size: 4]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x638, Size: 60]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x678, Size: 72]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x6c4, Size: 60]
	GameModeLikeResultData[] Like;//[Offset: 0x700, Size: 12]
	uint32 Switch;//[Offset: 0x70c, Size: 4]
	uint32[] Self;//[Offset: 0x710, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x71c, Size: 12]
	UseItemFlow[] UseItemFlow;//[Offset: 0x728, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x734, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x740, Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x74c, Size: 12]
	<int,int> TLog_BulletCount;//[Offset: 0x758, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x794, Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x7a0, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x7a4, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x7b0, Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x7b4, Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x7b8, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x7bc, Size: 4]
	int[] BuildFlow;//[Offset: 0x7c0, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x7cc, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x7d8, Size: 4]
	float HitShelterDamage;//[Offset: 0x7dc, Size: 4]
	Vector LandLocation;//[Offset: 0x7e0, Size: 12]
	Vector ParachuteLocation;//[Offset: 0x7ec, Size: 12]
	int LandTime;//[Offset: 0x7f8, Size: 4]
	Vector DeadLocation;//[Offset: 0x7fc, Size: 12]
	FString DeadDamangeType;//[Offset: 0x808, Size: 12]
	int PveDeadAttacker;//[Offset: 0x814, Size: 4]
	int PveStageId;//[Offset: 0x818, Size: 4]
	FString DeadTimeStr;//[Offset: 0x81c, Size: 12]
	int NearDeathDamageType;//[Offset: 0x828, Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x82c, Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	int BeDownTimes;//[Offset: 0x834, Size: 4]
	int BeSavedTimes;//[Offset: 0x838, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x83c, Size: 80]
	int PersonalRank;//[Offset: 0x88c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 1]
	int GamePlayingTime;//[Offset: 0x89c, Size: 4]
	int ObserverTime;//[Offset: 0x8a0, Size: 4]
	int TouchDownAreaID;//[Offset: 0x8a4, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x8a8, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x8ac, Size: 12]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 1]
	float ReportTouchDownHeight;//[Offset: 0x8bc, Size: 4]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x8c0, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x8cc, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x8d8, Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x8e4, Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x8f0, Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x8fc, Size: 4]
	float InHelicopterTime;//[Offset: 0x900, Size: 4]
	int RevivalNum;//[Offset: 0x904, Size: 4]
	int BeRevivedNum;//[Offset: 0x908, Size: 4]
	int KillNumInVehicle;//[Offset: 0x90c, Size: 4]
	float MaxVehicleToLandHeight;//[Offset: 0x910, Size: 4]
	float MaxVehicleInAirInterval;//[Offset: 0x914, Size: 4]
	int KillPlayerNum;//[Offset: 0x918, Size: 4]
	int KillAINum;//[Offset: 0x91c, Size: 4]
	float TotalSprintDistance;//[Offset: 0x920, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x924, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x928, Size: 4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x92c, Size: 12]
	int ProneTimes;//[Offset: 0x938, Size: 4]
	int CrouchTimes;//[Offset: 0x93c, Size: 4]
	int JumpTimes;//[Offset: 0x940, Size: 4]
	int KillMonsterNum;//[Offset: 0x944, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0x948, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x984, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x988, Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x98c, Size: 60]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x9c8, Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0xa04, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0xa08, Size: 4]
	int LightCandleNum;//[Offset: 0xa0c, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xa10, Size: 60]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0xa4c, Size: 12]
	float BattleStateTime;//[Offset: 0xa58, Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0xa60, Size: 4]
	int FistKillingCount;//[Offset: 0xa64, Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0xa68, Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0xa6c, Size: 60]
	FString[] DestroyVehicleFlow;//[Offset: 0xaa8, Size: 12]
	int UseHelicoperNum;//[Offset: 0xab4, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0xab8, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0xac4, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0xad0, Size: 32]
	float UseHelicoperDistance;//[Offset: 0xaf0, Size: 4]
	byte CharmRankIndex;//[Offset: 0xaf4, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0xaf8, Size: 60]
	int SnowBoardJumpActionCount;//[Offset: 0xb38, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0xb3c, Size: 4]
	int KillMagicWalkAI;//[Offset: 0xb40, Size: 4]
	int SendMagicWalkAI;//[Offset: 0xb44, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0xb48, Size: 12]
	int KillSnowManCount;//[Offset: 0xb54, Size: 4]
	uint64 LuckmateUID;//[Offset: 0xb58, Size: 8]
	<enum,int> EventCounterMap;//[Offset: 0xb60, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0xb9c, Size: 60]
	delegate OnGenerelCountChanged;//[Offset: 0xbe0, Size: 12]
	int VeteranRecruitIndex;//[Offset: 0xbec, Size: 4]
	delegate PlayerStateTeamChanged;//[Offset: 0xbf0, Size: 12]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xbfc, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xc08, Size: 52]
	int MemberIdInVoiceRoom;//[Offset: 0xc3c, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xc44, Size: 48]
	int UpassShow;//[Offset: 0xc74, Size: 4]
	int upassKeepBuy;//[Offset: 0xc78, Size: 4]
	int upassCurValue;//[Offset: 0xc7c, Size: 4]
	int pass_type;//[Offset: 0xc80, Size: 4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc84, Size: 1]
	TLog_Micphone MicphoneTlog;//[Offset: 0xc88, Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0xca0, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xca4, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xca8, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xcac, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xcb0, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0xcb4, Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0xcb8, Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0xcbc, Size: 4]
	DamageInfo LuaNearDeathDamageInfo;//[Offset: 0xce8, Size: 144]
	DamageInfo LuaDeathDamageInfo;//[Offset: 0xd78, Size: 144]
	FName RepPropertyCategory;//[Offset: 0xe08, Size: 8]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe10, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe28, Size: 104]
	FString RealPlayerName;//[Offset: 0xe94, Size: 12]
	int CollectedEventType;//[Offset: 0xea0, Size: 4]
	void SetGVMemberIDServerCall(int memberID);// 0x3ee28a8
	void SetGVMemberID(int memberID);// 0x3ee2830
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess, int EventTypeId);// 0x3ee2724
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x3ee2614
	void RPC_ServerAddGeneralCount(int ID, int InCount, bool bReset);// 0x3ee24bc
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x3ee2380
	void ReportTaskExtInfo(int TaskId, FString ExtInfo);// 0x3ee21e0
	void ReportTaskData(int TaskId, int process);// 0x3ee2124
	void ReportSpecialCollection(int ItemID, int Count);// 0x3ee2068
	void ReportSecretAreaID(int SecretAreaID);// 0x3ee1ff0
	void ReportLikeTeammate(int64 BeLikeUID, int LikeType);// 0x3ee1f30
	void ReportLikeSwitch(int SwitchSetting);// 0x3ee1eb8
	void ReportLikeSelf(int LikeType);// 0x3ee1e40
	void ReportLandLocType(int TouchDownLocType);// 0x3ee1dc8
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x3ee1cfc
	void ReportLandArea(int TouchDownArea);// 0x3ee1c84
	void ReportLabelCheck(int TeammateUID, int Result);// 0x3ee1bc8
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x3ee1b50
	void OnRepCampIDBP();// 0x446e168
	void OnRep_VeteranRecruitIndex();// 0x3ee1b3c
	void OnRep_UpdateKillMonsterNum();// 0x37d775c
	void OnRep_UID();// 0x37d7740
	void OnRep_TeamID();// 0x3ee1b28
	void OnRep_RescueTimesChange();// 0x3ee1b0c
	void OnRep_PlayerKillsChange();// 0x37d7640
	void OnRep_PlayerKey();// 0x3ee1af0
	void OnRep_MLAIDisplayUID();// 0x3ee1adc
	void OnRep_MatchLabel();// 0x3365b48
	void OnRep_CollectItemRecord();// 0x3ee1ac8
	void OnRep_CampID();// 0x3ee1ab4
	void OnRep_AliasInfo();// 0x3ee1aa0
	void OnClientVeteranRecruitIndexUpdated();// 0x3429d34
	bool IsSpecialPickItemCollectionCompleted(int ItemID);// 0x3ee1a20
	bool IsSpecialPickItem(int ItemID);// 0x3ee19a0
	bool IsNearDeathDamageInfoValid();// 0x3ee1978
	bool IsItemForbidMerge(int ItemResId);// 0x3ee18f0
	bool IsDeathDamageInfoValid();// 0x3ee18c8
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x3ee17e4
	int GetVeteranPlayerLevel();// 0x366dd34
	uint32 GetUserIDByMemberID(int memberID);// 0x37d7154
	FString GetUIDString();// 0x3ee1724
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x3ee16b8
	int GetTeamId();// 0x3ee169c
	int GetRank();// 0x3ee1674
	uint32 GetPlayerKey();// 0x3ee164c
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x3ee1568
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x3ee14fc
	enum GetMentorPlayerType();// 0x3ee14cc
	void ForceUpdateCampCharacterList();// 0x3ee14b0
	void CopyNearDeathDamageInfo();// 0x3ee149c
	void CopyDeathDamageInfo();// 0x3ee1488
	void ClearTlogData();// 0x3429890
	void ClearKillNum();// 0x3ee146c
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x3ee13a8
	void AddGeneralCount(int ID, int InCount, bool bReset);// 0x3ee12a0
	void AddEventCount(byte EventId, int InCount, bool bReset);// 0x3ee1198

--------------------------------
Class: LuaPlayerState.PlayerState.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x3b8, Size: 60]
	FString LuaFilePath;//[Offset: 0x3f4, Size: 12]

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0, Size: 8]
	int Times;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	FString TimeStr;//[Offset: 0x1c, Size: 12]
	uint64 InstanceID;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0, Size: 4]
	int ThrowCount;//[Offset: 0x4, Size: 4]
	int HitOthersCount;//[Offset: 0x8, Size: 4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AIDeliveryTlogData
	uint64 UId;//[Offset: 0x0, Size: 8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: AIDeliveryInfo
	int DeliveryStartTime;//[Offset: 0x0, Size: 4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int DeliveryArrivalTime;//[Offset: 0x8, Size: 4]
	int EventTypeId;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModeLikeResultData
	uint32[] Like;//[Offset: 0x0, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeTeammateLableCheckData
	uint32 Mask;//[Offset: 0x0, Size: 4]
	uint64 UId;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: UseBuffFlow
	int BuffID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: BuildingEnterFlow
	int BuildingID;//[Offset: 0x0, Size: 4]
	int EnterCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FString TimeStr;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0, Size: 8]
	int VehicleType;//[Offset: 0x8, Size: 4]
	int AvatarID;//[Offset: 0xc, Size: 4]
	float DriveDistance;//[Offset: 0x10, Size: 4]
	float DriveTime;//[Offset: 0x14, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20, Size: 12]
	int ViceWeaponID;//[Offset: 0x2c, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30, Size: 12]
	int CloseWeaponID;//[Offset: 0x3c, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40, Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponID;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int HeadShootCount;//[Offset: 0xc, Size: 4]
	int LimbsShootCount;//[Offset: 0x10, Size: 4]
	int BodyShootCount;//[Offset: 0x14, Size: 4]
	int HandShootCount;//[Offset: 0x18, Size: 4]
	int FootShootCount;//[Offset: 0x1c, Size: 4]
	int UniqueHitCount;//[Offset: 0x20, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x24, Size: 12]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int TotalOwnTime;//[Offset: 0x34, Size: 4]
	int KillCount;//[Offset: 0x38, Size: 4]
	int KnockNumber;//[Offset: 0x3c, Size: 4]
	int[] Associations;//[Offset: 0x40, Size: 12]
	int AvatarID;//[Offset: 0x4c, Size: 4]
	int DIYPlanID;//[Offset: 0x50, Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: DestroyVehicleWheelFlow
	int AreaID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityEventReportData
	byte EventId;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_KillInfo
	int FakePlayerID;//[Offset: 0x0, Size: 4]
	int DeadTime;//[Offset: 0x4, Size: 4]
	int AILastFightTime;//[Offset: 0x8, Size: 4]
	int[] PlayerAreas;//[Offset: 0xc, Size: 12]
	int ArmorID;//[Offset: 0x18, Size: 4]
	int HelmetID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TLog_Micphone
	float TeammateMicrophoneTime;//[Offset: 0x0, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x4, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x8, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xc, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x10, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DamageInfo
	uint32 DamageType;//[Offset: 0x0, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float Distance;//[Offset: 0x8, Size: 4]
	uint32 Time;//[Offset: 0xc, Size: 4]
	uint32 DamageValue;//[Offset: 0x10, Size: 4]
	uint32 AttackerID;//[Offset: 0x14, Size: 4]
	Vector AttackerLoc;//[Offset: 0x18, Size: 12]
	uint32 AttackerBulletNumInClip;//[Offset: 0x24, Size: 4]
	uint32 AttackerSightType;//[Offset: 0x28, Size: 4]
	uint32 AttackerWeaponType;//[Offset: 0x2c, Size: 4]
	uint32 AttackerWeaponScopeID;//[Offset: 0x30, Size: 4]
	uint32 AttackerShotTimes;//[Offset: 0x34, Size: 4]
	uint64 AttackerState;//[Offset: 0x38, Size: 8]
	bool bAttackerMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	uint64 VictimID;//[Offset: 0x48, Size: 8]
	uint32 VictimType;//[Offset: 0x50, Size: 4]
	uint32 VictimDeliveryType;//[Offset: 0x54, Size: 4]
	uint32 CircleIndex;//[Offset: 0x58, Size: 4]
	Vector VictimLoc;//[Offset: 0x5c, Size: 12]
	uint32 VictimState;//[Offset: 0x68, Size: 4]
	bool bVictimInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	int VictimVehicleType;//[Offset: 0x70, Size: 4]
	float VictimVelocity;//[Offset: 0x74, Size: 4]
	uint32 AttackerAreaID;//[Offset: 0x78, Size: 4]
	uint32 AlivePlayerNum;//[Offset: 0x7c, Size: 4]
	uint32 VictimTeamID;//[Offset: 0x80, Size: 4]
	int FloorType;//[Offset: 0x84, Size: 4]
	uint32 AttackerWeaponAvatarID;//[Offset: 0x88, Size: 4]
	uint32 AttackerVehicleShapeType;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	FString GameAppID;//[Offset: 0xc, Size: 12]
	FString OpenID;//[Offset: 0x18, Size: 12]
	uint16 AreaID;//[Offset: 0x24, Size: 2]
	int8 PlatID;//[Offset: 0x26, Size: 1]
	FString ZoneID;//[Offset: 0x28, Size: 12]
	uint64 BattleID;//[Offset: 0x38, Size: 8]
	FString UserName;//[Offset: 0x40, Size: 12]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	int8 RoleType;//[Offset: 0x58, Size: 1]
	FString PicUrl;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0, Size: 12]
	WeaponReport[] Weapons;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponReport
	int WeaponID;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]
	int AdsFireCount;//[Offset: 0x8, Size: 4]
	int HitCount;//[Offset: 0xc, Size: 4]
	int UniqueHitCount;//[Offset: 0x10, Size: 4]
	int KillCount;//[Offset: 0x14, Size: 4]
	float TotalDamage;//[Offset: 0x18, Size: 4]
	float TotalMonsterDamage;//[Offset: 0x1c, Size: 4]
	float TotalRealPlayerDamage;//[Offset: 0x20, Size: 4]
	float TotalNormalAIDamage;//[Offset: 0x24, Size: 4]
	float TotalMLAIDamage;//[Offset: 0x28, Size: 4]
	int TotalOwnTime;//[Offset: 0x2c, Size: 4]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int KnockDownCount;//[Offset: 0x34, Size: 4]
	int HeadShootCount;//[Offset: 0x38, Size: 4]
	int KillAICount;//[Offset: 0x3c, Size: 4]
	int KnockDownAICount;//[Offset: 0x40, Size: 4]
	int HeadShootAICount;//[Offset: 0x44, Size: 4]
	int HitAICount;//[Offset: 0x48, Size: 4]
	int UniqueHitAICount;//[Offset: 0x4c, Size: 4]
	int UseCount;//[Offset: 0x50, Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x54, Size: 12]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 4]
	int Distance;//[Offset: 0x4, Size: 4]
	int IsKill;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte[] PlayerStates;//[Offset: 0x14, Size: 12]
	byte HitPos;//[Offset: 0x20, Size: 1]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]
	int Kill;//[Offset: 0x18, Size: 4]
	int AIKills;//[Offset: 0x1c, Size: 4]
	FString State;//[Offset: 0x20, Size: 12]
	float travelDistance;//[Offset: 0x2c, Size: 4]
	float marchDistance;//[Offset: 0x30, Size: 4]
	float DriveDistance;//[Offset: 0x34, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x38, Size: 4]
	float DamageAmount;//[Offset: 0x3c, Size: 4]
	float HealAmount;//[Offset: 0x40, Size: 4]
	int AssistNum;//[Offset: 0x44, Size: 4]
	uint64[] AssistTeammatesList;//[Offset: 0x48, Size: 12]
	int HeadShotNum;//[Offset: 0x54, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x58, Size: 4]
	float surviveTime;//[Offset: 0x5c, Size: 4]
	int rescueTimes;//[Offset: 0x60, Size: 4]
	uint64[] RescueTeammatesList;//[Offset: 0x64, Size: 12]
	int DestroyVehicles;//[Offset: 0x70, Size: 4]
	FString[] KillFlow;//[Offset: 0x74, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x80, Size: 12]
	float OutsideBlueCircleTime;//[Offset: 0x8c, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x90, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x9c, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0xa0, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0xa4, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xa8, Size: 12]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0xb4, Size: 4]
	float InDamageAmount;//[Offset: 0xb8, Size: 4]
	int ProneTimes;//[Offset: 0xbc, Size: 4]
	int CrouchTimes;//[Offset: 0xc0, Size: 4]
	int JumpTimes;//[Offset: 0xc4, Size: 4]
	int KillMonsterNum;//[Offset: 0xc8, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xcc, Size: 60]
	int LightCandleNum;//[Offset: 0x108, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0x10c, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x148, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x14c, Size: 4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x150, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x154, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	int mainWeaponID;//[Offset: 0x15c, Size: 4]
	float MaxWeaponAccurate;//[Offset: 0x160, Size: 4]
	float MaxWeaponHeadShotRate;//[Offset: 0x164, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 4]
	int DeerBBQNum;//[Offset: 0x4, Size: 4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 4]
	int UseKFNum;//[Offset: 0xc, Size: 4]
	int UseUAVNum;//[Offset: 0x10, Size: 4]
	int KFUsingTime;//[Offset: 0x14, Size: 4]
	int UAVUsingTime;//[Offset: 0x18, Size: 4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 12]

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainingPlayerCount;//[Offset: 0xc, Size: 4]
	int TotalPlayerCount;//[Offset: 0x10, Size: 4]
	int RemainingTeamCount;//[Offset: 0x14, Size: 4]
	int TotalTeamCount;//[Offset: 0x18, Size: 4]
	float OnlineTime;//[Offset: 0x1c, Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	uint64 Killer;//[Offset: 0x28, Size: 8]
	uint64 killer_ig_uid;//[Offset: 0x30, Size: 8]
	uint64 KillerAIDisplayUID;//[Offset: 0x38, Size: 8]
	FString KillerName;//[Offset: 0x40, Size: 12]
	FString BeKilledOpenID;//[Offset: 0x4c, Size: 12]
	uint32 KillerType;//[Offset: 0x58, Size: 4]
	uint32 KillerDeliveryType;//[Offset: 0x5c, Size: 4]
	int KillerWeaponID;//[Offset: 0x60, Size: 4]
	uint32 DeadCircleIndex;//[Offset: 0x64, Size: 4]
	int ShootWeaponShotNum;//[Offset: 0x68, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x6c, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x70, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x74, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x78, Size: 4]
	int HealTimes;//[Offset: 0x7c, Size: 4]
	FString[] KillFlow;//[Offset: 0x80, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x8c, Size: 12]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x98, Size: 12]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0xa4, Size: 60]
	int PickUpItemTimes;//[Offset: 0xe0, Size: 4]
	<int,int> TLog_BulletCount;//[Offset: 0xe4, Size: 60]
	uint64 parachute_leader_uid;//[Offset: 0x120, Size: 8]
	UseItemFlow[] UseItemFlow;//[Offset: 0x128, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x134, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x140, Size: 12]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x14c, Size: 12]
	int destroyVehicleNum;//[Offset: 0x158, Size: 4]
	int is_escape;//[Offset: 0x15c, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x160, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x16c, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x178, Size: 32]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x198, Size: 12]
	GameModeLikeResultData[] Like;//[Offset: 0x1a4, Size: 12]
	uint64[] BeLiked;//[Offset: 0x1b0, Size: 12]
	uint32 Switch;//[Offset: 0x1bc, Size: 4]
	uint32[] Self;//[Offset: 0x1c0, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x1cc, Size: 12]
	Vector LandLocation;//[Offset: 0x1d8, Size: 12]
	int LandTime;//[Offset: 0x1e4, Size: 4]
	Vector ParachuteLocation;//[Offset: 0x1e8, Size: 12]
	Vector DeadLocation;//[Offset: 0x1f4, Size: 12]
	FString DeadDamangeType;//[Offset: 0x200, Size: 12]
	int PveDeadAttacker;//[Offset: 0x20c, Size: 4]
	int PveStageId;//[Offset: 0x210, Size: 4]
	FString DeadTimeStr;//[Offset: 0x214, Size: 12]
	FString logoutime;//[Offset: 0x220, Size: 12]
	float Pronetime;//[Offset: 0x22c, Size: 4]
	float BeInWaterTime;//[Offset: 0x230, Size: 4]
	float SwimmingDistance;//[Offset: 0x234, Size: 4]
	int BeDownTimes;//[Offset: 0x238, Size: 4]
	int BeSavedTimes;//[Offset: 0x23c, Size: 4]
	int PickUpAirDrops;//[Offset: 0x240, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x244, Size: 80]
	int Rank;//[Offset: 0x294, Size: 4]
	int TotalScore;//[Offset: 0x298, Size: 4]
	int ProneTimes;//[Offset: 0x29c, Size: 4]
	int CrouchTimes;//[Offset: 0x2a0, Size: 4]
	int JumpTimes;//[Offset: 0x2a4, Size: 4]
	int TouchDownAreaID;//[Offset: 0x2a8, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x2ac, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x2b0, Size: 12]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x2bc, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x2c8, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x2d4, Size: 12]
	GrenadeDamageRecord GrenadeDamageRecord;//[Offset: 0x2e0, Size: 28]
	KniveDamageRecord KniveDamageRecord;//[Offset: 0x2fc, Size: 32]
	int[] SecretAreaIDList;//[Offset: 0x31c, Size: 12]
	int KillNumInVehicle;//[Offset: 0x328, Size: 4]
	float TotalSprintDistance;//[Offset: 0x32c, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x330, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x334, Size: 4]
	int[] BuildFlow;//[Offset: 0x338, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x344, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x350, Size: 4]
	float HitShelterDamage;//[Offset: 0x354, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x358, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x364, Size: 12]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	int KillMonsterNum;//[Offset: 0x374, Size: 4]
	int LightCandleNum;//[Offset: 0x378, Size: 4]
	int KillMagicWalkAI;//[Offset: 0x37c, Size: 4]
	int SendMagicWalkAI;//[Offset: 0x380, Size: 4]
	float BattleStateTime;//[Offset: 0x384, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	<int,int> ActivityButtonCount;//[Offset: 0x38c, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x3c8, Size: 8]
	float TotalDamage;//[Offset: 0x3d0, Size: 4]
	int MeleeKillTimes;//[Offset: 0x3d4, Size: 4]
	float MeleeDamageAmount;//[Offset: 0x3d8, Size: 4]
	float RangedDamagedAmount;//[Offset: 0x3dc, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x3e0, Size: 4]
	int OpenAirDropBoxesNum;//[Offset: 0x3e4, Size: 4]
	int FollowState;//[Offset: 0x3e8, Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x3ec, Size: 12]
	int UseHelicoperNum;//[Offset: 0x3f8, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x3fc, Size: 4]
	int RevivalNum;//[Offset: 0x400, Size: 4]
	int BeRevivedNum;//[Offset: 0x404, Size: 4]
	int DrivingHelicopterTime;//[Offset: 0x408, Size: 4]
	int InHelicopterTime;//[Offset: 0x40c, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0x410, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0x414, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0x418, Size: 12]
	int KillSnowManCount;//[Offset: 0x424, Size: 4]
	<enum,int> EventCounterMap;//[Offset: 0x428, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0x464, Size: 60]
	TLog_Micphone MicphoneTlog;//[Offset: 0x4a0, Size: 24]
	int NormalItemNum;//[Offset: 0x4b8, Size: 4]
	int SeniorItemNum;//[Offset: 0x4bc, Size: 4]
	SpecialWeaponRecord[] SpecicalWeaponRecordList;//[Offset: 0x4c0, Size: 12]

--------------------------------
Class: GrenadeDamageRecord
	int HitCount;//[Offset: 0x0, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x4, Size: 12]
	GrenadeDamageRecordItem[] Grenades;//[Offset: 0x10, Size: 12]

--------------------------------
Class: GrenadeDamageRecordItem
	int WeaponID;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	int KnockNumber;//[Offset: 0x10, Size: 4]
	int AvatarID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: KniveDamageRecord
	int HeadShootCount;//[Offset: 0x0, Size: 4]
	int LimbsShootCount;//[Offset: 0x4, Size: 4]
	int BodyShootCount;//[Offset: 0x8, Size: 4]
	int HandShootCount;//[Offset: 0xc, Size: 4]
	int FootShootCount;//[Offset: 0x10, Size: 4]
	KniveDamageRecordItem[] Knives;//[Offset: 0x14, Size: 12]

--------------------------------
Class: KniveDamageRecordItem
	int WeaponID;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockNumber;//[Offset: 0xc, Size: 4]
	int AvatarID;//[Offset: 0x10, Size: 4]
	int TotalUseTime;//[Offset: 0x14, Size: 4]
	int TotalOwnTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SpecialWeaponRecord
	int WeaponID;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: RealtimeVerifyInfo
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	int HitCountsNoAI;//[Offset: 0x10, Size: 4]
	int HeadshotCountsNoAI;//[Offset: 0x14, Size: 4]
	int ShotCounts;//[Offset: 0x18, Size: 4]
	int Kills;//[Offset: 0x1c, Size: 4]
	int PrisonBreaks;//[Offset: 0x20, Size: 4]
	int MoveSpeedAcc1;//[Offset: 0x24, Size: 4]
	int MoveSpeedAcc2;//[Offset: 0x28, Size: 4]
	int JumpMaxHeight2;//[Offset: 0x2c, Size: 4]
	int SkeletonLengthCheckInvaildNum;//[Offset: 0x30, Size: 4]
	int MuzzleAndOwnerPosInVaildNum;//[Offset: 0x34, Size: 4]
	int ImpactActorPosOffsetBigNum;//[Offset: 0x38, Size: 4]
	int TotalImpactCharacterNum;//[Offset: 0x3c, Size: 4]
	int WeaponScopeHeightBigNum;//[Offset: 0x40, Size: 4]
	int WeaponScopeDisBigNum;//[Offset: 0x44, Size: 4]
	int OwnerHeadAndMuzzleBlockNum;//[Offset: 0x48, Size: 4]
	int ImpactPointAndBulletDisBigNum;//[Offset: 0x4c, Size: 4]
	int ShootVerifyInvalidNum;//[Offset: 0x50, Size: 4]
	float TotalSkeletonLengthMax;//[Offset: 0x54, Size: 4]
	float TimeAccTotal;//[Offset: 0x58, Size: 4]
	int TimeAccTimes;//[Offset: 0x5c, Size: 4]
	int SpeedQuickCheck;//[Offset: 0x60, Size: 4]
	float ShootVerifyClientHitAABBCount;//[Offset: 0x64, Size: 4]
	float ShootVerifyDSAABBMissCount;//[Offset: 0x68, Size: 4]
	float PlayerZ;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: HeartBeatData
	int AlivePlayerNum;//[Offset: 0x0, Size: 4]
	int AINum;//[Offset: 0x4, Size: 4]
	int MonsterNum;//[Offset: 0x8, Size: 4]
	int ConnectionNum;//[Offset: 0xc, Size: 4]
	int OnlineNum;//[Offset: 0x10, Size: 4]
	int HighPingNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BattlePlayer.Object
	uint64 UId;//[Offset: 0x20, Size: 8]
	PlayerInfoData PlayerInfoData;//[Offset: 0x28, Size: 160]
	PlayerAvatarData PlayerAvatarData;//[Offset: 0xc8, Size: 16]
	<int,WeaponDIYData> WeaponDIYData;//[Offset: 0xd8, Size: 60]
	BattleUtils* OwningBattleUtils;//[Offset: 0x114, Size: 4]
	GameModePlayerParams ExtractGameModePlayerParams();// 0x3cc0a50

--------------------------------
Class: PlayerInfoData.ResponResult
	FString PlayerType;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint32 PlayerKey;//[Offset: 0x1c, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	byte PlayerGender;//[Offset: 0x21, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	int64 CampID;//[Offset: 0x28, Size: 8]
	int PlayerBornPointID;//[Offset: 0x30, Size: 4]
	GameModePlayerItem[] ItemList;//[Offset: 0x34, Size: 12]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x40, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x4c, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x58, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x64, Size: 48]
	int planeAvatarId;//[Offset: 0x94, Size: 4]
	int RolewearIndex;//[Offset: 0x98, Size: 4]

--------------------------------
Class: ResponResult
	bool bResponed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: PlayerAvatarData.ResponResult
	AvatarBackpack[] AvatarBackpackData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AvatarBackpack
	int[] WeaponAvatarList;//[Offset: 0x0, Size: 12]
	int[] VehicleAvatarList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponDIYData.ResponResult
	int WeaponID;//[Offset: 0x4, Size: 4]
	int PlanID;//[Offset: 0x8, Size: 4]
	DIYMergedTexData[] DIYData;//[Offset: 0xc, Size: 12]
	int[] MatParam;//[Offset: 0x18, Size: 12]
	int[] MirroParam;//[Offset: 0x24, Size: 12]
	int[] SlotMatParam;//[Offset: 0x30, Size: 12]

--------------------------------
Class: DIYMergedTexData
	DIYOneTexData[] TextureList;//[Offset: 0x0, Size: 12]
	int TexPathID;//[Offset: 0xc, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x10, Size: 48]
	int SlotID;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DIYOneTexData
	int TexPathID;//[Offset: 0x0, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x4, Size: 48]

--------------------------------
Class: DIYParamData
	int Direction;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	float Opacity;//[Offset: 0x8, Size: 4]
	float Rotation;//[Offset: 0xc, Size: 4]
	float ScaleX;//[Offset: 0x10, Size: 4]
	float ScaleY;//[Offset: 0x14, Size: 4]
	float OffSetX;//[Offset: 0x18, Size: 4]
	float OffSetY;//[Offset: 0x1c, Size: 4]
	float UClipX;//[Offset: 0x20, Size: 4]
	float UClipY;//[Offset: 0x24, Size: 4]
	float VClipX;//[Offset: 0x28, Size: 4]
	float VClipY;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BattleGameInfo
	uint64 GameID;//[Offset: 0x0, Size: 8]
	FString GameModeID;//[Offset: 0x8, Size: 12]
	int GameMapID;//[Offset: 0x14, Size: 4]
	int WeatherID;//[Offset: 0x18, Size: 4]
	FString WeatherName;//[Offset: 0x1c, Size: 12]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x304, Size: 1]
	uint32 AILevel;//[Offset: 0x308, Size: 4]
	bool bMLAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	uint32 MLBotType;//[Offset: 0x310, Size: 4]

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleAIPlayer.BattlePlayer.Object
	GameModeAIPlayerParams ExtractGameModeAIPlayerParams();// 0x3cc0f0c

--------------------------------
Class: GameModeStateChangedParams
	FName GameModeState;//[Offset: 0x0, Size: 8]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]
	int extend;//[Offset: 0x10, Size: 4]
	int Extend2;//[Offset: 0x14, Size: 4]
	FString MsgData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: UAAssistantInfoWrapper
	enum UAType;//[Offset: 0x0, Size: 1]
	int Result;//[Offset: 0x4, Size: 4]
	FString ExtraJson;//[Offset: 0x8, Size: 12]
	FString RetsultMsg;//[Offset: 0x14, Size: 12]

--------------------------------
Class: SDKCallbackInfoWrapper
	enum CallbackType;//[Offset: 0x0, Size: 1]
	FString CallbackParameter;//[Offset: 0x4, Size: 12]
	FString ExtraJson;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0, Size: 4]
	<FString,FString> friendsInfo;//[Offset: 0x4, Size: 60]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 4]
	int Flag;//[Offset: 0x4, Size: 4]
	int ErrorCode;//[Offset: 0x8, Size: 4]
	int PlatForm;//[Offset: 0xc, Size: 4]
	FString Desc;//[Offset: 0x10, Size: 12]
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 12]
	FString MemberNum;//[Offset: 0xc, Size: 12]
	FString ChatRoomURL;//[Offset: 0x18, Size: 12]

--------------------------------
Class: DownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]
	FString StringContent;//[Offset: 0x24, Size: 12]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: SettingSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bUseRegisterDelegateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	<FString,bool> CacheRegisterProperties_Bool;//[Offset: 0x24, Size: 60]
	<FString,int> CacheRegisterProperties_Int;//[Offset: 0x60, Size: 60]
	<FString,float> CacheRegisterProperties_Float;//[Offset: 0x9c, Size: 60]
	FString CachedSaveGameName;//[Offset: 0xd8, Size: 12]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0xe4, Size: 12]
	delegate GetUserSettingsDelegate;//[Offset: 0xf0, Size: 16]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x100, Size: 4]
	SaveGame* UserSettings;//[Offset: 0x104, Size: 4]
	class Object* UserSettingsClass;//[Offset: 0x108, Size: 4]
	FString UserSettingsClassName;//[Offset: 0x10c, Size: 12]
	FString ActiveSaveGameName;//[Offset: 0x118, Size: 12]
	FString LanguageSettingsClassName;//[Offset: 0x128, Size: 12]
	FString LanguageSaveGameName;//[Offset: 0x134, Size: 12]
	<FString,bool> LanguageMap;//[Offset: 0x188, Size: 60]
	bool SetUserSettings_String(FString PropertyName, FString Val);// 0x3d3f994
	bool SetUserSettings_Int(FString PropertyName, int Value);// 0x3d3f88c
	bool SetUserSettings_Float(FString PropertyName, float Value);// 0x3d3f784
	bool SetUserSettings_Bool(FString PropertyName, bool Value, bool IngoreSave);// 0x3d3f624
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x3d3f4f8
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x3d3f4f8
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x3d3f4f8
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x3d3f454
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x3d3f390
	FString GetUserSettings_String(FString PropertyName);// 0x3d3f24c
	int GetUserSettings_Int(FString PropertyName);// 0x3d3f188
	float GetUserSettings_Float(FString PropertyName);// 0x3d3f0c0
	bool GetUserSettings_Bool(FString PropertyName);// 0x3d3effc
	SaveGame* GetUserSettings();// 0x3d3efd4
	FString GetUserLanguageSettingsProperty_String(FString PropertyName);// 0x3d3ee90
	EffectSettingMgr* GetEffectSettingMgr();// 0x3d3ee68
	SaveGame* GetCustomSetting(FString InSlotName);// 0x3d3eda4
	void FinishModifyUserSettings();// 0x3d3ed90
	void CheckLocalizationLanguage();// 0x3d3ed7c
	bool CheckChangeWithCache(Object* Source, Property* Property, FString PropertyName);// 0x3d3eb8c
	void CacheRegisterValue(Object* Source, Property* Property, FString PropertyName);// 0x3d3e9a4
	void BeginModifyUserSettings();// 0x3d3e990
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x3d3e890

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 12]
	SaveGame* SaveGame;//[Offset: 0xc, Size: 4]

--------------------------------
Class: EffectSettingMgr.Object
	FString SingleLayerColorTable;//[Offset: 0x1c, Size: 12]
	FString MultiLayerColorTable;//[Offset: 0x28, Size: 12]
	void UpdateSingleLayerColor(LinearColor Color);// 0x348774c
	void UpdateMultiLayerColcor(FString Key, LinearColor Color);// 0x34875a8
	void SetParticleSystemColorSingleLayer(ParticleSystemComponent* ParticleSystem);// 0x3487530
	void SetParticleSystemColorMultiLayer(ParticleSystemComponent* ParticleSystem);// 0x34874b8

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20, Size: 4]
	SoftObjectPath TinyFontName;//[Offset: 0x28, Size: 24]
	Font* SmallFont;//[Offset: 0x5c, Size: 4]
	SoftObjectPath SmallFontName;//[Offset: 0x60, Size: 24]
	Font* MediumFont;//[Offset: 0x78, Size: 4]
	SoftObjectPath MediumFontName;//[Offset: 0x80, Size: 24]
	Font* LargeFont;//[Offset: 0x98, Size: 4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0, Size: 24]
	Font* SubtitleFont;//[Offset: 0xb8, Size: 4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0, Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xd8, Size: 12]
	FString[] AdditionalFontNames;//[Offset: 0xec, Size: 12]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 4]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x190, Size: 4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x198, Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1b0, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1b4, Size: 4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b8, Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1d0, Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e8, Size: 4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1f0, Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x208, Size: 4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x20c, Size: 4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x210, Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x228, Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x240, Size: 24]
	Object* GameSingleton;//[Offset: 0x258, Size: 4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x260, Size: 24]
	AssetManager* AssetManager;//[Offset: 0x278, Size: 4]
	Texture2D* DefaultTexture;//[Offset: 0x27c, Size: 4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x280, Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x298, Size: 4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2a0, Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b8, Size: 4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2c0, Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d8, Size: 4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2e0, Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f8, Size: 4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x300, Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x318, Size: 4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x320, Size: 24]
	Material* WireframeMaterial;//[Offset: 0x338, Size: 4]
	FString WireframeMaterialName;//[Offset: 0x33c, Size: 12]
	Material* DebugMeshMaterial;//[Offset: 0x348, Size: 4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x350, Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x368, Size: 4]
	FString LevelColorationLitMaterialName;//[Offset: 0x36c, Size: 12]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x378, Size: 4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x37c, Size: 12]
	Material* LightingTexelDensityMaterial;//[Offset: 0x388, Size: 4]
	FString LightingTexelDensityName;//[Offset: 0x38c, Size: 12]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x398, Size: 4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x39c, Size: 12]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a8, Size: 4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3ac, Size: 12]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b8, Size: 4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3c0, Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x3d8, Size: 4]
	FString VertexColorMaterialName;//[Offset: 0x3dc, Size: 12]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e8, Size: 4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3ec, Size: 12]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f8, Size: 4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3fc, Size: 12]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x408, Size: 4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x40c, Size: 12]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x418, Size: 4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x41c, Size: 12]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x428, Size: 4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x42c, Size: 12]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x438, Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x450, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x454, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x458, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x45c, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x460, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x464, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x468, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x46c, Size: 4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x470, Size: 4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x478, Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x490, Size: 4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x498, Size: 24]
	Material* ArrowMaterial;//[Offset: 0x4b0, Size: 4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b8, Size: 24]
	Material* OutlineMaterial;//[Offset: 0x4d0, Size: 4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d8, Size: 24]
	Material* OutlineMaskedMaterial;//[Offset: 0x4f0, Size: 4]
	SoftObjectPath OutlineMaskedMaterialName;//[Offset: 0x4f8, Size: 24]
	Material* LowLevelLODMaterial;//[Offset: 0x510, Size: 4]
	Material* LowLevelLODMaskMaterial;//[Offset: 0x514, Size: 4]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x518, Size: 24]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x530, Size: 24]
	Texture2D* SmaaAreaTex;//[Offset: 0x548, Size: 4]
	Texture2D* SmaaSearchTex;//[Offset: 0x54c, Size: 4]
	Material* DyeingColorMaterial;//[Offset: 0x550, Size: 4]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x558, Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x570, Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x580, Size: 12]
	LinearColor[] QuadComplexityColors;//[Offset: 0x58c, Size: 12]
	LinearColor[] LightComplexityColors;//[Offset: 0x598, Size: 12]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x5a4, Size: 12]
	LinearColor[] LODColorationColors;//[Offset: 0x5b0, Size: 12]
	LinearColor[] HLODColorationColors;//[Offset: 0x5bc, Size: 12]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x5c8, Size: 12]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x5d4, Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x5d8, Size: 4]
	float MinLightMapDensity;//[Offset: 0x5dc, Size: 4]
	float IdealLightMapDensity;//[Offset: 0x5e0, Size: 4]
	float MaxLightMapDensity;//[Offset: 0x5e4, Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x5ec, Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x5f0, Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x5f4, Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x604, Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x614, Size: 12]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x620, Size: 4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x628, Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x640, Size: 12]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x64c, Size: 12]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x658, Size: 12]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x664, Size: 12]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x670, Size: 4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x678, Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x690, Size: 4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x698, Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x6b0, Size: 4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x6b8, Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x6d0, Size: 4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x6d8, Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x6f4, Size: 4]
	FString[] DeferredCommands;//[Offset: 0x6f8, Size: 12]
	int TickCycles;//[Offset: 0x704, Size: 4]
	int GameCycles;//[Offset: 0x708, Size: 4]
	int ClientCycles;//[Offset: 0x70c, Size: 4]
	float NearClipPlane;//[Offset: 0x710, Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x714, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x714, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x718, Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71c, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71c, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71c, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71c, Size: 1]
	float FixedFrameRate;//[Offset: 0x720, Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x724, Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x734, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x738, Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73c, Size: 1]
	Color C_WorldBox;//[Offset: 0x740, Size: 4]
	Color C_BrushWire;//[Offset: 0x744, Size: 4]
	Color C_AddWire;//[Offset: 0x748, Size: 4]
	Color C_SubtractWire;//[Offset: 0x74c, Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x750, Size: 4]
	Color C_NonSolidWire;//[Offset: 0x754, Size: 4]
	Color C_WireBackground;//[Offset: 0x758, Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x75c, Size: 4]
	Color C_VolumeCollision;//[Offset: 0x760, Size: 4]
	Color C_BSPCollision;//[Offset: 0x764, Size: 4]
	Color C_OrthoBackground;//[Offset: 0x768, Size: 4]
	Color C_Volume;//[Offset: 0x76c, Size: 4]
	Color C_BrushShape;//[Offset: 0x770, Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x774, Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x778, Size: 12]
	byte TransitionType;//[Offset: 0x784, Size: 1]
	FString TransitionDescription;//[Offset: 0x788, Size: 12]
	FString TransitionGameMode;//[Offset: 0x794, Size: 12]
	float MeshLODRange;//[Offset: 0x7a0, Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a4, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x7a8, Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x7ac, Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x7b0, Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x7b4, Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b8, Size: 1]
	int MaxParticleResize;//[Offset: 0x7bc, Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x7c0, Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x7c4, Size: 12]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x7d0, Size: 28]
	float NetClientTicksPerSecond;//[Offset: 0x7ec, Size: 4]
	float DisplayGamma;//[Offset: 0x7f0, Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x7f4, Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x7f8, Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x7fc, Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x80c, Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x81c, Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x82c, Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x83c, Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84d, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84d, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84d, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84d, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x850, Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x858, Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85c, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x860, Size: 12]
	float SelectionHighlightIntensity;//[Offset: 0x878, Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x87c, Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x880, Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x884, Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x888, Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0x9dc, Size: 12]
	FString[] ServerActors;//[Offset: 0x9e8, Size: 12]
	FString[] RuntimeServerActors;//[Offset: 0x9f4, Size: 12]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa00, Size: 1]
	int NextWorldContextHandle;//[Offset: 0xa10, Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x60, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x64, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c, Size: 4]
	int WindowPosX;//[Offset: 0x70, Size: 4]
	int WindowPosY;//[Offset: 0x74, Size: 4]
	int FullscreenMode;//[Offset: 0x78, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x80, Size: 4]
	uint32 Version;//[Offset: 0x84, Size: 4]
	int AudioQualityLevel;//[Offset: 0x88, Size: 4]
	float FrameRateLimit;//[Offset: 0x8c, Size: 4]
	int DesiredScreenWidth;//[Offset: 0x94, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	int DesiredScreenHeight;//[Offset: 0x9c, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xa0, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xa4, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xa8, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xac, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xb0, Size: 12]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xbc, Size: 12]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc8, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xd0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd4, Size: 12]
	void ValidateSettings();// 0x35bc7fc
	bool SupportsHDRDisplayOutput();// 0x349696c
	void SetVSyncEnabled(bool bEnable);// 0x6001e1c
	void SetVisualEffectQuality(int Value);// 0x3cfd464
	void SetViewDistanceQuality(int Value);// 0x6001da4
	void SetToDefaults();// 0x3381384
	void SetTextureQuality(int Value);// 0x6001d2c
	void SetShadowQuality(int Value);// 0x6001cb4
	void SetScreenResolution(IntPoint Resolution);// 0x6001c44
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x6001bcc
	void SetResolutionScaleValue(int NewScaleValue);// 0x6001b54
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x6001adc
	void SetPostProcessingQuality(int Value);// 0x6001a64
	void SetOverallScalabilityLevel(int Value);// 0x338b738
	void SetFullscreenMode(byte InFullscreenMode);// 0x60019ec
	void SetFrameRateLimit(float NewLimit);// 0x6001974
	void SetFoliageQuality(int Value);// 0x60018fc
	void SetBenchmarkFallbackValues();// 0x60018e8
	void SetAudioQualityLevel(int QualityLevel);// 0x6001870
	void SetAntiAliasingQuality(int Value);// 0x60017f8
	void SaveSettings();// 0x36ab230
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x60016f0
	void RevertVideoMode();// 0x60016dc
	void ResetToCurrentSettings();// 0x3ce2364
	void LoadSettings(bool bForceReload);// 0x34312e8
	bool IsVSyncEnabled();// 0x60016b4
	bool IsVSyncDirty();// 0x600168c
	bool IsScreenResolutionDirty();// 0x6001664
	bool IsHDREnabled();// 0x600163c
	bool IsFullscreenModeDirty();// 0x6001614
	bool IsDirty();// 0x3431ca4
	int GetVisualEffectQuality();// 0x60015ec
	int GetViewDistanceQuality();// 0x3388084
	int GetTextureQuality();// 0x60015c4
	int GetShadowQuality();// 0x600159c
	IntPoint GetScreenResolution();// 0x6001554
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x60013c0
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x600122c
	float GetRecommendedResolutionScale();// 0x60011fc
	byte GetPreferredFullscreenMode();// 0x60011d4
	int GetPostProcessingQuality();// 0x3cdb0cc
	int GetOverallScalabilityLevel();// 0x60011ac
	IntPoint GetLastConfirmedScreenResolution();// 0x6001164
	byte GetLastConfirmedFullscreenMode();// 0x600113c
	static GameUserSettings* GetGameUserSettings();// 0x6001114
	byte GetFullscreenMode();// 0x60010ec
	float GetFrameRateLimit();// 0x60010c4
	int GetFoliageQuality();// 0x600109c
	IntPoint GetDesktopResolution();// 0x6001054
	static IntPoint GetDefaultWindowPosition();// 0x6001014
	static byte GetDefaultWindowMode();// 0x361a788
	float GetDefaultResolutionScale();// 0x391dcc0
	static IntPoint GetDefaultResolution();// 0x6000fd4
	int GetCurrentHDRDisplayNits();// 0x6000fac
	int GetAudioQualityLevel();// 0x6000f90
	int GetAntiAliasingQuality();// 0x6000f68
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x6000ea0
	void ConfirmVideoMode();// 0x6000e8c
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x6000e04
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x6000d84
	void ApplyNonResolutionSettings();// 0x33bb640
	void ApplyHardwareBenchmarkResults();// 0x3381458

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x1c0, Size: 12]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x1d8, Size: 4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 12]
	StatColorMapEntry[] colorMap;//[Offset: 0xc, Size: 12]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 4]
	Color Out;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 8]
	FName NewGameName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 8]
	FName OldClassName;//[Offset: 0x8, Size: 8]
	FName NewClassName;//[Offset: 0x10, Size: 8]
	FName OldSubobjName;//[Offset: 0x18, Size: 8]
	FName NewSubobjName;//[Offset: 0x20, Size: 8]
	FName NewClassClass;//[Offset: 0x28, Size: 8]
	FName NewClassPackage;//[Offset: 0x30, Size: 8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 12]
	FString NewPluginName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 8]
	FName NewStructName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 12]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	FString Comment;//[Offset: 0x18, Size: 12]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x4, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x8, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0xc, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x10, Size: 4]
	float AngularRecipFixTime;//[Offset: 0x14, Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 8]
	FName DriverClassName;//[Offset: 0x8, Size: 8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	void ConditionSetFireGyroData(bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue3, bool CallFunc_EqualEqual_FloatFloat_ReturnValue4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue5, bool CallFunc_EqualEqual_FloatFloat_ReturnValue6, bool CallFunc_EqualEqual_FloatFloat_ReturnValue7, bool CallFunc_EqualEqual_FloatFloat_ReturnValue8, bool CallFunc_EqualEqual_FloatFloat_ReturnValue9, bool CallFunc_EqualEqual_FloatFloat_ReturnValue10);// 0x446e168
	void Init(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x446e168
	int CrossHairColor;//[Offset: 0x20, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	int LeftHandFire;//[Offset: 0x28, Size: 4]
	int Gyroscope;//[Offset: 0x2c, Size: 4]
	int ArtQuality;//[Offset: 0x30, Size: 4]
	float ViewPercentage;//[Offset: 0x34, Size: 4]
	int FireMode;//[Offset: 0x38, Size: 4]
	int VehicleControlMode;//[Offset: 0x3c, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	int CameraLensSensibility;//[Offset: 0x44, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float MainVolumValue;//[Offset: 0x90, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float EffectVolumValue;//[Offset: 0x98, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float UIVolumValue;//[Offset: 0xa0, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float BGMVolumValue;//[Offset: 0xa8, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int VoiceChannel;//[Offset: 0xb0, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float SocialIslandOtherVolume;//[Offset: 0xc0, Size: 4]
	float SpeakerVolumValue;//[Offset: 0xc4, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	int LimitBandage;//[Offset: 0xdc, Size: 4]
	int LimitMedical;//[Offset: 0xe0, Size: 4]
	int LimitAnodyne;//[Offset: 0xe4, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xe8, Size: 4]
	int LimitAdrenaline;//[Offset: 0xec, Size: 4]
	int LimitShouliudan;//[Offset: 0xf0, Size: 4]
	int LimitYanwudan;//[Offset: 0xf4, Size: 4]
	int LimitZhenbaodan;//[Offset: 0xf8, Size: 4]
	int LimitRanshaodan;//[Offset: 0xfc, Size: 4]
	int LimitBullet9mm;//[Offset: 0x100, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x104, Size: 4]
	int Limit12koujing;//[Offset: 0x108, Size: 4]
	int Limit45koujing;//[Offset: 0x10c, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x110, Size: 4]
	int Limitbolt;//[Offset: 0x114, Size: 4]
	int LimitBullet5;//[Offset: 0x118, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int FPSLevel;//[Offset: 0x120, Size: 4]
	int ArtStyle;//[Offset: 0x124, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x128, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x12c, Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x168, Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a8, Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	int[] DefaultPlayerChatQuickTextIDList;//[Offset: 0x1e8, Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1f4, Size: 12]
	int LRShootMode;//[Offset: 0x200, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x208, Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x214, Size: 12]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	int NewGetActorID;//[Offset: 0x224, Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	float 3DTouchValue;//[Offset: 0x22c, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	int ShotGunShootMode;//[Offset: 0x234, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x238, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x23c, Size: 4]
	float VehicleEye;//[Offset: 0x240, Size: 4]
	float ParachuteEye;//[Offset: 0x244, Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x248, Size: 12]
	int RepeatingWeaponShootMode;//[Offset: 0x254, Size: 4]
	int DrivingViewMode;//[Offset: 0x258, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	int FpViewValue;//[Offset: 0x260, Size: 4]
	float CamFpFreeEye;//[Offset: 0x264, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x268, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x26c, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x270, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x278, Size: 4]
	FString currentLanguage;//[Offset: 0x27c, Size: 12]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	FString lastViewDayTime;//[Offset: 0x28c, Size: 12]
	FString lastViewWeekTime;//[Offset: 0x298, Size: 12]
	bool DoblySwitch2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool DoblySwitch1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x2a8, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x2ac, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x2b0, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b4, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b8, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x2bc, Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	int RedDotCHColor;//[Offset: 0x2c4, Size: 4]
	int RedDotCHType;//[Offset: 0x2c8, Size: 4]
	int HolographicCHColor;//[Offset: 0x2cc, Size: 4]
	int HolographicCHType;//[Offset: 0x2d0, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x2d4, Size: 4]
	int Sinper2xCHType;//[Offset: 0x2d8, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2dc, Size: 4]
	int Sniper3xCHType;//[Offset: 0x2e0, Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e8, Size: 60]
	int LimitFirstAidKit;//[Offset: 0x324, Size: 4]
	FString XGLanguageTag;//[Offset: 0x328, Size: 12]
	FString XGTimezoneTag;//[Offset: 0x334, Size: 12]
	FString XGPushNightTag;//[Offset: 0x340, Size: 12]
	FString XGPushDayTag;//[Offset: 0x34c, Size: 12]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x35c, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x360, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x364, Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	int LimitSniper2X;//[Offset: 0x36c, Size: 4]
	int LimitSniper3X;//[Offset: 0x370, Size: 4]
	int LimitSniper4X;//[Offset: 0x374, Size: 4]
	int LimitSniper6X;//[Offset: 0x378, Size: 4]
	int LimitSniper8X;//[Offset: 0x37c, Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	int SidewaysMode;//[Offset: 0x384, Size: 4]
	int OpenMirrorMode;//[Offset: 0x388, Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	int LobbyStyleID;//[Offset: 0x394, Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	float ScreenLightness;//[Offset: 0x39c, Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	FString FirstChargeVersion;//[Offset: 0x3a4, Size: 12]
	FString RechargePosSave;//[Offset: 0x3b0, Size: 12]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3c0, Size: 60]
	int LimitViscidityBomb;//[Offset: 0x3fc, Size: 4]
	int LimitZombieGrenade;//[Offset: 0x400, Size: 4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x408, Size: 4]
	int SideMirrorMode;//[Offset: 0x40c, Size: 4]
	int[] DefaultPlayerWheelChatQuickTextIDList;//[Offset: 0x410, Size: 12]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41f, Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x420, Size: 4]
	int LimitAntidote;//[Offset: 0x424, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x42c, Size: 12]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x43c, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	int FPPFireMode;//[Offset: 0x444, Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x448, Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x44c, Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x450, Size: 4]
	byte TurboLastQuality;//[Offset: 0x454, Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x458, Size: 60]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x494, Size: 60]
	int[] UselessWeakGuidIDs;//[Offset: 0x4d0, Size: 12]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de, Size: 1]
	int[] ChatOptiongList5;//[Offset: 0x4e0, Size: 12]
	int[] ChatOptiongList6;//[Offset: 0x4ec, Size: 12]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	int TD_FireMode;//[Offset: 0x4fc, Size: 4]
	int TD_FPPFireMode;//[Offset: 0x500, Size: 4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	float TD_3DTouchValue;//[Offset: 0x508, Size: 4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x510, Size: 4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	int LimitSnowMan;//[Offset: 0x518, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
	int ColorBlindnessType;//[Offset: 0x520, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x528, Size: 4]
	float UAVScopePercent;//[Offset: 0x52c, Size: 4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	int SideMirrorType;//[Offset: 0x534, Size: 4]
	int SideMirrorColor;//[Offset: 0x538, Size: 4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x540, Size: 12]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	bool DisableAutoPickDropMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	int AutoPickClipType;//[Offset: 0x558, Size: 4]
	int[] QuickSignIDList;//[Offset: 0x55c, Size: 12]
	int[] QuickSignWheelIDList;//[Offset: 0x568, Size: 12]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 1]
	int HitEffectColor;//[Offset: 0x578, Size: 4]
	int HurtEffectColor;//[Offset: 0x57c, Size: 4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	int ProfiledScreenSwitch;//[Offset: 0x584, Size: 4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	int BuildDoubleClick;//[Offset: 0x58c, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x590, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x594, Size: 4]
	int DoubleClickDistance;//[Offset: 0x598, Size: 4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	int BattleFPS;//[Offset: 0x5a0, Size: 4]
	int BattleRenderStyle;//[Offset: 0x5a4, Size: 4]
	int BattleRenderQuality;//[Offset: 0x5a8, Size: 4]
	int LobbyFPS;//[Offset: 0x5ac, Size: 4]
	int LobbyRenderStyle;//[Offset: 0x5b0, Size: 4]
	int LobbyRenderQuality;//[Offset: 0x5b4, Size: 4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 1]
	bool OBS_LogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bb, Size: 1]
	bool OBS_HitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x5c0, Size: 60]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x5fc, Size: 60]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x638, Size: 60]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x674, Size: 60]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x6b0, Size: 60]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x6ec, Size: 60]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72f, Size: 1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x734, Size: 60]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x770, Size: 60]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x7ac, Size: 60]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x7e8, Size: 60]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool OBS_CustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x826, Size: 1]
	bool SettingDisableAutoPickupDropMirrorRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x827, Size: 1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	float CamLensSenShoulderTPP;//[Offset: 0x82c, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x830, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x834, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x838, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x83c, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x840, Size: 4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	int ShoulderMode;//[Offset: 0x848, Size: 4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	bool OBS_SmokeGrenadeCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84e, Size: 1]
	bool OBS_SmokeGrenadeAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84f, Size: 1]
	bool bGunAccessoriesAddDefauleM4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool bGunAccessoriesGuidedRemoveSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	bool bGunAccessoriesGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x852, Size: 1]
	bool bGunAccessoriesGuidedSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x853, Size: 1]
	bool bGunAccessoriesGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	bool bAddedGunAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 1]
	bool bGunSensitivityGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x856, Size: 1]
	bool bGunSensitivityGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x857, Size: 1]
	bool bGunSensitivityGuidedCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	int GunSensitivitySingleTrainingGuideCount;//[Offset: 0x85c, Size: 4]
	bool bGunSensitivitySingleTrainingGuideTiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	bool OBS_ShowOwnWeaponKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	bool isCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 1]
	FString CloudSensitivityPlayerId_Custom;//[Offset: 0x864, Size: 12]
	bool isOtherCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	bool IsCloudAndLocalSame_SensitivityCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 1]
	bool isCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x872, Size: 1]
	FString CloudAccessoriesPlayerId_Custom;//[Offset: 0x874, Size: 12]
	bool isOtherCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	bool IsCloudAndLocalSame_AccessoriesCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 1]
	int TpViewValue;//[Offset: 0x884, Size: 4]
	bool bHasCloudCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	int PickUpListMode;//[Offset: 0x88c, Size: 4]
	bool GyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	bool bHasCloudCustomAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 1]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x894, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x898, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x89c, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x8a0, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x8a4, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x8a8, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x8ac, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x8b0, Size: 4]
	bool AutoParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 1]
	bool MapMarkEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b5, Size: 1]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x8b8, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x8bc, Size: 4]
	bool FireGyroscopeRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	bool HasOperateRingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 1]
	bool HasOperatedRingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c2, Size: 1]
	bool SettingBasicGyroRverseRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c3, Size: 1]
	bool bLbsNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bLbsWarZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	bool AutoContinueHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c6, Size: 1]
	bool FocalLengthModifySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c7, Size: 1]
	bool FocalLengthModifySwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool bRecordWonderfulReplayOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	int AntiAliasingValue;//[Offset: 0x8cc, Size: 4]
	bool OneKeyProneAndCrouchSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	bool HasOperateOneKeyProneAndCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 1]
	bool bLbsMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d2, Size: 1]
	bool bLbsChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d3, Size: 1]
	bool bOpenBattleNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 1]
	bool bOpenLobbyNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d5, Size: 1]
	int JoystickSprintSensitity;//[Offset: 0x8d8, Size: 4]
	bool bHideIngameUIAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	bool bCloseHitHeadAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 1]
	int HightLightReshowAirLineTimes;//[Offset: 0x8e0, Size: 4]
	bool bHasSetWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	bool bIsShowedHideUIGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e5, Size: 1]
	bool bAmericanCustomSettingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e6, Size: 1]
	float CamLensSenNoneSniper;//[Offset: 0x8e8, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8ec, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x8f0, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x8f4, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x8f8, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x8fc, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x900, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x904, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x908, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x90c, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x910, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x914, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x918, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x91c, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x920, Size: 4]
	float VehicleEye;//[Offset: 0x924, Size: 4]
	float ParachuteEye;//[Offset: 0x928, Size: 4]
	float CamFpFreeEye;//[Offset: 0x92c, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x930, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x934, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x938, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x93c, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x940, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x944, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x948, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x94c, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x950, Size: 4]
	float CamLensSenShoulderTPP;//[Offset: 0x954, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x958, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x95c, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x960, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x964, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x968, Size: 4]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x96c, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x970, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x974, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x978, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x97c, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x980, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x984, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x988, Size: 4]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x98c, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x990, Size: 4]
	bool bInitedCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 1]
	bool bFireGyroSenUseGryo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x995, Size: 1]
	bool bFireCamSenUseCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x996, Size: 1]
	bool AutoHitMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x997, Size: 1]
	bool bResetDeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998, Size: 1]
	bool SwitchSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x999, Size: 1]
	bool bConsumeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99a, Size: 1]
	int[] MaxACCount;//[Offset: 0x99c, Size: 12]
	int[] DefaultACCount;//[Offset: 0x9a8, Size: 12]
	bool HasOperateSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 1]
	bool UseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 1]
	<FString,int> OpenStoreTimes;//[Offset: 0x9b8, Size: 60]
	<int,int> setting_ver_info;//[Offset: 0x9f4, Size: 60]
	bool bIsBackpackExpand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	bool OpenMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 1]
	int HapticSwitch;//[Offset: 0xa34, Size: 4]
	int HapticVoiceSwitch;//[Offset: 0xa38, Size: 4]
	int HapticCharacterSwitch;//[Offset: 0xa3c, Size: 4]
	int HapticWeaponSwitch;//[Offset: 0xa40, Size: 4]
	int HapticVehicleSwitch;//[Offset: 0xa44, Size: 4]
	bool bHapticVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 1]
	bool bHapticVoiceGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa49, Size: 1]
	bool bHapticVoiceGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4a, Size: 1]
	bool bHapticVoiceVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4b, Size: 1]
	bool bHapticCharacterBeGunAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 1]
	bool bHapticCharacterBeOtherAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4d, Size: 1]
	bool bHapticCharacterFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4e, Size: 1]
	bool bHapticWeaponAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4f, Size: 1]
	bool bHapticWeaponAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	bool bHapticWeaponSemiAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa51, Size: 1]
	bool bHapticWeaponSniper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa52, Size: 1]
	bool bHapticWeaponOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa53, Size: 1]
	bool bHapticVehicleDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa54, Size: 1]
	bool bHapticVehicleBeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa55, Size: 1]
	bool bHapticVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa56, Size: 1]
	bool bIsOpenMapTaskUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa57, Size: 1]
	bool AmmoRemain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	bool ReshowAirlineRouteBtnChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa59, Size: 1]
	bool OBMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5a, Size: 1]
	bool OBTeammateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5b, Size: 1]
	bool OBPlayerInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa60, Size: 12]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa6c, Size: 12]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa78, Size: 12]
	int PlayerChatIndex;//[Offset: 0xa84, Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xa88, Size: 12]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xa94, Size: 12]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xaa0, Size: 12]
	int PlayerChatActorID;//[Offset: 0xaac, Size: 4]
	bool bHasCloudBasicSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 1]
	bool isCloudSettingBasicUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab1, Size: 1]
	FString NewbieGuideDailyLimit;//[Offset: 0xab4, Size: 12]
	int LastSaveSettingBasicTM;//[Offset: 0xac0, Size: 4]
	bool OpenSilentChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 1]
	bool DoubleIntimacyHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac5, Size: 1]
	bool backgroundChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac6, Size: 1]
	bool bCanMapLongPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac7, Size: 1]
	float NoUIOpacity;//[Offset: 0xac8, Size: 4]
	int OldMarkStyle;//[Offset: 0xacc, Size: 4]
	<FString,FString> PlayerFeatureVoiceCfg;//[Offset: 0xad0, Size: 60]
	int SoundVisualizationType;//[Offset: 0xb0c, Size: 4]
	bool OBS_SwitchOBHttpComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 1]
	bool LocalHideMetroArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb11, Size: 1]
	int TargetNameGuideTimes;//[Offset: 0xb14, Size: 4]
	int DangerousGuideTimes;//[Offset: 0xb18, Size: 4]
	int HunterTaskGuideTimes;//[Offset: 0xb1c, Size: 4]
	FString SynthesizeFormula;//[Offset: 0xb20, Size: 12]
	bool GrenadeSettingPredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	bool AutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2d, Size: 1]
	bool LocalHideMetroBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2e, Size: 1]
	int LevelPreLoadSetting;//[Offset: 0xb30, Size: 4]
	bool bSpectatingPetVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 1]

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x398, Size: 12]
	delegate OnRenderQualitySettingsChanged;//[Offset: 0x3a4, Size: 12]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x3b0, Size: 12]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x3bc, Size: 12]
	delegate OnCampRoomChanged;//[Offset: 0x3c8, Size: 12]
	delegate ScreenOrientationChangedNotify;//[Offset: 0x3d4, Size: 12]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x3e0, Size: 8]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x3e8, Size: 8]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x3f0, Size: 8]
	UserDetailSetting UserDetailSetting;//[Offset: 0x3f8, Size: 112]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	bool TemporaryFixedLobbyRenderSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 1]
	int iEnableRegionID;//[Offset: 0x498, Size: 4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x49c, Size: 12]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x4a8, Size: 12]
	RenderItem[] LobbyRenderSettingsUltralHigh;//[Offset: 0x4b4, Size: 12]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x4c0, Size: 12]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x4cc, Size: 12]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x4d8, Size: 12]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x4e4, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x4f0, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x4fc, Size: 12]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x508, Size: 12]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x514, Size: 12]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x520, Size: 12]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x52c, Size: 12]
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x538, Size: 12]
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x544, Size: 12]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x550, Size: 12]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x55c, Size: 12]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x568, Size: 12]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x574, Size: 12]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x580, Size: 12]
	FString[] RePairDeleteDir;//[Offset: 0x58c, Size: 12]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x598, Size: 12]
	MaterialParametersStyle[] MaterialParametersStyleArray;//[Offset: 0x5a4, Size: 12]
	ObjectPoolClassConfig[] ObjectPoolClassConfigs;//[Offset: 0x5b0, Size: 12]
	FName[] ObjectPoolIgnoringProperties;//[Offset: 0x5bc, Size: 12]
	FString AutoTestMissionType;//[Offset: 0x5d4, Size: 12]
	FString CustomLineStr;//[Offset: 0x5e0, Size: 12]
	enum GamePlayMode;//[Offset: 0x5ec, Size: 4]
	Vector2D FOVRange;//[Offset: 0x5f0, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x5f8, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 1]
	float SwimRotateX;//[Offset: 0x604, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608, Size: 1]
	FString[] BPGameSubsystemClassPath;//[Offset: 0x60c, Size: 12]
	int ModeID;//[Offset: 0x618, Size: 4]
	int ModeType;//[Offset: 0x61c, Size: 4]
	Actor* mInstanceActor;//[Offset: 0x620, Size: 4]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x648, Size: 4]
	ClientInGameReplay* ClientInGameReplay;//[Offset: 0x64c, Size: 4]
	DeathPlayback* DeathPlayback;//[Offset: 0x650, Size: 4]
	CompletePlayback* CompletePlayback;//[Offset: 0x654, Size: 4]
	ObservingReplay* ObservingReplay;//[Offset: 0x658, Size: 4]
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x65c, Size: 4]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x660, Size: 4]
	AutoRobotModule* AutoModule;//[Offset: 0x664, Size: 4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x6c0, Size: 4]
	AvatarItemDownload* AssociatedAvatarItemDownload;//[Offset: 0x6c4, Size: 4]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x6c8, Size: 12]
	float DefaultGray;//[Offset: 0x6d4, Size: 4]
	RemoteControlManager* RemoteControlManager;//[Offset: 0x714, Size: 4]
	CreativeModeGlobalManagerCenter* CreativeModeGlobalManagerCenter;//[Offset: 0x718, Size: 4]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x446e168
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x446e168
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x446e168
	void UpdateWorldCullDistanceVolumes();// 0x374f564
	void TestAyncLoad();// 0x374f550
	void SuperBattleWithPlayerName(FString IP, FString PlayerName, int PlayerKey);// 0x374f3cc
	void SuperBattle(FString IP);// 0x350bd38
	void StopRemoteControl();// 0x3365b48
	void StartRemoteControlWithFile();// 0x3365b48
	void StartRemoteControl(FString Name, FString Host, int Port);// 0x374f118
	void ShowInstance(int IndexStart, int indexEnd, out Vector Location);// 0x374f00c
	void SetWorldDoorCullDistance(int Distance);// 0x374ef94
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x374edf8
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x374ed3c
	void SetWaterReflectionSetting(bool bDoOpen);// 0x374ecbc
	void SetUserVulkanSetting(bool Enable);// 0x374ec3c
	void SetUserSetingShadowQuality(bool bShadow);// 0x374ebbc
	void SetUserSetingMobilceContentSCale(float mcs);// 0x374eb44
	bool SetSoundEffectQuality(int Type);// 0x374eac4
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x374ea18
	void SetModeType(int ParamId);// 0x374e9a0
	void SetModeID(int ParamId);// 0x374e928
	void SetKillZValue(float KillZ);// 0x374e8b0
	void SetHZBMobileState();// 0x3365b48
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x374e838
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x374e690
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x374e4e8
	static void SetCustomRouteLine();// 0x374e4d4
	static void SetAutoMissionType();// 0x374e4c0
	void ScreenOrientationChangedDelegate__DelegateSignature(int inScreenOrientation);// 0x446e168
	void ReSetFOVScreenSizeCullingFactor();// 0x374e4ac
	void ReplaceAllInstance(int NumperTick, int tickTime, int typeNum, out Vector Location);// 0x374e358
	void RenderQualitySettingsChanged__DelegateSignature(RenderQualitySettings RenderQualitySettings);// 0x446e168
	void RenderForLowFPS();// 0x374e344
	void RemovePPVBlendableMaterial(MaterialInterface* InMaterial);// 0x374e2cc
	void RemoveInstance(int IndexStart, int indexEnd, int tickTime);// 0x374e1cc
	void RefuseRenderForLowFPS();// 0x374e1b8
	void RefreshObjectPoolConfig();// 0x374e1a4
	void QuitGame();// 0x374e190
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x374e090
	void PreLoadBPGameSubsystem();// 0x374e07c
	void OnStopAutoTest();// 0x374e068
	void OnStartAutoTest();// 0x3365b48
	void ObjectPoolServerSwitch(bool bOn);// 0x374dfe8
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x34fdbfc
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x374dfd4
	bool IsViewedByReplay(const Actor* InActor);// 0x374df54
	bool isUsingAssumedNameInReplay();// 0x374df2c
	bool IsSupportTagCulling();// 0x374df10
	bool IsSupportSwitchSoundEffectQuality();// 0x374dee8
	bool IsSupportSwitchRenderLevelRuntime();// 0x374dec0
	bool IsSupportMSAA();// 0x374de98
	bool IsSupportLDR();// 0x374de70
	static bool IsSecAutoRunTest();// 0x3607b90
	bool IsRunningOnVulkan();// 0x374de48
	bool IsPVENightChangeCullDistance();// 0x374de20
	bool IsPlayingObservingReplay();// 0x374ddf8
	bool IsOpenMSAA();// 0x374ddd0
	bool IsOpenHDR();// 0x374dda8
	bool IsObjectPoolEnabledByClassName(FName ClassName);// 0x374dd28
	bool IsObjectPoolEnabled();// 0x374dd00
	bool IsIOSOneGigabyteDevice();// 0x34dfb20
	bool IsInTournamentMap();// 0x374dcd8
	static bool IsGAutomatorTest();// 0x374dcb0
	bool IsFoldingScreenDevice(float baseValue);// 0x374dc30
	static bool IsAutoRunTestGamePVEProfile();// 0x374dc08
	static bool IsAutoRunTestGamePVE();// 0x374dbe0
	static bool IsAutoRunTestGameBindCompoment();// 0x374dbb8
	static bool IsAutoRunTestGame();// 0x374db90
	void HideInstance(int IndexStart, int indexEnd);// 0x374dad4
	void GVoiceCampRoomChanged__DelegateSignature(enum CampRoomType);// 0x446e168
	void GMStandalone(FString Map);// 0x374d97c
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x374d954
	WonderfulPlayback* GetWonderfulPlayback();// 0x374d92c
	bool GetWaterReflectionSetting();// 0x374d904
	bool GetUserVulkanSetting();// 0x374d8dc
	bool GetUserSetingShadowQuality();// 0x374d8b4
	int GetUserQualitySettingLevel();// 0x374d898
	int GetSuppotMSAA();// 0x374d87c
	static FString GetSuperBattleParam();// 0x374d7c4
	int GetSoundEffectQuality();// 0x374d79c
	RenderQualitySettings GetRenderQualityLastSet();// 0x374d744
	RenderQualitySettings GetRenderQualityApplying();// 0x374d6ec
	ObservingReplay* GetObservingReplay();// 0x374d6c4
	int GetModeType();// 0x374d69c
	int GetModeID();// 0x374d674
	FString GetLoadWeatherName(FString InWeatherName);// 0x374d528
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x374d45c
	bool GetIsFirstInitWaterReflectionSetting();// 0x374d434
	static STExtraGameInstance* GetInstance();// 0x374d40c
	int GetExactDeviceLevel();// 0x374d3e4
	int GetDeviceUpdateVersionFlag();// 0x374d3b4
	FString GetDeviceProfilerLevel();// 0x374d2f4
	byte GetDeviceMaxSupportSoundEffect();// 0x374d2cc
	byte GetDeviceMaxSupportLevel();// 0x374d2a4
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel);// 0x374d224
	int GetDeviceLimit();// 0x374d1fc
	int GetDeviceLevel();// 0x33c5330
	bool GetDefaultSoundEffectQuality();// 0x374d1d4
	DeathPlayback* GetDeathPlayback();// 0x374d1ac
	FString GetCurrentRHI();// 0x374d0ec
	CompletePlayback* GetCompletePlayback();// 0x374d0c4
	ClientInGameReplay* GetClientInGameReplay();// 0x374d09c
	static int GetAutoRunTestServerIdx();// 0x374d074
	static FString GetAutoRunPassWD();// 0x374cfbc
	static FString GetAutoRunLuaTest();// 0x374cf04
	static FString GetAutoRunAccount();// 0x374ce4c
	AvatarItemDownload* GetAssociatedAvatarItemDownload();// 0x374ce24
	bool GetApplyingShadowQuality();// 0x374cdfc
	FString GetActiveDeviceProfile();// 0x374cd3c
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x374cacc
	void EnableStreamingLevelLOD(bool bEnable);// 0x374ca4c
	void EnableObjectPoolByClassName(FName ClassName, bool Enable);// 0x374c980
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x374c880
	bool DeleteSavedFiles(bool allfilesSaved);// 0x374c7f8
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x374c734
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x374c670
	void ChangeLevelFXActor(FString LevelName, bool isLoad);// 0x374c568
	void ChangeCullDistanceVolume(bool UpdateCulldisImmediate);// 0x374c4e8
	void bHideGroundLevels(bool Disable);// 0x374c468
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x374c3e8
	void AutoActiveUltralHighRenderItems();// 0x374c3d4
	void AutoActiveLDR();// 0x374c3c0
	void AttachCameraViewToCharacter(STExtraBaseCharacter* Character);// 0x374c348
	void AddOrUpdatePPVBlendableMaterial(MaterialInterface* InMaterial, float InWeight);// 0x374c28c
	void AddInstance(int NumperTick, int tickTime, int typeNum, out Vector Location);// 0x374c138
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x374c028
	void ActiveStyle_PP(byte Level);// 0x374bfa8
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x374be98
	void ActiveStyle(byte Level);// 0x374be18
	void ActiveNightVision(bool bSet);// 0x374bd98
	void ActiveMSAA(bool bOpenMSAA, int MSAAValue);// 0x374bcd0
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x374bb6c

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x1d8, Size: 288]
	delegate EnginePreTick;//[Offset: 0x2f8, Size: 12]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x348, Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x350, Size: 4]
	bool bStandAloneFromLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	delegate OnPreBattleResult;//[Offset: 0x370, Size: 12]
	FString[] HighWeatherNames;//[Offset: 0x384, Size: 12]
	int HighWeatherMinRenderQuality;//[Offset: 0x390, Size: 4]
	int HighWeatherMaxRenderQuality;//[Offset: 0x394, Size: 4]
	void SetLuaStateWrapper(LuaStateWrapper* TLuaStateWrapper);// 0x3a237a0
	void OpenAssetLoadLog();// 0x3365b48
	void OnPreBattleResult__DelegateSignature();// 0x446e168
	void LuaLeakDetect();// 0x3a2378c
	void LuaDoString(FString LuaString);// 0x3a236d0
	float GetWeatherTime();// 0x3a236b4
	FString GetWeatherLevelName();// 0x3a2359c
	int GetWeatherID();// 0x3a2357c
	LuaStateWrapper* GetLuaStateWrapper();// 0x3a23554
	FString GetLoadWeatherName(FString InWeatherName);// 0x374d528
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x374d45c
	FString GetGameId();// 0x3a23488
	int GetDeviceLevel();// 0x33c5330
	UAEDataTable* GetDataTable_Mod(FString tableName);// 0x3a233c4
	UAEDataTable* GetDataTable(FString tableName);// 0x3a23300
	FrontendHUD* GetAssociatedFrontendHUD();// 0x3a232d8
	void CloseAssetLoadLog();// 0x3365b48

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 12]
	uint64 RoleID;//[Offset: 0x10, Size: 8]
	FString GameSvrId;//[Offset: 0x18, Size: 12]
	FString GameAppID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	uint64 GameID;//[Offset: 0x48, Size: 8]
	FString BattleServerIP;//[Offset: 0x50, Size: 12]
	uint32 BattleServerPort;//[Offset: 0x5c, Size: 4]
	FString UserName;//[Offset: 0x60, Size: 12]
	FString PicUrl;//[Offset: 0x6c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x78, Size: 4]
	int8 WeatherID;//[Offset: 0x80, Size: 1]
	FString WeatherLevelName;//[Offset: 0x84, Size: 12]
	float WeatherTime;//[Offset: 0x90, Size: 4]
	int[] MrpcsData;//[Offset: 0x94, Size: 12]
	<int,FString> AdvConfig;//[Offset: 0xa4, Size: 60]
	<FString,Texture2D*> AdvTextureList;//[Offset: 0xe0, Size: 60]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int RenderMSAAValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 4]
	int TCQualityGrade;//[Offset: 0x4, Size: 4]
	int DeviceMaxSoundEffectLevel;//[Offset: 0x8, Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0xc, Size: 4]
	int UserQualitySetting;//[Offset: 0x10, Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 4]
	int IsOpenHDR;//[Offset: 0x18, Size: 4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int UserMSAAValue;//[Offset: 0x28, Size: 4]
	float UserMCSSetting;//[Offset: 0x2c, Size: 4]
	int UserShadowSetting;//[Offset: 0x30, Size: 4]
	int UserShadowSwitch;//[Offset: 0x34, Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x38, Size: 4]
	int PUBGLimitSetting;//[Offset: 0x3c, Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x40, Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x44, Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x48, Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x4c, Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x50, Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x54, Size: 4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x58, Size: 4]
	int PUBGDeviceFPSUltimateHigh;//[Offset: 0x5c, Size: 4]
	int PUBGDeviceFPSUltimateHighTA;//[Offset: 0x60, Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x68, Size: 4]
	int UserVulkanSetting;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 12]
	SwitchesItem[] Switches;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 12]
	float Value;//[Offset: 0xc, Size: 4]
	FString DependKey;//[Offset: 0x10, Size: 12]
	float DependValue;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 12]
	float RenderValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 1]
	FString[] PostProcessParams;//[Offset: 0x4, Size: 12]
	ACESParameter ACESParams;//[Offset: 0x10, Size: 40]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MaterialParametersStyle
	FString StyleName;//[Offset: 0x0, Size: 12]
	MaterialParameterFloat[] Floats;//[Offset: 0xc, Size: 12]
	MaterialParameterVector[] Vectors;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MaterialParameterFloat
	FName Name;//[Offset: 0x0, Size: 8]
	float Value;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MaterialParameterVector
	FName Name;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x1c, Size: 12]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28, Size: 12]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x6c, Size: 12]
	void StopRecord(bool bRankFirst);// 0x392fd48
	void StartRecord();// 0x392fd34
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x392faf8
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x392f9c4
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x392f6e8
	void BuildOutputData();// 0x392f6d4
	void BuildContinuousKillOutputData();// 0x392f6c0

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	int KillNum;//[Offset: 0x8, Size: 4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte CaptureType;//[Offset: 0x1, Size: 1]
	byte ShootDamageType;//[Offset: 0x2, Size: 1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	float ShootDistance;//[Offset: 0x8, Size: 4]
	FString CauserName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte CaptureType;//[Offset: 0x9, Size: 1]
	byte ShootDamageType;//[Offset: 0xa, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ClientInGameReplay.GameReplay.Object
	bool bGWonderfulPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 1]
	int ConditionKillNums;//[Offset: 0x1a4, Size: 4]
	enum WonderfulKeepState;//[Offset: 0x1a8, Size: 1]
	bool bCanKeepReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 1]
	DeathReplayData DeathReplayData;//[Offset: 0x1b0, Size: 232]
	BattleDeathPlaybackInfo BattleDeathPlaybackInfo;//[Offset: 0x2d4, Size: 8]
	BattleWonderfulInfo BattleWonderfulInfo;//[Offset: 0x2e0, Size: 56]
	LobbyWonderfulInfo LobbyWonderfulInfo;//[Offset: 0x318, Size: 96]
	void SetSaveTimestamp(uint64 InCurrentTime);// 0x3447250
	void SetGWonderfulPlaybackSwitch(bool bInSwitch);// 0x34471d0
	void SetDeathReplayData(out const DeathReplayData ReplayData);// 0x3447108
	void SetClientVersion(FString InAppVersion, FString InSrcVersion);// 0x3446fc8
	void OnPlayerRespawnNotify();// 0x3446fb4
	void OnKillOrPutDownMessageEvent();// 0x3446fa0
	void OnBattleResultStopRecordingNotify();// 0x3446f8c
	void MarkPlayerLastBeginInactiveTime(FString PlayerName);// 0x3446ed0
	void MarkPlayerLastBeginActiveTime(FString PlayerName);// 0x3446e14
	bool IsSwitchedOffByDevice();// 0x3446dec
	bool HaveWonderfulPlaybackData();// 0x3446dc4
	bool HaveDeathPlaybackData();// 0x3446d9c
	enum GetWonderfulKeepState();// 0x3446d5c
	FString GetCompressedFileName();// 0x3446c9c
	int[] GetAllWonderfulPeriodType();// 0x3446bdc
	void EnableWonderfulPlayback(bool bEnable);// 0x3446b5c
	void EnableDeathPlayback(bool bEnable);// 0x3446adc
	void DeleteWonderfulPeriod(int PeriodIndex);// 0x3446a64
	void ClearWonderfulPeriod();// 0x3446a50
	bool CheckKillNumsCondition();// 0x3446a28
	void AddWonderfulPeriod(int InWonderfulType, float InStartTime, float InEndTime, out const float[] InAdditionalData, int InPeriodIndex);// 0x3446844

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x30, Size: 4]
	class UserWidget* GMUIClass;//[Offset: 0x38, Size: 40]
	enum ReplayType;//[Offset: 0x60, Size: 1]
	delegate OnReplayReadyInitUIDelegate;//[Offset: 0x64, Size: 12]
	delegate OnReplayGotoTimeResetUIDelegate;//[Offset: 0x70, Size: 12]
	delegate OnReplayResetViewTargetDelegate;//[Offset: 0x7c, Size: 12]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0x10c, Size: 4]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0x110, Size: 12]
	WeaponRecordDataForReplay[] RecordWeaponInfoDataArray;//[Offset: 0x11c, Size: 12]
	MLAIInfoRecordData[] RecordMLAIInfoDataArray;//[Offset: 0x168, Size: 12]
	PlayerEventInfoRecordData[] RecordPlayerEventInfoDataArray;//[Offset: 0x174, Size: 12]
	int64 ModInfoBatchMaxSize;//[Offset: 0x180, Size: 8]
	byte[] ModBinaryData;//[Offset: 0x188, Size: 12]
	bool StopRecordingReplay();// 0x34533f4
	bool StopPlay();// 0x3431ca4
	bool StartRecordingReplay();// 0x34533b0
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x34f2d14
	bool SetReplayTimeDilation(float InDilation);// 0x34f2c94
	void SetReplayStreamer(FString InReplayStreamer);// 0x34f2afc
	void SetIsGMSpectator(bool bGM);// 0x34f2a80
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x34f2a08
	void SetCanChangeViewTarget(bool bCanChange);// 0x34f2988
	void ResetPlaybackData();// 0x34f2974
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x34f28fc
	void ReplayOnWeaponChanged();// 0x34f28e8
	void ReplayOnSimulatedWeaponChanged();// 0x34f28d4
	void ReplayOnBulletNumChanged();// 0x34f28c0
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x34f2848
	bool PlayReplay();// 0x34f2818
	bool PauseReplay(bool bPaused);// 0x34f2788
	void LeaveFreeViewMode();// 0x338839c
	bool IsInRecordState();// 0x34f2760
	bool IsInPlayState();// 0x34f2738
	bool IsGMSpectator();// 0x34f271c
	bool IsFastForwarding();// 0x34f26f4
	bool HaveRecordingData();// 0x34f26c4
	void HandleChangeStatePC();// 0x34f26b0
	STExtraBaseCharacter* GetViewCharacter();// 0x34f2688
	SingleStrategyRecordFullInfo[] GetStrategyRecordArray(FString UId, int InStrategyTypeInReplay, bool bIsSort);// 0x34f24b0
	FString GetSpectatorName();// 0x34710b0
	float GetReplayRecordStartTime();// 0x34f2488
	PlayerCameraManager* GetPlayerCameraManager();// 0x34f2460
	float GetCurrentReplayTotalTimeInSeconds();// 0x34f2438
	float GetCurrentReplayCurTimeInSeconds();// 0x34f2410
	bool GetCanChangeViewTarget();// 0x34f23e8
	void EnterFreeViewMode();// 0x33886c4
	void CreateGMUIIfNotExists();// 0x34f23d4
	void AddRecordPlayerEventInfo(FString PlayerUID, const uint32 EventType);// 0x34f22d4
	void AddRecordMLAIInfo(uint32 InPlayerKey, uint64 InUID, byte InType, out const <FString,FString> InAdditionalData);// 0x34f20f0

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0xda8, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xdac, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xdb4, Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0xdf0, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xdf4, Size: 4]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0xdf8, Size: 12]
	delegate OnPlayerControllerTouchEnd;//[Offset: 0xe04, Size: 12]
	delegate OnAvatarInfoRep;//[Offset: 0xe10, Size: 12]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0xe5c, Size: 60]
	float MinOBRelevancyJudgeDissquared;//[Offset: 0xe98, Size: 4]
	bool bGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9c, Size: 1]
	FName FeatureActorName;//[Offset: 0xea0, Size: 8]
	ValidTouchMoveFrameConfig[] ValidTouchMoveFrameConfig;//[Offset: 0xea8, Size: 12]
	ValidTouchMoveFrameConfig CurValidTouchMoveFrameConfig;//[Offset: 0xeb4, Size: 24]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0xecc, Size: 12]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0xed8, Size: 12]
	byte[] AddTouchMoveFingerArray;//[Offset: 0xee4, Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0xef1, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xef4, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xef8, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xefc, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xf00, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xf04, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xf08, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xf0c, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xf10, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xf14, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xf18, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xf1c, Size: 4]
	Vector2D StartPosition;//[Offset: 0xf20, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xf28, Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xf30, Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xf3c, Size: 12]
	FString FollowCandidateName;//[Offset: 0xf4c, Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xf58, Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0xf94, Size: 12]
	Rotator PCFreeCameraStartRotation;//[Offset: 0xfa0, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0xfb0, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0xfe0, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0xfe1, Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0xfe4, Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe8, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfea, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0xfec, Size: 12]
	LinearColor CrossHairColor;//[Offset: 0xff8, Size: 16]
	byte AutoAimType;//[Offset: 0x1008, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1010, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1011, Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1020, Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1021, Size: 1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1022, Size: 1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0x1024, Size: 12]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0x1030, Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0x103c, Size: 216]
	SensibilityConfig SensibilityConfig;//[Offset: 0x1114, Size: 236]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1278, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1279, Size: 1]
	int UseMotionControlType;//[Offset: 0x127c, Size: 4]
	bool IsGyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x1284, Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0x1290, Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x129c, Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0x12a8, Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0x12b4, Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0x12c0, Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0x12cc, Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0x12d8, Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0x12e4, Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0x12f0, Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0x12fc, Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0x1308, Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0x1314, Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x1320, Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x132c, Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1338, Size: 12]
	delegate OnShowHideSelfMarkDelegate;//[Offset: 0x1344, Size: 12]
	delegate OnShowAllTeammatePosDelegate;//[Offset: 0x1350, Size: 12]
	delegate OnShowAliasInfoDelegate;//[Offset: 0x135c, Size: 12]
	delegate OnCongregationFlagDelegate;//[Offset: 0x1368, Size: 12]
	delegate OnTeamFollowStageChangeDelegate;//[Offset: 0x1374, Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0x1380, Size: 12]
	delegate OnHideFollowPanelAndBtnDelegate;//[Offset: 0x138c, Size: 12]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x1398, Size: 12]
	delegate OnRemindTeammateShoot;//[Offset: 0x13a4, Size: 12]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x13b0, Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0x13bc, Size: 12]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x13c8, Size: 12]
	delegate OnNightBeggan;//[Offset: 0x13d4, Size: 12]
	delegate OnNightEnded;//[Offset: 0x13e0, Size: 12]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x13ec, Size: 12]
	delegate OnPlayerSwitchToDeadBox;//[Offset: 0x13f8, Size: 12]
	delegate OnShowFollowEmoteDelegate;//[Offset: 0x1404, Size: 12]
	int SelectedNightRenderConfig;//[Offset: 0x1410, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x1414, Size: 12]
	delegate OnInitCollectionData;//[Offset: 0x1420, Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0x142c, Size: 12]
	delegate OnPlayerEnterArea;//[Offset: 0x1438, Size: 12]
	delegate OnPlayerKilling;//[Offset: 0x1444, Size: 12]
	delegate OnPickupItem;//[Offset: 0x1450, Size: 12]
	delegate OnDropItem;//[Offset: 0x145c, Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0x1468, Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x1494, Size: 132]
	delegate OnKillOrPutDownMessage;//[Offset: 0x1518, Size: 12]
	delegate OnStartFireEvent;//[Offset: 0x1524, Size: 12]
	delegate OnStopFireEvent;//[Offset: 0x1530, Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0x153c, Size: 12]
	delegate OnReleaseScreen;//[Offset: 0x1548, Size: 12]
	delegate OnFingerMove;//[Offset: 0x1554, Size: 12]
	delegate OnHandleCameraModeChanged;//[Offset: 0x1560, Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0x156c, Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x1578, Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0x1584, Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0x1590, Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x159c, Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0x15a8, Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0x15b4, Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0x15c0, Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0x15cc, Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x15d8, Size: 12]
	delegate OnDamageToOther;//[Offset: 0x15e4, Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x15f0, Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0x15fc, Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0x1608, Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x1614, Size: 12]
	delegate OnRank;//[Offset: 0x1620, Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0x162c, Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0x1638, Size: 12]
	delegate OnRepPlayerState;//[Offset: 0x1644, Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0x1650, Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x165c, Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x166c, Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0x1678, Size: 12]
	delegate OnHideSkillPrompt;//[Offset: 0x1684, Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x1690, Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0x169c, Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x16a8, Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x16b4, Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x16c0, Size: 12]
	delegate OnConsumableAvatarChange;//[Offset: 0x16cc, Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0x16d8, Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x16e4, Size: 12]
	delegate OnGameStateChange;//[Offset: 0x16f0, Size: 12]
	delegate OnPlayerKilledOthersPlayer;//[Offset: 0x16fc, Size: 12]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x1708, Size: 12]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x1714, Size: 12]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x1720, Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x172c, Size: 12]
	delegate OnSetViewTarget;//[Offset: 0x1740, Size: 12]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x1754, Size: 12]
	delegate OpenSequencerDelegate;//[Offset: 0x1760, Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x177c, Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1780, Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x178c, Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x1798, Size: 12]
	delegate OnPostTakeDamageDelegate;//[Offset: 0x17a4, Size: 12]
	delegate OnPostTakeDamageForBP;//[Offset: 0x17b0, Size: 12]
	delegate OnLostConnection;//[Offset: 0x17bc, Size: 12]
	delegate OnReconnected;//[Offset: 0x17c8, Size: 12]
	delegate OnExitGame;//[Offset: 0x17d4, Size: 12]
	delegate OnPlayReplayBegin;//[Offset: 0x17e0, Size: 12]
	delegate OnPlayReplayEnd;//[Offset: 0x17ec, Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x17f8, Size: 12]
	delegate OnSpectatorToFreeView;//[Offset: 0x1804, Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1810, Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x181c, Size: 12]
	delegate MoveForwarDelegate;//[Offset: 0x1828, Size: 12]
	delegate MoveRightDelegate;//[Offset: 0x1834, Size: 12]
	delegate MoveUpDelegate;//[Offset: 0x1840, Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x184c, Size: 4]
	int MaternalZombieWeight;//[Offset: 0x1850, Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x1854, Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1858, Size: 4]
	SpectatorComponent* SpectatorComponent;//[Offset: 0x185c, Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1860, Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x1a20, Size: 12]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x1a2c, Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3c, Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3d, Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3e, Size: 1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3f, Size: 1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a40, Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a41, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a42, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x1a44, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1a48, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1a4c, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x1a50, Size: 4]
	float GOOGLE_CameraMoveRateX;//[Offset: 0x1a54, Size: 4]
	float GOOGLE_CameraMoveRateY;//[Offset: 0x1a58, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1a5c, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1a60, Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a64, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x1a68, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1a8c, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1ab0, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1ab8, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1ac0, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x1ae4, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x1aec, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x1af4, Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x1b18, Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1b54, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1b58, Size: 4]
	float MoveCameraMaxDistanceThreshold;//[Offset: 0x1b5c, Size: 4]
	<byte,int> PlayerClothLODLevel;//[Offset: 0x1b60, Size: 60]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x1b9c, Size: 12]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba8, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba9, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1bb0, Size: 4]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb4, Size: 1]
	byte CurCameraMode;//[Offset: 0x1bb5, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x1bb8, Size: 12]
	FName AutoScopeAimCompName;//[Offset: 0x1bc8, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1bd0, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd4, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd5, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd6, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd7, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1bd8, Size: 4]
	float CanMoveCDTime;//[Offset: 0x1bdc, Size: 4]
	float CanSprintCDTime;//[Offset: 0x1be0, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1be4, Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1be8, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x1bec, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bf0, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1bf4, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x1c00, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x1c04, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1c08, Size: 60]
	bool bAutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c44, Size: 1]
	bool bAutoEquipMelleeWeaponLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c45, Size: 1]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c46, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c47, Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c48, Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x1c4c, Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c50, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c51, Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x1c54, Size: 8]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5c, Size: 1]
	float AccumulateYawInput;//[Offset: 0x1c60, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x1c64, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c68, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c69, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c6a, Size: 1]
	float NoRespondArea;//[Offset: 0x1c6c, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x1c70, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c74, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c75, Size: 1]
	byte sprintOptType;//[Offset: 0x1c76, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x1c78, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x1c7c, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x1c80, Size: 4]
	int JoystickSprintSensitity;//[Offset: 0x1c84, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x1c88, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8c, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x1c8d, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x1c90, Size: 4]
	float AssistAreaHalfHeight;//[Offset: 0x1c94, Size: 4]
	float AssistAreaRadius;//[Offset: 0x1c98, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9c, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x1ca0, Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x1cdc, Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x1ce0, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x1ce4, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1ce8, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x1cec, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf0, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x1cf4, Size: 4]
	byte TouchFireType;//[Offset: 0x1cf8, Size: 1]
	float TestForce;//[Offset: 0x1cfc, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x1d00, Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x1d0c, Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d18, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d19, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1a, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1b, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x1d1c, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x1d20, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x1d24, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x1d28, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x1d2c, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1d30, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d34, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x1d38, Size: 4]
	float MinFovChangeView;//[Offset: 0x1d3c, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1d40, Size: 32]
	int GameTipMsgID;//[Offset: 0x1d60, Size: 4]
	FString GameTipParam1;//[Offset: 0x1d64, Size: 12]
	FString GameTipParam2;//[Offset: 0x1d70, Size: 12]
	float AutoSprintCD;//[Offset: 0x1db8, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x1dbc, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x1df8, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x1e34, Size: 60]
	float TeamInfoForceUpdateInterval;//[Offset: 0x1e74, Size: 4]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1e90, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1f58, Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x1f5c, Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1f60, Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1f64, Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x1fb0, Size: 4]
	bool bTempDeadBoxIgnoreTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb4, Size: 1]
	FString[] ForbitPickList;//[Offset: 0x1fb8, Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd0, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x1fd4, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd8, Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd9, Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x1fdc, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x1fe0, Size: 4]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x1fe4, Size: 12]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff0, Size: 1]
	float FreeViewUpRate;//[Offset: 0x1ff4, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x1ff8, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x1ffc, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2000, Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2001, Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x2004, Size: 12]
	bool bSyncMLAIStateInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2010, Size: 1]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x2014, Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2028, Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x2029, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202a, Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202b, Size: 1]
	byte CurSightZoomFingerIndex;//[Offset: 0x2074, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x2075, Size: 1]
	byte ValidTouchMove;//[Offset: 0x20b4, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x20e0, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x2170, Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x2174, Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x2178, Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x217c, Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x2180, Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x2184, Size: 4]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x218c, Size: 12]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a5, Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x21a6, Size: 1]
	int[] ObserveReplicateItems;//[Offset: 0x21a8, Size: 12]
	delegate OnOBPlayerItemChangedDelegate;//[Offset: 0x21b4, Size: 12]
	delegate OnOBPlayerWeaponChangedDelegate;//[Offset: 0x21c0, Size: 12]
	delegate OnOBPlayerBulletChangedDelegate;//[Offset: 0x21cc, Size: 12]
	delegate OnViewTargetAttachedToVehicleDelegate;//[Offset: 0x21d8, Size: 12]
	delegate OnViewTargetDetachedFromVehicleDelegate;//[Offset: 0x21e4, Size: 12]
	BattleItemSpectatingData[] ObservedItemList;//[Offset: 0x220c, Size: 12]
	bool bIsSendingObserveReq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2218, Size: 1]
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x2258, Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x2264, Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x2270, Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x227c, Size: 12]
	bool bIsCheckLevelStreamingReturnBeforeFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2288, Size: 1]
	bool bIsLevelLoadedSetGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2289, Size: 1]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x228c, Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2298, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x229c, Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x22ac, Size: 4]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x22b0, Size: 4]
	AIPlayerInfoInOB[] NearAIPlayerList;//[Offset: 0x22b4, Size: 12]
	FString TPPFollowAIPlayerKey;//[Offset: 0x22c4, Size: 12]
	<FString,AllStarReportData> AllStarReportInfoCache;//[Offset: 0x22d0, Size: 60]
	ObservedData ObservedData;//[Offset: 0x2310, Size: 72]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2365, Size: 1]
	delegate OnToggleOBMapShowHide;//[Offset: 0x236c, Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x2378, Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x238c, Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x2398, Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x23a4, Size: 12]
	delegate OnPCOBGetTeamBackPackInfoByNumPressed;//[Offset: 0x23b0, Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x23bc, Size: 12]
	delegate WeaponEquipAttachment;//[Offset: 0x23c8, Size: 12]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x23d4, Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x23e0, Size: 12]
	delegate OnOBVehicleViewChangedDelegate;//[Offset: 0x23ec, Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x2408, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x240c, Size: 4]
	bool IsSmoothlyVehicleViewSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241c, Size: 1]
	bool NeedCheckChangeToVehicleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241d, Size: 1]
	CurveVector* OBVehicleViewArmOffset;//[Offset: 0x2420, Size: 8]
	int OBVehicleViewAcceRecordsNum;//[Offset: 0x2428, Size: 4]
	class CameraShake* OnHitCameraShake;//[Offset: 0x2438, Size: 4]
	CurveVector* OBVehicleImpulseClamp;//[Offset: 0x2444, Size: 8]
	CurveFloat* OBVehicleImpulseRollClamp;//[Offset: 0x244c, Size: 8]
	float CurrentOBVehicleViewArmLength;//[Offset: 0x2454, Size: 4]
	float OBVehicleViewArmLengthMax;//[Offset: 0x2458, Size: 4]
	float OBVehicleViewArmLengthMin;//[Offset: 0x245c, Size: 4]
	Vector OBVehicleRelativeLocation;//[Offset: 0x2460, Size: 12]
	float OBVehicleViewFOV;//[Offset: 0x246c, Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x2474, Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x2478, Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2479, Size: 1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x247a, Size: 1]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x247c, Size: 12]
	delegate OnLiveStateChanged;//[Offset: 0x2488, Size: 12]
	int FireMode;//[Offset: 0x2494, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2498, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2499, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249a, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249b, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x249c, Size: 12]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x24a8, Size: 12]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x24b4, Size: 12]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x24c0, Size: 12]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x24cc, Size: 12]
	Actor*[] nowGrenadeList;//[Offset: 0x24d8, Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e4, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x24e8, Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x24f4, Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2500, Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x250c, Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x2518, Size: 12]
	delegate tirggerLandingVoiceCheckDelegate;//[Offset: 0x2524, Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2530, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x2534, Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x2540, Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254c, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x2550, Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x255c, Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2568, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x256c, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x2570, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x2574, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x2578, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x257c, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x258c, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x25a8, Size: 20]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x25bc, Size: 12]
	Actor* ThePlane;//[Offset: 0x25c8, Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x25d4, Size: 4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x25d8, Size: 12]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x25e4, Size: 12]
	delegate OnNotifyServerOpenAnyPickUpBox;//[Offset: 0x25f0, Size: 12]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25fc, Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x2600, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x2618, Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x2628, Size: 4]
	FString LastBreathMurder;//[Offset: 0x2630, Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263c, Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x2640, Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x2648, Size: 4]
	FString murderName;//[Offset: 0x264c, Size: 12]
	FString FinalMurderName;//[Offset: 0x2658, Size: 12]
	uint64 MurderUID;//[Offset: 0x2668, Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2670, Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2671, Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2672, Size: 1]
	bool bDisableItemOperationSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a7, Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x26b8, Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x26f4, Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x2738, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x273c, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x2740, Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x2744, Size: 60]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2780, Size: 1]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x2854, Size: 4]
	AkAudioEvent* HitVehicleSoundFlesh;//[Offset: 0x2858, Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285c, Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x2860, Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x28a8, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28ac, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x28b0, Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b4, Size: 1]
	enum ServerStateType;//[Offset: 0x28b5, Size: 1]
	enum ClientStateType;//[Offset: 0x28b6, Size: 1]
	enum GameStateMsgType;//[Offset: 0x28b7, Size: 1]
	enum LastStateType;//[Offset: 0x28bb, Size: 1]
	int HolographyCurrentSelectID;//[Offset: 0x28c0, Size: 4]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c4, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c5, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c6, Size: 1]
	float ObservingTime;//[Offset: 0x28c8, Size: 4]
	KillerTracker* KillerCameraTracker;//[Offset: 0x28cc, Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e0, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e1, Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x28f0, Size: 4]
	FString DefaultHUDClassPath;//[Offset: 0x28f4, Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x2914, Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x2920, Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2924, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2925, Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x2928, Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x292c, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x2930, Size: 56]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x2968, Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x2974, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x2978, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x297c, Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x29b8, Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x29f8, Size: 4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x29fc, Size: 12]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x2a08, Size: 60]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x2a5c, Size: 4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x2a60, Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x2a64, Size: 4]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x2a90, Size: 12]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x2a9c, Size: 12]
	delegate SetCaptureIDCardStatusDelegate;//[Offset: 0x2aa8, Size: 16]
	delegate OnPlayerExitGameDelegate;//[Offset: 0x2ab8, Size: 12]
	delegate OnEnterVehicleDelegate;//[Offset: 0x2ad4, Size: 12]
	delegate ClientOnEnterVehicle;//[Offset: 0x2ae0, Size: 12]
	delegate ClientOnLeaveVehicle;//[Offset: 0x2aec, Size: 12]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x2af8, Size: 12]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x2b04, Size: 12]
	delegate ClientOnDeathReplayDataWhenFatalDamagedDelegate;//[Offset: 0x2b10, Size: 12]
	delegate OnViewTargetChange;//[Offset: 0x2b1c, Size: 12]
	delegate OnPreViewTargetChange;//[Offset: 0x2b28, Size: 12]
	delegate OnImprisonStateChange;//[Offset: 0x2b34, Size: 12]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b40, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b41, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x2b44, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x2b48, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x2b54, Size: 8]
	int IdCardMarkType;//[Offset: 0x2b60, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b84, Size: 1]
	int VehicleControlMode;//[Offset: 0x2b88, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8c, Size: 1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x2b90, Size: 12]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x2b9c, Size: 12]
	float StreamingDistanceScaleFlying;//[Offset: 0x2ba8, Size: 4]
	bool bClearWeaponRecordOnPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bac, Size: 1]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bad, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x2bb0, Size: 12]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bbc, Size: 1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x2bc0, Size: 12]
	float MoveDistanceThreshold;//[Offset: 0x2bcc, Size: 4]
	float SpeedRecordTime;//[Offset: 0x2bd0, Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x2bd4, Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x2bd8, Size: 12]
	delegate OnChangeToWalkingDead;//[Offset: 0x2be4, Size: 12]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf0, Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x2bf4, Size: 12]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x2c00, Size: 12]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0c, Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0d, Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x2c10, Size: 12]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x2c1c, Size: 12]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x2c28, Size: 12]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x2c34, Size: 12]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x2c40, Size: 12]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x2c4c, Size: 4]
	uint32 LastKillerKey;//[Offset: 0x2c50, Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c54, Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c55, Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c60, Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c61, Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c62, Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x2c64, Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x2c68, Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x2c74, Size: 12]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x2c80, Size: 12]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8c, Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x2c90, Size: 12]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x2c9c, Size: 12]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x2ca8, Size: 12]
	delegate OnMemberVoiceDelegate;//[Offset: 0x2cb4, Size: 12]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x2cc0, Size: 12]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x2ccc, Size: 12]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x2cd8, Size: 12]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x2ce4, Size: 12]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x2cf0, Size: 12]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x2cfc, Size: 4]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x2d14, Size: 12]
	<byte,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x2d20, Size: 60]
	enum CurrentWeaponFunction;//[Offset: 0x2d5c, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x2d60, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d64, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x2d68, Size: 4]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x2d6c, Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x2d70, Size: 4]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d80, Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d90, Size: 1]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x2d94, Size: 12]
	double LastFlyLeapPlatfromTime;//[Offset: 0x2de0, Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e24, Size: 1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e25, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x2e28, Size: 60]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x2e78, Size: 16]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x2e88, Size: 16]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x2e98, Size: 48]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec8, Size: 1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2eca, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ecb, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x2ecc, Size: 4]
	float ParachuteSlideReportDuration;//[Offset: 0x2ed0, Size: 4]
	float ParachuteReportLocationDiffSq;//[Offset: 0x2ed4, Size: 4]
	ParachuteData ParachuteData;//[Offset: 0x2ed8, Size: 128]
	float TrustClientSinceEnterParachuteJump;//[Offset: 0x2f60, Size: 4]
	float ClientParachuteLandedFinishTimeMax;//[Offset: 0x2f68, Size: 4]
	VehicleMoveDragData DragData;//[Offset: 0x2f78, Size: 24]
	float ReportSimulatedDragInterval;//[Offset: 0x2f90, Size: 4]
	delegate OnTeammateRescueStateChanged;//[Offset: 0x2f9c, Size: 12]
	TimerHandle LocalRescueEndedTimer;//[Offset: 0x2fa8, Size: 8]
	ScreenAppearanceActor* ScreenAppearanceMgr;//[Offset: 0x2fc4, Size: 4]
	bool bIsInFreeBuildState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc8, Size: 1]
	PlayerPetSpectatorComponent* PetSpectatorComp;//[Offset: 0x2fcc, Size: 4]
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x37c0bfc
	void ViewPlane();// 0x37c0be8
	void VehicleWarOpenSequencerDelegate__DelegateSignature(out const BattleOpenSequencerInfo SequencerInfo);// 0x446e168
	void VehicleWarFireTakeDamagedEvent(Vector CauserLocation);// 0x37c0b78
	bool UseSharedBagSkin();// 0x37c0b48
	void UserDropItemOperation(ItemDefineID DefineID);// 0x37c0ac0
	void UseItem(int ID);// 0x37c0a48
	void UpdateTeammatesStreaming();// 0x37c0a2c
	void UpdateSurfboardUI();// 0x37c0a18
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x37c0998
	void UpdatePoseViewPitchLimit();// 0x37c0984
	void UpdatePoseState(byte PoseType);// 0x37c090c
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x37c0844
	void UnPossess();// 0x37c0828
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x37c0688
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x37c03d8
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x37c04e0
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x37c03d8
	void TriggerLandingVoiceCheckFuction(Vector posVector, float showTime);// 0x37c031c
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x37c031c
	void TPPFollowAI(FString AIPlayerKey);// 0x339998c
	void TouchMove(Vector Loc, byte FingerIndex);// 0x37c0260
	bool TouchEnd(byte PressType);// 0x37c01e0
	void TouchBegin(byte PressType);// 0x37c0168
	void ToggleOBVehicleView();// 0x37c0154
	void ToggleOBTPPFollowFreeView();// 0x37c0140
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x37c00c0
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x37bffe4
	void TeamMateStateChangedZNQ(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, float HealthMax, int VoiceID);// 0x37bfdbc
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, int VoiceID);// 0x37bfbdc
	void SwitchToTeamByNumPressed();// 0x37bfbc8
	void SwitchToPlayerByNumPressed();// 0x37bfbb4
	void SwitchToDeadBox();// 0x37bfba0
	void SwitchShowUI();// 0x37bfb8c
	void SwitchPoseStateWithTransformServer(STExtraBaseCharacter* TargetCharacter, byte PoseState, Vector Position, Rotator Rotation);// 0x37bf9d8
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x37bf8dc
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState, enum FailReason);// 0x37bf78c
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x37bf6c8
	void SwitchMouseCursorShowState();// 0x37bf6b4
	void SwitchGenerateItem();// 0x37bf658
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x37bf59c
	void SwitchCameraModeByOrder();// 0x37bf588
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x37bf42c
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x37bf324
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x37bf24c
	void StopAbsorb();// 0x37bf1f0
	void StartLandOnGroundAfterJumpPlane();// 0x37bf1dc
	void StartInputCameraMoveTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);// 0x37bf0c4
	void StartGame();// 0x37bf0b0
	void StartFreeCamera(byte FigerIndex);// 0x37bf038
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x37bef70
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x37bee70
	void SpawnAIPosi(int ID, int AITeamID, float PosiX, float PosiY, float PosiZ);// 0x37bece0
	void SpawnAI(int Num, bool bSpawnAll);// 0x37bec1c
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x37beba4
	bool SkipChangeViewTarget();// 0x37beb74
	void ShutDownBroadcastFatalDamage(bool IsOpen);// 0x34190e8
	void ShowStringMsg(const FString Message, int MsgID, int ItemID, FString PlayerKeyString);// 0x37be90c
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x37be7c8
	void ShowMovePath(const Vector[] Path);// 0x37be704
	void ShowGameTips(int TipsID, FString Params);// 0x37be5fc
	void ShowFireBtn(bool bShow);// 0x446e168
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x37be534
	void ShowAnimationButton(bool IsShow, int NewUIType);// 0x37be464
	bool ShouldShowVoiceVisualizationForTrainingMode();// 0x37be434
	bool ShouldShowVoiceVisualizationForSameTeam(Pawn* Other);// 0x37be3ac
	bool ShouldSendFatalDamageToClient(UAECharacter* Causer, UAECharacter* Victim);// 0x37be2e0
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x37be260
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x37be1e0
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x37be160
	void SetVirtualJoystickWidgetRender(enum Visible);// 0x37be0e8
	void SetViewYawLimit(float YawMin, float YawMax);// 0x37be02c
	void SetViewTargetTest(Actor* NewViewTarget);// 0x37bdfb4
	void SetViewPitchLimit(float PitchMin, float PitchMax);// 0x37bdef8
	void SetTouchFingerIndex(bool TouchBegin, byte FingerIndex);// 0x37bde30
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x37bdd20
	void SetSpectatorPawnLotation(out const Vector NewLocation);// 0x37bdc9c
	void SetSkillFingerIndex(byte FingerIndex);// 0x37bdc24
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x37bdba4
	void SetShoulderFingerIndex(bool TouchBegin, byte FingerIndex);// 0x37bdadc
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x37bda14
	void SetPlayerMark(Vector Loc);// 0x37bd968
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x37bd7a8
	void SetPlane(Actor* Plane);// 0x37bd730
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x37bd61c
	void SetParachuteAnimCached(byte AnimOverrideType, bool InValue);// 0x37bd558
	void SetOBVehicleView(bool IsActive);// 0x37bd4d8
	void SetObservingTime(float Time);// 0x37bd460
	void SetMovable(bool IsMovable);// 0x37bd3e0
	void SetLocalUnPossesTest(bool bControllerSide, bool bPawnSide);// 0x37bd310
	void SetLaunchFlyStateOnServer(enum StateType);// 0x37bd298
	void SetLaunchFlyState(enum StateType);// 0x37bd220
	void SetJoyStickScale(float JSScale);// 0x37bd1a8
	void SetJoyStickPtrFireMode(int FireMode);// 0x37bd130
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x37bd074
	void SetJoyStickOpacityNotUpdate(float JSOpacity);// 0x37bcffc
	void SetJoyStickOpacity(float JSOpacity);// 0x37bcf84
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x37bcf14
	void SetJoyStickCenter(Vector2D JSCenter);// 0x37bcea4
	void SetIsSnowy(bool bSnowy);// 0x37bce24
	void SetIsShowBlood(bool InIsShowBlood);// 0x37bcda4
	void SetIsRainy(bool bRainy);// 0x37bcd24
	void SetIsCacheReceiveRespawnZombie(bool isReceive);// 0x37bcca4
	void SetIsBlizzard(bool bBlizzard);// 0x37bcc24
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x37bcb9c
	void SetHasResultState(bool InState);// 0x37bcb1c
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x37bc948
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x37bc884
	void SetDisableTouchMoveInput(bool bDisable);// 0x37bc804
	void SetCustomSensibility(int WeaponID, int AttrIndex, float Value);// 0x37bc704
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x37bc5bc
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x37bc4c0
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x37bc3a8
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList, int WeaponSyncTicket);// 0x37bc224
	void SetCircleInfoToClient(GetCircleInfo ReConnectInfo);// 0x37bc094
	void SetCaptureIDCardStatusDelegate__DelegateSignature(bool IsCapture);// 0x446e168
	void SetCanJump(bool CanJump);// 0x37bc014
	void SetCanGotoExPlane(bool bFlag);// 0x37bbf94
	void SetCanDropItem(bool bCanDrop);// 0x37bbf14
	void SetBeKickedPlayerName(FString InPlayerName);// 0x37bbdbc
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x37bbcf4
	void SetAllStarReportDataByOpenID(FString InPlayerOpenID, out AllStarReportData InReportData);// 0x37bbbe0
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x37bba34
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x37bb8cc
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x37bb818
	void ServerTriggerSelectHolography(int HolographyID, int SkillID);// 0x37bb71c
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x37bb668
	void ServerTriggerCharacterSkillWithID(int SkillID, bool bEnable);// 0x37bb558
	void ServerTriggerCharacterCustomEvent(byte SkillEvent, int SkillID);// 0x37bb45c
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x37bb2a8
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x37baf68
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x37bac28
	void ServerStopFillGas(STExtraShootWeapon* TargetWeapon);// 0x37bab74
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x37baa78
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x37ba7d0
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x37ba5ec
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x37ba4a8
	void ServerStartFillGas(STExtraShootWeapon* TargetWeapon);// 0x37ba3f4
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x37ba2f8
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x37ba244
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte ShootType);// 0x37ba148
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x37ba004
	void ServerSetObsverLocation(const Vector locat);// 0x37b9f58
	void ServerSetIsFreeView(bool isFreeView);// 0x37b9e90
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x37b9d7c
	void ServerSetFreeCamera(Rotator InRotation);// 0x37b9cd0
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x37b9bbc
	void ServerSetControlRotation(const Rotator NewRotation);// 0x37b9b10
	void ServerSendLogToLobby(FString ErrorLog);// 0x37b9a54
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x37b98e8
	void ServerReportVehicleDrag(const VehicleMoveDragData InDragData);// 0x37b97f4
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x37b9590
	void ServerRemoteDestroyAllActor();// 0x37b9570
	void ServerRemoteDestroyActor(int SingleId);// 0x37b94f8
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x37b939c
	void ServerReceiveThePlane(int64 TimeStamp);// 0x37b92e4
	void ServerQuitSpectating();// 0x37b9288
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x37b8f9c
	void ServerOpenParachute();// 0x37b8f40
	void ServerObserveKiller();// 0x37b8ee4
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x37b8e30
	void ServerObserveAirDropBox(int boxId);// 0x37b8d7c
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x37b8c6c
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x37b8bb8
	void ServerJumpFromPlane();// 0x37b8b5c
	void ServerInterruptGame();// 0x37b8b00
	void ServerInternalSetTeammateForbidPick(bool bIsForbid, int TLogIndex);// 0x37b8a38
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x37b8944
	void ServerHandleMsg(enum Msg);// 0x37b8890
	void ServerHandleHitDataArrayFlowOpt(STExtraShootWeapon* TargetWeapon, SACData AntiCheatData, const BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray);// 0x37b866c
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x37b8520
	void ServerHandleExtraHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData, const HitTargetExtraData[] HitExtraDataArray);// 0x37b834c
	void ServerGetTotalPlayers();// 0x37b82f0
	void ServerGetPlayerAliasInfoList();// 0x37b8294
	void ServerGetCircleInfo();// 0x37b8238
	void ServerFight();// 0x37b81dc
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x37b8128
	void ServerExitFromFlyingVehicle(STExtraVehicleBase* ExitVehicle, float NewOpenParachuteHeight, float NewCanOpenParachuteHeight, float NewForceOpenParachuteHeight, float NewCloseParachuteHeight, bool bIsInSkipOpenParachuteHeight);// 0x37b7ee4
	void ServerExitFreeCamera();// 0x37b7e88
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x37b7d24
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x37b7c14
	void ServerDoPickupRevivalFlag();// 0x37b7bb8
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x37b7a9c
	void ServerControlFireBalloonMoveEx(STExtraFireBalloon* FireBalloon, float MoveUpValue, float MoveForwardValue, float MoveRightValue);// 0x37b7908
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x37b780c
	void ServerCMD_RPC(FString Cmd);// 0x37b7718
	void ServerCMD(FString Cmd);// 0x339998c
	void ServerClearTeammatesCache();// 0x37b76bc
	void ServerChangeWeaponScheme(int Index);// 0x37b7608
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x37b7554
	void ServerChangeVehicleAvatar(const int AvatarID);// 0x37b74a0
	void ServerChangeStatePC(enum TargetStateType);// 0x37b7428
	void ServerChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x37b72c4
	void ServerAutoSwitchSameSlotWeapon(byte CurrentSlot);// 0x37b724c
	void SendWeaponInfoToOB(out OBPlayerWeaponRecord[] WeaponReport);// 0x37b7118
	void SendStringWithMsgID(FString Message, int MsgID, FString PlayerKeyString);// 0x37b6f94
	void SendStringMsgWithTransform(FString Message, int MsgID, int ItemID, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x37b6cec
	void SendStringMsg(FString Message, int MsgID, int ItemID, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x37b6a44
	void SendStringDirect(FString Message);// 0x37b6988
	void SendLogToLobbyOnece(byte LogType);// 0x37b6910
	void SendGameStateInitOK();// 0x37b68b4
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x37b67e8
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x37b666c
	void SendCustomMsg(FString Message, int MsgExtraParam, bool bSTTMsg);// 0x37b6520
	void ScopeOut();// 0x37b650c
	void ScopeIn();// 0x37b64f8
	void S2C_ResponseSkillPrompt(int PromptID, float PastTime);// 0x37b63fc
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x37b62a4
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x37b614c
	void RunOnNextFrameEvent();// 0x37b6138
	void RunOnNextFrame__DelegateSignature();// 0x446e168
	void RspGetVehiclePos(STExtraVehicleBase* SimVehicle, Vector pos);// 0x37b6074
	void RPC_ServerRefreshMaxBulletNum(STExtraShootWeapon* TargetWeapon);// 0x37b5fc0
	void RPC_Server_VehicleWarSetPlayerHasLogin();// 0x37b5f64
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x37b5de0
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x37b5a70
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x37b5760
	void RPC_Server_ShootMultiEnergyAccumulateProjectileBulletsSimulate(STExtraShootWeapon* TargetWeapon, const ShootMultiBulletsParam[] LaunchParams, float CurAccEnergyPercent);// 0x37b55dc
	void RPC_Server_ShootGrenadeBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x37b52d0
	void RPC_Server_SetRemainBoxIsSearched(PlayerRemainTombBox* RemainBox);// 0x37b5214
	void RPC_Server_SetPlayerStateChoose(int choose);// 0x37b5160
	void RPC_Server_SetMicphoneTLogToServer(const TLog_Micphone MicphoneTlog);// 0x37b509c
	void RPC_Server_SendLog(FString ErrorLog);// 0x37b4fa8
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x37b4f4c
	void RPC_Server_ReqHealth();// 0x37b4ef0
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x37b4dfc
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x37b4d04
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x37b4b28
	void RPC_Server_PrintHP();// 0x37b4acc
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x37b49d0
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x37b491c
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x37b4868
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x37b4764
	void RPC_Server_NotifyServerPetNotDownload(int PetId);// 0x37b46b0
	void RPC_Server_NotifyServerOpenAnyPickUpBox(PlayerTombBox* TombBox);// 0x37b45fc
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x37b44f8
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x37b43a4
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x37b41f0
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x37b40fc
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window, bool bIsSelfInstigator);// 0x37b3d00
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x37b3ca4
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x37b3b68
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(const ItemDefineID[] WeaponIDArray);// 0x37b3a74
	void RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes(const int[] TreasureBoxIDArray);// 0x37b3980
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x37b388c
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x37b3798
	void RPC_Server_EquipWeaponBullet(STExtraShootWeapon* TargetWeapon, int BulletID);// 0x37b369c
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x37b3554
	void RPC_Server_ClientHasReactivated();// 0x37b34f8
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x37b3394
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x37b3230
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x37b3134
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x37b3080
	void RPC_ReviveState_GiveUpRevive();// 0x37b3024
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x37b2f70
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x37b2d5c
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x37b2b98
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x37b2a1c
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x37b291c
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x37b2868
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x37b2710
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x37b25b4
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x37b23ac
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x37b21a4
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x37b20dc
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x37b1f04
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x37b1e08
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x37b1d0c
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x37b1c10
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x37b1ab8
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector_NetQuantize10 BulletStart, Vector_NetQuantize10 BulletEnd);// 0x37b19a0
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x37b1864
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x37b1720
	void RPC_GiveUpGame();// 0x37b16c4
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x37b1584
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x37b144c
	void RPC_ClientSetVehicleSpawnServerTime(float STime);// 0x37b13cc
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x37b12c4
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x37b10b0
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x37b0ee4
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x37b0d18
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x37b0b4c
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeId);// 0x37b0a44
	void RPC_Client_SetSpectatorPawnLotation(const Vector NewLocation);// 0x37b0998
	void RPC_Client_RemoteDestroyAllActor();// 0x37b097c
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x37b08fc
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x37b0768
	void RPC_Client_PreSetBulletListInClip(STExtraShootWeapon* TargetWeapon, BulletInClip CurBulletInClip);// 0x37b04d0
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot, byte SurfaceType);// 0x37b036c
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x37b00c4
	void RPC_Client_NotifyHealth(float Health);// 0x37b0010
	void RPC_Client_InfectionShowKillNum(int ShowKillNum);// 0x37aff90
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x37afe2c
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x37afd38
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x37afc3c
	void RPC_Client_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x37afb40
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackArea);// 0x37af9b0
	void RevivalTemateSuccess();// 0x37af994
	void RevivalTemateFailImpl(FString Reason);// 0x37af8d0
	void RevivalTemateFail(FString Reason);// 0x37af80c
	float RetriveMobileContentScaleFactor();// 0x37af7e4
	void RestoreDefaultInteractionSize(int JSIndex);// 0x37af76c
	void RespawnRecoverData(UAEPlayerController* PC);// 0x37af6f4
	bool ResetValidTouchMoveFrame();// 0x37af6cc
	void ResetMissingUIUpdate();// 0x446e168
	void ResetIgnoreMoveInput();// 0x37af6b0
	void RequireNetCullingDistanceByDevice();// 0x37af654
	void RequireDeviceInfo();// 0x37af638
	void RequestPlayerNewbieInfo();// 0x37af624
	bool RequestChangeWearInPhoto(int NewIndex);// 0x37af5a4
	bool RequestChangeWearInBattle(int NewIndex);// 0x37af524
	bool RequestChangeWear(int NewIndex);// 0x37af4a4
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x37af3dc
	void ReqRecordEnterIceMountain();// 0x37af380
	void ReqGetVehiclePos(STExtraVehicleBase* SimVehicle);// 0x37af2cc
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x37af254
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x37af0f8
	void ReportPlayerPositionFlow(const PlayerPositionFlow PlayerPositionFlow);// 0x37aef90
	void ReportClientParachuteData(ParachuteData InParachuteData);// 0x37aecc8
	void ReportAntiCheatInfo();// 0x37aecb4
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x37aec3c
	void RemoveCustomSensibility(int WeaponID);// 0x37aebc4
	void RemoveClientSpawnAndBackpackWeaponReplicatedData(const ItemDefineID WeaponData);// 0x37aeb10
	void ReleaseFire();// 0x446e168
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x37aea98
	void ReInitParachuteItem();// 0x37aea84
	void RefreshTopMostUIPanel(byte Type);// 0x446e168
	void RefreshShootDetailInfo();// 0x37aea70
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x446e168
	void RecoverStatusAfterReconnecting();// 0x37aea54
	void RecoverJoystick(int FingerIndex);// 0x37ae9dc
	void RecordPathPoint();// 0x37ae9c8
	void ReceiveClientRestart();// 0x446e168
	void ReceiveBackpackComponent();// 0x37ae9ac
	void QuitSpectatingReSetData();// 0x37ae998
	void QuitSpectating();// 0x37ae984
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x37ae834
	void PreViewTargetChangeDelegate__DelegateSignature(Actor* NewTarget, Actor* PrevTarget);// 0x446e168
	void PressGrenade(bool isThrow);// 0x446e168
	void PressFire(int FingerIndex);// 0x446e168
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x37ae778
	void PlayerKillingDelegate__DelegateSignature();// 0x446e168
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x446e168
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x446e168
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x446e168
	void PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x446e168
	void PlayerControllerNotifyChangeToWalkingDead__DelegateSignature(bool bCanChange, bool bIsWalkingDeadFinish);// 0x446e168
	void PlayerControllerChangeToWalkingDeadRes__DelegateSignature(bool bSucc);// 0x446e168
	void PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x446e168
	void PlayBattleSound(FString BankName, FString SoundName);// 0x37ae638
	void PickupInitialItemListForRobustness();// 0x37ae624
	void PerRespawnClearOtherPawn();// 0x446e168
	void PCOBGetTeamBackPackInfoByNumPressed();// 0x37ae610
	void PCOBGetAllPlayerThrowInfo();// 0x37aab94
	void OpenParachute();// 0x37ae5fc
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x446e168
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x446e168
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x446e168
	void OnWallFeedBack(bool _WallFeedBack);// 0x37ae57c
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x37ae4c0
	void OnViewTargetDetachedFromVehicle(* LastVehicle);// 0x37ae448
	void OnViewTargetChangeVehicleSeat();// 0x37ae434
	void OnViewTargetChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0x446e168
	void OnViewTargetChange__DelegateSignature(STExtraBaseCharacter* ViewTarget, STExtraBaseCharacter* LastViewTarget, bool bIsOnPlane);// 0x446e168
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x37ae3bc
	void OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x446e168
	void OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x446e168
	void OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x446e168
	void OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x446e168
	void OnVehicleExitFreeCameraDelegate__DelegateSignature(bool bExit);// 0x446e168
	void OnUseVehicleWarWeapon();// 0x37ae3a8
	void OnUseVehicleWarItem();// 0x37ae394
	void OnUseVehicleWarEyes();// 0x37ae380
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x446e168
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x446e168
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x446e168
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x37ae1a0
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x446e168
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x446e168
	void OnTeammatesAllDie();// 0x37ae18c
	void OnTeammateLogin(int InTeamID);// 0x37ae114
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x446e168
	void OnTeamFollowStageChangeDelegate__DelegateSignature();// 0x446e168
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x446e168
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x446e168
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x446e168
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x446e168
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x446e168
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x446e168
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x446e168
	void OnStopFireDelegate__DelegateSignature();// 0x446e168
	void OnStartFireDelegate__DelegateSignature();// 0x446e168
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x446e168
	void OnSpectatorToFreeView__DelegateSignature();// 0x446e168
	void OnSpectatorChangeFunc();// 0x37ae100
	void OnSpectatorChange__DelegateSignature();// 0x446e168
	void OnSpectatorCameraChange(bool bDie);// 0x446e168
	void OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x446e168
	void OnShowSkillPromptDelegate__DelegateSignature(int PromptID, float RemainTime);// 0x446e168
	void OnShowHideSelfMarkDelegate__DelegateSignature();// 0x446e168
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x446e168
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x446e168
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x37ae030
	void OnShowAllTeammatePosDelegate__DelegateSignature(bool bShow);// 0x446e168
	void OnShowAliasInfoDelegate__DelegateSignature();// 0x446e168
	void OnSetViewTarget__DelegateSignature(Actor* Target);// 0x446e168
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x446e168
	void OnServerFinishPickupRevivalFlag();// 0x37ae014
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x446e168
	void OnRescuedStateChanged__DelegateSignature(bool bBeingRescued);// 0x446e168
	void OnRepTeammateChange__DelegateSignature();// 0x446e168
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x446e168
	void OnRepPlayerState__DelegateSignature();// 0x446e168
	void OnRepNotify_SetBattleOwner();// 0x37ae000
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x3365b48
	void OnRep_WeatherFog();// 0x37adfec
	void OnRep_WeaponSystemReconnectReplicateData();// 0x37adfd8
	void OnRep_WeaponFunctionChanged();// 0x37adfc4
	void OnRep_WeaponAvatarDataList();// 0x37adfa8
	void OnRep_UsedSimulation();// 0x37adf8c
	void OnRep_SwitchWeather();// 0x37adf78
	void OnRep_STExtraBaseCharacter();// 0x37adf64
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x37adf50
	void OnRep_ShowWeaponHitDetailInfo();// 0x37adf3c
	void OnRep_ServerStateType();// 0x37adf28
	void OnRep_Plane();// 0x37adf14
	void OnRep_ObservedItemList();// 0x37adf00
	void OnRep_InWateringRangeBP();// 0x446e168
	void OnRep_InWateringCRange();// 0x37adeac
	void OnRep_InitialEquipmentAvatar();// 0x37ade90
	void OnRep_InitialConsumableAvatar();// 0x37ade74
	void OnRep_ImprisonmentTeammateSucess();// 0x37ade60
	void OnRep_GameStateMsgType();// 0x37ade4c
	void OnRep_ForbitPickEffect();// 0x37ade38
	void OnRep_ForbitPick();// 0x37ade24
	void OnRep_EnableDeathPlaybackDelay();// 0x37ade10
	void OnRep_DeadTombBox();// 0x37addfc
	void OnRep_CanOpenParachute();// 0x37adde8
	void OnRep_CanJump();// 0x37addd4
	void OnRep_CanImprisonmentTeammate();// 0x37addc0
	void OnRep_bGhost();// 0x37adda4
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x37add90
	void OnRep_BackpackComponent();// 0x37add7c
	void OnRep_AutoAimType();// 0x37add68
	void OnRemindTeammateShoot__DelegateSignature(FString sPlayerKey, bool bShow, float nDist);// 0x446e168
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x446e168
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x446e168
	void OnReleaseFire();// 0x37add54
	void OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x446e168
	void OnReconnected__DelegateSignature();// 0x446e168
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x446e168
	void OnPressVehicleWarMatchData();// 0x37add40
	void OnPressTurnplateQuickMsgBtn();// 0x37add2c
	void OnPressTriggerEntireMapBtn();// 0x37add18
	void OnPressShowTagVehileSeatListBtn();// 0x37add04
	void OnPressRolewearChangeBtn(int Index);// 0x37adc8c
	void OnPressItemSKillBtn();// 0x37adc78
	void OnPressFire();// 0x37adc64
	void OnPressBackpackBtn();// 0x37adc50
	void OnPostTakeDamageForBP__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* DamageCauser);// 0x446e168
	void OnPlayReplayEnd__DelegateSignature();// 0x446e168
	void OnPlayReplayBegin__DelegateSignature(int ReplayType);// 0x446e168
	void OnPlayerUseRecoverItem();// 0x37adc3c
	void OnPlayerStateChanged();// 0x37adc28
	void OnPlayerReConnected(int LostPlayerKey);// 0x37adb74
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x446e168
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x446e168
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x446e168
	void OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x446e168
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x446e168
	void OnPlayerLostConnection(int LostPlayerKey);// 0x37adac0
	void OnPlayerLeaveRevivalStateDelegate__DelegateSignature();// 0x446e168
	void OnPlayerKilledOthersPlayer__DelegateSignature(out const FatalDamageParameter FatalDamageParameter);// 0x446e168
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x446e168
	void OnPlayerInOutBlueCircleChangedDelegate__DelegateSignature(bool bIsInBlueCircle);// 0x446e168
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x37ada40
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x446e168
	void OnPlayerExitGameDelegate__DelegateSignature();// 0x446e168
	void OnPlayerEnterRevivalStateDelegate__DelegateSignature();// 0x446e168
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x446e168
	void OnPlayerControllerStateChangedCurrentType(enum CurrentType);// 0x37ad9c8
	void OnPlayerClickDriveBtn();// 0x37ad9b4
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x446e168
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x446e168
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x37ad870
	void OnPickupItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0x446e168
	void OnPickUpExpand();// 0x37ad808
	void OnPickUpCollapsed(bool isCollapsed);// 0x37ad788
	void OnPickUpActor(int Guid, int PickupCount, int TotalCount);// 0x37ad688
	void OnPCOBGetTeamBackPackInfoByNumPressed__DelegateSignature();// 0x446e168
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x446e168
	void OnOccupyNewbieGuide(int inGuideID);// 0x37ad610
	void OnOBVehicleHitActor(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x37ad46c
	void OnObserverLevelLoaded();// 0x37ad458
	void OnObservedWeaponDataChanged(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x37ad3b0
	void OnObservedUsingWeaponChanged();// 0x37ad39c
	void OnObservedPoisonFogStageChanged();// 0x37ad388
	void OnObservedItemsChanged();// 0x37ad374
	void OnObservedBulletNumChanged();// 0x37ad360
	void OnOBPawnExitVehicle(STExtraVehicleBase* InTargetVehicle);// 0x37ad2e8
	void OnNightStateChangedDelegate__DelegateSignature();// 0x446e168
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x37ad270
	void OnMemberVoiceDelegate__DelegateSignature(int member, int Status);// 0x446e168
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x446e168
	void OnLostConnection__DelegateSignature();// 0x446e168
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x446e168
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x446e168
	void OnLiveStateChanged__DelegateSignature(enum LiveState);// 0x446e168
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x446e168
	void OnKillerNotify(Actor* Killer);// 0x37ad1f8
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int Count);// 0x37ad0e8
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x37ad008
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x37acef8
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x446e168
	void OnInfectionShowTipMsgDelegate__DelegateSignature(int MsgID, int IconID, float showTime, float DelayTime);// 0x446e168
	void OnInfectionPlaySoundEvent__DelegateSignature(int SoundID);// 0x446e168
	void OnIndoorStateChangeDelegate__DelegateSignature();// 0x446e168
	void OnImprisonStateChange__DelegateSignature(bool bEnterImprison);// 0x446e168
	void OnHideSkillPromptDelegate__DelegateSignature(bool bForce, int PromptID);// 0x446e168
	void OnHideFollowPanelAndBtnDelegate__DelegateSignature();// 0x446e168
	void OnHandleCameraModeChangedDelegate__DelegateSignature(byte CameraMode);// 0x446e168
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x446e168
	void OnGameStartDelegate__DelegateSignature();// 0x446e168
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x446e168
	void OnGameModeStateChanged();// 0x446e168
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0x446e168
	void OnExitGame__DelegateSignature();// 0x446e168
	void OnEquipWeaponDelegate__DelegateSignature();// 0x446e168
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x446e168
	void OnEquipmentAvatarChange__DelegateSignature();// 0x446e168
	void OnEnterBattleResultStep();// 0x37acee4
	void OnDropItemOnPlane();// 0x37aced0
	void OnDropItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0x446e168
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x446e168
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x446e168
	void OnDeadBoxExpand();// 0x37acebc
	void OnDeadBoxCollapsed(bool isCollpased);// 0x37ace3c
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x446e168
	void OnConsumableAvatarChange__DelegateSignature();// 0x446e168
	void OnCongregationFlagDelegate__DelegateSignature();// 0x446e168
	void OnClientWillGotoSpectating();// 0x37ace28
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CamID, Actor*[] PeerVisualFieldActorList);// 0x446e168
	void OnClickVehicleWarBuff();// 0x37ace14
	void OnClickToggleOBVehicleView();// 0x37ace00
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x446e168
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x446e168
	void OnCharacterRecoveryHealthEvent();// 0x37acdec
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x446e168
	void OnCharacterReceiveHealthChangeHistory__DelegateSignature(out const float[] HealthChangeHistory);// 0x446e168
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x446e168
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x446e168
	void OnCharacterLandingCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x446e168
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x446e168
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x37acd6c
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x446e168
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x446e168
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x446e168
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x446e168
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x37accec
	void OnBuyRevivalSign();// 0x37accd0
	void OnAvatarInfoRep__DelegateSignature(int[] ItemIdList, FString PlayerUID, FString AvatarType);// 0x446e168
	void OnAutoSprintActive__DelegateSignature();// 0x446e168
	void OnAssociationOperation(ItemDefineID DefineID, ItemDefineID TargetDefineID, enum OperationType, byte Reason);// 0x37acb68
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x446e168
	void ObserveWhoKilledMe();// 0x37acb54
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x37acaa0
	void ObserveCharacter(FString InPlayerName);// 0x37ac948
	void ObserveAirDropBox(int boxId);// 0x37ac8d0
	void OBCameraTurnSlower();// 0x37ac8bc
	void OBCameraTurnFaster();// 0x37ac8a8
	void OBCameraMoveSlower();// 0x37ac894
	void OBCameraMoveNear();// 0x37ac880
	void OBCameraMoveFaster();// 0x37ac86c
	void OBCameraMoveFar();// 0x37ac858
	void NotifyOpenSequencer(BattleOpenSequencerInfo Info);// 0x37ac640
	void NotifyIsInResultView(bool isInResultView);// 0x37ac5b4
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x446e168
	void NotifyDeadBoxExpand();// 0x446e168
	void NotifyDeadBoxCollapsed(bool isCollpased);// 0x446e168
	void MoveUpDelegate__DelegateSignature(float Rate);// 0x446e168
	void MoveUp(float Rate);// 0x37ac53c
	void MoveToAIWithClassName(FString AIClassName, float XOffset, float YOffset, float ZOffset);// 0x37ac3b0
	void MoveToAI();// 0x37ac39c
	void MoveRightDelegate__DelegateSignature(float Rate);// 0x446e168
	void MoveForwarDelegate__DelegateSignature(float Rate);// 0x446e168
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x37ac2e0
	void ModifyCameraViewPitchLimitWithPose(byte Pose, float PitchMin, float PitchMax);// 0x37ac1e0
	void MemberVoice(int member, int Status);// 0x446e168
	void MarkStartFireFrame();// 0x37ac1cc
	void LocalMoveTo(out const Vector targetPos);// 0x37ac148
	void LocalGetGameStateReconnectInfo();// 0x37ac134
	void LerpFPPCamera();// 0x37ac120
	void KickPlayerFromGame();// 0x37ac10c
	void K2_SetPawn(Pawn* InPawn);// 0x37ac094
	void JumpFromPlane();// 0x37ac080
	void JoystickTriggerSprint(bool bIsSprint);// 0x446e168
	bool IsViewTarget(const Actor* pActor);// 0x37abff8
	bool IsUse3DTouch();// 0x37abfd0
	bool IsTouchToRotControl();// 0x37abfa0
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x37abf20
	bool IsToggleOBBulletTrackEffect();// 0x37abef8
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x37abe78
	bool IsStandalone();// 0x37abe44
	bool IsShowBlood();// 0x37abe24
	bool IsSameTeam(Pawn* Other);// 0x37abda4
	bool IsRevivalMode();// 0x37abd74
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x37abcf4
	bool IsRecentlyCalledServerCMD(const float MarginSeconds);// 0x37abc74
	bool IsParachuteAnimCached(byte AnimOverrideType);// 0x37abbf4
	bool IsMurderSelfDefense(FString InformMurderName);// 0x37abb30
	bool IsMoveable_DontConsiderFollowingState();// 0x37abb08
	bool IsMoveable();// 0x37abae0
	bool IsLastBreathOrRescueingOther();// 0x37abab8
	bool IsInRevival();// 0x37aba90
	bool IsInPlane();// 0x37aba68
	bool IsInParachuteOpen();// 0x37aba40
	bool IsInParachuteJump();// 0x37aba18
	bool IsInParachute();// 0x37ab9f0
	bool IsInObservingPlayback();// 0x37ab9c8
	bool IsInNormalPlane();// 0x37ab9a0
	bool IsInInitial();// 0x37ab978
	bool IsInFreeCameraView();// 0x37ab95c
	bool IsInFreeBuildState();// 0x37ab93c
	bool IsInFinish();// 0x37ab914
	bool IsInFight();// 0x37ab8ec
	bool IsInDeathReplay();// 0x37ab8c4
	bool IsInDead();// 0x37ab89c
	bool IsGhost();// 0x37ab874
	bool IsForbitPickMakeEffect();// 0x37ab84c
	bool IsForbitPick(out const FName TombName);// 0x37ab7b8
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x37ab6ec
	bool IsCanViewEnemy();// 0x37ab6c4
	bool IsCanSpectateTeammate();// 0x37ab69c
	bool IsCanImprisonmentTeammate();// 0x37ab674
	bool IsCacheReceiveRespawnZombie();// 0x37ab64c
	bool IsAutoParachuteEnable();// 0x37ab624
	bool IsAllowActorTouchMove();// 0x37ab5fc
	bool IsAGMPlayer();// 0x37ab5d4
	void InputCameraMoveTest(float DeltaSeconds);// 0x37ab55c
	void InitWeatherConfigComponent();// 0x37ab548
	void InitVehicleAvatarSkinList();// 0x37ab52c
	void InitVehicleAvatarList();// 0x37ab510
	void InitTaskDatas(uint32 InPlayerKey);// 0x37ab498
	void InitTaskDataDelegate__DelegateSignature(int TaskId, int process, FString ext_info);// 0x446e168
	void InitTaskData(int TaskId, int process, FString ext_info);// 0x37ab2b0
	void InitTaskComponent();// 0x37ab29c
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x446e168
	void InitJoyStickAfterActivation();// 0x446e168
	void InitCollectionDataDelegate__DelegateSignature(int ItemID, int CurrentCount, int TotalCount);// 0x446e168
	void InitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x37ab19c
	void InfectionSelectZombieDelegate__DelegateSignature(enum TargetPawnType);// 0x446e168
	void HideGameTipForLowFPSWarning();// 0x37ab188
	void HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x446e168
	FString HawkEyesLocalize(int InPlayerKey);// 0x37ab078
	void HandleVirtualJoystickInput(out const Geometry Geometry, out const Vector2D ScreenPosition, int PointerIndex, bool MouseDown);// 0x37aaf00
	void HandleUpdateShovelingRelease();// 0x37aaeec
	void HandleUpdateShovelingPressed();// 0x37aaed8
	void HandleUpdateShoveling();// 0x37aaec4
	void HandleTogglePlayerListInOB();// 0x37aaeb0
	void HandleToggleOBTeamList(bool InShow);// 0x37aae30
	void HandleToggleMapInOB();// 0x37aae1c
	void HandleToggleHitDamageDisplay();// 0x37aae08
	void HandleToggleBulletTrack();// 0x37aadf4
	void HandleTipInfo(FString FullMsg);// 0x37aad38
	void HandleSwitchToTeammatePrev();// 0x37aad24
	void HandleSwitchToTeammateNext();// 0x37aad10
	void HandleSwitchToTeam(int InTeamID);// 0x37aac98
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x37aac20
	void HandleMsg(enum Msg);// 0x37aaba8
	void HandleLeaveFreeViewInOB();// 0x37aab94
	void HandleLandOnGroundEnd();// 0x37aab80
	void HandleFlyLeapPlatform();// 0x37aab24
	void HandleEnterFreeViewInOB();// 0x37aab10
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x37aaa40
	void HandleClientHasReactivated();// 0x37aaa2c
	void HandleChangeRolewearDone();// 0x446e168
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x37aa970
	int GotoSpectating(int TeammatePlayerid);// 0x37aa8e8
	void GotoFlying();// 0x37aa8d4
	void GMTeleport(FName Teleporter);// 0x37aa85c
	void GMSetBoolPoisonCircle();// 0x37aa848
	void GMSetBoolAirDrop();// 0x37aa834
	void GMSetBoolAirAttack();// 0x37aa820
	void GMSetBoolAI();// 0x37aa80c
	void GMEnableRandom();// 0x37aa7f8
	void GMEnableAllComponent();// 0x37aa7e4
	void GMDisableRandom();// 0x37aa7d0
	void GMDisableAllComponent();// 0x37aa7bc
	int GetWriteCircleDistance();// 0x37aa794
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x37aa76c
	WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x37aa6a0
	int GetWeaponDIYPlanID(int WeaponID);// 0x37aa620
	int GetWeaponAvatarItemId(int BPID);// 0x37aa598
	int GetWeaponAvatarID(int WeaponID, bool isGrenade);// 0x37aa4cc
	float GetViewPortDPIScale();// 0x37aa49c
	VehicleUserComponent* GetVehicleUserComp();// 0x37aa474
	bool GetUseMotionControlLog();// 0x37aa44c
	bool GetUseMotionControlEnable();// 0x37aa424
	int GetUnlockWearCount();// 0x37aa3fc
	float GetTouchForce(byte FingerIndex);// 0x37aa37c
	Actor* GetThePlane();// 0x37aa35c
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x37aa2dc
	SpringArmComponent* GetTargetedSpringArm();// 0x37aa2b4
	int GetStatTriangles();// 0x33a3d0c
	FString GetStatMemory();// 0x376508c
	StateMachineComponent* GetStateMachineCompent();// 0x37aa28c
	int GetStatDrawCalls();// 0x33a3d0c
	STExtraPlayerState* GetSpecOrDemoPlayerState();// 0x37aa264
	Pawn* GetSpecOrDemoPawn();// 0x37aa23c
	BattleItemData[] GetSpecialClothingInAllBackpack(int Index);// 0x37aa0e4
	int[] GetSpecialClothingCountInAllBackpack(int Index);// 0x37a9fdc
	int[] GetSpecialAreaList();// 0x37a9f1c
	int GetSpecialAreaID();// 0x37a9ef4
	SIslandInactiveClearComponent* GetSIslandInactiveClearComponent();// 0x37a9ecc
	Rotator GetSensibilityRate(float YawInput, float PitchInput, bool bIsMotionControl);// 0x37a9da8
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x37a9c4c
	ScreenAppearanceActor* GetScreenAppearanceMgr();// 0x37a9c24
	FString GetRHIThreadTime();// 0x376508c
	int GetRevivalCountDownTime();// 0x37a9bfc
	FString GetRenderThreadTime();// 0x376508c
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x446e168
	QuickSignComponent* GetQuickSignComponent();// 0x37a9bd4
	FString GetPresentTime();// 0x376508c
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x37a9bac
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x37a9ac4
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x37a9a9c
	PlayerPetSpectatorComponent* GetPetSpectatorComp();// 0x37a9a74
	CharacterParachuteComponent* GetParachuteComponent();// 0x37a9a4c
	AnimationAsset* GetParachuteAnimAsset(byte AnimType, byte AnimOverrideType);// 0x37a9988
	Transform GetPaintDecalTargetTransform();// 0x37a9928
	ObservingReplay* GetObservingPlayback();// 0x37a9900
	Vector GetNewestAirDropBoxPos();// 0x37a98b8
	FString GetMurderUIDStr();// 0x37a97bc
	FString GetMurderName();// 0x37a96fc
	bool GetMurderIsAI();// 0x37a96c4
	BattleItemSpectatingData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x37a94e4
	uint32 GetMoyaTime();// 0x37a94bc
	byte GetMaxTouchForceFinger();// 0x37a947c
	enum GetLastStateType();// 0x37a9454
	Vector2D GetJoyStickVisualSize();// 0x37a9414
	float GetJoyStickOpacity();// 0x37a93ec
	Vector2D GetJoyStickCenter();// 0x37a93ac
	int GetItemUseSpecialAreaID(int ItemID);// 0x37a932c
	bool GetIsRespawn();// 0x37a930c
	bool GetIsMurderSameTeam();// 0x37a92d4
	bool GetIsFreeCamera();// 0x37a92b4
	enum GetInfectionPawnSubType();// 0x37a928c
	enum GetInfectionPawnMainType();// 0x37a9264
	IdeaDecalManager* GetIdeaDecalManager();// 0x37a923c
	uint32 GetHokyTime();// 0x37a9214
	FString GetGameThreadTime();// 0x376508c
	void GetGameStateReconnectInfoOnServer();// 0x37a91b8
	LastGameRemainItemData GetGameRemainItems();// 0x37a90c8
	int GetFriendDistance();// 0x33a3d0c
	Vector GetFocalLocation();// 0x37a9078
	FString GetFinalMurderName();// 0x37a8f58
	WeaponHitDetailInfo GetDetailHitInfo();// 0x37a8e24
	void GetDailyTaskReportData(out DailyTaskReportInfo ResultData);// 0x37a8ca8
	enum GetCurrentStateType();// 0x37a8c80
	Vector GetCurrentLevelOffset();// 0x37a8c38
	STExtraPlayerState* GetCurPlayerState();// 0x37a8c10
	int GetCurPlayerId();// 0x37a8be8
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x37a8bc0
	Vector GetCurPawnLocation();// 0x37a8b78
	Pawn* GetCurPawn();// 0x37a8b50
	float GetCurFPS();// 0x33a3d0c
	Rotator GetControlLookRotation();// 0x37a8b00
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x37a8a14
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x37a88bc
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x37a883c
	ChatComponent* GetChatComponent();// 0x37a8814
	uint32 GetBeKickedPlayerKey();// 0x37a87ec
	BackpackComponent* GetBackpackComponent();// 0x37a87c4
	AllStarReportData GetAllStarReportDataByOpenID(FString InPlayerOpenID);// 0x37a86f8
	void GenerateIdCardMark(out const Vector Loc);// 0x37a866c
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int boxId);// 0x37a8508
	void GameModeGotoFightingState();// 0x37a84f4
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x37a8438
	void ForceServerSetControlRotationOnVehicle();// 0x37a8424
	void ForceReleaseCurTouchMoveFinger();// 0x37a8410
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x37a8344
	void ForceDropItemsWithType(int TypeItem);// 0x37a82cc
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x37a8200
	void ForceDropItems(out const int[] ItemTableList);// 0x37a8134
	void ForceDropAllItem();// 0x37a8120
	bool ForbidSpectateTeamMateOnPlane();// 0x37a80f0
	void FollowEmoteDelegate__DelegateSignature(bool bIsVisible);// 0x446e168
	void FlushItem(int onlyStatic);// 0x37a8078
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x37a8008
	void FireOrGrenade();// 0x37a7ff4
	void Fight();// 0x37a7fe0
	void FadeSceneToGrayOnDeath(bool bSet);// 0x37a7f60
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x37a7dbc
	void ExitNightState();// 0x37a7da8
	void ExitFreeCamera(bool IsForceReset);// 0x37a7d28
	void ExecDSCommand(const FString DSCommand);// 0x37a7c64
	void EquipIceDrinkItems(out const int[] ItemList);// 0x37a7b98
	void EnterVehicleDelegate__DelegateSignature(bool IsEnter, Actor* Vehicle);// 0x446e168
	void EnterNightState();// 0x37a7b84
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x37a7a7c
	void EndForceTouchFire(Vector Loc);// 0x37a7a0c
	void EnablePlayerInHouse(bool bIsIn);// 0x37a798c
	void EnableNetUpdateGroupID(byte NetGroupID);// 0x37a7914
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x446e168
	void EnableAutoParachute(bool bEnable);// 0x37a7894
	void DynamicCreateComponents();// 0x37a7880
	void DropItemsWithType(int TypeItem);// 0x37a7808
	void DropItem(int ID);// 0x37a7790
	void DropAllItem();// 0x37a777c
	void DoUITouchMove(Vector Loc);// 0x446e168
	void DoubleClickCancel(const byte FingerIndex);// 0x37a7704
	void DoTouchMove(float Yaw, float Pitch);// 0x446e168
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x37a7650
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x37a759c
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x446e168
	void DisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString Param1, FString Param2, float ControlTime);// 0x37a7348
	void DisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x37a713c
	void DisplayLowFPSCountingDown();// 0x37a7128
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x37a6e70
	void DisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x37a6bb8
	void DisplayGameTipWithMsgID(int ID);// 0x37a6b40
	void DisplayGameTipForLowFPSWarning(int ID, FString Param1, FString Param2);// 0x37a6888
	void DisplayCustomLuaGameTips(FString FunctionName, int ID, out const byte[] ExpandDataContent);// 0x37a66f4
	void DisplayBattleGeneralTip(int ID, FString Param1, FString Param2);// 0x37a643c
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x37a63c4
	void DispatchPlayerReconnectedEvent();// 0x37a63b0
	void DispatchPlayerLostEvent();// 0x37a639c
	void DispatchPlayerExitEvent();// 0x37a6388
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x37a6310
	void DisableNetUpdateGroupID(byte NetGroupID);// 0x37a6298
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x446e168
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x446e168
	void DelayGotoSpectating();// 0x37a6284
	void DelayForceExitFreeCamera();// 0x37a6270
	void DebugSetUIVisibility(bool bUIVisibility);// 0x446e168
	void DealGetAllNearShotWeapon(float disRate);// 0x37a61f8
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x37a613c
	void DealGetAllNearMoveCharacter(float checkDis);// 0x37a60c4
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x37a5f08
	void ConsumeRevivalSign();// 0x36fafe0
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x37a5df0
	void ClientStopShoveling();// 0x37a5d94
	void ClientStartOnlineGame();// 0x37a5d78
	void ClientShowInfectAreaWarning();// 0x37a5d1c
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x37a5bf4
	void ClientSetPoisonSmogStage(int SmogStage);// 0x37a5b40
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x37a5a38
	void ClientSetControlRotation(const Rotator NewRotation);// 0x37a59c0
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x37a58c4
	void ClientSetAIPosToTarget(Vector StartPos, Vector targetPos);// 0x37a57fc
	void ClientSetAIPos(uint32 KeyID, Vector pos, bool isStart);// 0x37a56e8
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x37a5618
	void ClientRPC_TeamMateStateChanged(const TeamMateStateInfo TeamMateInfo);// 0x37a5570
	void ClientQuitViewEnemy();// 0x37a5554
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x37a5454
	void ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x446e168
	void ClientOnHurt();// 0x37a5438
	void ClientOnEnterVehicleDelegate__DelegateSignature(int SeatType);// 0x446e168
	void ClientOnDeathReplayDataWhenFatalDamaged__DelegateSignature(bool bIsDead, bool bIsValidDeathReplay, bool bIsSuicide, FString InPlayerName, FString PlayerUID, bool bIsPlayerAI, enum AIType, int DamageType, FString MLAIUID);// 0x446e168
	void ClientOnDamageToOther(float _DamageToOther);// 0x37a53b8
	void ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature(enum SeatType);// 0x446e168
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x37a52a4
	void ClientInterruptGame();// 0x37a5248
	void ClientInitIngameUIAfterRespawn();// 0x37a51ec
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x37a5130
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x37a5068
	void ClientGotoSpectating();// 0x37a504c
	void ClientGiveUpRevivalTemmates();// 0x37a5030
	void ClientGameStarted();// 0x37a5014
	void ClientFriendBattleEnd(bool bIsShowWatchFriendBattleEndTips);// 0x37a4f8c
	void ClientForbidLoadParahuteAnim(bool bCanForbid);// 0x37a4f04
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x37a4e7c
	void ClientEnterViewBox(int boxId);// 0x37a4dfc
	void ClientEndOnlineGame();// 0x37a4de0
	void ClientDisplayNormalTips(FString Content);// 0x37a4d1c
	void ClientDisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString Param1, FString Param2, float ControlTime);// 0x37a4ac0
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x37a48ac
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x37a46e8
	void ClientDisplayGameTipWithMsgID(int ID);// 0x37a4634
	void ClientDisplayCustomLuaGameTips(FString FunctionName, int ID, const byte[] ExpandDataContent);// 0x37a44a8
	void ClientCheckStartShovelingFail();// 0x37a444c
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x37a4398
	void ClientChangeStatePC(enum TargetStateType);// 0x37a4318
	void ClearParachuteAnimAssetCache();// 0x37a4304
	void ClearDeadTombBox();// 0x37a42f0
	void ClearAllConstructedBuilding();// 0x37a42dc
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x37a423c
	bool CientRevivalTemmates();// 0x37a4214
	void CheckServerStateIgnoreTouch();// 0x3790e78
	void CheckQuitSpectatingInClientRestart(Pawn* NewPawn);// 0x37a4194
	void CheckParachuteLandedFinish();// 0x37a4180
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x37a4098
	void CheckDeadBoxIgnoreTouch();// 0x3790e40
	void CheckConsumeGlideItem();// 0x37a4084
	bool CheckAllVehicleWeaponIsReadyForFire(bool WithBroadEvent);// 0x37a3ffc
	bool ChecCanChangeWeaponScheme();// 0x37a3fcc
	void ChangeWeather(int WeatherID);// 0x37a3f54
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x37a3ed4
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x37a3e5c
	void ChangeToWalkingDead();// 0x37a3e48
	void ChangeStatePC(enum TargetStateType);// 0x37a3dd0
	void ChangeSpectatorStateToFreeView();// 0x37a3dbc
	bool ChangeRolewearIndex(int NewIndex, bool bIgnoreVault);// 0x37a3cf0
	void ChangeCharacterLogicDelegate__DelegateSignature(enum TargetPawnType);// 0x446e168
	void ChangeCharacterBeforeDelegate__DelegateSignature(enum TargetPawnType);// 0x446e168
	void CanSeeAllUI(bool bUIVisibility);// 0x34190e8
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x37a3c50
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x37a3b40
	bool CanAutoSwitchGrenade(int GrenadeID);// 0x37a3ab8
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x37a39d4
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, int VoiceID, float Temperature);// 0x37a37f0
	void CallShowTouchInterface(bool InShow);// 0x37a3768
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x37a3198
	Vector2D CalcAttactBtnPos(float LocX, float LocY, float SizeX, float SizeY);// 0x37a3038
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x37a2fc0
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x37a2f48
	void CacheRecvInfectionSelectZombie__DelegateSignature(bool bRecv);// 0x446e168
	void C2S_RequestSkillPrompt();// 0x37a2eec
	void C2S_RequestBeingRescuedRemainingTime();// 0x37a2e90
	void BroadcastFatalDamageToClientWithStruct(const FatalDamageParameter FatalDamageParameter);// 0x37a2d40
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x37a2ad0
	SpringArmComponent* BPGetTargetedSpringArm();// 0x37a2a98
	bool BPGetIsAndroidSimulator();// 0x37a2a70
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString Param1, FString Param2);// 0x37a2824
	void BPCastUIMsgWithParam(FString Func, FString module, FString Param1);// 0x37a2660
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x446e168
	void BP_BeginSpectatingState();// 0x446e168
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x37a25e8
	void BindVoiceCheckFunction();// 0x37a25d4
	void BindVirtualJoystickInputDelegates(bool bBind);// 0x37a2554
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x37a2498
	void BeginAbsorb();// 0x37a243c
	void BecomeAGhost(bool Flag);// 0x37a23b4
	void BackToGameDataRefresh();// 0x37a23a0
	bool AutoSelectViewTarget();// 0x37a2378
	void AutoSelectTeammateToView();// 0x37a2364
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x37a2258
	void AddParachuteAnimAssetCache(byte AnimType, AnimationAsset* AnimAsset, byte AnimOverrideType);// 0x37a2158
	void AddItemAttachList(int BaseItemID);// 0x37a20e0
	void AddItem(int ID, int Count, int PickupType);// 0x37a1fe0
	void AddCharacterVirtualItemToBackpack();// 0x37a1fcc
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x37a1e84
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x37a1e04

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0xc9c, Size: 12]
	delegate OnDeath;//[Offset: 0xca8, Size: 12]
	delegate OnBulletChange;//[Offset: 0xcb4, Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0xcc0, Size: 12]
	delegate OnAnimAssetSkeletonMatch;//[Offset: 0xccc, Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0xcd8, Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0xce4, Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0xcf0, Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0xcfc, Size: 12]
	delegate OnPlayerWeaponReloadLastBullet;//[Offset: 0xd08, Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0xd14, Size: 12]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0xd20, Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0xd2c, Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xd38, Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0xd44, Size: 12]
	delegate OnFollowStateChanged;//[Offset: 0xd50, Size: 12]
	delegate OnPlayerStartRescue;//[Offset: 0xd84, Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0xd90, Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0xd9c, Size: 12]
	delegate OnServerPerspectiveChanged;//[Offset: 0xda8, Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xdb4, Size: 12]
	delegate OnDeathDelegate;//[Offset: 0xdc0, Size: 12]
	delegate OnPostTakeDamage;//[Offset: 0xdcc, Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0xdd8, Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0xde4, Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0xdf0, Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0xdfc, Size: 12]
	delegate PostAttrModifiedDelegate;//[Offset: 0xe08, Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xe44, Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xe50, Size: 12]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0xe5c, Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xe68, Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xe74, Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xe80, Size: 12]
	delegate OnCharacterShootBulletDelegate;//[Offset: 0xe8c, Size: 12]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xe98, Size: 12]
	delegate OnCharacterEndViewTarget;//[Offset: 0xea4, Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xeb0, Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xebc, Size: 12]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0xec8, Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0xed4, Size: 12]
	delegate OnRequestPaintDecalDelegate;//[Offset: 0xee0, Size: 12]
	delegate OnPawnExitParachute;//[Offset: 0xeec, Size: 12]
	delegate SetClimbAnimationDelegate;//[Offset: 0xef8, Size: 12]
	delegate OnCanVaultFlagChangeDelegate;//[Offset: 0xf04, Size: 12]
	delegate OnPreRepAttachment;//[Offset: 0xf10, Size: 12]
	delegate OnPostRepAttachment;//[Offset: 0xf1c, Size: 12]
	delegate OnCalcPickUpItemFlow;//[Offset: 0xf28, Size: 12]
	delegate OnCalcUseItemFlow;//[Offset: 0xf34, Size: 12]
	delegate OnReceivePlayerKey;//[Offset: 0xf40, Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xf4c, Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xf50, Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xf54, Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xf58, Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xf5c, Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xf60, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf64, Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf64, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf64, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xf68, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6c, Size: 1]
	float Money;//[Offset: 0xf70, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf75, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf75, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf76, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf77, Size: 1]
	bool bShootSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf78, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xf7c, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf80, Size: 1]
	bool bStandAloneUnlimitBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf81, Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf82, Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf83, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf84, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xf8c, Size: 4]
	bool bCanBeHitWhenHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf91, Size: 1]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xf94, Size: 4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0xf98, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0xf9c, Size: 4]
	FName HeadSocketName;//[Offset: 0xfa0, Size: 8]
	FName LFootSocketName;//[Offset: 0xfa8, Size: 8]
	FName RFootSocketName;//[Offset: 0xfb0, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0xfb8, Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0xfbc, Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0xfc0, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xfc4, Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0xfc8, Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0xfcc, Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0xfd0, Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd4, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0xfd8, Size: 12]
	byte PoseState;//[Offset: 0xfe4, Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0xfe8, Size: 4]
	Actor* ThePlane;//[Offset: 0xfec, Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0xff0, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0xff4, Size: 12]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 1]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1001, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1002, Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1010, Size: 1]
	float VaultCheckBroadcastInterval;//[Offset: 0x1014, Size: 4]
	bool bEnableSinkEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1018, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x101c, Size: 4]
	byte ClientSidePoseState;//[Offset: 0x1024, Size: 1]
	float RadialDamageScale;//[Offset: 0x1028, Size: 4]
	float RadialDamageReduce;//[Offset: 0x102c, Size: 4]
	float MomentumResistanceScale;//[Offset: 0x1030, Size: 4]
	float MomentumResistanceFixed;//[Offset: 0x1034, Size: 4]
	float MoveOptimizeChangeCD;//[Offset: 0x10dc, Size: 4]
	byte LastPoseState;//[Offset: 0x10e4, Size: 1]
	float LastSwitchCharPoseTime;//[Offset: 0x10e8, Size: 4]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1100, Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0x1104, Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110c, Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110d, Size: 1]
	bool bAttachmentRepNotifyAlways;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110e, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110f, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0x1110, Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1114, Size: 1]
	bool bRespawnResetAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1115, Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0x1118, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x111c, Size: 12]
	Actor*[] PlayerSlotData;//[Offset: 0x1128, Size: 12]
	Actor*[] InventoryData;//[Offset: 0x1134, Size: 12]
	AkComponent* SoundComp;//[Offset: 0x118c, Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0x1190, Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1194, Size: 1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1195, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0x1198, Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0x119c, Size: 4]
	AkAudioEvent* AkHitHeadWithHelmet;//[Offset: 0x11a0, Size: 4]
	AkAudioEvent* AkHitHeadWithoutHelmet;//[Offset: 0x11a4, Size: 4]
	enum[] ModesIgnoreHitHead;//[Offset: 0x11a8, Size: 12]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x11b4, Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0x11f0, Size: 4]
	Vector2D MeshContainerDefaultOffsetXY;//[Offset: 0x11f4, Size: 8]
	int CurrentTaskTriggerAreaID;//[Offset: 0x11fc, Size: 4]
	float ProduceSoundInterval;//[Offset: 0x1200, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0x1204, Size: 4]
	float HearRadius;//[Offset: 0x1208, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1214, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1215, Size: 1]
	byte AIStyle;//[Offset: 0x1216, Size: 1]
	Actor* WaterObj;//[Offset: 0x1218, Size: 4]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121c, Size: 1]
	byte DSHitPartJudgment;//[Offset: 0x121e, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x1220, Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x1224, Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x1228, Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122c, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0x1230, Size: 4]
	float NearDeathBreath;//[Offset: 0x1234, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1238, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x123c, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1244, Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0x1248, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x124c, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x1254, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x125c, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x1264, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x126c, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1274, Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0x12b0, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x12bc, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x12c8, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x12cc, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x12d8, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x12dc, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x12e0, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x12e8, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x12f4, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x12f8, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x12fc, Size: 4]
	float ScopeLagScale;//[Offset: 0x1304, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x1308, Size: 4]
	float ScopeFov;//[Offset: 0x130c, Size: 4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1310, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x1314, Size: 4]
	bool bAIDropToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1318, Size: 1]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x131c, Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x1320, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x1324, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x1328, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x132c, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x1338, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1344, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x1348, Size: 4]
	bool bFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134c, Size: 1]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x1350, Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x1354, Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0x1358, Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x135c, Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0x1360, Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x1364, Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1368, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x136c, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x137c, Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x1388, Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x1394, Size: 12]
	delegate OnMovementBaseChanged;//[Offset: 0x13a0, Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ac, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ad, Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ae, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x13b0, Size: 4]
	Vector ProneBoxRelativeLocation;//[Offset: 0x13b4, Size: 12]
	float DamageCauserRecordKeepTime;//[Offset: 0x13c0, Size: 4]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x13c4, Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x13d0, Size: 12]
	<STExtraPlayerState*,int> PlayerLastDamageTime;//[Offset: 0x13dc, Size: 60]
	int MaxRecordOvertimeAssistTime;//[Offset: 0x1418, Size: 4]
	float LastDamageTime;//[Offset: 0x141c, Size: 4]
	float OutOfContestConfig;//[Offset: 0x1420, Size: 4]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x1424, Size: 4]
	bool AttackerNeedReceiveDamageRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428, Size: 1]
	float PickUpRadius;//[Offset: 0x142c, Size: 4]
	bool bSyncCameraByChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1430, Size: 1]
	SimLocalViewData SimulateViewData;//[Offset: 0x1434, Size: 16]
	SimViewData NetSimulateViewData;//[Offset: 0x1444, Size: 6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1458, Size: 1]
	AnchorPlatData AnchorPlat;//[Offset: 0x145c, Size: 8]
	bool bShouldIgnorePVSTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153c, Size: 1]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1540, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1568, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x157c, Size: 12]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x1588, Size: 12]
	bool bCanSwitchToSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1594, Size: 1]
	float MaxDispalyFootprintDistance;//[Offset: 0x1598, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x159c, Size: 12]
	Vector DefaultMeshLoc;//[Offset: 0x15a8, Size: 12]
	InteractiveMoveActor* CurrentInteractiveMoveActor;//[Offset: 0x15b4, Size: 4]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x15b8, Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x15bc, Size: 4]
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x15c0, Size: 4]
	class AnimInstance* AvatarAnimClassCache;//[Offset: 0x15c4, Size: 4]
	bool IsNetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c8, Size: 1]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c9, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x15cc, Size: 4]
	float EmoteAnimLastTime;//[Offset: 0x15d0, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x15d4, Size: 12]
	delegate EmoteReadyToPlayNext;//[Offset: 0x15e0, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x15ec, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x15f8, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x1608, Size: 40]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1630, Size: 1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x1634, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x1638, Size: 4]
	bool bEnablePlayerPickUpAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1654, Size: 1]
	bool bEnablePlayerDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1655, Size: 1]
	bool bRecordKillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1656, Size: 1]
	float AIThrowPitch;//[Offset: 0x1658, Size: 4]
	Vector2D AISpeedScale;//[Offset: 0x165c, Size: 8]
	bool bValidCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1664, Size: 1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x1668, Size: 60]
	<int,enum> PawnStateRelatedBuffIDMap;//[Offset: 0x16a4, Size: 60]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x16e0, Size: 12]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ec, Size: 1]
	float ForceSyncMovementStateDeltaTime;//[Offset: 0x16f0, Size: 4]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f9, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x16fc, Size: 4]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x1700, Size: 12]
	float LastSyncHealthChange;//[Offset: 0x170c, Size: 4]
	Vector CurInputVector;//[Offset: 0x1710, Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0x171c, Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x172c, Size: 4]
	float voiceCheckCD;//[Offset: 0x1730, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x1734, Size: 4]
	float VoiceCheckDis;//[Offset: 0x1738, Size: 4]
	float voiceCheckDisInParachute;//[Offset: 0x173c, Size: 4]
	bool voiceCheckInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1740, Size: 1]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x1744, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x1760, Size: 60]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x179c, Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x17ac, Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0x17b0, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x17b4, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x17b8, Size: 4]
	int HandFolderRatio;//[Offset: 0x17bc, Size: 4]
	float SwimUpRate;//[Offset: 0x17c0, Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x17c4, Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c9, Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ca, Size: 1]
	WeaponRecordDataForReplay WeaponRecordDataForReplay;//[Offset: 0x17d4, Size: 12]
	bool SkipCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e0, Size: 1]
	bool bIsOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e1, Size: 1]
	float UpdateAIPawnInfoTime;//[Offset: 0x17e4, Size: 4]
	PickUpItemData[] CacheDropList;//[Offset: 0x17ec, Size: 12]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f8, Size: 1]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f9, Size: 1]
	bool bForceDiffStateOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17fa, Size: 1]
	Vector MoveInputState;//[Offset: 0x182c, Size: 12]
	byte MovementInputReplication;//[Offset: 0x1838, Size: 1]
	float SwitchPoseCD;//[Offset: 0x185c, Size: 4]
	float SwitchPoseStartTime;//[Offset: 0x1860, Size: 4]
	float SwitchPerspectiveStartTime;//[Offset: 0x1864, Size: 4]
	bool bHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1880, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x1898, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x18a0, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x18b0, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x18e0, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1928, Size: 4]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x192c, Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1930, Size: 4]
	float DelayHideDuration;//[Offset: 0x1934, Size: 4]
	float DelayResetStandDuration;//[Offset: 0x1938, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x193c, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1940, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x1944, Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1960, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1964, Size: 192]
	AnimParamList CurAnimParamList;//[Offset: 0x1a24, Size: 304]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1b54, Size: 180]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x1c08, Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x1c38, Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x1c58, Size: 32]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x1c78, Size: 12]
	byte ThrowGrenadeMode;//[Offset: 0x1c84, Size: 1]
	bool bShowHPFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c94, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c95, Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c96, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x1c98, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca0, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1ca4, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1ca8, Size: 4]
	float HighWalkSpeed;//[Offset: 0x1cc0, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1cc4, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x1cc8, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1ccc, Size: 4]
	float MaxProneSpeed;//[Offset: 0x1cd0, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1cd4, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x1cd8, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1cdc, Size: 4]
	float HealthPredict;//[Offset: 0x1ce0, Size: 4]
	float BreathAmount;//[Offset: 0x1ce4, Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce8, Size: 1]
	int PoisonSmogStage;//[Offset: 0x1cec, Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1cf0, Size: 4]
	float AntidoteExeTime;//[Offset: 0x1cf4, Size: 4]
	float AntidoteMaxTime;//[Offset: 0x1cf8, Size: 4]
	float SpeedDynamicScale;//[Offset: 0x1cfc, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1d00, Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1d04, Size: 12]
	byte HealthStatus;//[Offset: 0x1d10, Size: 1]
	byte LastHealthStatus;//[Offset: 0x1d11, Size: 1]
	delegate OnHealthStatusChangeDelegate;//[Offset: 0x1d14, Size: 12]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x1d20, Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5c, Size: 1]
	float SpeedRate;//[Offset: 0x1d60, Size: 4]
	float EnergySpeedScale;//[Offset: 0x1d64, Size: 4]
	float RecoveryScale;//[Offset: 0x1d68, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x1d6c, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x1d70, Size: 4]
	float SwitchWeaponSpeedScale;//[Offset: 0x1d74, Size: 4]
	BackpackReplayData BackpackReplayData;//[Offset: 0x1d78, Size: 28]
	CharacterEnergyData Energy;//[Offset: 0x1d94, Size: 52]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x1dc8, Size: 12]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd4, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1dd8, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1ddc, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1de0, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x1de4, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1dec, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1df0, Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x1df8, Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dfc, Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x1e00, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1e04, Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1e08, Size: 4]
	float StandHalfHeight;//[Offset: 0x1e0c, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x1e10, Size: 4]
	float ProneHalfHeight;//[Offset: 0x1e14, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1e18, Size: 4]
	float StandRadius;//[Offset: 0x1e1c, Size: 4]
	float DyingRadius;//[Offset: 0x1e20, Size: 4]
	float DyingBeCarriedRadius;//[Offset: 0x1e24, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x1e28, Size: 12]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x1e34, Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x1e40, Size: 4]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e50, Size: 1]
	delegate InAssistantStateDelegate;//[Offset: 0x1e54, Size: 12]
	Actor* CurrentAttachParent;//[Offset: 0x1e60, Size: 8]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e68, Size: 1]
	RepVehicleAttachment VehicleReplication;//[Offset: 0x1e70, Size: 24]
	RepVehicleAttachment CurrentVehicleAttachment;//[Offset: 0x1e88, Size: 24]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x1ea4, Size: 4]
	float LastVehicleDamageCD;//[Offset: 0x1ea8, Size: 4]
	float LastLeaveVehicleTime;//[Offset: 0x1eac, Size: 4]
	int VehicleSeatIdx;//[Offset: 0x1eb0, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eba, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x1ebc, Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed8, Size: 1]
	PredictLineComponent* PredictLineComp;//[Offset: 0x1edc, Size: 4]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x1ee0, Size: 4]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x1ee4, Size: 4]
	delegate OnAttachedToVehicle;//[Offset: 0x1ef8, Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x1f04, Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x1f10, Size: 12]
	delegate OnPlayerStateUpdated;//[Offset: 0x1f1c, Size: 12]
	float MaxLeaveVehicleVelocity;//[Offset: 0x1f34, Size: 4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x1f44, Size: 12]
	Rotator AngledSightRotOffset;//[Offset: 0x1f50, Size: 12]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x2060, Size: 4]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2064, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x2068, Size: 4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x2084, Size: 60]
	STParachuteState STReplicateParchuteState;//[Offset: 0x20c0, Size: 24]
	SlideMoveData SlideMoveData;//[Offset: 0x20d8, Size: 20]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x20ec, Size: 4]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x20f0, Size: 32]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2110, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x2114, Size: 4]
	float MoveRightInputValue;//[Offset: 0x2118, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211c, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x2120, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2124, Size: 1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2125, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2128, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x212c, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x2134, Size: 4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x2138, Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x2144, Size: 4]
	enum FollowState;//[Offset: 0x2148, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x214c, Size: 12]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x2158, Size: 12]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x2164, Size: 12]
	FString LatestInviter;//[Offset: 0x2170, Size: 12]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x217c, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x21c0, Size: 4]
	float maxShowAlpha;//[Offset: 0x21c8, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x21cc, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x21d0, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x21d4, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x2200, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x2204, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x2208, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224c, Size: 1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x225c, Size: 12]
	float CollectPlayerRouteInterval;//[Offset: 0x226c, Size: 4]
	int IsEnableReportRoute;//[Offset: 0x22f0, Size: 4]
	int CurrentPlayEmoteId;//[Offset: 0x22f8, Size: 4]
	Vector EmoteColBox;//[Offset: 0x2338, Size: 12]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x2344, Size: 60]
	int IsEnableLogAIPlayerPos;//[Offset: 0x2388, Size: 4]
	float CompVisionOpDis;//[Offset: 0x238c, Size: 4]

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	delegate CharacterAnimEventDelegate;//[Offset: 0x8e8, Size: 12]
	delegate CharacterCommonEventDelegate;//[Offset: 0x8f4, Size: 12]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0x928, Size: 12]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0x934, Size: 12]
	delegate OnPreTakeDamageDynamicDelegate;//[Offset: 0x940, Size: 12]
	delegate OnClientPushDamageEvent;//[Offset: 0x94c, Size: 12]
	float Health;//[Offset: 0x9d0, Size: 4]
	float HealthMax;//[Offset: 0x9d4, Size: 4]
	int[] TypeIds;//[Offset: 0x9d8, Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0x9e4, Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e8, Size: 1]
	bool bAIIgnore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e9, Size: 1]
	float threatenValue;//[Offset: 0x9ec, Size: 4]
	float HurtParticleOffset;//[Offset: 0x9f0, Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0x9fc, Size: 12]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xa08, Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0xa0c, Size: 8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0xa14, Size: 8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0xa1c, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xa20, Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 1]
	FString CharacterStateType;//[Offset: 0xa2c, Size: 12]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 1]
	FString BehaviorServiceDebugInfo;//[Offset: 0xa78, Size: 12]
	FString ServiceDebugInfoForShow;//[Offset: 0xa84, Size: 12]
	int DebugInfoDetailLv;//[Offset: 0xa90, Size: 4]
	delegate OnHandleSkillStartDelegate;//[Offset: 0xa94, Size: 12]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xaa0, Size: 12]
	float SkillPromptStartTime;//[Offset: 0xaac, Size: 4]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0xab4, Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xab8, Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xabc, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xac0, Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xac4, Size: 4]
	delegate StateEnterHandler;//[Offset: 0xac8, Size: 12]
	delegate StateLeaveHandler;//[Offset: 0xad4, Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0xaec, Size: 12]
	delegate OnSimulateCharacterStatesChange;//[Offset: 0xaf8, Size: 12]
	uint64 CurrentStates;//[Offset: 0xb18, Size: 8]
	uint64 DisabledStates;//[Offset: 0xb20, Size: 8]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xb28, Size: 12]
	float RencentStatesValidRange;//[Offset: 0xb34, Size: 4]
	<float,uint64> RencentStatesMap;//[Offset: 0xb38, Size: 60]
	delegate OnPawnStateDisabled;//[Offset: 0xb74, Size: 12]
	delegate OnPawnStateEnabled;//[Offset: 0xb80, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xb8c, Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0xb98, Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9d, Size: 1]
	TurnAroundViewComponent* TurnAroundViewComp;//[Offset: 0xba4, Size: 4]
	byte TeamNum;//[Offset: 0xbac, Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0xbb0, Size: 4]
	float SpeedScale;//[Offset: 0xbbc, Size: 4]
	float SpeedValue;//[Offset: 0xbc0, Size: 4]
	float Temperature;//[Offset: 0xbc4, Size: 4]
	float TemperatureMax;//[Offset: 0xbc8, Size: 4]
	float TemperatureMin;//[Offset: 0xbcc, Size: 4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdc, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdd, Size: 1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0xbe4, Size: 4]
	float VehicleDetailedTraceDist;//[Offset: 0xbe8, Size: 4]
	float SpringArmTraceDist;//[Offset: 0xbec, Size: 4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0xbf0, Size: 60]
	ActivitySyncData ActicitySyncData;//[Offset: 0xc2c, Size: 28]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 1]
	void StopCurrentLevelSequence();// 0x446e168
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x373d908
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x373d844
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x373d770
	void S2C_InterruptState(int StateID, int InterruptedBy);// 0x373d6ac
	void RPC_Client_SetServiceDebugInfo(FString Info);// 0x373d5e8
	void RPC_Client_SetIsMLAI(bool InIsMLAI);// 0x373d560
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x373d4e0
	void ResetPawnStateDisabled(enum State);// 0x373d468
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x373d358
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x373d200
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x373d0dc
	void RemoveBaseBuffSystemComponent();// 0x373d0c8
	void PlayLevelSequenceByPathAndBindingInfo(FString SequenceActorPath, FString LevelSequencePath, out const <FString,FString> TrackBindingInfo, float TimeOffset);// 0x446e168
	void PlayLevelSequenceByPath(FString SequenceActorPath, FString LevelSequencePath, float TimeOffset);// 0x446e168
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x373cf68
	void OnRep_UnmannedVehicleSyncData();// 0x36fb62c
	void OnRep_Temperature(float LastValue);// 0x36fb534
	void OnRep_HealthMax();// 0x36fb1f0
	void OnRep_Health(float PrevHealth);// 0x336b494
	void OnRep_DisabledStates(uint64 prevStates);// 0x373cee4
	void OnRep_CurrentStates(uint64 prevStates);// 0x36fb0a4
	void OnRep_ActivitySyncData();// 0x373ced0
	void OnLeaveStateForBp(enum State);// 0x446e168
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x446e168
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x446e168
	void OnEnterStateForBp(enum State);// 0x446e168
	void LeaveState(enum State);// 0x36f8da4
	bool IsPawnStateDisabledByWeapon(STExtraWeapon* Weapon, enum State);// 0x373ce04
	bool IsPawnStateDisabled(enum State);// 0x373cd84
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x373cce0
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x373cc3c
	bool IsAlive();// 0x36f7eb8
	bool HasState(enum State);// 0x36f79e4
	bool HasRencentState(enum State);// 0x373cbb4
	bool HasBuffID(int BuffID);// 0x373cb2c
	bool HasBuff(FName BuffName);// 0x373caa4
	STExtraVehicleBase* GetUnmannedVehicle();// 0x373ca88
	UTSkillManagerComponent* GetSkillManager();// 0x373ca58
	float GetScaledSpeed();// 0x373ca28
	FString GetPlayerNameSafety();// 0x36f631c
	STExtraPlayerController* GetPlayerControllerSafety();// 0x36f61dc
	enum GetObserverType();// 0x373c9f8
	enum[] GetDamageableGameObjectType();// 0x373c930
	STExtraVehicleBase* GetCurrentVehicle();// 0x36f54a4
	float GetBuffExpiry(FName BuffName);// 0x373c8a8
	float GetBuffDuration(int InstID, int CauseSkillID);// 0x373c7dc
	UAEBlackboard* GetBuffBlackboard(int BuffID);// 0x373c75c
	void FillBuffBlackboard(int BuffID, UAEBlackboardParameter[] ParamList);// 0x373c5d4
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamagetType);// 0x373c494
	int ExtractDamageAdditionType(out const DamageEvent DamageEvent, Actor* DamagetCauser);// 0x373c3a8
	bool EnterState(enum State);// 0x36f3818
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x373c328
	void DelayHidden();// 0x36f31f0
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x373c264
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x373c090
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x373bf44
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x373bdf8
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x373bc14
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x373b9e8
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x373b844
	void ClearBuff();// 0x33dbe7c
	bool ChangeBuffDuration(int InstID, float Duration);// 0x373b778
	bool CanBeAttackedByWeapon(int WeaponID);// 0x373b6f0
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser, byte DamageEventType);// 0x446e168
	void BPOnRespawned();// 0x446e168
	void BPOnRecycled();// 0x446e168
	bool AllowState(enum State, bool withLog);// 0x36ea45c
	void AddEntryEventTokenByID(int SkillID);// 0x373b678
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer, int Level);// 0x373b520
	int AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID, int Level);// 0x373b380
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x373b1dc

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x668, Size: 4]
	FName RepPropertyCategory;//[Offset: 0x670, Size: 8]
	FName PlayerType;//[Offset: 0x678, Size: 8]
	FString PlayerName;//[Offset: 0x680, Size: 12]
	FString Nation;//[Offset: 0x68c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x698, Size: 4]
	FString PlayerUID;//[Offset: 0x69c, Size: 12]
	FString MLAIPlayerUID;//[Offset: 0x6a8, Size: 12]
	int TeamID;//[Offset: 0x6b4, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	int CampID;//[Offset: 0x6bc, Size: 4]
	int resID;//[Offset: 0x6c0, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x6c4, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x6c8, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x6d4, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x704, Size: 28]
	int planeAvatarId;//[Offset: 0x720, Size: 4]
	int DyeDebugFlag;//[Offset: 0x724, Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x728, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x736, Size: 1]
	float DestinyValue;//[Offset: 0x738, Size: 4]
	float RatingScore;//[Offset: 0x748, Size: 4]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74d, Size: 1]
	FString LuaFilePath;//[Offset: 0x75c, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x768, Size: 60]
	void SetNetCullDistanceSquared(float fNetCullDistanceSquared);// 0x3348480
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x3ec06b4
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x3ec0578
	void OnRep_UseWholeModel();// 0x3ec0564
	void OnRep_TeamID();// 0x3ec0550
	void OnRep_PlayerUID();// 0x3ec053c
	void OnRep_PlayerKey();// 0x36fb314
	void OnRep_MLAIPlayerUID();// 0x3ec0528
	void OnRep_CampID();// 0x3ec0514
	bool IsDefaultCharType();// 0x36f83cc
	int GetTeamId();// 0x3ec04f8
	FString GetPlayerKey();// 0x3ec0438
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x3ec0370
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x3ec02a8
	ActorComponent*[] GetNonSimulatedComponents();// 0x3ec01e0
	ActorComponent*[] GetNonDedicatedComponents();// 0x3ec0118
	PrimitiveComponent* GetMovementBaseComponent();// 0x3ec00f0
	int GetCampId();// 0x3ec00c8
	void ClientAcknowledgeReconnection(uint32 Token);// 0x3ec0048

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x448, Size: 4]
	class AnimInstance[] CharacterInVehicleAnimBPs;//[Offset: 0x44c, Size: 12]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	enum VehicleType;//[Offset: 0x45a, Size: 1]
	enum VehicleShapeType;//[Offset: 0x45b, Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x460, Size: 24]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x478, Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x490, Size: 4]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x498, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x4c0, Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x4c4, Size: 60]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x500, Size: 60]
	Texture2D* VehicleIcon;//[Offset: 0x53c, Size: 4]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x544, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x548, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x550, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	bool bCanHandBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x555, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x558, Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55d, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55e, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x560, Size: 4]
	bool bLockZeroAngular;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x568, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 1]
	int MainMaterialIndex;//[Offset: 0x570, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x574, Size: 12]
	bool ShowVehicleEnterButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bStopAnimWhenDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 1]
	Vector AirDropVelocity;//[Offset: 0x584, Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x590, Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x598, Size: 8]
	float AirdropOvertime;//[Offset: 0x5a0, Size: 4]
	delegate OnVehicleStartAirdrop;//[Offset: 0x5a4, Size: 12]
	delegate OnVehicleEndAirdrop;//[Offset: 0x5b0, Size: 12]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	bool bHasBeenCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 1]
	bool bEnableBuffComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5be, Size: 1]
	bool bEnableAttrModifyComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bf, Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 1]
	float BackpackCapacity;//[Offset: 0x5c4, Size: 4]
	FName BackpackName;//[Offset: 0x5c8, Size: 8]
	int[] marr_MidIndexes;//[Offset: 0x5d0, Size: 12]
	float EnterVehicleCameraBlendTime;//[Offset: 0x5dc, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x5e0, Size: 4]
	bool bEnableVehicleSteeringCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x5e8, Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	float StaticForceFixInterval;//[Offset: 0x5f0, Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 1]
	int[] SwitchSeatWithItemTypeList;//[Offset: 0x600, Size: 12]
	Vector[] RouteList;//[Offset: 0x60c, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x618, Size: 12]
	int AutoDrive_CurrentTargetWaypointIdx;//[Offset: 0x624, Size: 4]
	Vector AutoDriverTargetPosition;//[Offset: 0x628, Size: 12]
	Vector AutoDriverStartPosition;//[Offset: 0x634, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x640, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x64c, Size: 12]
	delegate OnSeatChange;//[Offset: 0x658, Size: 12]
	delegate OnStartResolveStuck;//[Offset: 0x664, Size: 12]
	delegate OnEndResolveStuck;//[Offset: 0x670, Size: 12]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	FString LuaFilePath;//[Offset: 0x680, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x68c, Size: 60]
	bool bEnableVoiceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	float voiceCheckCD;//[Offset: 0x6cc, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x6d0, Size: 4]
	float VoiceCheckDis;//[Offset: 0x6d4, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x6d8, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x6dc, Size: 4]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f5, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x6f8, Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	bool CanPushUpCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd, Size: 1]
	bool CanSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fe, Size: 1]
	uint16 ReplicatedFuelRatio;//[Offset: 0x700, Size: 2]
	ParticleSystem* ParticleExplosion;//[Offset: 0x738, Size: 4]
	enum VehicleHealthState;//[Offset: 0x73c, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73d, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73e, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73f, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x744, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x750, Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x754, Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x758, Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x75c, Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x760, Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x764, Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x768, Size: 4]
	<VehicleComponent*> TickedComponents;//[Offset: 0x76c, Size: 60]
	VehicleComponent*[] WeakTickedComponents;//[Offset: 0x7a8, Size: 12]
	bool bClearComponentTickWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 1]
	float EnActiveTimeThreshold;//[Offset: 0x7bc, Size: 4]
	float FreezeVehicleThreshold;//[Offset: 0x7c0, Size: 4]
	bool bFreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 1]
	float VehicleHitThreshold;//[Offset: 0x7dc, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x7e0, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x7f0, Size: 4]
	int EnableTickEffectsDevciveLevel;//[Offset: 0x7f4, Size: 4]
	float EffectUpdateInterval;//[Offset: 0x7fc, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x800, Size: 12]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80d, Size: 1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80e, Size: 1]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80f, Size: 1]
	float lastForwardSpeed;//[Offset: 0x810, Size: 4]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x814, Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x820, Size: 12]
	delegate OnClientChangeVehicleSeatEvent;//[Offset: 0x82c, Size: 12]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	bool bEnableEnterDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83a, Size: 1]
	float VehicleEnterDistance;//[Offset: 0x83c, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x840, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x844, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x852, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x854, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x858, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x864, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x868, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x86c, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x878, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x884, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x888, Size: 4]
	float PeneTerrainProtectionInterval;//[Offset: 0x894, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x898, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x89c, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x8e0, Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x8e4, Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x8e8, Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x8ec, Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x8f0, Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x8f4, Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x8f8, Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x8fc, Size: 4]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x900, Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x904, Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x908, Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x90c, Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x910, Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x914, Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x918, Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x91c, Size: 4]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0x920, Size: 4]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x924, Size: 4]
	float EngineSfxEndDelayTime;//[Offset: 0x928, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92c, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0x930, Size: 92]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0x98c, Size: 92]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0x9e8, Size: 92]
	AkComponent* SoundComponent;//[Offset: 0xa44, Size: 4]
	float RPMSfxScale;//[Offset: 0xa7c, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0xa80, Size: 4]
	enum VehicleSyncTag;//[Offset: 0xa99, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xa9c, Size: 4]
	delegate OnVehiclePossessed;//[Offset: 0xaa0, Size: 12]
	delegate OnVehicleUnPossessed;//[Offset: 0xaac, Size: 12]
	VehicleSimViewData SimulateViewData;//[Offset: 0xac8, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xacc, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xad0, Size: 4]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad4, Size: 1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xb10, Size: 12]
	delegate OnVehicleHealthDestroy;//[Offset: 0xb1c, Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb28, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xb2c, Size: 4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30, Size: 1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3c, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3d, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xb40, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xb44, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 1]
	float StuckMinImpulse;//[Offset: 0xb70, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xb74, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xb78, Size: 4]
	float StuckResovingTime;//[Offset: 0xb7c, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xb84, Size: 4]
	float StuckResovingTimer;//[Offset: 0xb88, Size: 4]
	float PenePercent;//[Offset: 0xb8c, Size: 4]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xbd4, Size: 4]
	float RespawnTickInterval;//[Offset: 0xbd8, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdc, Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xc6c, Size: 12]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xc78, Size: 12]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xc84, Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc0, Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc8, Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xce0, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xce4, Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xce8, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xd10, Size: 4]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb1, Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb2, Size: 1]
	Vector SeekLockOffset;//[Offset: 0xdb4, Size: 12]
	FName SeekLockSocket;//[Offset: 0xdc0, Size: 8]
	float ProduceSoundInterval;//[Offset: 0xdc8, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xdd0, Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xddc, Size: 4]
	delegate OnEnterVehicle;//[Offset: 0xde0, Size: 12]
	float OverlapCameraShakeInterval;//[Offset: 0xdf4, Size: 4]
	float OverlapDamageRate;//[Offset: 0xdfc, Size: 4]
	float OverlapImpulseRate;//[Offset: 0xe00, Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xe04, Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xe08, Size: 4]
	float MinOverlapSpeed;//[Offset: 0xe0c, Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xe10, Size: 4]
	Vector OverrideOverlapSimpleCharBoxExtent;//[Offset: 0xe14, Size: 12]
	float OverlapVehicleDamageRate;//[Offset: 0xe24, Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xe28, Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xe30, Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xe40, Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xe48, Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xe4c, Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5d, Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0xe60, Size: 4]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0xe64, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xe68, Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xe6c, Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xe70, Size: 12]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xe7c, Size: 12]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xe88, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xe8c, Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe90, Size: 1]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe91, Size: 1]
	int CandidateAvatarID;//[Offset: 0xe94, Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea0, Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0xea4, Size: 4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea8, Size: 1]
	float MaxLinearVelocity;//[Offset: 0xeac, Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	int TeamID;//[Offset: 0xeb4, Size: 4]
	int CampID;//[Offset: 0xeb8, Size: 4]
	float VehicleGoStraight;//[Offset: 0xebc, Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0xec4, Size: 4]
	float ExchangeVehicleSeatInterval;//[Offset: 0xec8, Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0xed0, Size: 12]
	delegate OnControlRotationInit;//[Offset: 0xedc, Size: 12]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xee8, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xeec, Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef1, Size: 1]
	int WeaponReconnectIdx;//[Offset: 0xef4, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xef8, Size: 4]
	enum UAVOperateState;//[Offset: 0xf00, Size: 1]
	float SingleMoveRate;//[Offset: 0xf04, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xf08, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xf20, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0xf38, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xf48, Size: 12]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xf54, Size: 12]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xf68, Size: 8]
	float TombBoxTraceLength;//[Offset: 0xf70, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0xf74, Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf78, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf79, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7a, Size: 1]
	float SleepVehicleTolerance;//[Offset: 0xf7c, Size: 4]
	float StaticFixAngel;//[Offset: 0xf80, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0xf84, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0xf88, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0xf90, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0xf94, Size: 4]
	bool CharacterFollowVehicleViewLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9d, Size: 1]
	int CannotEnterTips;//[Offset: 0xfa0, Size: 4]
	bool CanLeaveVehicleVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa4, Size: 1]
	float LeaveVehicleVelocity;//[Offset: 0xfa8, Size: 4]
	int CannotLeaveTips_HighSpeed;//[Offset: 0xfac, Size: 4]
	int CannotDriveTips;//[Offset: 0xfb0, Size: 4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0xfb8, Size: 12]
	Vector AttachedRelLoc;//[Offset: 0xfc4, Size: 12]
	Actor* AttachedActor;//[Offset: 0xfd0, Size: 4]
	int HasAttachedActorTips;//[Offset: 0xfd4, Size: 4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe0, Size: 1]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0xfe4, Size: 4]
	float LandTraceMaxHeight;//[Offset: 0xfe8, Size: 4]
	FName ChassisBoneName;//[Offset: 0xff0, Size: 8]
	Actor*[] VehicleIgnoreActors;//[Offset: 0xff8, Size: 12]
	bool bNeedPlayVehicleEnterMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1004, Size: 1]
	byte CameraDataType;//[Offset: 0x1005, Size: 1]
	bool bEnableMoveForwardInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1006, Size: 1]
	bool bVehicleSimualetdPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1024, Size: 1]
	FName DecalSocketName;//[Offset: 0x1028, Size: 8]
	IdeaDecalActor*[] DecalActors;//[Offset: 0x1030, Size: 12]
	bool bOptimizeAnimTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 1]
	void WeakTick(float DeltaTime);// 0x3812450
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x38123d8
	void UpdateHeightToLand();// 0x38123c4
	void UnregisterComponentWeakTick(VehicleComponent* InComponent);// 0x381234c
	void UnregisterComponentTick(VehicleComponent* InComponent);// 0x38122d4
	void TickVehicleHealthState();// 0x36fb314
	void TickEnableAvatarOutline();// 0x38122c0
	void StopEngine();// 0x38122a4
	void StopAutoDriving();// 0x3812290
	void StartFireSimple(byte ShootMode);// 0x3812218
	void StartEngine();// 0x38121fc
	void StartAirDrop();// 0x38121e0
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x3812134
	void ShowInteractiveButton(bool bShow);// 0x38120b4
	void ShowBoostingEffect(bool bShow);// 0x446e168
	bool ShouldUseSpecialHitEffect();// 0x33dbf18
	bool ShouldShowVehicleEnterUI();// 0x37e0a7c
	enum ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x3811f98
	void SetWeaponReconnectIdx(int ReconnectOpIndex);// 0x3811f18
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x3811e0c
	void SetVehicleReplicatedFuelRatio(float InFuel);// 0x3811d94
	void SetVehicleMusicPlayState(bool bEnabled);// 0x446e168
	void SetUsingHorn(bool bUse);// 0x3811d14
	void SetUAVOperateState(enum NewState);// 0x3811c9c
	void SetSpawnedInReady(bool bFlag);// 0x3811c20
	void SetSimulatePhysics(bool bSimulate);// 0x3811b98
	void SetRegionBasedNetConsideration(bool bUseRegion);// 0x3811b18
	void SetPhysActive(bool bActive, float Delay);// 0x3811a50
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x38119e0
	void SetHandBrake(float Rate);// 0x37678f0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x381191c
	void SetBoosting(bool bEnalbed);// 0x3767868
	void SetAllowDifferentTeam(bool bAllow);// 0x38118a0
	void SetAirControlF(float Rate);// 0x3811820
	void SetAirControlB(float Rate);// 0x38117a0
	void ServerSetUsingHorn(bool bUse);// 0x38116d8
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x3811610
	void ServerSetBoosting(bool bEnalbed);// 0x3811548
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x38114d0
	void ServerSetAirControlF(float Rate);// 0x381141c
	void ServerSetAirControlB(float Rate);// 0x3811368
	void ServerResetToPosition(Vector NewLocation, Rotator NewRotation);// 0x38112a0
	void ServerDetachEveryoneFromSeat(bool bMustExit, bool bApplyVehicleVelocity);// 0x38111d0
	void SendVehicleInAirChangedTimeToServer();// 0x3811174
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x38110c0
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x381100c
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x360d384
	void SafeSleepVehicle();// 0x3810ff8
	void RestartAntiCheat();// 0x3810fe4
	void ResetJoystickMove();// 0x3810fd0
	void RequestChangeVehicleAvatar();// 0x3810f74
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x3810e64
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x3810d0c
	void RemoveAntiStuckBox();// 0x3810cf8
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x3810c80
	void RegisterComponentWeakTick(VehicleComponent* InComponent);// 0x3810c08
	void RegisterComponentTick(VehicleComponent* InComponent);// 0x3810b90
	void RecordValidTransform();// 0x3810b7c
	void RecordInAirTime();// 0x3810b68
	void ProcessAvatarOutline();// 0x3810b4c
	void PrintStats();// 0x3810b30
	bool PreChangeVehicleFPPAvatar();// 0x3810b08
	bool PreChangeVehicleBrokenAvatar();// 0x3810ae0
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x3810a1c
	void PostLoadFPPMesh();// 0x3810a00
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x3810988
	bool PawnHasState(enum PawnState);// 0x3810900
	bool OverlapTest(out const Transform Transform, PrimitiveComponent* PrimComp, out const Transform PrimCompTransform, bool UseOBB);// 0x3810700
	void OnUserSwitchWeapon(STExtraBaseCharacter* InUser, byte Slot);// 0x381063c
	void OnUpdateEffects();// 0x446e168
	void OnStopFire();// 0x446e168
	void OnSkeletalMeshSleep(PrimitiveComponent* WakingComponent, FName BoneName);// 0x3810580
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x38104c4
	void OnSetTailLightValue(float LightValue);// 0x446e168
	void OnServerReconnectPossess();// 0x38104a8
	void OnServerPlayerChangeVehicleSeat(enum LastSeatType, enum NewSeatType);// 0x446e168
	void OnRep_VehicleSyncFlag();// 0x3810494
	void OnRep_VehicleSimulatedPhysics();// 0x3810480
	void OnRep_VehicleHealthState();// 0x3810464
	void OnRep_TeamID();// 0x3803088
	void OnRep_SimulateViewData();// 0x3810450
	void OnRep_SimulateFreeCameraViewData();// 0x381043c
	void OnRep_ServerLastReplicatedServer();// 0x3810428
	void OnRep_ReplicatedFuelRatio();// 0x3810414
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x3810400
	void OnRep_IsForbidNightVehicle();// 0x38103ec
	void OnRep_IsEngineStarted();// 0x38103d8
	void OnRep_IsBoosting();// 0x38103c4
	void OnRep_IsAirdroppingVehicle();// 0x38103b0
	void OnRep_FrozenStatic();// 0x381039c
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x3810324
	void OnRep_CandidateAvatar();// 0x446e168
	void OnRep_CampID();// 0x3365b48
	void OnRep_AttachedRelLoc();// 0x3810310
	void OnRep_AttachedActor();// 0x38102fc
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x381027c
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character, bool bSuccess);// 0x446e168
	void OnPlayerEnterVehicle(bool IsSuccess, enum SeatType);// 0x446e168
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x3810110
	void OnFireBeginOverlapEvent(Actor* OtherActor);// 0x3810098
	void OnEngineStop();// 0x446e168
	void OnEngineStart();// 0x446e168
	void OnBoostingChanged();// 0x446e168
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x380ffb8
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x380feb8
	void LoadFPPVehicleModel();// 0x380fea4
	bool IsVehicleWarVehicle();// 0x33e77ac
	bool IsVehicleBlockFromExplosion();// 0x380fe74
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm);// 0x380fda8
	bool IsUsingFPPModel();// 0x380fd80
	bool IsUnusable();// 0x380fd50
	bool IsUCAV();// 0x380fd28
	bool IsUAV();// 0x380fcf8
	bool IsSpawnedInReady();// 0x380fcdc
	bool IsSimulatePhysics();// 0x380fcb4
	bool IsNotInWater();// 0x380fc84
	bool IsMotorbike();// 0x380fc5c
	bool IsInMidAir();// 0x380fc2c
	bool IsInBuffSpeedState();// 0x380fc10
	bool IsHelicopter();// 0x380fbe8
	bool IsEntirelyUnderWater();// 0x380fbc0
	bool IsElectronic_Failure();// 0x380fb98
	bool IsDestroyed();// 0x380fb70
	bool IsClient_WeaponOwner();// 0x380fb40
	bool IsCharacterPlayingSeatAnim(STExtraPlayerCharacter* Character);// 0x380fac0
	bool IsBoosting();// 0x380fa90
	bool IsAutoDriving();// 0x380fa68
	bool IsArmedVehicle();// 0x380fa40
	bool IsAmphibiousVehicle();// 0x380fa18
	bool IsAlive();// 0x380f9e8
	bool IsAirVehicle();// 0x380f9b8
	bool IsAirdroppingVehicle();// 0x380f99c
	bool IsAI();// 0x380f96c
	bool IsActiveEffect(FName EffectName);// 0x380f8ec
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x380f7d0
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x380f70c
	bool HasSkillID(int SkillID);// 0x380f68c
	bool HasBuffID(int BuffID);// 0x380f604
	bool HasAutoDriveTarget();// 0x380f5dc
	void HandleVehicleHealthDestroy();// 0x380f5c0
	void HandlePlayerAttachedToVehcicle(STExtraBaseCharacter* Player);// 0x37d56b8
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x377b8b8
	void HandleOnVehicleAvatarDataCopied();// 0x380f5ac
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x380f4a4
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x380f30c
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x380f204
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3801cb4
	void HandleMoveAntiShootVerifyMiss();// 0x380f1e8
	void HandleMeshPhysicsCreated();// 0x380f1d4
	void HandleMeshLodChange(int LODLevel);// 0x380f15c
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x37d5804
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x375e5f0
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x380f0e4
	Actor* GetWeaponUserConst();// 0x380f0b4
	Actor* GetWeaponUser();// 0x380f084
	int GetWeaponReconnectIdx();// 0x380f054
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x380f024
	uint32 GetWeaponOwnerPlayerKey();// 0x380eff4
	float GetWeaponOwnerPawnHealth();// 0x380efc4
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x380ef94
	WeaponManagerComponent* GetWeaponManager();// 0x380ef64
	Rotator GetViewRotation();// 0x36f6ca4
	SkeletalMeshComponent* GetVehicleWheelMesh();// 0x380ef3c
	VehicleShootWeapon* GetVehicleWeapon(int SeatId, int WeaponListID);// 0x380ee78
	VehicleSyncComponent* GetVehicleSync();// 0x380ee5c
	VehicleSpringArmComponent* GetVehicleSpringArm();// 0x380ee34
	int GetVehicleSkinItemID();// 0x380ee0c
	VehicleSeatComponent* GetVehicleSeats();// 0x380edf0
	float GetVehicleReplicatedFuelRatio();// 0x380edc8
	float GetVehicleOriginToLand();// 0x380ed98
	VehicleDamageComponent* GetVehicleDamage();// 0x380ed7c
	VehicleCommonComponent* GetVehicleCommon();// 0x380ed60
	Vector GetVehicleCenter();// 0x380ed10
	VehicleAvatarComponent* GetVehicleAvatar();// 0x380ece8
	VehicleAIComponent* GetVehicleAIComponent();// 0x380eccc
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x380eca4
	bool GetUsingHorn();// 0x380ec7c
	int GetTeamId();// 0x380ec54
	MaterialInstanceDynamic* GetTailLightDIM();// 0x380ec2c
	AkComponent* GetSoundComponent();// 0x380ec04
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x3467600
	Vector GetRotationInputDir();// 0x36d048c
	float GetReloadAllWeaponTime();// 0x380ebdc
	Actor*[] GetQueryIgnoreActors();// 0x380eb14
	Rotator GetPhysicsBoundsRotation(bool IsOBB);// 0x380ea7c
	Vector GetPhysicsBoundsExtent(bool IsOBB);// 0x380e9e4
	Vector GetPhysicsBoundsCenter(bool IsOBB);// 0x380e94c
	float GetMoveRightRate();// 0x380e930
	float GetMoveForwardRate();// 0x380e914
	SkeletalMeshComponent* GetMesh();// 0x380e8f8
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x380e8c8
	BattleItemHandleBase* GetItemHandle();// 0x380e8ac
	bool GetIsPhysSleep();// 0x380e87c
	bool GetIsOpenVertify();// 0x380e860
	float GetHandBrakeRate();// 0x380e844
	Vector GetGunOwnerHeadLocation();// 0x380e7f4
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x380e7cc
	float GetForwardSpeed();// 0x35b78e4
	STExtraPlayerCharacter* GetFirstPassenger();// 0x380e7a4
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x380e77c
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x380e74c
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x380e730
	STExtraPlayerCharacter* GetDriver();// 0x380e708
	uint64 GetCurrentStatesInterface();// 0x380e6d8
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x380e60c
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x380e480
	Vector2D GetCharacterViewLimit(STExtraBaseCharacter* Character);// 0x380e3f8
	class AnimInstance GetCharacterInVehicleAnimBP(int SeatId);// 0x380e378
	int GetCampId();// 0x380e350
	BuoyancyForceComponent* GetBuoyancyForce();// 0x380e334
	Vector GetBoxExtent();// 0x380e2ec
	int GetAvatarId();// 0x380e2c4
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x380e1f8
	void GetAllSkeletalMeshList(out SkeletalMeshComponent*[] OutList);// 0x380e12c
	void ExitFPPVehicle();// 0x380e118
	void EnterFPPVehicle();// 0x380e0fc
	void EnablePlayMusic(bool InEnable);// 0x380e080
	void EnableMoveForwardInput(bool InEnable);// 0x380e000
	void EnableAvatarOutline(enum OutlineType);// 0x380df88
	void DestroyAndRespawnSelf();// 0x380df74
	void DeactiveEffect(FName EffectName);// 0x380defc
	void CreateAntiStuckBox();// 0x380dee8
	void CorrectControlRotation(Rotator NewRotation);// 0x380de70
	void ClientPlayVehicleCameraShake();// 0x380de14
	void ClientFeedbackPointDamage(Actor* DamageCauser);// 0x380dd60
	void ClearInputs();// 0x380dd4c
	void ClearDecals();// 0x380dd38
	void ClearBuff();// 0x380dd1c
	void ClearAllInputState();// 0x380dd00
	void ClearAllComponentWeakTick();// 0x380dcec
	void ClearAllComponentTick();// 0x380dcd8
	bool CheckHaveSpecialAttachActor();// 0x37fbce8
	void CheckEnableAvatarOutline();// 0x446e168
	bool CheckAllWeaponIsReadyForFire();// 0x380dcb0
	void ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x380dc30
	void ChangeAssetBy(BackpackVehicleAvatarHandle* InAvatarHandle);// 0x380dbb8
	bool CanVehicleJump();// 0x3579ac4
	bool CanPushUpCharacterWhenPenetrating();// 0x380db9c
	bool CanLeaveVehicle();// 0x36dd560
	bool CanDrive(STExtraPlayerCharacter* Character);// 0x380db14
	bool CanCharacterEnterVehicle(STExtraPlayerCharacter* InCharacter, enum SeatType);// 0x380da48
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x380d9c0
	bool CanAutoDrivingNoDriver();// 0x380d998
	bool CanAutoDriving();// 0x380d970
	void CalcPhysicsBounds(out Vector OutLocation, out Rotator OutRotation, out const Transform NewVehicleTM, bool IsOBB);// 0x380d7a0
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x380d6d0
	void BroadcastClientVehicleExplosionEffect();// 0x380d6b4
	void BPPostLoadFPPMesh();// 0x446e168
	void BPPlayOverlapDamageCameraShake();// 0x446e168
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x380d634
	void AutoLoadEffect();// 0x380d620
	void ApplyVehicleImpulse(out const Vector ApplyImpulse, bool bVelocityChange);// 0x380d544
	bool ApplyAnimation();// 0x380d51c
	void AfterBeginPlay();// 0x446e168
	void AddHealthSafety(float AddVal);// 0x380d49c
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer, int Level);// 0x380d344
	int AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID, int Level);// 0x380d1a4
	void ActiveEffectAsync(FName EffectName);// 0x380d12c
	void ActiveEffect(FName EffectName);// 0x380d0b4

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ValidDeviceLevel;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	float VaildExitVehicleHeight;//[Offset: 0x14c, Size: 4]
	STExtraVehicleSeat[] Seats;//[Offset: 0x150, Size: 12]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x15c, Size: 12]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x168, Size: 12]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x174, Size: 12]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x180, Size: 12]
	delegate OnSeatOccupiersChanged;//[Offset: 0x18c, Size: 12]
	delegate OnSeatSocketChanged;//[Offset: 0x198, Size: 12]
	delegate OnVehicleWeaponRep;//[Offset: 0x1a4, Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x1b0, Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x1bc, Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0x1c8, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bCheckLeaveLocationSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	float LeaveLocationSpaceInflation;//[Offset: 0x1d0, Size: 4]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bHidenCharacterOnSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	bool bCanChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d6, Size: 1]
	enum[] SeatGUITypes;//[Offset: 0x1e0, Size: 12]
	delegate OnPlayEnterVehicleAnim;//[Offset: 0x1ec, Size: 12]
	delegate OnPlayExitVehicleAnim;//[Offset: 0x1f8, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x204, Size: 12]
	delegate OnSeatDetachedBefore;//[Offset: 0x210, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x21c, Size: 12]
	delegate OnSeatChanged;//[Offset: 0x228, Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x234, Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x240, Size: 12]
	delegate OnDriverChange;//[Offset: 0x24c, Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x258, Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x268, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x270, Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x278, Size: 4]
	bool bShowSeatUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	void VehicleWeaponRepDelegate__DelegateSignature();// 0x446e168
	void TestReleaseSeatAnim();// 0x38d5c40
	void SeatOccupiersChangedDelegate__DelegateSignature();// 0x446e168
	void ReAttachAllCharacters();// 0x38d5c2c
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x38d5b70
	void OnSeatSocketChanged__DelegateSignature();// 0x446e168
	void OnRep_VehicleWeapons();// 0x38d5b5c
	void OnRep_Occupiers();// 0x38d5b48
	void OnRep_Attachments();// 0x38d5b34
	void OnDeleyReleaseWeapon(STExtraPlayerCharacter* Character, int SeatIdx);// 0x38d5a78
	bool IsSeatIndexAvailable(int SeatIndex);// 0x38d59f8
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x38d5978
	bool IsSeatAvailable(enum SeatType);// 0x38d58f8
	bool IsDriver(STExtraBaseCharacter* InCharacter);// 0x38d5878
	bool IsCharacterControlWeapon(STExtraPlayerCharacter* InCharacter);// 0x38d57f8
	bool HasCharacter(const STExtraBaseCharacter* Character);// 0x38d5778
	int GetSeatNum();// 0x3747564
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x38d5570
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x38d54e4
	int GetInUseSeatNum();// 0x38d54bc
	STExtraBaseCharacter* GetFirstSeatCharacterBySeatType(enum SeatType);// 0x38d543c
	STExtraPlayerCharacter* GetFirstPassenger();// 0x38d5414
	int GetDriverSeatIndex();// 0x38d53ec
	STExtraPlayerCharacter* GetDriver();// 0x38d53c4
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x38d5344
	int GetAvailableSeatIndex(enum SeatType);// 0x38d52c4
	void DetachEveryoneSafely();// 0x3365b48
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x38d51c8
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x38d5104
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x38d4fc0
	void ChangeCharacterSeatSocket(out const FName[] InSeatSockets);// 0x38d4ef4
	bool CanChangeSeat(const STExtraBaseCharacter* InCharacter, int NewSeatIndex, out int FailedTips);// 0x38d4df8

--------------------------------
Class: VehicleComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	bool bHasUpPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bHasDownPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	byte OccupyMovementMode;//[Offset: 0x22, Size: 1]
	enum HoldWeaponType;//[Offset: 0x23, Size: 1]
	enum SeatSpecialType;//[Offset: 0x24, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x28, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x2c, Size: 4]
	Vector2D ViewPitchLimit;//[Offset: 0x30, Size: 8]
	Rotator CharRotVsVehiRot;//[Offset: 0x38, Size: 12]
	enum SeatSideType;//[Offset: 0x44, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x48, Size: 12]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x58, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float Radius;//[Offset: 0x64, Size: 4]
	float HalfHeight;//[Offset: 0x68, Size: 4]
	Transform CollisionOffset;//[Offset: 0x70, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float OnSeatCameraSpringArmLength;//[Offset: 0xa4, Size: 4]
	Vector2D CharacterPitchLimit;//[Offset: 0xa8, Size: 8]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 4]
	Vector2D ViewYawLimit;//[Offset: 0xc, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x14, Size: 8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float MuzzleDirTor;//[Offset: 0x20, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x28, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x30, Size: 28]
	float DistTorSquared;//[Offset: 0x4c, Size: 4]
	bool UseByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int VehicleWeaponParentIndex;//[Offset: 0x54, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	delegate OnVehWeaponUseStateChange;//[Offset: 0xf90, Size: 12]
	float RotateSpeedOnVehicle;//[Offset: 0xf9c, Size: 4]
	bool bDoWeaponYawOnComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa0, Size: 1]
	bool bDoWeaponRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa1, Size: 1]
	float WeaponRotationLagYawThreshold;//[Offset: 0xfa4, Size: 4]
	float WeaponRotationLagPitchThreshold;//[Offset: 0xfa8, Size: 4]
	bool bUseWeaponRotationLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfac, Size: 1]
	bool bEquipOnDriversSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfad, Size: 1]
	float WeaponRotationLagMaxTimeStep;//[Offset: 0xfb0, Size: 4]
	float WeaponRotationLagSpeed;//[Offset: 0xfb4, Size: 4]
	float WeaponRotationScopingScale;//[Offset: 0xfb8, Size: 4]
	float WeaponRotationYawScopingScale;//[Offset: 0xfbc, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc0, Size: 1]
	bool bWeaponStateNotifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc1, Size: 1]
	byte FireMode;//[Offset: 0xfc2, Size: 1]
	enum CameraSpace;//[Offset: 0xfc3, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc4, Size: 1]
	bool bUseOwnerActorView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc5, Size: 1]
	bool bIgnorePawnControlView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc6, Size: 1]
	bool bDebugCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc7, Size: 1]
	FName CameraParentComponentTag;//[Offset: 0xfc8, Size: 8]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0xfd8, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0xfe0, Size: 32]
	bool bUseAnimRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 1]
	float AnimRotationLimitOffset;//[Offset: 0x1004, Size: 4]
	CameraOffsetData OwnerActorViewCameraData;//[Offset: 0x1008, Size: 32]
	Vector2D PitchRange;//[Offset: 0x1028, Size: 8]
	Vector2D YawRange;//[Offset: 0x1030, Size: 8]
	bool bUseSeatLimitCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 1]
	bool bShowCrosshairUsedByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1039, Size: 1]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103a, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0x1040, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0x1048, Size: 4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0x104c, Size: 4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0x1050, Size: 4]
	float VehicleWeaponReloadRate;//[Offset: 0x1054, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x1058, Size: 4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105c, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0x1060, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0x1068, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1071, Size: 1]
	bool bVehicleWeaponUseParentRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1072, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1073, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1074, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1075, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 1]
	bool bSyncVehicleSimulateBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1085, Size: 1]
	bool bEnableSyncShootInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1086, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1087, Size: 1]
	bool bEnableMoveCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1088, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1089, Size: 1]
	float UnEquipTime;//[Offset: 0x108c, Size: 4]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1092, Size: 1]
	FName CharacterSocket;//[Offset: 0x1098, Size: 8]
	float TimeDelayAttachCharacter;//[Offset: 0x10a0, Size: 4]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a4, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a5, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a6, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a7, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a9, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0x10ac, Size: 4]
	FName GrenadePredictLineSocket;//[Offset: 0x10b0, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0x10b8, Size: 4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bc, Size: 1]
	float FuelConsumptionRate;//[Offset: 0x10c0, Size: 4]
	Rotator MuzzleShootDirection;//[Offset: 0x10c8, Size: 12]
	float LastUseTimeStamp;//[Offset: 0x10d4, Size: 4]
	Vector MuzzleShootTarget;//[Offset: 0x10d8, Size: 12]
	Vector2D MuzzleShootTargetOnScreenLoc;//[Offset: 0x10e4, Size: 8]
	Vector4 Limit;//[Offset: 0x10f0, Size: 16]
	Vector2D UIOffset;//[Offset: 0x1100, Size: 8]
	float StartReloadDelayTime;//[Offset: 0x1118, Size: 4]
	float EndReloadDelayTime;//[Offset: 0x1128, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0x112c, Size: 4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1134, Size: 4]
	WeaponSyncData VehicleWeaponSyncData;//[Offset: 0x1138, Size: 8]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x1140, Size: 4]
	WeaponOverHeatingComponent* WeaponOverHeatingComp;//[Offset: 0x1160, Size: 4]
	int BulletTypeTipMsgID;//[Offset: 0x1164, Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0x1168, Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0x116c, Size: 4]
	void StartReloadAnim();// 0x38da9b4
	void SetVehWeaponTickEnabled(bool bEnabled);// 0x38da934
	void SetVehicleWeaponSkin(MaterialInterface* InMaterial);// 0x38da8bc
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x38da7a8
	void SetCameraSpace(enum InCameraSpace);// 0x38da730
	void OnVehicleExplode();// 0x38da714
	void OnRep_VehicleWeaponSyncData();// 0x38da700
	void OnRep_OwnerActorBP();// 0x446e168
	void OnRep_OwnerActor();// 0x38da6ec
	void OnClientVehWeaponUseStateChange__DelegateSignature(STExtraPlayerCharacter* uCharacter, bool bUse);// 0x446e168
	void NetMulticastReturnBullets();// 0x38da690
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x38da534
	void K2_SetSpecialMeshHide(bool isHide);// 0x446e168
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x446e168
	void K2_OnReturnBullets();// 0x446e168
	MeshComponent* K2_GetWeaponMeshComp();// 0x446e168
	void HnadleScopeInAfterReload();// 0x38da520
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x38da464
	void HandleWeaponStartReload();// 0x38da450
	void HandleWeaponEndReload();// 0x38da43c
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x38da3bc
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x38da338
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x38da310
	STExtraVehicleBase* GetOwnerVehicle();// 0x38da2e8
	Rotator GetOwnerCameraRotator();// 0x38da2a0
	Vector2D GetMuzzleShootTargetOnScreen();// 0x38da260
	Transform GetCharacterSocketTransform();// 0x38da200
	void DoVehicleWeaponEquipActionBP(bool bEquip);// 0x446e168
	void DoUsedOrNotBP(STExtraPlayerCharacter* Character, bool bUsed);// 0x446e168
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x38da188
	bool CheckIsAutonomousOrObTarget();// 0x38da160
	void ChangeScopingRotateSpeed(bool IsScoping);// 0x38da0e0
	void AfterReloadEnd();// 0x38da0cc

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x929, Size: 1]
	float voiceCheckCD;//[Offset: 0x92c, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x930, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x934, Size: 1]
	byte[] CanAutoTryingToFireStateList;//[Offset: 0x938, Size: 12]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x95c, Size: 64]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99d, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x9a0, Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x9ac, Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x9b8, Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x9c4, Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x9d0, Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x9dc, Size: 12]
	delegate OnServerWeaponShootDelegate;//[Offset: 0x9e8, Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x9f4, Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xa00, Size: 12]
	delegate OnWeaponReloadReplayDelegate;//[Offset: 0xa0c, Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xa18, Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0xa24, Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xa30, Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0xa3c, Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0xa48, Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0xa54, Size: 12]
	delegate OnReloadScuccessDelegate;//[Offset: 0xa60, Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0xa6c, Size: 12]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0xa78, Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0xa90, Size: 12]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0xa9c, Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0xaa8, Size: 12]
	delegate OnShootWeaponAutoDrop;//[Offset: 0xab4, Size: 12]
	delegate OnWeaponDropStart;//[Offset: 0xac0, Size: 12]
	delegate OnWeaponDropFinished;//[Offset: 0xacc, Size: 12]
	delegate OnBulletLaunch;//[Offset: 0xad8, Size: 12]
	delegate OnBulletImpact;//[Offset: 0xae4, Size: 12]
	delegate OnBulletImpactFX;//[Offset: 0xaf0, Size: 12]
	delegate OnSpawnBulletImpactFX;//[Offset: 0xafc, Size: 12]
	delegate OnChangeShootType;//[Offset: 0xb08, Size: 12]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xb14, Size: 4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xb18, Size: 4]
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xb1c, Size: 4]
	delegate OnScopeIn;//[Offset: 0xb20, Size: 12]
	delegate OnScopeOut;//[Offset: 0xb2c, Size: 12]
	delegate OnScopeInContinue;//[Offset: 0xb38, Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xb44, Size: 4]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0xb48, Size: 4]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0xb4c, Size: 4]
	EnergyAccumulateShootComponent* EnergyAccumulateShootComponent;//[Offset: 0xb50, Size: 4]
	FillGasComponent* FillGasComponent;//[Offset: 0xb54, Size: 4]
	int CurBulletNumInClip;//[Offset: 0xb58, Size: 4]
	BulletInClip CurBulletInClip;//[Offset: 0xb5c, Size: 16]
	int CurMaxBulletNumInOneClip;//[Offset: 0xb6c, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0xb70, Size: 4]
	int DynamicReloadType;//[Offset: 0xb74, Size: 4]
	byte ShootMode;//[Offset: 0xb78, Size: 1]
	byte CurShootType;//[Offset: 0xb79, Size: 1]
	byte LastShootType;//[Offset: 0xb7a, Size: 1]
	int CurShootTotalType;//[Offset: 0xb7c, Size: 4]
	byte SpecialFixShootType;//[Offset: 0xb80, Size: 1]
	float VoiceCheckDis;//[Offset: 0xb84, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0xb88, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0xb8c, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0xb90, Size: 12]
	int AngledSightID;//[Offset: 0xba8, Size: 4]
	byte TraceChannel;//[Offset: 0xbac, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0xbb0, Size: 12]
	float LastImpactEffectTime;//[Offset: 0xbbc, Size: 4]
	int CurBurstShootIndex;//[Offset: 0xbc4, Size: 4]
	Transform BoltActionTransform;//[Offset: 0xbd0, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 1]
	int ClientShootTimes;//[Offset: 0xc04, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xc08, Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xc0c, Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xc10, Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0xc14, Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xc18, Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0xc1c, Size: 4]
	Vector BulletDecalScale;//[Offset: 0xc20, Size: 12]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xc2c, Size: 16]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3d, Size: 1]
	float DropDuration;//[Offset: 0xc40, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xc44, Size: 4]
	float AIShootLoudness;//[Offset: 0xc48, Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0xc4c, Size: 4]
	float AIShootMaxDis;//[Offset: 0xc50, Size: 4]
	float AISilenceShootLoudness;//[Offset: 0xc54, Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xc58, Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0xc5c, Size: 4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	byte CurShootWeaponState;//[Offset: 0xc61, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xc70, Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xc74, Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0xc78, Size: 4]
	enum CurShootIntervalMode;//[Offset: 0xc7c, Size: 1]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7d, Size: 1]
	bool IsEquipACCore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7e, Size: 1]
	bool IsEquipBezel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7f, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc81, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xc84, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xc90, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xc9c, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xca8, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xcb4, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xcc0, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xccc, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0xcd8, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xce4, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xcf0, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xcfc, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xd08, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd14, Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0xd20, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2c, Size: 1]
	bool bBezelUnFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2d, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xd38, Size: 12]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xd44, Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xd48, Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0xd54, Size: 12]
	<int64,int> AttachedAttachmentInstanceID;//[Offset: 0xd60, Size: 60]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xd9c, Size: 12]
	uint32 ShootID;//[Offset: 0xda8, Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xdac, Size: 4]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0xdb0, Size: 12]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc1, Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe70, Size: 1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 1]
	bool bPostFireReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb9, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeba, Size: 1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0xebc, Size: 12]
	float WeaponDurability;//[Offset: 0xec8, Size: 4]
	int8 CurRearSightIndex;//[Offset: 0xecc, Size: 1]
	bool bEquipmentModifierOnlyRepOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed4, Size: 1]
	int UpgradeInfoID;//[Offset: 0xed8, Size: 4]
	uint32[] UpgradeBModifyIdArray;//[Offset: 0xedc, Size: 12]
	bool bUseNewUploadData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 1]
	bool bUseHitDataFlowOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee9, Size: 1]
	ReplayStartFireInfo ReplayStartFireInfo;//[Offset: 0xeec, Size: 44]
	BulletHitInfoUploadDataInReplay[] RepRelpayHitDataArray;//[Offset: 0xf58, Size: 12]
	NextFireMinShootDataInReplay[] NextFireMinShootData;//[Offset: 0xf64, Size: 12]
	NextFireMinShootDataInReplay[] RepNextFireMinShootData;//[Offset: 0xf70, Size: 12]
	void WeaponPartsRender(int WeaponSlotID);// 0x37e5710
	void UpdateComponentTick();// 0x37e56fc
	void TimerNetMulticastShootBug();// 0x3365b48
	void SuccessReload();// 0x37e56e0
	bool StopFireFilter();// 0x33e789c
	void StopFire(byte ToState);// 0x37e5660
	void StopFillGas();// 0x37e564c
	int StartReload();// 0x37e561c
	bool StartFireFilter();// 0x37e55ec
	void StartFire();// 0x37e55d0
	void StartFillGas();// 0x37e55bc
	void StartDoPreBarrel(float HandledTime);// 0x37e553c
	void StartDoBarrel();// 0x37e5520
	void ShowDefaultScope(bool bShow);// 0x37e54a0
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x37e53dc
	void ShootIDIsNotValid();// 0x37e53c0
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable, bool ClientSimulate);// 0x37e5268
	void SetUpgradeInfoID(int ID);// 0x37e51f0
	void SetSpecialFixShootTypeOnServer(byte InSpecialFixShootType);// 0x37e5178
	void SetReloadWithNoCostFromEntity(bool bReloadWithNoCost);// 0x37e50f8
	void SetReloadTypeOnServer(byte ReloadType);// 0x37e5080
	void SetRearSightIndex(int Index);// 0x37e5008
	void SetCurShootType(byte ShootType);// 0x37e4f90
	void SetCurrentBulletNumInClipOnServer(BulletInClip InBulletInClip);// 0x37e4e2c
	void SetCurrentBulletNumInClipOnClient(BulletInClip InBulletInClip);// 0x37e4cc8
	void SetCurReloadMethod(byte method);// 0x37e4c50
	void SetBulletInClip(out BulletInWeapon[] InCurBulletList, int Count);// 0x37e4b3c
	void SetBaseImpactDamageEntity(float Damage);// 0x34fdbfc
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x37e4a2c
	bool ScopeOut();// 0x33e780c
	void ScopeInContinue();// 0x37e4a18
	bool ScopeIn();// 0x33e786c
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x375e5f0
	void RPC_ServerStopReload(int InterruptState);// 0x37e4964
	void RPC_ServerSetMaxBulletNum();// 0x37e4908
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x37e4854
	void RPC_Server_SetRearSightIndex(int Index);// 0x37e47a0
	void RPC_ClientSetCurShootType(byte ShootType);// 0x37e46ec
	void RPC_ClientSetCurReloadMethod(byte method);// 0x37e4638
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainReloadTimes);// 0x37d5804
	void RPC_ClientChangeFreshWeaponState_WithParams(byte State, byte Parameter);// 0x37e453c
	void RPC_Client_SetBulletNumInClip(BulletInClip InBulletInClip);// 0x37e42f4
	void RPC_Client_DebugShootOtherBlock(Actor* BlockAct, PrimitiveComponent* BlockComp, Vector BlockActWorldVec, Vector BlockCompWorldVec);// 0x37e4140
	void RotateCrossHair(Rotator Rot);// 0x37e40d0
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x37e4050
	void ResetCurBulletNumInBarrel();// 0x37e403c
	void ReSetBulletInClip(BulletInClip NewBulletInClip);// 0x37e3ed8
	void RemoveGrenadeLaunchBullet(int RemoveNum);// 0x37e3e60
	void RemoveBulletInClip(int RemoveNum, bool IsRevert);// 0x37e3d94
	void RefreshCurClip();// 0x37e3d80
	void RefreshBulletInClip(int Count);// 0x37e3d08
	void ReduceWeaponDurability(float ReduceAmount);// 0x37e3c90
	void PreSetBulletListInClip(BulletInClip NewBulletInClip);// 0x37e3b2c
	byte PopNextSpecialBulletID();// 0x37e3afc
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x446e168
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x446e168
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x446e168
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x446e168
	void OnWeaponShootDelegate__DelegateSignature();// 0x446e168
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x446e168
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x446e168
	void OnWeaponReloadReplayDelegate__DelegateSignature();// 0x446e168
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x446e168
	void OnWeaponEquipDelegate__DelegateSignature();// 0x446e168
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x446e168
	void OnWeaponDurabilityChangeDelegate__DelegateSignature();// 0x446e168
	void OnStopFireDelegate__DelegateSignature();// 0x446e168
	void OnStartFireDelegate__DelegateSignature();// 0x446e168
	void OnSpawnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x446e168
	void OnShootWeaponDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x446e168
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x446e168
	void OnShootWeaponAutoDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x446e168
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0x446e168
	void OnSetRearSightIndexDelegate__DelegateSignature(int PrevIndex, int PostIndex);// 0x446e168
	void OnScopeInContinue__DelegateSignature();// 0x446e168
	void OnRep_WeaponDurability();// 0x37e3ae8
	void OnRep_UpgradeInfoID();// 0x37e3ad4
	void OnRep_SpecialFixShootType(byte OldSpecialFixShootType);// 0x37e3a5c
	void OnRep_SimulateHitDataArray();// 0x37e3a48
	void OnRep_RelpayNextFireMinShootData();// 0x37e3a34
	void OnRep_RelpayHitDataArray();// 0x37e3a20
	void OnRep_IsEquipBezel();// 0x37e3a0c
	void OnRep_IsEquipACCore();// 0x37e39f8
	void OnRep_DynamicReloadType(int OldVal);// 0x37e3980
	void OnRep_CurRearSightIndex(int8 PrevIndex);// 0x37e3908
	void OnRep_CurMaxBulletNumChange();// 0x37e38f4
	void OnRep_CurCurShootIntervalMode();// 0x37e38e0
	void OnRep_CurBulletInClipOnSimulatedClients();// 0x37e38cc
	void OnReloadScuccess__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x446e168
	void OnMaxBulletChange__DelegateSignature();// 0x446e168
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x446e168
	void OnCurBulletChange__DelegateSignature();// 0x446e168
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x446e168
	void OnChangeShootType__DelegateSignature(STExtraShootWeapon* ShootWeapon, byte ShootType);// 0x446e168
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x446e168
	void OnBulletLaunch__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x446e168
	void OnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x446e168
	void OnBulletImpact__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x446e168
	void NotifyServerNoneShootAction();// 0x37e3870
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainReloadTimes);// 0x37e37f8
	void NotifyClientNoneShootAction();// 0x37e379c
	void LocalSetBulletNumInClip(BulletInClip InBulletInClip);// 0x37e3638
	bool IsWeaponDurabilityLoss();// 0x37e3610
	bool IsWeaponAttachmentFullEquiped();// 0x37e35e8
	bool IsVehicleWeapon();// 0x37e35c0
	bool IsUsingGrenadeLaunch();// 0x37e3598
	bool IsUseNewUploadData();// 0x37e3570
	bool IsSwallowBulletTarget(Actor* TargetActor);// 0x37e34e8
	bool IsSupportBolt();// 0x375dc98
	bool IsSupportAutoAim();// 0x37e34c0
	bool IsSpecialBulletIDValid(byte SpecialBulletID, int CurShootID);// 0x37e33f4
	bool IsPostFireReloading();// 0x37e33d8
	bool IsOwnerInGunADS();// 0x37e33b0
	bool IsInPreFire();// 0x37e3388
	static bool IsGHasInfiniteBullets();// 0x37e3360
	bool IsForbidShootTarget(Actor* TargetActor);// 0x37e32d8
	bool IsEnableReloadADS();// 0x37e32bc
	bool IsEnableDropBullet();// 0x37e3294
	bool IsDriverVehicleWeapon();// 0x37e326c
	bool IsAutoDrop();// 0x37e3244
	void InitWeaponDurability(int NewVal);// 0x37e31cc
	bool HasUpgrade();// 0x37e31a4
	bool HasMultiBullet();// 0x37e317c
	void HandleWeaponScopeUnEquiped(enum Type);// 0x37e3104
	void HandleWeaponScopeEquiped(enum Type);// 0x37e308c
	void HandleWeaponAvatarPutOnSlot(int SlotID);// 0x34fdbfc
	void HandleWeaponAvatarLoaded(int SlotID, ItemDefineID DefineID);// 0x37e2fbc
	void HandleWeaponAvatarClearSlot(int SlotID);// 0x34fdbfc
	void HandleScopeOut(bool bIsBegin);// 0x37e2f3c
	void HandleScopeIn(bool bIsBegin);// 0x37e2ebc
	void HandlePartsEquipped(int WeaponSlotID, bool IsEquipped);// 0x37e2df8
	void HandleAllWeaponAvatarLoaded();// 0x37e2de4
	byte GetWeaponReloadType();// 0x37e2dbc
	int GetWeaponIDFromEntity();// 0x37e2d94
	int GetWeaponID();// 0x35c6fa8
	int GetWeaponDurability();// 0x37e2d6c
	float GetWeaponBodyLength();// 0x37e2d44
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x37e2bac
	ParticleSystem* GetVisualBulletTrackFX();// 0x37e2b84
	bool GetVisualBulletTrackEnabled();// 0x37e2b5c
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x37e2b1c
	FName GetVerifyScopeSocketNameFromEntity();// 0x37e2adc
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x37e2ab4
	int GetUpgradeInfoID();// 0x37e2a8c
	float GetTraceDistanceFromEntity();// 0x37e2a64
	FName GetSilencerSocketNameFromEntity();// 0x37e2a24
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x37e29fc
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x37e29d4
	byte GetShootTypeFromEntity();// 0x37e29ac
	float GetShootReduceDurabilityAmount();// 0x37e2984
	int GetShootIntervalShowNumberFromEntity();// 0x37e295c
	float GetShootIntervalFromEntity(int BulletIndex);// 0x37e28d4
	FName GetShellDropSocketNameFromEntity();// 0x37e2894
	MeshComponent* GetScopeMeshByType(FName SocketName, enum Type, int SocketIndex);// 0x37e2784
	int GetScopeID(bool bIsAngledOpticalSight);// 0x37e26f4
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x37e25d0
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x37e24b8
	int GetRemainReloadTimes();// 0x37e2490
	bool GetReloadWithNoCostFromEntity();// 0x37e2468
	float GetReloadTimeMagOutFromEntity();// 0x37e2440
	float GetReloadTimeMagInFromEntity();// 0x37e2418
	float GetReloadTimeFromEntity();// 0x37e23f0
	FString GetReloadTIDPostfixByReloadType(byte ReloadType, bool IsTactical);// 0x37e229c
	FName GetReloadTIDNameNew(byte method);// 0x37e2214
	FName GetReloadTIDName(byte method);// 0x37e2184
	float GetReloadTacticalTimeFromEntity();// 0x37e215c
	int GetReloadSpecificBulletNumFromEntity();// 0x37e2134
	float GetReloadRateFromEntity();// 0x37e210c
	float GetReloadDurationStartFromEntity();// 0x37e20e4
	float GetReloadDurationLoopFromEntity();// 0x37e20bc
	float GetReloadDurationEndFromEntity();// 0x37e2094
	Transform GetRelativeMuzzleTransform();// 0x37e202c
	float GetReferenceDistance();// 0x37e2004
	FName GetRearSightSocket(int Index);// 0x37e1f7c
	Rotator GetRearSightRot();// 0x37e1f34
	int GetRearSightIndex();// 0x37e1f0c
	Rotator GetRearSightHandRotOffset();// 0x37e1ec4
	float GetRangeModifier();// 0x37e1e9c
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x37e1ddc
	float GetPreFireTimeFromEntity();// 0x37e1db4
	float GetPreFireAnimScaleFromEntity();// 0x37e1d8c
	float GetPostReloadTimeFromEntity();// 0x37e1d64
	float GetPostFireTimeFromEntity();// 0x37e1d3c
	float GetPostFillGasTime();// 0x37e1d14
	FName GetOverrideScopeAimSocketName();// 0x37e1cd4
	int GetOnceReloadBulletNumOverride();// 0x37e1ca4
	byte GetNextSpecialBulletID();// 0x37e1c74
	bool GetNeedMagAnimationWhenReload();// 0x37e1c4c
	Transform GetMuzzleTransform();// 0x37e1be4
	FName GetMuzzleSocketNameFromEntity();// 0x37e1b9c
	float GetMinShootIntervalFromEntity();// 0x37e1b74
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x37e1b4c
	float GetMaxValidHitTimeFromEntity();// 0x37e1b24
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x37e1afc
	int GetMaxBulletNumInOneClipFromEntity();// 0x37e1ad4
	int GetMaxBulletNumInBarrelFromEntity();// 0x37e1aac
	bool GetIsNeedOffsetVelocityFromEntity();// 0x37e1a84
	bool GetIsEnableScopeInFromEntity();// 0x37e1a5c
	float GetImpactEffectSkipDistanceFromEntity();// 0x37e1a34
	float GetIgnoreRangeAttenuatDis();// 0x37e1a0c
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim, bool IsGunADS);// 0x37e1924
	AkAudioEvent* GetGrenadeLaunchShootSound();// 0x37e18fc
	WeaponCrossHairPerformData[] GetGrenadeLaunchCrossHairData();// 0x37e17a0
	float GetGasAddDamageRate();// 0x37e1778
	float GetGameDeviationFactor();// 0x37e1750
	FName GetFiringSuppressorSocketNameFromEntity();// 0x37e1710
	float GetFireSensitiveYawRate();// 0x37e16e8
	float GetFireSensitivePitchRate();// 0x37e16c0
	int GetExtraShootIntervalShowNumberFromEntity();// 0x37e1698
	float GetExtraShootIntervalFromEntity();// 0x37e1670
	<int,bool> GetEquipAttachSlotMap();// 0x37e14a0
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x37e1420
	byte GetCurSightVisionType();// 0x37e13f8
	byte GetCurSightType();// 0x37e13c8
	enum GetCurShootIntervalMode();// 0x37e13ac
	int GetCurrentBulletNumInClip();// 0x37e1390
	float GetCurReloadTime();// 0x37e1368
	byte GetCurReloadMethod();// 0x37e1340
	float GetCurGasRate();// 0x37e1318
	float GetCurGasAngle();// 0x37e12f0
	int GetCurBulletNumInClip();// 0x37e12c8
	int GetCurBulletNumByBulletID(int BulletID);// 0x37e1248
	float GetCrossHairInitSize();// 0x37e1220
	float GetCrossHairBurstSpeed();// 0x37e11f8
	float GetCrossHairBurstIncreaseSpeed();// 0x37e11d0
	byte GetControllerRole();// 0x34c38ac
	int GetConstantWeaponDurabilityFromEntity();// 0x37e11a8
	bool GetClipHasInfiniteBulletsFromEntity();// 0x37e1180
	MeshComponent* GetChildMeshComp(FName compTag);// 0x37e1100
	bool GetCanRecordHitDetailFromEntity();// 0x37e10d8
	float GetBurstShootIntervalFromEntity();// 0x37e10b0
	float GetBurstShootCDFromEntity();// 0x37e1088
	int GetBurstShootBulletsNumFromEntity();// 0x37e1060
	ItemDefineID GetBulletTypeFromEntity();// 0x37e1014
	BulletTrackComponent* GetBulletTrackComponent();// 0x37e0fec
	float GetBulletRangeEntity();// 0x37e0fc4
	int GetBulletNumSingleShotFromEntity();// 0x37e0f9c
	int GetBulletNumSingleShotAtFire(bool IsGunADS);// 0x37e0f0c
	float GetBulletMomentumFromEntity();// 0x37e0ee4
	float GetBulletFireSpeedFromEntity();// 0x37e0eb4
	float GetBaseReloadTime(bool bTactical);// 0x37e0e2c
	float GetBaseImpactDamageEntity();// 0x37e0e04
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x37e0cec
	float GetAutoShootCDFromEntity();// 0x37e0cbc
	bool GetAutoReloadFromEntity();// 0x37e0c94
	float GetAnimForegripParam();// 0x37e0c6c
	bool GetADSManualStop();// 0x37e0c44
	float GetAccessoriesVRecoilFactor();// 0x37e0c1c
	float GetAccessoriesRecoveryFactor();// 0x37e0bf4
	float GetAccessoriesHRecoilFactor();// 0x37e0bcc
	float GetAccessoriesDeviationFactor();// 0x37e0ba4
	void ForceSyncAllClientsBulletsNumOnServer();// 0x37e0b90
	void FixBulletNumWithValideData();// 0x37e0b7c
	bool EnablePlayBoltAnimation();// 0x37e0b54
	void EnableInfiniteBullets(bool bEnableInfiniteBullets);// 0x37e0ad4
	void DoGrenadeLaunchStartReload();// 0x37e0ac0
	void CostGasByOneShoot();// 0x37e0aac
	bool ConditionForbidShootTarget();// 0x37e0a7c
	void ConditionDrawRelpayHitData(out const BulletHitInfoUploadDataInReplay HitData);// 0x37e0928
	void ClearWeaponAttrModifier();// 0x37e0914
	void ClampBulletInClip(int MinCount, int MaxCount);// 0x37e0858
	void CheckReloadAttr();// 0x37e0844
	bool CheckNeedClientSetMaxBulletNum();// 0x37e081c
	bool CheckClientBulletInClipIsValid(out const BulletInClip ClientBulletInClip);// 0x37e0740
	bool CanSwitchToGrenade();// 0x37e0724
	float CalcReloadAnimRate(AnimMontage* ReloadMontage, byte WeaponReloadMethod);// 0x37e0660
	void BP_OnSyncSimulatedClientsCurBullets();// 0x446e168
	bool AutoFireCheck();// 0x37d7204
	void AttrRemovedCB(out const AttrAffected[] AffectedAttrS);// 0x37e052c
	void AttrModifiedCB(out const AttrAffected[] AffectedAttrS);// 0x37e052c
	void AddWeaponDurability(int AddAmount);// 0x37e04b4
	bool AddWeaponAttrModifierConfig(FString ConfigId, out const WeaponAttrModifyData[] AttrModifiers, int UnquieID);// 0x37e02ac
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x37e0228
	void AddFillGas(float AddTime);// 0x37e01b0
	void AddBulletInClip(BulletInWeapon[] InCurBulletList, int Count);// 0x37e0014

--------------------------------
Class: STExtraWeapon.LuaActor.Actor.Object
	int iRegionWeapon;//[Offset: 0x3e4, Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x3e8, Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef, Size: 1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x3f4, Size: 16]
	Transform WeaponAttachMeshOffset;//[Offset: 0x410, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x440, Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x470, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x4a0, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x4d0, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x500, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x530, Size: 48]
	int CrossHairType;//[Offset: 0x560, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x564, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x568, Size: 4]
	PredictLineComponent* PredictLine;//[Offset: 0x56c, Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x570, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x578, Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x57c, Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x588, Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x594, Size: 12]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x5a0, Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x5ac, Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x5b8, Size: 12]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x5c4, Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x5d0, Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x5dc, Size: 12]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x5e8, Size: 12]
	delegate OnWeaponBaseEquipDelegate;//[Offset: 0x5f4, Size: 12]
	delegate OnWeaponBaseUnEquipDelegate;//[Offset: 0x600, Size: 12]
	delegate OnEquipOrUnEuipAttachmentDelegate;//[Offset: 0x60c, Size: 12]
	delegate OnPressingWeaponFuncBtnDelegate;//[Offset: 0x618, Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x624, Size: 4]
	WeaponSpecificHandler* WeaponSpecHandler;//[Offset: 0x628, Size: 4]
	byte CurFreshWeaponState;//[Offset: 0x62c, Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x630, Size: 12]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x63c, Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x640, Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649, Size: 1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64a, Size: 1]
	float MaxReconnectTime;//[Offset: 0x64c, Size: 4]
	float StartReconnectTime;//[Offset: 0x650, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x658, Size: 104]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x6c8, Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x6d8, Size: 88]
	float ServerStartCreateWeaponTime;//[Offset: 0x730, Size: 4]
	float ServerFinishCreateWeaponTime;//[Offset: 0x734, Size: 4]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x73c, Size: 4]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x744, Size: 4]
	byte CurWeaponState;//[Offset: 0x748, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x74c, Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x750, Size: 4]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x758, Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x7a0, Size: 4]
	MeshSynData[] synData;//[Offset: 0x7a8, Size: 12]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x7b8, Size: 4]
	float WaitMeshInitTime;//[Offset: 0x7bc, Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x7c4, Size: 12]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x7dc, Size: 4]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e1, Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x7e4, Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x7f4, Size: 12]
	byte WeaponUIType;//[Offset: 0x800, Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x810, Size: 48]
	Rotator RotForSimulate;//[Offset: 0x840, Size: 12]
	int FuncFlag;//[Offset: 0x84c, Size: 4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	byte AppActiveWeaponAction;//[Offset: 0x855, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> WeaponCompOutOfVisionOptimizationDataMap;//[Offset: 0x858, Size: 60]
	FString[] ComponentTickWhiteList;//[Offset: 0x894, Size: 12]
	<ActorComponent*,bool> CompTickStateMap;//[Offset: 0x8a0, Size: 60]
	bool bIsInValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x446e168
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x446e168
	void UpdateWeaponAvatar(float DeltaTime);// 0x446e168
	void TriggerWeaponEvent(enum Event);// 0x3820494
	bool StartScopeFilter();// 0x3820464
	void SpecialResetForWeaponCrosshair();// 0x446e168
	void SetCharacterAttrModifiers(out const FString[] ModifierNames, bool bNewEnable);// 0x38202d8
	void SetCharacterAttrModifier(FString ModifierName, bool IsEnable);// 0x38201c8
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x3820114
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x3820060
	void RespawnData();// 0x446e168
	void ResetData();// 0x446e168
	void ReceivedUseWeapon();// 0x446e168
	void ReceivedDisuseWeapon();// 0x446e168
	void PlayLocalShellDropFX();// 0x446e168
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x446e168
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x446e168
	void OnWeaponBaseUnEquipDelegate__DelegateSignature();// 0x446e168
	void OnWeaponBaseEquipDelegate__DelegateSignature();// 0x446e168
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x446e168
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x446e168
	void OnRep_WeaponReconnectReplicateData();// 0x382004c
	void OnRep_WeaponAttachSocketName();// 0x3820038
	void OnRep_SimulatedOwnerPawn();// 0x3820024
	void OnRep_OwnerClientCreateWeaponData();// 0x3820010
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x381fffc
	void OnRep_AvatarMeshChanged();// 0x381ffe8
	void OnRep_AttachmentReplication();// 0x35c7c6c
	void OnReleaseTrigger();// 0x364b06c
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x446e168
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x446e168
	void OnPushTrigger();// 0x344a258
	void OnPressingWeaponFuncBtnDelegate__DelegateSignature();// 0x446e168
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x446e168
	void OnEquipOrUnEuipAttachmentDelegate__DelegateSignature(bool IsEquip, BackpackWeaponAttachHandle* AttachHandle);// 0x446e168
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x446e168
	void NotifyServerChangeState(byte State);// 0x381ff70
	void NewInitWeapon();// 0x381ff5c
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x381fedc
	bool IsUseAttrModify();// 0x381feac
	bool IsSimulated();// 0x381fe84
	bool IsLocalOrSpectorPlayer();// 0x381fe5c
	bool IsForceNeedIK();// 0x381fe2c
	bool IsAutonomous();// 0x381fe04
	void InitWeapon();// 0x381fdf0
	void InitProxyBP(Actor* OwnerTarget);// 0x446e168
	bool HasComponentSlot(byte Slot);// 0x381fd70
	void HandleReconnectNew(Actor* WeaponOwner);// 0x381fcf8
	byte GetWeaponTypeNew();// 0x381fcd0
	byte GetWeaponType();// 0x381fca8
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x381fc80
	byte GetWeaponStateType();// 0x381fc58
	byte GetWeaponSlot();// 0x381fc30
	int GetWeaponSkillID();// 0x381fc08
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x381fbe0
	enum GetWeaponOwnerObserverType();// 0x381fbb8
	FString GetWeaponName();// 0x381faf8
	MeshComponent* GetWeaponMeshComponent();// 0x35ba0b4
	int GetWeaponMainAvatarID();// 0x381fad0
	int GetWeaponID();// 0x35c6fa8
	byte GetWeaponHoldType();// 0x381faa8
	byte GetWeaponFireMode();// 0x381fa78
	WeaponEntity* GetWeaponEntityComponent();// 0x381fa50
	FString GetWeaponDetailInfo();// 0x381f990
	Transform GetWeaponAttachToBackRelativeTransformByBagLevel(int Level, int SideType);// 0x381f8a4
	FName GetWeaponAttachSocket();// 0x381f85c
	WeaponSpecificHandler* GetSpecificHandler();// 0x381f834
	float GetSpecialScopeFov();// 0x381f804
	int GetScopeID(bool bIsAngledOpticalSight);// 0x37e26f4
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x37e25d0
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x37e24b8
	byte GetOwnerRoleSafety(bool RemoteFlag);// 0x381f77c
	FString GetOwnerPlayerName();// 0x381f6bc
	PlayerController* GetOwnerPlayerController();// 0x366dd34
	Pawn* GetOwnerPawn();// 0x381f694
	FString GetOwnerName();// 0x381f5d4
	Controller* GetOwnerController();// 0x381f5a4
	Actor* GetOwnerActor();// 0x381f574
	ItemDefineID GetItemDefineID();// 0x381f528
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x381f500
	byte GetCurSightType();// 0x37e13c8
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x381f3bc
	LinearColor GetColorByTeamID(int TeamID);// 0x446e168
	ItemHandleBase* GetBackpackItemHandle();// 0x381f394
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x446e168
	void DelayHandleAvatarMeshChanged();// 0x381f380
	void CreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x381f2b4
	void ClientLoadDefaultMesh();// 0x381f2a0
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x381f228
	bool CheckHasFuncByInt(int Func);// 0x381f1a8
	bool CheckHasFunc(enum Func);// 0x381f1a8
	void ChangeSequenceStateInner(byte StateType);// 0x381f128
	bool ChangeSequenceState(byte StateType);// 0x381f0a0
	void CallForceHideWeaponWidgetDel();// 0x381f08c

--------------------------------
Class: LuaActor.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x34c, Size: 60]
	FString LuaFilePath;//[Offset: 0x388, Size: 12]
	void UnRegistLuaTick();// 0x720673c
	void RegistLuaTick(float TickInterval);// 0x72066c4

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	int[] SkillIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
	bool SetAutonomousLoadRes();// 0x337fc6c
	void SelectWeaponGunOnePart(int WeaponGunPart);// 0x390c760
	void EnableDIYPatternMirro(bool bMirro, bool bLeftToRight);// 0x390c690

--------------------------------
Class: WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x490, Size: 4]
	bool EnablePhotoShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	delegate OnScopeEquipDelegate;//[Offset: 0x498, Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x4a4, Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x4b0, Size: 12]
	delegate OnWeaponAvatarLoaded2;//[Offset: 0x4bc, Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x4c8, Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x4d4, Size: 12]
	delegate OnWeaponAvatarPutOnSlot;//[Offset: 0x4e0, Size: 12]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x4f0, Size: 12]
	delegate OnWeaponPartsRender;//[Offset: 0x4fc, Size: 12]
	delegate OnWeaponEffectParticleCreate;//[Offset: 0x508, Size: 12]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x52c, Size: 60]
	<int,HandleMeshPack> DefaultAttachmentMeshOverride;//[Offset: 0x568, Size: 60]
	MeshSynData[] DefaultSynData;//[Offset: 0x5a4, Size: 12]
	FString OwnerPlayerUID;//[Offset: 0x5b4, Size: 12]
	WeaponDIYData WeaponDIYData;//[Offset: 0x5c4, Size: 60]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x608, Size: 12]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	ItemDefineID WeaponDefineID;//[Offset: 0x618, Size: 24]
	bool ShouldDisplayByQuality(int SlotID);// 0x390ef28
	void SetPendantSocketType(enum SocketType);// 0x390eeb0
	bool SetAutonomousLoadRes();// 0x337fc6c
	void ResponWeaponDIYData(FString InPlayerUID, int WeaponAvatarID);// 0x390ed14
	void ResetAttachmentSocket();// 0x390ed00
	void ResetAttachmentParent();// 0x390ecec
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x390eba8
	void RequestDIYPlan(int WeaponAvatarID, int InDIYPlanID);// 0x446e168
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x337d210
	void ReportAvatarInfo(out const int[] RequestItemIDS);// 0x390eadc
	void RemoveDefaultAttachmentOverride(int SlotID);// 0x390ea64
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* InHandle);// 0x390e9e4
	void RefreshAvatarStateChanged();// 0x337f8d4
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x390e96c
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* WeaponHandle);// 0x390e8ec
	void PutOnEquipmentDIYData(int WeaponAvatarID, int InDIYPlanID);// 0x390e830
	bool PutOnEquipmentByResID(int resID);// 0x390e7a8
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle);// 0x390e728
	bool PutOffEquimentByResID(int resID);// 0x390e6a0
	void ProcessWeaponDIYDataAction(out const WeaponDIYData InWeaponDIYData);// 0x390e5dc
	void ProcessLoadAllMesh();// 0x337f8b8
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData OutSyncData);// 0x390e500
	void OnWeaponPartsRenderEvent__DelegateSignature(int WeaponSlotID);// 0x446e168
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x446e168
	void OnWeaponAvatarPutOnSlot__DelegateSignature(int SlotID);// 0x446e168
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x446e168
	void OnWeaponAvatarLoaded2__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x446e168
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x446e168
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x446e168
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x446e168
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x446e168
	void OnRespawned();// 0x3332384
	void OnRep_NetAvatarDataChanged(out const MeshSynData[] InSyncData);// 0x390e434
	void OnRecycled();// 0x337d1f4
	void OnEffectParticleCreate__DelegateSignature();// 0x446e168
	void OnAsyncLoadBattleHandlesDone(int AsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x390e284
	void NetSyncData(int InSlotID, enum InOperationType, BattleItemHandleBase* InHandle);// 0x337f528
	bool LoadMeshListAsync(out BattleItemHandleBase*[] InHandleList, bool bNeedDirectLoad);// 0x390e158
	bool IsTeammate();// 0x337d1c4
	bool IsSelf();// 0x337d16c
	void InitMasterComponent();// 0x390e144
	void InitialAvatarParam();// 0x390e130
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x390e0b8
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x390e040
	void InitDefaultAttachment(BattleItemHandleBase* WeaponHandle);// 0x390dfc8
	int GetWeaponParentID(int InSlotID, out const ItemDefineID InItemDefineID);// 0x390deec
	Controller* GetWeaponController();// 0x390dec4
	STExtraWeapon* GetOwnerWeapon();// 0x334aaa8
	STExtraBaseCharacter* GetOwnerCharacter();// 0x390de9c
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x390de08
	BattleItemHandleBase* GetEquippedHandle(int InSlotID);// 0x390dd88
	bool GetEquipmentMeshBySlot(int InSlotID, out MeshData OutMeshPack);// 0x390dc90
	AvatarDIYEntityFactory* GetEntityFactory();// 0x337f0b8
	MeshComponent* GetAttachmentSocketTransform(int InSlotID);// 0x390dc10
	AnimationAsset* GetAttachmentAnim(enum InSlotType, int AnimIdx);// 0x390db4c
	WeaponAvatarDIYEntity* FindAvatarEntityByMesh(MeshComponent* InMeshComp);// 0x390dacc
	void DestroyWeapon();// 0x390dab8
	void ClearMeshBySlot(int SlotID, bool putDefault, bool bClearMesh);// 0x390d99c
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x390d91c
	bool CheckSlotIsEquipped(int InSlotID, bool bIncludingDefault);// 0x390d850
	bool CheckIsAlreadyEquipped(ItemDefineID InDefineID);// 0x390d7c0
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs);// 0x390d6f4
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x337cd54
	void ApplyAttachmentOverride(BattleItemHandleBase* InAttachHandle);// 0x390d67c
	void ApplyAttachment(BattleItemHandleBase* InAttachHandle);// 0x390d604
	void AddUnlockWeaponAttachmentAvatarList(int WeaponBPID, out <int,int> OutAttachmentSkinIDList);// 0x390d4b4
	void AddDefaultAttachmentOverride(int AttchmentID);// 0x390d43c
	int AddAction_ParticleByName(int SlotID, out const FName ParticleName);// 0x390d364
	int AddAction_MatParamModify2(int SlotID, WeaponEffect_TickMatParam* InCfg);// 0x390d2a0
	int AddAction_MatParamModify(int SlotID, int CfgIndex);// 0x390d1dc

--------------------------------
Class: AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x22c, Size: 12]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x238, Size: 60]
	int[] PendingDeleteSlotID;//[Offset: 0x274, Size: 12]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x280, Size: 4]
	<int,FName> SlotToSocket;//[Offset: 0x284, Size: 60]
	int StepCount;//[Offset: 0x2c0, Size: 4]
	delegate AsyncLoadAvatarAllMeshDone;//[Offset: 0x2c4, Size: 12]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x2d0, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x378, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x37c, Size: 4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	enum DisplayQuality;//[Offset: 0x391, Size: 1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x394, Size: 60]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	<int,OutlineEnableList()> OutlineEnableList;//[Offset: 0x3f8, Size: 60]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x438, Size: 60]
	int CurrentDecalBakingRequestID;//[Offset: 0x474, Size: 4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x478, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x484, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x3380010
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x337ff3c
	bool SetMeshVisibleByID(int InSlotID, bool bIsVisible, bool bForceShow);// 0x337fe18
	void SetMaster(MeshComponent* InComponent, FName InName, enum InType);// 0x337fd10
	void SetDisplayQuality(enum Quality);// 0x337fc9c
	bool SetAutonomousLoadRes();// 0x337fc6c
	void RequestSyncLoadMeshes();// 0x337fc58
	void RequestSyncLoadHandles();// 0x337fc44
	void RequestAsyncLoadMeshes();// 0x337fc28
	void RequestAsyncLoadHandles();// 0x337fc0c
	void RemoveDIYRTCacheInBattle(int InSlotID);// 0x337fb94
	void RemoveAllDIYRTCacheInBattle();// 0x337fb80
	void RemoveActionByType(int SlotID, enum InActionType, bool bDelayClear);// 0x337fa78
	void RemoveAction(int SlotID, int ActionInstanceID, bool bDelayClear);// 0x337f970
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x337f8f0
	void RefreshAvatarStateChanged();// 0x337f8d4
	void ProcessLoadAllMesh();// 0x337f8b8
	void PreProcessBeforeLoadMesh();// 0x337f89c
	void PostProcessAfterLoadMesh();// 0x337f880
	void OnRespawned();// 0x3332384
	void OnRecycled();// 0x337d1f4
	void OnEngineDecalBakingFinished(out const DecalBakingRequest InRequestStruct);// 0x337f7a0
	void OnAvatarDIYDecalBakingFinished__DelegateSignature(int RequestID, TextureRenderTarget2D* RenderTarget);// 0x446e168
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x446e168
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x337f720
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x337f64c
	void OnAllAvatarHandleLoadedDone();// 0x337f630
	void NetSyncData(int SlotID, enum OperationType, BattleItemHandleBase* Handle);// 0x337f528
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x337f45c
	bool IsAutonomousAvatar();// 0x337f434
	AvatarDIYEntity* GetOrCreateAvatarEntity(int SlotID, int SubSlotID);// 0x337f370
	<int,MeshComponent*> GetMeshComponentList();// 0x337f1e0
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x337f158
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x337f0e8
	AvatarDIYEntityFactory* GetEntityFactory();// 0x337f0b8
	TextureRenderTarget2D* GetDIYRTCacheInLobby(int InSlotID);// 0x337f038
	enum GetDisplayQuality();// 0x337f01c
	void GetCurMeshComponents(out MeshComponent*[] OutMeshComponets);// 0x337ef48
	AvatarDIYEntity* GetAvatarEntity(int SlotID, int SubSlotID);// 0x337ee84
	void EnableSyncLoadDIYDecal(bool bInSyncDIYDecal, int InMaxDecalProcessPreFrame);// 0x337edbc
	void EnableSyncLoadAvatar(bool bInSyncAvatar);// 0x337ed3c
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x337ec6c
	AvatarDIYEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x337eba8
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x337ead4
	void AsyncLoadAvatarAllMeshDone__DelegateSignature(AvatarDIYComponent* AvatarDIYComponent);// 0x446e168
	void AddDIYRTCacheInBattle(int InSlotID, TextureRenderTarget2D* InTexture2D);// 0x337ea18
	int AddAction_Modle(int SlotID, int ModleID);// 0x337e954
	int AddAction_Material(int SlotID, int MaterialID);// 0x337e890
	int AddAction_DIYSlotMatParam(out const int[] InSlotMatParam);// 0x337e7bc
	int AddAction_DIYPattern(int SlotID, out const DIYMergedTexData[] InDIYMergeData);// 0x337e63c
	int AddAction_DIYMirroParam(int SlotID, out const int[] InMirroParam);// 0x337e524
	int AddAction_DIYMatParam(int SlotID, out const int[] InMatIDList);// 0x337e40c
	int AddAction(int SlotID, out const AvatarActionBase InActionBase);// 0x337e318

--------------------------------
Class: AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x1b0, Size: 4]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b6, Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7, Size: 1]
	FName LightVectorName;//[Offset: 0x1b8, Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x1c0, Size: 4]
	delegate OnItemDownloadDelegate;//[Offset: 0x1c8, Size: 16]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x1d8, Size: 16]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x1e8, Size: 60]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	enum AvatarEnum;//[Offset: 0x225, Size: 1]
	void RequestDownloadItemInBattle(int InItemID);// 0x337d2e4
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x337d210
	void OnRespawned();// 0x3332384
	void OnRecycled();// 0x337d1f4
	bool IsTeammate();// 0x337d1c4
	bool IsServerMode();// 0x337d19c
	bool IsSelf();// 0x337d16c
	bool IsLogicRunningMode();// 0x337d144
	bool IsLobbyAvatar();// 0x337d128
	bool IsLobbyActor();// 0x337d10c
	bool IsForceClientMode();// 0x337d0f0
	uint32 GetPlayerKey();// 0x337d0c0
	GameInstance* GetGameInstance();// 0x337d090
	void DownloadItemInBattleCallBack(uint32 ItemID, uint32 ErrorCode);// 0x337cfcc
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x337cd54

--------------------------------
Class: AvatarDIYEntity.Object
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x1c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x20, Size: 4]
	MeshGroup MeshGroup;//[Offset: 0x24, Size: 36]
	ItemDefineID ParentDefineID;//[Offset: 0x48, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x60, Size: 60]
	int SlotID;//[Offset: 0xb4, Size: 4]
	int SubSlotID;//[Offset: 0xb8, Size: 4]
	FName SocketName;//[Offset: 0xc0, Size: 8]
	enum meshType;//[Offset: 0xc8, Size: 1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0xcc, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0xd0, Size: 4]
	MeshData EntityMeshData;//[Offset: 0xd8, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x138, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b, Size: 1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x1a0, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x1b0, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x1c8, Size: 60]
	void UpdateVisibility();// 0x3381f48
	void UnRegisterTick();// 0x3381f2c
	void TickEntity(float DeltaTime);// 0x3381eac
	void SetSocketName(FName InName);// 0x3381e2c
	void SetParentDefineID(ItemDefineID ParentID);// 0x3381da0
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x3381d20
	void SetAvatarVisibility(bool bIsVisible, bool bForce);// 0x3381c48
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x3381bc0
	void RevertEntityMeshData();// 0x3381bac
	void RenderEntity();// 0x3381b90
	void RegisterTick();// 0x3381b74
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x3381aec
	void PutOnDefaultEquipment(int InSlotID);// 0x3381a6c
	void PrepareEntity();// 0x3381a50
	void OnPreRender();// 0x3381a34
	void OnPostRender();// 0x3381a18
	void MaskActionDirty(bool bFlag);// 0x3381998
	bool IsEntityAvailable(enum VisibilityType);// 0x3381910
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x3381844
	void Init(int InSlotID, int InSubSlotID, AvatarDIYComponent* InAvatarComponent);// 0x338173c
	bool HasSomeAction(enum InActionType);// 0x33816bc
	bool HasMainAction();// 0x3381694
	FName GetSocketName();// 0x338164c
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x33815c4
	ItemDefineID GetParentDefineID();// 0x3381570
	MeshData GetMeshData();// 0x338150c
	BattleItemHandleBase* GetLoadedHandle();// 0x33814e4
	ItemDefineID GetDefineID();// 0x3381490
	void EnterRenderPipeline();// 0x3381474
	void EnterLogicPipeline();// 0x3381458
	void DrawOutline(bool bEnable);// 0x33813d0
	bool CreateAndApplyResource();// 0x33813a0
	void ClearRenderEntity();// 0x3381384
	void ClearEquipmentRenderData(int CurrSlotID, bool bPutDefault);// 0x33812b8
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x33811e0
	void ClearEntity(bool ForceClear);// 0x3381158

--------------------------------
Class: MeshGroup
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 12]
	Object*[] MeshObjectList;//[Offset: 0xc, Size: 12]
	MeshComponent*[] MeshCompList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MeshAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 40]
	FName AttachSocket;//[Offset: 0x80, Size: 8]
	enum meshType;//[Offset: 0x88, Size: 1]
	bool bKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	class AnimInstance* animBP;//[Offset: 0x8c, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x90, Size: 40]
	bool bAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bUpdateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	FString LuaFilePath;//[Offset: 0xc8, Size: 12]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	enum ItemStoreArea;//[Offset: 0xd5, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0xd8, Size: 12]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	float UnitWeight;//[Offset: 0xe8, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	int ItemAttrsFlag;//[Offset: 0xf0, Size: 4]
	void UpdateAttributeModify(bool bEnable);// 0x343ee18
	bool UnEquip();// 0x3a04260
	bool HanldePickupAssociationData(out const BattleItemAdditionalData[] PickupAdditionalData);// 0x3a0411c
	bool HanldeDropAssociationData();// 0x3a040ec
	bool HanldeCleared();// 0x3594ad0
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x339daa4
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x339d684
	bool HandleEnable(bool bEnable);// 0x339d16c
	bool HandleDrop(int InCount, enum Reason);// 0x339d0a0
	bool HandleDisuse(enum Reason);// 0x3388314
	bool HandleChangeItemStoreArea(enum InItemStoreArea);// 0x3a04064
	bool HandleBindToTargetItem();// 0x34f26c4
	World* GetWorldInternal();// 0x3a04034
	World* GetCurrentWorld();// 0x3a0400c
	BattleItemData ExtractItemData();// 0x33a6024
	void ClearAdditionalData();// 0x3a03ff8
	bool CheckCanUse(out const interface classNone ItemContainer, BattleItemUseTarget Target, enum Reason);// 0x3a03ea4

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x1c, Size: 4]
	int MaxCount;//[Offset: 0x20, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	<int,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68, Size: 24]
	void SetAssociation(int AssociationType, ItemAssociation Association);// 0x3a0bc0c
	void RemoveAssociation(int AssociationType);// 0x3a0bb94
	void Init(ItemDefineID InDefineID);// 0x3a0bb04
	ItemDefineID GetDefineID();// 0x3a0bac0
	<int,ItemAssociation> GetAssociationMap();// 0x3a0b940
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x3a0b834
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x3a0b788
	ItemAssociation GetAssociation(int AssociationType);// 0x3a0b6ec
	void Constuct(out const ItemDefineID InDefineID);// 0x3a0b654
	void AddAssociation(int AssociationType, ItemAssociation Association);// 0x3a0b560

--------------------------------
Class: ItemAssociation
	int AssociationType;//[Offset: 0x0, Size: 4]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BattleItemAdditionalData
	enum EDataType;//[Offset: 0x0, Size: 1]
	int IntData;//[Offset: 0x4, Size: 4]
	FString StringData;//[Offset: 0x8, Size: 12]
	float FloatData;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	int TargetAssociationType;//[Offset: 0x18, Size: 4]
	Actor* TargetActor;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 32]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x48, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50, Size: 12]
	int Durability;//[Offset: 0x5c, Size: 4]
	enum ItemStoreArea;//[Offset: 0x60, Size: 1]
	BattleItemFeatureData FeatureData;//[Offset: 0x64, Size: 44]
	ItemAssociation[] Associations;//[Offset: 0x90, Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 24]
	FString Name;//[Offset: 0x20, Size: 12]
	FString Desc;//[Offset: 0x2c, Size: 12]
	FString Icon;//[Offset: 0x38, Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44, Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	int CountLimit;//[Offset: 0x8, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemAttrsFlag;//[Offset: 0x14, Size: 4]
	int SortingPriority;//[Offset: 0x18, Size: 4]
	int Worth;//[Offset: 0x1c, Size: 4]
	int ItemCapacity;//[Offset: 0x20, Size: 4]
	int ItemDurability;//[Offset: 0x24, Size: 4]
	int ItemType;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4, Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8, Size: 4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc, Size: 12]
	enum meshType;//[Offset: 0x18, Size: 1]
	int[] hiddenSlots;//[Offset: 0x1c, Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28, Size: 12]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34, Size: 12]
	ItemDefineID definedID;//[Offset: 0x40, Size: 24]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x724, Size: 4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x728, Size: 4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x72c, Size: 4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x730, Size: 4]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x3462c50
	Actor* GetBindOwner();// 0x3462c2c
	MeshComponent* GetAttachedMeshComponent();// 0x3462c10
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x3462a60
	void BindOwner(Actor* Owner);// 0x34629e0
	void BindEvent(bool bShowWidget);// 0x3462958

--------------------------------
Class: AvatarDIYEntityFactory.Object
	AvatarDIYEntity* CreateEntity(int SlotID, int SubSlotID);// 0x3385a84

--------------------------------
Class: AvatarActionBase

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 4]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 328]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 40]
	FName MeshMatSlotName;//[Offset: 0xc8, Size: 8]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xd0, Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0x100, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x128, Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x134, Size: 12]
	enum meshType;//[Offset: 0x140, Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector2D DrawSize;//[Offset: 0x40, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	int AdditionalItemID;//[Offset: 0x20, Size: 4]
	int DIYPlanID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: DIYEnableLevel
	int DeviceLevel;//[Offset: 0x0, Size: 4]
	int EnableLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponAvatarDIYEntity.AvatarDIYEntity.Object
	void SetWeaponEntityVisibility(bool visibie);// 0x3911c94
	void SetSocketName(FName InName);// 0x3381e2c
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x3381d20
	void RenderEntity();// 0x3381b90
	void RemoveParticleEffect();// 0x3911c78
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x3381aec
	void PrepareEntity();// 0x3381a50
	void OnPreRender();// 0x3381a34
	void OnPostRender();// 0x3381a18
	bool IsForceEnableAnim();// 0x3911c48
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x33815c4
	ItemDefineID GetDefineID();// 0x3381490
	void EnterLogicPipeline();// 0x3381458
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x33811e0
	void BroadcastWeaponRenderEvent();// 0x3911c34
	void BroadcastWeaponEquipEvent(bool IsEquipped);// 0x3911bb4
	void ApplyParticleEffect();// 0x3911b98
	void AddWeaponHandleAction();// 0x3911b84

--------------------------------
Class: WeaponEffect_TickMatParam.WeaponEffectCfgBase.Object
	MatParamModifyCfg ParamCfg;//[Offset: 0x48, Size: 184]
	void RemoveEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x338b738
	bool ApplyEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x3431260

--------------------------------
Class: WeaponEffectCfgBase.Object
	enum TriggerCondition;//[Offset: 0x1c, Size: 1]
	int ConditionTriggerNum;//[Offset: 0x20, Size: 4]
	int MaxApplyCount;//[Offset: 0x24, Size: 4]
	enum ValidScene;//[Offset: 0x28, Size: 1]
	bool EnableAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	float LoopInterval;//[Offset: 0x2c, Size: 4]
	float ApplyTime;//[Offset: 0x30, Size: 4]
	bool EnableLowDeviceOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	void RemoveEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x338b738
	bool ReachedMaxTriggerTime();// 0x3431ca4
	void Init();// 0x3431c88
	bool ApplyEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x3431260

--------------------------------
Class: MatParamModifyCfg
	SoftObjectPath CurveAsset;//[Offset: 0x0, Size: 24]
	FName ParamName;//[Offset: 0x18, Size: 8]
	FName ParticleTag;//[Offset: 0x20, Size: 8]
	float FxWaitTime;//[Offset: 0x28, Size: 4]
	int[] RelatedSlots;//[Offset: 0x2c, Size: 12]
	CurveFloat* CachedCurve;//[Offset: 0x38, Size: 4]
	FName ReplaceMatSlotName;//[Offset: 0x40, Size: 8]
	SoftObjectPath NormalMat;//[Offset: 0x48, Size: 24]
	SoftObjectPath ReplaceMat;//[Offset: 0x60, Size: 24]
	<FName,CurveFloat*> AdditionalParams;//[Offset: 0x78, Size: 60]

--------------------------------
Class: PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bCharacterComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 1]
	class Actor* PredictActorTemplate;//[Offset: 0x718, Size: 4]
	StaticMesh* MeshTemplate;//[Offset: 0x720, Size: 40]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x748, Size: 40]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x770, Size: 40]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x798, Size: 112]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x808, Size: 12]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x818, Size: 16]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x828, Size: 16]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x838, Size: 16]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0x848, Size: 16]
	LinearColor PredictLineColor;//[Offset: 0x858, Size: 16]
	PredictLineConfigParams PredictLineConfigParams;//[Offset: 0x868, Size: 12]
	PredictProjectilePathResult PredictResult;//[Offset: 0x880, Size: 184]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0x938, Size: 4]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0x93c, Size: 4]
	StaticMesh* SplineMeshTemplate;//[Offset: 0x940, Size: 4]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0x948, Size: 12]
	int RedrawCounter;//[Offset: 0x954, Size: 4]
	FString LuaFilePath;//[Offset: 0x958, Size: 12]
	void SetPredictParams(out const Vector InStartPoint, out const Vector InVelocity, out const Vector InAcceleration);// 0x35fa304
	void SetPredictLineColor(out const LinearColor NewColor);// 0x35fa280
	void SetPredictActorTemplate(class Actor InActorTemplate);// 0x35fa208
	void LoadPredictDefaultRes();// 0x35fa1f4
	Actor* GetBindPredictLineTarget();// 0x33ce0a8
	void EnableRedrawPredictLine();// 0x35fa1e0
	void BindPredictLineTarget(Actor* InCachedTarget);// 0x34386b8

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 12]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 12]
	Vector LaunchAcceleration;//[Offset: 0x18, Size: 12]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float ProjectileRadius;//[Offset: 0x28, Size: 4]
	float MaxSimTime;//[Offset: 0x2c, Size: 4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	byte TraceChannel;//[Offset: 0x31, Size: 1]
	byte[] ObjectTypes;//[Offset: 0x34, Size: 12]
	Actor*[] ActorsToIgnore;//[Offset: 0x40, Size: 12]
	float SimFrequency;//[Offset: 0x4c, Size: 4]
	float OverrideGravityZ;//[Offset: 0x50, Size: 4]
	float GravityScale;//[Offset: 0x54, Size: 4]
	float IgnoreGravityDis;//[Offset: 0x58, Size: 4]
	byte DrawDebugType;//[Offset: 0x5c, Size: 1]
	float DrawDebugTime;//[Offset: 0x60, Size: 4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: PredictLineMaterialParams
	MaterialParameterCollection* MaterialParamCollection;//[Offset: 0x0, Size: 4]
	FName ParamName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PredictLineConfigParams
	bool bShowEndPointEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ShowSplineCount;//[Offset: 0x4, Size: 4]
	float ShowSplineCountPercent;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 12]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0xc, Size: 28]
	HitResult HitResult;//[Offset: 0x28, Size: 144]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector Velocity;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x73c, Size: 88]
	Vector SplineUpDir;//[Offset: 0x794, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a0, Size: 1]
	byte ForwardAxis;//[Offset: 0x7a1, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x7a4, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x7a8, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x7ac, Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x7b0, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c0, Size: 1]
	void UpdateMesh();// 0x612aeb4
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x612adf0
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x612ad30
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x612ac6c
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x612aba8
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x612aae8
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x612a948
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x612a874
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x612a7b0
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x612a6ec
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x612a62c
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x612a568
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x612a4a4
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x612a3e4
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x612a320
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x612a25c
	Vector GetStartTangent();// 0x612a214
	Vector2D GetStartScale();// 0x612a1d4
	float GetStartRoll();// 0x612a1ac
	Vector GetStartPosition();// 0x612a164
	Vector2D GetStartOffset();// 0x612a124
	Vector GetSplineUpDir();// 0x612a0dc
	byte GetForwardAxis();// 0x612a0b4
	Vector GetEndTangent();// 0x612a06c
	Vector2D GetEndScale();// 0x612a02c
	float GetEndRoll();// 0x612a004
	Vector GetEndPosition();// 0x6129fbc
	Vector2D GetEndOffset();// 0x6129f7c
	float GetBoundaryMin();// 0x6129f54
	float GetBoundaryMax();// 0x36c8738

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28, Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x2c, Size: 4]
	Controller* OwnerController;//[Offset: 0x30, Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34, Size: 4]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x446e168
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x39221b8
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x39220fc
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x39220d4
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x39220ac
	PlayerController* GetOwnerPlayerController();// 0x3922084
	Pawn* GetOwnerPawn();// 0x392205c
	Controller* GetOwnerController();// 0x3922034
	Actor* GetOwnerActor();// 0x3922018

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponID;//[Offset: 0x100, Size: 4]
	int SkillID;//[Offset: 0x104, Size: 4]
	byte WeaponType;//[Offset: 0x108, Size: 1]
	byte weaponTypeNew;//[Offset: 0x109, Size: 1]
	byte WeaponHoldType;//[Offset: 0x10a, Size: 1]
	byte WeaponSingleHandType;//[Offset: 0x10b, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0x110, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x120, Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x12c, Size: 4]
	float LaunchGravityScale;//[Offset: 0x130, Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bUseAnimWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	bool bForceFinishPreviousSwitchWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x138, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f, Size: 1]
	bool bEnableVaultHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x144, Size: 4]
	int UnableVehicleHoldingTipID;//[Offset: 0x148, Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	int UnablePeekTipID;//[Offset: 0x150, Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x158, Size: 60]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x194, Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x1d0, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x1d4, Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x1d8, Size: 12]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x1e4, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x1e8, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x1f0, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x220, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x250, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x280, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x2b0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2e0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x310, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x340, Size: 48]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x370, Size: 60]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x3ac, Size: 60]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x3e8, Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	float StandbyAnimTimeInterval;//[Offset: 0x3f0, Size: 4]
	byte[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x3f4, Size: 12]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xf4, Size: 4]
	STExtraPlayerController* GlobalController;//[Offset: 0xfc, Size: 4]
	void UpdateComponentTick();// 0x34518a0
	STExtraWeapon* TryGetOwnerWeapon();// 0x39167a4
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x391677c
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x39166b8
	bool IsWeaponOwnerOBTarget();// 0x3916690
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x3916610
	bool IsWeaponLogicComponentTickEnabled();// 0x39165e8
	bool IsLocalOrSpectorPlayer();// 0x39165c0
	FString GetWeaponDetailInfo();// 0x3916500
	byte GetOwnerPawnRole();// 0x39164d8

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 352]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x160, Size: 24]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10, Size: 152]
	SlateBrush LargerProfileImage;//[Offset: 0xa8, Size: 152]
	FString Name;//[Offset: 0x140, Size: 12]
	FString Description;//[Offset: 0x14c, Size: 12]
	int DisplayPriority;//[Offset: 0x158, Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4, Size: 4]
	int PickUpSoundID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc, Size: 4]
	byte Type;//[Offset: 0x10, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0x100, Size: 24]
	FName LogicSocket;//[Offset: 0x118, Size: 8]
	FName AttachSocket;//[Offset: 0x120, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0x128, Size: 1]
	float AIMinAttackDist;//[Offset: 0x12c, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x130, Size: 4]
	float AIAttackDist;//[Offset: 0x134, Size: 4]
	ItemHandleBase* GetBackpackItemHandle();// 0x39235dc
	int GetAvailableBulletsNumInBackpack();// 0x39235b4

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4, Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc, Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18, Size: 8]
	BulletInClip WeaponBulletInClip;//[Offset: 0x20, Size: 16]
	uint32 WeaponShootID;//[Offset: 0x30, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x34, Size: 4]
	byte CurWeaponState;//[Offset: 0x38, Size: 1]
	byte CurShootType;//[Offset: 0x39, Size: 1]
	int CurShootTotalType;//[Offset: 0x3c, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x40, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x58, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int OperationIndex;//[Offset: 0x60, Size: 4]

--------------------------------
Class: BulletInClip
	int CurBulletNumInClip;//[Offset: 0x0, Size: 4]
	BulletInWeapon[] CurBulletIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BulletInWeapon
	int BulletID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x3c, Size: 4]
	FString OwnerCharacterName;//[Offset: 0x40, Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int SyncTicket;//[Offset: 0x50, Size: 4]
	bool bHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x36ba0e4
	static int GetWeaponSkillID(STExtraWeapon* Weapon);// 0x3925094

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x36ba0e4
	void ProcessTriggerEvent(enum Event);// 0x3651bec

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0x100, Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0x104, Size: 4]
	<byte,WeaponStateBase*> StateMap;//[Offset: 0x108, Size: 60]
	WeaponStateBase* GetWeaponState(byte Type);// 0x3923d64
	WeaponStateBase* GetCurrentState();// 0x3923d3c
	byte GetCurrentFreshWeaponStateType();// 0x3923d14

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0x100, Size: 12]
	delegate OnEndState;//[Offset: 0x10c, Size: 12]
	bool bCanEnterAnyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	byte FreshWeaponStateType;//[Offset: 0x11a, Size: 1]
	byte[] ConditionGateMap;//[Offset: 0x11c, Size: 12]
	byte SpesificTargetState;//[Offset: 0x128, Size: 1]
	bool bSyncSpesificStateToServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool TryChangeToSpesificTargetState();// 0x337d1c4

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x3ac, Size: 12]
	void PreChangeGrenadeAvatar(int InItemID);// 0x351de30
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x344e078
	FString GetItemAvatarHandlePath(int ItemID);// 0x446e168
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x446e168
	int GetDefaultAvatarID(int InAvatarID);// 0x446e168
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x351dcf4

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x228, Size: 12]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x238, Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x254, Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x258, Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x314, Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x318, Size: 4]
	int ItemType;//[Offset: 0x31c, Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x320, Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x348, Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x370, Size: 60]
	void VehicleEquipedDefaultAvatar__DelegateSignature(int AvatarID, int DefaultAvatarID);// 0x446e168
	void SyncChangeItemAvatar(int InItemID);// 0x346d2b8
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x353eb3c
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x353ea34
	void ResetItemAvatar();// 0x353ea20
	void RequestDownloadItemInBattle(int InItemID);// 0x337d2e4
	void ReportAvatarInfo(int InItemID);// 0x353e9a8
	void PreChangeItemAvatar(int InItemID);// 0x346d224
	void OnRep_ItemAvatarChanged();// 0x353e98c
	bool IsValidAvatar();// 0x353e964
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x353e934
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x3467600
	MeshComponent* GetItemBodyMesh();// 0x353e918
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance, MaterialInterface* MatBase);// 0x33e3bb8
	void DownloadItemInBattleCallBack(uint32 ItemID, uint32 ErrorCode);// 0x337cfcc
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x346d0ac
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x353e84c
	void AsyncChangeItemAvatar(int InItemID);// 0x346d004
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x346ce30
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x346cd30
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x351dcf4

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0xf4, Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0x100, Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0x128, Size: 40]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x150, Size: 40]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x339daa4
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x339d684
	bool HandleDrop(int InCount, enum Reason);// 0x339d0a0
	bool HandleDisuse(enum Reason);// 0x3388314
	BackpackComponent* GetBackpackComponent();// 0x33a3d0c
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x33a3c48

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]
	MaterialInterface* LobbyMatInstance;//[Offset: 0x30, Size: 40]

--------------------------------
Class: BackpackComponent.LuaActorComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0x154, Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x160, Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0x16c, Size: 12]
	delegate BatchItemUpdateDelegate;//[Offset: 0x178, Size: 12]
	delegate BatchItemDeleteDelegate;//[Offset: 0x184, Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0x190, Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0x19c, Size: 12]
	delegate ItemOperationInfoDelegate;//[Offset: 0x1a8, Size: 12]
	delegate AssociationOperationDelegate;//[Offset: 0x1b4, Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x1c0, Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x1cc, Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x1d8, Size: 12]
	delegate ItemHandleAddDelegate;//[Offset: 0x1e4, Size: 12]
	<int,int> PickupLimitSetting;//[Offset: 0x1f0, Size: 60]
	delegate ItemUpdatedDelegate;//[Offset: 0x22c, Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x238, Size: 12]
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0x244, Size: 12]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x250, Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x25c, Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x274, Size: 24]
	IncNetArray ItemListNetCache;//[Offset: 0x28c, Size: 24]
	<int,BattleItemData> CacheBattleItemMap;//[Offset: 0x2a4, Size: 60]
	ItemDefineID[] BroadcastInsertItemList;//[Offset: 0x2e0, Size: 12]
	ItemDefineID[] BroadcastUpdateItemList;//[Offset: 0x2ec, Size: 12]
	ItemDefineID[] BroadcastDeleteItemList;//[Offset: 0x2f8, Size: 12]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x308, Size: 12]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x314, Size: 60]
	int CapacityThreshold;//[Offset: 0x350, Size: 4]
	float Capacity;//[Offset: 0x354, Size: 4]
	float OccupiedCapacity;//[Offset: 0x358, Size: 4]
	float SafetyBoxCapacity;//[Offset: 0x35c, Size: 4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x360, Size: 4]
	int virtualitemid;//[Offset: 0x374, Size: 4]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	int[] NeedToShowTypeList;//[Offset: 0x384, Size: 12]
	bool bVerifyWeaponPackageData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x394, Size: 12]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x3e82d3c
	float UpdateCapacity();// 0x33e74b8
	void UnlockUpdateItemListReceive();// 0x3e82d28
	void TryMergeItemHandles(out const ItemDefineID DefineID, enum InItemStoreArea);// 0x3e82c54
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x3e82b30
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x3e82a44
	void ServerSetShowBounty(bool bInShowBounty);// 0x3e8297c
	void ServerSetCustomAccessories(int WeaponItemID, int Index, int ItemID);// 0x3e82838
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x3e82708
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x3e825e4
	bool RemoveItemHandle(out const ItemDefineID DefineID);// 0x3e82544
	void ReceiveItemList();// 0x356bc80
	void ReceiveCapacity();// 0x3444cf8
	int PreCheckCanPickupBagAvatar(BattleItemHandleBase* NewHandle, BattleItemHandleBase* OldHandle, enum reson);// 0x3e82434
	void PostItemHandleEquippingState(out const ItemDefineID DefineID, bool bEquipping);// 0x3e82358
	bool PickupItemFromWrapperDetail(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x3e82014
	bool PickUpItem_Default(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x3e81d18
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x3e819d4
	void PickupBattleItemOnPlane();// 0x3e819c0
	bool PickItem_IntoSafetyBox(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x3e816c4
	bool PickItem_IntoBackpack(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x3e813c8
	void OnRep_specialCountLimit();// 0x3e813b4
	void OnRep_ItemListNet();// 0x3e813a0
	void OnRep_Capacity();// 0x3e8138c
	void NotifyItemUpdated(out const ItemDefineID DefineID);// 0x3e812f4
	void NotifyItemRemoved(out const ItemDefineID DefineID);// 0x3e8125c
	void NotifyItemListUpdated();// 0x3e81240
	void NotifyCapacityUpdated();// 0x3e81224
	BattleItemHandleBase* NewItemHandle(out const ItemDefineID DefineID);// 0x3e81184
	ItemDefineID NewItemDefineID(out const ItemDefineID DefineID);// 0x3e810d0
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x3e8100c
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x3e80f50
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x3e80e9c
	void ModifyAimNotAutoUse(bool bAdd);// 0x3e80dd4
	void LockUpdateItemListReceive();// 0x3e80dc0
	BattleItemData ItemNet2Data(out const NetArrayUnit NetItem);// 0x3e80c04
	bool IsNeedToShowInBackpack(int TypeDefineID);// 0x3e80b84
	bool IsItemListUpdatedHasSomeItemTypes(out const int[] ItemTypes);// 0x3e80ab0
	bool IsItemListUpdatedHasSomeItemSubTypes(out const int[] ItemSubTypes);// 0x3e809dc
	bool IsItemListUpdatedHasSomeItems(out const int[] ItemTypeSpecificIDs);// 0x3e80908
	bool IsItemListUpdatedHasOneItemType(int ItemType);// 0x3e80888
	bool IsItemListUpdatedHasOneItemSubType(int ItemSubType);// 0x3e80808
	bool IsItemListUpdatedHasOneItem(int ItemTypeSpecificID);// 0x3e80788
	bool IsItemExist(out const ItemDefineID DefineID);// 0x3e806e8
	bool IsEnableWeaponAttachmentBindToWeapon();// 0x3665438
	bool IsCustomIgnoreAccessories(int WeaponID, int Index);// 0x3e80624
	bool IsCustomAccessories(int WeaponID, int ItemID);// 0x3e80560
	bool IsBackPackContainItemId(int ItemID);// 0x3e804e0
	bool IsAutoUse(int ItemID);// 0x446e168
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x3e8041c
	bool HasTagSub(int ItemID, out const FName TagName);// 0x446e168
	bool HasItemBySubType(int SubType);// 0x3e8039c
	bool HasItemByDefineID(out const ItemDefineID DefineID);// 0x3e80304
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x3e80240
	void HandleDropInDisuse(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle, enum Reason, float OccupiedCapacityBeforeDisuse);// 0x3e800d8
	World* GetWorld_BP();// 0x3e800b0
	int GetUnEquipItemNumByItemId(int ItemID);// 0x3e80030
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x3e7ff90
	SpecialPickInfo GetSpecialItemBefore(int ItemResId);// 0x3e7ff00
	float GetSafetyBoxCapacity();// 0x3419020
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, enum AdditionalDataNameType);// 0x3e7fe00
	int GetItemSubType(int ItemID);// 0x446e168
	BattleItemData[] GetItemListByDefineID(out const ItemDefineID DefineID);// 0x3e7fc90
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x3e7fc58
	ItemHandleBase*[] GetItemHandleList();// 0x3e7fbe8
	int GetItemCountByType(int InItemType);// 0x3e7fb68
	int GetItemCountByItemSpecialID(int InItemSpecialID);// 0x3e7fae8
	BattleItemData GetItemByDefineID(out const ItemDefineID DefineID);// 0x3e7fa24
	float GetItemAssociateWeights(out const BattleItemData InItemData);// 0x3e7f96c
	BattleItemData GetFirstItemBySubType(int SubType);// 0x3e7f8c0
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(out const ItemDefineID DefineID);// 0x3e7f7fc
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x3e7f738
	BattleItemData[] GetAllItemList(enum InItemStoreArea);// 0x3e7f5e0
	enum GetAIPickupType(int ItemID);// 0x3661194
	void ForceNetUpdate();// 0x35c6f04
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x3e7f4c0
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x3e7f3e4
	BattleItemHandleBase* CreateItemHandleInternal(out const ItemDefineID DefineID);// 0x3e7f344
	ItemHandleBase* CreateItemHandle(out const ItemDefineID DefineID);// 0x3e7f2a4
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x3e7f1d0
	void ClientBroadcastItemOperationFailedDelegate(const ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x3e7f0c8
	void ClientBroadcastItemOperationDelegate(const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x3e7efc0
	int CheckSpecialMaxCountForItem(ItemDefineID DefineID, int Count);// 0x3e7eeec
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x3e7ee0c
	bool CheckPickUpItemDefaultSuccess(out const ItemDefineID DefineID, bool bPickupSucc, bool bAutoEquip);// 0x3e7ecd0
	int CheckLeftLimitCountForItem(int InItemID, int InCount);// 0x3e7ec04
	void CheckItemEmptyInBackpack(int InItemID);// 0x3e7eb8c
	int CheckCapacityForItem(ItemDefineID DefineID, int Count, enum InItemStoreArea);// 0x3e7ea74
	bool ChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x3e7e954
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x3e7e8bc
	bool CacheItemAssociationBeforeDisuse(ItemDefineID DefineID, enum Reason);// 0x3e7e7e0
	void BroadcastItemOperCountDelegate(out const ItemDefineID DefineID, enum OperationType, int Count);// 0x3e7e6c8
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x3e7e62c
	void BroadcastItemOperationFailedDelegate(out const ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x3e7e514
	void BroadcastItemOperationDelegate(out const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x3e7e3fc
	bool AddItemHandle(out const ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x3e7e318
	void AddBattleItemPickupOnPlane(out ItemDefineID DefineID, out BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x3e7e07c

--------------------------------
Class: CustomAccessoriesData
	int WeaponID;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int ItemID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleItemPickupAfterLand
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	BattleItemPickupInfo PickupInfo;//[Offset: 0x18, Size: 64]
	enum Reason;//[Offset: 0x58, Size: 1]
	enum BattleItemClientPickupType;//[Offset: 0x59, Size: 1]

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] IncArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 64]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	enum ItemStoreArea;//[Offset: 0x1d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x2c, Size: 12]
	int Durability;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 1]
	byte Reason;//[Offset: 0x19, Size: 1]
	int Count;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<enum,FName> SlotTypeToSocket;//[Offset: 0x718, Size: 60]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x754, Size: 60]
	int gender;//[Offset: 0x790, Size: 4]
	delegate OnAvatarEquipped;//[Offset: 0x794, Size: 12]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0x7a0, Size: 120]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0x818, Size: 60]
	int HeadAvatarID;//[Offset: 0x868, Size: 4]
	int PreHeadAvatarID;//[Offset: 0x86c, Size: 4]
	SoftObjectPath HeadMeshSoftPath;//[Offset: 0x870, Size: 24]
	class AnimInstance* HeadAniminstanceClass;//[Offset: 0x888, Size: 4]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88d, Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c, Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89d, Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0x8a0, Size: 60]
	enum[] OpenResetHideBone;//[Offset: 0x8dc, Size: 12]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x8e8, Size: 60]
	int[] ignoreSlots;//[Offset: 0x924, Size: 12]
	int WholeBodyModelID;//[Offset: 0x930, Size: 4]
	int CurrentClothID;//[Offset: 0x934, Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0x938, Size: 12]
	<enum,int> AvatarRectifyData;//[Offset: 0x944, Size: 60]
	delegate OnAvatarRectifyDataChange;//[Offset: 0x980, Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98c, Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x990, Size: 60]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x9cc, Size: 60]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0xa08, Size: 60]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0xa44, Size: 60]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0xa80, Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0xabc, Size: 12]
	delegate OnClothParticleEquipped;//[Offset: 0xac8, Size: 12]
	delegate OnClothPlaneCutChanged;//[Offset: 0xad4, Size: 12]
	delegate OnEnableEffectTickChanged;//[Offset: 0xae0, Size: 12]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0xaec, Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0xb28, Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xb2c, Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xb30, Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xb34, Size: 12]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xb40, Size: 12]
	float ConfigBoundScale;//[Offset: 0xb4c, Size: 4]
	int EnableEquipAvatarPendant;//[Offset: 0xb50, Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb54, Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb55, Size: 1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xb58, Size: 60]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xb98, Size: 56]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xbd0, Size: 40]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 1]
	bool bEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbfb, Size: 1]
	bool HasVehicleAjustHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbfc, Size: 1]
	int BodySlotStateChangeCount;//[Offset: 0xc00, Size: 4]
	float CutPlaneW;//[Offset: 0xc04, Size: 4]
	bool EnableClothPlaneCut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc08, Size: 1]
	SkinnedMeshComponent* ClothSkinMeshTobeCut;//[Offset: 0xc20, Size: 4]
	bool bEnableAvatarReAttachFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc24, Size: 1]
	bool bVisibleChangeRefreshAvatarReAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc25, Size: 1]
	enum[] AlwaysResetReAttachSlotList;//[Offset: 0xc28, Size: 12]
	<enum,AvatarReAttachConfigCollection> PendingAvatarReAttachCollectionMap;//[Offset: 0xc34, Size: 60]
	<enum,ReAttachConfig> FinalWorkingAvatarReAttachMap;//[Offset: 0xc70, Size: 60]
	int BackAircraftType;//[Offset: 0xcac, Size: 4]
	int BackSkateType;//[Offset: 0xcb0, Size: 4]
	bool EnableEffectTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 1]
	int TypeToInt(enum InSlotType);// 0x342ab98
	void TemporarySetHidedBonesVisibility(bool Visible);// 0x342ab18
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x342a9dc
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x342a908
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x342a834
	bool SetSkinMaterial(int SlotID, out const ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x342a714
	void SetNormalMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x342a59c
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x342a424
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x342a3ac
	void SetClothParticleVisibility(int SlotID, bool Visible, bool IsForCE);// 0x342a298
	void SetCastPhotonShadow(bool Enable);// 0x342a218
	bool SetBodySuitsMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, BackpackAvatarHandle* InAvatarHandle);// 0x342a0dc
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x3429fc8
	void SetAvatarGender(int AGender);// 0x3427f88
	void SetAvatarForceLOD(enum SlotType, int LODLevel);// 0x3429f0c
	void SetAllMeshCharMode(bool bMainChar);// 0x3429e8c
	void ResetBackpackPendant(int InSlotID, BackpackAvatarHandle* AvatarHandle);// 0x3429dd0
	void ResetAnimDynamicsByMeshComp(MeshComponent* MeshComp);// 0x3429d50
	void ResetAllAnimDynamics();// 0x3429d34
	void RequestSyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x3429c68
	void ReportAvatarInfo(out <int,int> Avata);// 0x3429b5c
	void RemoveForceReplaceOnVehicle(int SlotID);// 0x3429ae4
	void RemoveClothParticleEffect(int SlotID);// 0x3429a6c
	void RemoveAvatarReAttach(const enum InTriggerSlot);// 0x34299f4
	void RemoveAttachMesh(int SlotID);// 0x342997c
	void RefreshAvatarReAttachForAssociatedSlot(const enum InScaledSlot, const enum InAssociatedSlot);// 0x34298c0
	void RefreshAvatarReAttach();// 0x34298ac
	void ProcessUnDownloadHead();// 0x3429890
	void ProcessClothSuits();// 0x3429874
	void ProcessChangedVehicleSeat();// 0x446e168
	void ProcessAvatarRectify();// 0x3429858
	void PreProcessBeforeLoadMesh();// 0x342983c
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x446e168
	void PostProcessAfterLoadMesh();// 0x3429820
	void OnSyncLoadBattleHandlesDone(out const BattleItemHandleBase*[] AvatarHandles);// 0x3429754
	void OnRespawned();// 0x3332384
	void OnRep_EnableClothPlaneCut();// 0x3429740
	void OnRep_BodySlotStateChangedInternal();// 0x342972c
	void OnRep_BodySlotStateChanged();// 0x3429710
	void OnRecycled();// 0x337d1f4
	void OnPlayerLeaveState(enum State);// 0x3429698
	void OnPlayerEnterState(enum State);// 0x3429620
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x342954c
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x3429478
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x34293c8
	void OnEnterOrLeaveVehicle();// 0x446e168
	void OnEnableEffectTickChanged__DelegateSignature(bool IsEnable);// 0x446e168
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x34292a8
	void OnClothPlaneCutChanged__DelegateSignature(bool IsEnable);// 0x446e168
	void OnClothParticleEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemID);// 0x446e168
	void OnAvatarRectifyDataChange__DelegateSignature();// 0x446e168
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x3429134
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x3429058
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x3428f20
	void OnAvatarEquippedCall(enum SlotType, bool bEquipped, int ItemID);// 0x3428e14
	void OnAvatarEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemID);// 0x446e168
	void OnAvatarAttachEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemID);// 0x446e168
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x3428d94
	void OnAsyncLoadBattleHandlesDone_Download(int InAsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x3428be4
	void OnAsyncLoadBattleHandlesDone(int InBodySlotStateChangeCount, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x3428a34
	void ModifySlotFakeID(enum Slot, int FakeID);// 0x3428978
	void MarkAvatarBoneRetargetLODFeature(const enum InAvatarSlot, const bool InIsUseEnable);// 0x34288ac
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x3428784
	bool IsWearingAvatarNeedParachuteWind();// 0x446e168
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x342865c
	bool IsTeammate();// 0x337d1c4
	bool IsSelf();// 0x337d16c
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x3428560
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x3428464
	bool IsPendantExistAndBackpackHided(int SlotType);// 0x34283e4
	bool IsNeedModifyVehicle(int TemplateID);// 0x3428364
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x3428298
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x3428168
	bool IsInVehicleTemplateConfig(int VehicleID, int TemplateID);// 0x34280a4
	bool IsCutPlaneOnVehicleOpen();// 0x446e168
	enum IntToType(int InSlotID);// 0x3428030
	void InitMasterComponent();// 0x342801c
	void Initialize();// 0x3428000
	void InitialAvatarParam(int AGender);// 0x3427f88
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x3427f10
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x3427e10
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x3427d2c
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh);// 0x446e168
	bool HaveSubTypeMesh(enum SlotType, int SubType);// 0x3427c68
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x3427bd0
	bool HandleUnEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x3427af4
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x3427a7c
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x3427a04
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x3427928
	bool HandleEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x342784c
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x3427798
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x3427688
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x34275d4
	int GetRepalceIDOnVehicle(int OriginID);// 0x446e168
	enum GetPendantSlotType();// 0x34275a4
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x342751c
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x3427458
	MaterialInstance* GetMaterial(out const MeshPackage MeshPack);// 0x34273a4
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x3427324
	int GetEquipmentSkinItemID(int InItemID);// 0x342729c
	bool GetEquimentMeshBySlot(int Slot, out MeshData MeshPack);// 0x34271a4
	int[] GetDefaultBodyItemIDList();// 0x34270e4
	FName GetClothMaterialSkinName(enum SlotType, bool bSuit);// 0x3427010
	FName GetClothMaterialColorName(enum SlotType, bool bSuit);// 0x3426f3c
	MaterialInterface* GetCharSkinMaterial(MeshComponent* MasterMesh, enum SlotType, BackpackAvatarHandle* InAvatarHandle);// 0x3426e34
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle);// 0x446e168
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x3426d2c
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x3426c68
	int GetAvatarIDBySlotID(int SlotID);// 0x3426be8
	enum GetAttachPartSlotType();// 0x3426bb8
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x3426b30
	bool GetAttachMeshResRef(out const AvatarAttachMeshData MeshPack, out SoftObjectPath OutAssetRef);// 0x34269ac
	void GetAllEquipItemsWithoutFake(out int[] EquipItems);// 0x34268e0
	void GetAllEquipItems(out int[] EquipItems);// 0x3426814
	void GenerateVehicleTemplateConfig();// 0x446e168
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x446e168
	void ForceReplaceAvatarOnVehicle(SlotID(Int) SlotID);// 0x342679c
	void FillVehicleTemplateConfig(int TemplateID, int VehicleID);// 0x34266e0
	bool EnableEquipAvatarPendantFeature();// 0x34266b8
	bool DeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x34265e4
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x446e168
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x446e168
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x3426500
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x3426468
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x34263e0
	bool CheckIsHiddenByOther(int InItemResID);// 0x3426360
	void CheckAvatarReAttachForSlotAssociation(const enum InSlot);// 0x34262e8
	void CheckAvatarReAttachForSlot(const enum InScaledSlot);// 0x3426270
	void CheckAvatarReAttachCancelForSlotAssociation(const enum InScaledSlot);// 0x34261f8
	void CancelAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x3426000
	void BPOnRemoveAvatarReAttach();// 0x446e168
	void BPOnDeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x446e168
	bool BPIsNeedModifyVehicle(int VehicleID, int TemplateID, int SeatIdx);// 0x446e168
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x3425f44
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x3425e88
	void ApplyMeshCompCollision(int SlotID);// 0x3425e10
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x3425d44
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x3425c88
	void ApplyAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x3425a90
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x3425944
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x3425888
	void ApplyAnimListOverride(ItemHandleBase* InItemHandle, bool IsPutOn);// 0x34257bc
	void AddAvatarReAttach(const enum InTriggerSlot, out const AvatarReAttachConfigCollection InAvatarReAttachCollection);// 0x34256cc
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x342564c
	void ActivateLimitEffect(FName ComponentTag, bool bActivate);// 0x3425578

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<int,FName> SlotToSocket;//[Offset: 0x430, Size: 60]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x46c, Size: 60]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x4a8, Size: 60]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x4e4, Size: 60]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x520, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x52c, Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x538, Size: 12]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x544, Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool IsLoadMeshProcessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x554, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x5fc, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x600, Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x61c, Size: 12]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x628, Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x664, Size: 4]
	delegate OnRegisterEntityTick;//[Offset: 0x668, Size: 12]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	enum[] LoadWithBatchBodyFilterTypes;//[Offset: 0x678, Size: 12]
	int[] LoadWithBatchBodyFilterTemplateIDs;//[Offset: 0x684, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x342a9dc
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x342a908
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x342a834
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x342a424
	void SetLoadMeshWithBatchBody(bool bFlag);// 0x366ee14
	void ResetSlotSyncData();// 0x366edf8
	void RequestSyncLoadMeshesWithPath(out const SoftObjectPath[] AssetPathList);// 0x366ecc4
	void RequestSyncLoadMeshes();// 0x366ecb0
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x337d210
	void RequestAsyncLoadMeshes();// 0x366ec9c
	void RequestAsyncLoadHandles();// 0x366ec88
	void RemoveEquippedAvatar(int InSlotID);// 0x366ec08
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x366eb80
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x366ea70
	void ReloadAllLogicAvatar(enum ReloadType);// 0x366e9f0
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x366e970
	void RegisterEntityTick(AvatarEntity* Entity, bool isRegister);// 0x366e8ac
	bool PutOnEquipmentByResID(int resID);// 0x366e824
	bool PutOffEquimentByResID(int resID);// 0x366e79c
	void PreProcessBeforeLoadMesh();// 0x342983c
	void PostProcessAfterLoadMesh();// 0x3429820
	void OnSyncLoadMeshesDone();// 0x366e788
	void OnRespawned();// 0x3332384
	void OnRep_BodySlotStateChanged();// 0x3429710
	void OnRegisterEntityTick__DelegateSignature();// 0x446e168
	void OnRecycled();// 0x337d1f4
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x3429478
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x34293c8
	void OnAvatarMeshMaterialApplyed__DelegateSignature(MeshComponent* MeshComponent);// 0x446e168
	void OnAvatarMeshEquippedEventBP(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x366e614
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x3429134
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemID);// 0x446e168
	void OnAvatarBeginLoadMesh__DelegateSignature();// 0x446e168
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x446e168
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x3428d94
	void OnAsyncLoadHandlesDone_Download(out const ItemHandleBase*[] AvatarHandles);// 0x366e540
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x366e46c
	void OnAllAvatarHandleLoadedDoneSync();// 0x366e458
	void OnAllAvatarHandleLoadedDone();// 0x366e444
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x3667700
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x3428784
	bool IsValidStateToRequestDownload();// 0x366e41c
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x366e350
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x3428298
	bool IsItemHasEquipped(int InItemID);// 0x3666d58
	bool IsForceRecreateMeshBoneRetargetAdaptSlot(const enum InTestSlot);// 0x366e2c8
	bool IsEnableItemDownload(int ItemID);// 0x446e168
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x3666c20
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x366e240
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x366e1b8
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x366e0f4
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x3427688
	enum GetMeshTypeBySlot(int InSlotID);// 0x366e074
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x366dff4
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x342751c
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x366df84
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x366de74
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x366dd64
	AvatarEntityFactory* GetEntityFactory();// 0x366dd34
	SoftObjectPath GetBatchDefaultBodyPath();// 0x446e168
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x366dc50
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x366db48
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x3426b30
	MeshComponent*[] GetAllMeshComponents(bool CheckVisible);// 0x366da38
	int GetAdvanceVehicleInsideSlotID();// 0x366da08
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x446e168
	bool DeleteAvatarMeshData(int InSlotID, bool DestroyComp);// 0x34265e4
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x3426500
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x366d944
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x366d75c
	bool CanLoadItemWithBatchBody(out const ItemDefineID InItemID);// 0x366d6c4
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x366d5f0
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs, out ItemDefineID[] OutRequestItemList);// 0x366d484
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x366d374
	void BPCreateAvatarCustomHandle(int SlotID, int ItemID, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x446e168
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x337cd54

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x228, Size: 60]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x264, Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x2a0, Size: 24]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x2b8, Size: 12]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x2c4, Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x2d0, Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x2dc, Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x2e8, Size: 12]
	int ItemType;//[Offset: 0x2f4, Size: 4]
	enum CustomType;//[Offset: 0x2f8, Size: 1]
	<int,ForceEquipSlotInfo> ForceEquipItemLogic;//[Offset: 0x2fc, Size: 60]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 1]
	int SubSlotStartNum;//[Offset: 0x344, Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x348, Size: 4]
	<int,enum> SlotHideStateMap;//[Offset: 0x34c, Size: 60]
	<int,TempAvatarSlotDesc> TempRunningSlotDesc;//[Offset: 0x388, Size: 60]
	int[] AlawysHideResetOperation;//[Offset: 0x40c, Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x41c, Size: 12]
	void SetForceHideState(int InSlotID, enum InForceHideState);// 0x3667a08
	void RemoveTempRunningSlotDesc(int SlotID, int Index);// 0x366794c
	void RemoveForceEquipItem(int SlotID);// 0x36678d4
	void RemoveAllEquippedItem();// 0x36678c0
	void OnRespawned();// 0x3332384
	void OnRep_BodySlotStateChanged();// 0x3429710
	void OnRecycled();// 0x337d1f4
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x342954c
	void OnHandleUnequipSlot(int InSlotID);// 0x3667848
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x36677a0
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x34293c8
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x34292a8
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x446e168
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x3429058
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x3428f20
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x446e168
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x446e168
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x446e168
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x3667700
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x36675f0
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x36674e0
	bool ModifyViewDataByForceHide(int InSlotID, bool bHide);// 0x3667414
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x3667304
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x36671f4
	bool ModifySyncDataByForceHide(int InSlotID, enum HideState);// 0x3667130
	int MakeStateInfo(out const int[] InSlotDesc);// 0x366705c
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x3666f90
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x3428560
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x3666eac
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x3428168
	bool IsEquippedThoseItemList(out const int[] InItemListID);// 0x3666dd8
	bool IsEquippedItemID(int InItemID);// 0x3666d58
	bool IsEquippedItemDefineID(out const ItemDefineID InItemID);// 0x3666cc0
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x3666c20
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x3666b88
	bool HandleUnequipSlot(int InSlotID);// 0x3666b08
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x3666a70
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x3666890
	void HandleItemResetOrderDesc();// 0x366687c
	void HandleItemResetOperation();// 0x3666868
	void HandleItemReplaceRelation();// 0x3666854
	void HandleItemHideRelation();// 0x3666840
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x3666744
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x366659c
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x36663f4
	bool GetViewDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x3666318
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x3666200
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x3666058
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x3665eb0
	bool GetSyncDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x3665dd4
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x3665ce0
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x3665c48
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x3665ba8
	enum GetForceHideState(int InSlotID, int ItemID);// 0x3665adc
	ItemDefineID GetEquippedItemDefineID3(int InSlotID);// 0x3665a48
	void GetEquippedItemDefineID2(int InSlotID, out ItemDefineID ItemDefineID, out ItemDefineID RealShowItemDefineID);// 0x3665918
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x3665884
	int GetAvatarSlotID(int InSubSlotID);// 0x3665804
	void ClientPostProcessViewDataMiddle();// 0x36657e8
	void ClientPostProcessViewDataBefore();// 0x345b448
	void ClientPostProcessViewDataAfter();// 0x3537afc
	void ClientBuildAvatarRelationData();// 0x36657d4
	void ClientBodySlotStateChanged();// 0x36657c0
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x3665678
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x3665498
	void BPHandleIgnoreReplace();// 0x34677a0
	bool BPClientPostProcessViewDataMiddle();// 0x3665468
	bool BPClientPostProcessViewDataBefore();// 0x3665438
	bool BPClientPostProcessViewDataAfter();// 0x36464b8
	void AddForceEquipItem(int SlotID, int ItemID, enum HideState);// 0x3665338

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 24]
	int gender;//[Offset: 0x38, Size: 4]
	int HideState;//[Offset: 0x3c, Size: 4]
	int ReplaceState;//[Offset: 0x40, Size: 4]
	bool IsExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x48, Size: 20]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	enum SlotDescDiff;//[Offset: 0x5d, Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 24]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0, Size: 1]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int NumID;//[Offset: 0xc, Size: 4]
	int ParticleID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 12]
	int gender;//[Offset: 0xc, Size: 4]
	int BaseID;//[Offset: 0x10, Size: 4]
	int UpdateFlag;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AvatarSyncData
	int ItemID;//[Offset: 0x0, Size: 4]
	int AdditionalItemID;//[Offset: 0x4, Size: 4]
	int SlotID;//[Offset: 0x8, Size: 4]
	int SubSlotID;//[Offset: 0xc, Size: 4]
	int HideState;//[Offset: 0x10, Size: 4]
	int ReplaceState;//[Offset: 0x14, Size: 4]
	int FakeItemID;//[Offset: 0x18, Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 1]
	enum OperationType;//[Offset: 0x1d, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 20]
	enum ForceHideState;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ForceEquipSlotInfo

--------------------------------
Class: TempAvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	AvatarTableData RelationData;//[Offset: 0x4, Size: 124]
	int[] ReplaceDesc;//[Offset: 0x80, Size: 12]
	int[] HideDesc;//[Offset: 0x8c, Size: 12]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: AvatarTableData
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	int[] HideFlags;//[Offset: 0x8, Size: 12]
	int[] ReplaceFlags;//[Offset: 0x14, Size: 12]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x20, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x2c, Size: 12]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x38, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x44, Size: 12]
	int[] ConflictConfig;//[Offset: 0x50, Size: 12]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x5c, Size: 12]
	int HideBoneSlotID;//[Offset: 0x68, Size: 4]
	int HideBoneType;//[Offset: 0x6c, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x70, Size: 12]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	MeshComponent* MeshComp;//[Offset: 0x4, Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0xc, Size: 36]

--------------------------------
Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 12]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0xc, Size: 12]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x68, Size: 12]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bAutoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]
	bool EnableCullDist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 1]
	float CullDist;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0xc, Size: 12]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18, Size: 24]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x30, Size: 12]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x34548b4
	void AsyncLoadCustomAssetDone();// 0x34548a0
	bool ApplyCustomInfo();// 0x34533b0

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20, Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28, Size: 8]
	void SetCustomID(int InCustomID);// 0x3454528
	MeshComponent* GetOwnerMeshComp();// 0x3454500
	ActorComponent* GetOwnerComp();// 0x34544d8
	bool ClearCustomInfo();// 0x34533f4
	bool ApplyCustomInfo();// 0x34533b0

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0, Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 12]
	CustomMatColor[] ColorConfig;//[Offset: 0x14, Size: 12]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	float Scalar;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	LinearColor Color;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	Texture* Textrue;//[Offset: 0x10, Size: 40]
	FString TextruePath;//[Offset: 0x38, Size: 12]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c, Size: 4]
	int SubSlotID;//[Offset: 0x20, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28, Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 1]
	FName SocketName;//[Offset: 0x100, Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x108, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x148, Size: 60]
	void UpdateVisibility();// 0x33886c4
	void UnRegisterTick();// 0x33886a8
	void TickEntity();// 0x3381b74
	void SetSocketName();// 0x3381384
	void SetParentDefineID(ItemDefineID ParentID);// 0x338861c
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x3388544
	void RevertEntityMeshData();// 0x3388530
	void RenderEntity(out SoftObjectPath SoftPath);// 0x3388454
	void RegisterTick();// 0x3388438
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x33874b4
	void PutOnDefaultEquipment(enum SlotType);// 0x33883b8
	void OnPostRender();// 0x338839c
	bool IsEntityAvailable(enum VisibilityType);// 0x3388314
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x3388248
	void Init(int SlotID, int SubSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x3388140
	enum GetMeshType();// 0x3388110
	MeshData GetMeshData();// 0x33880ac
	BattleItemHandleBase* GetLoadedHandle();// 0x3388084
	ItemDefineID GetDefineID();// 0x3388030
	void EnterRenderPipeline();// 0x3388014
	void EnterLogicPipeline();// 0x3387ff8
	void DrawOutline(bool bEnable);// 0x3387f70
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x3387e8c
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x3387dc0
	void ClearEquipmentLogic(bool putDefault);// 0x3387d38
	void ClearEntity(bool ForceClear);// 0x3387cb0
	void ApplyAnimation();// 0x3387c94
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x3387c14

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0xf4, Size: 1]
	enum SubSlot;//[Offset: 0xf5, Size: 1]
	enum specialType;//[Offset: 0xf6, Size: 1]
	enum ForceMeshType;//[Offset: 0xf7, Size: 1]
	enum ForceLODMeshType;//[Offset: 0xf8, Size: 1]
	<enum,int> SuitConfig;//[Offset: 0xfc, Size: 60]
	MeshPackage MeshPack;//[Offset: 0x138, Size: 568]
	MeshPackage replacedMeshPack;//[Offset: 0x370, Size: 568]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x5a8, Size: 12]
	enum[] hiddenFlags;//[Offset: 0x5b4, Size: 12]
	enum[] subHiddenFlags;//[Offset: 0x5c0, Size: 12]
	enum[] ReplaceFlags;//[Offset: 0x5cc, Size: 12]
	enum[] ignoreFlags;//[Offset: 0x5d8, Size: 12]
	AvatarPostOperation[] postOperation;//[Offset: 0x5e4, Size: 12]
	BackpackComponent* pBackpackComp;//[Offset: 0x5f0, Size: 4]
	int ItemCapacity;//[Offset: 0x5f4, Size: 4]
	int Durability;//[Offset: 0x5f8, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x604, Size: 36]
	enum hideBoneSlot;//[Offset: 0x628, Size: 1]
	FName hideBoneName;//[Offset: 0x630, Size: 8]
	FName[] hideBoneNameArray;//[Offset: 0x638, Size: 12]
	enum HideBoneType;//[Offset: 0x644, Size: 1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x648, Size: 60]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x684, Size: 12]
	int PendantConfigIndex;//[Offset: 0x690, Size: 4]
	float PendantScale;//[Offset: 0x694, Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x698, Size: 4]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x69c, Size: 12]
	byte CharacterAnimOverrideType;//[Offset: 0x6a8, Size: 1]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x6b0, Size: 64]
	BattleItemAdditionalData[] ArmorAttachmentAdditionalDataList;//[Offset: 0x6f0, Size: 12]
	ArmorAttachItemUnit[] CachedArmorAttachmentListBeforeDrop;//[Offset: 0x6fc, Size: 12]
	AvatarReAttachConfigCollection AvatarReAttachCollection;//[Offset: 0x708, Size: 12]
	bool bForceUseClothAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 1]
	CharacterEffectCfgBase*[] SkinEffectCfgs;//[Offset: 0x718, Size: 12]
	void SetItemDurability(int InDurability);// 0x339de04
	void SetItemCapacity(int InCapacity);// 0x339dd8c
	void PreLocalHandleDisuse();// 0x339dd78
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x339dbec
	bool IsSwimConfig();// 0x446e168
	bool HasRibbon();// 0x339dbc4
	bool HasCustomInfo();// 0x339db9c
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x339daa4
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x339d98c
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x339d684
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x339d540
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x339d440
	bool HandleMeshpackPostProcess(out const MeshPackage InMeshPack, out MeshPackage OutMeshPack, Object* Outer);// 0x339d2c8
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x339d1fc
	bool HandleEnable(bool bEnable);// 0x339d16c
	bool HandleDrop(int InCount, enum Reason);// 0x339d0a0
	bool HandleDisuse(enum Reason);// 0x3388314
	BackpackComponent* GetBackpackComponent();// 0x339d078
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity, enum Reason, enum DisuseReason);// 0x339cf20
	bool BPOnCharacterAttrChangedWithDetailEvent(float resultVal);// 0x339ce98
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason);// 0x339ce10
	void AutoEquipChips();// 0x339cdf4

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* maleLODStMesh;//[Offset: 0x58, Size: 40]
	StaticMesh* femaleLODStMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0xd0, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xf8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0x120, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0x148, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x170, Size: 40]
	MaterialSet[] additionalMaleMats;//[Offset: 0x198, Size: 12]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1a4, Size: 12]
	MaterialInterface* baseMat;//[Offset: 0x1b0, Size: 4]
	class AnimInstance* animBP;//[Offset: 0x1b4, Size: 4]
	AnimSequence* LobbyIdleAnim;//[Offset: 0x1b8, Size: 40]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	enum EffectCreateType;//[Offset: 0x1e1, Size: 1]
	AvatarEffectData[] EffectDataList;//[Offset: 0x1e4, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x1f0, Size: 12]
	class AnimInstance* animBPClass;//[Offset: 0x200, Size: 40]

--------------------------------
Class: AssetPackage

--------------------------------
Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0, Size: 40]
	enum targetSlot;//[Offset: 0x28, Size: 1]
	MaterialInterface* targetBaseMat;//[Offset: 0x30, Size: 40]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	enum ValidMethod;//[Offset: 0x68, Size: 1]
	enum ValidDevice;//[Offset: 0x69, Size: 1]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool bIsActivateWithMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 1]
	bool IsLobbyActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x70, Size: 12]
	ParticleSystem* ParticleSystem_F;//[Offset: 0x80, Size: 40]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName AttachSocket;//[Offset: 0x40, Size: 8]
	FName SlotName;//[Offset: 0x48, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]

--------------------------------
Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0, Size: 1]
	enum operationWhenReplaced;//[Offset: 0x1, Size: 1]
	enum operationWhenHidden;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 12]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc, Size: 12]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 12]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x4, Size: 4]
	UAECharAnimListCompBase* AnimListCompInstance;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x174, Size: 12]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x10c, Size: 60]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x148, Size: 12]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x4, Size: 12]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x10, Size: 72]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 12]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0xc, Size: 60]

--------------------------------
Class: ArmorAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum SlotAdditionalType;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AvatarReAttachConfigCollection
	ReAttachConfig[] AvatarReAttachList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ReAttachConfig
	enum ReAttachSlot;//[Offset: 0x0, Size: 1]
	enum TriggerSlot;//[Offset: 0x1, Size: 1]
	int Priority;//[Offset: 0x4, Size: 4]
	bool bForceRecreateAdaptSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum SlotAdaptSpace;//[Offset: 0x9, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	bool bForceRecreateAdaptAssociatedSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	enum AssociatedSlotAdaptSpace;//[Offset: 0x41, Size: 1]
	Transform AssociatedSlotAdaptTransform;//[Offset: 0x50, Size: 48]
	enum[] AssociatedSlotList;//[Offset: 0x80, Size: 12]
	<FName,Transform> WingClothScaleTransformMap;//[Offset: 0x8c, Size: 60]

--------------------------------
Class: CharacterEffectCfgBase.Object
	enum TriggerCondition;//[Offset: 0x1c, Size: 1]
	int MaxApplyCount;//[Offset: 0x20, Size: 4]
	enum ValidScene;//[Offset: 0x24, Size: 1]
	bool EnableLowDeviceOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	void RemoveEffect(CharacterAvatarComponent2* InAvatarComp);// 0x338b738
	bool ReachedMaxTriggerTime();// 0x3431ca4
	void Init();// 0x3431c88
	bool ApplyEffect(CharacterAvatarComponent2* InAvatarComp);// 0x3431260

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x3385a84

--------------------------------
Class: AvatarSlotNameConfig
	<enum,FString> MaleSlotName;//[Offset: 0x0, Size: 60]
	<enum,FString> FemaleSlotName;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24, Size: 12]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x33a2c98
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x33a2bdc

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c, Size: 8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x33a25c8
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x33a24c0
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x33a23ac
	CharacterAvatarComponent2* GetOwnerComponent();// 0x33a2384

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0, Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x4, Size: 12]
	float GrayScale;//[Offset: 0x10, Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x18, Size: 40]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24, Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30, Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48, Size: 24]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x33a34fc
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x33a3440
	bool IsPatternNumMode();// 0x33a3418
	void InitPatternNumID(int InNumID);// 0x33a33a4
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x446e168

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0, Size: 1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 40]
	float IconScale;//[Offset: 0x30, Size: 4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 40]
	float IconScale;//[Offset: 0x60, Size: 4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 16]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 12]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int LODLevel;//[Offset: 0x0, Size: 4]
	int SkipFrame;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AdditonalAvatarStruct
	int ItemID;//[Offset: 0x0, Size: 4]
	int[] SlotIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: FakeHeadInfo
	bool bEnableFakeHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SkeletalMesh* SoftFakeHeadMesh;//[Offset: 0x8, Size: 40]
	class AnimInstance* FakeHeadAnimBPClass;//[Offset: 0x30, Size: 4]

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 24]
	int UpdateFlag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0, Size: 8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8, Size: 24]
	SoftObjectPath MatBasePath;//[Offset: 0x20, Size: 24]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c, Size: 4]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	Vector2D Size;//[Offset: 0x28, Size: 8]
	Vector2D Origin;//[Offset: 0x30, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x38, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float Opacity;//[Offset: 0x44, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c, Size: 4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50, Size: 4]
	Pawn* CharacterOwner;//[Offset: 0x54, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float LastRenderTime;//[Offset: 0x5c, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x60, Size: 8]
	Vector2D RenderSize;//[Offset: 0x68, Size: 8]
	float RenderScale;//[Offset: 0x70, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x74, Size: 8]
	Canvas* Canvas;//[Offset: 0x7c, Size: 4]
	float AspectScale;//[Offset: 0x80, Size: 4]
	Vector2D CanvasClip;//[Offset: 0x84, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0x8c, Size: 12]
	bool ShouldDraw(bool bShowScores);// 0x352cf08
	void SetHidden(bool bIsHidden);// 0x352ce80
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x352cc10
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x352ca7c
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x352c928
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x352c81c
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x352c390
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x352bc24
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x352b7f8
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x352b73c
	void Draw(float DeltaTime);// 0x34ccba8
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x352b6a0

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	FString LuaFilePath;//[Offset: 0x3f0, Size: 12]
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 1]
	Vector MarkerPosition;//[Offset: 0x400, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 1]
	bool OBShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x410, Size: 120]
	Texture2D* HUDMainTexture;//[Offset: 0x488, Size: 4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x48c, Size: 4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x490, Size: 4]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x498, Size: 12]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x4a4, Size: 12]
	SimpleCrossHairData[] PriorCrossHairList;//[Offset: 0x4b0, Size: 12]
	Texture2D* HUDPlayerTexture;//[Offset: 0x4c8, Size: 4]
	CanvasIcon Crosshair;//[Offset: 0x4cc, Size: 20]
	CanvasIcon ProgreesBar;//[Offset: 0x530, Size: 20]
	CanvasIcon BKProgreesBar;//[Offset: 0x544, Size: 20]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x558, Size: 20]
	CanvasIcon Marker;//[Offset: 0x580, Size: 20]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x594, Size: 4]
	CanvasIcon WORLDMAP;//[Offset: 0x598, Size: 20]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x5ac, Size: 4]
	float DateDrawOffsetX;//[Offset: 0x5dc, Size: 4]
	void SetShowDebugInfo(bool bNewDebugShow);// 0x3834794
	void OnAsyncLoadingFinished();// 0x3834780
	bool IsValidDamageNumber(const Actor* DamageCauser, int DamageTypeId);// 0x38346b4
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x3834620
	FString GetDateString();// 0x3834560
	LinearColor GetColorByTeamID(int TeamID);// 0x38344cc
	void EnableCrosshair(bool bEnable);// 0x3834450
	void DrawScreenString(FText Text, float X, float Y);// 0x3834120
	void DrawPickupInfo(float X, float Y);// 0x350db18
	void DrawCircleUFunction(Vector2D Center, float Radius, LinearColor Color);// 0x3834014
	void AddHitDamageNumberWithConfig(float Damage, const Actor* HitTarget, const STExtraPlayerController* PC, int ConfigIndex, bool bIsHeadshot, bool bIsDeadlyShot, bool bIsCareTeam);// 0x3833de4
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadshot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x3833c08
	void AddHitDamage(float Damage, bool IsHeadshot, out const DamageEvent DamageEvent, Actor* HitActor, bool bIgnoreDamageType);// 0x3833a40

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 12]
	float DefaultSpread;//[Offset: 0xc, Size: 4]
	float SpreadMax;//[Offset: 0x10, Size: 4]
	float HeadExtraScale;//[Offset: 0x14, Size: 4]
	float AddSpreadScale;//[Offset: 0x18, Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x1c, Size: 4]
	float DefaultOffset;//[Offset: 0x20, Size: 4]
	float DefaultAlpha;//[Offset: 0x24, Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x28, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x30, Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x40, Size: 16]
	LinearColor HitToDeathDrawColor;//[Offset: 0x50, Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x60, Size: 4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x64, Size: 4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x68, Size: 4]
	float CurCrosshairSpread;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 20]
	float Offset;//[Offset: 0x14, Size: 4]
	Vector2D IconOffset;//[Offset: 0x18, Size: 8]
	float Alpha;//[Offset: 0x20, Size: 4]
	float Scale;//[Offset: 0x24, Size: 4]
	float IconRotate;//[Offset: 0x28, Size: 4]
	float LogicRotate;//[Offset: 0x2c, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x34, Size: 4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SimpleCrossHairData
	FString Tag;//[Offset: 0x0, Size: 12]
	Texture2D* CrossHairTexture;//[Offset: 0xc, Size: 4]
	float Scale;//[Offset: 0x10, Size: 4]
	int Priority;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30, Size: 4]
	TextureUVs UVs;//[Offset: 0x34, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48, Size: 12]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x58, Size: 8]
	float Rotation;//[Offset: 0x60, Size: 4]
	Vector2D RotPivot;//[Offset: 0x64, Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float RenderPriority;//[Offset: 0x8, Size: 4]
	Vector2D Position;//[Offset: 0xc, Size: 8]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	LinearColor RenderColor;//[Offset: 0x1c, Size: 16]
	float RenderOpacity;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 4]
	float V;//[Offset: 0x4, Size: 4]
	float UL;//[Offset: 0x8, Size: 4]
	float VL;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float TextScale;//[Offset: 0x48, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x50, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x58, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x6c, Size: 16]
	byte HorzPosition;//[Offset: 0x7c, Size: 1]
	byte VertPosition;//[Offset: 0x7d, Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0x100, Size: 512]
	class AnimInstance* animBP;//[Offset: 0x300, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x308, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x330, Size: 12]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x33c, Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x348, Size: 4]
	delegate OnEquipOrUnEquipToWeaponDelegate;//[Offset: 0x34c, Size: 12]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x33c4080
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x33c4064
	void OnEquipOrUnEquipToWeaponDelegate__DelegateSignature(STExtraWeapon* Weapon, bool bIsEquip);// 0x446e168
	bool IsVirtualAvatarHandle();// 0x33c4034
	void HandleEquipOrUnEquipToWeaponDelegate(STExtraWeapon* Weapon, bool bIsEquip);// 0x33c3f68
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x33c3ef0
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x33c3e1c
	int GetSubSlotID();// 0x33c3dec
	int GetSlotID();// 0x33c3dbc
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x33c3d50
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x33c3b88
	WeaponAttachmentConfig GetAttachmentConfig();// 0x33c3b1c
	class Object GetAnimationBP();// 0x33c3aec
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x33c39d8

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc, Size: 1]
	enum SubSlot;//[Offset: 0xd, Size: 1]
	enum SightType;//[Offset: 0xe, Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x14, Size: 12]
	WeaponAttachmentAttrListModifyWrapper[] SpecialWeaponAttachmentAttrModifys;//[Offset: 0x20, Size: 12]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x2c, Size: 12]
	<int,FName> socketTypeToName;//[Offset: 0x38, Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x78, Size: 328]
	WeaponMeshCfg[] ExtMeshList;//[Offset: 0x1c0, Size: 12]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1cc, Size: 12]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x1d8, Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1e8, Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 40]

--------------------------------
Class: WeaponAttachmentAttrListModifyWrapper
	int WeaponID;//[Offset: 0x0, Size: 4]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 12]
	FText DescValue;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 12]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 328]
	WeaponMeshCfg[] ExtReplacedAttachmentCfgList;//[Offset: 0x158, Size: 12]
	int replacedAttachmentMatIndex;//[Offset: 0x164, Size: 4]
	AnimationAsset*[] replacedAttachmentAnimList;//[Offset: 0x168, Size: 12]

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 1]
	int PendantIndex;//[Offset: 0x4, Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 96]

--------------------------------
Class: WeaponPendantMap
	int WeaponID;//[Offset: 0x0, Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]
	bool bVerifyRpgShootInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bVerifyRpgShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0x100, Size: 60]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x13c, Size: 12]
	LinearColor MainTargetColor;//[Offset: 0x148, Size: 16]
	LinearColor SecondaryTargetColor;//[Offset: 0x158, Size: 16]
	LinearColor WeaponSightLockColor;//[Offset: 0x168, Size: 16]
	LinearColor WeaponSightLockHDRColor;//[Offset: 0x178, Size: 16]
	<int,int> SightTypeToIndex;//[Offset: 0x188, Size: 60]
	<byte,SightMaterialModify> SightMaterialModifyMap;//[Offset: 0x1c4, Size: 60]
	WeaponCrossHairPerformData[] CrossHairDataOverride;//[Offset: 0x200, Size: 12]
	float PistolCenterDownDis;//[Offset: 0x20c, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x214, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x21c, Size: 4]
	bool bForceHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	float RotateAngle;//[Offset: 0x224, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x228, Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x230, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x234, Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x238, Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x23c, Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x240, Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x244, Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x248, Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x24c, Size: 4]
	bool bInitAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	void UpdateComponentTick();// 0x34518a0
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x34517dc
	void DrawSpreadEnd();// 0x34517c8
	void DrawDebugPointEnd();// 0x34517b4

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 12]
	enum SpreadType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SightMaterialModify
	SightMaterialModifyItem[] AimMaterialModify;//[Offset: 0x0, Size: 12]
	SightMaterialModifyItem[] NoAimMaterialModify;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SightMaterialModifyItem
	int MaterialID;//[Offset: 0x0, Size: 4]
	FName ParameterName;//[Offset: 0x8, Size: 8]
	LinearColor Value;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x404, Size: 4]
	float BulletFireSpeed;//[Offset: 0x408, Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x414, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x418, Size: 4]
	int ExtraBulletNumInOneClip;//[Offset: 0x41c, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x420, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x424, Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x428, Size: 12]
	float ShootInterval;//[Offset: 0x434, Size: 4]
	int ShootIntervalShowNumber;//[Offset: 0x438, Size: 4]
	float ExtraShootInterval;//[Offset: 0x43c, Size: 4]
	int ExtraShootIntervalShowNumber;//[Offset: 0x440, Size: 4]
	<int,float> VolatileShootIntervalMap;//[Offset: 0x444, Size: 60]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x483, Size: 1]
	bool bIsReasonable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x488, Size: 4]
	FName[] ExtraAvailableMuzzleSocketNameList;//[Offset: 0x48c, Size: 12]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0x49c, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0x4a0, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x4a4, Size: 12]
	float BurstShootInterval;//[Offset: 0x4b0, Size: 4]
	float BurstShootCD;//[Offset: 0x4b4, Size: 4]
	int BulletNumSingleShot;//[Offset: 0x4b8, Size: 4]
	FName MuzzleSocketName;//[Offset: 0x4c0, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x4c8, Size: 8]
	FName SilencerSocketName;//[Offset: 0x4d0, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x4d8, Size: 8]
	FName ShellDropSocketName;//[Offset: 0x4e0, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x4e8, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x4f0, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x4f4, Size: 4]
	byte ShootType;//[Offset: 0x4f8, Size: 1]
	int ShootTotalType;//[Offset: 0x4fc, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x504, Size: 4]
	bool ClientShootIntervalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool ClientPreVerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x50c, Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x520, Size: 20]
	float BaseImpactDamage;//[Offset: 0x534, Size: 4]
	float VehicleDamageScale;//[Offset: 0x538, Size: 4]
	float BulletMomentum;//[Offset: 0x53c, Size: 4]
	float MomentumAdditionScale;//[Offset: 0x540, Size: 4]
	float MomentumAdditionFixed;//[Offset: 0x544, Size: 4]
	float BulletRange;//[Offset: 0x548, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x54c, Size: 4]
	byte ImpactDirType;//[Offset: 0x550, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x554, Size: 12]
	float RangeModifier;//[Offset: 0x560, Size: 4]
	float ReferenceDistance;//[Offset: 0x564, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x568, Size: 4]
	class DamageType* DamageType;//[Offset: 0x56c, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x570, Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x588, Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	int InitBulletInClip;//[Offset: 0x5a4, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	float TraceDistance;//[Offset: 0x5ac, Size: 4]
	float MaxValidHitTime;//[Offset: 0x5b0, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x5b4, Size: 60]
	FName SpesificWeaponBulletCanBreakThroughTargetTag;//[Offset: 0x5f0, Size: 8]
	float MaxDamageRate;//[Offset: 0x5f8, Size: 4]
	<byte,int> BreakThroughMaxNumConfig;//[Offset: 0x5fc, Size: 60]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x63c, Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x640, Size: 88]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x698, Size: 8]
	Vector2D LocalSimulateBulletLaunchRangeFromMuzzle;//[Offset: 0x6a0, Size: 8]
	float BulletTrackDistanceFix;//[Offset: 0x6a8, Size: 4]
	float DamageImpulse;//[Offset: 0x6ac, Size: 4]
	byte ReloadType;//[Offset: 0x6b0, Size: 1]
	float PreFireTime;//[Offset: 0x6b4, Size: 4]
	float PreFireAnimScale;//[Offset: 0x6b8, Size: 4]
	float PostFireTime;//[Offset: 0x6bc, Size: 4]
	float PostReloadTime;//[Offset: 0x6c0, Size: 4]
	bool bNeedMagAnimationWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	float ReloadDurationStart;//[Offset: 0x6c8, Size: 4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x6cc, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x6d0, Size: 4]
	float ReloadDurationEnd;//[Offset: 0x6d4, Size: 4]
	float ReloadTime;//[Offset: 0x6d8, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x6dc, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x6e0, Size: 4]
	float ReloadTimeMagOutTactical;//[Offset: 0x6e4, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x6e8, Size: 4]
	float ReloadTimeMagInTactical;//[Offset: 0x6ec, Size: 4]
	float ReloadRate;//[Offset: 0x6f0, Size: 4]
	<byte,WeaponReloadCfg> SpecialReloadCfgData;//[Offset: 0x6f4, Size: 60]
	FName ReloadAllTIDName;//[Offset: 0x730, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x738, Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x744, Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x749, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74a, Size: 1]
	bool bAutoSwitchWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74b, Size: 1]
	float DropDuration;//[Offset: 0x74c, Size: 4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x754, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x758, Size: 252]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0x854, Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x864, Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x8c8, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x8cc, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x8d0, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x8e0, Size: 68]
	float ShotGunCenterPerc;//[Offset: 0x924, Size: 4]
	float ShotGunVerticalSpread;//[Offset: 0x928, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x92c, Size: 4]
	float GameDeviationFactor;//[Offset: 0x930, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x934, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x938, Size: 4]
	byte CrossHairType;//[Offset: 0x93c, Size: 1]
	float CrossHairInitialSize;//[Offset: 0x940, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x944, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x948, Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x94c, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x958, Size: 8]
	FName DefaultGripSocket;//[Offset: 0x960, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x968, Size: 8]
	FName DefaultMagSocket;//[Offset: 0x970, Size: 8]
	float WeaponBodyLength;//[Offset: 0x978, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x97c, Size: 12]
	float WeaponAimFOV;//[Offset: 0x98c, Size: 4]
	float WeaponAimInTime;//[Offset: 0x990, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x994, Size: 4]
	float WeaponAimYawRate;//[Offset: 0x998, Size: 4]
	float GameMotionYawRate;//[Offset: 0x99c, Size: 4]
	float GameMotionPitchRate;//[Offset: 0x9a0, Size: 4]
	float ForegripParam;//[Offset: 0x9a4, Size: 4]
	float MagParam;//[Offset: 0x9a8, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x9b0, Size: 4]
	byte SightType;//[Offset: 0x9b4, Size: 1]
	float SensitiveFirePitchRate;//[Offset: 0x9b8, Size: 4]
	byte SightVisionType;//[Offset: 0x9bc, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x9c0, Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x9d8, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x9dc, Size: 4]
	float RecoilKickADS;//[Offset: 0x9e0, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x9e4, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x9e8, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec, Size: 1]
	enum ReleaseFireType;//[Offset: 0x9ed, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ee, Size: 1]
	bool bEnableShoulderScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ef, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x9f4, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x9f8, Size: 4]
	float AnimationKick;//[Offset: 0x9fc, Size: 4]
	int ReloadAnimSlot;//[Offset: 0xa00, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa04, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa05, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0xa08, Size: 4]
	float SwitchAimAnimTime;//[Offset: 0xa0c, Size: 4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 1]
	int ConstantWeaponDurability;//[Offset: 0xa14, Size: 4]
	float ShootReduceDurabilityAmount;//[Offset: 0xa18, Size: 4]
	Rotator[] RearSightRotConfig;//[Offset: 0xa1c, Size: 12]
	FName[] RearSightSocketConfig;//[Offset: 0xa28, Size: 12]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xa34, Size: 12]
	int RearSightRotIndex;//[Offset: 0xa40, Size: 4]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa44, Size: 1]
	int MaxFireNumPerFrame;//[Offset: 0xa48, Size: 4]
	bool bCachedDefaultConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 1]
	byte[] CoronaEffectCfg;//[Offset: 0xdf8, Size: 12]
	ItemDefineID GetBulletType();// 0x3652564

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x340, Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool bUseSimulateOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x348, Size: 4]
	float LaunchGravityScale;//[Offset: 0x34c, Size: 4]
	int PunctureTimes;//[Offset: 0x350, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x354, Size: 4]
	class DamageType* DamageType;//[Offset: 0x358, Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x35c, Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x364, Size: 4]
	Vector RootScale;//[Offset: 0x368, Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	Vector ShootDir;//[Offset: 0x378, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	float ShowBulletEffectMinDistance;//[Offset: 0x388, Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x480, Size: 4]
	delegate OnRecycleBullet;//[Offset: 0x484, Size: 12]
	delegate OnResetBullet;//[Offset: 0x490, Size: 12]
	delegate OnBulletImpact;//[Offset: 0x49c, Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x4a8, Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x4b4, Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x4b8, Size: 4]
	float WeaponFloorHeight;//[Offset: 0x56c, Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x570, Size: 12]
	byte CachedOwnerRole;//[Offset: 0x57c, Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x580, Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	int MaxTraceTimes;//[Offset: 0x588, Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 1]
	bool VerityBlock(out const Vector StartPos, out const Vector EndPos, STExtraShootWeapon* Weapon, Actor* ImpactActor, out HitResult OutHit);// 0x37ecc8c
	void ResetBulletDelegate__DelegateSignature();// 0x446e168
	void ReloadNoEncodeAttr();// 0x33492cc
	void OnShowBulletEffect();// 0x446e168
	void OnRecycleBulletDelegate__DelegateSignature();// 0x446e168
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x33e4c1c
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x446e168
	void OnImpact(out const HitResult _ImpactResult);// 0x33e4b3c
	bool NeedCheckBulletFlySound();// 0x37ecc5c
	void LaunchBulletDelegate__DelegateSignature();// 0x446e168
	void LaunchBP(float Speed, out Transform InTrans, Actor* InOwningWeapon, Actor* InInstigator, out Transform OutTrans);// 0x446e168
	int GetShootID();// 0x3788a50
	float GetMaxNoGravityRange();// 0x37ecc2c
	float GetMaxBulletFlySpeed();// 0x348b29c
	float GetLaunchGravityScale();// 0x3353d18
	Controller* GetInstigatorControllerSafe();// 0x37ecc04
	STExtraBaseCharacter* GetInstigatorCharacter();// 0x37ecbdc
	bool ConditionalDestroyBullet(out const HitResult _ImpactResult);// 0x37ecafc
	bool ClientVerifyBlock(out const Vector MuzzlePos, out const Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x37ec98c

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x15c, Size: 4]
	void ResumeMoveAfterImpactWithNoLost();// 0x3418d68
	void ResetTickDelay();// 0x3418d4c
	void IgnoreBounceReflectOnce();// 0x3418d30
	void ForceStop();// 0x3418d1c

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4, Size: 4]
	float MaxSpeed;//[Offset: 0xf8, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 1]
	float PreviousHitTime;//[Offset: 0x100, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x104, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x110, Size: 4]
	float Buoyancy;//[Offset: 0x114, Size: 4]
	float Bounciness;//[Offset: 0x118, Size: 4]
	float Friction;//[Offset: 0x11c, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x124, Size: 12]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x13c, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x140, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x148, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x14c, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x150, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x60f6f38
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x60f6ec0
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x446e168
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x446e168
	Vector LimitVelocity(Vector NewVelocity);// 0x60f6e2c

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x308, Size: 60]
	ParticleSystem* DefaultFX;//[Offset: 0x344, Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x348, Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x34c, Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x350, Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x354, Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x358, Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x35c, Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x360, Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x364, Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x368, Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x36c, Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x370, Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x374, Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x378, Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x37c, Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x380, Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x384, Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x388, Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x38c, Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x390, Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x394, Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x398, Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x39c, Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x3a0, Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x3a4, Size: 4]
	ParticleSystem* BallCarFX;//[Offset: 0x3a8, Size: 4]
	ParticleSystem* FleshFXNormal;//[Offset: 0x3ac, Size: 4]
	ParticleSystem* FleshFXExpand;//[Offset: 0x3b0, Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x3b8, Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x3bc, Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x3c0, Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x3c4, Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x3c8, Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x3cc, Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x3d0, Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x3d4, Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x3d8, Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x3dc, Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x3e0, Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x3e4, Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x3e8, Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x3ec, Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x3f0, Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x3f4, Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x3f8, Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x3fc, Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x400, Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x404, Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x408, Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x40c, Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x410, Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x414, Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x418, Size: 4]
	AkAudioEvent* WindBreakSound;//[Offset: 0x41c, Size: 4]
	AkAudioEvent* BallCarSound;//[Offset: 0x420, Size: 4]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x424, Size: 4]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x428, Size: 4]
	DecalData DefaultDecal;//[Offset: 0x42c, Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x448, Size: 28]
	DecalData DirtDecal;//[Offset: 0x464, Size: 28]
	DecalData WaterDecal;//[Offset: 0x480, Size: 28]
	DecalData MetalDecal;//[Offset: 0x49c, Size: 28]
	DecalData WoodDecal;//[Offset: 0x4b8, Size: 28]
	DecalData GrassDecal;//[Offset: 0x4d4, Size: 28]
	DecalData GlassDecal;//[Offset: 0x4f0, Size: 28]
	DecalData FleshDecal;//[Offset: 0x50c, Size: 28]
	DecalData SteelDecal;//[Offset: 0x528, Size: 28]
	DecalData SandbagDecal;//[Offset: 0x544, Size: 28]
	DecalData SandDecal;//[Offset: 0x560, Size: 28]
	DecalData ClothDecal;//[Offset: 0x57c, Size: 28]
	DecalData PlasticDecal;//[Offset: 0x598, Size: 28]
	DecalData LeatherDecal;//[Offset: 0x5b4, Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x5d0, Size: 28]
	DecalData PaperDecal;//[Offset: 0x5ec, Size: 28]
	DecalData StoneDecal;//[Offset: 0x608, Size: 28]
	DecalData SnowDecal;//[Offset: 0x624, Size: 28]
	DecalData PopCanDecal;//[Offset: 0x640, Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x65c, Size: 28]
	DecalData LeafDecal;//[Offset: 0x678, Size: 28]
	DecalData CarDecal;//[Offset: 0x694, Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x6b0, Size: 28]
	DecalData IceDecal;//[Offset: 0x6cc, Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x6f0, Size: 272]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x801, Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x802, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x804, Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x808, Size: 4]
	Vector DecalScale;//[Offset: 0x810, Size: 12]
	SceneComponent* TargetImpactComp;//[Offset: 0x830, Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x8ac, Size: 4]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0x8b0, Size: 60]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f1, Size: 1]
	void TimerHideDecal();// 0x36cade8
	void OnLoadImpactFxAsyncCallBack(SoftObjectPath ImpactFxPath, float DistanceScaler, byte HitSurfaceType);// 0x36cabf4
	void OnHandleImpactFx(ParticleSystem* ImpactFX, float DistanceScaler, byte HitSurfaceType);// 0x36caaf4
	SoftObjectPath GetDirectionImpactFXPath(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x36ca908
	bool GetDirectionImpactFXAsync(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x36ca76c

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize VictimLocation;//[Offset: 0x24, Size: 12]
	Vector_NetQuantize BulletPos;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x3c, Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	uint32 ShootID;//[Offset: 0x54, Size: 4]
	int BulletTypeSpecialID;//[Offset: 0x58, Size: 4]
	uint16 CompensationTime;//[Offset: 0x5c, Size: 2]
	Actor* Actor;//[Offset: 0x60, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x68, Size: 8]
	int TimeStamp;//[Offset: 0x70, Size: 4]
	int ClientShootTime;//[Offset: 0x74, Size: 4]
	byte SpecialBulletID;//[Offset: 0x78, Size: 1]
	byte HitBodyType;//[Offset: 0x79, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x7c, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x80, Size: 4]
	Vector_NetQuantize WeaponOwnerHeadPos;//[Offset: 0x84, Size: 12]
	float DamageRate;//[Offset: 0x90, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	Vector_NetQuantize GunTailPos;//[Offset: 0x98, Size: 12]
	FName BoneName;//[Offset: 0xa8, Size: 8]
	Transform BoneTrans;//[Offset: 0xb0, Size: 48]
	byte ImpactEffectMask;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x260, Size: 4]
	int SortOrder;//[Offset: 0x264, Size: 4]
	float FadeScreenSize;//[Offset: 0x268, Size: 4]
	float FadeStartDelay;//[Offset: 0x26c, Size: 4]
	float FadeDuration;//[Offset: 0x270, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 1]
	Vector DecalSize;//[Offset: 0x278, Size: 12]
	void SetSortOrder(int Value);// 0x5fcc448
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x5fcc3d0
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x5fcc2c8
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x5fcc250
	float GetFadeStartDelay();// 0x5fcc228
	float GetFadeDuration();// 0x5fcc200
	MaterialInterface* GetDecalMaterial();// 0x5fcc1d8
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x5fcc1a8

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletCameraModeConfig ReplayPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x48, Size: 8]
	WeaponVisualBulletItemConfig ReplayDefaultSetting;//[Offset: 0x50, Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8, Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponReloadCfg
	float Time;//[Offset: 0x0, Size: 4]
	float TimeMagOut;//[Offset: 0x4, Size: 4]
	float TimeMagIn;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 76]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c, Size: 76]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98, Size: 76]
	float followTimeMax;//[Offset: 0xe4, Size: 4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	CurveFloat* SpeedCurve;//[Offset: 0xec, Size: 4]
	CurveFloat* DistanceSpeedCurve;//[Offset: 0xf0, Size: 4]
	CurveFloat* SensitiveSpeedCurve;//[Offset: 0xf4, Size: 4]
	float MaxAngle;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 4]
	float CenterSpeedRate;//[Offset: 0x4, Size: 4]
	float RangeRate;//[Offset: 0x8, Size: 4]
	float SpeedRate;//[Offset: 0xc, Size: 4]
	float RangeRateSight;//[Offset: 0x10, Size: 4]
	float SpeedRateSight;//[Offset: 0x14, Size: 4]
	float CrouchRate;//[Offset: 0x18, Size: 4]
	float ProneRate;//[Offset: 0x1c, Size: 4]
	float DyingRate;//[Offset: 0x20, Size: 4]
	float DriveVehicleRate;//[Offset: 0x24, Size: 4]
	float InVehicleRate;//[Offset: 0x28, Size: 4]
	float FreeFallRate;//[Offset: 0x2c, Size: 4]
	float OpeningRate;//[Offset: 0x30, Size: 4]
	float LandingRate;//[Offset: 0x34, Size: 4]
	float adsorbMaxRange;//[Offset: 0x38, Size: 4]
	float adsorbMinRange;//[Offset: 0x3c, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x44, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x48, Size: 4]

--------------------------------
Class: AutoAimingConfigByGameMode
	class GameStateBase* GameStateClass;//[Offset: 0x0, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x4, Size: 252]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24, Size: 4]
	int BulletPerSwitch;//[Offset: 0x28, Size: 4]
	float TimePerSwitch;//[Offset: 0x2c, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilValueClimb;//[Offset: 0x40, Size: 4]
	float RecoilValueFail;//[Offset: 0x44, Size: 4]
	float RecoilModifierStand;//[Offset: 0x48, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c, Size: 4]
	float RecoilModifierProne;//[Offset: 0x50, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60, Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x40, Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x104, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x108, Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x178, Size: 100]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x1dc, Size: 68]
	void SetUseTss(bool bUse);// 0x34190e8
	void OnWeaponStopFire();// 0x34190d4
	void OnWeaponStartFire();// 0x34190c0
	void OnWeaponShoot();// 0x34190ac
	void GetDataFromWeaponEntity();// 0x3419098
	Vector GetCurRecoilInfo();// 0x3419050
	float GetCurDeviation();// 0x3419020
	void CheckComponentTick();// 0x341900c

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0x100, Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107, Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x10c, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x168, Size: 4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	void HandleOnWeaponStopFire();// 0x3365b48
	void HandleOnWeaponStartFire();// 0x3417d5c
	bool CheckCloseDSTick();// 0x3417d34

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float LastCalcShootTime;//[Offset: 0x104, Size: 4]
	HitResult CalcShootHitRet;//[Offset: 0x108, Size: 144]
	bool bShootIDNotMatchReportKillflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x19c, Size: 4]
	<byte,ShootWeaponCustomDamageList> CustomBulletDamage;//[Offset: 0x1a0, Size: 60]
	FName NormalBulletsTrackCompTag;//[Offset: 0x1e0, Size: 8]
	bool bJumpInitClipIDAndShootID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x1ec, Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x1f0, Size: 4]
	delegate OnShoot;//[Offset: 0x1f4, Size: 12]
	delegate OnBulletHitConstRefDelegate;//[Offset: 0x200, Size: 12]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x638, Size: 12]
	AIActingComponent* CacheAIActingComp;//[Offset: 0x660, Size: 4]
	int LastFireID;//[Offset: 0x670, Size: 4]
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x37edd10
	void ShootDelegate__DelegateSignature();// 0x446e168
	void OnWeaponClipMaxBulletChanged();// 0x37edcfc
	void OnWeaponBulletChanged();// 0x37edce8
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x446e168
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x446e168
	void OnBulletHitConstRefDelegate__DelegateSignature(out const BulletHitInfoUploadData Data, STExtraShootWeapon* Weapon);// 0x446e168
	bool IsBulletHasShotFlag(int ShootID, enum ShotFlag);// 0x37edc24
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity);// 0x37edb4c
	HitResult ConditionPreCalcShootHitRet(bool WithDeviation, float ToleranceTime);// 0x37ed9d8

--------------------------------
Class: ShootWeaponCustomDamageList
	<enum,ShootWeaponCustomDamage> Data;//[Offset: 0x0, Size: 60]
	float RangeModifier;//[Offset: 0x3c, Size: 4]
	float ReferenceDistance;//[Offset: 0x40, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x44, Size: 4]
	float BaseImpactDamage;//[Offset: 0x48, Size: 4]
	class STExtraShootWeaponBulletBase* BulletClass;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: ShootWeaponCustomDamage
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 40]
	float DamageRate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AIActingComponent.LuaInstancedActorComponent.ActorComponent.Object
	FString AIActingLuaConfig;//[Offset: 0x114, Size: 12]
	FString DefaultLuaFilePath;//[Offset: 0x120, Size: 12]
	int WillKilledBotNum;//[Offset: 0x12c, Size: 4]
	int PlayersOnSquare;//[Offset: 0x130, Size: 4]
	int OriginalTotalAINum;//[Offset: 0x134, Size: 4]
	int OriginalTotalCandidateAINum;//[Offset: 0x138, Size: 4]
	int OriginalTotalCandidateMLAINum;//[Offset: 0x13c, Size: 4]
	bool bSimulateKillConsiderMLAINum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int[] SimulateKillNums;//[Offset: 0x144, Size: 12]
	int OriginalDeliveryMLAINum;//[Offset: 0x150, Size: 4]
	int OriginalFakePlayerMLAINum;//[Offset: 0x154, Size: 4]
	AIWayPointActor*[] WayPointActorList;//[Offset: 0x160, Size: 12]
	bool bUseCacheWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0x170, Size: 12]
	AIActingCandidateData[] CandidateMLDeliveryList;//[Offset: 0x17c, Size: 12]
	bool bCheckTeleportLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	float AverageRating;//[Offset: 0x220, Size: 4]
	bool bUseMlAICondCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float MlAIHpCheckValue;//[Offset: 0x228, Size: 4]
	float AIDeliveryWaveInterval;//[Offset: 0x22c, Size: 4]
	int MaxActiveAI;//[Offset: 0x230, Size: 4]
	int ActiveAI_n;//[Offset: 0x234, Size: 4]
	int ActiveAI_m;//[Offset: 0x238, Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x23c, Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x240, Size: 4]
	float SelectActionPeriod;//[Offset: 0x244, Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x248, Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x24c, Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x250, Size: 12]
	int SimulateKillMinIntervalNum;//[Offset: 0x29c, Size: 4]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x2a0, Size: 12]
	float MinKilledFreqScale;//[Offset: 0x2ac, Size: 4]
	float MaxKilledFreqScale;//[Offset: 0x2b0, Size: 4]
	bool bEnableClassicDeliveryAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	bool bEnableHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 1]
	int FullFeedLimit;//[Offset: 0x2b8, Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x2bc, Size: 12]
	float DeliveryBeginTime;//[Offset: 0x2c8, Size: 4]
	float DeliveryFreq;//[Offset: 0x2cc, Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x2d0, Size: 4]
	float MinimumWarmScore;//[Offset: 0x2d4, Size: 4]
	float SpecialAIHpCondition;//[Offset: 0x2d8, Size: 4]
	float SpecialAICircleDistanceScale;//[Offset: 0x2dc, Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x2e0, Size: 12]
	DeliveryCondition[] DeliveryChecks;//[Offset: 0x2ec, Size: 12]
	float TeammateDistanceThresholdSqr;//[Offset: 0x2f8, Size: 4]
	float EnemyDistanceThresholdSqr;//[Offset: 0x2fc, Size: 4]
	float DeliveryCoolDown;//[Offset: 0x300, Size: 4]
	SpecialAIDeliveryNumContainer[] SpAINumWitmTeammateCfg;//[Offset: 0x304, Size: 12]
	FString HotValuePrefix;//[Offset: 0x310, Size: 12]
	HotValueAttenuation HotValueAttenuation;//[Offset: 0x31c, Size: 12]
	HotValueScale HotValueScale;//[Offset: 0x328, Size: 12]
	float DeliveryHotValueThreshold;//[Offset: 0x334, Size: 4]
	float HotValueUpdateBeginTime;//[Offset: 0x338, Size: 4]
	float HotValueUpdateDeltaTime;//[Offset: 0x33c, Size: 4]
	bool bDebugHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	Vector2D HotValueLocationOffset;//[Offset: 0x34c, Size: 8]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x36c, Size: 12]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x378, Size: 12]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x384, Size: 12]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x390, Size: 12]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x39c, Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x3a0, Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x3a4, Size: 4]
	int CommonAIDeliverInWave;//[Offset: 0x3a8, Size: 4]
	float DeliveryWaveCD;//[Offset: 0x3ac, Size: 4]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x3b0, Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x3b4, Size: 4]
	STExtraPlayerCharacter*[] CachedCandidatePlayers;//[Offset: 0x3b8, Size: 12]
	FakePlayerAIController*[] CachedCandidateAICs;//[Offset: 0x418, Size: 12]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x458, Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x45c, Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	bool bCheckTargetLocationDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	float TargetLocationDistanceThreshold;//[Offset: 0x47c, Size: 4]
	float MaxAILocationTraceHeightZ;//[Offset: 0x480, Size: 4]
	AIActingBPAssit* m_BPAssit;//[Offset: 0x490, Size: 4]
	FString AIActingBPAssitClassPath;//[Offset: 0x494, Size: 12]
	Actor*[] WaterSwimActors;//[Offset: 0x4a0, Size: 12]
	bool bEnableAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	delegate CustomDeliveryActDelegate;//[Offset: 0x4b0, Size: 12]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x4fc, Size: 12]
	void UpdateCachedCandidates();// 0x3337118
	void UpdateCachedCandidatePlayers();// 0x3337104
	void UpdateCachedCandidateAICs();// 0x33370f0
	void TickClassicDeliver(float DeltaTime);// 0x3337078
	void SimulateKilledFakeAI(out const AIActingCandidateData Killer, out const AIActingCandidateData Killed, int WeapID, out int InWillKilled, byte SpecialDamageType);// 0x3336d88
	void SimulateKillAllFakeAI();// 0x3336d74
	bool SetAIRatingLevel(FakePlayerAIController* AIC, int Level);// 0x3336cb0
	void SetAIControllerDeleverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x3336bf4
	void RemoveCandidateAI(int PlayerKey, bool bMLAI);// 0x3336b30
	void OnSetDeliverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x446e168
	void OnNotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x3336a14
	void OnDeliverWaveBegin(int CurWave);// 0x446e168
	void GMOnBehaviorTreeLoaded(AIController* InAIController);// 0x333699c
	void GMModidyAIEquipSpawnGroupData(out AIEquipSpawnGroupDataBase[] OutGroupData);// 0x33368f0
	int GetWaveCD();// 0x33368d0
	STExtraPlayerCharacter* GetOneDeliveryTarget();// 0x33368a8
	float GetNoWhiteCirclesRadius();// 0x333688c
	int GetNonInstancedAICNum();// 0x3336868
	float GetHotValueByRowCol(const int InRow, const int InCol);// 0x33367a4
	float GetHotValue(const Vector InLocation);// 0x333672c
	int GetCurrentActing();// 0x3336704
	STExtraBaseCharacter*[] GetAllPlayerPawns();// 0x3336644
	STExtraBaseCharacter*[] GetAllAIPawn(bool bMLAI, bool bDelivery);// 0x33364e4
	STExtraBaseCharacter* CreateCharacter(AIActingCandidateData SpawnCandidateAI, Vector InLocation);// 0x3336310
	void CollectAndReportAIStrategyInfo();// 0x33362fc
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponID, FString KillerNation, FString KilledNation);// 0x3335e0c
	bool AdjustAIAttackAnimalRatingDamage(BasicAIController* AIC);// 0x3335d8c

--------------------------------
Class: LuaInstancedActorComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x104, Size: 12]
	void UnRegistLuaTick();// 0x720673c
	void RegistLuaTick(float TickInterval);// 0x7207388

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x308, Size: 4]
	bool bOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x310, Size: 12]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x31c, Size: 4]
	BillboardComponent* ShowSprite;//[Offset: 0x320, Size: 4]
	Vector GetNextWayPointLocation(int TeamID, int ExcludeID);// 0x3352884

--------------------------------
Class: TeamWayPointLink
	int TeamID;//[Offset: 0x0, Size: 4]
	WayPointLink[] Links;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIActingCandidateData
	int TeamID;//[Offset: 0x0, Size: 4]
	uint32 AIPlayerKey;//[Offset: 0x4, Size: 4]
	FString AIPlayerName;//[Offset: 0x8, Size: 12]
	FString AIPlayerNation;//[Offset: 0x14, Size: 12]
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x20, Size: 4]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60, Size: 1]
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0xb64, Size: 4]
	delegate OnEnterJumping;//[Offset: 0xb68, Size: 12]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0xb94, Size: 4]
	int PlayerTeamId;//[Offset: 0xb98, Size: 4]
	uint32 PlayerKey;//[Offset: 0xb9c, Size: 4]
	FString PlayerName;//[Offset: 0xba0, Size: 12]
	byte AIType;//[Offset: 0xbac, Size: 1]
	int resID;//[Offset: 0xbb0, Size: 4]
	bool bForceRecordKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4, Size: 1]
	float TeleportRandomAngle;//[Offset: 0xbb8, Size: 4]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbbc, Size: 1]
	FString DropItemCfgTableName;//[Offset: 0xbc0, Size: 12]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0xbcc, Size: 4]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd1, Size: 1]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0xbd4, Size: 4]
	void SetPlane(Actor* InPlane);// 0x34c6fec
	void SetLiveState(enum InLiveState);// 0x34c6f74
	void SetIsMLAI(bool InIsMLAI);// 0x33ce740
	void SetDeliveryActingTarget(STExtraBaseCharacter* DeliveryActingTarget);// 0x34c6efc
	void SetDeliverTarget(STExtraPlayerCharacter* DeliverTargetPlayer);// 0x34c6e84
	void SetCanJump(bool CanJump);// 0x34c6e04
	bool IsInPlane();// 0x34c6ddc
	bool IsDeliver();// 0x34c6db4
	int GetResId();// 0x34c6d98
	Actor* GetPlane();// 0x34c6d70
	STExtraPlayerCharacter* GetDeliverTarget();// 0x34c6d48
	PlayerSecurityInfoCollector* GetAIPlayerSecurityInfoCollector();// 0x34c6d2c
	void ForceDropItems(int ItemType);// 0x34c6cb4
	void ExitPlane();// 0x34c6ca0
	void EnterPlane();// 0x34c6c8c
	void DebugBlackboardKey(out const FName KeyName, bool bShouldShow);// 0x34c6bb0
	void ClearDeliver();// 0x34c6b9c
	void ChangeToFightingBehaviorTree();// 0x34c6b88
	void ChangeBehaviorTree(int Index);// 0x34c6b10

--------------------------------
Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	delegate OnCustomSpawnItemDelegate;//[Offset: 0x548, Size: 16]
	float CheckPeriod;//[Offset: 0x558, Size: 4]
	float RandomDeviation;//[Offset: 0x55c, Size: 4]
	float ProtectCountdownTime;//[Offset: 0x560, Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x564, Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x568, Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x56c, Size: 8]
	float TurnVelocity;//[Offset: 0x574, Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x578, Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x580, Size: 60]
	bool bSyncViewRotationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	bool bAimOffsetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 1]
	GameModeAIPlayerParams AIParams;//[Offset: 0x5c8, Size: 792]
	byte AIActionType;//[Offset: 0x91c, Size: 1]
	byte FakePlayerBornType;//[Offset: 0x91d, Size: 1]
	bool IsVaultBreakWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91e, Size: 1]
	float ValidPlayerControllerDist;//[Offset: 0x920, Size: 4]
	float DelayAIVaultBreakWindowTime;//[Offset: 0x924, Size: 4]
	int AIParachuteStyle;//[Offset: 0x928, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x92c, Size: 4]
	SpectatorComponent* SpectatorComponent;//[Offset: 0x930, Size: 4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x934, Size: 56]
	AIShootMissInfo AIShootMissInfo;//[Offset: 0x96c, Size: 24]
	AIConditionHearingComponent* AIConditionHearingComponent;//[Offset: 0x984, Size: 4]
	AIParachuteJumpComponent* AIParachuteComp;//[Offset: 0x988, Size: 4]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0x9dc, Size: 4]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0x9e0, Size: 4]
	bool IsRespawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ed, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x9f0, Size: 12]
	Actor* Plane;//[Offset: 0x9fc, Size: 4]
	int FlightNo;//[Offset: 0xa00, Size: 4]
	int DefaultAIFeatureConfigID;//[Offset: 0xa04, Size: 4]
	AIFeatureInfo AIFeatureInfo;//[Offset: 0xa08, Size: 256]
	bool IsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb44, Size: 1]
	STExtraBaseCharacter* RescuedByWho;//[Offset: 0xb48, Size: 8]
	uint32 CurAILevel;//[Offset: 0xb54, Size: 4]
	int MLAIStyle;//[Offset: 0xb58, Size: 4]
	bool bSkipCreateBackpackEveryTimePossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 1]
	bool bFullyRandomEveryTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5d, Size: 1]
	bool bConsiderBlueCircleWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5e, Size: 1]
	bool bConsiderWaterWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5f, Size: 1]
	void UpdateAIMissShootInfo(float CurrentTime, Vector2D MissRange, float MissOnPurposeCD);// 0x33ce940
	void StopBehaviorTreeAndSetNull();// 0x33ce92c
	void SetRatingDamageScale(float InRating);// 0x33ce8b8
	void SetPlayerStatePlayerId(int InPlayerId);// 0x33ce840
	void SetMLAIType(int Type);// 0x33ce7c8
	void SetIsMLAI(bool InIsMLAI);// 0x33ce740
	void SetGlobalAverageRating(float RatingValue);// 0x33ce6c8
	void SetAILevel(uint32 NewAILevel);// 0x33ce650
	void Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x33ce520
	void Respawn();// 0x33ce500
	bool IsMLAIPlayerParam();// 0x33ce4e4
	bool IsDead();// 0x33ce4bc
	bool IsAvailableBackpacItemType(ItemDefineID DefineID);// 0x33ce424
	void InitSpectatorComponentWithParams(out const GameModeAIPlayerParams Params);// 0x33ce364
	void InitAIFeatureInfo(int InID);// 0x33ce2e4
	bool InitAI(int InFeatureID);// 0x33ce25c
	float GetRatingDamageScale(STExtraPlayerController* PlayerController);// 0x33ce1dc
	float GetRatingDamageFiringAccuRadius(STExtraPlayerController* PlayerController);// 0x33ce15c
	Pawn* GetPossessedBaseCharacter();// 0x33ce138
	uint32 GetMLBotTypeParam();// 0x33ce11c
	uint32 GetInitAILevelParam();// 0x33ce100
	float GetGlobalAverageRating();// 0x33ce0d8
	Pawn* GetCurEnemy();// 0x33ce0a8
	GameModeAIPlayerParams GetAIParams();// 0x33ce060
	uint32 GetAILevel();// 0x33ce044
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x33cdf78
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x33cdeac
	void CustomSpawnItemDelegate__DelegateSignature(BaseAIController* AIController);// 0x446e168
	void ClearAIControllerCachedData();// 0x33cde98
	void CheckOverConstructing(Actor* InActor, int TotoalAmountAllowed, int InBuildingID);// 0x33cdd98
	void ChangeAIActionType(byte InAIActionType);// 0x33cdd18
	void AutoSpawnItem();// 0x33cdd04
	void AddItemForAIWithFullCheck(AIEquipSpawnItem[] DataSet, AIEquipSpawnItem[] AIMustPickUpItemList);// 0x33cda84
	void AddItemForAI(int ItemID, int Count, bool bDropOnDead, bool bRollOnDead);// 0x33cd920

--------------------------------
Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x3bc, Size: 4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x3c0, Size: 4]
	SpawnerBase* TeamZoneSpawner;//[Offset: 0x3c4, Size: 4]
	SpawnerBase* CurSpawner;//[Offset: 0x3c8, Size: 4]
	uint32 OwnedSpawnerID;//[Offset: 0x3cc, Size: 4]
	bool bAsyncLoadBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	enum AIAttackType;//[Offset: 0x3d1, Size: 1]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x3d4, Size: 12]
	int BehaviorTreeIndexRunWhenPossess;//[Offset: 0x3e0, Size: 4]
	float ActorLocationTetherDistance;//[Offset: 0x3e4, Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x3e8, Size: 4]
	FString AIFeatureInfoTableName;//[Offset: 0x3ec, Size: 12]
	FString AIWeaponRangeTableName;//[Offset: 0x3f8, Size: 12]
	int HitRateConfigNum;//[Offset: 0x404, Size: 4]
	int AIFeatureID;//[Offset: 0x408, Size: 4]
	AITargetInViewOffset AITargetInViewOffset;//[Offset: 0x40c, Size: 44]
	delegate OnBehaviorTreeLoaded;//[Offset: 0x484, Size: 12]
	AIShootingPoseOffsetInfo shootingPoseOffsetInfo;//[Offset: 0x490, Size: 84]
	delegate OnCollectionHearSoundDelegate;//[Offset: 0x4e4, Size: 12]
	bool InterpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	enum AICharacterRotateInterpType;//[Offset: 0x4f1, Size: 1]
	float RotationSpeedOfInterpControlRotation;//[Offset: 0x4f4, Size: 4]
	bool UseAIFeatureInfo();// 0x33d4598
	void SetCurShootingPose(enum InAIShootingPose);// 0x33d4520
	void OnAIEnterDarkArea(bool bInEnter, Actor* DarkArea, bool bAtLeastInOne);// 0x33d4404
	void InitAIFeatureInfo(int InID);// 0x33ce2e4
	bool InitAI(int InFeatureID);// 0x33ce25c
	Pawn*[] GetTeammates();// 0x33d4344
	int GetTeammateCount();// 0x33d431c
	int GetCurrentOrder();// 0x33d42f4
	Pawn* GetCurEnemy();// 0x33ce0a8
	BlackboardComponent* GetBlackboardComponent();// 0x33d42d8
	enum GetAIAttackType();// 0x33d42bc

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x378, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x378, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x378, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x378, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x37c, Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x380, Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x384, Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x388, Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x38c, Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x390, Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x394, Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x398, Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x3a8, Size: 12]
	bool bEnableActiveRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x551ee84
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x551ee0c
	void SetMoveBlockDetection(bool bEnable);// 0x551ed8c
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x551ed04
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x446e168
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x446e168
	void OnPossess(Pawn* PossessedPawn);// 0x446e168
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x551ec40
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x551e998
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x551e750
	void K2_SetFocus(Actor* NewFocus);// 0x551e6d8
	void K2_SetFocalPoint(Vector FP);// 0x551e668
	void K2_ClearFocus();// 0x551e654
	bool HasPartialPath();// 0x551e62c
	PathFollowingComponent* GetPathFollowingComponent();// 0x551e610
	byte GetMoveStatus();// 0x551e5e8
	Vector GetImmediateMoveDestination();// 0x551e5a0
	Actor* GetFocusActor();// 0x551e578
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x551e4e0
	Vector GetFocalPoint();// 0x551e498
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x551e47c
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x551e404

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf0, Size: 4]
	NavigationData* MyNavData;//[Offset: 0xfc, Size: 4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x5544ce4
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x5544b38
	Vector GetPathDestination();// 0x5544af0
	byte GetPathActionType();// 0x5544ac8

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bPathDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bUpdatePathOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	float maxCheckDis;//[Offset: 0x270, Size: 4]
	float maxCheckDisTime;//[Offset: 0x274, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x280, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x284, Size: 4]
	float MaxTransferDis;//[Offset: 0x288, Size: 4]

--------------------------------
Class: PlayerSecurityInfoCollector.ActorComponent.Object
	int[] EnergyItemIDList;//[Offset: 0xbc, Size: 12]
	int[] EnergySpeedUpPhaseIndexList;//[Offset: 0xc8, Size: 12]
	bool bEnableDetailFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool bEnableDetailHurtFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	ClientCircleFlow CurCircleFlow;//[Offset: 0xd8, Size: 288]
	ClientCircleFlow CollectCircleFlow;//[Offset: 0x1f8, Size: 288]
	HurtFlow CurHurtFlow;//[Offset: 0x318, Size: 256]
	ClientJumpFlow JumpFlow;//[Offset: 0x418, Size: 168]
	ClientSecPlayerKillFlow SecPlayerKillFlow;//[Offset: 0x4c0, Size: 136]
	InexistentAvatarFlow InexistentAvatarFlow;//[Offset: 0xe28, Size: 360]
	void StartOnPlane();// 0x35e71dc
	void RecordAirDropCount();// 0x35e71c8
	void PlayerCanJump();// 0x35e71b4
	void HandleSyncCircleInfo(int Index);// 0x35e713c
	void HandleCharacterSafeZoneTips(float SafeZoneTime);// 0x35e70c4
	void HandleCharacterCircleWaveOver(int Index);// 0x35e704c
	void HandleCharacterCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x35e6f44
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);// 0x35e6ecc
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);// 0x35e6e54
	void HandleCharacterAttrChangedWithDetail(Actor* nowActor, FString AttrName, float ValueDelta, float ResultValue);// 0x35e6cc8
	void ExitParachute();// 0x35e6cb4
	void EnterParachute();// 0x35e6ca0
	void EnterJumping();// 0x35e6c8c
	void CalculatePlayerMoveData();// 0x35e6c78

--------------------------------
Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString PicUrl;//[Offset: 0x14, Size: 12]
	uint32 GameStartTime;//[Offset: 0x20, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x24, Size: 4]
	int NewCirclePositionX;//[Offset: 0x28, Size: 4]
	int NewCirclePositionY;//[Offset: 0x2c, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x30, Size: 4]
	int NewCircleCount;//[Offset: 0x34, Size: 4]
	int PlayerPositionX;//[Offset: 0x38, Size: 4]
	int PlayerPositionY;//[Offset: 0x3c, Size: 4]
	int PlayerPositionZ;//[Offset: 0x40, Size: 4]
	int PlayerHP;//[Offset: 0x44, Size: 4]
	uint32 OldCircleMoveTime;//[Offset: 0x48, Size: 4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x4c, Size: 4]
	uint32 PlayerOutTime;//[Offset: 0x50, Size: 4]
	int CirclePoisonCount;//[Offset: 0x54, Size: 4]
	int CirclePoisonMin;//[Offset: 0x58, Size: 4]
	int CirclePoisonMax;//[Offset: 0x5c, Size: 4]
	int CirclePoisonAvg;//[Offset: 0x60, Size: 4]
	int CirclePoisonTotal;//[Offset: 0x64, Size: 4]
	int CirclePoisonDrop;//[Offset: 0x68, Size: 4]
	int CirclePoisonDead;//[Offset: 0x6c, Size: 4]
	int RecoveryCount;//[Offset: 0x70, Size: 4]
	int RecoveryMin;//[Offset: 0x74, Size: 4]
	int RecoveryMax;//[Offset: 0x78, Size: 4]
	int RecoveryTotal;//[Offset: 0x7c, Size: 4]
	int EnergyRecoveryCount;//[Offset: 0x80, Size: 4]
	int EnergyRecoveryMin;//[Offset: 0x84, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x88, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x8c, Size: 4]
	int EnergyStartLv;//[Offset: 0x90, Size: 4]
	int EnergyStartTime;//[Offset: 0x94, Size: 4]
	FString EnergyItemUse;//[Offset: 0x98, Size: 12]
	int EnergyLvTimeInfo;//[Offset: 0xa4, Size: 4]
	FString EnergyRunFastTime;//[Offset: 0xa8, Size: 12]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xb4, Size: 12]
	int EnergyEndLv;//[Offset: 0xc0, Size: 4]
	int EnergyEndTime;//[Offset: 0xc4, Size: 4]
	int PlayerMoveDis;//[Offset: 0xc8, Size: 4]
	int PlayerSpeedMax;//[Offset: 0xcc, Size: 4]
	int PlayerSpeedAvg;//[Offset: 0xd0, Size: 4]
	int PlayerCarSpeedMax;//[Offset: 0xd4, Size: 4]
	int PlayerCarSpeedAvg;//[Offset: 0xd8, Size: 4]
	int PlayerSquatMoveDis;//[Offset: 0xdc, Size: 4]
	int PlayerSquatMoveTime;//[Offset: 0xe0, Size: 4]
	int PlayerCreepMoveDis;//[Offset: 0xe4, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0xe8, Size: 4]
	int PlayerRunMoveDis;//[Offset: 0xec, Size: 4]
	int PlayerRunMoveTime;//[Offset: 0xf0, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0xf4, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0xf8, Size: 4]
	int PlayerCar;//[Offset: 0xfc, Size: 4]
	int PlayerCameraDistanceMax;//[Offset: 0x100, Size: 4]
	uint32 SecCircleFlowID;//[Offset: 0x104, Size: 4]
	int RecordType;//[Offset: 0x108, Size: 4]
	byte AutoAimType;//[Offset: 0x10c, Size: 1]
	int AutoAimTime;//[Offset: 0x110, Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0x114, Size: 12]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString EnemyOpenID;//[Offset: 0x7c, Size: 12]
	FString EnemyUserName;//[Offset: 0x88, Size: 12]
	uint64 EnemyRoleID;//[Offset: 0x98, Size: 8]
	int EnemyRoleType;//[Offset: 0xa0, Size: 4]
	uint32 HurtTime;//[Offset: 0xa4, Size: 4]
	int HurtType;//[Offset: 0xa8, Size: 4]
	int HitType;//[Offset: 0xac, Size: 4]
	int DamageStart;//[Offset: 0xb0, Size: 4]
	int DamageReduce;//[Offset: 0xb4, Size: 4]
	int ArmorDef;//[Offset: 0xb8, Size: 4]
	int HPstart;//[Offset: 0xbc, Size: 4]
	int HPEnd;//[Offset: 0xc0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xc4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xc8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xcc, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xd0, Size: 4]
	int CarHPStart;//[Offset: 0xd4, Size: 4]
	int CarHPEnd;//[Offset: 0xd8, Size: 4]
	int FallHeight;//[Offset: 0xdc, Size: 4]
	int HypoxiaTime;//[Offset: 0xe0, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0xe4, Size: 4]
	int PlayerKilled;//[Offset: 0xe8, Size: 4]
	int ArmorKill;//[Offset: 0xec, Size: 4]
	int CarKill;//[Offset: 0xf0, Size: 4]
	int IfIsAI;//[Offset: 0xf4, Size: 4]
	int CircleIndex;//[Offset: 0xf8, Size: 4]
	uint32 HurtFlowID;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherID;//[Offset: 0x20, Size: 1]
	int64 GameStartTime;//[Offset: 0x28, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x30, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x34, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x38, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x40, Size: 4]
	FString FollowPlayerUID;//[Offset: 0x44, Size: 12]
	uint32 ExitFollowTime;//[Offset: 0x50, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x54, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x58, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x5c, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x60, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x64, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x68, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x6c, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x70, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x74, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x78, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x7c, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x80, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x84, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x90, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x9c, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]
	int LocationX;//[Offset: 0x4c, Size: 4]
	int LocationY;//[Offset: 0x50, Size: 4]
	int LocationZ;//[Offset: 0x54, Size: 4]
	int KilledLocationX;//[Offset: 0x58, Size: 4]
	int KilledLocationY;//[Offset: 0x5c, Size: 4]
	int KilledLocationZ;//[Offset: 0x60, Size: 4]
	int KilledTeamID;//[Offset: 0x64, Size: 4]
	int TeamID;//[Offset: 0x68, Size: 4]
	FString GameModeID;//[Offset: 0x6c, Size: 12]
	uint64 PawnState;//[Offset: 0x78, Size: 8]
	uint64 KilledPawnState;//[Offset: 0x80, Size: 8]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 Acc;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]

--------------------------------
Class: InexistentAvatarFlow

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x2ad0, Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x2adc, Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x2ae8, Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x2af4, Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x2b00, Size: 12]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x2b0c, Size: 12]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x2b18, Size: 12]
	delegate OnParachuteStateChanged;//[Offset: 0x2b24, Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x2b30, Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x2b34, Size: 4]
	BoxComponent* BoxEar;//[Offset: 0x2b38, Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x2b3c, Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x2b40, Size: 4]
	float IndoorCheckDistance;//[Offset: 0x2b44, Size: 4]
	float IndoorCheckTime;//[Offset: 0x2b48, Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x2b4c, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x2b50, Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b54, Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x2b58, Size: 4]
	float fTickDuration;//[Offset: 0x2b5c, Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x2b60, Size: 24]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b78, Size: 1]
	enum ParachuteState;//[Offset: 0x2b88, Size: 1]
	bool bClientParachuteLandedFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba8, Size: 1]
	float LandDistanceCanAjustWhenParachuteLanded;//[Offset: 0x2bac, Size: 4]
	float CheckCanLandMaxSeconds;//[Offset: 0x2bd0, Size: 4]
	byte MoveUploadTimeout;//[Offset: 0x2bd8, Size: 1]
	float DSParachuteLandedFinishTimeMax;//[Offset: 0x2be8, Size: 4]
	bool bIsPendingCaptived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bec, Size: 1]
	enum LastParachuteState;//[Offset: 0x2bed, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x2bf0, Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf4, Size: 1]
	float SwimZDir;//[Offset: 0x2bf8, Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bfc, Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bfd, Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x2c00, Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x2c04, Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x2c08, Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x2c0c, Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x2c10, Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x2c14, Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x2c18, Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x2c1c, Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x2c20, Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x2c24, Size: 4]
	AkAudioEvent* AK_ParachuteLocalOverride;//[Offset: 0x2c28, Size: 4]
	AkAudioEvent* AK_ParachuteRemoteOverride;//[Offset: 0x2c2c, Size: 4]
	AkAudioEvent* AK_LandingLocalOverride;//[Offset: 0x2c30, Size: 4]
	AkAudioEvent* AK_LandingRemotelOverride;//[Offset: 0x2c34, Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x2c38, Size: 80]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x2c88, Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x2cd8, Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x2d28, Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x2d90, Size: 4]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d94, Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d95, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x2d98, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x2d9c, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da0, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x2dac, Size: 4]
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x2db0, Size: 1392]
	float CameraInfoAdditiveWeight;//[Offset: 0x3320, Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x3378, Size: 4]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3393, Size: 1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3394, Size: 1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x3398, Size: 4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339c, Size: 1]
	enum GoldenSuitSlot;//[Offset: 0x339d, Size: 1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x33a0, Size: 4]
	float GoldenSuitCheckDelta;//[Offset: 0x33a4, Size: 4]
	float GoldenSuitTestFistDamage;//[Offset: 0x33a8, Size: 4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x33ac, Size: 72]
	FName FeatureActorName;//[Offset: 0x3410, Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3418, Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3419, Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341a, Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x341c, Size: 4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x3428, Size: 4]
	InteractiveComponentBase*[] InteractiveComponentList;//[Offset: 0x3430, Size: 12]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343c, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343d, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x343e, Size: 2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x3440, Size: 4]
	int TrySightCorrectionTime;//[Offset: 0x344c, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x3450, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3454, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3455, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x3458, Size: 4]
	bool ForceSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3464, Size: 1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346c, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x3470, Size: 12]
	int CurrentActivityID;//[Offset: 0x347c, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x3480, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x3484, Size: 4]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3488, Size: 1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x3490, Size: 16]
	int[] InjuryFreeData;//[Offset: 0x34a0, Size: 12]
	float RecentlyGunADSOrProneTimeThresholdInSeconds;//[Offset: 0x3504, Size: 4]
	void UseCameraParamForVehicleParachute(bool InEnable);// 0x3791594
	void UpdateRecentAutonomousAttackTime();// 0x3791580
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x37914b4
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x379143c
	void UpdateIndoorState(bool IsInDoor);// 0x3791374
	void UpdateEnableGoldenSuitCheck();// 0x3791358
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x3791290
	void TriggerParachuteLandVoice();// 0x3791274
	void TriggerAutoAimCheck(float DeltaTime);// 0x37911fc
	void TouchCancelSkillLock();// 0x37911e8
	void SyncLatestPlayerStatus(enum LatestParachuteState);// 0x3791134
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x3708210
	void SwitchSightAngledServer(byte InAngledSightType, bool IsOnlyTurn);// 0x3791024
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x3790f58
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x3790e94
	void SwitchCameraToParachuteOpening();// 0x3790e78
	void SwitchCameraToParachuteFalling();// 0x3790e5c
	void SwitchCameraToNormal();// 0x3790e40
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x3790dc8
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x446e168
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x3790db4
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x446e168
	void StopCamShake();// 0x3790d98
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x3790d20
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x3790ca8
	void StartCamShake();// 0x3790c8c
	void ShowNightVisionFrame();// 0x3706404
	void ShowConfirmDialogOfMisKill();// 0x3706370
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x3790bec
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x3790b74
	void SetSpecifiedItemConsumed(int ItemID);// 0x446e168
	void SetSelfAndVehicleShadow(bool IsShow);// 0x3790af4
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x3790a38
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x379092c
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x3790868
	void SetParachuteState(enum State);// 0x37907e8
	void SetInjuryFreeRateData(out const int[] InInjuryFreeData);// 0x379071c
	void SetFPPDeafultFov(float InFov);// 0x37906a4
	void SetFovInTPPSpringArm(float FieldOfView);// 0x379062c
	void SetEnableStandalonePickUpTick(bool bEnableTick);// 0x37905ac
	void SetBodyIndoor(bool IsInDoor);// 0x379052c
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x379027c
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd);// 0x3790050
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x378fef4
	void ServerRPCOnClickInteractiveButton(InteractiveComponentBase* pComponent, int Flag);// 0x378fdf8
	void ServerOnApplicationactivated(bool bAppActive);// 0x378fd30
	void ResetCharacter();// 0x36ff018
	void RequestLoadParachuteAnim(bool bHasNewChildComponent);// 0x378fca8
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x378fbe0
	void RemoveParachuteAnim();// 0x378fbcc
	void ReleaseTrigger(enum Hand);// 0x378fb4c
	void ReinitAbilitySystemComponentAvatar();// 0x378fb38
	void RefreshBearerFramingTick();// 0x378fb24
	void PushTrigger(enum Hand);// 0x378faa4
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x378f950
	void PawnClientRestartSpectatorUIDell();// 0x378f934
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x446e168
	void OnTakeDamage(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Causer, out const ExtraDamageInfo ExtraDamageInfo);// 0x378f734
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x446e168
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x446e168
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x446e168
	void OnRepParachuteStateDelegate__DelegateSignature();// 0x446e168
	void OnRep_STPlayerController();// 0x378f720
	void OnRep_ParachuteState(enum State);// 0x378f6a0
	void OnRep_MoveUploadTimeout();// 0x378f68c
	void OnRep_InteractiveComponentList();// 0x3365b48
	void OnRep_InjuryFreeData();// 0x378f678
	void OnRep_CurrentActivityID();// 0x378f664
	void OnRep_bIsPendingCaptived();// 0x378f650
	void OnRep_AngleSightStateChanged();// 0x378f63c
	void OnRep_ActivityAnimationRepData();// 0x378f628
	void OnRank(int Kills, int Rank);// 0x378f56c
	void OnPlayerCurrentWeaponChange(byte CurSlot);// 0x378f4f4
	void OnParachuteStateChangedDelegate__DelegateSignature(enum LastParachuteState, enum NewParachuteState);// 0x446e168
	void OnMiniTreeTriggerServerLogicCPP();// 0x378f4d8
	void OnLockUpdateAroundPickupEnd();// 0x378f4c4
	void OnLoadParachuteAnimCompleted();// 0x378f4b0
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x446e168
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x446e168
	void OnBPStateCheckIn();// 0x446e168
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x378f3a4
	void OnAllAvatarEquippedSucc();// 0x378f390
	void NotifyClientParachuteLanded(bool bOK);// 0x378f2c8
	bool NeedResetFlyDeviceParachuteAnim();// 0x378f298
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x378f210
	void MiniTreeTriggerServerLogic();// 0x378f1b4
	bool IsSwitchCoolingDownFinish();// 0x378f180
	bool IsSpecifiedItemInCD(int ItemID);// 0x378f0f8
	bool IsLandedWithClientPos();// 0x378f0d0
	bool IsInLaunchSeat();// 0x378f0a0
	bool IsGrenadeEmpty();// 0x378f078
	bool IsBodyIndoorFuc();// 0x378f058
	bool IsBodyIndoorCheck();// 0x378f030
	bool IsAllowSyncControllerRotationInActived();// 0x34dfb20
	bool IsAllowPickupActor();// 0x35bdbc4
	void InitAirAttackLocatorComponent();// 0x378f01c
	void HideNightVisionFrame();// 0x36f7abc
	bool HasParachuteAnimLoaded();// 0x378eff4
	void HandleParachuteStateChanged(enum NewState);// 0x378ef74
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x378ed5c
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x378eb44
	SpringArmComponent* GetThirdPersonSpringArm();// 0x446e168
	CameraComponent* GetThirdPersonCamera();// 0x446e168
	float GetSwimRotateX_Ex();// 0x378eb1c
	int GetSkillIndexByActivityID();// 0x446e168
	SpringArmComponent* GetScopeSpringArm();// 0x446e168
	CameraComponent* GetScopeCamera();// 0x446e168
	bool GetPlayerVisibile();// 0x378eaf4
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x378ea74
	STExtraPlayerController* GetPlayerControllerSafety();// 0x36f61dc
	void GetOnVehicleDelegate__DelegateSignature();// 0x446e168
	SceneComponent* GetMoveableComp();// 0x378ea4c
	bool GetIsInDoor();// 0x378ea1c
	bool GetIsGunADS();// 0x378e9ec
	InteractiveComponentBase*[] GetInteractiveComponentList();// 0x378e97c
	float GetInjuryFreeRate(int BodyPart);// 0x36f5ad0
	SpringArmComponent* GetFPPSpringArm();// 0x446e168
	float GetFPPDeafultFov();// 0x378e954
	CameraComponent* GetFPPCamera();// 0x446e168
	SpringArmComponent* GetFirstPersonSpringArm();// 0x446e168
	CameraComponent* GetFirstPersonCamera();// 0x446e168
	enum[] GetDisallowedStates(int ActivityID);// 0x446e168
	int GetBuildingAvatarID(int BuildingID);// 0x446e168
	Vector GetBonePos(FName BoneName, Vector OffsetPos);// 0x378e87c
	void FreeFallShakeCam();// 0x378e868
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x378e7f0
	void EnableRegionBaseNetConsideration();// 0x378e7dc
	void EnablePet(bool Enable);// 0x378e754
	void DynamicCreateComponents();// 0x378e740
	void DisableSimulateAnimUpdateRateOptimization(bool bDisable, float LessThanDistanceSquareCanDisable);// 0x378e678
	void DelayStopLandState();// 0x378e664
	void DelayRemoveParachuteAnim();// 0x378e650
	void ClientUserMoveCmdAck(int Sequence);// 0x378e5d0
	void ClientRPCOnOverlapInteractiveComponent(InteractiveComponentBase* pComponent, bool isBeginOverlap);// 0x378e504
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x378e400
	void ClientInitParachuteLaunchStatus(Vector Vel);// 0x378e388
	void ClientCheckCancleFollow(enum InLastState, enum InNewState);// 0x378e2cc
	void ClientAckGoodMove(float TimeStamp);// 0x378e24c
	void ClearHPUI();// 0x36f1514
	bool CheckServerCanLanded();// 0x378e224
	void CheckAttachedOrDetachedVehicle();// 0x378e210
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x378e190
	void CallRefreshBPStateCheckIn();// 0x378e17c
	void AsyncLoadGunCollisionFinish(SoftClassPath GunCollisionPath);// 0x378e010
	void AnimInstanceCacheParachuteAnimVars(bool bForceRefreshAnim);// 0x378df90
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x378df08
	void AdjustServerParachuteLanded(float ClientTimeStamp, int RespawnCount, const Vector Position, const Rotator Rotation);// 0x378dd88

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xc8, Size: 32]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xe8, Size: 32]
	Vector2D AimTargetScreenPos;//[Offset: 0x108, Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	STExtraPlayerController* ExtraPlayerController;//[Offset: 0x114, Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x118, Size: 4]
	float LastSelectAimEnemyTime;//[Offset: 0x11c, Size: 4]
	float LastFindAimEnemyTime;//[Offset: 0x120, Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x124, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x128, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x12c, Size: 4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x130, Size: 4]
	float OPEN_COLLISION_TIME;//[Offset: 0x134, Size: 4]
	float AIM_CROSSHAIR_CHECK_DELTA;//[Offset: 0x138, Size: 4]
	float LOCK_TARGET_TOLERANCE;//[Offset: 0x13c, Size: 4]
	float RANGE_SCALE;//[Offset: 0x140, Size: 4]
	float RANGE_SCALE_MAX;//[Offset: 0x144, Size: 4]
	float AC_AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x164, Size: 4]
	float AC_AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x168, Size: 4]
	float AC_DEFAULT_CD_TIME;//[Offset: 0x16c, Size: 4]
	float AC_SCOPE_AUTO_AIM_TIME;//[Offset: 0x170, Size: 4]
	float AC_RANGE_SCALE;//[Offset: 0x174, Size: 4]
	float AC_RANGE_SCALE_MAX;//[Offset: 0x178, Size: 4]
	float AC_AutoAimBreakThroughRatio;//[Offset: 0x17c, Size: 4]
	FName[] AC_Bones;//[Offset: 0x180, Size: 12]
	FName[] Bones;//[Offset: 0x18c, Size: 12]
	<FName,Vector> BonesOffset;//[Offset: 0x198, Size: 60]
	float TargetScreenWidth;//[Offset: 0x1d4, Size: 4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	float AutoAimSensitiveScreenRatio;//[Offset: 0x1dc, Size: 4]
	bool bEnableAimSensitiveOnlyInGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	float AutoAimSensitiveAngle;//[Offset: 0x1e4, Size: 4]
	float AutoAimBreakThroughAngle;//[Offset: 0x1e8, Size: 4]
	float AutoAimBreakThroughRatio;//[Offset: 0x1ec, Size: 4]
	float AutoAimBreakThroughStart;//[Offset: 0x1f0, Size: 4]
	float AutoAimBreakThroughSensitiveScale;//[Offset: 0x1f4, Size: 4]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool bModifyCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	WeaponCrossHairPerformData[] CrossHairDataRifle;//[Offset: 0x3c0, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataPistol;//[Offset: 0x3cc, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataShotGun;//[Offset: 0x3d8, Size: 12]
	void OnUnEquipWeapon();// 0x390bf70
	void OnShoot(STExtraWeapon* Weapon);// 0x390bef8
	void OnEquipWeapon();// 0x390bee4
	void OnCharacterLeaveState(enum ChangedState);// 0x390be6c
	void OnCharacterEnterState(enum ChangedState);// 0x390bdf4
	bool IsTriggerBeforeFire();// 0x390bdcc
	bool IsCurrentWeaponSupportAutoAim();// 0x390bda4
	void Init(Controller* Controller);// 0x390bd2c
	bool HasEnemyInAutoAimRange(float DeltaTime);// 0x390bcac
	void GetDataFromWeaponEntity();// 0x390bc98
	AutoAimEnemyInfo FindEnemyNearScreenCenter(out const Vector RayStart, float Radius, out const FName BoneName, float CollisionTime, bool HitMatchBone);// 0x390babc
	bool CheckSmoke(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x390b930
	bool CheckInAngle(STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x333c98c
	bool CheckBuffStun();// 0x390b908
	bool CanEnemeyRaycastReach(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x390b77c
	bool CanAsynCalcuAimRange();// 0x390b754
	void BPDrawDebugInfo(out const float[] AutoAimParams);// 0x390b680

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xf4, Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0xf8, Size: 12]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x104, Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x108, Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x114, Size: 12]
	FName ScreenPlane;//[Offset: 0x120, Size: 8]
	bool FollwCameraManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x12c, Size: 12]
	delegate OnPlayScreenAppearance;//[Offset: 0x138, Size: 12]
	delegate OnStopScreenAppearance;//[Offset: 0x144, Size: 12]
	delegate OnPlayScreenParticle;//[Offset: 0x150, Size: 12]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x15c, Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x168, Size: 4]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x178, Size: 12]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x382fcc4
	void StopScreenParticleEffectByName(FString ScreenParticleName);// 0x382fc08
	void StopScreenParticleEffect(byte EffectType);// 0x382fb90
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x382fa88
	void StopAllScreenParticleEffect();// 0x382fa74
	void StopAllScreenAppearance();// 0x382fa60
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* Tex);// 0x382f91c
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x382f860
	bool SetScalarParam(FString AppearanceName, FName ParamName, float ParamValue);// 0x382f70c
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x382f5e0
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x382f510
	void SetAllAppearanceMeshHiddenInGame(bool bNewHid);// 0x382f490
	void PlayScreenParticleWhenCharacterHideInGame(ParticleSystem* PS, out const Transform RelativeTransform, float LifeSeconds);// 0x382f330
	void PlayScreenParticleEffectByName(FString ScreenParticleName, float InEffectValue);// 0x382f22c
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x382f170
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x382f010
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x382ee30
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x382ec08
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI, FName InMatInstParamName, CurveFloat* InParamCurve);// 0x382e9d8
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x382e960
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x382e89c
	void HandleEffectLoadFinishByName(FString ScreenParticleName);// 0x382e744
	void HandleEffectLoadFinish(byte EffectType);// 0x382e6cc
	bool GetScalarParam(FString AppearanceName, FName ParamName, out float ParamValue);// 0x382e568

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	float LifeSpan;//[Offset: 0xc, Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44, Size: 4]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x50, Size: 48]
	FName MatInstParamName;//[Offset: 0x80, Size: 8]
	CurveFloat* ParamCurve;//[Offset: 0x88, Size: 4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 1]
	FString ScreenParticleEffectName;//[Offset: 0x4, Size: 12]
	ParticleSystem* ParticleEffect;//[Offset: 0x10, Size: 40]
	FName ParticleParamName;//[Offset: 0x38, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x40, Size: 12]
	Vector ScreenParticleEffectLoc;//[Offset: 0x4c, Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x58, Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bNeedReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	float CurrentParamValue;//[Offset: 0x60, Size: 4]
	byte DisableDeviceLevel;//[Offset: 0x64, Size: 1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	FName AppearanceTag;//[Offset: 0x10, Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 4]
	float MatialAlpha;//[Offset: 0x54, Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58, Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c, Size: 4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	float GradualFrag;//[Offset: 0x64, Size: 4]
	float DelayTime;//[Offset: 0x68, Size: 4]

--------------------------------
Class: MultiAppearanceMeshData
	StaticMeshComponent* MultiAppearanceMesh;//[Offset: 0x0, Size: 4]

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x740, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x770, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x7a0, Size: 48]
	void SetActivate(bool _IsActivate);// 0x35a30d4

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x854, Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x345c778

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 4]
	FName ParentSocketName;//[Offset: 0x10, Size: 8]
	float TargetArmALength;//[Offset: 0x18, Size: 4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 12]
	Vector TargetOffset;//[Offset: 0x28, Size: 12]
	Vector RelativeLocation;//[Offset: 0x34, Size: 12]
	float ProbeSize;//[Offset: 0x40, Size: 4]
	byte ProbeChannel;//[Offset: 0x44, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0, Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xbc, Size: 4]
	float AALOpenSensibility;//[Offset: 0xc0, Size: 4]
	float OpenAALFOV;//[Offset: 0xc4, Size: 4]
	int MaxDist;//[Offset: 0xc8, Size: 4]
	int minDist;//[Offset: 0xcc, Size: 4]
	int DangerDist;//[Offset: 0xd0, Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xd8, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x100, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x128, Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x12c, Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x130, Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x138, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x13c, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x140, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x144, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x148, Size: 4]
	float ShortDis;//[Offset: 0x14c, Size: 4]
	byte ChannelType;//[Offset: 0x150, Size: 1]
	Vector TargetLocation;//[Offset: 0x154, Size: 12]
	void SetItemExsist(bool bExsist);// 0x33471e0
	void SetFinalLocation();// 0x33471cc
	void SetAALFov(bool bOpen);// 0x334714c
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x3347034
	void OnFreeArrowLoadFinsh();// 0x3347020
	void OnCalledActorLoadFinsh(Vector Location);// 0x3346fb0
	float GetTargetDistance();// 0x3346f88
	bool GetAALAvaliable();// 0x3346f60

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x34c, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x350, Size: 4]
	int SkillID;//[Offset: 0x354, Size: 4]
	int IconID;//[Offset: 0x358, Size: 4]
	float AttackAreaRadius;//[Offset: 0x35c, Size: 4]

--------------------------------
Class: FanPickerConfigData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float CapsuleRadius;//[Offset: 0x8, Size: 4]
	Vector Offset;//[Offset: 0xc, Size: 12]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsHeadJudgeWithoutOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 12]
	bool bForwardHitAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	enum PickerType;//[Offset: 0x2d, Size: 1]
	enum PickerTargetType;//[Offset: 0x2e, Size: 1]
	int PickerMaxCount;//[Offset: 0x30, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Actor*[] IgnoreTargets;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 4]

--------------------------------
Class: InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnAllowToInteract;//[Offset: 0x150, Size: 16]
	delegate OnAllowToClickButton;//[Offset: 0x160, Size: 16]
	delegate OnInteractionEffective;//[Offset: 0x170, Size: 16]
	delegate OnClientShowInteractiveUI;//[Offset: 0x180, Size: 12]
	delegate OnServerAddOrDeleteComponent;//[Offset: 0x18c, Size: 12]
	delegate OnServerClickInteractiveButton;//[Offset: 0x198, Size: 12]
	delegate OnServerRPCSetOccupied;//[Offset: 0x1a4, Size: 12]
	delegate OnStartCoolDown;//[Offset: 0x1b0, Size: 12]
	delegate OnRepOccupied;//[Offset: 0x1bc, Size: 12]
	delegate OnRepCoolDown;//[Offset: 0x1c8, Size: 12]
	delegate OnRepCurrentCharacter;//[Offset: 0x1d4, Size: 12]
	delegate OnRepCurrentCharacterArray;//[Offset: 0x1e0, Size: 12]
	delegate OnRepEnabled;//[Offset: 0x1ec, Size: 12]
	delegate OnResetSkillAction;//[Offset: 0x1f8, Size: 12]
	delegate OnStartedSkillAction;//[Offset: 0x204, Size: 12]
	delegate OnFinishedSkillAction;//[Offset: 0x210, Size: 12]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x21c, Size: 4]
	PrimitiveComponent*[] PrimitiveComponentArray;//[Offset: 0x220, Size: 12]
	Character* OccupyingCharacter;//[Offset: 0x22c, Size: 8]
	Character*[] OccupyingCharacterArray;//[Offset: 0x234, Size: 12]
	bool bIsCooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	int CoolDownLeftTimeForShow;//[Offset: 0x244, Size: 4]
	bool bOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	FName PrimitiveComponentTag;//[Offset: 0x250, Size: 8]
	int CollisionsNum;//[Offset: 0x258, Size: 4]
	bool bCanInteractMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool bShowedMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	bool bOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	bool bCheckBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 1]
	int CheckBlockCharacterIncrement;//[Offset: 0x260, Size: 4]
	int CheckBlockActorIncrement;//[Offset: 0x264, Size: 4]
	bool bCanInteractInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bCanInteractWhenNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bCanInteractInCarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool bCanInteractInBeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	bool bCanAIInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bAllowWhenCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	int TipsIdWhenClickedInCoolDown;//[Offset: 0x270, Size: 4]
	float CoolDownTime;//[Offset: 0x274, Size: 4]
	float MaxOccupyingTime;//[Offset: 0x278, Size: 4]
	int MaxOccupyingCharacterNum;//[Offset: 0x27c, Size: 4]
	int TLogKey;//[Offset: 0x280, Size: 4]
	bool bTLogCountReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	Volume* CustomTriggerVolume;//[Offset: 0x288, Size: 4]
	int DebugParameter;//[Offset: 0x28c, Size: 4]
	int SkillID;//[Offset: 0x290, Size: 4]
	bool bResetSkillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	float LoadingDuration;//[Offset: 0x298, Size: 4]
	SoftObjectPath LoadingIcon;//[Offset: 0x2a0, Size: 24]
	AnimMontage* FPS_AnimMontage_Stand;//[Offset: 0x2b8, Size: 40]
	AnimMontage* FPS_AnimMontage_Crouch;//[Offset: 0x2e0, Size: 40]
	AnimMontage* FPS_AnimMontage_Prone;//[Offset: 0x308, Size: 40]
	AnimMontage* FPS_AnimMontage_Vehicle;//[Offset: 0x330, Size: 40]
	AnimMontage* TPS_AnimMontage_Stand;//[Offset: 0x358, Size: 40]
	AnimMontage* TPS_AnimMontage_Crouch;//[Offset: 0x380, Size: 40]
	AnimMontage* TPS_AnimMontage_Prone;//[Offset: 0x3a8, Size: 40]
	AnimMontage* TPS_AnimMontage_Vehicle;//[Offset: 0x3d0, Size: 40]
	void StartCoolDown();// 0x3538d68
	void SetOccupied(Character* Character, bool bOccupied);// 0x3538ca4
	void SetEnable(bool bIsEnable);// 0x3538c24
	void ServerAddOrDeleteInteractiveComponent(Character* Character, bool bAdd);// 0x3538b60
	void RegisterCollisionsEvent();// 0x3538b4c
	void OnRep_Occupied();// 0x3538b38
	void OnRep_Enabled();// 0x3538b24
	void OnRep_CurrentCharacterArray();// 0x3538b10
	void OnRep_CurrentCharacter();// 0x3538afc
	void OnRep_CoolDown();// 0x3538ae8
	void OnEndOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex);// 0x35389a0
	void OnBeginOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3538768
	bool IsOverlappingByCharacter(Character* Character);// 0x35386e8
	bool IsOccupied();// 0x35386c0
	bool IsInteractionEffective(Character* Character, out enum Reason);// 0x35385ec
	bool IsEnabled();// 0x35385c4
	bool IsCoolingDown();// 0x353859c
	int GetInteractiveCharacterNum();// 0x3538574
	void GetCurrentOccupyingCharacterArray(out Character*[] OutActors);// 0x35384a8
	Character* GetCurrentOccupyingCharacter();// 0x3538480
	int GetCoolDownLeftTimeForShow();// 0x3538458
	void GetAllInteractiveCharacters(out Character*[] OutActors);// 0x353838c
	bool AllowToInteract(Character* Character, out enum Reason);// 0x35382b8
	bool AllowToClickButton(Character* Character, out enum Reason);// 0x35381e4

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 12]
	int ActivityID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.LuaActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x3e8, Size: 12]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x3f4, Size: 12]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x400, Size: 12]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x410, Size: 12]
	float CurrentScale;//[Offset: 0x41c, Size: 4]
	int CurActTime;//[Offset: 0x420, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x424, Size: 12]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	FName SocketBaseTags;//[Offset: 0x438, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x440, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x444, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x448, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x44c, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x450, Size: 12]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x45c, Size: 12]
	int AttachedNumber;//[Offset: 0x46c, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x470, Size: 60]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x4ac, Size: 12]
	Vector[] DropOffLocations;//[Offset: 0x4c4, Size: 12]
	enum DropOffLocationType;//[Offset: 0x4d0, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x4d4, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x4d8, Size: 12]
	byte IsDayTime;//[Offset: 0x4e4, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x4e8, Size: 12]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x4f5, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x4f8, Size: 12]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool UseDropFixedPosition();// 0x35c6e84
	void StopDancing_Multicast(const Actor*[] Players);// 0x3904544
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x3904408
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x3904354
	static void SetupMinimapDisplay(UAEPlayerController* PController, out const LoveTreeData[] treeData);// 0x390424c
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x39041d4
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x446e168
	void ResetPCByTime(PlayerController* PlayerController, float cdTime);// 0x3904118
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x3904074
	void OnStopDancing(out const Actor*[] Players);// 0x3903fa0
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x3903e88
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x3903e08
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x446e168
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x446e168
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x3903d6c
	void OnRep_SkeletalAnimationSyncData();// 0x3903d58
	void OnRep_ShowRabbitAnim();// 0x33492cc
	void OnRep_PawnDoneList();// 0x3349304
	void OnRep_IsDayTime();// 0x3349320
	void OnRep_CurrentScaleCPP();// 0x3903d44
	void OnRep_CurrentScaleBP();// 0x446e168
	void OnRep_CurrentInteractingPlayerCount();// 0x3903cf0
	void OnRep_CurActTimeCPP();// 0x3903c9c
	void OnRep_CurActTimeBP();// 0x446e168
	void OnRep_AttachedNumber();// 0x3903c3c
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x3903adc
	void OnPlayerNumberChanged(int Number);// 0x446e168
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x446e168
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x446e168
	void OnPCCDCleared(PlayerController* PlayerController);// 0x446e168
	void OnClientCurrentInteractingPlayerCountChanged();// 0x446e168
	bool IsDropFixedRelativePositionSetUp();// 0x3903aac
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x3903a2c
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x3903994
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x3903810
	bool CanTriggertEvent(Pawn* CurPawn);// 0x446e168
	int CacheAssociatedSkillIndex();// 0x446e168

--------------------------------
Class: UAERegionActor.LuaActor.Actor.Object
	byte AutoDormancyType;//[Offset: 0x39c, Size: 1]
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	enum RegionSize;//[Offset: 0x39e, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	void ReceivedPlayerActiveRegionsChanged(bool bEnter);// 0x446e168

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 4]
	Actor* AttachedPlayer;//[Offset: 0xc, Size: 4]
	Vector OffsetLoc;//[Offset: 0x10, Size: 12]
	Rotator OffsetRot;//[Offset: 0x1c, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x28, Size: 4]

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 4]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 4]
	Vector Loc;//[Offset: 0x4, Size: 12]
	float minRate;//[Offset: 0x10, Size: 4]
	float maxRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerTombBox.LuaActor.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x3d8, Size: 12]
	FName TombName;//[Offset: 0x3e8, Size: 8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x3f4, Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x3f8, Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x400, Size: 24]
	int DeadTime;//[Offset: 0x418, Size: 4]
	int BoxLifeSpan;//[Offset: 0x41c, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x424, Size: 12]
	byte AttackRules;//[Offset: 0x430, Size: 1]
	Actor* AttachedActor;//[Offset: 0x434, Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	enum BoxType;//[Offset: 0x439, Size: 1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x43c, Size: 12]
	uint32 OwnerUniqueID;//[Offset: 0x448, Size: 4]
	int TargetPlayerKey;//[Offset: 0x44c, Size: 4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x454, Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	bool bAirDropWrapperDynamicRegionNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 1]
	int AvatarID;//[Offset: 0x45c, Size: 4]
	Character* BoxOwner;//[Offset: 0x460, Size: 4]
	ProjectileMovementComponent* CacheComp;//[Offset: 0x464, Size: 4]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x468, Size: 8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x470, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x47c, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	int DropGroupID;//[Offset: 0x484, Size: 4]
	Vector DropStartLocation;//[Offset: 0x488, Size: 12]
	void SwitchToDeadTombBox();// 0x33492e8
	void SetVisible(bool IsVisible);// 0x35e9800
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x35e9698
	void RegisterToPlayerPickUpList();// 0x35e9684
	void RegisterToCurveAnimComponent();// 0x344a258
	void OpenListenUIEvent(bool bOpen);// 0x446e168
	void OnRep_VisibilityChange();// 0x35e9670
	void OnRep_ItemEffectBoxPickupWrapperActor();// 0x35e965c
	void OnRep_ChangeBoxMesh();// 0x3365b48
	void OnRep_BoxLifeSpan();// 0x35e9648
	void OnRep_AvatarId();// 0x33e65ac
	void OnRep_AttachmentReplication();// 0x35c7c6c
	void OnRep_AttachedActor();// 0x35e9634
	void OnRefreshItemEffect();// 0x35e9620
	void HideDeadTombApparence();// 0x3348728
	int GetUniqueInstanceID();// 0x35e95f8
	int GetTombboxLifespan();// 0x35e95d0
	PickUpListWrapperActor* GetPickupWrapperActor();// 0x35e95b4
	void GetDropItemListFromPlayer(out PickUpItemData[] ItemDataList);// 0x35e9508
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x35e94d8
	int GetAvatarId();// 0x35e94b0
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x35e9394
	void GeneratePlayerBackpackWrappers();// 0x35e9380
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x35e91e8
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x35e90ec
	void GenerateBoxWrappersByItemDataList(out const PickUpItemData[] DataList, FName BoxName, bool IsInAirDropBox);// 0x35e8fa4
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxId);// 0x35e8e44
	int DellGeneratePlayerBackpackWrappers(PickUpListWrapperActor* Wrapper, int MaxItemQuality);// 0x35e8d78
	bool CanPickByPawn(Pawn* Pawn);// 0x35e8cf0
	void AddToAIList(PickUpListWrapperActor* Wrapper);// 0x35e8c78

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 4]
	<int> ItemSpecificIDArray;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x6a0, Size: 12]
	enum BoxType;//[Offset: 0x6b8, Size: 1]
	float PickUpListDataRelevancyDistanceSqrt;//[Offset: 0x6e4, Size: 4]
	PickUpDataComponent* PickUpDataComponent;//[Offset: 0x6e8, Size: 4]
	void SetPickUpDataList(out PickUpItemData[] PickUpItemDatas);// 0x35c316c
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x35c3070
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x35c2f9c
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x446e168
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0x446e168
	void OnRep_PickUpDataList();// 0x35c2f88
	void OnRep_PickUpDataComponent();// 0x3365b48
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x446e168
	void OnBoxEmptyDelegate__DelegateSignature(int boxId);// 0x446e168
	PickUpItemData[] GetPickUpDataList();// 0x35c2f58
	PickUpItemData[] GetDataList();// 0x35c2eec
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x35c2d9c

--------------------------------
Class: PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x3e8, Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x3f0, Size: 24]
	int Count;//[Offset: 0x408, Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x410, Size: 12]
	bool bForceDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 1]
	FName OwnerName;//[Offset: 0x420, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x428, Size: 4]
	float OwnerTime;//[Offset: 0x42c, Size: 4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x434, Size: 12]
	Actor* AttachedActor;//[Offset: 0x440, Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x444, Size: 12]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x454, Size: 4]
	float PickUpColdCountDown;//[Offset: 0x458, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x480, Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x488, Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x48c, Size: 4]
	FString ItemValue;//[Offset: 0x490, Size: 12]
	FString ItemCategory;//[Offset: 0x49c, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	delegate OnWrapperPickedUp;//[Offset: 0x4b0, Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x4c0, Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x4c4, Size: 4]
	int ObjectPoolSize;//[Offset: 0x4c8, Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 1]
	int InBoxEffectDurationTime;//[Offset: 0x4d0, Size: 4]
	FString EffectPath;//[Offset: 0x4d4, Size: 12]
	FString DurationTime;//[Offset: 0x4e0, Size: 12]
	int ItemID;//[Offset: 0x4ec, Size: 4]
	Color DefaultColor;//[Offset: 0x4f0, Size: 4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x500, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x580, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x600, Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x640, Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x650, Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x668, Size: 4]
	int SpotDataIndex;//[Offset: 0x678, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	int DropGroupID;//[Offset: 0x688, Size: 4]
	Vector DropStartLocation;//[Offset: 0x68c, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x35c8420
	FString ToDetailString();// 0x35c8358
	void ShowMesh(bool bShow);// 0x35c82d8
	void ShowActor();// 0x35c82c4
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x35c815c
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x35c80cc
	void SetDefineID(out const ItemDefineID DID);// 0x35c803c
	void SetCountOnServerAfterSpawn(int _Count);// 0x35c7fc4
	void SetActorToGround(Actor* IgnoreActor);// 0x35c7f10
	void ServerResetShowActor();// 0x35c7efc
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x35c7da0
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x35c7cec
	void RegisterToCurveAnimComponent();// 0x35c7cd8
	void PickUpWrapperShow__DelegateSignature();// 0x446e168
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x446e168
	void OnWrapperPickedDelegate__DelegateSignature();// 0x446e168
	void OnSpawned();// 0x34483e8
	void OnRespawnedEvent();// 0x33492cc
	void OnRep_PickUpColdCountDown();// 0x35c7cc4
	void OnRep_OwnerUniqueID();// 0x35c7cb0
	void OnRep_Owner();// 0x35bc7fc
	void OnRep_DropGroundEffectInfo();// 0x35c7c9c
	void OnRep_DefindID();// 0x35c7c88
	void OnRep_Count();// 0x3349304
	void OnRep_AttachmentReplication();// 0x35c7c6c
	void OnRep_AttachedActor();// 0x35c7c58
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x35c7a40
	void OnHideActor(bool bHide);// 0x35c79b4
	void OnDestroyed();// 0x348b2cc
	void OnActorDestroyed();// 0x3494c24
	int MoveWrapperContainsAttachment(enum AttachmentAdditionalDataType);// 0x35c792c
	void ModifyData(int _Count);// 0x35c78b4
	void MarkPlayerPlayerInfoByDropped(STExtraBaseCharacter* InDroppedPlayer);// 0x35c783c
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x35c7774
	bool LoadDynamicMeshInst(StaticMesh* InStaticMesh);// 0x35c76f4
	bool LoadDynamicMesh(FString MeshPath);// 0x35c7630
	bool LoadDynamicMaterialInst(MaterialInstance* InMaterialInst);// 0x35c75b0
	bool LoadDynamicMaterial(FString MaterialPath);// 0x35c74ec
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x35c7408
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x35c70b0
	int HasWrapperContainsAttachment(enum AttachmentAdditionalDataType);// 0x35c7028
	StaticMeshComponent* GetPickupMesh();// 0x35c7000
	int GetNetGUIDOffsetValue();// 0x35c6fd8
	int GetItemType();// 0x35c6fa8
	uint64 GetItemInstanceId();// 0x35c6f80
	int GetItemId();// 0x35c6f50
	bool GetHasBeenPickedUp();// 0x35c6f20
	PickUpItemData[] GetDataList();// 0x35c2eec
	void ForceNetUpdate();// 0x35c6f04
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x35c2d9c
	void ColdTimeCountDown();// 0x35c6ef0
	void ClientResetShowActor();// 0x35c6edc
	bool CheckPickUpDataIsWeapon();// 0x35c6eb4
	bool CanBePickedUp();// 0x35c6e84
	void BroadcastResetShowActor();// 0x35c6e28
	void BroadcastDataToAllClients(int Count_New);// 0x35c6d74
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x35c6cf4
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x35c6ae0

--------------------------------
Class: UAENetActor.LuaActor.Actor.Object
	int iRegionActor;//[Offset: 0x39c, Size: 4]
	bool bStaticAddNetworkActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	byte AutoDormancyType;//[Offset: 0x3a3, Size: 1]
	void ReceivedPlayerActiveRegionsChanged(bool bEnter);// 0x446e168

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c, Size: 12]
	int InstanceID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: PickUpDataComponent.ActorComponent.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0xc0, Size: 12]
	void OnRep_PickUpDataList();// 0x35c234c

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 12]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x524, Size: 4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a4, Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a4, Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x4a8, Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x4b8, Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x4bc, Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x4c0, Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x4c4, Size: 4]
	float RecreateSocketCooldownTime;//[Offset: 0x514, Size: 4]
	float RecreateSocketMaxTryCount;//[Offset: 0x518, Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ExtraDamageInfo
	int DamageTypeId;//[Offset: 0x0, Size: 4]
	enum DamagePosition;//[Offset: 0x4, Size: 1]
	bool DamageToDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool DamageToDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x260, Size: 4]
	Vector SocketOffset;//[Offset: 0x264, Size: 12]
	Vector TargetOffset;//[Offset: 0x270, Size: 12]
	float ProbeSize;//[Offset: 0x27c, Size: 4]
	byte ProbeChannel;//[Offset: 0x280, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x281, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x281, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x281, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x281, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x281, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x281, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x281, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x281, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282, Size: 1]
	float CameraLagSpeed;//[Offset: 0x284, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x288, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x28c, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x290, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x5f7b40c
	Rotator GetTargetRotation();// 0x37fd56c

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x8c0, Size: 1088]
	bool CanDumpThisAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 1]
	Rotator OwnerAimRotation;//[Offset: 0xd04, Size: 12]
	Rotator C_SightAngledRotOffset;//[Offset: 0xd10, Size: 12]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1c, Size: 1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1d, Size: 1]
	bool C_SkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1e, Size: 1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1f, Size: 1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd20, Size: 1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd21, Size: 1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd22, Size: 1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd23, Size: 1]
	Rotator SwimRotate;//[Offset: 0xd24, Size: 12]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 1]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd31, Size: 1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd32, Size: 1]
	float C_SwimSpeed;//[Offset: 0xd34, Size: 4]
	float C_ProneHandleAlpha;//[Offset: 0xd38, Size: 4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3c, Size: 1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0xd40, Size: 4]
	float LeftHandIKAlpha;//[Offset: 0xd44, Size: 4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd48, Size: 1]
	bool C_IsCrouchingOrMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd49, Size: 1]
	bool bAllowRotWithCurStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4a, Size: 1]
	enum C_SeatSpecialType;//[Offset: 0xd4b, Size: 1]
	int WeaponReloadSlotIndex;//[Offset: 0xd4c, Size: 4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd51, Size: 1]
	bool C_IsMeleeAttacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd52, Size: 1]
	float NeckTurnUILeftAngle;//[Offset: 0xd54, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0xd58, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0xd5c, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0xd60, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0xd64, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0xd68, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0xd6c, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0xd70, Size: 4]
	float NeckMapAngleRight;//[Offset: 0xd74, Size: 4]
	float NeckMapAngleUp;//[Offset: 0xd78, Size: 4]
	float NeckMapAngleDown;//[Offset: 0xd7c, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xd80, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xd84, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0xd88, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0xd8c, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0xd90, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0xd94, Size: 4]
	float NeckTurnSpeed;//[Offset: 0xd98, Size: 4]
	enum C_ParachuteState;//[Offset: 0xd9c, Size: 1]
	Rotator C_HeadRotOffset;//[Offset: 0xda0, Size: 12]
	Rotator DeltaViewOffset;//[Offset: 0xdac, Size: 12]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb9, Size: 1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdba, Size: 1]
	bool C_IsObstructedAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbb, Size: 1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbc, Size: 1]
	float C_AimOffsetAdditiveAlpha;//[Offset: 0xdc0, Size: 4]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc4, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0xdc8, Size: 4]
	float C_HoldingShieldAdditive;//[Offset: 0xdcc, Size: 4]
	int[] DisableHandIKAndObstructedSkillID;//[Offset: 0xdd0, Size: 12]
	AnimSequence* Anim_DefaultDriveVehiclePose;//[Offset: 0xddc, Size: 4]
	bool bDefaultDriveVehiclePoseValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	BlendSpace* C_ObstructedAnim;//[Offset: 0xde4, Size: 4]
	AnimSequence* C_ShieldAddtive;//[Offset: 0xde8, Size: 4]
	AnimMontage* C_RevivalMontage;//[Offset: 0xdec, Size: 4]
	BlendSpace* C_BSFreeFalling;//[Offset: 0xdf0, Size: 4]
	BlendSpace* C_BSFreeFalling_Turn;//[Offset: 0xdf4, Size: 4]
	AnimSequence* C_FreeFalling_Shake;//[Offset: 0xdf8, Size: 4]
	BlendSpace* C_BSParachute;//[Offset: 0xdfc, Size: 4]
	AnimSequence* C_ParachuteEnter;//[Offset: 0xe00, Size: 4]
	AnimSequence* C_ParachuteLand;//[Offset: 0xe04, Size: 4]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0xe08, Size: 4]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0d, Size: 1]
	Vector C_MoveDirExt;//[Offset: 0xe10, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0xe1c, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xe28, Size: 12]
	Rotator r_C_ComponentRotationRelToControlRotation;//[Offset: 0xe34, Size: 12]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe41, Size: 1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe42, Size: 1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe43, Size: 1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe44, Size: 1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe45, Size: 1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe46, Size: 1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe47, Size: 1]
	bool b_C_ParachuteState_FreeFallShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe48, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe49, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4a, Size: 1]
	float DefaultLandCDTime;//[Offset: 0xe4c, Size: 4]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe54, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe55, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling_OR_HoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe56, Size: 1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xe58, Size: 4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xe5c, Size: 4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 1]
	bool b_C_MoveVelocity_SightSlow_High;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe61, Size: 1]
	bool b_C_MoveVelocity_SightSlow_Low;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe62, Size: 1]
	bool b_C_DoingPickup_Or_DoingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe63, Size: 1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0xe64, Size: 12]
	float C_LeanOut_AimAngle;//[Offset: 0xe74, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xe7c, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xe80, Size: 4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe84, Size: 1]
	bool bAlwaysLandLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe85, Size: 1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9c, Size: 1]
	bool bEnableStanbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9e, Size: 1]
	bool bEnableArmedStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9f, Size: 1]
	float EnableArmedStandbyAnimPitchMin;//[Offset: 0xea0, Size: 4]
	float EnableArmedStandbyAnimPitchMax;//[Offset: 0xea4, Size: 4]
	float StandbyAnimTimeInterval;//[Offset: 0xea8, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0xeac, Size: 12]
	int[] ColdGameModeIDList;//[Offset: 0xeb8, Size: 12]
	enum[] StandbyGameModeType;//[Offset: 0xec4, Size: 12]
	bool bIsPlayRandomAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0xee0, Size: 4]
	STExtraBaseCharacter* C_AttachParentCharacter;//[Offset: 0xee4, Size: 4]
	Vector C_AttachParentPawnMoveVelocity;//[Offset: 0xee8, Size: 12]
	bool b_C_CarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef4, Size: 1]
	bool b_C_BeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef5, Size: 1]
	float f_C_CarryBackBSTimeAccumulator;//[Offset: 0xef8, Size: 4]
	float f_C_ParachuteNearDeathBSTimeAccumulator;//[Offset: 0xefc, Size: 4]
	void TryToFireFlareGun();// 0x36d216c
	void TryPlayStandbyAnim();// 0x36d2158
	bool ShouldDestoryParachuteAnimAsset();// 0x36d2130
	void SetVelocityZFactor(float NewFactor);// 0x36d20b8
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x36d1ff4
	void PostCacheParamList(float DeltaSeconds);// 0x446e168
	void PlayStandbyAnimAnyWay();// 0x36d1fe0
	void PendingKillParachuteAnim(Object* InObject);// 0x36d1f68
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x36d1eac
	bool IsCastingAnyDisableHandIKAndObstructedSkill();// 0x36d1e84
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x36d1e0c
	void HandlePlayerPickUp();// 0x36d1df0
	void HandlePerspectiveChanged(bool IsFPP);// 0x36d1d70
	FString[] GetAnimUngroupsEntry();// 0x36d1c14
	FString[] GetAnimSyncGroupsEntry();// 0x36d1ab8
	void DumpAllProperties();// 0x36d1aa4
	void DumpAllAnimInstancesInThisWorld();// 0x3365b48
	void ClearStandbyAnimState();// 0x36d1a88
	void ClearParachuteAnimVars();// 0x36d1a74
	AnimParamList CacheParamList(float DeltaSeconds);// 0x36d1914
	void CacheParachuteAnimVars(bool bForceRefresh);// 0x36d1894
	Object* CacheParachuteAnimVar_Internal(int ParachuteAnimType, class Object TargetClass);// 0x36d17d0
	PlayerAnimList CacheAnimVarList();// 0x36d16bc
	void AsyncAnimStandbyCallback(AnimationAsset* RetAsset);// 0x36d1644

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	delegate OnMontageStoppedEvent;//[Offset: 0x37c, Size: 12]
	bool bIsFPPAnimInstace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool bLowerArmBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool C_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool bDisableTurnPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a7, Size: 1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ae, Size: 1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3af, Size: 1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b3, Size: 1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool b_C_WithoutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	bool b_C_ChangeMovementAndNotSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 1]
	bool b_C_EmptyToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b7, Size: 1]
	bool b_C_EmptyToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool b_C_EmptyToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	bool b_C_StandToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 1]
	bool b_C_StandToCrouchNotMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 1]
	bool b_C_StandToCrouchOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool b_C_StandTo_StandToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool b_C_StandTo_StandToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool b_C_CrouchToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	bool b_C_CrouchToStandNotMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool b_C_CrouchToStandOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	bool b_C_CrouchTo_CrouchToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	bool b_C_CrouchTo_CrouchToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	bool b_C_ProneToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	bool b_C_ProneToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	bool b_C_ProneTo_ProneToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c6, Size: 1]
	bool b_C_ProneTo_ProneToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c7, Size: 1]
	bool b_C_ProneToStand_ToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool b_C_StandToProne_ToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	bool b_C_CrouchToProne_ToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	bool b_C_ProneToCrouch_ToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb, Size: 1]
	Rotator r_C_ShovelRotator;//[Offset: 0x3cc, Size: 12]
	bool b_C_MoveTurnNoScopeNoPickupNoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool b_C_ShovelScopeAndAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	Vector r_C_AimOffsetTranslation;//[Offset: 0x3dc, Size: 12]
	Rotator r_C_AimOffsetRotator;//[Offset: 0x3e8, Size: 12]
	bool b_C_NearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	bool b_C_NearDeathOnFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 1]
	bool b_C_FreeFallViewOffet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f6, Size: 1]
	bool b_C_FreeFallControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f7, Size: 1]
	bool b_C_FreefallingToParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool b_C_FreefallingToParachuteEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	bool b_C_State1_To_NeathDeath_Parchute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 1]
	bool b_C_State1_To_NeathDeath_Enter_Parchute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 1]
	bool b_C_NeathDeath_Parchute_To_State1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	byte C_LODLevel;//[Offset: 0x3fd, Size: 1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x400, Size: 4]
	float C_SightSlowBlendStandBaseAlpha;//[Offset: 0x404, Size: 4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x40c, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0x418, Size: 4]
	byte C_PoseType;//[Offset: 0x41c, Size: 1]
	byte C_LastMovementMode;//[Offset: 0x41d, Size: 1]
	byte C_CustomMovementMode;//[Offset: 0x41e, Size: 1]
	byte C_WeaponType;//[Offset: 0x41f, Size: 1]
	byte C_WeaponHoldType;//[Offset: 0x420, Size: 1]
	byte C_WeaponState;//[Offset: 0x421, Size: 1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x424, Size: 4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool b_C_WeaponState_EQ_PreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 1]
	enum C_VehicleType;//[Offset: 0x42c, Size: 1]
	bool C_IsShoudlerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x430, Size: 4]
	float C_CharacterYawRotateRate;//[Offset: 0x434, Size: 4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x438, Size: 4]
	float C_MaxFallingSpeed;//[Offset: 0x43c, Size: 4]
	float C_FireAlpha;//[Offset: 0x440, Size: 4]
	float b_WalkAdditiveAlpha;//[Offset: 0x444, Size: 4]
	float f_FallingVelocityZFactor;//[Offset: 0x448, Size: 4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x44c, Size: 4]
	float PeekFrameRate;//[Offset: 0x450, Size: 4]
	float PeekSpeed;//[Offset: 0x454, Size: 4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x458, Size: 4]
	float C_ForegripAnimParam;//[Offset: 0x45c, Size: 4]
	float C_HandleFolderFactor;//[Offset: 0x460, Size: 4]
	float C_HandleFolderAlphaLerp;//[Offset: 0x464, Size: 4]
	float C_HandleFolderAlphaTarget;//[Offset: 0x468, Size: 4]
	float C_HandleFolderAlphaSpeed;//[Offset: 0x46c, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x470, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x474, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x478, Size: 4]
	Vector C_MoveVelocity;//[Offset: 0x480, Size: 12]
	Vector C_MoveInputVelocity;//[Offset: 0x48c, Size: 12]
	Vector C_MoveInputVelocityUnit;//[Offset: 0x498, Size: 12]
	Vector C_MoveDir;//[Offset: 0x4a4, Size: 12]
	Vector C_HurtDir;//[Offset: 0x4b0, Size: 12]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x4bc, Size: 12]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x4c8, Size: 12]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x4d4, Size: 12]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x4e0, Size: 12]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x4ec, Size: 12]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x4f8, Size: 12]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x504, Size: 12]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x510, Size: 12]
	Rotator C_OwnerRotation;//[Offset: 0x51c, Size: 12]
	Rotator C_ControlRotation;//[Offset: 0x528, Size: 12]
	Rotator C_LastControlRotation;//[Offset: 0x534, Size: 12]
	Rotator C_ViewRotation;//[Offset: 0x540, Size: 12]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x54c, Size: 12]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x558, Size: 12]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x564, Size: 12]
	Rotator RecoilADSRotation_CP;//[Offset: 0x570, Size: 12]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x57c, Size: 12]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x588, Size: 12]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x594, Size: 12]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x5a0, Size: 12]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x5ac, Size: 4]
	Rotator OwnerRotation;//[Offset: 0x5b0, Size: 12]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	Rotator ShovelingRotation;//[Offset: 0x5c0, Size: 12]
	float ShovelingRotationoffset;//[Offset: 0x5cc, Size: 4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x5d0, Size: 12]
	Rotator FloorRotation;//[Offset: 0x5dc, Size: 12]
	float FloorRotationPitchSpeed;//[Offset: 0x5e8, Size: 4]
	byte Role;//[Offset: 0x5ec, Size: 1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ee, Size: 1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ef, Size: 1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	bool C_ClimbAnimSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 1]
	float C_ClimbAnimTransTime;//[Offset: 0x5f4, Size: 4]
	float C_ClimbAnimTime_A;//[Offset: 0x5f8, Size: 4]
	float C_ClimbAnimTime_B;//[Offset: 0x5fc, Size: 4]
	AnimParam_Accumulate WeaponAccumulateParam;//[Offset: 0x600, Size: 60]
	float Switch_AimBlendSpace_Time;//[Offset: 0x63c, Size: 4]
	float Switch_AimBlendSpace_Counter;//[Offset: 0x640, Size: 4]
	bool bAimBlendSpaceChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x648, Size: 4]
	AimOffsetBlendSpace* bs_AimBlendSpace_Dest;//[Offset: 0x64c, Size: 4]
	AimOffsetBlendSpace* bs_AimBlendSpace_DestLast;//[Offset: 0x650, Size: 4]
	BlendSpace* C_MovementBSCache_Stand;//[Offset: 0x654, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch;//[Offset: 0x658, Size: 4]
	BlendSpace* C_MovementBSCache_Prone;//[Offset: 0x65c, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Crouch;//[Offset: 0x660, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone;//[Offset: 0x664, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand;//[Offset: 0x668, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone;//[Offset: 0x66c, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand;//[Offset: 0x670, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch;//[Offset: 0x674, Size: 4]
	BlendSpace* C_MovementBSCache_Stand_Dest;//[Offset: 0x678, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch_Dest;//[Offset: 0x67c, Size: 4]
	BlendSpace* C_MovementBSCache_Prone_Dest;//[Offset: 0x680, Size: 4]
	<FName,float> C_MovementBS_Stand_SourceTransTime;//[Offset: 0x684, Size: 60]
	<FName,float> C_MovementBS_Stand_SourceTransBackTime;//[Offset: 0x6c0, Size: 60]
	<FName,float> C_MovementBS_Stand_DestTransTime;//[Offset: 0x6fc, Size: 60]
	<byte,float> C_CustomMovementBlendTimeMap;//[Offset: 0x738, Size: 60]
	AnimSequence* C_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0x774, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0x778, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0x77c, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0x780, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0x784, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0x788, Size: 4]
	float StandSwitchToPronePoseAnimDuration;//[Offset: 0x78c, Size: 4]
	float StandSwitchFromPronePoseAnimDuration;//[Offset: 0x790, Size: 4]
	float CrouchSwitchToPronePoseAnimDuration;//[Offset: 0x794, Size: 4]
	float CrouchSwitchFromPronePoseAnimDuration;//[Offset: 0x798, Size: 4]
	float StandSwitchToPronePoseAnimDelay;//[Offset: 0x79c, Size: 4]
	float StandSwitchFromPronePoseAnimDelay;//[Offset: 0x7a0, Size: 4]
	float CrouchSwitchToPronePoseAnimDelay;//[Offset: 0x7a4, Size: 4]
	float CrouchSwitchFromPronePoseAnimDelay;//[Offset: 0x7a8, Size: 4]
	float SwitchingPoseTimer;//[Offset: 0x7ac, Size: 4]
	float SwitchingPoseTimerInternal;//[Offset: 0x7b0, Size: 4]
	float SwitchPoseAnimStartPosition;//[Offset: 0x7b4, Size: 4]
	float C_CustomMovementBlendTime;//[Offset: 0x7b8, Size: 4]
	byte C_InterruptCachePose;//[Offset: 0x7bc, Size: 1]
	bool C_UseInterruptPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bd, Size: 1]
	float InterruptPoseInternal;//[Offset: 0x7c0, Size: 4]
	bool C_IsSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c4, Size: 1]
	byte C_RecoverCharPose;//[Offset: 0x7c5, Size: 1]
	float SwitchPoseTransTime;//[Offset: 0x7d0, Size: 4]
	float SwitchPoseTransBackTime;//[Offset: 0x7d4, Size: 4]
	bool C_IsPlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	bool C_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 1]
	bool b_C_MoveVelocity_Turning_NotScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	AnimSequence* C_IdleAddtive;//[Offset: 0x7ec, Size: 4]
	AnimSequence* C_ShoulderIdleAddtive;//[Offset: 0x7f0, Size: 4]
	BlendSpace1D* C_FallingBS;//[Offset: 0x7f4, Size: 4]
	AnimSequence* C_JumpStart;//[Offset: 0x7f8, Size: 4]
	AnimSequence* C_LandLight;//[Offset: 0x7fc, Size: 4]
	AnimSequence* C_LandHeavy;//[Offset: 0x800, Size: 4]
	AnimSequence* GrenadeJumpHigh;//[Offset: 0x804, Size: 4]
	AnimSequence* GrenadeJumpLow;//[Offset: 0x808, Size: 4]
	AnimSequence* GrenadeFallHigh;//[Offset: 0x80c, Size: 4]
	AnimSequence* GrenadeFallLow;//[Offset: 0x810, Size: 4]
	BlendSpace1D* MovementUpBodyOverride;//[Offset: 0x814, Size: 4]
	BlendSpace* MovementLowerBodyOverride;//[Offset: 0x818, Size: 4]
	AnimSequence* C_TurnAnim;//[Offset: 0x81c, Size: 4]
	AnimSequence* C_StandScopeBlendAnim;//[Offset: 0x820, Size: 4]
	AnimSequence* C_CrouchScopeBlendAnim;//[Offset: 0x824, Size: 4]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x828, Size: 4]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x82c, Size: 4]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x830, Size: 4]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x834, Size: 4]
	AnimMontage* C_MontageRescue;//[Offset: 0x838, Size: 4]
	AnimMontage* C_MontageRescueSelf;//[Offset: 0x83c, Size: 4]
	AnimMontage* C_MontageDead;//[Offset: 0x840, Size: 4]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x844, Size: 4]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x848, Size: 4]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x84c, Size: 4]
	AnimSequence* C_ShovelPhaseEnter;//[Offset: 0x850, Size: 4]
	AnimSequence* C_ShovePhaseShoveling;//[Offset: 0x854, Size: 4]
	AnimSequence* C_ShovelPhaseLeave;//[Offset: 0x858, Size: 4]
	AnimSequence* C_Climb_FrameAnim_A;//[Offset: 0x85c, Size: 4]
	AnimSequence* C_Climb_FrameAnim_B;//[Offset: 0x860, Size: 4]
	BlendSpace* C_FireBalloonDriverBS;//[Offset: 0x864, Size: 4]
	Vector C_FireBalloonMoveVelocity;//[Offset: 0x868, Size: 12]
	enum AnimInstanceType;//[Offset: 0x874, Size: 1]
	bool MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x875, Size: 1]
	float MovementUpBodyBlentWeight;//[Offset: 0x878, Size: 4]
	bool MovementLowerBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	float MovementLowerBodyBlentWeight;//[Offset: 0x880, Size: 4]
	bool C_bSkeletonMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	bool C_IsQuickBow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x885, Size: 1]
	class AnimInstance* LocomotionAnimDefaultABP;//[Offset: 0x888, Size: 4]
	AnimInstanceContainer* LocomotionAnimContainer;//[Offset: 0x88c, Size: 4]
	bool bEnableLocomotionAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	class AnimInstance* VehicleAnimDefaultABP;//[Offset: 0x894, Size: 4]
	AnimInstanceContainer* VehicleAnimContainer;//[Offset: 0x898, Size: 4]
	bool bEnableVehicleAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c, Size: 1]
	byte LastPoseTypeCache;//[Offset: 0x89d, Size: 1]
	int ForceLODLevel;//[Offset: 0x8ac, Size: 4]
	static FName Util_GetAnimMontageSlotName(AnimMontage* Montage, int Index);// 0x36d7c40
	void SwitchingPoseFinishCallback();// 0x36d7c2c
	void SetInterruptPose(bool bUseInterrupPose, byte InterruptPose);// 0x36d7b64
	void SetClimbAnimation(AnimSequence* AnimSequence, bool bFlag);// 0x36d7aa0
	void RefreshPeekState();// 0x36d7a8c
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x36d7a0c
	void PlayPostReloadWeaponAnimationOld();// 0x36d79f8
	void PlayPostReloadWeaponAnimation(int RemainReloadTimes);// 0x36d7980
	void PlayPostFillGasWeaponAnimation();// 0x36d796c
	void PlayPlayerDeadAnimation();// 0x36d7958
	void PlayAnimationByEventType(byte Type, float SpeedScale);// 0x36d789c
	void OnRespawned_BP();// 0x3381f48
	void OnRecycled_BP();// 0x3381a34
	bool IsAssetSkeletonMatch(AnimationAsset* CheckAnimAsset, SkeletalMeshComponent* MeshComp);// 0x36d77d8
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x36d7758
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x36d7694
	void HandlePlayerPickUp();// 0x36d1df0
	void HandlePlayerEnterRescueState(bool bBeginRescueing, bool bSelfRescue);// 0x36d75bc
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x446e168
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x36d7414
	void HandleOwnerAnimEvent(FName EventMsg);// 0x36d7394
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x36d71e8
	byte GetRole();// 0x36d71c0
	void FillShovelAnimation(out const PlayerAnimList AnimList);// 0x36d6fe4
	void EnableAnimFlag(enum PlayFlag);// 0x36d6f6c
	void DisableAnimFlag(enum PlayFlag);// 0x36d6ef4
	void ClearStandbyAnimState();// 0x36d1a88

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x36c, Size: 4]
	FString LuaFilePath;//[Offset: 0x370, Size: 12]
	void OnNotifyMontagePlayingEvent_BluePrint(FName NotifyName);// 0x446e168
	void OnNotifyMontagePlayingEvent(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointPayload);// 0x3829bb8
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x36d7414
	void HandleOwnerAnimEvent(FName EventMsg);// 0x36d7394
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x36d71e8

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: AnimParam_Accumulate
	AnimSequence* AccumulateAnimSeq;//[Offset: 0x0, Size: 4]
	AnimSequence* AccumulateAnimSeqNew;//[Offset: 0x4, Size: 4]
	bool bAccumulateAnimSeqChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float AccumulateAnimSeqChangeTimer;//[Offset: 0xc, Size: 4]
	float AccumulateAnimSeqChangeTimerCounter;//[Offset: 0x10, Size: 4]
	float AccumulateRealtime;//[Offset: 0x14, Size: 4]
	bool bAccumulateRealTimeMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float AccumulateRate;//[Offset: 0x1c, Size: 4]
	bool bAccumulateRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAccumulateRateMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bHasAccumulateRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	float BlendInSpeed;//[Offset: 0x24, Size: 4]
	float BlendOutSpeed;//[Offset: 0x28, Size: 4]
	float BlendOutRealSpeed;//[Offset: 0x2c, Size: 4]
	float BlendOutDelayTime;//[Offset: 0x30, Size: 4]
	float BlendOutDelayTime_Counter;//[Offset: 0x34, Size: 4]
	float CacheAccumulateRate;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float AnimLength;//[Offset: 0x64, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0x84, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88, Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94, Size: 4]
	BlendSample[] SampleData;//[Offset: 0x98, Size: 12]
	EditorElement[] GridSamples;//[Offset: 0xa4, Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0, Size: 24]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 4]
	Vector SampleValue;//[Offset: 0x4, Size: 12]
	float RateScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 12]
	float Min;//[Offset: 0xc, Size: 4]
	float Max;//[Offset: 0x10, Size: 4]
	int GridNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: AnimInstanceContainer.Object
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x1c, Size: 4]
	<class AnimInstance,AnimInstance*> CacheAnimInstanceMap;//[Offset: 0x20, Size: 60]
	class AnimInstance* TargetClass;//[Offset: 0x5c, Size: 4]
	AnimInstance* TargetAnimInstance;//[Offset: 0x60, Size: 4]
	AnimInstance* SetTargetAnimInstance(class AnimInstance InstanceClass);// 0x5f88354
	bool RemoveCacheAnimInstance(class AnimInstance InstanceClass);// 0x5f882d4
	bool IsReceiveInPoseNode();// 0x5f882ac
	AnimInstance* GetTargetInstance(bool bCheckPendingKill);// 0x5f88224
	void ClearCacheAnimInstance();// 0x5f88210
	bool AddCacheAnimInstance(class AnimInstance InstanceClass);// 0x5f88190

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4, Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc, Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14, Size: 8]
	PlayerAnimData FillGasAnim;//[Offset: 0x1c, Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x24, Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x2c, Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x34, Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x3c, Size: 8]
	PlayerAnimData FireAccAnim;//[Offset: 0x44, Size: 8]
	PlayerAnimData PostFireAnim;//[Offset: 0x4c, Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x54, Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x5c, Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x64, Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x6c, Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x74, Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x7c, Size: 8]
	PlayerAnimData ShoudlerWeaponIdle;//[Offset: 0x84, Size: 8]
	PlayerAnimData BeCarriedBackMoveAnim;//[Offset: 0x8c, Size: 8]
	PlayerAnimData BeCarriedBackPickUpAnim;//[Offset: 0x94, Size: 8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x9c, Size: 12]
	PlayerAnimData[] ShovelAnimList;//[Offset: 0xa8, Size: 12]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0xb4, Size: 12]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 4]
	float Rate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x420, Size: 4]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x424, Size: 4]

--------------------------------
Class: AnimInstanceProxy
	AnimInstance*[] SubAnimInstances;//[Offset: 0x414, Size: 12]

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	Vector Velocity;//[Offset: 0x4, Size: 12]
	Vector movedir;//[Offset: 0x10, Size: 12]
	byte MovementMode;//[Offset: 0x1c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x1d, Size: 1]
	byte PoseType;//[Offset: 0x1e, Size: 1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 12]
	byte WeaponType;//[Offset: 0x38, Size: 1]
	byte WeaponHoldType;//[Offset: 0x39, Size: 1]
	byte WeaponState;//[Offset: 0x3a, Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	byte SightType;//[Offset: 0x3d, Size: 1]
	float RecoilKickADS;//[Offset: 0x40, Size: 4]
	float ForegripParam;//[Offset: 0x44, Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	Vector HurtDir;//[Offset: 0xe4, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	byte JumpType;//[Offset: 0xf2, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	float HandleFolderFactor;//[Offset: 0xf8, Size: 4]
	float CharacterYawRotateRate;//[Offset: 0xfc, Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bCarryBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	bool bParachuteNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 1]
	float CarryBlendTimeAccumulator;//[Offset: 0x104, Size: 4]
	float ParachuteNearDeathBlendTimeAccumulator;//[Offset: 0x108, Size: 4]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bAlwaysLandLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0, Size: 4]
	AIController* AIOwner;//[Offset: 0xc4, Size: 4]
	void StopLogic(FString Reason);// 0x552cf4c
	void RestartLogic();// 0x3332384
	bool IsRunning();// 0x552cf1c
	bool IsPaused();// 0x38ad698

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xbc, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xdc, Size: 12]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x552b424
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x552b268
	void SetValueAsRotator(out const FName KeyName, Rotator RotatorValue);// 0x552b18c
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x552b0b0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x552afd4
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x552aef8
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x552ae1c
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x552ad40
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x552ac64
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x552ab80
	bool IsVectorValueSet(out const FName KeyName);// 0x552aaec
	Vector GetValueAsVector(out const FName KeyName);// 0x552aa48
	FString GetValueAsString(out const FName KeyName);// 0x552a92c
	Rotator GetValueAsRotator(out const FName KeyName);// 0x552a888
	Object* GetValueAsObject(out const FName KeyName);// 0x552a7f4
	FName GetValueAsName(out const FName KeyName);// 0x552a758
	int GetValueAsInt(out const FName KeyName);// 0x552a6c4
	float GetValueAsFloat(out const FName KeyName);// 0x552a630
	byte GetValueAsEnum(out const FName KeyName);// 0x552a59c
	class Object GetValueAsClass(out const FName KeyName);// 0x552a508
	bool GetValueAsBool(out const FName KeyName);// 0x552a474
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x552a38c
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x552a2a4
	void ClearValue(out const FName KeyName);// 0x552a218

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x110, Size: 12]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x552987c
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x55297fc
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x55296e8

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 4]
	ObjectProp BlackboardAsset;//[Size: 4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 12]
	BTService*[] Services;//[Offset: 0x48, Size: 12]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c, Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float interval;//[Offset: 0x3c, Size: 4]
	float RandomDeviation;//[Offset: 0x40, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SpawnerBase.Actor.Object
	UnitTransformGenerator* TransformGenerator;//[Offset: 0x34c, Size: 4]
	UnitSpeciesGenerator* SpeciesGenerator;//[Offset: 0x350, Size: 4]
	FString LuaFilePath;//[Offset: 0x354, Size: 12]
	Pawn*[] AliveBots;//[Offset: 0x360, Size: 12]
	SpawnerInfo SpawnerInfo;//[Offset: 0x36c, Size: 52]
	void Stop();// 0x334c7ac
	Actor* SpawnUnit();// 0x3353d18
	void Run();// 0x3363a08
	void RemoveAliveBot(Pawn* BotPawn);// 0x367ca0c
	GameLevelManagerComponent* GetGameLevelManager();// 0x367c9e4
	Pawn*[] GetAliveBots();// 0x367c924
	void AddAliveBot(Pawn* BotPawn);// 0x367c8ac

--------------------------------
Class: UnitTransformGenerator.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	SpawnerBase* GetSpawner();// 0x38a22f4
	Transform Generate();// 0x38a2774

--------------------------------
Class: UnitSpeciesGenerator.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	FString SpeciesConfigLuaPath;//[Offset: 0x70, Size: 12]
	void PostConfig(Actor* Actor);// 0x34ccba8
	SpawnerBase* GetSpawner();// 0x38a22f4

--------------------------------
Class: SpawnerInfo
	Guid SpawnerID;//[Offset: 0x0, Size: 16]
	int ConfigId;//[Offset: 0x10, Size: 4]
	FString State;//[Offset: 0x14, Size: 12]
	bool bAutoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	FString OwnerZone;//[Offset: 0x28, Size: 12]

--------------------------------
Class: GameLevelManagerComponent.ActorComponent.Object
	delegate OnAppendEliteGroup;//[Offset: 0xbc, Size: 12]
	delegate OnRemoveEliteGroup;//[Offset: 0xc8, Size: 12]
	int EliteWarningItemIconID;//[Offset: 0xd4, Size: 4]
	<int,int> EliteWarningItemInstanceIDMap;//[Offset: 0xd8, Size: 60]
	GameLevelDesc[] CurActiveGameLevelList;//[Offset: 0x114, Size: 12]
	LevelData[] CurActiveGameLevelDataList;//[Offset: 0x120, Size: 12]
	int TotalAliveMonsterNum;//[Offset: 0x12c, Size: 4]
	int BornLevelMonsterNum;//[Offset: 0x130, Size: 4]
	int BornShitMonsterNum;//[Offset: 0x134, Size: 4]
	<FString,SingleLevelObjArray> LevelObjs;//[Offset: 0x138, Size: 60]
	AliveMonsterNum[] AliveMonsterNumList;//[Offset: 0x174, Size: 12]
	GameLevelDesc CurCompletedGameLevel;//[Offset: 0x180, Size: 20]
	float LevelBeginTime;//[Offset: 0x194, Size: 4]
	float LevelEndTime;//[Offset: 0x198, Size: 4]
	int GM_Diffcult;//[Offset: 0x19c, Size: 4]
	bool GM_UnLoadLevelData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool GM_UnLoadDynamicLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	float NavTickInterval;//[Offset: 0x1a4, Size: 4]
	LevelData[] LevelDataList;//[Offset: 0x1a8, Size: 12]
	LevelRelifePointInfo[] LevelRelifePointList;//[Offset: 0x1b8, Size: 12]
	FString MonsterTableName;//[Offset: 0x1c4, Size: 12]
	FString MonsterBPTableName;//[Offset: 0x1d0, Size: 12]
	FString MonsterSpecialStateTableName;//[Offset: 0x1dc, Size: 12]
	FString DecoratorTableName;//[Offset: 0x1e8, Size: 12]
	FString MonsterDropTableName;//[Offset: 0x1f4, Size: 12]
	int RelifePosOffsetZ;//[Offset: 0x200, Size: 4]
	Actor* SpawnPickup(int ID, out const Transform Transform, const int ContentNum);// 0x34d8440
	Actor* SpawnMonster(int ID, out const Transform Transform, out const MonsterParams Params);// 0x34d8250
	void RemoveRelifePoint(out GameLevelDesc LevelDesc);// 0x34d8174
	void RegisterGameEvent();// 0x34d8160
	void OnRep_CurGameLevelChanged();// 0x3365b48
	void OnMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x34d8040
	void OnGameStart();// 0x34d802c
	void OnGameEnd();// 0x34d8018
	void OnBotDied(Actor* Actor, Actor* Killer);// 0x34d7f5c
	void OnBotBorn(Actor* Actor);// 0x34d7ee4
	void OnActorUniqueIdRemove(uint32 SId);// 0x34d7e6c
	void OnActorUniqueIdAdd(Actor* Actor, uint32 SId);// 0x34d7db0
	void OnActorSpawn(Actor* Actor);// 0x34d7d38
	void OnActorDespawn(Actor* Actor);// 0x34d7cc0
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);// 0x34d7bf4
	bool KillUnitBySelf(Actor* TActor);// 0x34d7b74
	bool KillUnit(byte BotCat, int BotType, bool ForbidenReborn);// 0x34d7a64
	bool KillCategoryUnit(byte BotCat, bool ForbidenReborn);// 0x34d7998
	void InitUnit(Actor* TActor, byte Category);// 0x34d78dc
	void InitRelifePoint(out GameLevelDesc LevelDesc, RelifePoint[] PVERelifePoints);// 0x34d769c
	void InitLuaLevelActors();// 0x34d7688
	void InitLevelAddObjs(out LevelData LevelData);// 0x34d7580
	void Init();// 0x34d756c
	void HandleGameLevelEnd(out GameLevelDesc LevelDesc);// 0x34d7494
	void HandleEnterLevel(out GameLevelDesc InLevelDesc, Actor* OffsetActor);// 0x34d7374
	Actor* GetUnit(byte Category, int TypeId);// 0x34d72b0
	bool GetRelifeTrans(out const Vector NearVector, out Transform RelifeTrans);// 0x34d7180
	LevelData[] GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, Vector NearPos);// 0x34d6f4c
	bool GetNearPosLevel(Vector NearPos, int ChapterType, LevelData[] AvoidLevelList, out LevelData OutLevelData);// 0x34d6be4
	LevelData GetLoadedLevelData(out GameLevelDesc LevelDesc);// 0x34d6ae0
	int GetAliveMonsterNum(byte SourceType);// 0x34d6a60
	LevelData GetActiveLevelDataByLevelDesc(out GameLevelDesc LevelDesc);// 0x34d695c
	void EndLevelAddObjs(out LevelData LevelData);// 0x34d6854
	void ChangeAliveMonsterNumList(byte SourceType, int Addition);// 0x34d6798
	void BroadRemoveEliteGroup(int LevelID, Vector pos);// 0x34d66d4
	void BroadAppendEliteGroup(int LevelID, Vector pos);// 0x34d6610
	void AdjustPosByOffsetActor(out LevelData LevelData, Transform OffsetTrans);// 0x34d6450
	void ActiveRelifePoint(out GameLevelDesc LevelDesc, int ID, bool ActivePoint);// 0x34d62e4

--------------------------------
Class: GameLevelDesc
	int ChapterID;//[Offset: 0x0, Size: 4]
	int LevelID;//[Offset: 0x4, Size: 4]
	FString Desc;//[Offset: 0x8, Size: 12]

--------------------------------
Class: LevelData
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	FString[] TargetClassPaths;//[Offset: 0x14, Size: 12]
	FString LeveDirectorFilePath;//[Offset: 0x20, Size: 12]
	byte EndCondType;//[Offset: 0x2c, Size: 1]
	FString EndCondPar;//[Offset: 0x30, Size: 12]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int DiffcultPerc;//[Offset: 0x40, Size: 4]
	Vector[] TaskPointLocations;//[Offset: 0x44, Size: 12]
	RelifePoint[] PVERelifePointsInfo;//[Offset: 0x50, Size: 12]
	PVECircle[] PVECircleInfo;//[Offset: 0x5c, Size: 12]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x68, Size: 12]
	Vector pos;//[Offset: 0x74, Size: 12]
	LevelObjets[] LevelAddObjs;//[Offset: 0x80, Size: 12]

--------------------------------
Class: RelifePoint
	int ID;//[Offset: 0x0, Size: 4]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: PVECircle
	int CircleID;//[Offset: 0x0, Size: 4]
	Vector2D targetPos;//[Offset: 0x4, Size: 8]
	float Radius;//[Offset: 0xc, Size: 4]
	float MoveTime;//[Offset: 0x10, Size: 4]
	float Pain;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MonsterWave
	float WaveDelayTime;//[Offset: 0x0, Size: 4]
	MonsterGroup[] MonsterGroupList;//[Offset: 0x4, Size: 12]
	FString Desc;//[Offset: 0x10, Size: 12]
	byte EndCondType;//[Offset: 0x1c, Size: 1]
	int EndCondPar;//[Offset: 0x20, Size: 4]
	int ID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MonsterGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	byte ChooseGroupSpotType;//[Offset: 0xc, Size: 1]
	int NearPlayTeamIdx;//[Offset: 0x10, Size: 4]
	ZMonsterSpotGroup*[] SpotGroupChooseList;//[Offset: 0x14, Size: 12]
	MonsterSpotGroup[] MonsterSpotGroupChooseList;//[Offset: 0x20, Size: 12]
	MonsterGeneratePlan[] PlanList;//[Offset: 0x2c, Size: 12]
	int ID;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ZMonsterSpotGroup.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x260, Size: 12]
	ZMonsterSpot*[] SpotList;//[Offset: 0x26c, Size: 12]

--------------------------------
Class: ZMonsterSpot.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x260, Size: 12]
	byte MonsterSpotType;//[Offset: 0x26c, Size: 1]
	ZMonsterRoadPoint*[] RoadPointList;//[Offset: 0x270, Size: 12]
	byte SpotRadius;//[Offset: 0x27c, Size: 1]

--------------------------------
Class: ZSpotSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ZMonsterRoadPoint.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x260, Size: 4]
	int Radius;//[Offset: 0x264, Size: 4]

--------------------------------
Class: MonsterSpotGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	Vector pos;//[Offset: 0xc, Size: 12]
	MonsterSpot[] SpotList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MonsterSpot
	FString Desc;//[Offset: 0x0, Size: 12]
	byte MonsterSpotType;//[Offset: 0xc, Size: 1]
	Vector pos;//[Offset: 0x10, Size: 12]
	RoadPointInfo[] RoadPointList;//[Offset: 0x1c, Size: 12]
	byte SpotRadius;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RoadPointInfo
	int ID;//[Offset: 0x0, Size: 4]
	int Radius;//[Offset: 0x4, Size: 4]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: MonsterGeneratePlan
	FString Desc;//[Offset: 0x0, Size: 12]
	int PlanWeight;//[Offset: 0xc, Size: 4]
	MonsterGenerateCfg[] PlanDetail;//[Offset: 0x10, Size: 12]
	int ID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MonsterGenerateCfg
	int MonsterID;//[Offset: 0x0, Size: 4]
	FString Desc;//[Offset: 0x4, Size: 12]
	byte SpotType;//[Offset: 0x10, Size: 1]
	int MonsterNum;//[Offset: 0x14, Size: 4]
	float RandomGenerateDelayTime;//[Offset: 0x18, Size: 4]
	int ReBornTimes;//[Offset: 0x1c, Size: 4]
	int ReBornDelay;//[Offset: 0x20, Size: 4]
	float GenerateDelayTime;//[Offset: 0x24, Size: 4]
	int ID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: LevelObjets
	class Object* Objects;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: SingleLevelObjArray
	Actor*[] LevelObjs;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AliveMonsterNum
	int Num;//[Offset: 0x0, Size: 4]
	byte SourceType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LevelRelifePointInfo
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	RelifePointInfo[] RelifePointList;//[Offset: 0x14, Size: 12]

--------------------------------
Class: RelifePointInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform RelifeTrans;//[Offset: 0x10, Size: 48]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: MonsterParams

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0xbc, Size: 60]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0xf8, Size: 12]

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0xbc, Size: 1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xbc, Size: 12]
	class AISense* DominantSense;//[Offset: 0xc8, Size: 4]
	AIController* AIOwner;//[Offset: 0xe0, Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x140, Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x14c, Size: 12]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x5520ce0
	void RequestStimuliListenerUpdate();// 0x5520ccc
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x5520c10
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x5520b44
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5520a34
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5520924
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5520814
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x55206ec

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c, Size: 4]
	float MaxAge;//[Offset: 0x20, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 4]
	enum NotifyType;//[Offset: 0x20, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c, Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x5521c98
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x5521c20
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x5521b20
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x5521a64
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x5521890

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x28, Size: 8]
	int iExtraData;//[Offset: 0x40, Size: 4]
	int iExtraData;//[Offset: 0x44, Size: 4]
	int iExtraData;//[Offset: 0x48, Size: 4]
	float fExtraData;//[Offset: 0x4c, Size: 4]
	float fExtraData;//[Offset: 0x50, Size: 4]
	float fExtraData;//[Offset: 0x54, Size: 4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 12]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xbc, Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0, Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xcc, Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x55464e4
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x55463dc
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x554635c
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x55462dc

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 4]
	Object* Instigator;//[Offset: 0x28, Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 1]
	byte GetActionPriority();// 0x55453c0
	void Finish(byte WithResult);// 0x5545338
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x554527c

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 12]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xcc, Size: 12]
	GameplayTask*[] TickingTasks;//[Offset: 0xe4, Size: 12]
	GameplayTask*[] KnownTasks;//[Offset: 0xf0, Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x100, Size: 12]
	void OnRep_SimulatedTasks();// 0x546fddc
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x546fa68

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 4]
	void ReadyForActivation();// 0x546e0e8
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x446e168
	void EndTask();// 0x546e0d4

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AITargetInViewOffset
	Vector[] Offset;//[Offset: 0x0, Size: 12]
	Vector[] CrouchOffset;//[Offset: 0xc, Size: 12]
	Vector TargetLoc;//[Offset: 0x18, Size: 12]
	int CurrentOffsetIndex;//[Offset: 0x24, Size: 4]
	bool bTargetInViewDueToOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum TargetPawnState;//[Offset: 0x29, Size: 1]

--------------------------------
Class: AIShootingPoseOffsetInfo
	AIShootingPoseOffsetDetailInfo[] ShootingPoseShootPointOffsetArray;//[Offset: 0x0, Size: 12]
	float CrouchToStandHeightOffset;//[Offset: 0xc, Size: 4]
	float ProneToStandHeightOffset;//[Offset: 0x10, Size: 4]
	<enum,Vector> ShootingPoseShootPointOffsetMap;//[Offset: 0x18, Size: 60]

--------------------------------
Class: AIShootingPoseOffsetDetailInfo
	enum shootingPose;//[Offset: 0x0, Size: 1]
	Vector offsetInfo;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpectatorComponent.ActorComponent.Object
	delegate OnServerSpectatorChange;//[Offset: 0xbc, Size: 12]
	int MinExtraLocDeviceLevel;//[Offset: 0xc8, Size: 4]
	uint32 MinTotalMemInGB;//[Offset: 0xcc, Size: 4]
	float ExtraRadius;//[Offset: 0xd0, Size: 4]
	float MinDisFromMyLoc;//[Offset: 0xd4, Size: 4]
	float MinDisFromExtraLoc;//[Offset: 0xd8, Size: 4]
	bool IsOwnerBeSpectated();// 0x367d2e8
	STExtraPlayerController*[] GetOwnerObservers();// 0x367d280

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 4]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool TargetIsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	STExtraPlayerController* CacheNearPlayerController;//[Offset: 0x2c, Size: 4]
	STExtraBaseCharacter* CacheDeliveryActingTarget;//[Offset: 0x30, Size: 4]

--------------------------------
Class: AIShootMissInfo
	float MissMaxRangeTime;//[Offset: 0x0, Size: 4]
	float MissMinRangeTime;//[Offset: 0x4, Size: 4]
	float MissCDTime;//[Offset: 0x8, Size: 4]
	float MissResetTime;//[Offset: 0xc, Size: 4]
	float MissResetConfig;//[Offset: 0x10, Size: 4]
	bool bCanMissShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: AIConditionHearingComponent.ActorComponent.Object
	SoundShieldForAI* CurrentSoundShield;//[Offset: 0xbc, Size: 8]
	bool CanHearingInBox(Actor* TargetActor, Actor* SourceActor);// 0x333c98c

--------------------------------
Class: SoundShieldForAI.Actor.Object
	Actor*[] PlayerPawns;//[Offset: 0x308, Size: 12]
	Actor*[] AIPawns;//[Offset: 0x314, Size: 12]
	int MaxCacheNum;//[Offset: 0x320, Size: 4]
	void OnPlayerPawnsOverlap(Actor* InActor, bool bEnter);// 0x367c3a0
	void OnAIPawnsOverlap(Actor* InActor, bool bEnter);// 0x367c2dc
	bool InSameSoundShield(Actor* InAIPawn, Actor* InPlayerPawn);// 0x367c210

--------------------------------
Class: AIParachuteJumpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	Vector FocusTargetPos;//[Offset: 0xc4, Size: 12]
	enum JumpStrategy;//[Offset: 0xd0, Size: 1]
	float JumpTime;//[Offset: 0xd4, Size: 4]
	bool bUseSpecificInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bOpenParachuteNotClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bLandingPhaseSetControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bOpenDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	float TargetDistanceThresholdForInput;//[Offset: 0xdc, Size: 4]
	float MoveForwardInputValue;//[Offset: 0xe0, Size: 4]
	float MoveRightInputValue;//[Offset: 0xe4, Size: 4]
	float ClearFocusHeight;//[Offset: 0xe8, Size: 4]
	float OpenParachuteHeight;//[Offset: 0xec, Size: 4]
	FString TargetCityName;//[Offset: 0xf0, Size: 12]
	float TargetDistance2Route;//[Offset: 0xfc, Size: 4]
	int CityLevel;//[Offset: 0x100, Size: 4]
	float Deviation;//[Offset: 0x104, Size: 4]
	int[] Groups;//[Offset: 0x108, Size: 12]
	int AIStyle;//[Offset: 0x114, Size: 4]
	float ChangeTargetHeight;//[Offset: 0x11c, Size: 4]
	Vector ChangeTargetPos;//[Offset: 0x120, Size: 12]
	bool bTargetPosChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	int PlayerNumThresholdForChangeTarget;//[Offset: 0x130, Size: 4]
	float AroundPlayerRange;//[Offset: 0x134, Size: 4]
	int CheckChangeTargetRemainTimes;//[Offset: 0x138, Size: 4]
	float TickShowDebugInfoDeltaTime;//[Offset: 0x13c, Size: 4]
	float CurTickShowDebugInfoTime;//[Offset: 0x140, Size: 4]
	Color DebugLineColor;//[Offset: 0x144, Size: 4]
	float JumpTimePassed;//[Offset: 0x148, Size: 4]
	STExtraPlayerCharacter* FollowTarget;//[Offset: 0x14c, Size: 4]
	float FollowDelayTime;//[Offset: 0x150, Size: 4]
	float ForwardDelayTime;//[Offset: 0x154, Size: 4]
	bool IsSmoothFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	float TurnVelocity;//[Offset: 0x15c, Size: 4]

--------------------------------
Class: AIAbilityComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0xfc, Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x100, Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x104, Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x108, Size: 4]

--------------------------------
Class: AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	<int,int> CanBuildActorNums;//[Offset: 0xe4, Size: 60]
	float TotalCD;//[Offset: 0x120, Size: 4]
	float SoloCD;//[Offset: 0x124, Size: 4]

--------------------------------
Class: AIFeatureInfo
	float HP;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]
	float TakeDamageScale;//[Offset: 0x8, Size: 4]
	int DropID;//[Offset: 0xc, Size: 4]
	float[] HitRates;//[Offset: 0x10, Size: 12]
	<int,float> ThrownUsingProbability;//[Offset: 0x1c, Size: 60]
	<float,float> EnemyHpHitRateMap;//[Offset: 0x58, Size: 60]
	<float,float> EnemyHpDamageRateMap;//[Offset: 0x94, Size: 60]
	bool bNeedNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bHasDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	Vector2D MissOnPurposeTimeRange;//[Offset: 0xd4, Size: 8]
	Vector2D OutViewMissOnPurposeTimeRange;//[Offset: 0xdc, Size: 8]
	float MissOnPurposeCD;//[Offset: 0xe4, Size: 4]
	float MissOnPurposeResetTime;//[Offset: 0xe8, Size: 4]
	float MissOnPurposeHitRate;//[Offset: 0xec, Size: 4]
	float NearDeathTargetStopFireTime;//[Offset: 0xf0, Size: 4]
	float NearDeathTargetFixedHitRate;//[Offset: 0xf4, Size: 4]
	bool bDoMissOnPurposeWhenNearDeathToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float NearDeathTargetFixedDamageRate;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: AIEquipSpawnItem
	enum ItemType;//[Offset: 0x0, Size: 1]
	int ItemSpecificID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int MaxCount;//[Offset: 0xc, Size: 4]
	Vector2D ExtraConfigValue;//[Offset: 0x10, Size: 8]

--------------------------------
Class: AIActingItem
	float StartSeconds;//[Offset: 0x0, Size: 4]
	float EndSeconds;//[Offset: 0x4, Size: 4]
	float DeadPercent;//[Offset: 0x8, Size: 4]
	int PlayerNumScale;//[Offset: 0xc, Size: 4]
	bool IsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int[] WeaponIdList;//[Offset: 0x14, Size: 12]
	int FinalRestBotNum;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DeliveryCondition
	DeliveryConditionCheck* CheckCnd;//[Offset: 0x0, Size: 4]

--------------------------------
Class: DeliveryConditionCheck.Object
	STExtraBaseCharacter* TargetPawn;//[Offset: 0x1c, Size: 4]
	bool CheckDeliveryForBP(STExtraBaseCharacter* InTargerPawn);// 0x33498f4
	bool CheckDelivery(STExtraBaseCharacter* InTargetPawn);// 0x3431260

--------------------------------
Class: SpecialAIDeliveryNumContainer
	int TeammateNum;//[Offset: 0x0, Size: 4]
	SpecialAIDeliveryNum[] DeliverNumCfg;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpecialAIDeliveryNum
	int DeliveryNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: HotValueAttenuation
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HotValueScale
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float SpecialRatingDamageScale;//[Offset: 0x4, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x8, Size: 4]
	float SpecialFiringAccuracyRadius;//[Offset: 0xc, Size: 4]
	int AIFeedLimit;//[Offset: 0x10, Size: 4]
	float SectionRightValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 12]
	float RightRatingSection;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DeliveryItem
	int percent;//[Offset: 0x0, Size: 4]
	int DeliveryNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIAttackAnimalRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x308, Size: 4]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bFixMayBeInOcean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	bool IsInWater(Vector Position);// 0x3446504
	Vector GetRandomPointInArea(Vector Origin, float Radius, bool bTry);// 0x34463d8

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x148, Size: 12]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 1]
	bool bUseDIYCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 1]
	int CustomBeginIndex;//[Offset: 0x158, Size: 4]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x160, Size: 12]
	float DestinyThreshold;//[Offset: 0x16c, Size: 4]
	int RoundNum;//[Offset: 0x170, Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 1]
	Vector2D LowProbCenter;//[Offset: 0x178, Size: 8]
	float LowProbCenterRadius;//[Offset: 0x180, Size: 4]
	float LowProbRatio;//[Offset: 0x184, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	class Actor* InnerCircleClass;//[Offset: 0x18c, Size: 4]
	float TimeForForbidMakePain;//[Offset: 0x190, Size: 4]
	Actor* InnerCircle;//[Offset: 0x194, Size: 4]
	Vector InnerCircleInfo;//[Offset: 0x198, Size: 12]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	Vector BlueCircle;//[Offset: 0x1cc, Size: 12]
	Vector WhiteCircle;//[Offset: 0x1d8, Size: 12]
	int CurrentIndex;//[Offset: 0x1e4, Size: 4]
	Actor* ContainActor;//[Offset: 0x1e8, Size: 4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	CirCleCfg[] TempCircleConfigs;//[Offset: 0x25c, Size: 12]
	delegate OnCircleBegin;//[Offset: 0x2ac, Size: 12]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x2b8, Size: 12]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x2c4, Size: 12]
	delegate OnCircleInfoChanged;//[Offset: 0x2d0, Size: 12]
	delegate OnWaveEnded;//[Offset: 0x2dc, Size: 12]
	delegate OnCircleEnded;//[Offset: 0x2e8, Size: 12]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x2f4, Size: 4]
	bool bPreCalculateFirstWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	delegate OnFinishedPreCalculateFirstWhiteCircle;//[Offset: 0x2fc, Size: 12]
	bool WhitCircleIsOutOfBlueCircle();// 0x3445548
	void StartCircleFromBegin();// 0x3445534
	void SetGMCicleTime(float cdTime, float LastTime);// 0x3445438
	void RetriveGetCircleInfo(out GetCircleInfo CurInfo);// 0x3445370
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x3445290
	void PreCalculateCircle(int CircleIndex);// 0x3445218
	void OverrideDestinyChanceByIndex(bool bOverride, float InChance, int CircleIndex);// 0x344510c
	void OverrideDestinyChance(bool bOverride, float InChance);// 0x3445044
	void MakePain(Actor* _actor, float _desireDamage);// 0x3444f88
	void MakeDesiredCircle(Vector circleInfo, int CircleType);// 0x3444ed0
	bool MakeCurrentWhiteCircle(int InCircleIndex);// 0x3444e48
	bool IsUseCustomWhiteCircle();// 0x3444e20
	bool IsPositionInBlueCircle(out const Vector Position);// 0x3444d94
	bool IsInBlueCircle(Actor* _actor);// 0x3444d14
	void InitCircleTimer();// 0x3444cf8
	bool HasDoubleCircleEnabled();// 0x3444cdc
	void GMBeginCircleWithCustomParam(int CurIndex, float PosX, float PosY, float PosZ, float DelayTime, float LastTime, float SafeZoneTime, float BlueCircleRadius);// 0x3444a74
	void GMBeginCircle(int CurIndex, float PosX, float PosY, float PosZ);// 0x344492c
	Vector GetWhiteCircle(int InCircleIndex);// 0x344489c
	Vector[] GetPlayerPositionByDestiny(int CircleIndex);// 0x344478c
	Vector GetOverrideVictimPos(Actor* Victim);// 0x34446fc
	float GetNeedTotalTimeToCircleIndex(int CircleIndex);// 0x344467c
	Vector GetInnerCircleInfo();// 0x3444658
	Vector GetFirstWhiteCircle();// 0x3444610
	Vector GetCustomWhiteCircleConfigByIndex(int CircleIndex, int RandomIndex);// 0x344453c
	Vector GetCustomBlueCircleConfigByIndex(int CircleIndex);// 0x34444ac
	Vector GetCurrentWhiteCircle();// 0x3444488
	int GetCurrentCircleIndex();// 0x3444460
	Vector GetCurrentBlueCircle();// 0x344443c
	int GetCircleIndexByTime(float TimeSeconds);// 0x34443bc
	bool CalculateWhiteCircleByDestiny(int CircleIndex, bool bInDestiny, out Vector[] Positions);// 0x344424c
	float BlueToWhiteLeftTime(bool bConsiderSafeZoneAppeartime);// 0x34441c4
	void ApplyCircleOffset(Vector InOffset);// 0x3444154

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xc0, Size: 12]
	FString TimerName;//[Offset: 0xcc, Size: 12]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0, Size: 4]
	float DelayTime;//[Offset: 0x4, Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 4]
	bool bIsCircleWarningUseFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float[] BlueCirclePreWarning;//[Offset: 0x14, Size: 12]
	CircleWarningConfig[] BlueCirclePreWarningWithFilter;//[Offset: 0x20, Size: 12]
	float LastTime;//[Offset: 0x2c, Size: 4]
	float Pain;//[Offset: 0x30, Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector2D bluepoint;//[Offset: 0x38, Size: 8]
	float blueradius;//[Offset: 0x40, Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bUseCustomWhiteStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	Vector[] Whitepoints;//[Offset: 0x48, Size: 12]
	float whiteradius;//[Offset: 0x54, Size: 4]
	float Alpha;//[Offset: 0x58, Size: 4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float DestinyChance;//[Offset: 0x60, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x68, Size: 4]
	float ExtraRadius;//[Offset: 0x6c, Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float DamageMagnifierRange;//[Offset: 0x74, Size: 4]
	float DamageMagnifier;//[Offset: 0x78, Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x7c, Size: 4]
	Vector[] AvoidPoints;//[Offset: 0x80, Size: 12]
	float EdgeDistance;//[Offset: 0x8c, Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]

--------------------------------
Class: CircleWarningConfig
	float WarningTime;//[Offset: 0x0, Size: 4]
	enum WarningState;//[Offset: 0x4, Size: 1]

--------------------------------
Class: GetCircleInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	int CurrentCircleIndex;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	byte AirAttackStatus;//[Offset: 0x44, Size: 1]
	Vector AirAttackArea;//[Offset: 0x48, Size: 12]
	int AirAttackWave;//[Offset: 0x54, Size: 4]
	int BossCountDown;//[Offset: 0x58, Size: 4]
	Vector BossBornPos;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: RegisterTimer
	int waveIndex;//[Offset: 0x0, Size: 4]
	float[] Times;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIActingBPAssit.Object
	bool IsSmokeGrenadeActive(Actor* pSmokeGrenade);// 0x446e168
	bool IsGrenadeHasBeenThrowedOut(Actor* pGrenade);// 0x446e168
	float GetRealTimeSeconds();// 0x3334764

--------------------------------
Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0, Size: 4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x4, Size: 12]
	AIEquipSpawnItem[] AIMustPickUpItemList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
	int FirstAddBulletID;//[Offset: 0x100, Size: 4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0x104, Size: 12]
	delegate OnFirstBulletChangeDelegate;//[Offset: 0x110, Size: 12]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0x120, Size: 24]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x138, Size: 4]
	void SetFirstAddBullet(int BulletID);// 0x3589578
	void SetBulletIDListInClip(out BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x35893d0
	void SetBulletAttr(int ReloadBulletID, float Damage);// 0x3589314
	void RemoveBulletIDListInClip(int RemoveNum, out BulletInClip CurBulletInClip, bool IsRevert);// 0x35891b4
	void RefreshBulletIDListInClip(int Count, out BulletInClip CurBulletInClip);// 0x35890a4
	void PreSetBulletIDListInClip(out BulletInClip NewBulletInClip, out BulletInClip CurBulletInClip);// 0x3588f40
	void OnRep_FirstAddBulletID();// 0x3588f24
	void OnFirstBulletChangeDelegate__DelegateSignature();// 0x446e168
	bool HasMultiBullet();// 0x3588efc
	int GetShootBulletType();// 0x3588ed4
	int GetNextCostBulletIDFromBackpack(BackpackComponent* InBackPack);// 0x3588e54
	int GetNextBulletID();// 0x3588e2c
	BackpackComponent* GetBackpackComponent();// 0x3588e04
	float GetAdjustBulletMomentum();// 0x3588ddc
	float GetAdjustBulletDamage();// 0x3588db4
	int CostBulletFromBackpack(BackpackComponent* BackPack, int WantReloadNum, out BulletInWeapon[] CostBulletList);// 0x3588c58
	void AddBulletIDListInClip(BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x3588a24

--------------------------------
Class: SupportUpBullet
	int UpBulletID;//[Offset: 0x0, Size: 4]
	int DefaultPriority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x100, Size: 4]
	float BulletSpeed;//[Offset: 0x104, Size: 4]
	int CurBulletNum;//[Offset: 0x108, Size: 4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	int MaxBulletNumInClip;//[Offset: 0x110, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x118, Size: 24]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x134, Size: 12]
	class CameraShake* ShootCameraShake;//[Offset: 0x140, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x144, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x148, Size: 4]
	float CameraShakFalloff;//[Offset: 0x14c, Size: 4]
	AkAudioEvent* ShootSound;//[Offset: 0x150, Size: 4]
	float ReloadTime;//[Offset: 0x154, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x158, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x15c, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x160, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x164, Size: 4]
	BackpackComponent* OwnerBackPack;//[Offset: 0x168, Size: 4]
	void ShootGrenadeBullet(Vector StartLoc, Rotator StartRot, uint32 ShootID);// 0x351e6a4
	void SetUseGreanadeLaunch(bool bIsUse);// 0x351e624
	void RemoveBullet(int RemoveNum);// 0x351e5ac
	int ReloadGrenadeLaunch();// 0x351e584
	void OnRep_UseGrenadeLaunchState();// 0x351e570
	void OnRep_CurBulletNum();// 0x351e55c
	void OnRep_CanUseGrenadeLaunch();// 0x351e548
	void LaunchGrenadeBullet(Transform Trans, out const ShootTimeData ShootTimeData);// 0x351e3d0
	bool JudgeMustReload();// 0x351e39c
	bool IsUseGreanadeLaunch();// 0x351e374
	void HandleGrenadeLaunchEquip(bool bIsEquip);// 0x351e2f4
	BackpackComponent* GetBackpackComp();// 0x351e2cc
	void DoGrenadeLaunchStartReload();// 0x351e2b8
	bool CheckCanReload();// 0x351e290

--------------------------------
Class: ShootTimeData
	Vector_NetQuantize ShootPos;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	float SkeletonLength;//[Offset: 0x34, Size: 4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 64]
	uint32 UserCmdSequence;//[Offset: 0x80, Size: 4]
	byte ShootTimeConDelta;//[Offset: 0x84, Size: 1]
	float ShootLevelTime;//[Offset: 0x88, Size: 4]
	Vector_NetQuantize GunTailPos;//[Offset: 0x8c, Size: 12]
	byte ShotFlags;//[Offset: 0x98, Size: 1]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: EnergyAccumulateShootComponent.NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float StartAccMinThreshold;//[Offset: 0x790, Size: 4]
	float ReachMaxAccTime;//[Offset: 0x794, Size: 4]
	int BulletNumPerShoot;//[Offset: 0x798, Size: 4]
	int BulletImpactDamageEnergy;//[Offset: 0x79c, Size: 4]
	float MaxOffsetShootDegree;//[Offset: 0x7a0, Size: 4]
	int BulletNumPerShootMaxEnergy;//[Offset: 0x7a4, Size: 4]
	int ComsumeBulletNumPerShootMaxEnergy;//[Offset: 0x7a8, Size: 4]
	int BulletImpactDamageMaxEnergy;//[Offset: 0x7ac, Size: 4]
	class STExtraShootWeaponBulletBase* EnergyBulletTemplate;//[Offset: 0x7b0, Size: 4]
	class STExtraShootWeaponBulletBase* MaxEnergyBulletTemplate;//[Offset: 0x7b4, Size: 4]
	byte PreShootWeaponStateToChange;//[Offset: 0x7b8, Size: 1]
	bool bSpawnBulletOnSimulateClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 1]
	float CurAccEnergyPercent;//[Offset: 0x7bc, Size: 4]
	Actor*[] NormalBulletCacheList;//[Offset: 0x7fc, Size: 12]
	Actor*[] EnergyBulletCacheList;//[Offset: 0x808, Size: 12]
	Actor*[] MaxEnergyBulletCacheList;//[Offset: 0x814, Size: 12]
	void RPC_Multicast_ClientShootEnergyAccBullets(const ShootMultiBulletsParam[] LaunchParams, float InCurAccEnergyPercent);// 0x349abe0
	void RemoveBullet(STExtraShootWeaponBulletBase* Bullet);// 0x349ab68
	bool IsMaxEnergy();// 0x349ab30
	float GetEnergyPercentByShootId(int ShootID);// 0x349aab0
	float GetAccEnergyPercentForAnim();// 0x349aa80

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x680, Size: 4]
	bool bUseBulletCachePool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x688, Size: 56]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x6c0, Size: 12]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	float CurShootLockInterval;//[Offset: 0x6d4, Size: 4]
	float ShooterSpeedPrediction;//[Offset: 0x6d8, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x35a4524
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x446e168

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x674, Size: 12]

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bVerifyImpactPointDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	float VerifyWeaponFireInfoTimeTorelate;//[Offset: 0x24, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x2c, Size: 4]
	bool bVerifyMuzzleBlockTail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float VerifyTailExtend;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ShootMultiBulletsParam
	Vector LaunchBulletPos;//[Offset: 0x0, Size: 12]
	Rotator LaunchBulletRot;//[Offset: 0xc, Size: 12]
	uint32 ShootID;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UpGasSpeed;//[Offset: 0x100, Size: 4]
	float DownGasSpeed;//[Offset: 0x104, Size: 4]
	float CostGasOneShoot;//[Offset: 0x108, Size: 4]
	float MaxGas;//[Offset: 0x10c, Size: 4]
	float GasAddDamageRate;//[Offset: 0x110, Size: 4]
	float MaxGasAngle;//[Offset: 0x114, Size: 4]
	float PostFillGasTime;//[Offset: 0x118, Size: 4]
	float GasUpdateInterval;//[Offset: 0x11c, Size: 4]
	int CurGas;//[Offset: 0x120, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x124, Size: 4]
	void OnRep_CurGas();// 0x3365b48
	void CostGassByShoot();// 0x34cd49c
	void CheckNeedRep();// 0x34cd488
	void AddFillGass(float AddFillGasTime);// 0x34cd410

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x150, Size: 60]
	AkAudioEvent* GunAdsShootSound;//[Offset: 0x18c, Size: 4]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x190, Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x194, Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x198, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x19c, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x1a0, Size: 4]
	float CameraShakFalloff;//[Offset: 0x1a4, Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa, Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x1ac, Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x1b0, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x1bc, Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x1c0, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x1cc, Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x1d0, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x1dc, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x1ec, Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x1f0, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x1fc, Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x200, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x20c, Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x210, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x21c, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x22c, Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x230, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x23c, Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x240, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x24c, Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x250, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x25c, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x26c, Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x270, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x27c, Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x280, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x28c, Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x290, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x2a0, Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x2a4, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x2b0, Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x2b4, Size: 12]
	float ShootLightCD;//[Offset: 0x2c0, Size: 4]
	float LastShootLightTime;//[Offset: 0x2c4, Size: 4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x2c8, Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x2cc, Size: 4]
	float MaxFlyAngel;//[Offset: 0x2d0, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x2d4, Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x2d8, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2dc, Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x2e0, Size: 4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x2e4, Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x2f0, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x2fc, Size: 4]
	float LastMuzzleEffectTime;//[Offset: 0x300, Size: 4]
	float MuzzleEffectTimeInterval;//[Offset: 0x304, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x318, Size: 12]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	Rotator ShellDropRot;//[Offset: 0x328, Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x338, Size: 8]
	bool bSimulateBulletOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	float bSimulateBulletMaxDistance;//[Offset: 0x344, Size: 4]
	float SnipperStayDistance;//[Offset: 0x348, Size: 4]
	float bSimulateBulletRadius;//[Offset: 0x34c, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	void ReloadAttr(int WeaponID);// 0x3651d0c
	void OnWeaponUnEquiped();// 0x3651cf8
	void OnWeaponLoadAvatarAllMeshDone(AvatarDIYComponent* AvatarDIYComponent);// 0x3651c80
	void OnWeaponEuiped();// 0x3651c6c
	void HandleWeaponAction(byte Action);// 0x3651bec
	STExtraShootWeapon* GetOwnerShootWeapon();// 0x3651bc4
	OBEffectBullet* GetOBEffectBullet();// 0x3651b9c
	int GetAvailableOBEffectBulletNum();// 0x3651b74
	void CheckOptimizeMuzzleFX();// 0x3444cf8
	void ChangeShellDropFx();// 0x3651b60
	void ActiveSoundByWeaponAction(byte Action);// 0x3651ae8
	void ActiveShootLight();// 0x3651ad4
	void ActiveLocalShellDropFX();// 0x3651ac0

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x100, Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0x13c, Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x140, Size: 4]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x144, Size: 4]
	AkAudioEvent* ScopeSound;//[Offset: 0x148, Size: 4]
	AkAudioEvent* ScopeOutSound;//[Offset: 0x14c, Size: 4]
	void HandleWeaponAction(byte Action);// 0x3651bec

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x308, Size: 4]
	bool bIgnoreEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x310, Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x320, Size: 4]
	float CurMovingTime;//[Offset: 0x34c, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x350, Size: 4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x1b0, Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0x1bc, Size: 4]
	RepAttributeModify DynamicModifierRep;//[Offset: 0x218, Size: 16]
	RepAttributeModify DynamicModifierRepOnlyOwner;//[Offset: 0x228, Size: 16]
	delegate OnAttrModified;//[Offset: 0x24c, Size: 12]
	delegate OnAttrRemoved;//[Offset: 0x258, Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x264, Size: 124]
	AttributeExpand[] AttributeExpands;//[Offset: 0x31c, Size: 12]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x328, Size: 60]
	enum ActorAttrType;//[Offset: 0x364, Size: 1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x42c, Size: 12]
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x3a0035c
	void SetOrignalValueToAttribute(FString AttrName, float Value);// 0x3a0025c
	Func SetAttrModifyStateValue;//[Size: 1833560144]
	void SetAttributeMaxValue(FString AttrName, float MaxValue);// 0x3a00098
	void ResponeAttrValue(FString AttrName, float FinalValue);// 0x39fff5c
	void RequestAttrValue(FString AttrName);// 0x39ffe68
	bool RemoveModifyItemFromCache(uint32 ModifyUID);// 0x39ffde8
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x39ffc5c
	void OnRep_ModSimulateSyncList();// 0x39ffc48
	void OnRep_DynamicModifier();// 0x39ffc34
	void OnRep_AttrModifyStateList();// 0x39ffc20
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x446e168
	bool IsAttrModifyStateValidIndex(int Index);// 0x39ffba0
	bool HasDynamicModifier(FString AttrModifyId);// 0x39ffadc
	AttrModifyModDataSubsystem* GetSubsystem();// 0x39ffab4
	FString GetMaxAttrName(FString AttrName);// 0x39ff970
	bool GetAttrModifyStateValue(int Index);// 0x39ff8f0
	int GetAttrModifyStateNum();// 0x39ff8d4
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x39ff5f8
	float GetAttributeValue(FString AttrName);// 0x39ff530
	float GetAttributeOrignalValue(FString AttrName);// 0x39ff468
	bool EnableAttrModifierByIndex(int ModifyConfigIndex);// 0x39ff3e8
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x39ff288
	bool DisableAttrModifierByIndex(int ModifyConfigIndex);// 0x39ff208
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x39ff0a8
	bool DisableAllAttrModifier();// 0x39ff080
	void AddValueToAttribute(FString AttrName, float Value);// 0x39fef80
	uint32 AddModifyItemAndCache(FString AttrName, enum CModifyType, float CValue, bool bEnable, Object* Causer, bool oldModify);// 0x39fed50
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem, bool RepOnlyOwner);// 0x39febac
	uint32 AddBModifyAndCacheWithCParam(FString AttrName, enum CModifyType, float CValue);// 0x39fea60
	uint32 AddBModifyAndCache(FString AttrName, enum ModifyType, float Value);// 0x39fe914

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 12]
	FString AttrModifyItemName;//[Offset: 0xc, Size: 12]
	FString AttrName;//[Offset: 0x18, Size: 12]
	int AttrId;//[Offset: 0x24, Size: 4]
	int CompareId;//[Offset: 0x28, Size: 4]
	enum ModifierOp;//[Offset: 0x2c, Size: 1]
	float ModifierValue;//[Offset: 0x30, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	float FinalAddValue;//[Offset: 0x8, Size: 4]
	uint32 CModifyUid;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RepAttributeModify

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 60]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c, Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AttrDynamicModifyTarget
	AttrDynamicModifyItem[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AttrDynamicModifyItem
	Object* Causer;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	FString AttrName;//[Offset: 0x4, Size: 12]
	FString LimitAttrName;//[Offset: 0x10, Size: 12]
	FString MaxAttrName;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0, Size: 12]
	FString AttrDesc;//[Offset: 0xc, Size: 12]
	int RelateTypeId;//[Offset: 0x18, Size: 4]
	FString RelateGroup;//[Offset: 0x1c, Size: 12]
	float Value;//[Offset: 0x28, Size: 4]
	int nValue;//[Offset: 0x2c, Size: 4]
	byte bValue;//[Offset: 0x30, Size: 1]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ModAttrSimulateSyncItem
	int AttrId;//[Offset: 0x0, Size: 4]
	float FinalValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 12]
	enum AttrVariableType;//[Offset: 0xc, Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 12]
	Actor* AffectedActor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AttrModifyModDataSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: WeaponAttrModifyConfig
	int ID;//[Offset: 0x0, Size: 4]
	FString ModifyConfigID;//[Offset: 0x4, Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 8]
	float ShootRateCheckInterval;//[Offset: 0x120, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x128, Size: 4]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x12c, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x170, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x174, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x178, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x17c, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x180, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x184, Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x188, Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x18c, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x194, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x198, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x19c, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x1a4, Size: 4]
	float TolerateFlyTime;//[Offset: 0x1a8, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1ac, Size: 4]
	float DeCon6SpanTime;//[Offset: 0x26c, Size: 4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x390ad38

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xad, Size: 1]
	float DamageImpulse;//[Offset: 0xc8, Size: 4]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemID;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x8, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0xc, Size: 12]
	HitResult HitInfo;//[Offset: 0x18, Size: 144]

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 12]
	int AutoAimSpeed;//[Offset: 0x64, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x68, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x70, Size: 4]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector_NetQuantize10 ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize10 ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	Actor* Actor;//[Offset: 0x34, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x3c, Size: 8]
	byte HitBodyType;//[Offset: 0x44, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x45, Size: 1]

--------------------------------
Class: ReplayStartFireInfo
	StartFireInfo ClientStartFire;//[Offset: 0x0, Size: 24]
	enum DsLastRequestFireRet;//[Offset: 0x18, Size: 1]
	uint32 DsNextFireMiniShootID;//[Offset: 0x1c, Size: 4]
	uint32 DsCurClipID;//[Offset: 0x20, Size: 4]
	int DsCurClipNum;//[Offset: 0x24, Size: 4]
	int ClientRequestClipNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	byte ShootMode;//[Offset: 0xc, Size: 1]
	byte ShootType;//[Offset: 0xd, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	int StartFireID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BulletHitInfoUploadDataInReplay
	enum VertifyRes;//[Offset: 0x0, Size: 1]
	enum VertifySubType;//[Offset: 0x1, Size: 1]
	BulletHitInfoUploadData UploadData;//[Offset: 0x10, Size: 272]
	CharacterHistoryData VictimHistoryData;//[Offset: 0x120, Size: 152]
	ShootTimeData ShootTimeData;//[Offset: 0x1c0, Size: 160]
	uint32 CurrentUserCmdSequence;//[Offset: 0x260, Size: 4]
	uint32 UniqueId;//[Offset: 0x264, Size: 4]
	enum[] StatData;//[Offset: 0x268, Size: 12]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	Rotator VehicleRotation;//[Offset: 0x60, Size: 12]
	Vector VehicleRotVelocity;//[Offset: 0x6c, Size: 12]
	Vector Velocity;//[Offset: 0x78, Size: 12]
	uint32 UserCmdSequenceNew;//[Offset: 0x84, Size: 4]
	uint32 UserCmdSequenceOld;//[Offset: 0x88, Size: 4]
	float MoveServerTimeNew;//[Offset: 0x8c, Size: 4]
	float MoveServerTimeOld;//[Offset: 0x90, Size: 4]
	enum MoveBaseState;//[Offset: 0x94, Size: 1]

--------------------------------
Class: NextFireMinShootDataInReplay
	uint32 NextFireMinShootID;//[Offset: 0x0, Size: 4]
	BulletHitInfoUploadData UploadData;//[Offset: 0x10, Size: 272]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0, Size: 12]
	Vector TargetOffset;//[Offset: 0xc, Size: 12]
	float SpringArmLength;//[Offset: 0x18, Size: 4]
	float AdditiveOffsetFov;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x308, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x314, Size: 12]
	byte ThrowMode;//[Offset: 0x320, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x324, Size: 4]
	float MaxSimTime;//[Offset: 0x328, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x32c, Size: 40]
	float GrenadeRadius;//[Offset: 0x354, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x358, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x364, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x370, Size: 12]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 12]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector HitActorLocation;//[Offset: 0x10, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponOverHeatingComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float MaxTemperature;//[Offset: 0x100, Size: 4]
	float MinShootInterval;//[Offset: 0x104, Size: 4]
	float CoolDownSpeed;//[Offset: 0x108, Size: 4]
	float HeatingSpeedPerBullet;//[Offset: 0x10c, Size: 4]
	float CoolDownDelay;//[Offset: 0x110, Size: 4]
	float CurrentTemperature;//[Offset: 0x114, Size: 4]
	CurveFloat* ShootIntervalScaleCurve;//[Offset: 0x118, Size: 4]
	FName MuzzleEffectParam;//[Offset: 0x120, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128, Size: 4]
	void HandleWeaponOnShoot();// 0x391ce80

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 12]
	int[] BorrowedSeat;//[Offset: 0xc, Size: 12]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	float HitSelfModifier;//[Offset: 0x31c, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x320, Size: 4]
	float HitOthersModifier;//[Offset: 0x324, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x328, Size: 4]
	float HitCharacterModifier;//[Offset: 0x32c, Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x14c, Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x150, Size: 4]
	float ImpactModifier;//[Offset: 0x154, Size: 4]
	float ImpactAbsorption;//[Offset: 0x158, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0x15c, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0x160, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x164, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x168, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x16c, Size: 4]
	class Actor[] HitIgnoreClasses;//[Offset: 0x170, Size: 12]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x180, Size: 4]
	float PushCharacterRightVectorStrength;//[Offset: 0x184, Size: 4]
	float PushCharacterTopVectorStrength;//[Offset: 0x188, Size: 4]
	float ApplyImpluseSpeed;//[Offset: 0x18c, Size: 4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x190, Size: 60]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x1cc, Size: 4]
	float DamageCharacterCD;//[Offset: 0x1d0, Size: 4]
	float PassengerProtectTime;//[Offset: 0x1d4, Size: 4]
	float DamageSelfCD;//[Offset: 0x1dc, Size: 4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	float HitDamageSelfMaxFactor;//[Offset: 0x1e8, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x1ec, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x1f4, Size: 4]
	float DamageReduce;//[Offset: 0x1f8, Size: 4]
	float fHitEventInterval;//[Offset: 0x1fc, Size: 4]
	delegate OnVehicleHitOthers;//[Offset: 0x204, Size: 12]
	bool bEnableVehicleExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	float ExplosionBaseDamage;//[Offset: 0x214, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x218, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x21c, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x220, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x224, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x228, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x22c, Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x234, Size: 4]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x238, Size: 60]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x278, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x280, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x290, Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x2d4, Size: 4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x2d8, Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x2e0, Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x2e8, Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x2ec, Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x2f0, Size: 4]
	float DotProductRearThreshold;//[Offset: 0x2f4, Size: 4]
	float ImpactModifierFront;//[Offset: 0x2f8, Size: 4]
	float ImpactModifierRear;//[Offset: 0x2fc, Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x300, Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x304, Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x308, Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x310, Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x314, Size: 4]
	bool bDebugVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x31c, Size: 60]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	float CustomImpulseCooldownTime;//[Offset: 0x35c, Size: 4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x360, Size: 60]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x39c, Size: 32]
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x38c8380
	bool ScriptShouldCauseDamage(float InDamage, PrimitiveComponent* InPrimComp, STExtraBaseCharacter* InCharacter);// 0x446e168
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x38c8184
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x38c7fe0

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 12]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0xc, Size: 12]
	class DamageType* DamageType;//[Offset: 0x18, Size: 4]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]

--------------------------------
Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 4]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0x8, Size: 4]
	float MaxImpulseDamage;//[Offset: 0xc, Size: 4]
	float ImpulseStrength;//[Offset: 0x10, Size: 4]
	float RadialImpulseStrength;//[Offset: 0x14, Size: 4]
	float ImpulseRadius;//[Offset: 0x18, Size: 4]
	byte ImpulseFalloffType;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x14c, Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x158, Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x164, Size: 12]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x170, Size: 12]
	delegate OnHPPreChange;//[Offset: 0x17c, Size: 12]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x188, Size: 12]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x194, Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	<int,float> DamageFactor;//[Offset: 0x1a4, Size: 60]
	float HPMax;//[Offset: 0x1e0, Size: 4]
	float HP;//[Offset: 0x1e4, Size: 4]
	bool ShowHealthUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	int UGCHUDStatus;//[Offset: 0x1ec, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x1f0, Size: 12]
	bool CanMaintained;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 1]
	bool CanGasCan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd, Size: 1]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe, Size: 1]
	float FuelMax;//[Offset: 0x200, Size: 4]
	float Fuel;//[Offset: 0x204, Size: 4]
	bool bCanOilInStation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	bool ShowFuelUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 1]
	int FuelIntervalCount;//[Offset: 0x20c, Size: 4]
	float DelayDestroySeconds;//[Offset: 0x214, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x218, Size: 4]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x21c, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x22c, Size: 12]
	VehicleDamageRecord[] DamageRecords;//[Offset: 0x238, Size: 12]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x38c26e4
	void TranslateFuelToReplicatedRatio();// 0x38c26d0
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x38c24c4
	void TakeDamageByBoneNameInner(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x38c22a8
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x38c208c
	void SetUGCHUDStatus(int Status);// 0x38c2014
	void SetHPMax(float InHPmax, bool bChangeHP);// 0x38c1f50
	void SetHPFuel(float InHP, float InFuel);// 0x38c1e94
	void SetHP(float InHP);// 0x38c1e20
	void SetFuel(float InFuel);// 0x38c1da8
	void SetDelayDestroySeconds(float InSeconds);// 0x38c1d30
	void RPC_Multicast_VehicleTakeDamage(float Damage, int LeftHP, int DamageType, Actor* DamageCauser);// 0x38c1be0
	void RefreshWheelState();// 0x38c1bcc
	void OnRep_WheelsCurrentHP();// 0x38c1bb8
	void OnRep_HP();// 0x38c1ba4
	void OnRep_Fuel();// 0x38c1b90
	bool NoFuel();// 0x38c1b68
	void Maintenance(float addpercenthp, bool fixtire);// 0x38c1aa4
	bool IsDontDamage();// 0x38c1a88
	bool IsDontConsumeFuel();// 0x38c1a6c
	bool IsDestroyed();// 0x38c1a44
	int GetWheelsHPNum();// 0x38c1a1c
	float GetWheelHPMax(int WheelIdx);// 0x38c199c
	float GetWheelHP(int WheelIdx);// 0x38c191c
	float GetVehicleHPMax();// 0x38c18f4
	float GetVehicleHP();// 0x3444460
	int GetUGCHUDStatus();// 0x38c18cc
	float GetFuelMax();// 0x38c18a4
	float GetFuelConsumeFactor();// 0x38c187c
	float GetFuel();// 0x38c1854
	float GetDelayDestroySeconds();// 0x38c182c
	bool CanVehicleBeMaintence();// 0x38c1810
	bool CanVehicleBeGasCan();// 0x38c17f4
	void CalculateDestroyVehicleWheelFlow(Controller* Instigator);// 0x38c177c

--------------------------------
Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleDamageRecord
	Controller* Instigator;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int DamageType;//[Offset: 0xc, Size: 4]
	int AdditionalParam;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	delegate OnContactWater;//[Offset: 0x260, Size: 12]
	delegate OnEnterWater;//[Offset: 0x26c, Size: 12]
	bool bUseBuoyancyEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	OceanManager* OceanManager;//[Offset: 0x27c, Size: 4]
	float MeshDensity;//[Offset: 0x280, Size: 4]
	float FluidDensity;//[Offset: 0x284, Size: 4]
	float FluidLinearDamping;//[Offset: 0x288, Size: 4]
	float FluidAngularDamping;//[Offset: 0x28c, Size: 4]
	Vector VelocityDamper;//[Offset: 0x290, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x2a0, Size: 4]
	float TestPointRadius;//[Offset: 0x2a4, Size: 4]
	Vector[] TestPoints;//[Offset: 0x2a8, Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 1]
	bool SnapToSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b6, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b7, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x2b8, Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x2c4, Size: 12]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]
	float StayUprightStiffness;//[Offset: 0x2d4, Size: 4]
	float StayUprightDamping;//[Offset: 0x2d8, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x2dc, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x2ec, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x2f0, Size: 4]
	byte TickGroup;//[Offset: 0x2f4, Size: 1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x2f8, Size: 12]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x304, Size: 12]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x4b0, Size: 4]
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x6e26294
	void OnEnterWaterDelegate__DelegateSignature(bool IsUnderWater);// 0x446e168
	void OnContactWaterDelegate__DelegateSignature(bool IsContactingWater);// 0x446e168
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x6e26214
	bool IsEntirelyUnderWater();// 0x6e261dc
	bool IsContactedWater();// 0x6e261b4
	void EndableUprightConstraint(bool bEnable);// 0x6e26134
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x6e26068

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	Vector GlobalWaveDirection;//[Offset: 0x30c, Size: 12]
	float GlobalWaveSpeed;//[Offset: 0x318, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x31c, Size: 4]
	float DistanceCheckAbove;//[Offset: 0x320, Size: 4]
	float DistanceCheckBelow;//[Offset: 0x324, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x328, Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x334, Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x340, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	float ModulationStartHeight;//[Offset: 0x348, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x34c, Size: 4]
	float ModulationPower;//[Offset: 0x350, Size: 4]
	Landscape* Landscape;//[Offset: 0x354, Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x358, Size: 4]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	float CorrectTimeInterval;//[Offset: 0x380, Size: 4]
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0x388, Size: 4]
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0x38c, Size: 4]
	delegate OnReplicatedWorldRealTimeSeconds;//[Offset: 0x390, Size: 12]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x3a0, Size: 12]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x3b4, Size: 12]
	Vector[] WaterBoxExtends;//[Offset: 0x3c0, Size: 12]
	void OnRep_ReplicatedWorldRealTimeSeconds();// 0x6e276a0
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x6e27628
	LinearColor GetHeightmapPixel(float U, float V);// 0x6e27558

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x328, Size: 4]
	Guid LandscapeGuid;//[Offset: 0x32c, Size: 16]
	Guid BoundingGuid;//[Offset: 0x33c, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x34c, Size: 8]
	int MaxLODLevel;//[Offset: 0x354, Size: 4]
	float LODDistanceFactor;//[Offset: 0x358, Size: 4]
	byte LODFalloff;//[Offset: 0x35c, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x360, Size: 4]
	float LODDistributionSetting;//[Offset: 0x364, Size: 4]
	byte NearMaxLOD_Baked;//[Offset: 0x368, Size: 1]
	float NearFactor_Baked;//[Offset: 0x36c, Size: 4]
	float NearExtent_Baked;//[Offset: 0x370, Size: 4]
	float FarFactor_Baked;//[Offset: 0x374, Size: 4]
	float LandscapeRoughness;//[Offset: 0x378, Size: 4]
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	float[] ImproveLODValues;//[Offset: 0x380, Size: 12]
	byte NearMaxLOD;//[Offset: 0x38c, Size: 1]
	float NearFactor;//[Offset: 0x390, Size: 4]
	float NearExtent;//[Offset: 0x394, Size: 4]
	float FarFactor;//[Offset: 0x398, Size: 4]
	int StaticLightingLOD;//[Offset: 0x39c, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x3a0, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x3a4, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x3ac, Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x3b0, Size: 4]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x3b4, Size: 60]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x3f4, Size: 12]
	float MinGrassWeightThreshold;//[Offset: 0x400, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x404, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x408, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x40c, Size: 4]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x410, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x418, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x420, Size: 12]
	LandscapeAOTextureDataAsset* LandscapeAOTextureDataAsset;//[Offset: 0x42c, Size: 4]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x430, Size: 12]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x43c, Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	float StaticLightingResolution;//[Offset: 0x494, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x498, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x498, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x498, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x499, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49a, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49a, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x49c, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4a0, Size: 24]
	int CollisionMipLevel;//[Offset: 0x4b8, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x4bc, Size: 4]
	float CollisionThickness;//[Offset: 0x4c0, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x4c8, Size: 320]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x608, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x608, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x60c, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x610, Size: 4]
	int NumSubsections;//[Offset: 0x614, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x618, Size: 1]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x618, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x619, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 1]
	Texture2D* MaskTextureUsedByGrassClear;//[Offset: 0x61c, Size: 4]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x510d934
	void ChangeLODDistributionSettingConsoleVariable();// 0x3348728
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x3348400
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x3487c10
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x36844a4

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x608, Size: 12]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x614, Size: 12]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x620, Size: 12]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	float Width;//[Offset: 0x34, Size: 4]
	float SideFalloff;//[Offset: 0x38, Size: 4]
	float EndFalloff;//[Offset: 0x3c, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40, Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c, Size: 12]
	Box Bounds;//[Offset: 0x58, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74, Size: 4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20, Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40, Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54, Size: 12]
	Box Bounds;//[Offset: 0x60, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 4]
	float TangentLen;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x1c, Size: 12]
	StaticMesh* GrassMesh;//[Offset: 0x28, Size: 4]
	float GrassDensity;//[Offset: 0x2c, Size: 4]
	float PlacementJitter;//[Offset: 0x30, Size: 4]
	int StartCullDistance;//[Offset: 0x34, Size: 4]
	int EndCullDistance;//[Offset: 0x38, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 4]
	float GrassDensity;//[Offset: 0x4, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float PlacementJitter;//[Offset: 0xc, Size: 4]
	int StartCullDistance;//[Offset: 0x10, Size: 4]
	int EndCullDistance;//[Offset: 0x14, Size: 4]
	int MinLOD;//[Offset: 0x18, Size: 4]
	enum Scaling;//[Offset: 0x1c, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x20, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x28, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x30, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3b, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x608, Size: 4]
	int SectionBaseY;//[Offset: 0x60c, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x610, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x614, Size: 4]
	int NumSubsections;//[Offset: 0x618, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x61c, Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x620, Size: 4]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x624, Size: 60]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x660, Size: 24]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x678, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x67c, Size: 12]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x688, Size: 12]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x694, Size: 60]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x6d0, Size: 12]
	Texture2D*[] WeightmapTextures;//[Offset: 0x6dc, Size: 12]
	int VisibilityLayerChannel;//[Offset: 0x6e8, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x6ec, Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x6f0, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x700, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x710, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x720, Size: 4]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x724, Size: 60]
	FString VisibleVisibilityLayer;//[Offset: 0x760, Size: 12]
	Box CachedLocalBox;//[Offset: 0x76c, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x788, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x7a4, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x7b4, Size: 12]
	int CollisionMipLevel;//[Offset: 0x7c0, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x7c4, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x7c8, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x7cc, Size: 4]
	float StaticLightingResolution;//[Offset: 0x7d0, Size: 4]
	int ForcedLOD;//[Offset: 0x7d4, Size: 4]
	int LODBias;//[Offset: 0x7d8, Size: 4]
	int MobileVertexHoleMaxLOD;//[Offset: 0x7dc, Size: 4]
	float[] LODDeltaVertex;//[Offset: 0x7ec, Size: 12]
	float MaxDeltaVertex;//[Offset: 0x7f8, Size: 4]
	Guid StateID;//[Offset: 0x7fc, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x80c, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x81c, Size: 4]
	StaticMesh* OccluderMesh;//[Offset: 0x820, Size: 4]
	byte MobileBlendableLayerMask;//[Offset: 0x824, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x828, Size: 4]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x82c, Size: 60]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x868, Size: 12]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x874, Size: 4]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x878, Size: 1]
	uint16[] CachedHeightData;//[Offset: 0x87c, Size: 12]
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	FName UsedOtherMaterialName;//[Offset: 0x8e0, Size: 8]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 12]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 4]
	byte WeightmapTextureIndex;//[Offset: 0x4, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x5, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28, Size: 4]
	float Hardness;//[Offset: 0x2c, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x608, Size: 12]
	int SectionBaseX;//[Offset: 0x614, Size: 4]
	int SectionBaseY;//[Offset: 0x618, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x61c, Size: 4]
	float CollisionScale;//[Offset: 0x620, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x624, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x628, Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x634, Size: 16]
	Box CachedLocalBox;//[Offset: 0x644, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x660, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x688, Size: 12]

--------------------------------
Class: LandscapeAOTextureDataAsset.DataAsset.Object
	uint32 DataSize;//[Offset: 0x20, Size: 4]
	byte[] LandscapeAOPlatformData;//[Offset: 0x24, Size: 12]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x82c, Size: 12]
	int NumBuiltInstances;//[Offset: 0x838, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x840, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x85c, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x878, Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x884, Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x8b0, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x8b4, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d5, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x8d8, Size: 4]
	bool ShowInstances(out const int[] InstanceIndices, out const Transform[] InstanceTransforms);// 0x600440c
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x6004330

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x738, Size: 12]
	int InstancingRandomSeed;//[Offset: 0x744, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x748, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x74c, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x750, Size: 12]
	int[] RemovedInstances;//[Offset: 0x75c, Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x7c8, Size: 4]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x7cc, Size: 60]
	int NumPendingLightmaps;//[Offset: 0x80c, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x810, Size: 12]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x6010460
	bool ShowInstances(out const int[] InstanceIndices, out const Transform[] InstanceTransforms);// 0x600440c
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x60103a0
	int[] ReplaceAllInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0x60101f4
	bool RemoveInstances(out const int[] InstanceIndices);// 0x6004330
	bool RemoveInstance(int InstanceIndex);// 0x601016c
	bool HideInstance(out const int[] InstanceIndices);// 0x6010090
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x600ff20
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x600fd60
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x600fbc8
	int GetInstanceCount();// 0x600fba0
	void ClearInstances();// 0x36c8910
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x600fac0
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices, bool bMarkRenderStateDirty);// 0x600f8c0
	int AddInstance(out const Transform InstanceTransform);// 0x600f7d0

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x624, Size: 4]
	Vector Direction;//[Offset: 0x628, Size: 12]
	float SpeedValue;//[Offset: 0x634, Size: 4]
	float WaveForceMultiplier;//[Offset: 0x638, Size: 4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x63c, Size: 12]
	float TimeScaleOffset;//[Offset: 0x648, Size: 4]
	float Offset;//[Offset: 0x64c, Size: 4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	float SpeedAttenuationFromSpline;//[Offset: 0x654, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	float ZOffset;//[Offset: 0x65c, Size: 4]
	float CellSizeX;//[Offset: 0x660, Size: 4]
	float CellSizeY;//[Offset: 0x664, Size: 4]
	<float,WaterBoxCell> Cells;//[Offset: 0x668, Size: 60]
	int KeyFactor;//[Offset: 0x6a4, Size: 4]

--------------------------------
Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 20]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 20]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 20]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 12]
	float WaveZ;//[Offset: 0xc, Size: 4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 12]
	float Speed;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x260, Size: 4]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x268, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x270, Size: 4]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x278, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x290, Size: 4]
	delegate OnConstraintBroken;//[Offset: 0x294, Size: 12]
	ConstraintInstance ConstraintInstance;//[Offset: 0x2a0, Size: 416]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x60d1f28
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x60d1ea8
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x60d1dec
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x60d1d30
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x60d1c74
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x60d1bf0
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x60d1ad0
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x60d1a4c
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x60d192c
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x60d182c
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x60d1764
	void SetDisableCollision(bool bDisableCollision);// 0x60d16e4
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x60d161c
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x60d1500
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x60d13e0
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x60d1284
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x60d1200
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x60d1130
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x60d10b0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x60d0fe0
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x60d0f24
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x60d0e68
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x60d0dac
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x60d0d28
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x60d0c58
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x60d0b58
	void SetAngularDriveMode(byte DriveMode);// 0x60d0ae0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x60d0a18
	bool IsBroken();// 0x60d09f0
	float GetCurrentTwist();// 0x60d09c8
	float GetCurrentSwing2();// 0x60d09a0
	float GetCurrentSwing1();// 0x60d0978
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x60d08a0
	void BreakConstraint();// 0x60d088c

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x14c, Size: 12]
	delegate OnActorHitFromClient;//[Offset: 0x158, Size: 12]
	float MinCorrectionInterval;//[Offset: 0x164, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x168, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x16c, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x170, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0x174, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0x178, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x17c, Size: 4]
	float AllowMaxLinearSpeedRatio;//[Offset: 0x180, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x184, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x188, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x18c, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x190, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x194, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x198, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x19c, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x1a0, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	float StaticFixLocation;//[Offset: 0x1a8, Size: 4]
	float StaticFixAngel;//[Offset: 0x1ac, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x1b0, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x1b4, Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x1bc, Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x1c0, Size: 4]
	float MaxAllowJumpHeight;//[Offset: 0x1c4, Size: 4]
	float MaxSyncSpeedZDelta;//[Offset: 0x1c8, Size: 4]
	float MaxSyncSpeedZDeltaStep1;//[Offset: 0x1cc, Size: 4]
	STExtraVehicleBase* VehicleOwner;//[Offset: 0x1d0, Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x2cc, Size: 60]
	VehicleHitRewindThreshold VehicleHitRewindThreshold;//[Offset: 0x348, Size: 24]
	bool bEnableValidateVelNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	float VelZThreshold_ValidateGround;//[Offset: 0x364, Size: 4]
	float GroundSinTolerance;//[Offset: 0x368, Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x38e18b0
	void ServerMoveUnreliably_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetMovement4W Movement);// 0x38e16d4
	void ServerMoveReliably_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetMovement4W Movement);// 0x38e14f8
	void ServerHit_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetHit4W Movement);// 0x38e1364
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x38e11a0
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x38e0fa8
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x38e0db0
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x38e0b54
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x38e0948
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x38e0738
	void SendClientHitPointToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, PrimitiveComponent* HitActorComponent, const Vector_NetQuantize100 NormalImpulse, const Vector_NetQuantize100 HitPoint);// 0x38e0414
	void SendClientHitCharacterToServerReliably(float ServerTimeStamp, const Vector_NetQuantize100 VehicleLocation, const Vector_NetQuantizeNormal VehicleRotator, float VehicleVelocitySize, const Vector_NetQuantize100 AngularVelocity, STExtraBaseCharacter* HitCharacter, float HitTimeStamp, const Vector_NetQuantize100 HitLocation);// 0x38e0168
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x38dffc4
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x38dfe20
	void OnDriverRide();// 0x38dfe0c
	void HandleProtectionEnable(bool InEnable);// 0x38dfd8c
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x38dfc84
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x38dfaec
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x38df9e4
	void HandleOnDSOptimGrayPublishFlagsChanged();// 0x38df9d0
	Actor*[] GetRiders();// 0x38df910
	bool GetPrimitiveCompRigidBodyState(PrimitiveComponent* PrimitiveComp, out RigidBodyState OutState, FName BoneName);// 0x38df7a0
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x38df714
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x38df634
	void DragUnderGround();// 0x38df620
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x38df500
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x38df390
	bool CheckAndLoadLandscape(float DeltaTime);// 0x3621530
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x38df2c0
	bool AdjustFloorPosition(out const Vector ClientLocation, out const Actor*[] Riders, out Vector OutLocation);// 0x38df13c

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: VehicleHitRewindThreshold
	float ValidDeltaSeconds;//[Offset: 0x0, Size: 4]
	float VehicleRewindDistance;//[Offset: 0x4, Size: 4]
	float VehicleRewindAngle;//[Offset: 0x8, Size: 4]
	float VelocitySize;//[Offset: 0xc, Size: 4]
	float AngularVelocityInDegreesSize;//[Offset: 0x10, Size: 4]
	float HitCharacterDistance;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleNetMovement4W
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	RigidVehicleMovement Movement;//[Offset: 0x4, Size: 48]
	RigidVehicleMovement LandMovement;//[Offset: 0x34, Size: 48]

--------------------------------
Class: RigidVehicleMovement
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Vector LinVel;//[Offset: 0x18, Size: 12]
	Vector AngVel;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleNetHit4W
	Actor* OtherActor;//[Offset: 0x0, Size: 4]
	Vector Impulse;//[Offset: 0x4, Size: 12]
	Vector ImpactPoint;//[Offset: 0x10, Size: 12]
	RigidVehicleMovement Movement;//[Offset: 0x1c, Size: 48]

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool bVerifyMuzzleImpactDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	bool bVerifyShootPosInHistory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 1]
	bool bVerifyMuzzleLocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	int TolerateMuzzleAndCharacterDisSquare;//[Offset: 0xd0, Size: 4]
	int TolerateMuzzleAndVehicleDisSquare;//[Offset: 0xd4, Size: 4]
	float TolerateShootPointDistanceSqured;//[Offset: 0xd8, Size: 4]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0xdc, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xe0, Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0xe8, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0xec, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0xf0, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0xf4, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0xf8, Size: 4]
	float MaxGunPosLength;//[Offset: 0xfc, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x100, Size: 4]
	float TolerateOwnerAndBulletDist;//[Offset: 0x104, Size: 4]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x108, Size: 16]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x118, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x120, Size: 4]
	float TolerateShootRange;//[Offset: 0x124, Size: 4]
	float TolerateHitDataDelayTime;//[Offset: 0x128, Size: 4]
	float TolPingOfWeakShootGood;//[Offset: 0x12c, Size: 4]
	float TolLagTimeOfWeakShootGood;//[Offset: 0x130, Size: 4]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	float BonePointTorelate;//[Offset: 0x138, Size: 4]
	Vector VerifiedBoneScale;//[Offset: 0x13c, Size: 12]
	float VerifyMuzImpDirIgnoreDis;//[Offset: 0x148, Size: 4]
	float TolMuzImpDir2BulletDir;//[Offset: 0x14c, Size: 4]
	float TolMuzImpDir2ControlRot;//[Offset: 0x150, Size: 4]
	int VerifyMuzImpDirRecordTime;//[Offset: 0x154, Size: 4]
	float TolShootPos2History;//[Offset: 0x158, Size: 4]
	float TolShootPos2History2;//[Offset: 0x15c, Size: 4]
	int VerifyShootPosInHistoryRecordTime;//[Offset: 0x160, Size: 4]
	bool VerifyMuzzleLocusIgnoreFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	bool VerifyMuzzleLocusIgnoreShotGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 1]
	float VerifyMuzzleLocusIgnoreDis;//[Offset: 0x168, Size: 4]
	float TolMuzLocusXMin;//[Offset: 0x16c, Size: 4]
	float TolMuzLocusXMax;//[Offset: 0x170, Size: 4]
	float TolMuzLocusYMin;//[Offset: 0x174, Size: 4]
	float TolMuzLocusYMax;//[Offset: 0x178, Size: 4]
	float TolMuzLocusZMin;//[Offset: 0x17c, Size: 4]
	float TolMuzLocusZMax;//[Offset: 0x180, Size: 4]
	float TolMuzLocusLengthMax;//[Offset: 0x184, Size: 4]
	float TolHead2ShootPosLength3;//[Offset: 0x188, Size: 4]
	float TolHead2ShootPosLength4;//[Offset: 0x18c, Size: 4]
	float TolGun2ShootPosLength1;//[Offset: 0x190, Size: 4]
	float TolGun2ShootPosLength2;//[Offset: 0x194, Size: 4]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x19c, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1a0, Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x1a4, Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x1a8, Size: 4]
	float TolerateVehicleDis;//[Offset: 0x1ac, Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x1b0, Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x1b4, Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x1b8, Size: 4]
	float TolerateCharacterDis;//[Offset: 0x1bc, Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x1c0, Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x1c4, Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x1c8, Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x1cc, Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x1d0, Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x1d4, Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x1d8, Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x1dc, Size: 4]
	float TolerateNetDelay;//[Offset: 0x1e0, Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x1e4, Size: 4]
	float GrayWeaponAndShootAngle;//[Offset: 0x1e8, Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x1ec, Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x1f0, Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x1f4, Size: 4]
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x1f8, Size: 12]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0x204, Size: 12]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x210, Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x214, Size: 4]
	Character* CharacterOwner;//[Offset: 0x218, Size: 4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x21c, Size: 24]
	Vector LastImpactPoint;//[Offset: 0x234, Size: 12]
	bool IsShootPosBlockImpactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	float ShooterNetDelayMinSeconds;//[Offset: 0x254, Size: 4]
	float ShooterNetDelayMaxSeconds;//[Offset: 0x258, Size: 4]
	<enum,IndefiniteVerifyCfg> IndefiniteVerifyCfg;//[Offset: 0x25c, Size: 60]
	<enum,int> IndefiniteVerifyPassCount;//[Offset: 0x298, Size: 60]
	<enum,int> IndefiniteVerifyFailCount;//[Offset: 0x2d4, Size: 60]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	static float Stat_SimulatedCharacterServerTime(const Character* InChara);// 0x3549d04
	float SimulatedCharacterServerTime();// 0x3549cd4
	void SetIndefiniteVerifyCfg(enum Type, int InCountThreshold, float InPercentThreshold);// 0x3549bd4
	float ServerLatestTransformUpdateTimeStamp();// 0x337d090
	float ServerLatestTimeStamp();// 0x3419020
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x3549af8
	void OnCharacterStartInit();// 0x3549ae4
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x35499d8
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x3549914
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x3549850
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x35497d0
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x354970c
	int GetIndefiniteVerifyCount(enum VerifyType, bool IsPass);// 0x3549640
	static float GetCharacterPredictionSeconds(const Character* InChara);// 0x35495c8
	enum ConditionChanggeIndefiniteVerify(out const ShootVerifyParameter VerifyData, enum VerifyType);// 0x35494e8
	int ChangeIndefiniteVerifyCount(enum VerifyType, bool IsPass, int Var);// 0x35493d4
	float AuthorityCharacterServerTime();// 0x35493ac

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 2]
	uint16 NetDelay;//[Offset: 0xc, Size: 2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IndefiniteVerifyCfg
	int CountThreshold;//[Offset: 0x0, Size: 4]
	float PercentThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShootVerifyParameter
	STExtraShootWeapon* Weapon;//[Offset: 0x0, Size: 4]
	STExtraCharacter* Shooter;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehBackpackItem
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0, Size: 4]
	<uint32,float> MapRTPC;//[Offset: 0x4, Size: 60]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 1]
	byte ViewYaw;//[Offset: 0x1, Size: 1]
	byte ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x318, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x31c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x320, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	bool bMeshRootVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 1]
	float ArmOriginProbeSize;//[Offset: 0x328, Size: 4]
	Rotator RelativeToOwnerRotator;//[Offset: 0x32c, Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x338, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	float MinPitch;//[Offset: 0x350, Size: 4]
	float MinSmartPitch;//[Offset: 0x354, Size: 4]
	float MaxPitch;//[Offset: 0x358, Size: 4]
	float SmartPitchInputFactor;//[Offset: 0x35c, Size: 4]
	float SmartYawInputFactor;//[Offset: 0x360, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x368, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x38c, Size: 4]
	bool bKeepCameraLagWhenSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool bNoFixCameraLagWhenSpecator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	float ResultMinPitch;//[Offset: 0x3b4, Size: 4]
	float ResultMaxPitch;//[Offset: 0x3b8, Size: 4]
	Vector ArmOriginOffset;//[Offset: 0x3bc, Size: 12]
	bool bIsAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	float SocketOffsetInterpSpeed;//[Offset: 0x3ec, Size: 4]
	float CurAdditiveOffsetFov;//[Offset: 0x3f0, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x3f4, Size: 4]
	float LeaveMaxDistance;//[Offset: 0x3f8, Size: 4]
	float LeaveMaxTime;//[Offset: 0x3fc, Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x408, Size: 4]
	float ApproachTime;//[Offset: 0x410, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x420, Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x424, Size: 4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	void SetSteerCameraYaw(float InSteerCameraYaw, bool bRelativeToStartYaw);// 0x38dbc8c
	void SetSmartCameraInput(float Yaw, float Pitch);// 0x38dbbd0
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x38dbb50
	void SetFreeCameraInput(Rotator deltaRot);// 0x38dbae0
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x38dba60
	void ResetSmartCamera();// 0x38dba4c
	float GetSteerCameraYaw(bool bRelativeToStartYaw);// 0x38db9c4
	Rotator GetLookRotation();// 0x38db97c
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x345ec88
	void EnableCameraProcess(bool Enable, Vector FSocketOffsetModifier, float fFOVModifier);// 0x38db868
	void DelayRotationLagEnabledEnd();// 0x3365b48
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x38db75c
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x38db6a0

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum NoiseType;//[Offset: 0x0, Size: 1]
	float Loudness;//[Offset: 0x4, Size: 4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 4]
	float MaxRange;//[Offset: 0xc, Size: 4]

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	float RPCSyncInterval;//[Offset: 0xc0, Size: 4]
	delegate OnClientAddBuffEvent;//[Offset: 0xc4, Size: 12]
	delegate OnClientRemoveBuffEvent;//[Offset: 0xd0, Size: 12]
	delegate OnClientUpdateBuffEvent;//[Offset: 0xdc, Size: 12]
	delegate OnAddBuffEvent;//[Offset: 0xe8, Size: 12]
	<int,UAEBlackboard*> BuffBlackboardMap;//[Offset: 0xf4, Size: 60]
	BuffIncNetArray SyncBriefs;//[Offset: 0x130, Size: 24]
	BuffIncNetArray SyncRefBriefs;//[Offset: 0x148, Size: 24]
	BuffIncNetArray OwnerSyncBriefs;//[Offset: 0x160, Size: 24]
	BuffIncNetArray OwnerSyncRefBriefs;//[Offset: 0x178, Size: 24]
	<int> BriefRemoveInstIds;//[Offset: 0x190, Size: 60]
	void UpdateClientBuff(ClientSyncBrief Brief);// 0x3a1d6d4
	void RemoveClientBuff(int InstID);// 0x3a1d65c
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x3a1d514
	void RemoveAllBuffs();// 0x3a1d500
	void OnRep_SyncBriefs();// 0x3a1d4ec
	void OnRep_OwnerSyncBriefs();// 0x3a1d4d8
	void OnClientUpdateBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x446e168
	void OnClientRemoveBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x446e168
	void OnClientAddBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x446e168
	void OnAddBuffEvent__DelegateSignature(int BuffID, int SkillID, bool IsExist, Actor* Causer);// 0x446e168
	bool HasSkillID(int SkillID);// 0x3a1d458
	bool HasBuff(int BuffID);// 0x3a1d3d8
	BuffConfigSubsystem* GetSubsystem();// 0x3a1d3b0
	STBuff* GetSTBuffByBuffID(int BuffID);// 0x3a1d330
	byte GetRealOwnerRoleSafety();// 0x3a1d300
	BuffInstInfo[] GetBuffInfoByBuffID(int BuffID);// 0x3a1d1f8
	bool GetBuffInfo(int InstID, out BuffInstInfo OutBuff);// 0x3a1d118
	float GetBuffDuration(int InstID, int CauseSkillID);// 0x3a1d054
	float GetBuffDSEndTime(int InstID, int CauseSkillID);// 0x3a1cf90
	BuffInstInfo[] GetAllBuffInfo();// 0x3a1ced0
	void ClearBuffs(bool bClearAll, bool bImmediately);// 0x3a1ce00
	bool ChangeDuration(int InstID, float Duration);// 0x3a1cd3c
	int AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID, int Level);// 0x3a1cba8

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x1c, Size: 720]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x79fea28
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x79fe954
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x79fe7a0
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x79fe6cc
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x79fe5f8
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x79fe524
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x79fe450
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x79fe37c
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x79fe2a8
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x79fe1d4
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x79fe0f8
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x79fe064
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x79fdfd0
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x79fdf3c
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x79fdea8
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x79fde14
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x79fdd80
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x79fdcec
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x79fdc58
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x79fdbc4
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x79fdb30
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x79fda9c
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x79fda08
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x79fd924
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x79fd880
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x79fd764
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x79fd6c0
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x79fd62c
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x79fd590
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x79fd4fc
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x79fd468
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x79fd3d4
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x79fd340
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x79fd2ac
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x79fd1c8
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x79fd01c

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x3c, Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x78, Size: 60]
	<FName,byte> EnumParamMap;//[Offset: 0xb4, Size: 60]
	<FName,int> IntParamMap;//[Offset: 0xf0, Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x12c, Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x168, Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1a4, Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1e0, Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x21c, Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x258, Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x294, Size: 60]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	byte DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 12]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: BuffIncNetArray
	BuffNetArrayUnit[] IncArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BuffNetArrayUnit
	ClientSyncBrief Unit;//[Offset: 0x0, Size: 32]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0, Size: 4]
	byte LayerCount;//[Offset: 0x4, Size: 1]
	byte Level;//[Offset: 0x5, Size: 1]
	int BuffID;//[Offset: 0x8, Size: 4]
	int CauseSkillID;//[Offset: 0xc, Size: 4]
	Actor* CauseActor;//[Offset: 0x10, Size: 4]
	float SyncTime;//[Offset: 0x14, Size: 4]
	float Duration;//[Offset: 0x18, Size: 4]
	float EndTime;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BuffConfigSubsystem.GameInstanceSubsystem.Subsystem.Object
	<int,BuffTableRow> Table;//[Offset: 0x44, Size: 60]
	<FString,class Object> BuffClassMap;//[Offset: 0x80, Size: 60]

--------------------------------
Class: BuffTableRow
	int BuffID;//[Offset: 0x0, Size: 4]
	int MaxLayer;//[Offset: 0x4, Size: 4]
	float Duration;//[Offset: 0x8, Size: 4]
	FString BuffType;//[Offset: 0xc, Size: 12]
	FString Name;//[Offset: 0x18, Size: 12]
	FString IconPath;//[Offset: 0x24, Size: 12]
	FString BPPath;//[Offset: 0x30, Size: 12]
	FString Desc;//[Offset: 0x3c, Size: 12]
	<FString> MutexBuffTypes;//[Offset: 0x48, Size: 60]
	<FString> ExcludeBuffTypes;//[Offset: 0x84, Size: 60]
	enum RefreshType;//[Offset: 0xc0, Size: 1]
	enum ReActionType;//[Offset: 0xc1, Size: 1]
	enum TargetType;//[Offset: 0xc2, Size: 1]
	enum MultiCauserHanleType;//[Offset: 0xc3, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0xc4, Size: 1]
	enum ClientSyncType;//[Offset: 0xc5, Size: 1]
	float ClientSyncInterval;//[Offset: 0xc8, Size: 4]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool IsOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool bNeedShowInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	int LocalizeDescID;//[Offset: 0xd0, Size: 4]
	int TipsOnAddBuff;//[Offset: 0xd4, Size: 4]
	int ModeOpen;//[Offset: 0xd8, Size: 4]
	FString ModeStrings;//[Offset: 0xdc, Size: 12]

--------------------------------
Class: STBuff.Object
	int BuffID;//[Offset: 0x20, Size: 4]
	FString BuffName;//[Offset: 0x24, Size: 12]
	FString Desc;//[Offset: 0x30, Size: 12]
	int LayerMax;//[Offset: 0x3c, Size: 4]
	int InitialLayerCount;//[Offset: 0x40, Size: 4]
	float Duration;//[Offset: 0x44, Size: 4]
	float ClientSyncInterval;//[Offset: 0x48, Size: 4]
	enum ClientSyncType;//[Offset: 0x4c, Size: 1]
	enum TargetType;//[Offset: 0x4d, Size: 1]
	enum RefreshType;//[Offset: 0x4e, Size: 1]
	enum ReActionType;//[Offset: 0x4f, Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x50, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x51, Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool RemoveAllLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	STBuffAction*[] Actions;//[Offset: 0x54, Size: 12]
	bool bNeedShowBuffInBuffList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int LocalizeDescID;//[Offset: 0x64, Size: 4]
	FString IconPath;//[Offset: 0x68, Size: 12]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	int TipsOnAddBuff;//[Offset: 0x78, Size: 4]
	DataProviderBase*[] DataProviders;//[Offset: 0x7c, Size: 12]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x88, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0xc4, Size: 4]
	void Tick(ActorComponent* BuffSystemComponent, int InstID, float DetalTime, float TimeSeconds);// 0x3a19b7c
	void ResetActionExecute(ActorComponent* BuffSystemComponent, int InstID);// 0x3a19ac0
	void Initialize(ActorComponent* BuffSystemComponent, int InstID);// 0x3a19a04
	void End(ActorComponent* BuffSystemComponent, int InstID);// 0x3a19948
	void Destroy(ActorComponent* BuffSystemComponent, int InstID);// 0x3a1988c
	bool CopyActions();// 0x3a19864
	void ChangeNotify(ActorComponent* BuffSystemComponent, int InstID);// 0x3a197a8

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x20, Size: 4]
	int ArrayIndex;//[Offset: 0x24, Size: 4]
	STBuff* OwnerBuff;//[Offset: 0x28, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x30, Size: 4]
	int CurInstID;//[Offset: 0x34, Size: 4]
	void Tick(ActorComponent* BuffSystemComponent, int InstID, float DetalTime);// 0x3a1a74c
	void SetEnabled(ActorComponent* BuffSystemComponent, int InstID, bool Enabled);// 0x3a1a644
	void ResetExecute(ActorComponent* BuffSystemComponent, int InstID, bool IgnoreEnd);// 0x3a1a53c
	void OnTick(float DetalTime);// 0x368db2c
	void OnResetExecute(bool IgnoreEnd);// 0x368fbb0
	void OnInitialize();// 0x35c7c6c
	void OnExecute();// 0x3381384
	void OnEnd();// 0x33886a8
	void OnDestroy();// 0x341f4c8
	void OnCheckLinkActionEnabled();// 0x3387c94
	void OnChangeNotify();// 0x3381458
	void Initialize(ActorComponent* BuffSystemComponent, int InstID);// 0x3a1a480
	byte GetRealOwnerRole();// 0x391d6ac
	Actor* GetOwner();// 0x36918c0
	Actor* GetCauser();// 0x3a1a458
	void End(ActorComponent* BuffSystemComponent, int InstID);// 0x3a1a39c
	void Destroy(ActorComponent* BuffSystemComponent, int InstID);// 0x3a1a2e0
	STBuffAction* CopyAction(Object* Outer);// 0x3a1a258
	void CheckLinkActionEnabled(ActorComponent* BuffSystemComponent, int InstID);// 0x3a1a19c
	void ChangeNotify(ActorComponent* BuffSystemComponent, int InstID);// 0x3a1a0e0

--------------------------------
Class: DataProviderBase.Object

--------------------------------
Class: BuffInstInfo
	int BuffID;//[Offset: 0x0, Size: 4]
	int InstID;//[Offset: 0x4, Size: 4]
	int CauseSkillID;//[Offset: 0x8, Size: 4]
	byte LayerCount;//[Offset: 0xc, Size: 1]
	float EndTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x3f0, Size: 12]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x3fc, Size: 12]
	delegate OnEndChangeItemAvatar;//[Offset: 0x408, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x414, Size: 12]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	ParticleGroup AppliedParticlesGroup;//[Offset: 0x424, Size: 36]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool CanChangeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x44c, Size: 12]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x45c, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x468, Size: 8]
	FName TailMatSlotName;//[Offset: 0x470, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x478, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x480, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x484, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x488, Size: 4]
	BackpackVehicleAvatarHandle* VehicleAvatarHandle;//[Offset: 0x48c, Size: 4]
	BackpackVehicleAvatarHandle* DefaultVehicleAvatarHandle;//[Offset: 0x490, Size: 4]
	VehicleAvatarPropretyHandle* DefaultPropertyHandle;//[Offset: 0x494, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x498, Size: 4]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	bool ForceLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 1]
	WheeledVehicleMovementComponent* VehicleMovementComponent;//[Offset: 0x4c8, Size: 4]
	bool NeedTickModifyMatParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 1]
	float DownDetectLength;//[Offset: 0x4d0, Size: 4]
	PlayerController* LocalPC;//[Offset: 0x4d4, Size: 8]
	bool HasWelComeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	void WakeUpVehicle();// 0x38af2dc
	void VehicleAvatarPreChangeDelegate__DelegateSignature(int AvatarID);// 0x446e168
	bool TriggerSelectRandomAvatar();// 0x38b87a0
	void PreChangeVehicleBrokenAvatar();// 0x33e1b80
	void PreChangeVehicleAvatar(int InItemID);// 0x351de30
	void PreChangeAvatarFPP();// 0x38b878c
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x344e078
	void OverrideVehiclePhysX();// 0x38b8778
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x446e168
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x38b86f4
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x38b8670
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x38b860c
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x38b85a0
	BackpackVehicleAvatarHandle* GetVehicleAvatarHandle();// 0x38b8584
	FName GetReflectionCubeName_Lobby();// 0x446e168
	FName GetReflectionCubeName();// 0x38b8544
	SoftObjectPath GetItemDefaultSkeletalMeshPath();// 0x38b84b8
	FString GetItemAvatarHandlePath(int ItemID);// 0x446e168
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x446e168
	int GetDefaultAvatarID();// 0x38b8490
	BackpackVehicleAvatarHandle* GetDefaultAvatarHandle();// 0x38b8468
	int GetCurrentAvatarID();// 0x38b8440
	void ExitFPPVehicle();// 0x38b842c
	void EnterFPPVehicle(bool InEnterFPPInVehicle);// 0x38b83ac
	void EndChangeItemAvatarDelegate__DelegateSignature();// 0x446e168
	void DestroyWelcomeLight();// 0x38b8398
	void CreateWelcomeLight();// 0x38b8384
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x346d0ac
	void ClearVehicleLightEffect();// 0x446e168
	void CheckWelcomeLightConditionIsSatisfy(float DeltaTime);// 0x38b830c
	bool CheckIsNeedEnterFPPVehicle();// 0x38b82e4
	bool CheckBrokenMesh();// 0x38b82bc
	bool CheckAvatarChanged();// 0x38b8294
	void CheckAndOpenWelcomeLight();// 0x38b8280
	bool CanPlayerSee();// 0x38b8258
	void AsyncLoadPropertyHandle();// 0x38b8244
	void ApplyReflectionCubemap(MeshComponent* MeshComp);// 0x38b81cc
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x346cd30

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0x17c, Size: 12]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x188, Size: 12]
	SkeletalMesh* SkeletalMeshBroken;//[Offset: 0x198, Size: 40]
	StaticMesh* StaticMeshBroken;//[Offset: 0x1c0, Size: 40]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x1e8, Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x210, Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x238, Size: 12]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x244, Size: 60]
	ParticleAsset[] ShowParticles;//[Offset: 0x280, Size: 12]
	ParticleSystem* ExplosionParticle;//[Offset: 0x290, Size: 40]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x2b8, Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x2e0, Size: 40]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x308, Size: 60]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	VehCharAnimDataWrapper[] VehCharAnimData;//[Offset: 0x348, Size: 12]
	class AnimInstance* VehicleAnim;//[Offset: 0x358, Size: 40]
	VehicleMatParamModifyCfg[] MatModifyByVelocityCfg;//[Offset: 0x380, Size: 12]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	VehDecalCfg DecalCfg;//[Offset: 0x390, Size: 120]

--------------------------------
Class: VehCharAnimDataWrapper
	FName AnimCompTag;//[Offset: 0x0, Size: 8]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: VehicleMatParamModifyCfg
	FName ParamName;//[Offset: 0x0, Size: 8]
	enum ParamType;//[Offset: 0x8, Size: 1]
	enum Usage;//[Offset: 0x9, Size: 1]
	RuntimeFloatCurve ParamModifyCurve;//[Offset: 0xc, Size: 88]
	enum TargetType;//[Offset: 0x64, Size: 1]
	CurveVector* VectorCurve;//[Offset: 0x68, Size: 4]

--------------------------------
Class: VehDecalCfg
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float NeedParkTime;//[Offset: 0x4, Size: 4]
	MaterialInterface* DecalMaterial;//[Offset: 0x8, Size: 40]
	Texture* DecalTexture;//[Offset: 0x30, Size: 40]
	Vector2D UVScale;//[Offset: 0x58, Size: 8]
	Vector2D UVOffset;//[Offset: 0x60, Size: 8]
	Vector DecalSize;//[Offset: 0x68, Size: 12]

--------------------------------
Class: VehicleAvatarPropretyHandle.Object
	int AvatarID;//[Offset: 0x20, Size: 4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x28, Size: 304]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0x158, Size: 40]

--------------------------------
Class: VehicleAvatarProperty
	SkeletalMesh* TPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* FPPMesh;//[Offset: 0x28, Size: 40]
	class AnimInstance* AssetAnimInstanceClass;//[Offset: 0x50, Size: 40]
	WheelSetup[] WheelSetups;//[Offset: 0x78, Size: 12]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x84, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x90, Size: 12]
	VehicleTransmissionData GearSetup;//[Offset: 0x9c, Size: 40]
	Vector CenterOfMassOffset;//[Offset: 0xc4, Size: 12]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0xd0, Size: 96]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c, Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	Vector Offset;//[Offset: 0x24, Size: 12]
	float ShapeRadius;//[Offset: 0x30, Size: 4]
	float ShapeWidth;//[Offset: 0x34, Size: 4]
	float Mass;//[Offset: 0x38, Size: 4]
	float DampingRate;//[Offset: 0x3c, Size: 4]
	float SteerAngle;//[Offset: 0x40, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	TireType* TireType;//[Offset: 0x48, Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c, Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50, Size: 4]
	float LatStiffValue;//[Offset: 0x54, Size: 4]
	float LongStiffValue;//[Offset: 0x58, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c, Size: 4]
	byte SweepType;//[Offset: 0x70, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c, Size: 4]
	int WheelIndex;//[Offset: 0x80, Size: 4]
	float DebugLongSlip;//[Offset: 0x84, Size: 4]
	float DebugLatSlip;//[Offset: 0x88, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c, Size: 4]
	float DebugWheelTorque;//[Offset: 0x94, Size: 4]
	float DebugLongForce;//[Offset: 0x98, Size: 4]
	float DebugLatForce;//[Offset: 0x9c, Size: 4]
	Vector Location;//[Offset: 0xa0, Size: 12]
	Vector OldLocation;//[Offset: 0xac, Size: 12]
	Vector Velocity;//[Offset: 0xb8, Size: 12]
	bool IsInAir();// 0x7b0c034
	float GetSuspensionOffset();// 0x7b0c00c
	float GetSteerAngle();// 0x7b0bfe4
	float GetRotationAngle();// 0x7b0bfbc

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24, Size: 12]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x12c, Size: 12]
	float Mass;//[Offset: 0x138, Size: 4]
	float DragCoefficient;//[Offset: 0x13c, Size: 4]
	float ChassisWidth;//[Offset: 0x140, Size: 4]
	float ChassisHeight;//[Offset: 0x144, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	bool bClientSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	bool bServerSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 1]
	float DragArea;//[Offset: 0x14c, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x150, Size: 4]
	float MaxEngineRPM;//[Offset: 0x154, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x158, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x15c, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x168, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x16c, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x170, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x174, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x178, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x17c, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x180, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x184, Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1a0, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1a4, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a8, Size: 4]
	float RVOSteeringStep;//[Offset: 0x1ac, Size: 4]
	float RVOThrottleStep;//[Offset: 0x1b0, Size: 4]
	int AvoidanceUID;//[Offset: 0x1b4, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1b8, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1bc, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c0, Size: 4]
	float AvoidanceWeight;//[Offset: 0x1c4, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1c8, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1e0, Size: 20]
	float RawSteeringInput;//[Offset: 0x1f8, Size: 4]
	float RawThrottleInput;//[Offset: 0x1fc, Size: 4]
	float RawBrakeInput;//[Offset: 0x200, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 1]
	float SteeringInput;//[Offset: 0x208, Size: 4]
	float ThrottleInput;//[Offset: 0x20c, Size: 4]
	float BrakeInput;//[Offset: 0x210, Size: 4]
	float HandbrakeInput;//[Offset: 0x214, Size: 4]
	float IdleBrakeInput;//[Offset: 0x218, Size: 4]
	float StopThreshold;//[Offset: 0x21c, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x220, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x224, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x22c, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x234, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x23c, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x7b0d3a4
	void SetThrottleInput(float Throttle);// 0x366ec08
	void SetTargetGear(int GearNum, bool bImmediate);// 0x7b0d2e0
	void SetSteeringInput(float Steering);// 0x7b0d260
	void SetPhysActive(bool bActive);// 0x60f077c
	void SetHandbrakeInput(bool bNewHandbrake);// 0x7b0d1d8
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x7b0d154
	void SetGroupsToIgnore(int GroupFlags);// 0x7b0d0dc
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x7b0d058
	void SetGroupsToAvoid(int GroupFlags);// 0x7b0cfe0
	void SetGearUp(bool bNewGearUp);// 0x7b0cf60
	void SetGearDown(bool bNewGearDown);// 0x7b0cee0
	void SetBrakeInput(float Brake);// 0x7b0ce60
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x7b0cddc
	void SetAvoidanceGroup(int GroupFlags);// 0x7b0cd64
	void SetAvoidanceEnabled(bool bEnable);// 0x7b0cce4
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x7b0cb00
	bool IsSuspensionSweep();// 0x33e3348
	void GetWheelShapeIndices(out int[] OutWheelShapeIndices);// 0x7b0c9f0
	bool GetUseAutoGears();// 0x7b0c9c8
	int GetTargetGear();// 0x7b0c9a0
	float GetForwardSpeed();// 0x7b0c978
	float GetEngineRotationSpeed();// 0x7b0c950
	float GetEngineMaxRotationSpeed();// 0x7b0c928
	int GetCurrentGear();// 0x7b0c900
	void EnableVehicleWheel(int WheelIndex, bool InEnable);// 0x7b0c83c
	void EnableVehicleSimulation(bool InEnable);// 0x7b0c7bc

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandbrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName TireBoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20, Size: 4]
	float ClutchStrength;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleNeutralThrottleConfig
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum DifferentialType;//[Offset: 0x1, Size: 1]
	float CanNeutralThrottleMinSpeed;//[Offset: 0x4, Size: 4]
	float NeutralThrottleToMaxRPMSeconds;//[Offset: 0x8, Size: 4]
	float NeutralThrottleDecelSeconds;//[Offset: 0xc, Size: 4]
	float WheelRPMOverEngineRPMRate;//[Offset: 0x10, Size: 4]
	AkAudioEvent* FrictionAudio;//[Offset: 0x18, Size: 40]
	Vector CameraOffset;//[Offset: 0x40, Size: 12]
	float AccelCameraOffsetSeconds;//[Offset: 0x4c, Size: 4]
	float DecelCameraOffsetSeconds;//[Offset: 0x50, Size: 4]
	class CameraShake* CameraShake;//[Offset: 0x54, Size: 4]
	float CameraShakeDelay;//[Offset: 0x58, Size: 4]
	STVehicleWheelSlipDustConfig* DustConfig;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: STVehicleWheelSlipDustConfig.DataAsset.Object
	STVehicleSlipWheelDust[] SlipWheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleSlipWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	STVehicleSingleWheelFx[] WheelFx;//[Offset: 0x4, Size: 12]

--------------------------------
Class: STVehicleSingleWheelFx
	enum Wheel;//[Offset: 0x0, Size: 1]
	ParticleSystem* WheelFx;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 1]
	int MasterCompLODLevel;//[Offset: 0x6d4, Size: 4]
	int VehicleSkinID;//[Offset: 0x6d8, Size: 4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x6e0, Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x708, Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x730, Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x73c, Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x748, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x754, Size: 12]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x760, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x770, Size: 8]
	FName TailMatSlotName;//[Offset: 0x778, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x780, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x788, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x78c, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x790, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x794, Size: 4]
	void WakeUpVehicle();// 0x38af2dc
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x38af264
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x342a9dc
	void SetVehicleAvatarNormalMode();// 0x38af250
	void SetVehicleAvatarFPPMode();// 0x38af23c
	void SetVehicleAvatarBroken();// 0x38af228
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x342a424
	void SetMasterBaseMeshPath(FString InPath);// 0x38af16c
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x38af0b0
	void ResetAdvanceVehicleSkinID();// 0x38af094
	void RemoveAllEquippedStyle();// 0x38af080
	bool ProcessHandleUnequip(enum InSlotType);// 0x38af000
	bool ProcessHandleEquip(enum InSlotType);// 0x38aef80
	void PreProcessBeforeLoadMesh();// 0x342983c
	void PostProcessAfterLoadMesh();// 0x3429820
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x38aef08
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x38aee90
	void OverrideVehiclePhysX();// 0x38aee7c
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x446e168
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x446e168
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x446e168
	void OnRep_BodySlotStateChanged();// 0x3429710
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x446e168
	bool IsValidAvatar();// 0x38aee54
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x38aed78
	bool IsAvatarFPPMode();// 0x38aed50
	bool IsAvatarBroken();// 0x38aed28
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x366e240
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x366e1b8
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x38aeca0
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x38aec18
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x38aeb0c
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x38ae9b4
	void InitMasterComponent();// 0x38ae9a0
	void Initialize();// 0x3428000
	void InitialAvatarParam();// 0x3365b48
	int HasStyleEquipped(int InStyleID);// 0x38ae920
	int HasEquippedSameStyle(int InStyleID);// 0x38ae8a0
	bool HandleUnequipStyle(int InStyleID);// 0x38ae820
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x366e0f4
	bool HandleEquipStyle(int InStyleID);// 0x38ae7a0
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x38ae778
	MeshComponent* GetVehicleBodyMeshComp();// 0x38ae750
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x3427688
	FName GetReflectionCubeName_Lobby();// 0x446e168
	FName GetReflectionCubeName();// 0x38ae710
	bool CanBeMeshMerge(int SlotID);// 0x38ae690
	void ApplyReflectionCubemap(MeshComponent* MeshComp, ItemHandleBase* InItemHandle);// 0x38ae5d4

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0, Size: 1]
	int StyleValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x474, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x480, Size: 12]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x48c, Size: 12]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x3917b0c
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x3917a94
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x3917a0c
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x3917950
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x3917710
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x39174fc
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x3917474
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x39173f4
	void OnRep_CurrentWeaponReplicated();// 0x337f630
	void OnReconnectOnServer();// 0x343911c
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x391737c
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x3917230
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x39171b8
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x3917108
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x391704c
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x3916fd4
	void DelayFire(float DelayTime, byte ShootMode);// 0x3916f10

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xf4, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x130, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x138, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x140, Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x17c, Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x1b8, Size: 4]
	bool ShowMainWeaponModelOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	FName CurUseWeaponLogicSocket;//[Offset: 0x1c0, Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x1c8, Size: 8]
	FName NextUseWeaponLogicSocket;//[Offset: 0x1d0, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x1e0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x1e8, Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 1]
	float ResyncTimeBias;//[Offset: 0x1f4, Size: 4]
	float NextResyncTimestamp;//[Offset: 0x1f8, Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x200, Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x20c, Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x218, Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x224, Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x230, Size: 12]
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x23c, Size: 12]
	delegate WeaponSystemAttachDataChangedDelegate;//[Offset: 0x248, Size: 12]
	delegate NextUseWeaponChangedDelegate;//[Offset: 0x260, Size: 12]
	delegate EquipVehicleShootWeaponDelegate;//[Offset: 0x26c, Size: 12]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x278, Size: 60]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x2b4, Size: 12]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x2c4, Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x2d0, Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x2e0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x318, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x350, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x388, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x3c0, Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x3fc, Size: 4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x400, Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x404, Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x408, Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x40c, Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x43c, Size: 4]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x446e168
	void WeaponSystemAttachDataChangedDelegate__DelegateSignature();// 0x446e168
	void UpdateOwnerClientCreateWeapon();// 0x391b9bc
	void TickHideWeapon();// 0x391b9a8
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x391b8e4
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x391b8d0
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x446e168
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x39174fc
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x446e168
	void SetNextUseWeaponSlot(byte Slot);// 0x391b858
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x391b794
	void RemoveWeaponInInventory(STExtraWeapon* Weapon);// 0x391b71c
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x391b6a4
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param);// 0x391b5bc
	int OverrideShootWeaponInitClip__DelegateSignature(int nWeaponSlot, int nSpecificID);// 0x446e168
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x391b5a8
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x391b594
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x391b580
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x391b56c
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x391b558
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x391b4e0
	void OnRep_NextUseWeaponLogicSocket();// 0x391b4cc
	void OnRep_CurrentWeaponReplicated();// 0x337f630
	void OnRep_CurrentWeaponLogicSocket();// 0x391b4b8
	void OnRep_CurrentShieldWeaponReplicated();// 0x391b4a4
	void OnReconnectOnServer();// 0x343911c
	void OnReconnectOnClient();// 0x3439100
	void NextUseWeaponChangedDelegate__DelegateSignature();// 0x446e168
	void LogInventoryDataInfo();// 0x391b490
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x391b380
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x3917108
	void LocalForceFinishSwitchWeapon();// 0x391b36c
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x446e168
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x391b358
	bool LocalDestroyWeapon(FName SocketName, bool bEnableBroadcast);// 0x391b27c
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x391b268
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x446e168
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x391b240
	bool IsCreatingWeaponOnServer();// 0x391b20c
	bool IsCreatingWeaponOnClient();// 0x391b1e4
	void HideAllWeapon(bool Hidden, byte HideMask, STExtraWeapon* IgnoreWeapon);// 0x391b0d8
	bool HasReconnectWeapon();// 0x391b0b0
	void HandleGetWeaponFinished(byte Slot);// 0x363f3d8
	byte GetWeaponSlotInInventory(STExtraWeapon* Weapon);// 0x391b030
	FName GetWeaponAttachSocketFromLogicSocket(FName LogicSocket, STExtraWeapon* BackupWeapon);// 0x391af5c
	byte GetSlotOfMatchState(byte State);// 0x391aedc
	FName GetShieldWeaponSlot();// 0x391ae9c
	STExtraWeapon* GetShieldWeapon();// 0x391ae74
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x391adf4
	byte GetNextUseWeaponSlot();// 0x391adcc
	FName GetLogicSocketSlotByLogicSocketAssociationType(int LogicSocketAssociationType);// 0x391ad44
	FName GetLogicSocketBySlot(byte Slot);// 0x391acbc
	int GetLogicSocketAssociationTypeLogicSocket(FName LogicSocket);// 0x391ac3c
	STExtraWeapon* GetLastUsedWeapon();// 0x391ac0c
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x391ab8c
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x391ab0c
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x391aa8c
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x391a9fc
	STExtraWeapon* GetCurrentUsingWeapon();// 0x391a9d4
	byte GetCurrentUsingPropSlot();// 0x391a9ac
	FName GetCurrentUsingLogicSocketOnServer();// 0x391a96c
	FName GetCurrentUsingLogicSocket();// 0x391a96c
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x347a1a8
	int GetBagLevel();// 0x337d090
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x391a85c
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x391a74c
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x391a738
	void EquipVehicleShootWeaponDelegate__DelegateSignature(bool bEquip);// 0x446e168
	void EnableAllBroadcast(bool bEnable);// 0x391a6bc
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x391a5f8
	void DebugReconnectToClientOnServer();// 0x391a5e4
	void DebugDisconnetToServerOnClient();// 0x391a5d0
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x446e168
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x446e168

--------------------------------
Class: WeaponCreateInstance
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int SyncTicket;//[Offset: 0x18, Size: 4]
	int CreateFrameCount;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	int BagLevel;//[Offset: 0x34, Size: 4]

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 4]
	enum TargetEvent;//[Offset: 0x4, Size: 1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 24]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum[] ForceExitPawnStateList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 104]
	STExtraWeapon* Weapon;//[Offset: 0x68, Size: 4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 4]
	FName WeaponSocket;//[Offset: 0x8, Size: 8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 4]
	int WeaponTypeID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: EffectComponent.ActorComponent.Object
	delegate EffectGraphChangeDelegate;//[Offset: 0x13c, Size: 12]
	bool NeedWaitStartFireRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x3486ce8
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x3486ac4
	void S2A_EndEffectGraph(int UId);// 0x33323a0
	int GetGraphsNum();// 0x3486aa0
	void C2S_SyncWeaponBulletNum(Actor* WeaponActor, int ClientLastFireID, uint32 ClipID, BulletInClip InCurBulletInClip);// 0x3486760
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x34864f4

--------------------------------
Class: VehicleAIComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x14c, Size: 12]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x158, Size: 12]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x198, Size: 4]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x19c, Size: 4]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x1a0, Size: 44]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x1d0, Size: 4]
	float CheckAllowableDistanceInter;//[Offset: 0x1d4, Size: 4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x1d8, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x1e4, Size: 12]
	void StopMoveByHandrake();// 0x38b355c
	void StopAutoDriving();// 0x38b3548
	bool StartAutoDriving();// 0x38b3520
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x38b3474
	void OnRep_AutoDriver_AINavStateData();// 0x38b3460
	bool IsReachDest();// 0x38b3438
	bool IsAutoDriving();// 0x38b3410
	bool HasAutoDriveTarget();// 0x38b33e8
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x38b33c0
	STExtraVehicleAIController* GetVehicleAIController();// 0x38b3398
	int GetCurrentTargetWaypointIdx();// 0x38b3370
	Vector GetAutoDriveTarget();// 0x38b3328
	void EndAutoDriving();// 0x38b3314
	void ClearAutoDriveTarget();// 0x38b3300
	bool CanAutoDrivingNoDriver();// 0x38b32d8
	bool CanAutoDriving();// 0x38b32b0
	bool AllowableDistanceAutoDriving(bool CheckDriveTarget);// 0x38b3228

--------------------------------
Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x3b8, Size: 8]
	FName AIPawnTag;//[Offset: 0x3c0, Size: 8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x3c8, Size: 4]
	VehicleAIComponent* VehicleAIComp;//[Offset: 0x3cc, Size: 4]
	void StandaloneSetBTRun(bool runBT);// 0x3806f58
	void StandaloneRePosses(STExtraWheeledVehicle* Vehicle, bool restartBT);// 0x3806e94
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x3806e1c
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x3806df4
	VehicleAIComponent* GetVehicleAIComp();// 0x3806dcc

--------------------------------
Class: STExtraVehicleAIManager.Actor.Object
	delegate OnPostVehicleBehaviorInit;//[Offset: 0x308, Size: 12]
	bool bOnlySpawnInSafetyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bQueueSpawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	DataTable* VehicleSpawnDataTable;//[Offset: 0x318, Size: 40]
	FName AIPawnTag;//[Offset: 0x340, Size: 8]
	int MaxConcurrentVehicles;//[Offset: 0x348, Size: 4]
	int MaxVehiclesPerGame;//[Offset: 0x34c, Size: 4]
	float SpawnPointCooldown;//[Offset: 0x354, Size: 4]
	FName CurrentPathKeyName;//[Offset: 0x358, Size: 8]
	FName CurrentPathInputKeyKeyName;//[Offset: 0x360, Size: 8]
	FName PreviousPathInputKeyKeyName;//[Offset: 0x368, Size: 8]
	FName IsPathingInReverseKeyName;//[Offset: 0x370, Size: 8]
	FName IsStoppedKeyName;//[Offset: 0x378, Size: 8]
	FName IsDebugForceStoppedKeyName;//[Offset: 0x380, Size: 8]
	enum AvoidanceMode;//[Offset: 0x388, Size: 1]
	float InitRetryDelay;//[Offset: 0x38c, Size: 4]
	int MaxInitRetries;//[Offset: 0x390, Size: 4]
	QueuedVehicleSpawn[] QueuedVehicleSpawns;//[Offset: 0x3a0, Size: 12]
	STExtraVehicleAISpawner*[] VehicleSpawns;//[Offset: 0x3ac, Size: 12]
	STExtraAIWaypointSegment*[] VehiclePaths;//[Offset: 0x3b8, Size: 12]
	<PathPoint,bool> PathPointPlayZoneStatus;//[Offset: 0x3c4, Size: 60]
	<PathPoint,PathInputPlayZoneDistanceQuery> PathPointPlayZoneDistances;//[Offset: 0x400, Size: 60]
	<STExtraVehicleAISpawner*,float> LastVehicleSpawnTimes;//[Offset: 0x43c, Size: 60]
	<FString,float> AllVehiclesDestroyedTimeMap;//[Offset: 0x478, Size: 60]
	float PreviousMatchTime;//[Offset: 0x4b4, Size: 4]
	<FName,Object*> CacheUObjectMap;//[Offset: 0x4b8, Size: 60]
	<FString,ActiveVehicleList> ActiveVehiclesMap;//[Offset: 0x500, Size: 60]
	AutoDriveAIDataRow[] AutoDriveAIADataSet;//[Offset: 0x74c, Size: 12]
	STExtraAIWaypointSegment* SegmentStart;//[Offset: 0x758, Size: 4]
	int SegmentPointIdxStart;//[Offset: 0x75c, Size: 4]
	STExtraAIWaypointSegment* SegmentEnd;//[Offset: 0x760, Size: 4]
	int SegmentPointIdxEnd;//[Offset: 0x764, Size: 4]
	bool bVehicleAIForcecNoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	bool bVehicleAIShowIconInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 1]
	float fVehicleHPScaleForTowTeam;//[Offset: 0x76c, Size: 4]
	float fVehicleHPScaleForFourTeam;//[Offset: 0x770, Size: 4]
	bool bSyncBuildPathGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 1]
	bool bDebugAllWayPointKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x775, Size: 1]
	bool bDebugAllLinkPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x776, Size: 1]
	bool bDebugFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x777, Size: 1]
	int DSSwitchId_SemiTruck;//[Offset: 0x778, Size: 4]
	int DSSwitchId_ModelY;//[Offset: 0x77c, Size: 4]
	void ProcessPathPlayZoneStatus();// 0x3807d28
	void OnPostVehicleBehaviorInit__DelegateSignature(STExtraVehicleAIController* AIController, Pawn* VehiclePawn);// 0x446e168
	void MulticastDrawPathPointDebug(Vector PointLocation, int ForwardPlayZoneDistance, int ReversePlayZoneDistance);// 0x3807c1c

--------------------------------
Class: QueuedVehicleSpawn
	Guid ID;//[Offset: 0x0, Size: 16]
	FString SpawnId;//[Offset: 0x10, Size: 12]
	class Pawn* VehicleClass;//[Offset: 0x1c, Size: 4]
	BehaviorTree* BehaviorTree;//[Offset: 0x20, Size: 4]
	BlackboardData* BlackboardData;//[Offset: 0x24, Size: 4]
	SpawnFilter SpawnSettings;//[Offset: 0x28, Size: 28]

--------------------------------
Class: SpawnFilter
	bool bLimitSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName[] ValidSpawnPoints;//[Offset: 0x4, Size: 12]
	FName[] InvalidSpawnPoints;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STExtraVehicleAISpawner.Actor.Object
	Guid ID;//[Offset: 0x308, Size: 16]
	FString SpawnTag;//[Offset: 0x318, Size: 12]
	bool bIsSingleUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	SceneComponent* SpawnPoint;//[Offset: 0x328, Size: 4]
	WaypointNetworkConnection StartingPath;//[Offset: 0x32c, Size: 12]
	float InitializeVehicleBehaviorDelay;//[Offset: 0x338, Size: 4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	PathPoint[] spawnWayPaths;//[Offset: 0x340, Size: 12]
	bool bStartEngineWhenSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x350, Size: 4]
	void PostSpawnAI(Pawn* SpawnedVehicle);// 0x3363a24
	void OnSpawnAI(Pawn* SpawnedVehicle);// 0x334c7c8

--------------------------------
Class: WaypointNetworkConnection
	STExtraAIWaypointSegment* ConnectedSegment;//[Offset: 0x0, Size: 4]
	int WaypointIndex;//[Offset: 0x4, Size: 4]
	bool bPathSegmentInReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: STExtraAIWaypointSegment.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bAlwaysDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	SplineComponent* WaypointsSpline;//[Offset: 0x30c, Size: 4]
	<int,WaypointNetworkConnectionList> ConnectedSegments;//[Offset: 0x310, Size: 60]
	<int,NodeTargetSpeedOverrides> TargetSpeedOverridesMap;//[Offset: 0x34c, Size: 60]
	Pawn*[] PawnsOnForwardPath;//[Offset: 0x388, Size: 12]
	Pawn*[] PawnsOnReversePath;//[Offset: 0x394, Size: 12]
	void DrawDebug(float DrawTime);// 0x34fdbfc

--------------------------------
Class: WaypointNetworkConnectionList
	WaypointNetworkConnection[] Connections;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NodeTargetSpeedOverrides
	float ForwardTargetSpeedOverride;//[Offset: 0x0, Size: 4]
	float ForwardMaxSpeedOverride;//[Offset: 0x4, Size: 4]
	float ReverseTargetSpeedOverride;//[Offset: 0x8, Size: 4]
	float ReverseMaxSpeedOverride;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PathPoint
	STExtraAIWaypointSegment* Path;//[Offset: 0x0, Size: 4]
	int InputKey;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PathInputPlayZoneDistanceQuery
	int ForwardDistance;//[Offset: 0x0, Size: 4]
	bool bForwardQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int ReverseDistance;//[Offset: 0x8, Size: 4]
	bool bReverseQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ActiveVehicleList
	Pawn*[] Vehicles;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AutoDriveAIDataRow
	class Pawn* VehicleClass;//[Offset: 0x0, Size: 40]
	BehaviorTree* BehaviorTreeAsset;//[Offset: 0x28, Size: 40]
	BlackboardData* BlackboardDataAsset;//[Offset: 0x50, Size: 40]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0x1044, Size: 4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0x1048, Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0x1058, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0x1080, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0x1088, Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0x1090, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0x1094, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1098, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0x109c, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0x10a0, Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0x10ac, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0x10b0, Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0x10c4, Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x10c8, Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x10cc, Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0x10d0, Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x10d4, Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x10d8, Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x10dc, Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x10e0, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x10e4, Size: 4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x10e8, Size: 92]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x1144, Size: 76]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1190, Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x11a8, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x11ac, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x11d4, Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0x11dc, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x11ec, Size: 4]
	FString LoopSmokeCmpName;//[Offset: 0x11f0, Size: 12]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x11fc, Size: 12]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1208, Size: 1]
	float ExtraBoostFactor;//[Offset: 0x120c, Size: 4]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x1260, Size: 8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x1268, Size: 8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x1270, Size: 8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x1278, Size: 8]
	delegate OnVehicleInputMoveDelegate;//[Offset: 0x1284, Size: 12]
	WheeledNeutralThrottleComponent* NeutralThrottleComp;//[Offset: 0x1290, Size: 4]
	enum RepNeutralThrottleStatus;//[Offset: 0x1294, Size: 1]
	STExtraPlayerCharacter* NeutralThrottleCharacter;//[Offset: 0x1298, Size: 4]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x3825044
	void SetHandBrake(float Rate);// 0x3824fc4
	void SetBoosting(bool bEnalbed);// 0x3824f3c
	void ServerSetNeutralThrottleStatus(enum NewStatus);// 0x3824e88
	void PostLoadFPPMesh();// 0x3810a00
	void PlayerControllerLost();// 0x3824e74
	void OnWheelsLanded();// 0x3824e60
	void OnRep_ReplicatedState();// 0x3365b48
	void OnRep_NeutralThrottleStatus(enum PreStatus);// 0x3824de8
	void OnGearChanged(bool bIsUp);// 0x3824d68
	void MulticastDrawNavigationDebug(float DeltaSeconds, Vector TargetLocation, Vector PathingLocation, Vector PathInputLocation);// 0x3824c10
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x3824a7c
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x38248e8
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x3824694
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x3824440
	void MoveRight(float Rate);// 0x38243c0
	void MoveForward(float Rate);// 0x36de028
	bool IsVehicleInputMove(float InputTolerance);// 0x3824340
	float GetVehicleSpeed();// 0x3824318
	float GetVehicleSlip();// 0x38242e8
	Vector GetRotationInputDir();// 0x36d048c
	float GetBoostFactor();// 0x38242b8
	void BroadcastClientVehicleWheelDestroyEffect();// 0x36de184

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x4, Size: 4]
	ParticleSystem* SlipFx;//[Offset: 0x8, Size: 4]
	ParticleSystem* HubFx;//[Offset: 0xc, Size: 4]
	float minSpeed;//[Offset: 0x10, Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x308, Size: 4]
	float MaxQuadLength;//[Offset: 0x30c, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x310, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x314, Size: 4]
	float DefaultTrailWidth;//[Offset: 0x318, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	float DefaultTrailLength;//[Offset: 0x320, Size: 4]
	float TextureLength;//[Offset: 0x324, Size: 4]
	int USegmentNum;//[Offset: 0x328, Size: 4]
	int CoordU;//[Offset: 0x32c, Size: 4]
	int SlippingCoordU;//[Offset: 0x330, Size: 4]
	int BrokenCoordU;//[Offset: 0x334, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x33c, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x340, Size: 4]
	int AdditionalCoordU;//[Offset: 0x344, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x348, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x34c, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x354, Size: 4]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x3849454
	void StopUpdate();// 0x3849440
	bool IsUpdating();// 0x3849418

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x62c, Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63a, Size: 1]
	enum CollisionMode;//[Offset: 0x63b, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x63c, Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x660, Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x66c, Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x678, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x694, Size: 60]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x6d0, Size: 12]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x793129c
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x793113c
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x7931078
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x7930fb4
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x7930ef0
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x7930d48
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x446e168
	bool IsMeshSectionVisible(int SectionIndex);// 0x7930cc8
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x7930c48
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x7930bc8
	int GetNumSections();// 0x7930ba0
	int GetLastSectionIndex();// 0x7930b78
	int FirstAvailableMeshSectionIndex();// 0x7930b50
	void EndBatchUpdates();// 0x7930b3c
	bool DoesSectionExist(int SectionIndex);// 0x7930abc
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x79304cc
	void CookCollisionNow();// 0x79304b8
	void ClearMeshSection(int SectionIndex);// 0x7930440
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x79303c8
	void ClearCollisionConvexMeshes();// 0x79303b4
	void ClearAllMeshSections();// 0x79303a0
	void ClearAllMeshCollisionSections();// 0x793038c
	void BeginBatchUpdates();// 0x7930370
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x7930214

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	int[] IndexBuffer;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	Box BoundingBox;//[Offset: 0xc, Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector Normal;//[Offset: 0x40, Size: 12]
	enum Type;//[Offset: 0x4c, Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x37c, Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x388, Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x3a4, Size: 4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x3a8, Size: 12]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x3bc, Size: 4]
	<uint32,CachedWheelData> mapCachedWheelData;//[Offset: 0x3fc, Size: 60]
	float MaxRPMLimit;//[Offset: 0x524, Size: 4]
	float TorqueRate;//[Offset: 0x528, Size: 4]
	byte[] SpecialModifyCollisionList;//[Offset: 0x52c, Size: 12]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x538, Size: 12]
	FName RootBodyName;//[Offset: 0x548, Size: 8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool IsInAir_bServerCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool IsInAir_bClientCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	int IsInAir_ShapeIndexToQuery;//[Offset: 0x554, Size: 4]
	float IsInAir_QueryInterval;//[Offset: 0x558, Size: 4]
	float IsInAir_QueryLength;//[Offset: 0x55c, Size: 4]
	delegate OnIsInAirChange;//[Offset: 0x560, Size: 12]
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool DynamicChangeDragCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	float DragCoefficientInAir;//[Offset: 0x578, Size: 4]
	float SmallSpeedIntervalThreshold;//[Offset: 0x588, Size: 4]
	float SmallSpeedThreshold;//[Offset: 0x58c, Size: 4]
	void SetVehicleToRestState();// 0x381a99c
	void SetTransmissionSetup(out const VehicleTransmissionData NewTransmissionSetup);// 0x381a8d0
	void SetSuspensionIgnoreMask(int InIgnoreMask);// 0x381a858
	void SetEngineSetup(out const VehicleEngineData NewEngineSetup);// 0x381a6f0
	void SetDragCoefficient(float InDragCoefficient);// 0x381a670
	void SetDifferentialSetup(out const VehicleDifferential4WData NewDifferentialSetup);// 0x381a5ec
	void SetBoosting(float Rate);// 0x381a56c
	void RefreshBodyCollision();// 0x381a558
	void OnExpoldeStopWheel();// 0x381a544
	void MoveWheelShapeHeight(float Height);// 0x381a4cc
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x381a3cc
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x381a240
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x381a140
	int GetSuspensionIgnoreMask();// 0x381a118
	int GetNumWheelsNotInAir();// 0x381a0f0
	Vector GetLinearVelocity();// 0x381a0a8
	Transform GetCMassLocalPose();// 0x381a048
	void ForceWheelsRotate(float DriveTorque);// 0x3819fd0
	void ClearDestroyedWheel();// 0x3819fbc
	void ChangeDragCoefficientInInAir();// 0x3819fa8

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x270, Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2dc, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x2f8, Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x320, Size: 88]
	float AckermannAccuracy;//[Offset: 0x378, Size: 4]

--------------------------------
Class: CachedWheelData
	bool WheelsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float WheelSuspensionOffset;//[Offset: 0x4, Size: 4]
	PhysicalMaterial* WheelContactMaterial;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 88]
	float MaxRPM;//[Offset: 0x58, Size: 4]
	float MOI;//[Offset: 0x5c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68, Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20, Size: 12]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 4]
	AkAudioEvent* EventStart;//[Offset: 0x4, Size: 4]
	AkAudioEvent* EventStop;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44, Size: 4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]
	int Flag;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WheeledNeutralThrottleComponent.VehicleEffectComponent.VehicleComponent.LuaActorCo.ActorComponent.Object
	delegate NeutralThrottleInit;//[Offset: 0x15c, Size: 12]
	delegate OnNeutralThrottle;//[Offset: 0x168, Size: 12]
	STExtraVehicleSfxLoop NT_WheelFrictionGroundLoop;//[Offset: 0x184, Size: 92]
	STExtraWheeledVehicle* WheeledVehicle;//[Offset: 0x1e0, Size: 4]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0x1e8, Size: 96]
	enum NeutralThrottleStatus;//[Offset: 0x248, Size: 1]
	AkAudioEvent* NT_FrictionAudio;//[Offset: 0x270, Size: 4]
	void StartNeutralThrottle(enum NewStatus);// 0x39269f4
	void NeutralThrottleRelease();// 0x39269e0
	bool IsStartNeutralThrottle();// 0x39269b8
	void HandleVehicleWheelDestory();// 0x39269a4
	void HandleVehicleMove(bool bMove);// 0x3926924
	void HandleSeatOccupiersChanged();// 0x3926910
	void HandleOnDSSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3926810
	float GetSimulateRPM();// 0x39267e8
	bool CanNeutralThrottle();// 0x39267c0
	void CameraShakeInternal();// 0x39267ac

--------------------------------
Class: VehicleEffectComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	void HandleAvatarEquiped();// 0x36ba1e4
	void CreateDynamicMaterialInstance();// 0x3578c50

--------------------------------
Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 4]
	Vector TargetPosition;//[Offset: 0x4, Size: 12]
	Vector StartPosition;//[Offset: 0x10, Size: 12]
	int[] PathWayPoints;//[Offset: 0x1c, Size: 12]
	int PathWayPointNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x308, Size: 4]
	int DecalId;//[Offset: 0x30c, Size: 4]
	int TeamID;//[Offset: 0x310, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x320, Size: 128]
	STExtraPlayerState* OwnerPS;//[Offset: 0x3a0, Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x3a4, Size: 8]
	AkComponent* AkComponent;//[Offset: 0x3ac, Size: 4]
	int PostEventID;//[Offset: 0x3b0, Size: 4]
	void RemoveSelfByParent();// 0x3532414
	void OnRep_DecalInfo();// 0x3532400
	void OnDamageableActorDestroyed(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x353233c

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName SocketName;//[Offset: 0x60, Size: 8]
	enum ParentType;//[Offset: 0x68, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x6c, Size: 8]

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0xea4, Size: 4]
	enum LiveState;//[Offset: 0xea8, Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xeac, Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xeb4, Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0xeb8, Size: 4]
	bool bIsRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebc, Size: 1]
	float PlayerHealth;//[Offset: 0xec0, Size: 4]
	float PlayerHealthMax;//[Offset: 0xec4, Size: 4]
	float PlayerTemperature;//[Offset: 0xec8, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xecc, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xed0, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xee8, Size: 24]
	enum EUAVUseType;//[Offset: 0xf00, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf01, Size: 1]
	enum eCurVehicleType;//[Offset: 0xf02, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xf03, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xf04, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xf10, Size: 12]
	Vector MapMark;//[Offset: 0xf1c, Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf28, Size: 1]
	Vector RestartLocation;//[Offset: 0xf2c, Size: 12]
	Rotator RestartRotate;//[Offset: 0xf38, Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0xf44, Size: 60]
	<int,int> UseWheelMsgMap;//[Offset: 0xf80, Size: 60]
	byte PlayerUseQuickSight;//[Offset: 0xfbc, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0xfbd, Size: 1]
	byte ShowMsgCnt;//[Offset: 0xfbe, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xfbf, Size: 1]
	byte UserCancelCnt;//[Offset: 0xfc0, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xfc1, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xfc4, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xfc8, Size: 4]
	RescueTime RescueTime;//[Offset: 0xfcc, Size: 12]
	int AirDropBoxFirstPickUpNum;//[Offset: 0xff0, Size: 4]
	SyncTeamMatePlayerState[] TeamMatePlayerStateList;//[Offset: 0xff4, Size: 12]
	byte InTeamIndex;//[Offset: 0x1000, Size: 1]
	HistoricalTeammateInfo[] HistoricalTeammateInfoArray;//[Offset: 0x1004, Size: 12]
	HistoricalTeammateInfo[] CurrentNotInTeamHistoricalTeammateInfoArray;//[Offset: 0x1010, Size: 12]
	int PlayerLayerID;//[Offset: 0x1058, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0x105c, Size: 16]
	int Breath;//[Offset: 0x106c, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0x1070, Size: 12]
	float EnegyBuffStage1;//[Offset: 0x107c, Size: 4]
	float EnegyBuffStage2;//[Offset: 0x1080, Size: 4]
	float EnegyBuffStage3;//[Offset: 0x1084, Size: 4]
	float EnegyBuffStage4;//[Offset: 0x1088, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x108c, Size: 4]
	float CurEnegyBuff;//[Offset: 0x1090, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x1094, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x1098, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x109c, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x10a0, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x10a4, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x10a8, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x10ac, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x10b0, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x10b4, Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x10c0, Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cd, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ec, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ed, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0x10f0, Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fc, Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fd, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fe, Size: 1]
	uint32 LastInstigatorEnemyKey;//[Offset: 0x1104, Size: 4]
	int PlayersCountOnPlane;//[Offset: 0x1108, Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0x110c, Size: 12]
	float SingleRoundTotalDamage;//[Offset: 0x1118, Size: 4]
	int ContinuousKillsNum;//[Offset: 0x111c, Size: 4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0x1120, Size: 12]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0x112c, Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0x1138, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x113c, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0x1140, Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1144, Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0x1148, Size: 12]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0x1154, Size: 12]
	int MaxDecalCount;//[Offset: 0x1178, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0x117c, Size: 12]
	float LeanOutL_AimAngle;//[Offset: 0x11dc, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0x11e0, Size: 4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0x11e4, Size: 12]
	int RemainingRevivalTime;//[Offset: 0x11f0, Size: 4]
	int RemainingRevivalCount;//[Offset: 0x11f4, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f8, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f9, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fa, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fb, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fc, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0x1200, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1204, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0x1208, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0x1210, Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0x121c, Size: 12]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x1228, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x1234, Size: 12]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0x1240, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0x124c, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x1258, Size: 12]
	<int> LastMarkInstanceID;//[Offset: 0x1264, Size: 60]
	<int> CurrentMarkInstanceID;//[Offset: 0x12a0, Size: 60]
	<int,MarkSyncData> CurrentMarkInstanceIDMap;//[Offset: 0x12dc, Size: 60]
	<int,MarkSyncData> LastMarkInstanceIDMap;//[Offset: 0x1318, Size: 60]
	float KdValue;//[Offset: 0x1354, Size: 4]
	Vector LastVehicleLocation;//[Offset: 0x136c, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0x1380, Size: 12]
	delegate OnPlayerUnderAttack;//[Offset: 0x138c, Size: 12]
	delegate OnSetPlane;//[Offset: 0x1398, Size: 12]
	Vector[] MapMultiMark;//[Offset: 0x13a4, Size: 12]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ec, Size: 1]
	Vector AirplaneStartLoc;//[Offset: 0x13f0, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x13fc, Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x1408, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x1414, Size: 12]
	Vector LastValidAirplaneCanJumpLoc;//[Offset: 0x1420, Size: 12]
	Vector LastValidAirplaneForceJumpLoc;//[Offset: 0x142c, Size: 12]
	Actor* Plane;//[Offset: 0x1438, Size: 4]
	int FlightNo;//[Offset: 0x143c, Size: 4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1440, Size: 1]
	FName[] CurMapTags;//[Offset: 0x1444, Size: 12]
	FName[] ShowingMapTags;//[Offset: 0x1450, Size: 12]
	delegate OnMapTagsChangedDelegate;//[Offset: 0x145c, Size: 12]
	<uint64> TeammateKillUIDSet;//[Offset: 0x1468, Size: 60]
	uint64 LastKnockOutPlayerUID;//[Offset: 0x14a8, Size: 8]
	void UpdateSelfHealthDataOnServer();// 0x37d88b4
	void UpdateDeliveryData(uint32 InDeliverPlayerKey, byte DeliveryAIType);// 0x37d87f0
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x37d86a0
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x37d8548
	void SetPlayerGiveUp(bool InGiveUp);// 0x37d84c8
	void SetLastValidAirplaneInfo();// 0x37d84b4
	void SetInTeamIndex(int Index);// 0x37d843c
	void SetForceSyncTeammateData(bool IsForCE);// 0x37d83bc
	void SetCurMapTags(const FName[] mapTags);// 0x37d82c8
	void SetAirplaneStopLoc(Vector StopLoc);// 0x37d8248
	void SetAirplaneStartLoc(Vector StarLoc);// 0x37d81c8
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x37d8148
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x37d80c8
	void SaveBuffData();// 0x375e440
	void RPC_OnPlayerUnderAttack();// 0x37d80ac
	void RestoreBuffData();// 0x37d8090
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x37d7eec
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x37d7de4
	void RespondToPawnCanCarryOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x37d7cdc
	void RespondToPawnCanCaptivateOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool bIsBegged);// 0x37d7bd4
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* Param2);// 0x37d7ad4
	void RemovePaintDecal(IdeaDecalActor* DecalActor);// 0x37d7a5c
	void RefreshRevivalState();// 0x37d7a48
	void RefreshFollowMark();// 0x37d7a34
	void RefreshAirplaneRoute();// 0x37d7a20
	void QuickSignClientReceiveMsgForReplay(const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey);// 0x37d7878
	void QuickSignClientDelMsgForReplay(FString MsgID);// 0x37d77b4
	void PlayerStateSetPlane__DelegateSignature(Actor* Plane);// 0x446e168
	int PlayersCountOnMyPlane();// 0x37d778c
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x446e168
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x446e168
	void OnRep_VisualFieldInfo();// 0x37d7778
	void OnRep_UpdateKillMonsterNum();// 0x37d775c
	void OnRep_UID();// 0x37d7740
	void OnRep_TeamMatePlayerStateList();// 0x37d772c
	void OnRep_SingleRoundTotalDamage();// 0x37d7718
	void OnRep_RescueTime();// 0x37d7704
	void OnRep_RemainingRevivalTime();// 0x37d76f0
	void OnRep_RemainingRevivalCount();// 0x446e168
	void OnRep_RankNotify();// 0x37d76dc
	void OnRep_PlayerTemperatureChanged();// 0x37d76c8
	void OnRep_PlayersCountOnPlane();// 0x37d76b4
	void OnRep_PlayerReconnectEvent();// 0x37d76a0
	void OnRep_PlayerName();// 0x334c7ac
	void OnRep_PlayerLostConnectionEvent();// 0x37d768c
	void OnRep_PlayerLiveStateInternal();// 0x37d7678
	void OnRep_PlayerLiveState();// 0x37d765c
	void OnRep_PlayerKillsChange();// 0x37d7640
	void OnRep_PlayerIsFollowing();// 0x37d762c
	void OnRep_PlayerGiveUp();// 0x36b6e28
	void OnRep_PlayerGameOver();// 0x37d7618
	void OnRep_PlayerExitGameEvent();// 0x37d7604
	void OnRep_PlayerAliasShowInfoList();// 0x37d75f0
	void OnRep_Plane();// 0x37d75dc
	void OnRep_MarkSyncData();// 0x37d75c8
	void OnRep_MarkSelfSyncData();// 0x37d75b4
	void OnRep_MapMarkNotify();// 0x37d75a0
	void OnRep_LastVehicleLocation();// 0x37d758c
	void OnRep_IsIDCardCaptured();// 0x37d7578
	void OnRep_InTeamIndex();// 0x37d7564
	void OnRep_HPChanged();// 0x3365b48
	void OnRep_HasRevivalSign();// 0x3429858
	void OnRep_HasEscaped();// 0x37d7550
	void OnRep_CurMapTags();// 0x37d753c
	void OnRep_ChangeRevivalState();// 0x37d7520
	void OnRep_ChangeInRevivingState();// 0x37d750c
	void OnRep_BreathChanged();// 0x37d74f8
	void OnRep_BPS();// 0x37d74e4
	void OnRep_AirplaneStopLoc();// 0x37d74d0
	void OnRep_AirplaneStartLoc();// 0x37d74bc
	void OnRep_AirplaneForceJumpLoc();// 0x37d74a8
	void OnRep_AirplaneCanJumpLoc();// 0x37d7494
	void OnPlayerUnderAttack__DelegateSignature(FString PUID);// 0x446e168
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x446e168
	void OnNewRound();// 0x3612434
	void OnMapTagsChangedDelegate__DelegateSignature(STExtraPlayerState* CurPlayerState);// 0x446e168
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x446e168
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x446e168
	void OnClientVeteranRecruitIndexUpdated();// 0x3429d34
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x361232c
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x3612224
	void LuaReceiveBeginPlay();// 0x37d7478
	void LocalNotifyRescueStateChanged(bool bRescued);// 0x37d73f8
	void Kill(int ScoreNum, Character* VictimPawn);// 0x37d7334
	bool IsTeamMateListContainsPlayer(STExtraPlayerState* InPlayState);// 0x37d72b4
	bool IsSinglePlayer();// 0x37d728c
	bool IsLocalPlayerState();// 0x37d7264
	bool IsInGame();// 0x37d7234
	bool IsInBetrayState();// 0x37d7204
	bool IsAlive();// 0x37d71dc
	void HandleRescueStateChanged();// 0x375e0fc
	uint32 GetUserIDByMemberID(int memberID);// 0x37d7154
	void GetTeamMatePlayerUIDList(out FString[] OutList, bool bIsExcludeMyself);// 0x37d6fc8
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x37d6ea4
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x37d6e24
	STExtraPlayerState* GetTeammatePlayerState(int TeammateIndex);// 0x37d6a64
	int GetTeamMateIndexByName(FString TeammateName);// 0x37d6d60
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x37d6ce0
	int GetTeammateCount();// 0x37d6cb8
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x37d6bf4
	FString GetStringPlayerKey();// 0x37d6b34
	float GetPlayerTemperature();// 0x37d6b0c
	int GetPlayerTeamIndex();// 0x37d6ae4
	STExtraPlayerState* GetPlayerStateByInTeamIndex(const int Index);// 0x37d6a64
	float GetPlayerMaxTemperature();// 0x37d6a3c
	float GetPlayerMaxHealth();// 0x37d6a14
	byte GetPlayerInTeamIndexByPlayerState(STExtraPlayerState* TeammatePlayerState);// 0x37d6994
	byte GetPlayerInTeamIndex();// 0x37d696c
	int GetPlayerIndexInTeam();// 0x37d6944
	float GetPlayerHealthPercent();// 0x37d691c
	float GetPlayerHealth();// 0x37d68f4
	Vector GetPlayerCurLoc();// 0x37d68ac
	STExtraBaseCharacter* GetPlayerCharacter();// 0x37d6884
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x37d67d8
	float GetMaxEnegyBuff();// 0x37d6788
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x37d662c
	Vector GetMapMark3DLocation();// 0x37d65e4
	Vector GetLastValidAirplaneForceJumpLoc();// 0x37d65b4
	Vector GetLastValidAirplaneCanJumpLoc();// 0x37d6584
	int GetHelpRevivalCount();// 0x376cb2c
	Vector GetForceJumpLoc();// 0x37d6554
	Vector GetCanJumpLoc();// 0x37d6524
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x37d6408
	float GetBreathPercentage();// 0x37d63e0
	int GetBountyGold();// 0x446e168
	Vector2D GetAutoParachuteJumpPlaneLoc();// 0x37d63a0
	MarkSyncData[] GetAllSelfMarkData();// 0x37d633c
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x37d6270
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x37d614c
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x37d60a0
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x37d5ecc
	Vector GetAirplaneStopLoc();// 0x37d5e9c
	Vector GetAirplaneStartLoc();// 0x37d5e6c
	Vector2D GetAirplaneForward2D();// 0x37d5e2c
	void ForceNotifyAlertUpdate();// 0x37d5e18
	bool FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x37d5cb8
	void FadeTeammatesMapMark();// 0x37d5ca4
	void DispatchPlayerExitEvent();// 0x360d384
	Vector2D ConverMapMarkTo2D(out const Vector MapMark3D);// 0x37d5c10
	void ClientSyncRoute(Vector StartLoc, Vector StopLoc);// 0x37d5b48
	void ClientDisplayGameTipWithMsgID(int ID, FString Param1, FString Param2);// 0x37d5984
	void ChangeFadeMapMarkDist(float NewDist);// 0x37d5904
	bool CanSelfRevive();// 0x37d58d4
	bool CanRevivalTeammate();// 0x37d58ac
	bool CanBeRevival();// 0x375d5c0
	byte CalculateEnegyStage();// 0x37d5884
	void BPKill(Character* VictimPawn);// 0x37d5804
	void AppendTeamMatePlayerStateList(out STExtraPlayerState*[] InTeamMatePlayerStateList);// 0x37d5738
	void AddOneAssist(int VictimKey);// 0x37d56b8
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x37d55f4
	void AddEnegySafety(float AddVal);// 0x37d557c
	void AddDamager(STExtraBaseCharacter* Damager, int DamageType);// 0x37d54b8
	void AddDamageAmount(Character* VictimPawn, float FinalDamage, bool bHitHead);// 0x37d53a8

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RescueTime
	bool bBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float RescueStartTime;//[Offset: 0x4, Size: 4]
	float RescueExpectedEndTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SyncTeamMatePlayerState
	STExtraPlayerState* TeammatePlayerState;//[Offset: 0x0, Size: 8]
	byte PlayerInTeamIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HistoricalTeammateInfo
	FString Name;//[Offset: 0x0, Size: 12]
	FString UId;//[Offset: 0xc, Size: 12]
	FString OpenID;//[Offset: 0x18, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bIsDeliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	FString OriginalUID;//[Offset: 0x28, Size: 12]
	int InTeamIndex;//[Offset: 0x34, Size: 4]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 52]
	FString PlayerName;//[Offset: 0x34, Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterBuffRecord
	int BuffID;//[Offset: 0x0, Size: 4]
	int CauseSkillID;//[Offset: 0x4, Size: 4]
	int LayerCount;//[Offset: 0x8, Size: 4]
	Actor* Causer;//[Offset: 0xc, Size: 8]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 1]
	enum MapAdded;//[Offset: 0x1, Size: 1]
	byte InstanceID;//[Offset: 0x2, Size: 1]
	int TypeId;//[Offset: 0x4, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x8, Size: 24]
	Vector_NetQuantize Location;//[Offset: 0x20, Size: 12]
	Actor* Actor;//[Offset: 0x2c, Size: 8]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CustomMarkEventData
	enum InWhichMap;//[Offset: 0x0, Size: 1]
	float CreateTime;//[Offset: 0x4, Size: 4]
	int CustomState;//[Offset: 0x8, Size: 4]
	FString CustomString;//[Offset: 0xc, Size: 12]

--------------------------------
Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString PlayerName;//[Offset: 0xc, Size: 12]
	Vector HitPos;//[Offset: 0x18, Size: 12]
	FString ConfigKey;//[Offset: 0x24, Size: 12]
	int audioID;//[Offset: 0x30, Size: 4]
	FString ParamString;//[Offset: 0x34, Size: 12]
	int BindActorGUID;//[Offset: 0x40, Size: 4]
	int RelationID;//[Offset: 0x44, Size: 4]
	uint32 PlayerKey;//[Offset: 0x48, Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x4c, Size: 4]
	enum MsgType;//[Offset: 0x50, Size: 1]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x260, Size: 4]
	float TriggerInterval;//[Offset: 0x264, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x268, Size: 4]
	void OnTriggered();// 0x446e168

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0xd54, Size: 4]
	int ForceLifePeriodTime;//[Offset: 0xd58, Size: 4]
	bool bClientRegionForceClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5c, Size: 1]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5d, Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5e, Size: 1]
	delegate OnDeath;//[Offset: 0xd60, Size: 12]
	float DelayHideDuration;//[Offset: 0xd6c, Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0xd70, Size: 4]
	bool bForcePlayDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd74, Size: 1]
	float DelayHideDurationByHeadShoot;//[Offset: 0xd78, Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0xd7c, Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0xd80, Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0xd84, Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0xd88, Size: 4]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0xd8c, Size: 4]
	class PlayerTombBox* DropTomb;//[Offset: 0xd90, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd94, Size: 1]
	int MonsterSpawnTime;//[Offset: 0xd98, Size: 4]
	int MonsterDeathTime;//[Offset: 0xd9c, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0xda0, Size: 4]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda4, Size: 1]
	float AnimBornLifeSpan;//[Offset: 0xda8, Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdac, Size: 1]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0xdb0, Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0xdb4, Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0xdb8, Size: 4]
	float AnimActiveLifeSpan;//[Offset: 0xdbc, Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0xdd4, Size: 88]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xe2c, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xe30, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xe34, Size: 4]
	float SensedRadius;//[Offset: 0xe38, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xe3c, Size: 4]
	float HeardRadius;//[Offset: 0xe40, Size: 4]
	float EnableAnimOnDSDistanceSq;//[Offset: 0xe44, Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xe48, Size: 4]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0xe4c, Size: 4]
	MobPerceptionController* MobPerceptionController;//[Offset: 0xe50, Size: 4]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0xe54, Size: 4]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0xe58, Size: 4]
	CircleMgrComponent* CircleMgr;//[Offset: 0xe68, Size: 4]
	int SyncAIState;//[Offset: 0xe6c, Size: 4]
	float HitBoxRadius;//[Offset: 0xe74, Size: 4]
	int AIState;//[Offset: 0xe78, Size: 4]
	float HurtAnimTime;//[Offset: 0xe7c, Size: 4]
	float BackAnimPerc;//[Offset: 0xe80, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0xe84, Size: 4]
	delegate OnEnterAIState;//[Offset: 0xe94, Size: 12]
	delegate OnLeaveAIState;//[Offset: 0xea0, Size: 12]
	delegate OnBPEnterAIState;//[Offset: 0xeac, Size: 12]
	delegate OnBPLeaveAIState;//[Offset: 0xeb8, Size: 12]
	delegate OnChangeAnimParam;//[Offset: 0xec4, Size: 12]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0xed0, Size: 12]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0xedc, Size: 12]
	delegate OnCharacterHitPointDelgate;//[Offset: 0xefc, Size: 12]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf08, Size: 1]
	int FlowId;//[Offset: 0xf0c, Size: 4]
	FString MonsterName;//[Offset: 0xf10, Size: 12]
	FString MonsterNameID;//[Offset: 0xf1c, Size: 12]
	int MonsterSyncID;//[Offset: 0xf28, Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2c, Size: 1]
	int Gold;//[Offset: 0xf30, Size: 4]
	int SuperGold;//[Offset: 0xf34, Size: 4]
	int[] BornSkill;//[Offset: 0xf38, Size: 12]
	int[] AloneSkillIdList;//[Offset: 0xf44, Size: 12]
	int HealthBarCount;//[Offset: 0xf50, Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf54, Size: 1]
	int NeedSendAttackFlow;//[Offset: 0xf58, Size: 4]
	float TakeDamageScale;//[Offset: 0xf5c, Size: 4]
	float DamageScale;//[Offset: 0xf60, Size: 4]
	Actor* AttackTarget;//[Offset: 0xf64, Size: 8]
	int[] DecalIndexArray;//[Offset: 0xf6c, Size: 12]
	<byte,ParticleSystem*> ImpactFXMap;//[Offset: 0xf78, Size: 60]
	<byte,AkAudioEvent*> ImpactSoundMap;//[Offset: 0xfb4, Size: 60]
	byte HitPartJudgment;//[Offset: 0xff0, Size: 1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xff4, Size: 60]
	BodyTypeDef StandBodyDef;//[Offset: 0x1030, Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0x1038, Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0x103c, Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0x1040, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0x1044, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0x1048, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0x104c, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0x1050, Size: 4]
	bool bMobIgnoreCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1054, Size: 1]
	float[] CircleDamageRate;//[Offset: 0x1058, Size: 12]
	int ObjectPoolSize;//[Offset: 0x1064, Size: 4]
	int LifePeriodTime;//[Offset: 0x1068, Size: 4]
	float KilledDisCircleEdge;//[Offset: 0x106c, Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0x1070, Size: 4]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1074, Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0x1078, Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107c, Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 1]
	int RageLevel;//[Offset: 0x10a0, Size: 4]
	float AloneRageTimerRate;//[Offset: 0x10ac, Size: 4]
	float ImpluseScale;//[Offset: 0x10b0, Size: 4]
	float ImpluseZScale;//[Offset: 0x10b4, Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8, Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b9, Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0x10bc, Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0x10c0, Size: 4]
	float MinDamageInterval;//[Offset: 0x10c4, Size: 4]
	bool bImpulseBySidesWhenOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c8, Size: 1]
	float MovementTickInterval;//[Offset: 0x10cc, Size: 4]
	float DsActorTickInterval;//[Offset: 0x10d0, Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d4, Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0x10dc, Size: 4]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0x10e0, Size: 4]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0x10e4, Size: 4]
	AkAudioEvent* MonsterRunSound;//[Offset: 0x10e8, Size: 4]
	float NoPathToTargetTimer;//[Offset: 0x10ec, Size: 4]
	enum AnimGroupMask;//[Offset: 0x10f0, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f1, Size: 1]
	bool bEnableDSTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f2, Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f8, Size: 1]
	int ExplodeSkillID;//[Offset: 0x10fc, Size: 4]
	float ExplodeSkillDuration;//[Offset: 0x1100, Size: 4]
	bool bDieAfterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1104, Size: 1]
	bool CloseCollisionForMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1105, Size: 1]
	AkComponent* SoundComp;//[Offset: 0x1108, Size: 4]
	float LagCompensationRecordInterval;//[Offset: 0x11d8, Size: 4]
	float HearRadius;//[Offset: 0x11e0, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0x11e4, Size: 4]
	bool bIgnoreNetRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ec, Size: 1]
	bool bSimulateMovementByCharacterMovementComponentOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ed, Size: 1]
	bool bEnableSimulateSyncSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ee, Size: 1]
	bool bNotifyLuaDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ef, Size: 1]
	UAEMonsterAnimListComponentBase* MonsterAnimListComp;//[Offset: 0x11f0, Size: 4]
	MonsterIdleIndex MonsterIdleIndex;//[Offset: 0x1210, Size: 8]
	delegate OnMonsterSetPlayedIdleIndex;//[Offset: 0x1218, Size: 12]
	bool TestPathSyncToLocation(Vector Location);// 0x37f4858
	bool TestPathSyncToActor(Actor* Actor);// 0x37f47d8
	void StopMovementMode();// 0x33db730
	void StartMovementMode();// 0x33db74c
	void ShowHeadShootDeadEffect();// 0x37f47c4
	void SetReplicateAliveSeconds(bool bReplicate);// 0x37f4744
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x37f46cc
	void ResetCharAnimParam();// 0x37f46b8
	void OnSmoothComponentSnapshotPreReplicate();// 0x37f46a4
	void OnRep_SyncAIState();// 0x37f4690
	void OnRep_ReplicatedMovement();// 0x347ab2c
	void OnRep_RageLevel();// 0x37f467c
	void OnRep_MonsterSyncID();// 0x37f4668
	void OnRep_MonsterNameID();// 0x37f4654
	void OnRep_MonsterIdleIndex();// 0x37f4640
	void OnRep_IsLeftRightMove();// 0x37f4624
	void OnRep_IdleBlendSpaceValue();// 0x37f4610
	void NotifyInitial();// 0x37f45fc
	void MulticastPlayerSoundByID(int SoundID);// 0x37f4548
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x37f4484
	bool IsSameTeam(Pawn* Other);// 0x36f892c
	bool IsInActiveState();// 0x37f445c
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x37f4370
	bool IsCanCopyBone();// 0x37f4348
	bool IsBoss();// 0x37f4320
	bool IsBigBoss();// 0x37f42f8
	bool IsBehemoth();// 0x37f42d0
	void InitCharAnimParam();// 0x37f42bc
	bool HasAIState(enum NewState);// 0x37f423c
	void HandleHitByBullet(Actor* Causer);// 0x37f41c4
	void GotoEarthAndDie();// 0x37f41a8
	Vector GetVelocity();// 0x37f4158
	AkComponent* GetSoundComponent();// 0x37f4130
	Vector GetServerHeadLocation();// 0x37f40e8
	STExtraPlayerController* GetPlayerControllerSafety();// 0x36f61dc
	int GetMonsterType();// 0x37f40cc
	FString GetMonsterName();// 0x37f4004
	float GetHitBoxRadius();// 0x37f3fe8
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x37f3e74
	ExFootIKComponent* GetExFootIKComponent();// 0x37f3e44
	class PlayerTombBox GetDropTomb();// 0x37f3e14
	int GetDeactiveMonsterCount();// 0x37f3dec
	byte GetCurHitPartJugementType();// 0x37f3dc4
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x37f3d9c
	SimpleCharAnimParamList GetAnimParam();// 0x37f3d10
	int GetAliveTimeSeconds();// 0x37f3cf4
	int GetActiveMonsterCount();// 0x37f3ccc
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x37f391c
	void EnterAIState(enum NewState, bool bIsNotify);// 0x37f3858
	void EnableDSAnim(bool bEnable);// 0x37f37d8
	void DisappearOnDeath();// 0x37f37c4
	void DieAfterExplode();// 0x37f37b0
	void DelayHidden();// 0x36f31f0
	void ClearOnDeath(Controller* EventInstigater, out const DamageEvent DamageEvent);// 0x37f36d0
	bool CheckPlayerNeedUpdateAnimation();// 0x37f36a8
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x37f359c
	void ChangeSourceType(byte NewSourceType);// 0x37f3524
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x37f3414
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x37f3304
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f3028
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f2cd0
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f29f4
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f2718
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f23f4
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f2118
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f1e3c
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f1b60
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f1844
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f14ec
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x37f1358
	void BroadcastClientsDebugSpeed(float Speed);// 0x37f12a4
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x37f11f0
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x446e168
	void BPPreRespawned();// 0x37f11d4
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x446e168
	void BPNotifyInitial();// 0x446e168
	void BPNotifyDisappearOnDeath();// 0x446e168
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x446e168
	void BPMonsterInitTableDone();// 0x446e168
	byte BPGetReplicatedMovementMode();// 0x37f11b8
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x37f1044
	bool BP_HasAIState(enum NewState);// 0x37f0fc4
	RoadPointInfo[] BleCallGetRoadPoints();// 0x37f0efc
	bool AllowAIState(enum NewState);// 0x3621530
	void AddWeaponDamageAddition(byte WeaponType);// 0x37f0e84

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0, Size: 12]
	Vector movedir;//[Offset: 0xc, Size: 12]
	byte MovementMode;//[Offset: 0x18, Size: 1]
	Rotator ViewRotation;//[Offset: 0x1c, Size: 12]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector HurtDir;//[Offset: 0x2c, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int RandomAnimID;//[Offset: 0x40, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0x44, Size: 4]
	float AdditiveYaw;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xbc, Size: 56]
	RepSnapshot Snapshot;//[Offset: 0xf4, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x12c, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x130, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x134, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x138, Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x13c, Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x140, Size: 4]
	float FindFloorUpOffset;//[Offset: 0x144, Size: 4]
	float FindFloorDownOffset;//[Offset: 0x148, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x14c, Size: 4]
	bool bUseFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	int CurrentDeviceLevel;//[Offset: 0x154, Size: 4]
	int FindFloorDeviceLevel;//[Offset: 0x158, Size: 4]
	bool bForceRepSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	delegate OnSnapshotPreReplicate;//[Offset: 0x160, Size: 12]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x170, Size: 220]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	bool bOnlyUpdateLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 1]
	bool bOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool bSimulatedProxyOnlyUpdateLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	bool bSimulatedProxyOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 1]
	bool bAutonomousProxyEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 1]
	bool bIsReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x258, Size: 12]
	bool bEnableTurnAnimationNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 1]
	float MoveMaxSpeedWhenTuring;//[Offset: 0x268, Size: 4]
	bool bAutoUpdateVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	float TurnThreshold;//[Offset: 0x294, Size: 4]
	CurveFloat* TurnTimeCurve;//[Offset: 0x298, Size: 4]
	float TurnSpeed;//[Offset: 0x29c, Size: 4]
	void TeleportNextSync();// 0x365981c
	void StopPredict();// 0x3659808
	void SetVelocity(out const Vector Velocity);// 0x3659784
	void SetEnable(bool bInEnable, bool bForceReinit);// 0x36596b4
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x36595b4
	void OnRep_Snapshot();// 0x36595a0
	Vector GetVelocity();// 0x3659558
	bool GetEnable();// 0x365953c
	Vector FindFloor(const Vector InLocation);// 0x36594a8

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 12]
	Rotator_NetQuantize Rotation;//[Offset: 0x10, Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c, Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28, Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: Rotator_NetQuantize.Rotator

--------------------------------
Class: SimulateSyncSmooth
	float LocErrorTolerance;//[Offset: 0x0, Size: 4]
	float RotErrorTolerance;//[Offset: 0x4, Size: 4]
	float MaxPredictMoveTime;//[Offset: 0x8, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0xc, Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x10, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0xbc, Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0xc0, Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0xc4, Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0xc8, Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0xcc, Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0xd0, Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0xd4, Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0xd8, Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0xdc, Size: 4]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0xe0, Size: 4]
	float WallJump_JumpSpeed;//[Offset: 0xe4, Size: 4]
	float WallJump_JumpAngle;//[Offset: 0xe8, Size: 4]
	float WallJump_ZVelocity;//[Offset: 0xec, Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0xf0, Size: 4]
	float Stride_Duration;//[Offset: 0xf4, Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0xf8, Size: 4]
	float Stride_HeightOffset;//[Offset: 0xfc, Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x100, Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x104, Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x108, Size: 4]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x10c, Size: 4]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	int iWallClimbState;//[Offset: 0x114, Size: 4]
	int iWallJumpState;//[Offset: 0x118, Size: 4]
	int iStrideState;//[Offset: 0x11c, Size: 4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x356fb04
	void WallJump(Vector DstLocation);// 0x356fa94
	void WallClimbExit();// 0x356fa80
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x356f978
	void TickWallJump_Turn(float DeltaTime);// 0x356f900
	void TickWallJump(float DeltaTime);// 0x356f888
	void TickWallClimb_Turn(float DeltaTime);// 0x356f810
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x356f798
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x356f720
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x356f6a8
	void TickWallClimb(float DeltaTime);// 0x356f630
	void TickStride_Turn(float DeltaTime);// 0x356f5b8
	void TickStride_Stride(float DeltaTime);// 0x356f540
	void TickStride_MoveToWall(float DeltaTime);// 0x356f4c8
	void TickStride(float DeltaTime);// 0x356f450
	void StrideJump();// 0x356f43c
	void StrideExit();// 0x356f428
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x356f350
	void OnMobDie();// 0x356f33c
	void NotifyClientsWallClimbSyncState(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x356f230
	void NotifyClientsWallClimbStartClimbToStand(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x356f124
	void NotifyClientsStrideState(Vector pos, Rotator Rotator, int nowStrideState);// 0x356f018
	void NotifyClientsStartStride(Vector pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x356edc4
	bool IsInAdvancedMovement();// 0x356ed9c
	int GetWallJumpState();// 0x356ed74
	int GetWallClimbState();// 0x356ed4c
	int GetStrideState();// 0x356ed24
	void BPWallJump(Vector DstLocation);// 0x356ecac
	void BPWallClimb(Vector DstLocation);// 0x356ec34

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0xbc, Size: 4]
	enum[] AcceptableNoiseType;//[Offset: 0xc0, Size: 12]
	enum NoiseAttenuationModel;//[Offset: 0xcc, Size: 1]
	int NoisePoolSize;//[Offset: 0xd0, Size: 4]
	float NoiseRememberTime;//[Offset: 0xd4, Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0xd8, Size: 4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x3571ce8
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x3571bd8
	void OnMobDie();// 0x3571bc4
	void ClearNoisePool();// 0x3571bc4
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x3571a24
	float Attenuation(out AIStimulus Stimulus);// 0x357188c
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x3571670

--------------------------------
Class: NoiseInfo
	enum NoiseType;//[Offset: 0x0, Size: 1]
	Actor* Instigator;//[Offset: 0x4, Size: 8]
	Vector NoiseLocation;//[Offset: 0xc, Size: 12]
	float LoudnessAtStart;//[Offset: 0x18, Size: 4]
	float LoudnessHeard;//[Offset: 0x1c, Size: 4]
	float HeardTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum NoiseType;//[Offset: 0x1, Size: 1]
	float LoudnessHeard;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0xbc, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0xc0, Size: 4]
	float StepHeight;//[Offset: 0xc4, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0xc8, Size: 4]
	float VehicleImpluseScale;//[Offset: 0xcc, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0xd0, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xd4, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x114, Size: 4]
	bool StopSkillSimulate();// 0x37fb290
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x37fb1c4
	void SetVelocity(Vector InVelocity);// 0x37fb154
	void SetSimulatePhysics(bool bInEnabled);// 0x37fb0d8
	void SetEnabled(bool InEnabled);// 0x37fb05c
	void SetCharacterMovementActive(bool _bIsActive);// 0x37fafdc
	bool IsOnGround();// 0x34f23e8
	Vector GetVelocity();// 0x37faf94
	bool FindGround();// 0x37faf6c
	void AddVelocity(Vector InVelocity);// 0x37faefc
	void ActivatePhysics();// 0x37faee8

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0xbc, Size: 1]
	byte Type;//[Offset: 0xbd, Size: 1]
	int TypeId;//[Offset: 0xc0, Size: 4]
	void SetActorVisible(bool bEnable);// 0x33d1724

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float SimulatedCharacterServerTime();// 0x3549cd4
	enum ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* Shooter, out const BulletHitInfoUploadData ShootData);// 0x36133fc

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float KeepStillMinTime;//[Offset: 0x314, Size: 4]
	float StillMaxSpeed;//[Offset: 0x318, Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x31c, Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x328, Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x334, Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x340, Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x34c, Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x358, Size: 12]
	float WeaponOffsetStillScale;//[Offset: 0x364, Size: 4]
	float StandStilDynamicScale;//[Offset: 0x368, Size: 4]
	Vector StandStillBoundBoxExtentPicth;//[Offset: 0x36c, Size: 12]
	Vector StandStillHeadBoundBoxExtentPicth;//[Offset: 0x378, Size: 12]
	Vector CrouchStillBoundBoxExtentPicth;//[Offset: 0x384, Size: 12]
	Vector CrouchStillHeadBoundBoxExtentPicth;//[Offset: 0x390, Size: 12]
	float ShootCornerMinLagTime;//[Offset: 0x39c, Size: 4]
	float ShootCornerMaxDotValue;//[Offset: 0x3a0, Size: 4]
	float ShootCornerMinPingDiff;//[Offset: 0x3a4, Size: 4]
	float ShootCornerMinDisDiff;//[Offset: 0x3a8, Size: 4]
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x3ac, Size: 44]
	void PostServerMoveDelegate();// 0x3548ca0

--------------------------------
Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0, Size: 4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAEMonsterAnimListComponentBase.UAEAnimListComponentBase.ActorComponent.Object
	bool bCacheAnimAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 1]
	MonsterAnimPhaseData[] MonsterAnimDatas;//[Offset: 0x174, Size: 12]
	<byte,AnimationAsset*> MonsterAnimDatasMap;//[Offset: 0x180, Size: 60]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom1;//[Offset: 0x1bc, Size: 12]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom2;//[Offset: 0x1c8, Size: 12]
	delegate OnAnimLoadedFinished;//[Offset: 0x1d4, Size: 12]
	int RandomAnimID;//[Offset: 0x1e0, Size: 4]
	void OnAsyncLoadingFinished(MonsterAsyncloadAnimParams loadAnimParams);// 0x3859420
	MonsterAnimPhaseData GetMonsterAnimPhaseDataByType(byte PoseType);// 0x3859334
	AnimationAsset* GetMonsterAnimByType(byte PoseType);// 0x38592b4

--------------------------------
Class: MonsterAnimPhaseData
	byte PosType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: MonsterAsyncloadAnimParams
	byte PosType;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MonsterIdleIndex
	int PlayedIdleIndex;//[Offset: 0x0, Size: 4]
	int ForceReplicateTag;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ExFootIKComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 1]
	float UpwardDetectionDistance;//[Offset: 0x60c, Size: 4]
	float DownwardDetectionDistance;//[Offset: 0x610, Size: 4]
	float DetectionSphereRadius;//[Offset: 0x614, Size: 4]
	byte DetectionCollisionChannel;//[Offset: 0x618, Size: 1]
	float InterpSpeed;//[Offset: 0x61c, Size: 4]
	bool bEnableIKEffectorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	bool bEnableKEffectorOffsetMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 1]
	float ScaleOfPawn;//[Offset: 0x624, Size: 4]
	<FName,ExFootIKInfo> FootIKInfos;//[Offset: 0x628, Size: 60]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	float TickFrequencyPerSecond;//[Offset: 0x668, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 1]
	Vector IKEffectorOffsetMinValue;//[Offset: 0x670, Size: 12]
	void GetIKEffectorRotation(out Rotator OutIKEffectorRotation, out bool bOutIsValid, out const FName InFootIKName);// 0x34bfb70
	Vector GetIKEffectorOffsetMinValue();// 0x34bfb48
	void GetIKEffectorOffset(out Vector OutIKEffectorOffset, out bool bOutIsValid, out const FName InFootIKName);// 0x34bf964

--------------------------------
Class: ExFootIKInfo
	FName IKBoneOrSocketName;//[Offset: 0x0, Size: 8]
	FName FixedBoneOrSocketName;//[Offset: 0x8, Size: 8]
	Vector IKBoneOrSocketOffset;//[Offset: 0x10, Size: 12]
	Vector IKEffectorOffset;//[Offset: 0x1c, Size: 12]
	Rotator IKEffectorRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x8, Size: 20]
	Vector Origin;//[Offset: 0x1c, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x28, Size: 12]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 4]
	float MinimumDamage;//[Offset: 0x4, Size: 4]
	float InnerRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	float DamageFalloff;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector ImpactNormal;//[Offset: 0xc, Size: 12]
	Actor* HitActor;//[Offset: 0x18, Size: 8]
	float BulletHitTime;//[Offset: 0x20, Size: 4]
	float BulletLaunchTime;//[Offset: 0x24, Size: 4]
	float BulletMovedDistance;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	bool bUseCachePool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e2, Size: 1]
	Vector ServerShootPos;//[Offset: 0x5e4, Size: 12]
	float bFixDistanceToShooter;//[Offset: 0x5f0, Size: 4]
	float ServerShootTime;//[Offset: 0x5f4, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x600, Size: 80]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x670, Size: 4]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x33e4d00
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x35ffde8
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x35ffcd0
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x33e4c1c
	void OnImpact(out const HitResult _ImpactResult);// 0x33e4b3c
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x35ffa98

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 4]
	Actor* Instigator;//[Offset: 0x44, Size: 4]
	uint32 ShootID;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0x100, Size: 12]
	float SeekAreaPixelSize;//[Offset: 0x10c, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0x110, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0x118, Size: 8]
	float ScopeInDelayTime;//[Offset: 0x120, Size: 4]
	float InitialLockFrameLength;//[Offset: 0x124, Size: 4]
	float FinalLockFrameLength;//[Offset: 0x128, Size: 4]
	float MaxSeekDeistance;//[Offset: 0x12c, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x130, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x134, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x138, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x13c, Size: 4]
	float TraceTargetInterval;//[Offset: 0x140, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x144, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x148, Size: 60]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x184, Size: 60]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x1c0, Size: 60]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x1fc, Size: 4]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x200, Size: 4]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x204, Size: 4]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x208, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x20c, Size: 4]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x214, Size: 12]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x220, Size: 12]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x22c, Size: 12]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x248, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x24c, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x250, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	bool bSeekAndLockAlwaysValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	bool bSeekAndLockWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 1]
	bool bSeekAndLockToVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 1]
	bool bSeekAndLockToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	Actor* LastLockSoundTaget;//[Offset: 0x2bc, Size: 8]
	void ShowEnemyLaunchRocketTips();// 0x3588f24
	void SetCurrentLockTarget(Actor* InTarget);// 0x3646aac
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x36469b0
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x36468fc
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x3646800
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x364674c
	void RemoveTargetList(Actor*[] TargetList);// 0x36465f4
	void RemoveTarget(Actor* Target);// 0x364657c
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x446e168
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x446e168
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x446e168
	void InitComplete();// 0x3365b48
	void HandleTargetOutOfSeekArea();// 0x3646568
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x35500f8
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x36464e8
	enum GetCurrentSeekAndLockStage();// 0x36464b8
	Actor* GetCurrentLockTarget();// 0x3646490
	bool CheckTargetIsVisible(Actor* Target);// 0x354ff2c
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x3646410
	void AddTarget(Actor* Target);// 0x3646398

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0xc0, Size: 4]
	int MaxCheatTimes;//[Offset: 0xc4, Size: 4]
	float TolerateDistanceFractor;//[Offset: 0xc8, Size: 4]
	float MaxPacketLossRate;//[Offset: 0xcc, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xd0, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xd4, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xd8, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xdc, Size: 4]
	float SecondsSinceLastTeleport2SkipCheckDSAverageSpeed;//[Offset: 0xe0, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xe8, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xec, Size: 4]
	float MaxSkeletonLength;//[Offset: 0xf0, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xf4, Size: 4]
	int MaxLocusFailTime;//[Offset: 0xf8, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xfc, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x100, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x104, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x108, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x10c, Size: 16]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x11c, Size: 16]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x12c, Size: 16]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x13c, Size: 16]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x14c, Size: 16]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x15c, Size: 16]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x16c, Size: 16]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x17c, Size: 16]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x1f8, Size: 140]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x284, Size: 80]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x2d4, Size: 52]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x308, Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x380, Size: 60]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x3e0, Size: 32]
	float MaxJumpHeight;//[Offset: 0x404, Size: 4]
	Character* CharacterOwner;//[Offset: 0x408, Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	int ServerControlMaxThreshold;//[Offset: 0x478, Size: 4]
	LongTimeAccReplicateInDev LongTimeAccReplicateInDev;//[Offset: 0x48c, Size: 20]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x3588214
	void RefreshRealMaxJumpHeight();// 0x3365b48
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x3588098
	void Ping2Client(float ServerTime);// 0x3588020
	void OnTerminalVelocityChange__DelegateSignature(STExtraPlayerCharacter* Character, const float PreviousValue, const float CurrentValue);// 0x446e168
	void OnPreReconnectOnServer();// 0x358800c
	void OnGravityChange__DelegateSignature(STExtraPlayerCharacter* Character, const float PreviousGravity, const float CurrentGravity);// 0x446e168
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x3587d64
	float GetSpeedFromTimeredLocationData();// 0x3587d3c
	void DebugDrawLine(const Vector Start, const Vector End);// 0x3587c90
	void ClearJumpLimit();// 0x3587c7c

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int VerifyFailedCnt;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	uint32 bIgnoreCheck;//[Offset: 0x4, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x8, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0xc, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x10, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x14, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x18, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x1c, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x20, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x24, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x28, Size: 4]
	int MaxClientSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74, Size: 4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 4]

--------------------------------
Class: RealtimeMoveSpeedCheck

--------------------------------
Class: LongTimeAccReplicat
	bool bIsScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float AccumulatedTime;//[Offset: 0x4, Size: 4]
	float ExpectedDistance;//[Offset: 0x8, Size: 4]
	float MovedDistance;//[Offset: 0xc, Size: 4]
	float DistanceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ShovelInfo

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xbc, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc0, Size: 4]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x33cf9a8

--------------------------------
Class: CharacterParachuteComponent.LuaInstancedActorComponent.ActorComponent.Object
	float CurrentFallSpeed;//[Offset: 0x14c, Size: 4]
	float CurrentDiveRate;//[Offset: 0x158, Size: 4]
	float FreeFall_InputForwardTriggerThreshold;//[Offset: 0x16c, Size: 4]
	float FreeFall_InputRightTriggerThreshold;//[Offset: 0x170, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x174, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x178, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x17c, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x180, Size: 4]
	float FreeFall_MinForwardSpeed;//[Offset: 0x184, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x188, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x18c, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x190, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x194, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x198, Size: 4]
	float FreeFall_MinPitchForwardAngle;//[Offset: 0x19c, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x1a0, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x1a4, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x1a8, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x1ac, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x1b0, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x1b4, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x1b8, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	float Opened_AcceFall;//[Offset: 0x1c0, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x1c4, Size: 4]
	float Opened_AcceForward;//[Offset: 0x1c8, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x1cc, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x1d0, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x1d4, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x1d8, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x1dc, Size: 4]
	float Opened_AcceRight;//[Offset: 0x1e0, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x1e4, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x1e8, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x1ec, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x1f0, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x1f4, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x1f8, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x1fc, Size: 4]
	float ReliableRPCInterval;//[Offset: 0x200, Size: 4]
	float UseNewVerifyHeightInParachuteOpen;//[Offset: 0x204, Size: 4]
	float OpenRealMoveAndWallCheckHight;//[Offset: 0x208, Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x21c, Size: 12]
	float Launch_Time;//[Offset: 0x228, Size: 4]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x22c, Size: 12]
	Vector Launch_Accel;//[Offset: 0x238, Size: 12]
	bool Launch_AutoExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	float Launch_YawRandomDelta;//[Offset: 0x248, Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x24c, Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x250, Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x254, Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x258, Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x25c, Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x260, Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x264, Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x268, Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x26c, Size: 4]
	delegate OnInitLaunch;//[Offset: 0x270, Size: 12]
	delegate OnResetLaunch;//[Offset: 0x27c, Size: 12]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x288, Size: 12]
	delegate OnLanded;//[Offset: 0x294, Size: 12]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x2a0, Size: 4]
	float AllowMaxDistanceSqInParachuteOpen;//[Offset: 0x2a4, Size: 4]
	float AllowMaxVelocitySqAtServer;//[Offset: 0x2a8, Size: 4]
	float MaxZAllowDistance;//[Offset: 0x2ac, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	float FollowerDist;//[Offset: 0x2d8, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x2dc, Size: 4]
	bool bLuaSetCheckClientPosVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bGmSetUseServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	bool bGmSetUseMaxForwardInputValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 1]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x358, Size: 40]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x380, Size: 4]
	float DistanceToJumpPlaneLoc;//[Offset: 0x388, Size: 4]
	float AutoParachuteStopMoveForwardDistance;//[Offset: 0x38c, Size: 4]
	float AutoParachuteMoveForwardRate;//[Offset: 0x390, Size: 4]
	float AutoParachuteOpenMoveForwardRate;//[Offset: 0x394, Size: 4]
	float AutoParachutePitchOffset;//[Offset: 0x398, Size: 4]
	float ParachuteContinuTime;//[Offset: 0x3c8, Size: 4]
	float ParachuteContinuStartTime;//[Offset: 0x3cc, Size: 4]
	bool ParachuteStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	ParachuteMoveState[] ParachuteMoveList;//[Offset: 0x3d4, Size: 12]
	bool VerifyClientTimeStamp(float TimeStamp, out const Vector Position, out const Vector Velocity);// 0x3435840
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x34356a4
	void UpdateRadiouBlurState(float DeltaTime, float ThrottleInput, float SteerInput, enum State);// 0x343555c
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x34353c0
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x34352c0
	void UpdateLaunchRotation(float InputForward, float InputRight, float DeltaTime);// 0x34351c0
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x3435074
	void TriggerInputUtil(float InputForward, float InputRight, out int InputForwardTriggered, out int InputRightTriggered);// 0x3434f08
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x3434db4
	void StopParachute();// 0x3434da0
	void StartParachute();// 0x3434d8c
	void SetParachuteVelocity(out const Vector NewVelocity);// 0x3434d08
	void SetAutoParachuteLocation(out const Vector Location);// 0x3434c84
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x3434c04
	void SendServerMoveAckToClientInternal(float TimeStamp, bool bAckGoodMove, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x3434a40
	void SendClientMoveToServerAccurateInternal(float TimeStamp, float ThrottleInput, float SteerInput, float GlidingSpeed, enum State, Rotator CameraRotation, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x343476c
	void ResetVelocity();// 0x3434758
	void RemoveRadiouBlur();// 0x3434744
	void PostNetReceiveNewState();// 0x3434730
	Vector ParachuteMoveAfterVelocity(STExtraBaseCharacter* Character, float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation, out const Rotator CurrentRotation, out const Vector CurrentVelocity, out const Vector CurrentPosition, float GlidingSpeed, out Vector OutCurrentVelocity);// 0x3434398
	Rotator ParachuteMoveAfterRotation(STExtraBaseCharacter* Character, float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation, out const Rotator CurrentRotation, out const Vector CurrentVelocity);// 0x34340f0
	Vector ParachuteMoveAfterPosition(STExtraBaseCharacter* Character, float DeltaTime, out const Vector CurrentVelocity, out const Vector CurrentPosition);// 0x3433f74
	Vector ParachuteGetAfterPosition(STExtraBaseCharacter* Character, float DeltaTime, out const Vector CurrentVelocity, out const Vector CurrentPosition);// 0x3433df8
	void OnPreReconnectOnServer();// 0x3433de4
	void OnAsyncLoadRadiouBlurDone();// 0x3433dd0
	static bool IsParachuteWindEnable();// 0x3433da8
	bool IsAutoParachutePathPlanningEnable();// 0x3433d80
	bool IsAutoParachuteEnable();// 0x3433d58
	void InvalidateAdjustFollowerLocation();// 0x3433d44
	void InitRadiouBlurMat();// 0x3433d30
	void InitParachuteContinuStart();// 0x3433d1c
	void GMParachuteAddServerPos(float X, float Y, float Z);// 0x3433c1c
	float GetReplicatedRightInput();// 0x3433bf4
	float GetReplicatedForwardInput();// 0x3433bcc
	Vector GetParachuteVelocity();// 0x3433b84
	Vector GetLaunchInitVelocity();// 0x3433b34
	Vector GetCurVelocity();// 0x3433aec
	float GetAutoParachuteMoveForwardRate();// 0x3433ac4
	Vector GetAutoParachuteLocation();// 0x3433a7c
	void EnableAutoParachutePathPlanning(bool bEnable);// 0x34339fc
	void EnableAutoParachute(bool bEnable);// 0x343397c
	void DebugParachuteDetail(FString Caller, out const Vector OldLocation, out const Rotator OldRotation, float DeltaSeconds);// 0x34337d0
	void ClearParachuteStatusCache();// 0x34337bc
	void CharacterSetParachuteState(enum State);// 0x343373c
	Vector CalWingUpVelocityUtil(Vector CurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x3433530
	Vector CalWingUpVelocity(float InputForward, float InputRight, float DeltaTime);// 0x343340c
	Vector CalParachuteOpenedVelocityUtil(STExtraBaseCharacter* Character, Vector CurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, float GlidingSpeed, out Vector OutCurrentVelocity);// 0x343316c
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x3433050
	Vector CalLaunchVelocityUtil(Vector CurVelocity, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x3432e90
	Vector CalLaunchVelocity(float InputForward, float InputRight, float DeltaTime);// 0x3432d6c
	Vector CalFreeFallVelocityUtil(Vector CurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x3432b60
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x3432a44
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x34328f4
	void AdjustFollowerLocation();// 0x34328e0
	void AddRadiouBlur(float InWeight);// 0x3432868

--------------------------------
Class: ParachuteMoveState
	float TimeStamp;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float SteerInput;//[Offset: 0x8, Size: 4]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]
	Vector Position;//[Offset: 0x18, Size: 12]
	Vector Velocity;//[Offset: 0x24, Size: 12]
	Rotator Rotation;//[Offset: 0x30, Size: 12]
	enum State;//[Offset: 0x3c, Size: 1]
	float GlidingSpeed;//[Offset: 0x40, Size: 4]

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xbc, Size: 4]
	float TileRemovalRadius;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0xf8, Size: 12]
	delegate OnBuffDetached;//[Offset: 0x104, Size: 12]
	UTBuffSynData[] BuffSyncList;//[Offset: 0x150, Size: 12]
	FString ServerBuffString;//[Offset: 0x15c, Size: 12]
	float BuffSyncRemainingPeriod;//[Offset: 0x168, Size: 4]
	BuffInstancedItem[] AllBuffs;//[Offset: 0x16c, Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x3a18b4c
	void ResetForDeath();// 0x3a18b38
	void RepBuffSyncList();// 0x3a18b24
	bool RemoveBuffWithCauser(FName BuffName, bool RemoveLayerOnly, Controller* pCauser);// 0x3a18a08
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* BuffApplierActor);// 0x3a188ac
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x3a18790
	void RefreshAllBuffs();// 0x35dcbb8
	bool IsBufferMutexed(FName NewBuffName);// 0x3a18710
	bool HasBuffID(int BuffID);// 0x3a18690
	bool HasBuff(FName BuffName);// 0x3a18610
	Pawn* GetPawnOwner();// 0x3a185e8
	FName GetBuffName(int BuffID);// 0x3a18560
	int GetBuffID(FName BuffName);// 0x3a184e0
	float GetBuffExpiry(out const FName BuffName);// 0x3a1844c
	STBaseBuff* GetBuffByName(FName BuffName);// 0x3a183cc
	Actor* GetActorOwner();// 0x3a183a4
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x3a18144
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x3a18258
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x3a18144
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x3a17ff8
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x3a17f34
	void ClearBuff(bool bDebuff, bool bGainBuff);// 0x3a17e64
	bool CheckBuffStatus(class STBaseBuffStatusType Status, out bool Value);// 0x3a17d90
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0x446e168
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0x446e168
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x3a17ccc
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x3a17c00
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x3a17aa8
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x3a1790c

--------------------------------
Class: UTBuffSynData
	FName BuffName;//[Offset: 0x0, Size: 8]
	Controller* BuffCauser;//[Offset: 0x8, Size: 4]
	int LayerCount;//[Offset: 0xc, Size: 4]
	Actor* BuffApplierActor;//[Offset: 0x10, Size: 4]
	float RemainingTime;//[Offset: 0x14, Size: 4]
	float ExpireTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0, Size: 8]
	int BuffID;//[Offset: 0x8, Size: 4]
	STBaseBuff* Buff;//[Offset: 0xc, Size: 8]
	int LayerCount;//[Offset: 0x14, Size: 4]
	Controller* CauserPawnController;//[Offset: 0x18, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float Expiry;//[Offset: 0x20, Size: 4]
	Actor* Target;//[Offset: 0x24, Size: 4]
	Actor* BuffApplier;//[Offset: 0x28, Size: 4]
	int BuffIndex;//[Offset: 0x2c, Size: 4]
	uint32 DamageCauseID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x24, Size: 12]
	FString DisplayName;//[Offset: 0x30, Size: 12]
	FString Message;//[Offset: 0x3c, Size: 12]
	Texture2D* Icon;//[Offset: 0x48, Size: 4]
	SoundBase* SoundData;//[Offset: 0x4c, Size: 4]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	bool StaysOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 1]
	int LayerMax;//[Offset: 0x58, Size: 4]
	int InitialLayerCount;//[Offset: 0x5c, Size: 4]
	int LayerCount;//[Offset: 0x60, Size: 4]
	float ValidityTime;//[Offset: 0x64, Size: 4]
	float Internal;//[Offset: 0x68, Size: 4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x6c, Size: 12]
	float Expiry;//[Offset: 0x78, Size: 4]
	StatusChange[] StatusChanges;//[Offset: 0x7c, Size: 12]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0x8a, Size: 1]
	FName[] MutexBuffers;//[Offset: 0x8c, Size: 12]
	BuffActionItem[] BuffActions;//[Offset: 0x98, Size: 12]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xa4, Size: 12]
	float fADScale;//[Offset: 0xb0, Size: 4]
	float fAPScale;//[Offset: 0xb4, Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	Controller* CauserPawnController;//[Offset: 0xbc, Size: 4]
	Actor* CauserPawnActor;//[Offset: 0xc0, Size: 4]
	UAEBlackboardParameter[] UAEBlackboardParamList;//[Offset: 0xd0, Size: 12]
	Actor* BuffApplier;//[Offset: 0xdc, Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0xe0, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x11c, Size: 4]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.Object
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x62de234
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x62de0e4
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x62ddf94
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x62dde38
	bool IsOK_Internal();// 0x62dddc4
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x62ddcd4
	UTSkill* GetOwnerSkill();// 0x62ddc6c

--------------------------------
Class: UTSkillBaseWidget.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString EffectName;//[Offset: 0x24, Size: 12]
	Actor* BuffTargetActor;//[Offset: 0x30, Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0x34, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x3c, Size: 4]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x62e1e0c
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x62e1c90
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x62e1a88
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator RotatorValue);// 0x62e190c
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x62e1790
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x62e161c
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x62e14a0
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x62e1318
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x62e1198
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x62e101c
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x62e0e68
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x62e0d48
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x62e0c28
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x62e0b08
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x62e09e8
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x62e08c8
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x62e07a8
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x62e0688
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x62e0568
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x62e0448
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x62e0328
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x62e0208
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x62e00ec
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x62dff78
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x62dfe38
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x62dfcec
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x62dfbac
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x62dfa90
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x62df958
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x62df83c
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x62df71c
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x62df600
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x62df4e4
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x62df3c4
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x62df250
	UAEBlackboard* GetUAEBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x62df164
	UAEBlackboard* GetUAEBlackboard();// 0x62df0f4
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x62df084
	Actor* GetOwnerPawn();// 0x62df014
	<Actor*,UAEBlackboard*> GetActorBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x62def0c
	<Actor*,UAEBlackboard*> GetActorBlackboard();// 0x62dee78

--------------------------------
Class: UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0x18c, Size: 4]
	bool bEnableSkillCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1b0, Size: 4]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x1b8, Size: 60]
	<int,UAEBlackboard*> SkillIDBlackboardMap;//[Offset: 0x1f4, Size: 60]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x230, Size: 60]
	delegate ChangeActorBlackboard;//[Offset: 0x26c, Size: 12]
	<int,UTSkillCreateData> SkillBaseDataMaps;//[Offset: 0x278, Size: 60]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x2b4, Size: 12]
	delegate OnSkillCast;//[Offset: 0x2c0, Size: 12]
	<int,int> IDToSyncSkillActiveStateData;//[Offset: 0x2cc, Size: 60]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x308, Size: 12]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x314, Size: 60]
	<int,int> ButtonSlotToSkillID;//[Offset: 0x350, Size: 60]
	TeammateSkillCDRepData TeammateSkillCDRepData;//[Offset: 0x38c, Size: 16]
	SkillDynamicRepData SyncDynamicRepData;//[Offset: 0x39c, Size: 12]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x3a8, Size: 12]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x3b8, Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x3e0, Size: 40]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x408, Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x418, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x41c, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x424, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x428, Size: 60]
	SkillParamater[] SkillParamaters;//[Offset: 0x470, Size: 12]
	UTMutilSkillSynData[] SkillSynData;//[Offset: 0x47c, Size: 12]
	UTSkillSynSinglePhaseData[] SkillSynSinglePhaseData;//[Offset: 0x494, Size: 12]
	delegate OnSkillInitSignature;//[Offset: 0x4bc, Size: 12]
	delegate SkillStartEvent;//[Offset: 0x4c8, Size: 12]
	delegate SkillStopEvent;//[Offset: 0x4d4, Size: 12]
	delegate SkillLevelChangeEvent;//[Offset: 0x4e0, Size: 12]
	int[] PendingRemoveSkillID;//[Offset: 0x4ec, Size: 12]
	<int,byte> CurSKillLevels;//[Offset: 0x4f8, Size: 60]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x534, Size: 12]
	MutilSkillSynData NewSkillSynData;//[Offset: 0x540, Size: 36]
	SkillSinglePhaseData NewSkillSinglePhaseData;//[Offset: 0x564, Size: 36]
	bool bEnablePendingStopSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	<int,UTSkillSimulateData> PendingRemoveSkillInstMap;//[Offset: 0x58c, Size: 60]
	<int> AsyncLoadingSkillInst;//[Offset: 0x5c8, Size: 60]
	UTSkillPreSetBlackboard SkillPreSetBlackboard;//[Offset: 0x604, Size: 60]
	UTSkillExecQueue SkillExecQueue;//[Offset: 0x640, Size: 208]
	bool UseSkillInstance();// 0x62f6ad0
	void UpdateSyncSkillCDData(int SkillID);// 0x62f6a00
	void UpdateSyncSkillActiveState(int SkillID);// 0x62f6930
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x62f6860
	void TryDeleteOneSkill(int SkillID, bool IsImmediately);// 0x62f66f0
	void TryAddOneSkill(int SkillID, bool bActive, int ButtonSlot);// 0x62f6514
	void TriggerEvent(int SkillID, byte EventType);// 0x62f63c0
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x62f60b4
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestID);// 0x62f5e9c
	bool StopSkillWithSlot(int SkillSlot, enum StopReason);// 0x62f5d40
	void StopSkillSpecific(UTSkill* Skill, enum StopReason);// 0x62f5c04
	void StopSkillAll(enum StopReason);// 0x62f5b1c
	int StopSkill_WithID(int SkillID, enum StopReason);// 0x62f59c4
	void StopSkill(int SkillID, enum StopReason);// 0x62f5874
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x62f5714
	bool SetupOwnerAndSystem();// 0x62f56a8
	void SetSkillState(out const UTSkillStateSyncData[] InSyncStateDatas);// 0x62f555c
	void SetSkillOwner(Actor* tempActor);// 0x62f5478
	void SetSkillLevel(int SkillID, int SkillLevel);// 0x62f5340
	bool SetSkillActive(int SkillID, bool bActive, bool bForceSet, int ButtonSlot);// 0x62f50b4
	void SetCurSkill(int SkillID, int SkillSlot);// 0x62f4f7c
	void SetAutoSkillID(int InSkillID);// 0x62f4eac
	void ServerTriggerEvent_WithParams(int SkillID, byte EventType, uint64 InstID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content);// 0x62f4ad8
	void ServerTriggerEvent_WithID(int SkillID, byte EventType, uint64 InstID);// 0x62f48cc
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x62f4734
	void ServerStopAllSkill(enum Reason);// 0x62f4610
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x62f448c
	void ServerNotifyRandomSeed(int Seed);// 0x62f436c
	void ResetTeammateSkillCDData();// 0x62f430c
	void ResetSkillCoolDown(int SkillID, int CDIndex);// 0x62f41bc
	void ResetAllSkillCoolDown();// 0x62f4154
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState, const int[] RequestIDs);// 0x62f3e74
	void RepSkillHitInfo();// 0x62f3e14
	void RepOneSkillSynData(int SkillSlot, int InLastSkillID);// 0x62f3cdc
	void RepLastCastTime();// 0x62f3c7c
	void ReplaceSkill(int OldSkillID, int NewSkillID);// 0x62f3b44
	void RemoveReplacedSkill(int OldSkillID);// 0x62f3a74
	void RemoveAllSkillUIWidget();// 0x62f3a14
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x62f38dc
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x62f379c
	UTSkill* QuerySkill(int SkillID, bool bOnlyQuery);// 0x62f361c
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x62f34d4
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x62f3384
	void OnRespawned();// 0x62f331c
	void OnRep_SkillSynSinglePhaseData();// 0x62f32b4
	void OnRep_SkillSynData();// 0x62f324c
	void OnRep_SkillHitInfo();// 0x62f31e4
	void OnRep_SkillCDDatas();// 0x62f3184
	void OnRep_SkillActiveState();// 0x62f3124
	void OnRep_ReplaceSkill();// 0x62d43d0
	void OnRep_NewSkillSynData();// 0x62f30c4
	void OnRep_NewSkillSinglePhaseData();// 0x62f3064
	void OnRep_DynamicRepData();// 0x62f3004
	void OnRecycled();// 0x62f2f9c
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x62f2e4c
	bool IsUsingSkill(int SkillID);// 0x62f2d70
	bool IsSkillCanUse();// 0x62f2d04
	bool IsSkillActived(int SkillID);// 0x62f2c28
	bool IsReadyToCastSkill(int SkillID);// 0x62f2b38
	bool IsEnableSkillCoolDown();// 0x62f2ac4
	bool IsCurrentUseSkillID(int InSkillID);// 0x62f29e8
	bool IsCastingSkillID(int InSkillID);// 0x62f28f8
	bool IsCastingSkill();// 0x62f2884
	bool HandleTriggerParamsEvent(int SkillID, byte EventType);// 0x446e168
	void HandleSkillStop(int SkillID, enum StopReason);// 0x62f2734
	void HandleSkillStart(int SkillID);// 0x62f2650
	UAEBlackboard* GetUAEBlackboardBySkillId(int SkillID);// 0x62f2564
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x62f248c
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x62f23a0
	UTSkillStateSyncData[] GetSkillState();// 0x62f230c
	int GetSkillSlotBySkillID(int SkillID);// 0x62f2234
	int GetSkillSlotBySkill(UTSkill* Skill);// 0x62f215c
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x62f2028
	int GetSkillLevel(int SkillID);// 0x62f1f50
	int GetSkillIDFromSkillIndex(int InSkillIndex);// 0x62f1e64
	int GetSkillIDByClass(class Object SkillClass);// 0x62f1d78
	FString[] GetSkillExecString();// 0x62f1ce4
	int GetSkillCurPhase(UTSkill* Skill);// 0x62f1c0c
	UTSkill* GetSkillByName(FString SkillName);// 0x62f1a94
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x62f191c
	int GetSkillButtonSlot(int SkillID);// 0x62f1844
	UTSkillCreateData GetSkillBaseData(int SkillID);// 0x62f1750
	UTSkill* GetSkill(int SkillID);// 0x62f1664
	int GetReplacedSkill(int OldSkillID);// 0x62f158c
	byte GetRealOwnerRoleSafety();// 0x62f1504
	byte GetMutexRelation(int TempSkillID, int InSkillID);// 0x62f1390
	float GetLastCastTime(int SkillID);// 0x62f12b4
	float GetLastCastFinishTime(int SkillID);// 0x62f11d8
	int[] GetCurUsingSkillIDS();// 0x62f1144
	UTSkill*[] GetCurSkills();// 0x62f10b0
	UTSkillPhase* GetCurSkillPhase(int InSkillSlot);// 0x62f0fd8
	int[] GetCurSkillIDs();// 0x62f0f58
	int GetCurSkillID(UTSkill* Skill);// 0x62f0e80
	UTSkill* GetCurSkill(int InSkillSlot);// 0x62f0da8
	int[] GetCurMonopolizeSkills();// 0x62f0d14
	int[] GetCurAllSkillIDs();// 0x62f0c80
	int GetButtonSlotSkillID(int ButtonSlot);// 0x62f0ba8
	int FindRelatedCurSkillID(int SkillID, out int OutRelatedSkillSlot, bool bPeekSlotIndex);// 0x62f0990
	void DynamicRemoveSkill(int InSkillID);// 0x62f08ac
	void DynamicAddSkill(int InSkillID);// 0x62f07c8
	void ClientStopOneSkill(uint64 InstID, int SkillID, bool bSinglePhaseRep);// 0x62f0614
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x62f049c
	void ClientSimulateOneSkill(uint64 InstID, int SkillID, int PhaseIndex);// 0x62f0304
	void ClearSkill();// 0x62f029c
	void ClearRepParams();// 0x62f0234
	void ClearInitParams();// 0x62f01cc
	void CacheSkillWidget(int SkillID, UTSkillWidget* Widget);// 0x62f007c

--------------------------------
Class: UTSkill.LuaActor.Actor.Object
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	FString SkillName;//[Offset: 0x3a4, Size: 12]
	FName SkillGroup;//[Offset: 0x3b0, Size: 8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	enum SkillCastType;//[Offset: 0x3b9, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 1]
	int SkillID;//[Offset: 0x3bc, Size: 4]
	int SkillTemplateID;//[Offset: 0x3c0, Size: 4]
	FString SkillDescription;//[Offset: 0x3c4, Size: 12]
	FString SkillDetailDes;//[Offset: 0x3d0, Size: 12]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3de, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3df, Size: 1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x3e4, Size: 88]
	int SkillCategory;//[Offset: 0x43c, Size: 4]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x444, Size: 12]
	bool bSetBlackboardDefaultData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	bool bRecycleWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x452, Size: 1]
	FString SkillTimeScaleAttrName;//[Offset: 0x454, Size: 12]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x460, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x49c, Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x4a0, Size: 12]
	int64 LastEditBluePrintTime;//[Offset: 0x4b0, Size: 8]
	int CurComponentNameIndex;//[Offset: 0x4b8, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x4fc, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x504, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x62d6168
	void ResetSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x62d6018
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x62d5e4c
	bool IsEnableSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x62d5d5c
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x62d5c6c
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x62d5c04
	UAEBlackboard* GetSpecificBlackboard();// 0x62d5b9c
	UTSkillPhase* GetSkillPhaseByName(FString PhaseName);// 0x62d5a60
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x62d5974
	UTSkillBaseWidget* GetSkillEffectByPhaseName(FString PhaseName, FString EffectName);// 0x62d577c
	UTSkillBaseWidget* GetSkillEffectByPhaseIndex(int PhaseIndex, FString EffectName);// 0x62d55d8
	float GetSkillDurationScale(UTSkillManagerComponent* SkillManagerComponent);// 0x62d54e8
	float GetRestCoolDownTime(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x62d538c
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x62d523c
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x62d50b8

--------------------------------
Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int SkillButtonSlot;//[Offset: 0x4, Size: 4]
	int SkillGroupIndex;//[Offset: 0x8, Size: 4]
	float interval;//[Offset: 0xc, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0x10, Size: 4]
	FString CoolDownMessage;//[Offset: 0x14, Size: 12]
	int CoolDownMessageID;//[Offset: 0x20, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x24, Size: 12]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x30, Size: 12]
	FName[] AsyncLoadingSkillUI;//[Offset: 0x40, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: UTSkillPhase.Object
	FString PhaseName;//[Offset: 0x20, Size: 12]
	FString PhaseDescription;//[Offset: 0x2c, Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0x3c, Size: 8]
	int PhaseIndex;//[Offset: 0x44, Size: 4]
	int ActionsTopHalfCount;//[Offset: 0x60, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x64, Size: 104]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0xcc, Size: 4]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x6302620
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x630253c
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x6302458
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x6302374
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x6302218
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x63020bc
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x6301fd8
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x6301e78
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x6301d18
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x6301c3c
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x6301b4c
	bool ClearAttachments();// 0x6301ae0
	void AfterStartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x63019fc

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x4, Size: 12]
	float AltPhaseDuration;//[Offset: 0x10, Size: 4]
	float CacheMouseInputTime;//[Offset: 0x14, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	int CoolDownIndex;//[Offset: 0x1c, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x20, Size: 12]
	UTSkillPicker* Picker;//[Offset: 0x2c, Size: 4]
	UTSkillEffect*[] Actions;//[Offset: 0x30, Size: 12]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x3c, Size: 12]
	enum PhaseType;//[Offset: 0x48, Size: 1]
	int JumpPhaseIndex;//[Offset: 0x4c, Size: 4]
	FString EnterPhaseTipString;//[Offset: 0x50, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x40, Size: 32]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x6c, Size: 12]
	UTSkillPickerFilter*[] Filters;//[Offset: 0x78, Size: 12]
	bool PickTargetsInner(Vector OriginPoint);// 0x6303bb8
	bool PickTargets(Vector OriginPoint);// 0x6303ae4

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	enum PickerTargetRole;//[Offset: 0x11, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	float HitAngleCos;//[Offset: 0x2c, Size: 4]
	byte HitPhysMatType;//[Offset: 0x30, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: UTSkillPickerFilter.Object
	void HandleFilterArray(out UTSkillPickedTarget[] inArray, Actor* Owner);// 0x630362c

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.Object
	float fADScale;//[Offset: 0x40, Size: 4]
	float fAPScale;//[Offset: 0x44, Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0x48, Size: 12]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x62e3100
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x62e301c
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x62d7468
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x62d7318
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x62d71c8
	void OnAsyncLoadSoftPathDone();// 0x62e2fbc
	UTSkill* GetOwnerSkill();// 0x62ddc6c
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x62de0e4
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x62d6f94

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte SkillEventType;//[Offset: 0x40, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0x44, Size: 12]
	FName PreEventActionTag;//[Offset: 0x50, Size: 8]
	UTSkillEffect* SkillEffect;//[Offset: 0x58, Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0x5c, Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x68, Size: 12]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UTSkillCDBase.LuaObject.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x70, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x78, Size: 8]
	byte[] SyncContent;//[Offset: 0x80, Size: 12]
	bool bIgnoreCastSkillCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	void BindLua(FString luaPath);// 0x62dcee8

--------------------------------
Class: LuaObject.Object
	FString LuaFilePath;//[Offset: 0x64, Size: 12]

--------------------------------
Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0, Size: 4]
	float LastCastTime;//[Offset: 0x4, Size: 4]
	float LastCastFinishTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkillActiveRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	int SkillLevel;//[Offset: 0x4, Size: 4]
	int SkillButtonSlot;//[Offset: 0x8, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TeammateSkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	float CDStartTime;//[Offset: 0x4, Size: 4]
	float CDEndTime;//[Offset: 0x8, Size: 4]
	int UseCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SkillDynamicRepData
	SkillDynamicState[] SkillData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkillDynamicState
	int SkillID;//[Offset: 0x0, Size: 4]
	bool bAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: SkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillSyncData_CD
	int SkillCDIndex;//[Offset: 0x0, Size: 4]
	byte[] SkillSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	byte HitSurfaceType;//[Offset: 0x18, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: UTMutilSkillSynData
	bool bEnableRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	uint64 CurInstanceID;//[Offset: 0x8, Size: 8]
	int CurSkillID;//[Offset: 0x10, Size: 4]
	int SynID;//[Offset: 0x14, Size: 4]
	int PhaseIndexes;//[Offset: 0x18, Size: 4]
	byte[] PhaseIndexArray;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: UTSkillSynSinglePhaseData
	uint64 CurInstanceID;//[Offset: 0x0, Size: 8]
	int CurSkillID;//[Offset: 0x8, Size: 4]
	int CurSkillPhase;//[Offset: 0xc, Size: 4]
	byte UpdateFlag;//[Offset: 0x10, Size: 1]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: UTReplaceSkillData
	int OldSkillID;//[Offset: 0x0, Size: 4]
	int NewSkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MutilSkillSynData
	UTMutilSkillSynData[] DataList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkillSinglePhaseData
	UTSkillSynSinglePhaseData[] DataList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UTSkillSimulateData
	uint64 InstanceID;//[Offset: 0x0, Size: 8]
	int SkillID;//[Offset: 0x8, Size: 4]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: UTSkillPreSetBlackboard
	<int,UAEBlackboard*> PreSetSkillBBData;//[Offset: 0x0, Size: 60]

--------------------------------
Class: UTSkillExecQueue

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam SyncParam;//[Offset: 0x0, Size: 2]
	int SkillID;//[Offset: 0x4, Size: 4]
	int SkillButtonSlot;//[Offset: 0x8, Size: 4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: UTSkillWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x3a8, Size: 4]
	int SkillID;//[Offset: 0x3ac, Size: 4]
	float TickInterval;//[Offset: 0x3b0, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	void TriggerPassiveEvent(byte SkillEvent);// 0x63056dc
	void TriggerEvent(byte SkillEvent);// 0x63055f4
	void SetSkillManager(UTSkillManagerComponent* Manager);// 0x6305524
	void SetSkillID(int InSkillID);// 0x6305454
	void RemoveSelf();// 0x63053f4
	UTSkillManagerComponent* GetSkillManager();// 0x630538c
	int GetSkillID();// 0x6305324
	UTSkillCDBase*[] GetSkillCDBases();// 0x63052a4
	UTSkill* GetSkill();// 0x630523c
	PlayerController* GetLocalPlayerController();// 0x63051d4

--------------------------------
Class: LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x398, Size: 12]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0, Size: 4]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x54, Size: 8]
	UTSkillAction* OwnerPeriodAction;//[Offset: 0x5c, Size: 4]
	bool bClearTimerAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	Object* EventObj;//[Offset: 0x64, Size: 4]
	void UpdateAction_Internal(float DeltaSeconds);// 0x62d7b8c
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x62d7a48
	void UndoAction_Internal();// 0x62d79e0
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x62d7910
	void TimerRealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x62d7840
	void Reset_Internal();// 0x62d77d8
	void Reset(ActorComponent* SkillManagerComponent);// 0x62d7708
	bool RealDoAction_Internal();// 0x62d7694
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x62d75b8
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x62d7468
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x62d7318
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x62d71c8
	void OnAsyncLoadAssetDone(UTSkillManagerComponent* SkillManagerComponent);// 0x62d70f8
	bool JudgeNeedPhaseWait();// 0x62d7084
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x62d6f94

--------------------------------
Class: UTSkillActionCreateData
	byte ActionRole;//[Offset: 0x0, Size: 1]
	float DelayTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0, Size: 4]
	UTSkillAction* BuffEventAction;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STBaseBuffEventType.Object

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 12]
	void UpdateAttribute(int TemplateID);// 0x33323a0
	void InitializeFollow();// 0x3332384
	void Initialize(Actor* Actor);// 0x3332304

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xbc, Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc0, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	Transform[] StandHitBoxesTransform;//[Offset: 0xc8, Size: 12]
	Transform[] ProneHitBoxesTransform;//[Offset: 0xd4, Size: 12]
	PrimitiveComponent*[] StandHitBoxes;//[Offset: 0xe0, Size: 12]
	PrimitiveComponent*[] ProneHitBoxes;//[Offset: 0xec, Size: 12]
	FString HitBox_Stand_Tag;//[Offset: 0xfc, Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x108, Size: 12]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x118, Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x128, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x12c, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x130, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x134, Size: 4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x13c, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x144, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x14c, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x154, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x15c, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x164, Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x1a0, Size: 4]
	bool bRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x1a8, Size: 4]
	bool bRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x336df78
	void UpdateAllInstanceBodyTransform(int Type);// 0x35b2220
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x35b21a0
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x35b210c
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x35b2040
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x35b1ecc
	byte GetCurHitPartJudgementType();// 0x35b1ea4
	void CloseBodyBulletCollision();// 0x3332384
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef BodyDef);// 0x35b1d08

--------------------------------
Class: OpenCollisionLODAngle
	float DistSq;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TurnAroundViewComponent.ActorComponent.Object
	FocusTargetItem FocusTurnData;//[Offset: 0x100, Size: 52]
	bool bTurnOnlyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	Character* MyChar;//[Offset: 0x160, Size: 4]
	void OnRep_FocusTurnTargetChange();// 0x38507cc

--------------------------------
Class: FocusTargetItem
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	bool IsStartTurnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float TurnTargetVelocity;//[Offset: 0x18, Size: 4]
	Rotator LastActorRotation;//[Offset: 0x1c, Size: 12]
	FString CurveName;//[Offset: 0x28, Size: 12]

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0xbc, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0xc0, Size: 60]
	TickListItem[] NeedTickComponentList;//[Offset: 0xfc, Size: 12]
	byte RoleBits;//[Offset: 0x108, Size: 1]

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 4]
	enum RoleType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CharacterMaterialComponent.ActorComponent.Object

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector PitchOffset;//[Offset: 0xc, Size: 12]
	Vector FootOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 4]
	FString SwitchGroupName;//[Offset: 0x4, Size: 12]
	FString SwitchValue;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	bool bHasFallInWaterFully;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf1, Size: 1]
	float BreathMax;//[Offset: 0x104, Size: 4]
	float AssistAccountableDuration;//[Offset: 0x108, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x10c, Size: 4]
	bool bNearDeathOnSinglePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x114, Size: 4]
	int MaxDeathTimes;//[Offset: 0x118, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int NDStatusEnterTimes;//[Offset: 0x120, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x124, Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0x128, Size: 4]
	float Breath;//[Offset: 0x12c, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x130, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x134, Size: 4]
	float NDDecreaseRate;//[Offset: 0x138, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x140, Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x144, Size: 4]
	DamageEvent DamageEventRecorded;//[Offset: 0x148, Size: 8]
	delegate OnPreEnterNearDeath;//[Offset: 0x154, Size: 12]
	float BeCarriedReduceRate;//[Offset: 0x160, Size: 4]
	float BeEnemyCarriedReduceRate;//[Offset: 0x164, Size: 4]
	bool bEnableSwimWhileDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	float SetHealthSafety(float AddVal);// 0x36c57dc
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x36c56c8
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x36c55b4
	void ResetDataOnRespawn();// 0x36c55a0
	void RescueFinishSuccessfully();// 0x36c558c
	void OnRep_BreathChanged();// 0x36c51b0
	bool IsNearDeathInvincible();// 0x36c5564
	bool IsHealthAlive();// 0x36c553c
	bool IsHaveLastBreathStatus();// 0x36c5514
	bool IsFinishedLastBreathStatus();// 0x36c54ec
	void InitializeOwner(Pawn* TempPawn);// 0x36c5474
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadshot);// 0x36c52ac
	Controller* GetRecordedEventInstigator();// 0x36c5290
	float GetBreathMax();// 0x36c5274
	float GetBreath();// 0x36c5258
	void EnterSwimWhileDying();// 0x36c5244
	void EnableDirectlyDie(bool bEnable);// 0x36c51c4
	void DoFinishLastBreath();// 0x36c51b0
	void DidFinishLastBreath();// 0x36c519c
	void ClearNearDeathTeammate();// 0x36c5188
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x36c50bc
	void AddDeadBuff();// 0x36c50a8

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xf4, Size: 4]
	int SelfRescueWanderingRadius;//[Offset: 0xf8, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0xfc, Size: 4]
	anPickerData FanData;//[Offset: 0x100, Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x130, Size: 4]
	STExtraBaseCharacter* CarryWho;//[Offset: 0x134, Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x138, Size: 4]
	float RestoringDuration;//[Offset: 0x154, Size: 4]
	float SelfRestoringDuration;//[Offset: 0x158, Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x15c, Size: 12]
	FString SelfDurationAttrModifyRef;//[Offset: 0x168, Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x174, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x17c, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x36c67e8
	void WaitingConfirmState_ActOnUnsatisfied();// 0x36c67d4
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x34fdbfc
	bool WaitingConfirmCarryState_IsConditionSatisfied();// 0x36c67ac
	void WaitingConfirmCarryState_ActOnUnsatisfied();// 0x36c6798
	void WaitingConfirmCarryState_ActOnSatisfied(float DeltaTime);// 0x34fdbfc
	void TickAsHelper(float DeltaTime);// 0x36c6720
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x36c666c
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x36c65f4
	void SelectedCarryEnemyTargetChangeNotifyHUD(Pawn* previousTarget);// 0x36c657c
	bool RescueingState_IsConditionSatisfied();// 0x36c6554
	void RescueingState_ActOnUnsatisfied();// 0x36c6540
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x34fdbfc
	void RescueingProcessFinished();// 0x36c652c
	void RefreshTargetChangeNotifyHUD();// 0x36c6518
	bool PlayerConfirmToRescueClientSide();// 0x36c64f0
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x36c641c
	void OnRep_IsRescueingOtherStatusChange();// 0x36c6408
	bool IsInRescueingStatus();// 0x36c63e0
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x36c6324
	float GetRestoringDuration();// 0x36c62fc
	void DrawDebugFan();// 0x3365b48
	void ClearTimerWaitingRescueProcessToFinish();// 0x36c62e8

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xbc, Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc0, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xc8, Size: 4]
	float CanFollowDist;//[Offset: 0xcc, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xd0, Size: 4]
	float QuitFollowDist;//[Offset: 0xd4, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xd8, Size: 4]
	float DistThrehold;//[Offset: 0xdc, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe4, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xec, Size: 4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x124, Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x130, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x36bb98c
	void WaitingConfirmState_ActOnUnsatisfied();// 0x36bb978
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x34fdbfc
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x36bb900
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x36bb888
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x36bb810
	bool PlayerStopFollow();// 0x36bb7e8
	bool PlayerConfirmToFollow();// 0x36bb7c0
	void InitializeOwner(Pawn* _TempPawn);// 0x36bb748
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x36bb6d0
	bool FollowingState_IsConditionSatisfied();// 0x36bb6a8
	void FollowingState_ActOnUnsatisfied();// 0x36bb694
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x36bb61c

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x35bc7fc
	byte Start();// 0x34533b0
	bool IsValidate();// 0x3594ad0
	void DebugDraw(Color DebugColor, bool isPersist);// 0x383aa40
	void Awake();// 0x35bc7e0

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x7c, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x80, Size: 4]
	byte Update(float DeltaTime);// 0x3431260
	FString ToString();// 0x383ab04
	void TaskRemoved();// 0x35bc7fc
	byte Start();// 0x34533b0
	bool IsValidate();// 0x3594ad0
	bool IsReachable();// 0x34f26c4
	byte Finish();// 0x34f2818
	void DebugDraw(Color DebugColor, bool isPersist);// 0x383aa40
	void Awake();// 0x35bc7e0

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x3f8, Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x3fc, Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x400, Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x404, Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 1]
	float ResultMinPitch;//[Offset: 0x434, Size: 4]
	float ResultMaxPitch;//[Offset: 0x438, Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	bool bCameraTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x44c, Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x450, Size: 32]
	CameraOffsetData ProneCameraData;//[Offset: 0x470, Size: 32]
	CameraOffsetData IndoorCameraData;//[Offset: 0x490, Size: 32]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x4b0, Size: 32]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x4d0, Size: 32]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x4f0, Size: 32]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x510, Size: 32]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x530, Size: 32]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x550, Size: 32]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x570, Size: 32]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x590, Size: 32]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x5b0, Size: 32]
	CameraOffsetData VaultCameraData;//[Offset: 0x5d0, Size: 32]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x5f0, Size: 32]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x610, Size: 32]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x630, Size: 32]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x650, Size: 32]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x670, Size: 32]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x690, Size: 32]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x6b0, Size: 32]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x6d0, Size: 4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x6d4, Size: 4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x6d8, Size: 4]
	CameraOffsetData InsectCameraData;//[Offset: 0x6dc, Size: 32]
	CameraOffsetData SkillCameraData;//[Offset: 0x6fc, Size: 32]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x720, Size: 32]
	CameraOffsetData CustomCameraData;//[Offset: 0x740, Size: 32]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 1]
	bool bUseFixedTraceTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x761, Size: 1]
	bool bAllwaysDoTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x762, Size: 1]
	Vector TraceTagetLocation;//[Offset: 0x764, Size: 12]
	float AdditionalSocketOffetZMax;//[Offset: 0x774, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x778, Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x780, Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x784, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x788, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x795, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x796, Size: 1]
	float OffsetCountTime;//[Offset: 0x798, Size: 4]
	float OffSetDurTime;//[Offset: 0x79c, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x7a0, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x7a4, Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0x7b0, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x7e0, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x7f0, Size: 16]
	void SetSelfieCameraDefRotation();// 0x345f16c
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x345f0ec
	void SetCustomCameraDataValueEnable(CameraOffsetData InCustomCameraData, bool IsEnable);// 0x345efdc
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x345eecc
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x345ee08
	void ResetFreeCamera();// 0x345edf4
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x345ec88
	void DelayRotationLagEnabledEnd();// 0x345ec74
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x345ebac
	void DelayRotationBackLagEnabledEnd();// 0x345eb98
	void DelayRotationBackLagEnabled(bool bEnabled, float Time, out const Rotator InRotation);// 0x345ea80
	void AddAdditiveCameraOffset(out const Transform Transform, float FOV, bool bAdd);// 0x345e910

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bForceUseTargetArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	float SocketOffsetInterpSpeed;//[Offset: 0x31c, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x320, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x324, Size: 4]
	float SpringArmInterpSpeedScale;//[Offset: 0x328, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x32c, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x36c, Size: 32]
	CameraOffsetData DefaultCameraData;//[Offset: 0x38c, Size: 32]
	float CurAdditiveOffsetFov;//[Offset: 0x3ac, Size: 4]
	<byte,bool> CurActiveDataMap;//[Offset: 0x3b0, Size: 60]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x3f0, Size: 4]
	void OnRespawned();// 0x33e1b80
	bool HasActiveCameraOffsetData(byte InDataType);// 0x37fd5bc
	Rotator GetTargetRotation();// 0x37fd56c
	float GetCameraTargetArmLength();// 0x37fd53c
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x345ec88
	void ClearCameraData();// 0x37fd520

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 4]
	Vector AkLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int StatusChangeMargin;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int WeaponID;//[Offset: 0x1c, Size: 4]
	int FloorType;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x6d4, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x6d8, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x6dc, Size: 4]
	bool bUGCServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool bServerMoveCheckPassBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	Box PassBound;//[Offset: 0x6e4, Size: 28]
	bool bAbandonReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	float MaxPrisonmentMove;//[Offset: 0x704, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x709, Size: 1]
	bool bPlatformIgnoreNullBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70a, Size: 1]
	float MaxFollowPlatformDistance;//[Offset: 0x70c, Size: 4]
	bool bFixedMoveByCurveVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool bNotUseClientCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x72c, Size: 4]
	float EnterShovelCD;//[Offset: 0x730, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x734, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x738, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x73c, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x740, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x744, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x748, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x74c, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x750, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x754, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x758, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x75c, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x760, Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x764, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x768, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x770, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x774, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x778, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x77c, Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x780, Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x784, Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x788, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x78c, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x790, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x794, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x798, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x79c, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x7a0, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x7a4, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x7a8, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x7b0, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x7c8, Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x7cc, Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x7d0, Size: 4]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d4, Size: 1]
	bool bIgnoreClientMovementModeSkillChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d4, Size: 1]
	float nowShovelingSpeed;//[Offset: 0x7d8, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x7dc, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e9, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x7eb, Size: 1]
	float PreShovelFov;//[Offset: 0x7ec, Size: 4]
	delegate OnClientAdjustPosition;//[Offset: 0x804, Size: 12]
	delegate OnCharacterServerMoveDelegate;//[Offset: 0x810, Size: 12]
	delegate OnShovelStateChangeForBP;//[Offset: 0x81c, Size: 12]
	delegate PostServerMoveDelegate;//[Offset: 0x828, Size: 12]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x83c, Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x844, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x84c, Size: 4]
	bool bIgnoreChangingMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool bIgnoreMovementBaseMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	bool bEnableAdjustFloorHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x852, Size: 1]
	bool bEnableJumpOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x853, Size: 1]
	float JumpOffVelocityFactor;//[Offset: 0x854, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x85c, Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x860, Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x860, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x864, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x868, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x86c, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x870, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x874, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x878, Size: 4]
	HitResult WalkHit;//[Offset: 0x880, Size: 144]
	float WalkSpeedCurveScale;//[Offset: 0x910, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x914, Size: 4]
	float ProneFloorAngle;//[Offset: 0x918, Size: 4]
	float ProneFloorZ;//[Offset: 0x91c, Size: 4]
	float JumpFloorAngle;//[Offset: 0x920, Size: 4]
	float JumpFloorZ;//[Offset: 0x924, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x928, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x92c, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x930, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x934, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x938, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x954, Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x956, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x958, Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 1]
	float AdjustRotationWhenProneFailedThrehold;//[Offset: 0x960, Size: 4]
	float CurrentEnterShovelCD;//[Offset: 0xa48, Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 1]
	float CheckDistanceAhead;//[Offset: 0xa50, Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa54, Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0xa58, Size: 4]
	float BaseSolvedWallCheckDistance;//[Offset: 0xa6c, Size: 4]
	float BaseSolvedWallTraceDistance;//[Offset: 0xa70, Size: 4]
	float BaseSolvedWallOutDistance;//[Offset: 0xa74, Size: 4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0xa78, Size: 4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 1]
	float fStepDownEdgeToleranceRate;//[Offset: 0xa80, Size: 4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0xa84, Size: 4]
	float MaxBaseStepUpHeight;//[Offset: 0xa88, Size: 4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8c, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0xa90, Size: 12]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0xaa8, Size: 12]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0xab4, Size: 4]
	float AIMovementSimulatePredictTime;//[Offset: 0xacc, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0xad4, Size: 4]
	float SimulateNotReceiveMoveResetSeconds;//[Offset: 0xae8, Size: 4]
	float SimulateNotReceiveStopPredictionSeconds;//[Offset: 0xaec, Size: 4]
	float MaxFlyAcceleration;//[Offset: 0xb00, Size: 4]
	SimulateRepData[] CacheSimulateRepMoves;//[Offset: 0xb28, Size: 12]
	float fSimulateInterpolateSmoothLocationTime;//[Offset: 0xb3c, Size: 4]
	int nMaxSimulateCacheNum;//[Offset: 0xb70, Size: 4]
	float fServerMoveNetLagScaleSecMin;//[Offset: 0xb78, Size: 4]
	float fServerMoveNetLagScaleSecMax;//[Offset: 0xb7c, Size: 4]
	float fServerMoveAllowDiscrepancySquare;//[Offset: 0xb80, Size: 4]
	float fSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xb84, Size: 4]
	float fNoSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xb88, Size: 4]
	float fLessThanSkipProxyPredictionOnNetUpdateCosTheta;//[Offset: 0xb8c, Size: 4]
	float fSimulatePredictionNoAttenuationSec;//[Offset: 0xb90, Size: 4]
	float fSimulatePredictionAttenuationSecMax;//[Offset: 0xb94, Size: 4]
	float fSimulatePredictionAttenuationRate;//[Offset: 0xb98, Size: 4]
	float fSimulatePredictionAttenuationRateNearlyNoChg;//[Offset: 0xb9c, Size: 4]
	SimulateDragThesholds[] SimulateDragThesholds;//[Offset: 0xba4, Size: 12]
	ServerMoveData[] CacheServerMoves;//[Offset: 0xbb4, Size: 12]
	ServerMoveData[] BatchServerMoves;//[Offset: 0xbc0, Size: 12]
	ServerMoveData LastServerMove;//[Offset: 0xbd8, Size: 72]
	ServerMoveData ProcessServerMove;//[Offset: 0xc20, Size: 72]
	float ServerMoveDeltaTimeBatchRateMax;//[Offset: 0xc68, Size: 4]
	ServerReceiveMove LastServerReceiveMove;//[Offset: 0xc84, Size: 28]
	float ServerMoveNetErrorInternal;//[Offset: 0xca0, Size: 4]
	float DSMoveSpeedLimitOverMaxSpeedTimes;//[Offset: 0xca8, Size: 4]
	float DSMoveSpeedLimitDeltaSecondsMax;//[Offset: 0xcac, Size: 4]
	float DSMoveSpeedLimitIsWeakNetPingMSec;//[Offset: 0xcb0, Size: 4]
	float DSMoveSpeedLimitLowFPSRate;//[Offset: 0xcb4, Size: 4]
	bool bAllowDSSpeedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 1]
	ResolvePenetrationMoveData ResolvePenetrationData;//[Offset: 0xd10, Size: 72]
	delegate OnResolvePenetrationDelegate;//[Offset: 0xd58, Size: 12]
	float CacheLastValidMoveDistance;//[Offset: 0xd64, Size: 4]
	float CacheLastValidMaxDistance;//[Offset: 0xd68, Size: 4]
	ResolvePenetrationParams ResolvePenetrationParams;//[Offset: 0xd6c, Size: 68]
	float EngineResolvePenetrationMaxDistance;//[Offset: 0xdb0, Size: 4]
	float PushAwayForbidSetBaseSeconds;//[Offset: 0xdb4, Size: 4]
	int PenetrationUnResolveCount;//[Offset: 0xdb8, Size: 4]
	float PenetrationUnResolveDistanceSq;//[Offset: 0xdbc, Size: 4]
	float CheckResolvePenetrationSeconds;//[Offset: 0xdc0, Size: 4]
	float ResolvePenetrationSwitchPoseCD;//[Offset: 0xdcc, Size: 4]
	float CheckResolvePenetrationDepth;//[Offset: 0xdd0, Size: 4]
	float CheckResolvePenetrationDistance;//[Offset: 0xdd4, Size: 4]
	CustomSkillMoveData DirectMoveData;//[Offset: 0xde8, Size: 40]
	CustomSkillMoveData AirJumpData;//[Offset: 0xe10, Size: 40]
	PrimitiveComponent* CurrentClientMovementBase;//[Offset: 0xe4c, Size: 4]
	float ComputeFloorConsiderClientPosDiffSizeSqMax;//[Offset: 0xe58, Size: 4]
	float SkilDirectMoveInertiaRatio;//[Offset: 0xe78, Size: 4]
	float SkilAirJumpJoystickForceSize;//[Offset: 0xe7c, Size: 4]
	SimulateDragData SimulateDragData;//[Offset: 0xe80, Size: 40]
	bool bTrustClientLandingOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	bool bPassWallCheckOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed1, Size: 1]
	bool bAllowBeBlewUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed2, Size: 1]
	float BlewSpeedRatio;//[Offset: 0xed4, Size: 4]
	float IgnoreAllBlowTime;//[Offset: 0xed8, Size: 4]
	float IgnoreLastBlowTime;//[Offset: 0xedc, Size: 4]
	float BlendingAdjustTime;//[Offset: 0xee0, Size: 4]
	bool bAllowBePushedAway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee4, Size: 1]
	float NearPushBaseDistance;//[Offset: 0xee8, Size: 4]
	float TangentialSpeedRatio;//[Offset: 0xeec, Size: 4]
	float NormalSpeedRatio;//[Offset: 0xef0, Size: 4]
	bool bBlockedByStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef4, Size: 1]
	PrimitiveComponent* StandingBase;//[Offset: 0xf50, Size: 4]
	bool bUseNewActorMarkTeleportTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf54, Size: 1]
	bool UpdatedComponentWithBase(float DeltaSeconds, Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x36bfe44
	void ToggleUserCmdDelta(bool Val);// 0x36bfd8c
	void TimeSpeedCheck(bool Val);// 0x36bfcd4
	void SeverReportSimulateDrag(int OldDragCount, int DragCount, int ShakeCount);// 0x36bfb90
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x36bfae4
	void SetPushBase(PrimitiveComponent* NewBase, const FName BoneName, bool bPushedByBase, bool bNotifyActor);// 0x36bf97c
	void SetProneFloorZ(float InProneFloorZ);// 0x36bf904
	void SetProneFloorAngle(float InProneFloorAngle);// 0x36bf88c
	void SetPassBoundBox(out Vector BoxMin, out Vector BoxMax);// 0x36bf7b4
	void SetOpenServerControlPunish(const bool bIsOpen);// 0x36bf738
	void SetLastTickFrameCounter(uint64 Frame);// 0x36bf6bc
	void SetJumpFloorZ(float InJumpFloorZ);// 0x36bf644
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x36bf5cc
	void SetImmedSendMoveFrameCounter(uint64 Frame);// 0x36bf550
	void SetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x36bf438
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x36bf30c
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x36bf070
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd);// 0x36bee60
	void ServerStartBlowUpCharacter(float TimeStamp, int BlowID, Vector_NetQuantize10 LaunchVel, Actor* HitActor, PrimitiveComponent* HitComponent);// 0x36bec68
	void ResetSimulateMoveCaches(bool bDestroy);// 0x36bebe8
	void ReleaseServerMoveCache();// 0x36bebd4
	void RefreshCharacterWithBase();// 0x36bebc0
	void ProcessCacheSimulateRepMove(float DeltaSeconds, bool bReset);// 0x36beafc
	void Ping2Server(float ServerTime, float ClientTime);// 0x36bea10
	void Ping2Client(float ServerTime);// 0x36be998
	bool PhysMoveByCurve(out const Vector DeltaMove, float DeltaSeconds);// 0x36be8c4
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x36be7fc
	void OnRespawned();// 0x36be7e0
	void OnRecycled();// 0x36be7c4
	void OnRecoverOnServer();// 0x36be7a8
	void OnPreReconnectOnServer();// 0x36be794
	void OnClientCloseUserCmdDelta();// 0x36be780
	void MaybeGotoFalling();// 0x36be76c
	void K2_SaveBaseLocation();// 0x36be758
	float K2_GetProneFloorZ();// 0x36be730
	float K2_GetProneFloorAngle();// 0x36be708
	FString K2_GetMovementName();// 0x36be640
	float K2_GetJumpFloorZ();// 0x36be618
	float K2_GetJumpFloorAngle();// 0x36be5f0
	bool IsWalkable(out const HitResult Hit);// 0x36be508
	bool IsStandingOnBase();// 0x36be4e0
	bool IsSimulateWeakNetworkOptimize();// 0x36be4b8
	bool IsProning();// 0x36be490
	bool IsOpenServerControlPunish();// 0x36be474
	bool IsNearPushBase();// 0x36be44c
	bool IsInImmedSendMoveFrame();// 0x36be424
	bool IsBeingPushed();// 0x36be3fc
	bool IsBeingBlew();// 0x36be3d4
	bool IsAutonomousWeakNetworkOptimize();// 0x36be3ac
	bool IsActorShouldMarkTeleportTime(Actor* PtrActor);// 0x36be32c
	uint32 GetUserCmdSequence();// 0x36be304
	STExtraBaseCharacter* GetSTCharacter();// 0x36be2dc
	PrimitiveComponent* GetRealStandingBase();// 0x36be2b4
	Vector GetPendingImpulse();// 0x36be290
	Vector GetLocationOffsetToBase();// 0x36be248
	uint64 GetLastTickFrameCounter();// 0x36be220
	float GetLastServerMoveTime();// 0x36be1f8
	float GetJogFactor();// 0x33a3d0c
	bool GetIsOpenShovelingAbility();// 0x36be1d0
	Vector GetImpartedMovementBaseVelocity();// 0x36be180
	uint64 GetImmedSendMoveFrameCounter();// 0x36be158
	void GetHistoryValidLocationAndRotation(out Vector OutLoc, out Rotator OutRot);// 0x36be080
	float GetHasPredictionSeconds(Vector PredictionDeltaLoc, Vector PredictionVelocity);// 0x36bdfb8
	Vector GetComputeFloorDistStartLocation();// 0x36bdf70
	float GetClientCurrentSeconds();// 0x36bdf48
	Vector GetBaseLocation();// 0x36bdf00
	Vector GetAcceleration();// 0x36bdeb8
	void EnterDirectMove(out const Vector Speed, float Time, CurveFloat* SpeedCurve);// 0x36bdda8
	void EnterAirJump(out const Vector Speed, float Time, CurveFloat* SpeedCurve);// 0x36bdc98
	bool DragOnGround(float DeltaTime);// 0x36bdc18
	void DisableSimulateCorrection(bool bDisable);// 0x36bdb98
	void DelayCheckResolvePenatration(float DelayTime);// 0x36bdb20
	void DebugMovementDetail(FString Caller, out const Vector OldLocation, out const Rotator OldRotation, float DeltaSeconds, bool bForceLog);// 0x36bd924
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x36bd67c
	void ClientUserMoveCmdAck(int Sequence);// 0x36bd604
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x36bd2fc
	void CheckResolvePenatration(float DeltaTime);// 0x36bd284
	void ChangePhysxShapeFlag();// 0x3365b48
	Vector CalcBlowUpVelocity(Vector HitNormal, Vector HitCompVelocity);// 0x36bd1a8
	void CacheSimulateRepMove(out const RepMovement RepMove, float ServerTimeStamp);// 0x36bd0d4
	void AllowDSSpeedCheck(bool bAllow);// 0x36bd054
	bool AllowClientLocationWithDSPrediction(out const Vector InClientLoc, float NetLagDiffScale);// 0x36bcf80

--------------------------------
Class: CharacterDistanceSquareTickInternal
	float DistanceSquare;//[Offset: 0x0, Size: 4]
	float TickInternal;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimulateRepData
	RepMovement RepMovement;//[Offset: 0x18, Size: 72]

--------------------------------
Class: SimulateDragThesholds
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float DragDistanceSq;//[Offset: 0x4, Size: 4]
	float ShakeVelocityDiffSize;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ServerMoveData
	PrimitiveComponent* ClientMovementBase;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ServerReceiveMove

--------------------------------
Class: ResolvePenetrationMoveData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	PrimitiveComponent* PushAwayBase;//[Offset: 0x1c, Size: 4]
	Vector ValidLocation;//[Offset: 0x20, Size: 12]
	Rotator ValidRotation;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: ResolvePenetrationParams
	bool bLineTracePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bBackDirAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int IterationRounds;//[Offset: 0x4, Size: 4]
	int IterationDirections;//[Offset: 0x8, Size: 4]
	float AdjustRadius;//[Offset: 0xc, Size: 4]
	float AdjustMaxHeight;//[Offset: 0x10, Size: 4]
	FString IgnoreTag;//[Offset: 0x14, Size: 12]
	float OverlapShapeInflation;//[Offset: 0x20, Size: 4]
	float PassWallShapeInflation;//[Offset: 0x24, Size: 4]
	World* InWorld;//[Offset: 0x28, Size: 4]
	Actor*[] OverlapIgnoreActors;//[Offset: 0x2c, Size: 12]
	Actor*[] PassWallIgnoreActors;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CustomSkillMoveData
	CurveFloat* SpeedCurve;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SimulateDragData
	float ReportSimulateDragConfigSeconds;//[Offset: 0x0, Size: 4]
	float ReportSimulateDragSeconds;//[Offset: 0x4, Size: 4]
	float ReportSimulateDragTimer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SimLocalViewData
	float ViewPitch;//[Offset: 0x0, Size: 4]
	float ViewYaw;//[Offset: 0x4, Size: 4]
	float ViewRoll;//[Offset: 0x8, Size: 4]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	byte ViewRoll;//[Offset: 0x4, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: InteractiveMoveActor.LuaActor.Actor.Object
	class InteractiveActorMoveComponent* MoveComponent;//[Offset: 0x398, Size: 4]
	byte InteractiveMoveType;//[Offset: 0x39c, Size: 1]
	bool InFPPViewPitchLimitMaxEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	float InFPPViewPitchLimitMin;//[Offset: 0x3a0, Size: 4]
	float InFPPViewPitchLimitMax;//[Offset: 0x3a4, Size: 4]
	float InFPPViewYawLimit;//[Offset: 0x3a8, Size: 4]

--------------------------------
Class: InteractiveActorMoveComponent.MovementComponent.ActorComponent.Object
	InteractiveMoveActor* TargetActor;//[Offset: 0xf4, Size: 4]
	void OnRep_TargetActorNotify(InteractiveMoveActor* IMActor);// 0x3537b78
	bool IsT();// 0x3537b48
	bool IsInInteractiveState();// 0x3537b18
	void HandleJumpInput();// 0x3537afc
	void HandleEnterInput();// 0x337df5c

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xbc, Size: 4]
	int DetectThreshold;//[Offset: 0xc0, Size: 4]
	float FoldFactor;//[Offset: 0xc4, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xc8, Size: 4]
	Vector BoxHalfSize;//[Offset: 0xd4, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe0, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xec, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0xf8, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x104, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x110, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x114, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x120, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x12c, Size: 12]
	int FoldFactorDelt;//[Offset: 0x138, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x13c, Size: 4]
	int TraceDis;//[Offset: 0x140, Size: 4]
	float TickDeltTime;//[Offset: 0x144, Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x150, Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x35d8324
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x35d81ec

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x100, Size: 12]
	float OnVehicleWaterSufaceOffset;//[Offset: 0x10c, Size: 4]
	float MaxBreathAmount;//[Offset: 0x110, Size: 4]
	float DrowningHurtHight;//[Offset: 0x114, Size: 4]
	float SwimWaterNearHeight;//[Offset: 0x118, Size: 4]
	float SwimWaterBodyOffset;//[Offset: 0x11c, Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0x120, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x124, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x128, Size: 4]
	float BreathDeltaTime;//[Offset: 0x12c, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x130, Size: 4]
	float MinSpeedScale;//[Offset: 0x134, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x138, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x13c, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x140, Size: 4]
	float RollMaxAngle;//[Offset: 0x144, Size: 4]
	float DistoVolume;//[Offset: 0x148, Size: 4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	float DefaultWaterHeight;//[Offset: 0x150, Size: 4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x16c, Size: 4]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	float CheckCharacterInWaterInternal;//[Offset: 0x174, Size: 4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x178, Size: 4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x180, Size: 4]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x184, Size: 4]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x188, Size: 4]
	float DyingSwimSpeedRate;//[Offset: 0x18c, Size: 4]
	bool bDyingSwimChangeCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	void UpdateSwimCollisionHeightCpp();// 0x35e8270
	void PlayerHealthStatusChange();// 0x35e825c
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x35e81e4
	void OnPawnExitParachute();// 0x35e81d0
	void LeaveWater();// 0x35e81bc
	Actor* GetWaterObject();// 0x35e8194
	void EnterWater_BluePrint();// 0x446e168
	void EnterWater(Actor* WaterObject);// 0x35e811c
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x446e168

--------------------------------
Class: WeaponRecordDataForReplay
	int WeaponID;//[Offset: 0x0, Size: 4]
	byte HeadShoot;//[Offset: 0x4, Size: 1]
	byte LimbsShoot;//[Offset: 0x5, Size: 1]
	byte BodyShoot;//[Offset: 0x6, Size: 1]
	byte HandShoot;//[Offset: 0x7, Size: 1]
	byte FootShoot;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xf4, Size: 4]
	float PickUpZLimit;//[Offset: 0xf8, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x100, Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x10c, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0x110, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x114, Size: 4]
	Vector2D RegionXRange;//[Offset: 0x118, Size: 8]
	Vector2D RegionYRange;//[Offset: 0x120, Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x12c, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x138, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x13c, Size: 4]
	float DrawTime;//[Offset: 0x140, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x148, Size: 4]
	<SearchedPickUpItemResult,float> RecentAutoPickupMap;//[Offset: 0x14c, Size: 60]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x188, Size: 12]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x194, Size: 12]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x35c5610
	void ServerPutDownTarget(Actor* Target);// 0x35c555c
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x35c53c8
	void ServerPickUpAttachmentTarget(Actor* Target, const PickUpItemData ItemData, enum PickupAttachmentAdditionalDataType, ItemDefineID TargetDefineID);// 0x35c5150
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x35c5090
	void PutDownTarget(Actor* Target);// 0x35c5018
	void PickUpTargetAttachment(Actor* Target, out const PickUpItemData ItemData, enum PickupAttachmentAdditionalDataType, ItemDefineID TargetDefineID);// 0x35c4de4
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x35c4c9c
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x35c4c24
	void NotifyMeetPickupAvailableActor(Actor* Target, bool bUpdatePickupManager);// 0x35c4b60
	void MarkRecentAutoPickUp(SearchedPickUpItemResult PickUpResult);// 0x35c48fc
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x35c486c
	Vector[] GetNearItemLocationList(out const Vector TargetLoc, float Radius, float IgnoreDist, uint32[] ItemIDs);// 0x35c459c
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x35c4490
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x35c438c
	void ControlClientPutDownTarget(Actor* Target);// 0x35c42d8
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x35c41dc
	void ControlClientPickUpAttachmentTarget(Actor* Target, int AdditionalParam, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x35c4028
	void ClampWorldLocation(out Vector OutVector);// 0x35c3fa4
	bool CheckRecentAutoPickUp(SearchedPickUpItemResult PickUpResult, float OverTime);// 0x35c3cf4

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 48]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x4b8, Size: 4]
	float AttachCheckDistance;//[Offset: 0x4bc, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x4c0, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x4c4, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4c8, Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4e4, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4f0, Size: 12]
	int LastCreateFailedWeaponID;//[Offset: 0x504, Size: 4]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x34392c4
	void UpdateDataWhenBagChangedOnAutonomous();// 0x34392b0
	void RPC_Client_ResyncWeaponSpawnData(const SpawnAndBackpackWeaponReplicatedData[] SpawnWe);// 0x3439154
	void OnRecoverOnServer();// 0x3439138
	void OnReconnectOnServer();// 0x343911c
	void OnReconnectOnClient();// 0x3439100
	void OnDisconnectToClientOnServer();// 0x34390ec
	int GetBagLevel();// 0x337d090

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4, Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0xc, Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x10, Size: 4]
	AnimationAsset* IdleMotorBikeDirverLeaningAnim;//[Offset: 0x14, Size: 4]
	AnimationAsset* IdleMotorBikeDirverLeaningLowSpeedAnim;//[Offset: 0x18, Size: 4]
	AnimationAsset* MotorBikeDirverLeaningGroundPitchAnim;//[Offset: 0x1c, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOffAnim;//[Offset: 0x20, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOffAnim;//[Offset: 0x24, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOffAnim;//[Offset: 0x28, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOffAnim;//[Offset: 0x2c, Size: 4]
	AnimationAsset* PassengerDriverOffAimAim;//[Offset: 0x30, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleLeaningAnim;//[Offset: 0x34, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOnAnim;//[Offset: 0x38, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOnAnim;//[Offset: 0x3c, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOnAnim;//[Offset: 0x40, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOnAnim;//[Offset: 0x44, Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x48, Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x4c, Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x50, Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x54, Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x58, Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x5c, Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x60, Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x64, Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x68, Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x6c, Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x70, Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x74, Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x78, Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x7c, Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x80, Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x84, Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x88, Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x8c, Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x90, Size: 4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x94, Size: 4]
	AnimationAsset* VehicleWeaponEquipAnim;//[Offset: 0x98, Size: 4]
	AnimationAsset* VehicleWeaponUnEquipAnim;//[Offset: 0x9c, Size: 4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0xa0, Size: 4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0xa4, Size: 4]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0xa8, Size: 4]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0xac, Size: 4]
	AnimationAsset* VehicleDriverForwardAnim;//[Offset: 0xb0, Size: 4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	float VacateHight;//[Offset: 0x8, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 12]
	enum SeatWeaponHoldType;//[Offset: 0x28, Size: 1]
	enum SeatSpecialType;//[Offset: 0x29, Size: 1]
	enum VehicleType;//[Offset: 0x2a, Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	float DamageReduceScaleExtra;//[Offset: 0xc, Size: 4]
	float DamageReduceScaleIgnoreDurability;//[Offset: 0x10, Size: 4]
	float BrokenArmorDamageReduceScale;//[Offset: 0x14, Size: 4]
	float DurabilityReduceScale;//[Offset: 0x18, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x1c, Size: 12]
	float MomentumResistance;//[Offset: 0x28, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BackpackReplayData
	float TPlanTotalValue;//[Offset: 0x0, Size: 4]
	BackpackReplayItem[] ReplayItems;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BackpackReplayItem
	int ItemID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]
	uint64 ItemState;//[Offset: 0x10, Size: 8]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 12]
	float EnergyMax;//[Offset: 0xc, Size: 4]
	float EnergyCurrent;//[Offset: 0x10, Size: 4]
	float EnergyPredict;//[Offset: 0x14, Size: 4]
	float AttenuationPeriod;//[Offset: 0x18, Size: 4]
	float AttenuationAmount;//[Offset: 0x1c, Size: 4]
	float PassedDeltaTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FString BuffName;//[Offset: 0x4, Size: 12]
	int BuffID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140, Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 12]
	byte ShowType;//[Offset: 0xc, Size: 1]
	float Value;//[Offset: 0x10, Size: 4]
	float LimitValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	GameBaseInfo GameBaseInfo;//[Offset: 0x130, Size: 104]
	UAEGameMode* UAEGM;//[Offset: 0x198, Size: 4]
	void ServerSendGameStartFlow(out const ClientGameStartF ClientGameStartFlow);// 0x3642b98
	void ServerSendGameEndFlow(out const ClientGameEndFlow ClientGameEndFlow);// 0x3642ae8
	void ReportVerifyInfoFlow();// 0x3642a8c
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x36429bc
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x36428cc
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x36427dc
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x364270c
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x364263c
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x364250c
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x36423dc
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x36422d8
	void ReportGameSetting(const GameSetting GameSetting);// 0x36421e8
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x3642118
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x3642018
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x3641f48
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x3641e78
	void ReportAimFlow(const AimFlow AimFlow);// 0x3641da8
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x3641d18
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponID, out int BulletID, out int BulletNum);// 0x3641b54
	void CheckSendGameStartFlow();// 0x3641b40
	void CheckSendGameEndFlow();// 0x3641b2c

--------------------------------
Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherID;//[Offset: 0x20, Size: 1]
	FString ItemList;//[Offset: 0x24, Size: 12]
	int8 TeamType;//[Offset: 0x30, Size: 1]
	int TeamID;//[Offset: 0x34, Size: 4]
	FString TeamPlayer1;//[Offset: 0x38, Size: 12]
	FString TeamPlayer2;//[Offset: 0x44, Size: 12]
	FString TeamPlayer3;//[Offset: 0x50, Size: 12]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x5c, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x60, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x6c, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x78, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString ClientVersion;//[Offset: 0x14, Size: 12]
	uint32 OverTime;//[Offset: 0x20, Size: 4]
	int8 EndType;//[Offset: 0x24, Size: 1]
	byte KillCount;//[Offset: 0x25, Size: 1]
	byte AssistsCount;//[Offset: 0x26, Size: 1]
	byte DropCount;//[Offset: 0x27, Size: 1]
	byte SaveCount;//[Offset: 0x28, Size: 1]
	byte RebornCount;//[Offset: 0x29, Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]
	int GoldGet;//[Offset: 0x2c, Size: 4]
	int DiamondGet;//[Offset: 0x30, Size: 4]
	int ExpGet;//[Offset: 0x34, Size: 4]
	byte WinRank;//[Offset: 0x38, Size: 1]
	byte TotalPlayers;//[Offset: 0x39, Size: 1]
	int PlayerRank;//[Offset: 0x3c, Size: 4]
	int RankEnd;//[Offset: 0x40, Size: 4]
	int TeamID;//[Offset: 0x44, Size: 4]
	FString TeamPlayer1;//[Offset: 0x48, Size: 12]
	FString TeamPlayer2;//[Offset: 0x54, Size: 12]
	FString TeamPlayer3;//[Offset: 0x60, Size: 12]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x6d, Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x6e, Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x6f, Size: 1]
	uint32 GameEndFlowID;//[Offset: 0x70, Size: 4]
	byte RoundCircleCount;//[Offset: 0x74, Size: 1]
	int[] UseQuickMsgIDArray;//[Offset: 0x78, Size: 12]
	int[] UseQuickMsgCountArray;//[Offset: 0x84, Size: 12]
	int[] UseWheelMsgIDArray;//[Offset: 0x90, Size: 12]
	int[] UseWheelMsgCountArray;//[Offset: 0x9c, Size: 12]
	int[] InexistentAvatarStat;//[Offset: 0xa8, Size: 12]
	int[] InexistentAvatarInBornStat;//[Offset: 0xb4, Size: 12]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xc0, Size: 12]
	int[] InexistentVehicleAvatarStat;//[Offset: 0xcc, Size: 12]
	int InexistentPlaneAvatarStat;//[Offset: 0xd8, Size: 4]
	int InexistentEmoteAvatarStat;//[Offset: 0xdc, Size: 4]
	byte ShowMsgCnt;//[Offset: 0xe0, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xe1, Size: 1]
	byte UserCancelCnt;//[Offset: 0xe2, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xe3, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xe4, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xe8, Size: 4]
	float TeammateMicrophoneTime;//[Offset: 0xec, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xf0, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xf4, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xf8, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xfc, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x100, Size: 4]
	byte PlayerUseQuickSight;//[Offset: 0x104, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0x105, Size: 1]
	int PlayerMoveSpeedMax;//[Offset: 0x108, Size: 4]

--------------------------------
Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	FString TargetUserName;//[Offset: 0x58, Size: 12]
	FString TargetOpenID;//[Offset: 0x64, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x70, Size: 8]
	FString HitPart;//[Offset: 0x78, Size: 12]
	int GunID;//[Offset: 0x84, Size: 4]
	byte PlayerKill;//[Offset: 0x88, Size: 1]
	uint64 AttackFlowID;//[Offset: 0x90, Size: 8]
	int KillAICnt;//[Offset: 0x98, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x9c, Size: 4]
	int16 BulletDown;//[Offset: 0xa0, Size: 2]

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 44]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x34, Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x3c, Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x44, Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x4c, Size: 136]
	GameSetting_PickUp PickUp;//[Offset: 0xd4, Size: 56]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int LRShootMode;//[Offset: 0x14, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int LeftHandFire;//[Offset: 0x1c, Size: 4]
	int Gyroscope;//[Offset: 0x20, Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool ShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0, Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 4]
	int DrivingViewMode;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 40]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x38, Size: 40]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x60, Size: 40]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 4]
	float ParachuteEye;//[Offset: 0x4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float CamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float CamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float FireCamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float FireCamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 4]
	float GyroscopeShoulderSniper;//[Offset: 0x20, Size: 4]
	float GyroscopeShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4, Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c, Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 4]
	int Bandage;//[Offset: 0x4, Size: 4]
	int PainKiller;//[Offset: 0x8, Size: 4]
	int Adrenaline;//[Offset: 0xc, Size: 4]
	int EnergyDrink;//[Offset: 0x10, Size: 4]
	int FirstAidKit;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 4]
	int ShockBomb;//[Offset: 0x4, Size: 4]
	int SmokeBomb;//[Offset: 0x8, Size: 4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponID;//[Offset: 0x0, Size: 4]
	int BulletCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString TargetOpenID;//[Offset: 0x7c, Size: 12]
	FString TargetUserName;//[Offset: 0x88, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x98, Size: 8]
	int8 TargetRoleType;//[Offset: 0xa0, Size: 1]
	FString GunName;//[Offset: 0xa4, Size: 12]
	FString GunPartsType;//[Offset: 0xb0, Size: 12]
	int8 SightType;//[Offset: 0xbc, Size: 1]
	int BulletSpeed;//[Offset: 0xc0, Size: 4]
	int8 MagazineMax;//[Offset: 0xc4, Size: 1]
	int8 MagazineLeft;//[Offset: 0xc5, Size: 1]
	int ShotFrequency;//[Offset: 0xc8, Size: 4]
	int BulletDamage;//[Offset: 0xcc, Size: 4]
	int16 BulletDown;//[Offset: 0xd0, Size: 2]
	byte BulletDamageReduce;//[Offset: 0xd2, Size: 1]
	int Recoil;//[Offset: 0xd4, Size: 4]
	int ReloadTime;//[Offset: 0xd8, Size: 4]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	byte ShotPose;//[Offset: 0xe8, Size: 1]
	byte FireType;//[Offset: 0xe9, Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 1]
	byte Sideways;//[Offset: 0xeb, Size: 1]
	int ShootingDeviationX;//[Offset: 0xec, Size: 4]
	int ShootingDeviationY;//[Offset: 0xf0, Size: 4]
	uint32 ZeroDistance;//[Offset: 0xf4, Size: 4]
	uint32 ShotTime;//[Offset: 0xf8, Size: 4]
	int HitTime;//[Offset: 0xfc, Size: 4]
	int PlayerPositionX;//[Offset: 0x100, Size: 4]
	int PlayerPositionY;//[Offset: 0x104, Size: 4]
	int PlayerPositionZ;//[Offset: 0x108, Size: 4]
	int GunPositionX;//[Offset: 0x10c, Size: 4]
	int GunPositionY;//[Offset: 0x110, Size: 4]
	int GunPositionZ;//[Offset: 0x114, Size: 4]
	int BulletsBornPositionX;//[Offset: 0x118, Size: 4]
	int BulletsBornPositionY;//[Offset: 0x11c, Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x120, Size: 4]
	uint32 LastHitTime;//[Offset: 0x124, Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x128, Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x12c, Size: 4]
	int HitPositionX;//[Offset: 0x130, Size: 4]
	int HitPositionY;//[Offset: 0x134, Size: 4]
	int HitPositionZ;//[Offset: 0x138, Size: 4]
	byte HitPart;//[Offset: 0x13c, Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 1]
	byte BulletCost;//[Offset: 0x13e, Size: 1]
	int HPstart;//[Offset: 0x140, Size: 4]
	int HPEnd;//[Offset: 0x144, Size: 4]
	int ArmorHPStart;//[Offset: 0x148, Size: 4]
	int ArmorHPEnd;//[Offset: 0x14c, Size: 4]
	int CarHPStart;//[Offset: 0x150, Size: 4]
	int CarHPEnd;//[Offset: 0x154, Size: 4]
	byte PlayerKill;//[Offset: 0x158, Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 1]
	int RecoilMoveX;//[Offset: 0x15c, Size: 4]
	int RecoilMoveY;//[Offset: 0x160, Size: 4]
	int WeaponAimFOV;//[Offset: 0x164, Size: 4]
	int BulletDamageDebuff;//[Offset: 0x168, Size: 4]
	int BulletDamageBuff;//[Offset: 0x16c, Size: 4]
	uint32 AtackFlowID;//[Offset: 0x170, Size: 4]
	int AutoAimSpeed;//[Offset: 0x174, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x178, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x17c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x180, Size: 4]
	int GunID;//[Offset: 0x184, Size: 4]
	int IfIsOnCar;//[Offset: 0x188, Size: 4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	int KillAICnt;//[Offset: 0x190, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x194, Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	int AimTime;//[Offset: 0x7c, Size: 4]
	FString ShotCDTime;//[Offset: 0x80, Size: 12]
	int ShotCount;//[Offset: 0x8c, Size: 4]
	int ShotHitCount;//[Offset: 0x90, Size: 4]
	int ShotHeadHitCount;//[Offset: 0x94, Size: 4]
	int ShotPersonHitCount;//[Offset: 0x98, Size: 4]
	int ShotPersonKillCount;//[Offset: 0x9c, Size: 4]
	FString HitDistance;//[Offset: 0xa0, Size: 12]
	FString HitEachDistance;//[Offset: 0xac, Size: 12]
	FString HitAngle;//[Offset: 0xb8, Size: 12]
	FString HitEachCdTime;//[Offset: 0xc4, Size: 12]
	FString HitPartInfo;//[Offset: 0xd0, Size: 12]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	int8 SightType;//[Offset: 0xe9, Size: 1]
	uint32 AimFlowID;//[Offset: 0xec, Size: 4]

--------------------------------
Class: RepVehicleAttachment
	STExtraVehicleBase* Vehicle;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	byte SeatIndex;//[Offset: 0x10, Size: 1]

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x260, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x268, Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x270, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x2a0, Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x2a4, Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2a8, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2ac, Size: 4]
	float HDRUnderWaterFogDensity;//[Offset: 0x2b0, Size: 4]
	float NormalUnderWaterFogDensity;//[Offset: 0x2b4, Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x2b8, Size: 4]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x2bc, Size: 12]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x2c8, Size: 12]
	<ExponentialHeightFogComponent*,bool> SceneFogOriginalStates;//[Offset: 0x2d4, Size: 60]
	CameraComponent* LastActiveCamComp;//[Offset: 0x310, Size: 4]
	PostProcessVolume* UnderWaterPPV;//[Offset: 0x318, Size: 4]
	void RefreshUnderWaterEffect(bool bUnderWater);// 0x3806964
	void OnToggleUnderWaterPPV(bool bUseCacheUnderWater);// 0x38068e4
	void OnExponentialHeightFogComponentCreate(ExponentialHeightFogComponent* Component);// 0x380686c
	bool IsCameraUnderWater();// 0x3806844
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x38067cc
	void AddSceneFogComponent(ExponentialHeightFog* SceneFogActor);// 0x3806754

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x308, Size: 4]
	float interval;//[Offset: 0x30c, Size: 4]
	class DamageType* DamageType;//[Offset: 0x310, Size: 4]
	class Pawn[] DamageFilters;//[Offset: 0x314, Size: 12]
	int[] BuffIDs;//[Offset: 0x320, Size: 12]
	int[] SkillBuffIDs;//[Offset: 0x32c, Size: 12]
	BoxComponent* WaterBoxComp;//[Offset: 0x338, Size: 4]
	bool IsLocationInWater(out const Vector Location);// 0x39053e4
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x39052fc

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SlideMoveData
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	Vector LocalVelocity;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x180, Size: 12]
	void SetCharacterAnimOverrideType(int AnimOverrideType);// 0x3ebf7dc
	void ReleaseParachuteAnimAssets();// 0x3ebf7c8
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x350bd38
	void OnAnimListAsyncLoadingFinished();// 0x3ebf7b4
	bool HasAnimAsyncLoadingFinished();// 0x3ebf78c
	void HandleAsyncLoadingFinishedEvent();// 0x3ebf778
	FString GetOwnerName();// 0x3ebf018
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType, int AnimOverrideType);// 0x3ebf6b4

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	byte Roll;//[Offset: 0xc, Size: 1]
	uint32 View;//[Offset: 0x10, Size: 4]
	Vector_NetQuantize Velocity;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ValidTouchMoveFrameConfig
	FString DeviceName;//[Offset: 0x0, Size: 12]
	int Enable;//[Offset: 0xc, Size: 4]
	int Frame;//[Offset: 0x10, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc, Size: 12]
	int PlayerGender;//[Offset: 0x18, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20, Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0, Size: 12]
	FString CauserNation;//[Offset: 0xc, Size: 12]
	FString VictimName;//[Offset: 0x18, Size: 12]
	FString VictimNation;//[Offset: 0x24, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x30, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x3c, Size: 12]
	int DamageType;//[Offset: 0x48, Size: 4]
	int AdditionalParam;//[Offset: 0x4c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x50, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x54, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ResultHealthStatus;//[Offset: 0x5c, Size: 4]
	byte RecordRelationShip;//[Offset: 0x60, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x64, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x68, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x6c, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x70, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x74, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x78, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x7c, Size: 4]
	FString CauserPicURL;//[Offset: 0x80, Size: 12]
	FString VictimPicURL;//[Offset: 0x8c, Size: 12]
	FString RealKillerName;//[Offset: 0x98, Size: 12]
	int RealKillNum;//[Offset: 0xa4, Size: 4]
	byte CauserType;//[Offset: 0xa8, Size: 1]
	byte VictimType;//[Offset: 0xa9, Size: 1]
	int CauserTeamID;//[Offset: 0xac, Size: 4]
	int VictimTeamID;//[Offset: 0xb0, Size: 4]
	bool IsUseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	LinearColor UseColor;//[Offset: 0xb8, Size: 16]
	byte[] ExpandDataContent;//[Offset: 0xc8, Size: 12]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 40]
	SensibilityMode FireMode;//[Offset: 0x28, Size: 40]
	SensibilityMode MotionMode;//[Offset: 0x50, Size: 40]
	SensibilityMode MotionFireMode;//[Offset: 0x78, Size: 40]
	float VehicleEye;//[Offset: 0xa0, Size: 4]
	float ParachuteEye;//[Offset: 0xa4, Size: 4]
	float FPPEye;//[Offset: 0xa8, Size: 4]
	int SideMirrorModeC;//[Offset: 0xac, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]
	float Shoulder;//[Offset: 0x20, Size: 4]
	float ShoulderFPP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x4, Size: 12]
	FString AttackName;//[Offset: 0x10, Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int KillNum;//[Offset: 0x20, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bHideKillIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	FString FullMsg;//[Offset: 0x28, Size: 12]
	int victimAnchorPlatformResID;//[Offset: 0x34, Size: 4]
	FString VictimPlayerName;//[Offset: 0x38, Size: 12]
	FString CauserPlayerName;//[Offset: 0x44, Size: 12]
	FString CauserRealPlayerName;//[Offset: 0x50, Size: 12]
	bool bIsCauserTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIsVictimTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool bIamCauser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bIamVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	int ResultHealthStatus;//[Offset: 0x60, Size: 4]
	int CauserType;//[Offset: 0x64, Size: 4]
	int DamageType;//[Offset: 0x68, Size: 4]
	int AdditionalParam;//[Offset: 0x6c, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x70, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0x74, Size: 12]
	int AssistNum;//[Offset: 0x80, Size: 4]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xbc, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	float GuideInterval;//[Offset: 0xc4, Size: 4]
	int MaxGuideLevel;//[Offset: 0xc8, Size: 4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0xd0, Size: 40]
	class Object[] tGuideConfigClassArray;//[Offset: 0xf8, Size: 12]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x104, Size: 12]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x110, Size: 40]
	NewbieGuideItem[] tItems;//[Offset: 0x138, Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0x144, Size: 4]
	int[] FinishedTips;//[Offset: 0x148, Size: 12]
	int[] FinishedCounts;//[Offset: 0x154, Size: 12]
	int PlayerLevel;//[Offset: 0x160, Size: 4]
	byte curPlayerCategory;//[Offset: 0x164, Size: 1]
	void TriggerNewbieEvent(FString NewbieEvent);// 0x3595a50
	void ShowHideGuide(int TipsID, bool bShow);// 0x359598c
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x3595880
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x3595804
	void OnNewbieEventMapUpdate__DelegateSignature();// 0x446e168
	void OnLoadGuideConfigFinish(LoadGuideConfig inFinishRet);// 0x3595684
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte _curPlayerCategory, int _PlayerLevel);// 0x3595340
	void HandleNewbieGuideEnd(FString GuideID, FString EndType);// 0x3595200
	void HandleNewbieGuideBegin(FString GuideID);// 0x3595144
	bool GetIsAllowNewGuide();// 0x359511c
	bool GetIsAllowLuaNewGuide();// 0x35950f4
	void AddGuidItem(class STNewBieGuideConfig Config);// 0x3594f74

--------------------------------
Class: STNewBieGuideConfig.Object
	NewbieGuideItem[] tItems;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	byte Type;//[Offset: 0x10, Size: 1]
	int MaxGuideCounts;//[Offset: 0x14, Size: 4]
	int MaxGuideLevel;//[Offset: 0x18, Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x1c, Size: 12]
	int Priority;//[Offset: 0x28, Size: 4]
	int MuteFlag;//[Offset: 0x2c, Size: 4]
	int PreconditionID;//[Offset: 0x30, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x34, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x38, Size: 12]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44, Size: 4]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListenerList;//[Offset: 0x48, Size: 12]
	float Duration;//[Offset: 0x54, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x58, Size: 12]
	bool UseNewEdition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x60, Size: 8]
	FString LuaFilePath;//[Offset: 0x68, Size: 12]
	bool ReconnectRecover();// 0x34533b0
	bool IsOK();// 0x34533f4

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x3594ad0

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x1c, Size: 12]
	Controller* OwnerController;//[Offset: 0x28, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float DelayTime;//[Offset: 0x34, Size: 4]
	bool ReconnectRecover();// 0x34533b0
	void OnEventTrigger();// 0x3387ff8
	Actor* GetCurrentEventOwnerActor();// 0x3353584
	bool EnableListener();// 0x34f2818
	bool DisableListener();// 0x34533f4

--------------------------------
Class: NewbieGuideUIInfo
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString MountName;//[Offset: 0x2c, Size: 12]
	FString MountOuterName;//[Offset: 0x38, Size: 12]
	AnchorData LayoutData;//[Offset: 0x44, Size: 40]
	FString LogicManagerNames;//[Offset: 0x6c, Size: 12]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	int ZOrder;//[Offset: 0x7c, Size: 4]
	Widget* UIWidget;//[Offset: 0x80, Size: 4]
	class Object* UIWidgetClass;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: LoadGuideConfig

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float TimeStartDelay;//[Offset: 0xc0, Size: 4]
	float SyncInterval;//[Offset: 0xc4, Size: 4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x384839c
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x33323a0
	void OnTimeInspectorColdMove_Vehicle();// 0x3848388
	void OnTimeInspectorColdMove_Own();// 0x3848374
	void OnServerAboutToReconnect();// 0x3848360
	void CheckTimeLine();// 0x384834c

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsNoHitDetail;//[Offset: 0xf4, Size: 16]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x104, Size: 16]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x114, Size: 16]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x124, Size: 16]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x134, Size: 16]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x144, Size: 16]
	VerifySwitch VsBoneScale;//[Offset: 0x154, Size: 16]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x164, Size: 16]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x174, Size: 16]
	VerifySwitch VsBulletID;//[Offset: 0x184, Size: 16]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x194, Size: 16]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x1a4, Size: 16]
	int MaxShootPointPassWall;//[Offset: 0x1b4, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x1b8, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x1bc, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x1c0, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x1c4, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x1c8, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x1cc, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x1d0, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x1d4, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x1d8, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x1dc, Size: 16]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1ec, Size: 16]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x1fc, Size: 16]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x20c, Size: 16]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x21c, Size: 16]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x22c, Size: 16]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x23c, Size: 16]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x24c, Size: 16]
	int MaxMergedStrategy1;//[Offset: 0x25c, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x260, Size: 4]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x264, Size: 16]
	VerifySwitch VsClientNotConnectShoot;//[Offset: 0x274, Size: 16]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x284, Size: 16]
	VerifySwitch VsShootRpgShootIntervalVerify;//[Offset: 0x294, Size: 16]
	float MaxFuelConsume;//[Offset: 0x2a4, Size: 4]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x324, Size: 16]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x334, Size: 16]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x348, Size: 16]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x358, Size: 16]
	VerifySwitch VsClientBulletDir;//[Offset: 0x368, Size: 16]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x378, Size: 16]
	VerifySwitch VsClientDownShoot;//[Offset: 0x388, Size: 16]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x398, Size: 16]
	VerifySwitch FarJump;//[Offset: 0x3a8, Size: 16]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x3b8, Size: 16]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x3c8, Size: 16]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x3d8, Size: 16]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x3e8, Size: 16]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x3f8, Size: 16]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x408, Size: 16]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x418, Size: 16]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x428, Size: 16]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x438, Size: 28]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x454, Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x458, Size: 16]
	float ServerAccumulateErrors;//[Offset: 0x474, Size: 4]
	float ServerAvgErrors;//[Offset: 0x478, Size: 4]
	VerifySwitch SpeedCheatOver10;//[Offset: 0x484, Size: 16]
	VerifySwitch SpeedCheatOver15;//[Offset: 0x494, Size: 16]
	VerifySwitch SpeedCheatOver20;//[Offset: 0x4a4, Size: 16]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x4b4, Size: 16]
	VerifySwitch BulletDirError;//[Offset: 0x4c4, Size: 16]
	VerifySwitch MuzzleAndOwnerDisOpti;//[Offset: 0x4d4, Size: 16]
	VerifySwitch ImpactAndEnemyDisOpti;//[Offset: 0x4e4, Size: 16]
	VerifySwitch SwitchMuzzleImpactDirError1;//[Offset: 0x4f4, Size: 16]
	VerifySwitch SwitchMuzzleImpactDirError2;//[Offset: 0x504, Size: 16]
	VerifySwitch SwitchShootPosHistoryLocusError1;//[Offset: 0x514, Size: 16]
	VerifySwitch SwitchShootPosHistoryLocusError2;//[Offset: 0x524, Size: 16]
	VerifySwitch SwitchShootPosHistoryLocusError3;//[Offset: 0x534, Size: 16]
	VerifySwitch SwitchMuzzleLocusError;//[Offset: 0x544, Size: 16]
	VerifySwitch SwitchMuzzleLocusErrorX;//[Offset: 0x554, Size: 16]
	VerifySwitch SwitchMuzzleLocusErrorY;//[Offset: 0x564, Size: 16]
	VerifySwitch SwitchMuzzleLocusErrorZ;//[Offset: 0x574, Size: 16]
	VerifySwitch SwitchMuzzleLocusErrorLength;//[Offset: 0x584, Size: 16]
	VerifySwitch SwitchHeadLocusError1;//[Offset: 0x594, Size: 16]
	VerifySwitch SwitchHeadLocusError2;//[Offset: 0x5a4, Size: 16]
	VerifySwitch SwitchHeadLocusError3;//[Offset: 0x5b4, Size: 16]
	VerifySwitch SwitchHeadLocusError4;//[Offset: 0x5c4, Size: 16]
	VerifySwitch Gun2ShooterPosError1;//[Offset: 0x5d4, Size: 16]
	VerifySwitch Gun2ShooterPosError2;//[Offset: 0x5e4, Size: 16]
	float MaxUseOptiArguPing;//[Offset: 0x5f4, Size: 4]
	int ShootVerifyTimes;//[Offset: 0x5f8, Size: 4]
	float VehicleSpeedZDeltaTotal;//[Offset: 0x640, Size: 4]
	int VehicleSpeedZDeltaOver10Times;//[Offset: 0x644, Size: 4]
	VerifySwitch VehicleSpeedZDeltaOver10TimesWhenNoXY;//[Offset: 0x648, Size: 16]
	VerifySwitch VehicleVelZCheck1;//[Offset: 0x658, Size: 16]
	VerifySwitch VehicleVelZCheck2;//[Offset: 0x668, Size: 16]
	VerifySwitch VehicleHitMuzzleCheck;//[Offset: 0x678, Size: 16]
	VerifySwitch FarShootInMidAirVehicleExceedThreshold;//[Offset: 0x688, Size: 16]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceTrial;//[Offset: 0x698, Size: 16]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceFurtherTrial;//[Offset: 0x6a8, Size: 16]
	VerifySwitch FarShootInMidAirVehicleHeightTrial;//[Offset: 0x6b8, Size: 16]
	VerifySwitch FarShootInMidAirVehicleHeightFurtherTrial;//[Offset: 0x6c8, Size: 16]
	VerifySwitch FarShootInMidAirPawnExceedThreshold;//[Offset: 0x6d8, Size: 16]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceTrial;//[Offset: 0x6e8, Size: 16]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceFurtherTrial;//[Offset: 0x6f8, Size: 16]
	VerifySwitch FarShootInMidAirPawnHeightTrial;//[Offset: 0x708, Size: 16]
	VerifySwitch FarShootInMidAirPawnHeightFurtherTrial;//[Offset: 0x718, Size: 16]
	VerifySwitch DSLongTimeMoveDistanceExceedThresholdCount;//[Offset: 0x728, Size: 16]
	VerifySwitch DSLongTimeMoveDistanceTimeTrialCount;//[Offset: 0x738, Size: 16]
	VerifySwitch DSLongTimeMoveDistanceTimeFurtherTrialCount;//[Offset: 0x748, Size: 16]
	VerifySwitch DSLongTimeMoveDistanceDistanceRatioTrialCount;//[Offset: 0x758, Size: 16]
	VerifySwitch DSLongTimeMoveDistanceDistanceRatioFurtherTrialCount;//[Offset: 0x768, Size: 16]
	VerifySwitch DSGetActorLocationPerSecondAnomalyCount;//[Offset: 0x778, Size: 16]
	VerifySwitch DSGetActorLocationPerSecondAnomalyMaxValue;//[Offset: 0x788, Size: 16]
	VerifySwitch DSRunning2DSpeedExceededCount;//[Offset: 0x798, Size: 16]
	VerifySwitch DSRunning2DSpeedTrial;//[Offset: 0x7a8, Size: 16]
	VerifySwitch DSRunning2DSpeedFurtherTrial;//[Offset: 0x7b8, Size: 16]
	VerifySwitch DSIgnoreNetworkDying2DSpeedExceededCount;//[Offset: 0x7c8, Size: 16]
	VerifySwitch DSProneMoveSpeedExceedCount;//[Offset: 0x7d8, Size: 16]
	VerifySwitch DSDyingMoveSpeedExceedCount;//[Offset: 0x7e8, Size: 16]
	VerifySwitch DSSprintCrouchMoveSpeedExceedCount;//[Offset: 0x7f8, Size: 16]
	VerifySwitch DSAimCrouchMoveSpeedExceedCount;//[Offset: 0x808, Size: 16]
	VerifySwitch DSNonSprintNonAimCrouchMoveSpeedExceedCount;//[Offset: 0x818, Size: 16]
	VerifySwitch NonGunADSFarShootCount;//[Offset: 0x828, Size: 16]
	VerifySwitch NonGunADSFarShootFromClientBulletDataCount;//[Offset: 0x838, Size: 16]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceTrialCount;//[Offset: 0x848, Size: 16]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceFurtherTrialCount;//[Offset: 0x858, Size: 16]
	VerifySwitch ClientUploadFuzzyObjectVerifyFail;//[Offset: 0x868, Size: 16]
	VerifySwitch ClientMoveTimeStampResetFrequencyExceedThreshold;//[Offset: 0x878, Size: 16]
	VerifySwitch ShootBirdNonGunADSExceedThreshold;//[Offset: 0x888, Size: 16]
	VerifySwitch ShootBirdNonGunADSDistanceTrial;//[Offset: 0x898, Size: 16]
	VerifySwitch ShootBirdNonGunADSDistanceFurtherTrial;//[Offset: 0x8a8, Size: 16]
	VerifySwitch FarShootInHighTangentMoveSpeedExceedThreshold;//[Offset: 0x8b8, Size: 16]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceTrial;//[Offset: 0x8c8, Size: 16]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceFurtherTrial;//[Offset: 0x8d8, Size: 16]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedTrial;//[Offset: 0x8e8, Size: 16]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedFurtherTrial;//[Offset: 0x8f8, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKill;//[Offset: 0x908, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillDistanceTrial;//[Offset: 0x918, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillTimeTrial;//[Offset: 0x928, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillMaxTime;//[Offset: 0x938, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItem;//[Offset: 0x948, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemDistanceTrial;//[Offset: 0x958, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemTimeTrial;//[Offset: 0x968, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemMaxTime;//[Offset: 0x978, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKill;//[Offset: 0x988, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillDistanceTrial;//[Offset: 0x998, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillTimeTrial;//[Offset: 0x9a8, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillMaxTime;//[Offset: 0x9b8, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicle;//[Offset: 0x9c8, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleDistanceTrial;//[Offset: 0x9d8, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleTimeTrial;//[Offset: 0x9e8, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleMaxTime;//[Offset: 0x9f8, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicle;//[Offset: 0xa08, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleTimeTrial;//[Offset: 0xa18, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleMaxTime;//[Offset: 0xa28, Size: 16]
	VerifySwitch IllegalTeamUpUseObjectTogether;//[Offset: 0xa38, Size: 16]
	VerifySwitch IllegalTeamUpGetOnEnemyVehicleCount;//[Offset: 0xa48, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponSameVehicle;//[Offset: 0xa58, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFoot;//[Offset: 0xa68, Size: 16]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFootDistanceTrial;//[Offset: 0xa78, Size: 16]
	VerifySwitch KillBirdServerControlMove;//[Offset: 0xa88, Size: 16]
	VerifySwitch ParachuteLandingSecondsExceedThreshold;//[Offset: 0xa98, Size: 16]
	VerifySwitch ParachuteObliqueLandingSecondsExceedThreshold;//[Offset: 0xaa8, Size: 16]
	VerifySwitch ShootBirdServerControlMove;//[Offset: 0xac0, Size: 16]
	VerifySwitch MoveCheatAntiStrategyParamFailCount;//[Offset: 0xad0, Size: 16]
	int ClientHoldBackToSeeTotalSeenUIDCount;//[Offset: 0xae0, Size: 4]
	int ClientHoldBackToSeeTotalSeenTeamCount;//[Offset: 0xae4, Size: 4]
	int ClientHoldBackToSeeTotalAccumulatedUIDCount;//[Offset: 0xae8, Size: 4]
	int ClientHoldBackToSeeTotalAccumulatedTeamCount;//[Offset: 0xaec, Size: 4]
	float ClientHoldBackToSeeMyTotalAccumulatedTime;//[Offset: 0xaf0, Size: 4]
	float ClientHoldBackToSeeSingleEnemyMaxTime;//[Offset: 0xaf4, Size: 4]
	float ClientHoldBackToSeeTotalMovedDistance;//[Offset: 0xaf8, Size: 4]
	float ClientHoldBackToSeeMyTotalPlayTime;//[Offset: 0xafc, Size: 4]
	float ClientHoldBackToSeeDistanceThreshold;//[Offset: 0xb00, Size: 4]
	VerifySwitch DSIgnoreStuckInWallAttackerDamage;//[Offset: 0xb04, Size: 16]
	VerifySwitch DSFallingSpeedFailCount;//[Offset: 0xb14, Size: 16]
	VerifySwitch DSFallingHeightFailCount;//[Offset: 0xb24, Size: 16]
	int PVSInCityKillCount;//[Offset: 0xb34, Size: 4]
	int PVSNotInCityKillCount;//[Offset: 0xb38, Size: 4]
	float PVSInCityKillTotalTime;//[Offset: 0xb3c, Size: 4]
	float PVSNotInCityKillTotalTime;//[Offset: 0xb40, Size: 4]
	float PVSInCityKillerTotalMoveDistance;//[Offset: 0xb44, Size: 4]
	float PVSNotInCityKillerTotalMoveDistance;//[Offset: 0xb48, Size: 4]
	int PVSRayUseTimeRatio;//[Offset: 0xb4c, Size: 4]
	int PVSRayTaskFinishPercent;//[Offset: 0xb50, Size: 4]
	int PVSRayHidePercent;//[Offset: 0xb54, Size: 4]
	int PVSCellHidePercent;//[Offset: 0xb58, Size: 4]
	int PVSTotalHidePercent;//[Offset: 0xb5c, Size: 4]
	VerifySwitch BulletDirectionDeviatedPureDS;//[Offset: 0xb70, Size: 16]
	VerifySwitch BulletDirectionDeviatedPureDSTrial;//[Offset: 0xb80, Size: 16]
	VerifySwitch BulletDirectionDeviatedPureDSFurtherTrial;//[Offset: 0xb90, Size: 16]
	VerifySwitch ShooterCapsuleCollided;//[Offset: 0xba0, Size: 16]
	VerifySwitch BlockedBetweenMuzzleAndCapsuleCenter;//[Offset: 0xbb0, Size: 16]
	VerifySwitch ShootPositionBetweenClientAndServerTooFar;//[Offset: 0xbc0, Size: 16]
	VerifySwitch ShootPositionBetweenClientAndServerTrial;//[Offset: 0xbd0, Size: 16]
	VerifySwitch ShootPositionBetweenClientAndServerFurther;//[Offset: 0xbe0, Size: 16]
	VerifySwitch ShootPositionBetweenClientAndServerTimeXY;//[Offset: 0xbf0, Size: 16]
	VerifySwitch ShootPositionBetweenClientAndServerTimeZ;//[Offset: 0xc00, Size: 16]
	VerifySwitch JumpReviewHighJumpExceed;//[Offset: 0xc10, Size: 16]
	VerifySwitch JumpReviewHighJumpTrial;//[Offset: 0xc20, Size: 16]
	VerifySwitch JumpReviewHighJumpFurther;//[Offset: 0xc30, Size: 16]
	VerifySwitch JumpReviewFarJumpExceed;//[Offset: 0xc40, Size: 16]
	VerifySwitch JumpReviewFarJumpTrial;//[Offset: 0xc50, Size: 16]
	VerifySwitch JumpReviewFarJumpFurther;//[Offset: 0xc60, Size: 16]
	float ActorTimeDilation;//[Offset: 0xc70, Size: 4]
	float ParachuteStartTime;//[Offset: 0xc78, Size: 4]
	float ParachuteOpenTime;//[Offset: 0xc7c, Size: 4]
	float ParachuteCloseTime;//[Offset: 0xc80, Size: 4]
	float ParachuteStartHight;//[Offset: 0xc84, Size: 4]
	float ParachuteOpenHight;//[Offset: 0xc88, Size: 4]
	float ParachuteCloseHight;//[Offset: 0xc8c, Size: 4]
	int PlayerBadPingTimes;//[Offset: 0xcf0, Size: 4]
	VerifySwitch VsPetJumpHeightLimiter;//[Offset: 0xcf4, Size: 16]
	VerifySwitch VsPetMoveSpeedLimiter;//[Offset: 0xd04, Size: 16]
	void ReportAntiCheatDetailData();// 0x35d0f38
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x35d0e9c
	void OnRecoverOnServer();// 0x35d0e88
	void OnPreReconnectOnServer();// 0x35d0e88
	void ExitParachute();// 0x35d0e74
	void EnterParachute();// 0x35d0e60
	void EnterJumping();// 0x35d0e4c

--------------------------------
Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 4]
	uint32 EventId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x8, Size: 8]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: TeamMateStateInfo
	byte DirtyFlags;//[Offset: 0x0, Size: 1]
	STExtraPlayerState* PlayerState;//[Offset: 0x4, Size: 4]
	Vector_NetQuantize10 Location;//[Offset: 0x8, Size: 12]
	Rotator Rotation;//[Offset: 0x14, Size: 12]
	float PlayerHealth;//[Offset: 0x20, Size: 4]
	float PlayerHealthMax;//[Offset: 0x24, Size: 4]
	int MemberIdInVoiceRoom;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	byte uavType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0xbc, Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0xc0, Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xc4, Size: 4]
	void SetAutoOpenDoorMode(int Mode);// 0x3449d20
	void SetAutoOpenDoorEnable(bool bEnable);// 0x3449ca0
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x3449ba4
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int DoorState);// 0x3449aa8
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x3449a28
	PUBGDoor* GetPriorityDoor();// 0x3449a00
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x34498a8
	void BP_SimulateUIClick(bool bExtraDoor);// 0x446e168
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x446e168

--------------------------------
Class: PUBGDoor.UAENetActor.LuaActor.Actor.Object
	int iRegionDoor;//[Offset: 0x41c, Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x424, Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x42c, Size: 4]
	float autoOpenAngel;//[Offset: 0x430, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x434, Size: 4]
	int DoorState;//[Offset: 0x438, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	float DoorOperateTime;//[Offset: 0x440, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x444, Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x448, Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x44c, Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	int DoorStateEx;//[Offset: 0x454, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x45c, Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x460, Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x464, Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a, Size: 1]
	delegate OnDoorBrokenDelegate;//[Offset: 0x46c, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x478, Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x484, Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48b, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x490, Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x494, Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x4a0, Size: 4]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x4a8, Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x4b0, Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x4c0, Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 1]
	DoorOpenConfig DoorOpenConfig;//[Offset: 0x4e4, Size: 8]
	ExDoorOpenConfig ExDoorOpenConfig;//[Offset: 0x4ec, Size: 8]
	void SetDoorBroken(bool bExtraDoor);// 0x3606938
	void RefreshUIOnClient();// 0x3606924
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x3606860
	void OnRep_RepDoorStateEx();// 0x360684c
	void OnRep_RepDoorState();// 0x3606838
	void OnRep_RepDoorBrokenEx();// 0x3606824
	void OnRep_RepDoorBroken();// 0x3606810
	void OnRep_ExDoorOpenConfig();// 0x36067fc
	void OnRep_DoorOpenConfig();// 0x36067e8
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x36066a0
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3606558
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x3606494
	void OnBPRespawned();// 0x33492cc
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x360625c
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3606024
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x3605f60
	bool IsSameDoorState(int ClientState);// 0x3605ee0
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x3605cbc
	enum[] GetDamageableGameObjectType();// 0x3605bf4
	void ForceNetUpdate();// 0x35c6f04
	void DeCodeKey();// 0x34483e8
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x3605b30
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x36059cc
	void BPSetObjectPoolInitialData();// 0x3349304
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x446e168
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x446e168
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x446e168

--------------------------------
Class: DoorOpenConfig
	int DoorState;//[Offset: 0x0, Size: 4]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ExDoorOpenConfig
	int DoorStateEx;//[Offset: 0x0, Size: 4]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ChatComponent.LuaActorComponent.ActorComponent.Object
	int end_time;//[Offset: 0x150, Size: 4]
	FString Reason;//[Offset: 0x154, Size: 12]
	int[] audioChat;//[Offset: 0x160, Size: 12]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0x16c, Size: 12]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0x178, Size: 12]
	QuickChatOption[] allChatOption;//[Offset: 0x184, Size: 12]
	int MinTraceDist;//[Offset: 0x190, Size: 4]
	FString TeammateColor;//[Offset: 0x194, Size: 12]
	FString MyColor;//[Offset: 0x1a0, Size: 12]
	<int,FString> ActorNameList;//[Offset: 0x1ac, Size: 60]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x1e8, Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x224, Size: 12]
	float SendMsgCD;//[Offset: 0x230, Size: 4]
	float lastShowChatTime;//[Offset: 0x234, Size: 4]
	float ShowChatDuration;//[Offset: 0x238, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x23c, Size: 12]
	FString EndChar;//[Offset: 0x248, Size: 12]
	FString ColonChar;//[Offset: 0x254, Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x260, Size: 60]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x29c, Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x2a8, Size: 4]
	byte[] ExtendParamsCache;//[Offset: 0x2b0, Size: 12]
	int itemIDOnGround;//[Offset: 0x2c8, Size: 4]
	int itemOnGroundNetGUID;//[Offset: 0x2cc, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x2d0, Size: 4]
	Vector hitItemPosition;//[Offset: 0x2d4, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x2e4, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x2f0, Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x2fc, Size: 12]
	InGameChatMsg CurrMsg;//[Offset: 0x308, Size: 88]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool AutoLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x446e168
	void TransformMsgAndSend(FString Msg, int MsgID, int ItemID, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x343d3dc
	void ShowTeamMsg(out const InGameChatMsg MsgItem, bool isMe, bool ShowChat, bool PlaySound, bool bControlByMaxShowDis);// 0x343d1bc
	void ShowQuickPanel(bool bShow);// 0x343d13c
	void SetExtendParamsCache(out const byte[] Content);// 0x343d070
	void ServerSendMsg(const InGameChatMsg MsgItem, byte CheckSetting, bool bIncludeTeammates);// 0x343cec4
	void ServerSendGift(const InGameChatMsg MsgItem);// 0x343cdbc
	void SendDirtyFilterContent(FString Content);// 0x446e168
	void SendDirtyFilter(FString Name, FString Content, bool isMe, bool bSTTMsg);// 0x446e168
	void ReportBattleChat(int MsgID, FString Msg, int MsgExtraParam);// 0x446e168
	void OnInviteNextBattle(FString gid, FString Name);// 0x343cc7c
	void OnFilterFinishWithMsgID(FString filterText, int MsgID, FString Name);// 0x446e168
	void OnFilterFinish(FString filterText);// 0x446e168
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x446e168
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x446e168
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x446e168
	void MakeQuickSignMark(out const InGameChatMsg MsgItem, bool isMe, enum flagType, bool bControlByMaxShowDis);// 0x343cab8
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x343c978
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x343c7ec
	void FindTextIDByAudioID();// 0x446e168
	void CloseChatHistoryList();// 0x446e168
	void ClientReceiveMsg(const InGameChatMsg MsgItem, bool isMe, byte CheckSetting);// 0x343c680
	void ClientReceiveGift(const InGameChatMsg MsgItem, bool isMe);// 0x343c55c
	bool CheckSpecialChatCD(int MsgID);// 0x343c4dc
	byte CheckIsNeedShow(byte CheckSetting);// 0x343c454
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x343c398
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemID, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x446e168
	void AddOneMarkToUI(FString Name, FString Content, int MsgID, int audioID, int ItemID, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x446e168
	void AddFriendChat(FString gid, FString Name, FString Content, bool IsSelf);// 0x343bfc0

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 4]
	int RealTextID;//[Offset: 0x4, Size: 4]
	int AlternateTextID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0, Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 12]
	FString Content;//[Offset: 0xc, Size: 12]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int MsgType;//[Offset: 0x1c, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 1]
	int[] chatIDList;//[Offset: 0x4, Size: 12]
	int AlternateChatID;//[Offset: 0x10, Size: 4]
	int FlagIndex;//[Offset: 0x14, Size: 4]
	int traceDist;//[Offset: 0x18, Size: 4]
	float minDist;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0, Size: 4]
	int flagID;//[Offset: 0x4, Size: 4]
	Vector hitPosition;//[Offset: 0x8, Size: 12]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	uint32 playerIdentifier;//[Offset: 0xc, Size: 4]
	FString msgContent;//[Offset: 0x10, Size: 12]
	int MsgID;//[Offset: 0x1c, Size: 4]
	int audioID;//[Offset: 0x20, Size: 4]
	int ItemID;//[Offset: 0x24, Size: 4]
	FString PlayerKeyString;//[Offset: 0x28, Size: 12]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector hitPosition;//[Offset: 0x38, Size: 12]
	int itemIDOnGround;//[Offset: 0x44, Size: 4]
	bool bSTTMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	byte[] ExtendParams;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0xbc, Size: 12]
	Widget* MaskWidget;//[Offset: 0xc8, Size: 8]
	void SetMaskWidgetOnTop(bool bTop);// 0x3527360
	void CreateGuideUI();// 0x446e168

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0, Size: 4]
	int guildUI;//[Offset: 0x4, Size: 4]
	Vector2D Offset;//[Offset: 0x8, Size: 8]
	Vector2D Size;//[Offset: 0x10, Size: 8]
	int childData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignComponent.LuaActorComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0x14c, Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0x158, Size: 12]
	delegate OnDangerousQuickSignDelegate;//[Offset: 0x164, Size: 12]
	delegate FOnSignPickUpActoDelegate;//[Offset: 0x170, Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	int TextID_OutRange;//[Offset: 0x180, Size: 4]
	FString PreFix_Command;//[Offset: 0x184, Size: 12]
	FString PreFix_Command_Res;//[Offset: 0x190, Size: 12]
	FString PreFix_Mark;//[Offset: 0x19c, Size: 12]
	FString PreFix_MarkBox;//[Offset: 0x1a8, Size: 12]
	FName IgnoreTag;//[Offset: 0x1b8, Size: 8]
	int MinTraceDist;//[Offset: 0x1c0, Size: 4]
	int MaxTraceDist;//[Offset: 0x1c4, Size: 4]
	int ItemTraceDist;//[Offset: 0x1c8, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x1cc, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x1d0, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x1d4, Size: 4]
	float MinHighLightDangerousTime;//[Offset: 0x1d8, Size: 4]
	float MinHighLightDangerousDistance;//[Offset: 0x1dc, Size: 4]
	float DangerousMarkLifeSpan;//[Offset: 0x1e0, Size: 4]
	<int,DangerousSignInfo> LastDangerousID;//[Offset: 0x1e4, Size: 60]
	int MarkMaxNum;//[Offset: 0x220, Size: 4]
	float ReplyDelayTime;//[Offset: 0x224, Size: 4]
	bool bHasSendLongPressTLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x22c, Size: 4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x230, Size: 60]
	<class Object,FString> MarkNameClassMap;//[Offset: 0x26c, Size: 60]
	<int,FString> BoxTypeNameMap;//[Offset: 0x2a8, Size: 60]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x2e4, Size: 60]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x320, Size: 60]
	FString[] HasReplyMsg;//[Offset: 0x35c, Size: 12]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x368, Size: 60]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x3a4, Size: 60]
	int[] ServerCachedNetGUIDs;//[Offset: 0x3e0, Size: 12]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x3ec, Size: 12]
	FString[] TempIDArray;//[Offset: 0x3f8, Size: 12]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x404, Size: 60]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x440, Size: 60]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x4c0, Size: 60]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x4fc, Size: 60]
	byte MaxSendCountPerSecond;//[Offset: 0x538, Size: 1]
	<FString,QuickSignMark> CustomMarkInfoMap;//[Offset: 0x578, Size: 60]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x361e290
	void SpectatorActorMark(out const QuickSignMsg OriMarkInfo, out QuickSignMsg MarkInfo, Actor* Actor);// 0x446e168
	void ShowMsgTipsVoice(out const QuickSignMsg MsgItem, bool IsSelf, FString PlayerKey);// 0x446e168
	void ServerSendMsg(const QuickSignMsg MsgItem, byte SignType);// 0x361e144
	void ServerMarkCustom(out const QuickSignMsg MsgItem, float ShareDistance, bool ShareWithTeammates);// 0x361dfd8
	void ServerDelNetGuid(int Guid);// 0x361df60
	void ServerDelMsg(FString MsgID);// 0x361de6c
	void ServerDelCustomMark(FString MsgID, bool ShareWithTeammates);// 0x361dd1c
	void ServerAddNetGuid(int Guid);// 0x361dca4
	void ReportQuickSign(out const QuickSignMsg MsgItem);// 0x446e168
	void RemoveActorMask(int ActorNetGUID);// 0x361dbf0
	void OperMark(FString MsgID);// 0x361db34
	void OnPickUpActor(int Guid);// 0x361dabc
	void MakeQuickNeed(enum SignSubType);// 0x361da44
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor, int RelationID, bool bNeedTransform);// 0x361d93c
	void MakeQuickMark();// 0x361d928
	void MakeQuickCommand(byte SignType);// 0x361d8b0
	void MakeCustomMark(Vector targetPos, FString SignConfigKey);// 0x361d7b0
	bool IsSelfMark(FString MsgID);// 0x361d6ec
	bool IsContainMark(FString MsgID);// 0x361d628
	int GetVoiceAudioID(enum MsgType);// 0x446e168
	bool GetRelationActorMsg(int ActorGUID, int RelationID, out QuickSignMsg MsgItem);// 0x361d4bc
	bool GenerateMarkInfo(out const QuickSignMsg MsgItem, out QuickSignMark MarkInfo);// 0x446e168
	FString FindMarkNameClassKey(class Object uMarkClass);// 0x361d3b8
	void DelSpecialReplyMsg(out const QuickSignMark MsgItem);// 0x361d2c0
	void DelMarkFromPool(FString MsgMark, bool bIsCheckSenderMap);// 0x361d1b8
	void DelAllMarkMsgForReplay();// 0x361d1a4
	void DealWithNewMsg(out const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey, bool ShowChat, bool bControlByMaxShowDis);// 0x361cebc
	void DealWithMarkCustomMsg(out const QuickSignMsg MsgItem, bool IsSelf);// 0x361cd94
	void ClientReceiveMsg(const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey);// 0x361cbec
	void ClientMarkCustomMsg(const QuickSignMsg MsgItem, bool IsSelf);// 0x361cacc
	void ClientDelMsg(FString MsgID);// 0x361ca08
	void ClientDelCustomMarkMsg(FString MsgID);// 0x361c944
	void CheckMsgValid();// 0x361c930
	void AnalysisConfigKeyClass(FString ConfigId, FString ConfigScriptParam);// 0x361c7f0
	void AddSpecialReplyMsg(out const QuickSignMark MsgItem);// 0x361c6f8
	void AddRelationActorMap(out const QuickSignMsg MsgItem);// 0x361c61c
	void AddNewMark(out const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey, bool bControlByMaxShowDis);// 0x361c380
	void AddMarkToPool(out const QuickSignMark MsgMark, FString SenderPlayerKey);// 0x361c168
	void AddActorMask(int ActorNetGUID);// 0x361c0b4

--------------------------------
Class: DangerousSignInfo
	FString MsgID;//[Offset: 0x0, Size: 12]
	Vector LastDangerousLocation;//[Offset: 0xc, Size: 12]
	float LastMarkDangerousTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString MarkType;//[Offset: 0xc, Size: 12]
	FString IconPath;//[Offset: 0x18, Size: 12]
	FString IconBGPath;//[Offset: 0x24, Size: 12]
	FString IconOuterPath;//[Offset: 0x30, Size: 12]
	FString IconOuterBGPath;//[Offset: 0x3c, Size: 12]
	FString IconOutScreenIconPath;//[Offset: 0x48, Size: 12]
	FString IconOutScreenBGPath;//[Offset: 0x54, Size: 12]
	FString IconOutScreenArrowPath;//[Offset: 0x60, Size: 12]
	FString ReplyID;//[Offset: 0x6c, Size: 12]
	Vector Loc;//[Offset: 0x78, Size: 12]
	int MaxNum;//[Offset: 0x84, Size: 4]
	int LifeSpan;//[Offset: 0x88, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	FString SenderPlayerKey;//[Offset: 0x90, Size: 12]
	bool bControlByMaxShowDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xbc, Size: 4]
	FString OwningPlayerName;//[Offset: 0xc0, Size: 12]
	int RetrieveUseItemAreaType(int ItemID, Vector PlayerLocation);// 0x33d37f0
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x33d3778
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x33d366c
	int RetrieveLandLocType(FString TargetName);// 0x33d350c
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x33d3124
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x446e168
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x446e168
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x446e168
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x446e168
	FString GetOwningPlayerName();// 0x33d3064
	FString GetMapName();// 0x33d2fa4
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x446e168
	int GetItemUseAreaIDFromDataTable(int ItemID, Vector InPlayerLocation);// 0x446e168

--------------------------------
Class: BattleItemSpectatingData
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int AdditionalData;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 12]
	byte gender;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SyncOBDataActor.Actor.Object
	PlayerStaticInfoInOB[] TotalPlayersStatic;//[Offset: 0x308, Size: 12]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x314, Size: 12]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x320, Size: 12]
	PlayerBreathInfoList PlayerBreathInfoList;//[Offset: 0x330, Size: 32]
	PlayerFiringList PlayerFiringList;//[Offset: 0x350, Size: 16]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x360, Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x36c, Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x378, Size: 12]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x384, Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x390, Size: 60]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	void OnRep_TotalPlayersStaticInfo();// 0x3837c94
	void OnRep_RefreshTotalPlayers();// 0x3837c80
	void OnRep_RefreshAirDropBox();// 0x3837c6c
	void OnRep_PlayerFiringList();// 0x3837c58
	void OnRep_PlayerBreathInfoList();// 0x3837c44
	Vector GetNewestAirDropBoxPos();// 0x3837bfc
	PlayerInfoInOB[] GetNearPlayerList();// 0x3837aec
	float GetBreath(uint32 InPlayerKey);// 0x3837a6c
	AirDropBoxInOb[] GetAirDropBoxList();// 0x3837a00

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerOpenID;//[Offset: 0xc, Size: 12]
	FString PicUrl;//[Offset: 0x18, Size: 12]
	int TeamID;//[Offset: 0x24, Size: 4]
	byte IndexInMap;//[Offset: 0x28, Size: 1]
	uint64 UId;//[Offset: 0x30, Size: 8]
	uint32 PlayerKey;//[Offset: 0x38, Size: 4]

--------------------------------
Class: PlayerBaseInfoInOB
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 4]
	uint32 PlayerKey;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PlayerBreathInfoList
	uint64 PlayerIndexLow;//[Offset: 0x0, Size: 8]
	uint64 PlayerIndexHigh;//[Offset: 0x8, Size: 8]
	byte[] BreathList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: PlayerFiringList
	uint64 PlayerFiringIndexLow;//[Offset: 0x0, Size: 8]
	uint64 PlayerFiringIndexHigh;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	uint64 UId;//[Offset: 0x28, Size: 8]
	FString PlayerName;//[Offset: 0x30, Size: 12]
	FString PlayerOpenID;//[Offset: 0x3c, Size: 12]
	FString PicUrl;//[Offset: 0x48, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	int TeamID;//[Offset: 0x58, Size: 4]
	FString TeamName;//[Offset: 0x5c, Size: 12]
	Pawn* Character;//[Offset: 0x68, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 4]
	FString TeamName;//[Offset: 0x4, Size: 12]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString LogoPicUrl;//[Offset: 0x14, Size: 12]
	int KillNum;//[Offset: 0x20, Size: 4]
	int LiveMemberNum;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPlayerInfoInOB
	FString PlayerKey;//[Offset: 0x0, Size: 12]
	int TeamID;//[Offset: 0xc, Size: 4]
	Pawn* Character;//[Offset: 0x10, Size: 8]

--------------------------------
Class: AllStarReportData
	bool bShowReportFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int BeReportedNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PicUrl;//[Offset: 0xc, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int TeamID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]
	Vector[] PosList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 12]
	uint32 CharacterGUID;//[Offset: 0xc, Size: 4]
	int SyncTicket;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 12]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc, Size: 4]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x308, Size: 4]
	Rotator TargetKillerRotation;//[Offset: 0x30c, Size: 12]
	Actor* ReturnActor;//[Offset: 0x318, Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x33c, Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x340, Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x344, Size: 12]
	float MinMovingSpeed;//[Offset: 0x350, Size: 4]
	float MaxMovingTime;//[Offset: 0x354, Size: 4]
	float ObservingTime;//[Offset: 0x358, Size: 4]
	float TrackingDelay;//[Offset: 0x35c, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x360, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x364, Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x36c, Size: 4]
	float DriverArmLenth;//[Offset: 0x370, Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x378, Size: 4]
	void TargetChangeForPCOB();// 0x3365b48
	static KillerTracker* StartTrackingKiller(class KillerTracker Template, Actor* Killer, PlayerController* PC, Vector InitLocation, Rotator InitRotation);// 0x35485a8
	void ForceEnd();// 0x3548594

--------------------------------
Class: VehicleUserComponent.VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
	ItemDefineID LastUsedItemDefineID;//[Offset: 0x198, Size: 24]
	float LastFinishCD;//[Offset: 0x1b0, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b6, Size: 1]
	bool bReconnectSkipFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7, Size: 1]
	delegate OnClosestVehicleChanged;//[Offset: 0x1b8, Size: 12]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0x1c4, Size: 4]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x1c8, Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x1cc, Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0x1d4, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x1e0, Size: 12]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x1ec, Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x1f8, Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x20c, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x220, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x230, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x234, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x238, Size: 4]
	float MaxCanAimAngle;//[Offset: 0x23c, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x244, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x248, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x24c, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x250, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x258, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x274, Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x278, Size: 4]
	Rotator InputExtraRot;//[Offset: 0x27c, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x288, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x298, Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x2d4, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x2dc, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x2e4, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x2e8, Size: 4]
	enum CurrentSeatType;//[Offset: 0x2ec, Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x318, Size: 4]
	float FastestAllowDistance;//[Offset: 0x31c, Size: 4]
	float NearVehicleTickRate;//[Offset: 0x320, Size: 4]
	int VehicleIconID;//[Offset: 0x324, Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x340, Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x350, Size: 12]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x35c, Size: 12]
	delegate OnRefuseExchangeVehicleSeat;//[Offset: 0x368, Size: 12]
	bool bDebugResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	void UseVehicleWeaponOrNot();// 0x38e9eac
	void UpdateVehWeaponPassengerViewLimit();// 0x38e9e98
	void UpdatePassengerViewPitchLimit();// 0x38e9e84
	void TurnVehicle(float Rate);// 0x3844f84
	void TryUseHorn(bool bUse);// 0x38e9e04
	void TryShutDownUnmannedVehicle();// 0x38e9df0
	void TryPauseUnmannedVehicle();// 0x38e9ddc
	bool TryLeanOutOrIn(bool bAutoLeanOut, bool bForce);// 0x38e9d04
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x38e9c8c
	void TryLaunchCurrentUnmannedVehicle();// 0x38e9c6c
	void TryExitVehicle();// 0x38e9c58
	void TryEnterVehicleInReady(STExtraVehicleBase* InVehicle, enum SeatType);// 0x38e9b9c
	bool TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x38e9ad8
	void TryChangeVehicleSeat();// 0x38e9ac4
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x38e9a44
	bool TryChangeFreeFireSeatAndScopeIn();// 0x38e9a1c
	bool TryChangeFreeFireSeatAndLeanOut();// 0x38e99f4
	void TryAutonomousDriving(bool bEnable);// 0x38e9974
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x446e168
	void TestMoveVehicleUp(float Rate);// 0x38e98fc
	void TestMoveVehicleRight(float Rate);// 0x38e9884
	void TestMoveVehicleForward(float Rate);// 0x38e980c
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x38e9748
	void StopFireVehicleWeapon();// 0x38e9734
	bool ShowVehicleWeaponUI();// 0x38e970c
	void SetVehicleUserState(enum UserState);// 0x38e9698
	void SetVehicleIgnoreLookInput(bool bNewIgnore);// 0x38e9618
	void SetPlayMusic(bool bEnabled);// 0x38e9598
	void SetLastDriveVehicle(STExtraVehicleBase* LastVehicle);// 0x38e9520
	void SetIsAutoMoveForward(bool IsEnable);// 0x38e94a0
	void SetClosestVehicle(STExtraVehicleBase* InVehicle);// 0x38e9424
	void SetBrake(float Rate);// 0x3467580
	void SetBoosting(bool bEnabled);// 0x38e939c
	void SetAirControlF(float Rate);// 0x3844f04
	void SetAirControlB(float Rate);// 0x38acf34
	void ServerUseVehicleWeaponOrNot(int SeatId, bool bUse);// 0x38e928c
	void ServerStopFireVehicleWeapon();// 0x38e9230
	void ServerReqQuickSwitchSeat(STExtraPlayerCharacter* ReqTarget);// 0x38e917c
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x38e90b8
	void ServerEquipVehicleWeaponOrNot(int SeatId, bool bEquip);// 0x38e8fa8
	void ServerDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x38e8f30
	void ServerAgreeQuickSwitchSeat(bool bIsAgree);// 0x38e8e68
	void Server_JoystickCenterClickHandler();// 0x38e8e0c
	void SendToServerUnmannedVehicleUse();// 0x38e8db0
	void SendToServerUnmannedVehicleRecall();// 0x38e8d54
	void SendToServerUnmannedVehiclePause();// 0x38e8cf8
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x38e8c70
	void RspRefuseExchangeVehicleSeat(STExtraPlayerCharacter* acceptPlayer);// 0x3494400
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x38e8ba4
	void RspLeanOut(bool bOut);// 0x38e8b1c
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x3684b8c
	void RspExitVehicle(bool bSuccess);// 0x38e8a94
	void RspExchangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd);// 0x38e8988
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x38e882c
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn, int FailTips);// 0x38e8630
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x38e8558
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x38e845c
	void ReqShutDownUnmannedVehicle();// 0x38e8400
	void ReqQuickSwitchSeat();// 0x38e83ec
	void ReqPauseUnmannedVehicle();// 0x38e8390
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x38e8294
	void ReqLeanOut(bool IsLeanOut);// 0x38e81cc
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x38e8118
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x38e806c
	void ReqExchangeVehicleSeat();// 0x38e8010
	void ReqEraseLastDriveVehicle();// 0x38e7fb4
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x38e7eb8
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x38e7e04
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x38e7d3c
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x38e7c74
	void ReqAutonomousDriving(bool bEnable);// 0x38e7bac
	void ReqAcceptExchangeVehicleSeat(bool IsAccept);// 0x38e7ae4
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x38e7a6c
	void OnUnmannedVehicle_Standby_Reconnet();// 0x446e168
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x446e168
	void OnServerReconnected();// 0x38e7a58
	void OnScopeInAfterChangeSeat();// 0x38e7a44
	void OnRep_DefineID();// 0x38e7a30
	void OnRep_BornInVehicle();// 0x38e7a1c
	void OnRefuseExchangeVehicleSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x446e168
	void OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x446e168
	void OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* Driver);// 0x446e168
	void OnPauseUnmannedVehicleCompleted();// 0x446e168
	void OnLeanOutAfterChangeSeat();// 0x38e7a08
	void OnLaunchUnmannedVehicleCompleted();// 0x446e168
	void OnInputAxisMoveRight(float Rate);// 0x446e168
	void OnInputAxisMoveForward(float Rate);// 0x446e168
	void OnExitVehicleCompleted();// 0x446e168
	void OnEnterVehicleCompleted(enum SeatType);// 0x446e168
	void OnCurrrentClosestVehicleChanged();// 0x446e168
	void OnClientReconnected();// 0x38e79f4
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x446e168
	void NotifyLeaveVehicleFailed();// 0x38e79d8
	void MoveVehicleUp(float Rate);// 0x343fc74
	void MoveVehicleRight(float Rate);// 0x337d2e4
	void MoveVehicleForward(float Rate);// 0x365f4c4
	void MaintenanceVehicle(float addpercenthp, bool fixtire);// 0x38e7914
	bool IsControllingUnmannedVehicle();// 0x38e78ec
	bool IsAutoDriving();// 0x38e78c4
	bool IgnoreVehicleLookInput();// 0x38e789c
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x38e7824
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x38e7810
	void HandleLocalBackpackCurrentWeaponFinished();// 0x38e77fc
	bool HandleClientReconnecting();// 0x38e77d4
	enum GetVehicleUserState();// 0x38e77b8
	STExtraVehicleBase* GetVehicle();// 0x38e779c
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x38e7780
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x38e7758
	bool GetAssistantState();// 0x38e7730
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x38e75d0
	void ForceEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x38e74c8
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x38e736c
	void FlipTrackVehicleDirection();// 0x38e7358
	void FireVehicleWeapon();// 0x38e7344
	void DoVehicleLeanOut(bool bLeanOut);// 0x38e72bc
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x38e71e4
	void DoEquipAction(bool bEquip);// 0x38e7164
	void DoEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x38e705c
	void ClosestVehicleDelegate__DelegateSignature();// 0x446e168
	void ClientReqQuickSwitchSeat(STExtraPlayerCharacter* ReqOrign);// 0x38e6fa8
	void ClientDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x38e6f28
	void Client_UnbindTouchEvents();// 0x38e6ecc
	void Client_ShouldBindTouchEvents();// 0x38e6e70
	bool CheckCanLeanOutVehicle();// 0x38e6e48
	void ChangeAssistantState(bool bEnter);// 0x38e6dc8
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x38e6d48
	bool CanUseVehicleHorn();// 0x38e6d20
	bool CanShowEnterBtn(STExtraVehicleBase* InVehicle);// 0x446e168
	bool CanLeanOutVehicle(STExtraVehicleBase* InVehicle, STExtraPlayerCharacter* InCharacter, int InSeatIndex);// 0x38e6c18
	bool CanEnterVehicle(STExtraVehicleBase* InVehicle, byte SeatType, out int NewSeatIndex);// 0x38e6af8
	bool CanConsumeReconnectSkipFlag();// 0x38e6ad0
	bool CanChangeSeat(STExtraVehicleBase* InVehicle);// 0x446e168
	bool CanAutoDriving();// 0x38e6aa8
	void BrakeTrackVehicle(bool bIsBrake);// 0x38e6a28
	void AgreeQuickSwitchSeat(bool bIsAgree);// 0x38e69a8
	void AddVehicleFuel(float amount);// 0x38e6928

--------------------------------
Class: VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnCanEnterVehicleDelegate;//[Offset: 0x150, Size: 16]
	delegate OnCanExitVehicleDelegate;//[Offset: 0x160, Size: 16]
	STExtraVehicleBase* Vehicle;//[Offset: 0x170, Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0x174, Size: 4]
	enum VehicleUserState;//[Offset: 0x178, Size: 1]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x18c, Size: 4]
	void TurnVehicle(float InRate);// 0x3844f84
	void SetUsingHorn(bool bEnabled);// 0x38ee084
	void SetBrake(float InRate);// 0x3467580
	void SetBoosting(bool bEnabled);// 0x38e939c
	void SetAirControlF(float InRate);// 0x3844f04
	void SetAirControlB(float InRate);// 0x38acf34
	void MoveVehicleUp(float InRate);// 0x343fc74
	void MoveVehicleRight(float InRate);// 0x337d2e4
	void MoveVehicleForward(float InRate);// 0x365f4c4
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x38e75d0
	void ForceEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x38e74c8
	void DoVehicleLeanOut(bool bLeanOut);// 0x38e72bc
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x38e71e4
	void DoEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x38e705c
	void DoChangeVehicleSeat(int InSeatIndex);// 0x35b2220
	bool CanLeanOutOrIn(bool bLeanOut);// 0x38edff4
	bool CanExitVehicle(bool bMustExit);// 0x38edf64
	bool CanEnterVehicle(STExtraVehicleBase* InVehicle, byte SeatType, out int NewSeatIndex);// 0x38e6af8
	bool CanChangeVehicleSeat(out int InSeatIndex);// 0x38edecc
	bool BPCanEnterVehicle(STExtraVehicleBase* InVehicle, byte SeatType);// 0x38ede00
	void AddVehicleFuel(float InAmount);// 0x38e6928

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xbc, Size: 12]
	enum StartStateType;//[Offset: 0xc8, Size: 1]
	enum FinishStateType;//[Offset: 0xc9, Size: 1]
	State* CurrentState;//[Offset: 0xcc, Size: 4]
	enum CurrentStateType;//[Offset: 0xd0, Size: 1]
	enum LastStateType;//[Offset: 0xd1, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x4a8, Size: 12]
	FString TreasureBoxName;//[Offset: 0x4b4, Size: 12]
	float TotalHP;//[Offset: 0x4c0, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x4c4, Size: 4]
	float TotalTime;//[Offset: 0x4c8, Size: 4]
	int boxId;//[Offset: 0x4cc, Size: 4]
	Vector GroupLoc;//[Offset: 0x4d0, Size: 12]
	float DestroyTime;//[Offset: 0x4dc, Size: 4]
	float OperationalDistance;//[Offset: 0x4e0, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x4e4, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x4e8, Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x4f0, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x520, Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x530, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x560, Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x570, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x5a0, Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x5b0, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x5e0, Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x5f0, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x620, Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x624, Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x628, Size: 4]
	class Controller[] InstigatorList;//[Offset: 0x62c, Size: 12]
	class Actor[] DamageCauserList;//[Offset: 0x638, Size: 12]
	enum PickUpBoxType;//[Offset: 0x644, Size: 1]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x646, Size: 1]
	int IconID;//[Offset: 0x648, Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	bool bRegisterRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x696, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x697, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x698, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x69c, Size: 4]
	int HideLightColumn;//[Offset: 0x6a0, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x6a4, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x6a8, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x6ac, Size: 4]
	bool GoUpAnimationHightEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	float GoUpAnimationYawSpeed;//[Offset: 0x6b4, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x6b8, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x6bc, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x6c8, Size: 12]
	bool bImmediateOpenBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	bool IsForbidOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d5, Size: 1]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d6, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x6d8, Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x6dc, Size: 4]
	float StartedTime;//[Offset: 0x6f8, Size: 4]
	enum CurState;//[Offset: 0x6fc, Size: 1]
	uint32 StartedPlayerKey;//[Offset: 0x700, Size: 4]
	int StartedTeamId;//[Offset: 0x704, Size: 4]
	float CountdownTime;//[Offset: 0x708, Size: 4]
	float StartDestroytime;//[Offset: 0x70c, Size: 4]
	int MonsterBoxId;//[Offset: 0x710, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x714, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x718, Size: 60]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x758, Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x75c, Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x760, Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x764, Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x768, Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x76c, Size: 4]
	Object* TriggerActionHost;//[Offset: 0x7a0, Size: 4]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x446e168
	void ShowMonsterTreasureBox(PlayerController* PC);// 0x3579dbc
	void SetDropItems(out const DropPropData[] DropItems, STExtraPlayerState* PlayerState);// 0x446e168
	void SetClientClientAutoActiveBoxCD(int CD);// 0x3579d44
	void SetAutoActiveBoxCD(int leftTime);// 0x3579ccc
	void OnTreasureBoxPicked__DelegateSignature();// 0x446e168
	void OnSomeonePickItem(uint32 InPC);// 0x3579c54
	void OnRep_HideLightColumn();// 0x3579c40
	void OnRep_CurState();// 0x3579c2c
	void OnBoxEmpty();// 0x3579c18
	void OnAnimationStop();// 0x3579c04
	bool IsShowIcon();// 0x3579bdc
	int GetMonsterBoxId();// 0x3579bb4
	enum[] GetDamageableGameObjectType();// 0x3579aec
	enum GetCurState();// 0x3579ac4
	int GetClientClientAutoActiveBoxCD();// 0x3579a9c
	void DeActiveMonsterTreasureBox();// 0x3579a88
	bool CanBeDamaged();// 0x3579a60
	void BPRepCurState();// 0x446e168
	void BPOnStopMonsterTreasureBox();// 0x446e168
	void BPOnStartMonsterTreasureBox();// 0x446e168
	void BPOnHideLightColumn();// 0x446e168
	void BPOnCountdownEnd();// 0x446e168
	void BPOnBreakMonsterTreasureBox();// 0x446e168
	void BPOnAnimationStop();// 0x446e168
	void BPOnAnimationAkAudioStop();// 0x446e168
	void BPOnAnimationAkAudioStart();// 0x446e168
	FString BPGetTreasureBoxName();// 0x446e168

--------------------------------
Class: UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int iRegionHouse;//[Offset: 0x3a4, Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x3a8, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x3ac, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x3b0, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x3b4, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x3b8, Size: 12]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x3c4, Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bShouldConsiderDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 1]
	byte[] SerializeData;//[Offset: 0x458, Size: 12]
	void RecordBreakWindowTlog(PlayerController* EventInstigator);// 0x3ed3994
	static void ProcessWindowCreateList();// 0x3ed3980
	void OnRep_WindowList();// 0x3ed396c
	void ClearWindowList();// 0x3ed3958
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x3ed3730

--------------------------------
Class: ProduceDropItemComponent.LuaActorComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0x150, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0x158, Size: 144]
	int produceID;//[Offset: 0x1e8, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x1ec, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x1f4, Size: 12]
	int GridStep;//[Offset: 0x200, Size: 4]
	int StartAngle;//[Offset: 0x204, Size: 4]
	int TotalAngle;//[Offset: 0x208, Size: 4]
	bool bFannedDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	float AngleInterval;//[Offset: 0x210, Size: 4]
	int RadiusIncrement;//[Offset: 0x214, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x218, Size: 4]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	int[] DropPlanIDList;//[Offset: 0x220, Size: 12]
	int[] NightDropPlanIDList;//[Offset: 0x22c, Size: 12]
	int[] DayDropPlanIDList;//[Offset: 0x238, Size: 12]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x244, Size: 4]
	float TombBoxLifeTime;//[Offset: 0x258, Size: 4]
	bool bCheckCriticalDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	AkAudioEvent* CriticalDropAudioEvent;//[Offset: 0x260, Size: 4]
	int CriticalDropCheckPercent;//[Offset: 0x264, Size: 4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x268, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x2a0, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x2d0, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	float startHeight;//[Offset: 0x2d8, Size: 4]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x2e0, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x2e8, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x2f4, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x2f8, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x2fc, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x300, Size: 4]
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x308, Size: 12]
	float TraceGroundPointZOffset;//[Offset: 0x314, Size: 4]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool bHideDeadTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	int OpenDropGroundEffect;//[Offset: 0x31c, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x320, Size: 4]
	float MaxTraceDist;//[Offset: 0x324, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	 bUseDropCurveAnim_DropToTombBox;//[Size: 1]
	delegate OnItemSpawned;//[Offset: 0x32c, Size: 12]
	delegate OnFinalEffectiveDropRulesGenerated;//[Offset: 0x338, Size: 12]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x344, Size: 4]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	void StartDropWithDropDataByLocation(out const DropPropData[] PropData, Vector Location);// 0x35fe728
	void StartDropWithDropData(Actor* DeadCharacter, Controller* Killer, out const DropPropData[] PropData);// 0x35fe5d4
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x35fe488
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x35fe3cc
	void SetProduceID(int produceID);// 0x35fe358
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x35fe1f4
	void SetDropPlanIDList(out int[] IDList);// 0x35fe128
	void SetDropItemLifeSpan(int ItemTime);// 0x35fe0b0
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x35fdec0
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x35fdc80
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x35fdb10
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x35fd9e4
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x35fd94c
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x35fd834
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x35fd6d8
	int GetCountStrNum(FString CountStr);// 0x3541fd4
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x35fd584
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x35fd430
	void FannedDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x35fd2c0
	PlayerTombBox* DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset, bool bIsAutoExpand, bool bFixBoxName);// 0x35fcf44
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn);// 0x35fce48
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x35fcd30
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x35fca80
	void DropToCommonTreasureBox(Actor* Producer);// 0x35d4ba8
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, FString BoxName, enum BoxType, CommonTreasureBox* CommonTreasureBox);// 0x35fc7a0
	void DropOutPropsNearActor(out const DropPropData[] PropDataList, Actor* StartActor);// 0x35fc678
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn);// 0x35fc518
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList, out DropItemConfig[] FinalEffectiveDropRules);// 0x35fc348
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x35fc22c

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	bool bUseClientSelfLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	Vector2D RangeHigh;//[Offset: 0xc0, Size: 8]
	Vector CustomStartOffset;//[Offset: 0xc8, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0xd8, Size: 4]
	float CustomGravity;//[Offset: 0xdc, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0xe0, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0xe4, Size: 4]
	float ParticleScale;//[Offset: 0xe8, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0xf0, Size: 40]
	ParticleSystem* RareDropTailsParticle;//[Offset: 0x118, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x140, Size: 4]
	ParticleSystem* RareDropTailsParticleSystem;//[Offset: 0x144, Size: 4]
	<int> RareDropItemSet;//[Offset: 0x148, Size: 60]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x188, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x190, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x1b8, Size: 4]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x1bc, Size: 12]
	CurveFloat* AnimCurve;//[Offset: 0x1c8, Size: 4]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID, bool bRare);// 0x347b780
	void OnDropGroundLoadFinsh();// 0x347b76c
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x347b61c
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x347b518

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 4]
	float GroupTime;//[Offset: 0x4, Size: 4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float DropDuration;//[Offset: 0x4, Size: 4]
	float CurrentTime;//[Offset: 0x8, Size: 4]
	float DropStartSpeed;//[Offset: 0xc, Size: 4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 4]
	float DelayStartTime;//[Offset: 0x14, Size: 4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 4]
	Vector StartPos;//[Offset: 0x1c, Size: 12]
	Vector EndPos;//[Offset: 0x28, Size: 12]
	Actor* TargetActor;//[Offset: 0x34, Size: 8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x3c, Size: 4]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DropPropData
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
	int DropMode;//[Offset: 0x8, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int KeyID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 4]
	int ItemDropRuleID;//[Offset: 0x4, Size: 4]
	int RandomCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CommonTreasureBox.PlayerTombBox.LuaActor.Actor.Object
	void RegisterToCurveAnimComponent();// 0x344a258

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 48]
	FString PathToLoad;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44, Size: 4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x738, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x740, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x744, Size: 4]
	ParticleSystem* BrokenEffect;//[Offset: 0x748, Size: 4]
	void NotifyServerBroken(PlayerController* Instigator);// 0x446e168
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x3ee86f0
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x446e168
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x3ee8620
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x3ee855c
	UAEWindowRepData GetRepData();// 0x3ee8424

--------------------------------
Class: AvatarCapture.LuaActor.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x398, Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x39c, Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x3a0, Size: 4]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x3a4, Size: 12]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x3b0, Size: 60]
	class AnimInstance* animBP;//[Offset: 0x3ec, Size: 4]
	<int,class AnimInstance> AnimBP_SpecialMap;//[Offset: 0x3f0, Size: 60]
	class AnimInstance* AnimBP_Real;//[Offset: 0x42c, Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x430, Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x43c, Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool bShowingAvatarModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	<int,FName> SlotToSocket;//[Offset: 0x444, Size: 60]
	FName OBPlayerName;//[Offset: 0x480, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x488, Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x48c, Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x490, Size: 4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x494, Size: 12]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x4a0, Size: 12]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x4ac, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x4b0, Size: 12]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x4bc, Size: 12]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x4c8, Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x4d4, Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x4d8, Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x337bc3c
	void SetEnable(bool IsEnable);// 0x337bbbc
	void ResetWeaponPendant(int WeaponID);// 0x337bb44
	void ResetBackpackPendant(CharacterAvatarComponent2* AvatarComponent);// 0x337bacc
	void RenderCaptureScene();// 0x337bab8
	void RefreshAvatar();// 0x337baa4
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x337b9fc
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x337b92c
	void OnSimulatedWeaponChanged();// 0x337b918
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemID);// 0x337b80c
	void OnAvatarAllMeshLoaded();// 0x337b7f8
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x337b6dc
	int[] GetWeaponSkinIDs();// 0x337b61c
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x337b5f4
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x337b480
	void EquipWeapon();// 0x337b46c
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x337b3f4
	void DisplayAvatarWithComponent(bool IsEnable, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x337b2e8
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x337b220
	void CreateWeapon(bool IsSkeletalMesh);// 0x337b1a0
	void BluePrintSetEnable(bool IsEnable);// 0x446e168
	void ApplyAnimation();// 0x337b18c

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x359, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x35c, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x360, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x364, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x370, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x374, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x378, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x37c, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x380, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x384, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x388, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x390, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x394, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x39c, Size: 4]
	float FarShadowDistance;//[Offset: 0x3a0, Size: 4]
	LinearColor ShadowEdgeColor;//[Offset: 0x3a4, Size: 16]
	float DistanceFieldShadowDistance;//[Offset: 0x3b4, Size: 4]
	float LightSourceAngle;//[Offset: 0x3b8, Size: 4]
	float TraceDistance;//[Offset: 0x3bc, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3c0, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	bool bCastsLandscapeShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d0, Size: 1]
	float LandscapeShadowColor;//[Offset: 0x3d4, Size: 4]
	float LandscapeShadowOffset;//[Offset: 0x3d8, Size: 4]
	float LandscapeShadowSoftHeight;//[Offset: 0x3dc, Size: 4]
	float LandscapeShadowPixelPrecision;//[Offset: 0x3e0, Size: 4]
	LandscapeGeometryAsset* LandscapeGeometry;//[Offset: 0x3e4, Size: 4]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 1]
	float SoftShadowSoftness;//[Offset: 0x3ec, Size: 4]
	float ShadowBlendFactor;//[Offset: 0x3f0, Size: 4]
	float BoundsScale;//[Offset: 0x3f4, Size: 4]
	float NearPlaneOffset;//[Offset: 0x3f8, Size: 4]
	float FarPlaneOffset;//[Offset: 0x3fc, Size: 4]
	float SplitNearOffset;//[Offset: 0x400, Size: 4]
	float SplitFarOffset;//[Offset: 0x404, Size: 4]
	float ShadowMapResolution;//[Offset: 0x408, Size: 4]
	Color ModulatedShadowColor;//[Offset: 0x40c, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x410, Size: 12]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41c, Size: 1]
	float ShadowControl;//[Offset: 0x420, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 1]
	int AtmosphereSunLightIndex;//[Offset: 0x428, Size: 4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x42c, Size: 16]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x43c, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x440, Size: 4]
	float CloudShadowTileSize;//[Offset: 0x444, Size: 4]
	float CloudShadowDensity;//[Offset: 0x448, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x44c, Size: 8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x5fd2040
	void SetOcclusionMaskDarkness(float NewValue);// 0x5fd1fc8
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x5fd1f58
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x5fd1ed8
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x5fd1e60
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x5fd1de8
	void SetDynamicShadowCascades(int NewValue);// 0x5fd1d70
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x5fd1cec
	void SetCloudShadowTileSize(float InValue);// 0x5fd1c74
	void SetCloudShadowTexture(Texture* InTexture);// 0x5fd1bfc
	void SetCloudShadowDensity(float InDensity);// 0x5fd1b84
	void SetCastsCloudShadow(bool InValue);// 0x5fd1b04
	void SetCascadeTransitionFraction(float NewValue);// 0x5fd1a8c
	void SetCascadeDistributionExponent(float NewValue);// 0x5fd1a14
	void SetAtmosphereSunLight(bool bNewValue);// 0x5fd1994

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LandscapeGeometryAsset.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x20, Size: 12]
	Vector[] Normals;//[Offset: 0x2c, Size: 12]
	Vector2D[] UV;//[Offset: 0x38, Size: 12]
	int[] Indices;//[Offset: 0x44, Size: 12]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x50, Size: 60]
	int ComponentIndexCount;//[Offset: 0x8c, Size: 4]
	int ComponentVertexCount;//[Offset: 0x90, Size: 4]
	<FString,LevelComponentMapValue> SubLevelComponentMap;//[Offset: 0x94, Size: 60]
	StaticMesh* HighQualityMesh;//[Offset: 0xd0, Size: 40]
	float HighQualityMeshDestroyHight;//[Offset: 0xf8, Size: 4]
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0xfc, Size: 60]

--------------------------------
Class: LevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 12]
	int[] IndexOffsetArray;//[Offset: 0xc, Size: 12]
	int[] IndexCountArray;//[Offset: 0x18, Size: 12]
	int[] VertexOffsetIndex;//[Offset: 0x24, Size: 12]
	int[] BorderIndex1;//[Offset: 0x30, Size: 12]
	int[] BorderIndex2;//[Offset: 0x3c, Size: 12]
	int[] BorderIndex3;//[Offset: 0x48, Size: 12]
	int[] BorderIndex4;//[Offset: 0x54, Size: 12]
	int[] UnderBorderIndex1;//[Offset: 0x60, Size: 12]
	int[] UnderBorderIndex2;//[Offset: 0x6c, Size: 12]
	int[] UnderBorderIndex3;//[Offset: 0x78, Size: 12]
	int[] UnderBorderIndex4;//[Offset: 0x84, Size: 12]
	int[] BorderIndicesBuffer1;//[Offset: 0x90, Size: 12]
	int[] BorderIndicesBuffer2;//[Offset: 0x9c, Size: 12]
	int[] BorderIndicesBuffer3;//[Offset: 0xa8, Size: 12]
	int[] BorderIndicesBuffer4;//[Offset: 0xb4, Size: 12]
	FString Sibling1Name;//[Offset: 0xc0, Size: 12]
	FString Sibling2Name;//[Offset: 0xcc, Size: 12]
	FString Sibling3Name;//[Offset: 0xd8, Size: 12]
	FString Sibling4Name;//[Offset: 0xe4, Size: 12]
	int Sibling1Idx;//[Offset: 0xf0, Size: 4]
	int Sibling2Idx;//[Offset: 0xf4, Size: 4]
	int Sibling3Idx;//[Offset: 0xf8, Size: 4]
	int Sibling4Idx;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4, Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14, Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 12]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4, Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x308, Size: 4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 12]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x308, Size: 60]
	class Actor[] IgnoreActorClass;//[Offset: 0x344, Size: 12]
	float DecalLongestDistance;//[Offset: 0x350, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x354, Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x360, Size: 4]
	void RemoveDecalOnTimer(int[] DecalIdArray);// 0x3532f2c
	bool RemoveDecal(const int ID, bool NeedUpdate);// 0x3532e60
	int[] CreateNewDecal(out const Transform DecalTrans, MaterialInstanceDynamic* DecalMaterialInstance, out const Vector2D DecalUVOffset, out const Vector2D DecalUVScale, float AutoDisappearTime, byte TraceAxis, bool bNegativeDir, bool bIgnoreTransForEndPosition);// 0x3532ae0

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 4]
	Texture* DecalTexure;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0xf4, Size: 4]
	Texture* DecalTexure;//[Offset: 0xf8, Size: 4]
	int CoordX;//[Offset: 0xfc, Size: 4]
	int CoordY;//[Offset: 0x100, Size: 4]
	Vector2D DecalSize;//[Offset: 0x104, Size: 8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	int GifDecalFrameNum;//[Offset: 0x110, Size: 4]
	float GifDecalFrameTime;//[Offset: 0x114, Size: 4]
	AkAudioEvent* DecalSound;//[Offset: 0x118, Size: 4]
	float AttenuationRadius;//[Offset: 0x11c, Size: 4]
	float OutputVolume;//[Offset: 0x120, Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x308, Size: 4]
	int RemainSupplyTimes;//[Offset: 0x30c, Size: 4]
	int SupplyBulletNum;//[Offset: 0x310, Size: 4]
	float ValidDistance;//[Offset: 0x314, Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x318, Size: 12]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x334c7c8

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x308, Size: 12]
	int AddMonsterExpNum;//[Offset: 0x314, Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x318, Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x31c, Size: 4]
	int UseSuccessTipsId;//[Offset: 0x320, Size: 4]
	float ValidDistance;//[Offset: 0x324, Size: 4]
	float SelfResetTime;//[Offset: 0x328, Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	enum EnhancerState;//[Offset: 0x32d, Size: 1]
	float ReadyTime;//[Offset: 0x330, Size: 4]
	float FixReadyTime;//[Offset: 0x334, Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x338, Size: 12]
	void StateChangeDelegate();// 0x3487c10
	void SetReadyTime(float SReadyTime);// 0x349e614
	void SetEState(enum EState);// 0x349e59c
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x349e4a0
	void ResetTimes();// 0x349e48c
	void ResetSelf();// 0x349e478
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x349e3f8
	void ReadyTimeChangeDelegate();// 0x3363a08
	void OpenEffect();// 0x33492e8
	void OnRep_StateChange();// 0x349e3e4
	void OnRep_ReadyTimeChange();// 0x349e3d0
	void OnRep_FixReadyTimeChange();// 0x349e3d0
	enum GetSpotState();// 0x349e3b4
	void DelayResetSelf();// 0x349e3a0
	void CloseEffect();// 0x3348728

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0, Size: 1]
	int SkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRevivalComponent.LuaActorComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x14c, Size: 4]
	int GotoSpectatingTime;//[Offset: 0x150, Size: 4]
	int64 FinishRevivalTime;//[Offset: 0x158, Size: 8]
	int64 StartObserverTime;//[Offset: 0x160, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0x168, Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x16c, Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0x178, Size: 104]
	DateTime BePickupTime;//[Offset: 0x1e0, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x35e632c
	void SetRemainingRevivalTime(int InValue);// 0x35e62b4
	void SetCaptureIDCardStatus(bool InValue);// 0x35e6234
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x35e61bc
	void OnPlayerQuitSpectating();// 0x35e61a8
	void OnPlayerGotoSpectating();// 0x35e6194
	void OnPlayerExitGame();// 0x35e6180
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x35e6100
	void LeaveRevivalState(uint32 SaviorKey);// 0x35e6088
	bool IsInWaittingRevivalState();// 0x35e6060
	int GetRevivalCountDownTime();// 0x35e6044
	int GetRemainingRevivalTime();// 0x35e601c
	bool GetCaptureIDCardStatus();// 0x35e5ff4
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x35e5f74
	void EnterRevivalState();// 0x35e5f60
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x35e5e64
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x35e5d68

--------------------------------
Class: RevivalPointActor.LuaActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x398, Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x3a0, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x3a4, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x3a8, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x3ac, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	float RevivalCDTime;//[Offset: 0x3b4, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	int RevivalCount;//[Offset: 0x3bc, Size: 4]
	delegate OnHaveRevivedTeammates;//[Offset: 0x3c0, Size: 12]
	int ID;//[Offset: 0x3cc, Size: 4]
	enum CurState;//[Offset: 0x3d0, Size: 1]
	enum PreState;//[Offset: 0x3d1, Size: 1]
	int RevivalTime;//[Offset: 0x3d4, Size: 4]
	bool bCanBroadcastFatalDamageInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	int CurRevivalTime;//[Offset: 0x3dc, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	int OperationalDistance;//[Offset: 0x3e4, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x3e8, Size: 60]
	Transform PTowEleTransform;//[Offset: 0x430, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x460, Size: 60]
	FString ExParticleComponentTag;//[Offset: 0x49c, Size: 12]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x4a8, Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x4e4, Size: 4]
	int SmokingdisappearTime;//[Offset: 0x4e8, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	int IconID;//[Offset: 0x4f0, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x4f4, Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x500, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x508, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x520, Size: 8]
	void UpdateRevivalPointEffect();// 0x3628b14
	void StartRevival();// 0x3628b00
	void ShowOperatorUIByState();// 0x3487c10
	void SetDisableMapUI();// 0x3628aec
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x3628a6c
	bool RecheckCurrentRevivingPlayers();// 0x3628a44
	void OnRep_ShowSmoking();// 0x3628a30
	void OnRep_RevivalPointState(enum LastPreState);// 0x36289b0
	void OnRep_RevivalCDTimeCur();// 0x3348728
	void OnRep_CurrentRevivingPlayers();// 0x362899c
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x362891c
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x362889c
	float GetRevivalCDTimeCurPercent();// 0x3628874
	float GetRevivalCDTimeCur();// 0x362884c
	float GetRevivalCDTime();// 0x3628824
	int GetId();// 0x36287fc
	void DistanceChangedEvent(float Scale);// 0x446e168
	void CheckOverlap();// 0x3363a08
	bool CanOperatorMe(STExtraPlayerController* InPC);// 0x362877c

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 4]
	int64 PickupTime;//[Offset: 0x8, Size: 8]
	int64 DroperTime;//[Offset: 0x10, Size: 8]
	FString PickUpName;//[Offset: 0x18, Size: 12]
	FString DroperPlayerName;//[Offset: 0x24, Size: 12]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0xd0, Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0xd4, Size: 4]
	CurveFloat* OffsetYCurve;//[Offset: 0xd8, Size: 4]
	Vector RandomVector;//[Offset: 0xdc, Size: 12]
	float TextScale;//[Offset: 0xe8, Size: 4]
	LinearColor NormalTextColor;//[Offset: 0xec, Size: 16]
	float HeadShotTextScale;//[Offset: 0xfc, Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x100, Size: 16]
	float BigDamageTextScale;//[Offset: 0x110, Size: 4]
	float BigDamage;//[Offset: 0x114, Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x118, Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x128, Size: 4]
	int FloatTextZorder;//[Offset: 0x12c, Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x134, Size: 12]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x140, Size: 12]
	float[] RecycleTimeList;//[Offset: 0x14c, Size: 12]
	float RecycleTime;//[Offset: 0x158, Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x15c, Size: 4]
	void UpdateTextWidgetPos(out ShowTextWidgetData ShowTextWidgetData);// 0x34ce570
	void ShowFloatingText(out const FloatingTextData FloatingTextData);// 0x34ce4e4
	void SetFloatingText(UserWidget* FloatingTextWidget, int Damage);// 0x446e168
	void ReycleFloatingTextWidget();// 0x34ce4d0
	void PlayFloatingTextAnim(out ShowTextWidgetData ShowTextWidgetData, int Damage, bool IsHeadshot);// 0x34ce3b0
	void OnFloatingDamageText(float BaseDamage, bool IsHeadshot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x34ce188
	ShowTextWidgetData GetShowTextWidgetData(out const FloatingTextData FloatingTextData);// 0x34ce0e0
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x34cdfec

--------------------------------
Class: ShowTextWidgetData
	UserWidget* FloatingTextWidget;//[Offset: 0x0, Size: 4]
	float RecycleTime;//[Offset: 0x4, Size: 4]
	Vector ShowWorldPos;//[Offset: 0x8, Size: 12]
	Vector RandomOffset;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParachuteAnimAssetData
	<byte,AnimationAsset*> AnimAssetCache;//[Offset: 0x0, Size: 60]
	bool IsAnimCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	delegate OnLoadWeatherLevelCompleted;//[Offset: 0xc0, Size: 12]
	WeatherInfo WeatherLevelInfo;//[Offset: 0xcc, Size: 20]
	FString LastLoadedWeatherLevelName;//[Offset: 0xe0, Size: 12]
	FString DefaultWeatherLevelName;//[Offset: 0xec, Size: 12]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	void UnloadStreamLevel(FString LevelName);// 0x3eee0cc
	void SyncWeatherLevelInfo();// 0x3eee0b8
	void SwitchDifferentWeather(FString oldMap, FString newMap, int iNewMapID);// 0x3eede04
	void OnWeatherLevelChanged();// 0x446e168
	void OnUnLoadStreamLevelCompleted();// 0x3eeddf0
	void OnRep_WeatherSyncCount();// 0x3eedddc
	void OnLoadWeatherLevelCompleted__DelegateSignature();// 0x446e168
	void OnLoadStreamLevelCompleted();// 0x3eeddc8
	void LoadWeatherLevel();// 0x3eeddb4
	void LoadStreamLevel(FString LevelName, int WeatherID);// 0x3eedc18
	void LoadDefaultWeatherLevel();// 0x3eedc04
	void Init();// 0x343ead8

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	int CircleIndex;//[Offset: 0x430, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x434, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x450, Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x470, Size: 32]
	float TickOBPlayerCD;//[Offset: 0x490, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x494, Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x498, Size: 4]
	DynamicWeatherController* DstController;//[Offset: 0x49c, Size: 4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x4a0, Size: 4]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x4a8, Size: 68]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x4f8, Size: 12]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x504, Size: 12]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x3483d44
	void BlendToWeather(bool bDstWeather);// 0x3483cc4

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x308, Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x34c, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x350, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x36c, Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x3a8, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x3c4, Size: 28]
	float ServerElapsedTime;//[Offset: 0x3e0, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3e9, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3ec, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x3f8, Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x414, Size: 4]
	enum UICountDownType;//[Offset: 0x42a, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 1]
	void StartTransition();// 0x3484ad0
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x3484a58
	void RPCRequireControl();// 0x3484a44
	void RPCRequire();// 0x3484a30
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x34849b0
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x33510e0
	void ReinitInDemoReplay();// 0x3484744
	void RefreshWeatherPredictionUI();// 0x348499c
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x3484910
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x3484884
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x34847f8
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x348476c
	void OnRep_NextWeatherCountDownTime();// 0x3484730
	void OnRep_ControllerDataForReplay();// 0x3484758
	void OnRep_ControllerData();// 0x3484744
	void OnRep_bEnableWeatherPredictionUI();// 0x3484730
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x446e168
	void HandleClientHasReactivated();// 0x348471c
	void GotoSpecificWeather(int WeatherIndex);// 0x34846a4
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x34845c8
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x3484534
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x34844b4
	float GetInProgressElapsedTimeSecWithWeather();// 0x348448c
	float GetGlobalWeatherSystemTimeOnServer();// 0x3484464
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x348441c
	void ForceStopDynamicWeatherChangeOnServer();// 0x3484408
	void ForceStartNextWeatherChangeOnServer();// 0x34843f4
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x3484344
	void ClientGotoSpecificWeather(int WeatherIndex);// 0x34842cc

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24, Size: 12]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30, Size: 12]
	float TimeMultiplier;//[Offset: 0x3c, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DynamicWeatherController.ActorComponen@.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xbc, Size: 12]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xc8, Size: 12]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xd4, Size: 12]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xe0, Size: 12]
	delegate WeatherRecover;//[Offset: 0xec, Size: 12]
	enum DynamicWeatherType;//[Offset: 0xf8, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0xfc, Size: 4]
	CurveFloat* LightCurve;//[Offset: 0x100, Size: 4]
	float TargetLightValue;//[Offset: 0x104, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x10c, Size: 4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x110, Size: 4]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x114, Size: 4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x118, Size: 4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x11c, Size: 4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x120, Size: 4]
	float UINotifyTimeBeforeStart;//[Offset: 0x124, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x128, Size: 12]
	int ChangeStartUINotifyID;//[Offset: 0x134, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x138, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x13c, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x140, Size: 4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x144, Size: 4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x148, Size: 4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x150, Size: 28]
	float RuningDirection;//[Offset: 0x16c, Size: 4]
	float RuningTime;//[Offset: 0x170, Size: 4]
	float LerpTotalTime;//[Offset: 0x174, Size: 4]
	FString WeatherName;//[Offset: 0x178, Size: 12]
	DirectionalLight* MainLight;//[Offset: 0x184, Size: 4]
	SkyLight* SkyLight;//[Offset: 0x188, Size: 4]
	ExponentialHeightFog* Fog;//[Offset: 0x18c, Size: 4]
	WeatherObject ObjectValues;//[Offset: 0x190, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x1f8, Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x264, Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x2cc, Size: 12]
	void UINotifyCallbackOnServer();// 0x3483304
	void OnUserQualitySettingChanged(int renderlevel);// 0x3332304

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	AirDropPathData3D AirDropPathData;//[Offset: 0x44c, Size: 60]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 1]
	Vector BlueCircle;//[Offset: 0x48c, Size: 12]
	Vector WhiteCircle;//[Offset: 0x498, Size: 12]
	float CirclePain;//[Offset: 0x4a4, Size: 4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	Vector AirAttackArea;//[Offset: 0x4ac, Size: 12]
	delegate OnPlayerDamageInfo;//[Offset: 0x4b8, Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x4c4, Size: 12]
	delegate OnHideCircle;//[Offset: 0x4d0, Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x4dc, Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x4e8, Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x4f4, Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x500, Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x50c, Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x518, Size: 12]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x524, Size: 12]
	delegate STExtraCharacterDestroyed;//[Offset: 0x530, Size: 12]
	int PlayerNum;//[Offset: 0x548, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x550, Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x55c, Size: 12]
	delegate OnGameEnd;//[Offset: 0x568, Size: 12]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x577, Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57b, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57e, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57f, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x583, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x584, Size: 12]
	int TrainingCountdownTimer;//[Offset: 0x590, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x598, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a6, Size: 1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x5a8, Size: 12]
	uint64 DSOptimGrayPublishFlags;//[Offset: 0x5f0, Size: 8]
	delegate OnDSOptimGrayPublishFlagsChanged;//[Offset: 0x5f8, Size: 12]
	delegate OnDSSwitchChanged;//[Offset: 0x604, Size: 12]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x612, Size: 1]
	FString RoomType;//[Offset: 0x614, Size: 12]
	int nSignalGunEffectId;//[Offset: 0x620, Size: 4]
	byte nServerZoneId;//[Offset: 0x624, Size: 1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x665, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x666, Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x667, Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x66c, Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x670, Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x674, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x678, Size: 4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67e, Size: 1]
	delegate OnAirAttack;//[Offset: 0x680, Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x68c, Size: 12]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x698, Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a5, Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a6, Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x6a8, Size: 12]
	FName[] EnableMapLayers;//[Offset: 0x6b4, Size: 12]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x6c0, Size: 4]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x6c4, Size: 4]
	class ModAdapter* ModAdapterClass;//[Offset: 0x6c8, Size: 4]
	ModAdapter* ModAdapter;//[Offset: 0x6cc, Size: 4]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x6d4, Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x6d8, Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x6e0, Size: 48]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x710, Size: 4]
	bool bIsShowCircleWarningTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 1]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x715, Size: 1]
	int ReadyStateTime;//[Offset: 0x720, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x740, Size: 12]
	delegate RetriveDataAfterReconnectingDelegate;//[Offset: 0x74c, Size: 12]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x75c, Size: 12]
	int CurCircleWave;//[Offset: 0x768, Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76d, Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x770, Size: 4]
	FName GameModeState;//[Offset: 0x788, Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	float timeFromLessen;//[Offset: 0x794, Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x798, Size: 12]
	Vector CircleLessenTo;//[Offset: 0x7a4, Size: 12]
	float timeForLessen;//[Offset: 0x7b0, Size: 4]
	byte CurCircleStatusInfo;//[Offset: 0x7c0, Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x7c4, Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x7c8, Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x7cc, Size: 4]
	byte CurAirAttackType;//[Offset: 0x7d0, Size: 1]
	int CurAirAttackWave;//[Offset: 0x7d4, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x7dc, Size: 4]
	float ExtraRadius;//[Offset: 0x7e0, Size: 4]
	int AlivePlayerNum;//[Offset: 0x7e4, Size: 4]
	int AliveTeamNum;//[Offset: 0x7e8, Size: 4]
	int NoneAIGameTime;//[Offset: 0x7ec, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x7f0, Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x7fc, Size: 12]
	delegate OnGetPlayerLandAreaList;//[Offset: 0x808, Size: 12]
	delegate OnUICustomBehavior;//[Offset: 0x814, Size: 12]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x820, Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x824, Size: 12]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0x830, Size: 124]
	enum GameModeType;//[Offset: 0xa9c, Size: 1]
	enum GameModeConfigType;//[Offset: 0xa9d, Size: 1]
	enum GameModeConfigSubType;//[Offset: 0xa9e, Size: 1]
	enum GameModeSubType;//[Offset: 0xa9f, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0xaa0, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0xaa4, Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab1, Size: 1]
	int WeatherID;//[Offset: 0xabc, Size: 4]
	FString WeatherLevel;//[Offset: 0xac0, Size: 12]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacc, Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0xadc, Size: 4]
	float WeatherPhaseIndex;//[Offset: 0xae0, Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0xae4, Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0xaf0, Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0xafc, Size: 12]
	enum CurDynamicWeatherState;//[Offset: 0xb08, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xb0c, Size: 60]
	float InviteCountDownTime;//[Offset: 0xb48, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xb4c, Size: 12]
	Vector[] CircleArray;//[Offset: 0xb58, Size: 12]
	GameDataMining GameDataMining;//[Offset: 0xb64, Size: 60]
	uint64 GameID;//[Offset: 0xba0, Size: 8]
	FString GameModeID;//[Offset: 0xba8, Size: 12]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xbb4, Size: 12]
	FString ModLogicSwitchTag;//[Offset: 0xbc0, Size: 12]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xbcc, Size: 12]
	Character* CurCastActorMsgOwner;//[Offset: 0xbd8, Size: 8]
	float StartFlyTime;//[Offset: 0xbe0, Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xbe8, Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xbf0, Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xbf8, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc11, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc12, Size: 1]
	int EnableNewStateMachine;//[Offset: 0xc14, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xc1c, Size: 4]
	float BroadcastClientDistance;//[Offset: 0xc20, Size: 4]
	int[] FinalWinTeams;//[Offset: 0xc3c, Size: 12]
	uint32[] FinalWinPlayers;//[Offset: 0xc48, Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xc54, Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc59, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xc5c, Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xc68, Size: 12]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc75, Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc76, Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc77, Size: 1]
	FString GuideImageName;//[Offset: 0xc78, Size: 12]
	FString GuideLuaTableName;//[Offset: 0xc84, Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0xc90, Size: 12]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c, Size: 1]
	float PlayerNoOperationTime;//[Offset: 0xca0, Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0xca4, Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0xcac, Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb5, Size: 1]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0xcb8, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xcbc, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xcc8, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xcd4, Size: 12]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xce0, Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xcf0, Size: 4]
	class Actor* PreloadPoolActorClass;//[Offset: 0xcf8, Size: 40]
	class Actor* CommonPreloadPoolActorClass;//[Offset: 0xd20, Size: 40]
	FString CommonPrePoolActorPath;//[Offset: 0xd48, Size: 12]
	<FString,ActorExtraComponents> ActorExtraComponents;//[Offset: 0xd54, Size: 60]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0xd90, Size: 4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0xd94, Size: 4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd98, Size: 1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd99, Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0xd9c, Size: 12]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0xdac, Size: 12]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 1]
	FString FServerStartTime;//[Offset: 0xdbc, Size: 12]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 1]
	uint32 ServerStartTimestamp;//[Offset: 0xdcc, Size: 4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0xdd0, Size: 12]
	FString MainWeaponTableName;//[Offset: 0xddc, Size: 12]
	class Object[] PlaneAvatarClassArray;//[Offset: 0xde8, Size: 12]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0xe08, Size: 60]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0xe44, Size: 60]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0xe80, Size: 4]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0xe84, Size: 4]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe88, Size: 1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe89, Size: 1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8a, Size: 1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8b, Size: 1]
	int PlayerAddonCount;//[Offset: 0xe8c, Size: 4]
	STExtraBaseCharacter*[] DyingCharacters;//[Offset: 0xe98, Size: 12]
	bool bEnableCarryAllCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea4, Size: 1]
	MapUIMarkManager* MarkMgr;//[Offset: 0xea8, Size: 4]
	FString RenderTargetMgrClassPath;//[Offset: 0xeac, Size: 12]
	WidgetToRenderTarget* RenderTargetMgr;//[Offset: 0xeb8, Size: 4]
	GameStateWeaponRule WeaponRule;//[Offset: 0xebc, Size: 32]
	bool bHasUnderEarthWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedc, Size: 1]
	float RoundEndSeconds;//[Offset: 0xee0, Size: 4]
	<uint32,EmotePlayer> LocalEmotePlayerList;//[Offset: 0xee4, Size: 60]
	ReplayRecordInfo* ReplayRecordInfo;//[Offset: 0xf20, Size: 4]
	ParallelWorldDebugSummary ParallelWorldDebugSummary;//[Offset: 0xf24, Size: 20]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x446e168
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x446e168
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x375fe44
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x375fc38
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x375f8b0
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x375f6ec
	STExtraBaseCharacter* TryGetCharacterByPlayerKey(FString PlayerKey);// 0x375f58c
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x375f4a8
	void SimulateAirAttackOver(int waveIndex);// 0x375f3f4
	void ShowGameTips(int PlayerKey, int TipsID, FString Params);// 0x375f2b0
	void SetTagCulling(bool IsUse);// 0x34190e8
	void SetStandAloneIDSwitch(const int SwitchId, const FString bOpen);// 0x375f110
	void SetServerStartTime(uint32 nServerStartTime);// 0x375f098
	void SetSendStartFlow(uint32 PlayerKey);// 0x375f020
	void SetSendEndFlow(uint32 PlayerKey);// 0x375efa8
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x375ee6c
	static void SetOnGameStateEndPlay(delegate InOnGameStateEndPlay);// 0x375edd0
	static void SetOnGameStateBeginPlay(delegate InOnGameStateBeginPlay);// 0x375ed34
	void SetIsLowMatch(int nClientType);// 0x375ecbc
	void SetCustomRoute(out const Vector2D StartPoint, out const Vector2D EndPoint);// 0x375ebe4
	void SetCurAirAttackWave(int AirAttackWave);// 0x375eb6c
	void SetCurAirAttackType(byte airattacktype);// 0x375eaf4
	void SetCircleLessening(bool IsLessing);// 0x375ea78
	void SetCircleInfo(GetCircleInfo ReConnectInfo);// 0x375e96c
	void SetAvatarDownloadInBattleClientSwitch(bool bOpen);// 0x375e8ec
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x375e874
	void ServerRemoteDestroyAllActor();// 0x375e860
	void ServerRemoteDestroyActor(int SingleId);// 0x375e7e8
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x375e68c
	void RPC_Client_RemoteDestroyAllActor();// 0x375e670
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x375e5f0
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x375e45c
	void RoomTypeChanged();// 0x375e440
	void PlayPawnActive(FString PlayerKey, Actor* PlayerCharacter);// 0x375e29c
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x446e168
	void OnRep_WeatherStateChanged();// 0x375e288
	void OnRep_WeatherLevel();// 0x375e274
	void OnRep_WeatherId();// 0x375e260
	void OnRep_VisualFieldFeatureParam();// 0x375e24c
	void OnRep_VeteranRecruitListUpdate();// 0x375e238
	void OnRep_UpassInfoList();// 0x375e224
	void OnRep_StartFlyTime();// 0x375e210
	void OnRep_RoundEndSeconds();// 0x375e1fc
	void OnRep_RoomType();// 0x375e1e8
	void OnRep_ResetWeatherPlaySpeed();// 0x375e1d4
	void OnRep_ReplicatedWorldTimeSeconds();// 0x35e3d78
	void OnRep_ReadyStateTime();// 0x360d384
	void OnRep_ReadyStateCountingDown();// 0x3365b48
	void OnRep_PlayerNumChange();// 0x3365b48
	void OnRep_PlayerAddonCount();// 0x375e1b8
	void OnRep_MarkSyncData();// 0x375e1a4
	void OnRep_IsTrainingMode();// 0x375e190
	void OnRep_IsShowDeadBox();// 0x375e17c
	void OnRep_IsOpenDuelMode();// 0x3365b48
	void OnRep_IsFPPMode();// 0x375e168
	void OnRep_IsDark();// 0x375e154
	void OnRep_GameTerminatorPlayerKey();// 0x375e140
	void OnRep_GameModeType();// 0x375e12c
	void OnRep_GameModeSubType();// 0x375e118
	void OnRep_GameModeState();// 0x375e0fc
	void OnRep_GameModeFeatureSet();// 0x3365b48
	void OnRep_FinalWinTeams();// 0x3365b48
	void OnRep_FinalWinPlayers();// 0x3365b48
	void OnRep_DynamicWeatherState();// 0x375e0e8
	void OnRep_DSSwitch();// 0x375e0d4
	void OnRep_DSOptimGrayPublishFlags();// 0x375e0c0
	void OnRep_CircleWaveChanged();// 0x375e0a4
	void OnRep_CircleArray();// 0x3365b48
	void OnRep_AliveTeamNum();// 0x375e090
	void OnRep_AlivePlayerNum();// 0x375e07c
	void OnRep_AirDropPathData();// 0x375e068
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x360d298
	void OnPlaneAvatarAsyncLoadComplete(out class Object[] ClassArrays);// 0x375df9c
	void OnGameStateEndPlay__DelegateSignature(byte EndPlayReason);// 0x446e168
	void OnGameStateBeginPlay__DelegateSignature(GameState* GameState);// 0x446e168
	void OnGameModeDisplayNameChange();// 0x375df88
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x360cd80
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage, out const DamageEvent DamageEvent, float DamageBeforeCalArmor, bool bIsFatalHealthCost, Actor* DamageCauser);// 0x360cb2c
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x375decc
	bool IsSendStartFlow(uint32 PlayerKey);// 0x375de4c
	bool IsSendEndFlow(uint32 PlayerKey);// 0x375ddcc
	bool IsRevivalGame();// 0x375dda4
	bool IsPVEMode();// 0x375dd7c
	bool IsNoCircleInfo();// 0x375dd54
	bool IsMapUseTeamPattern();// 0x33e789c
	bool IsInWhiteCircle(out const Vector pos);// 0x375dcc8
	bool IsInNight();// 0x375dc98
	bool IsInBlueCircleByCircleMgr(Actor* _actor);// 0x375dc18
	bool IsInBlueCircle(out const Vector pos);// 0x375db8c
	bool IsFeatureSupported(enum SubSystemType);// 0x375db04
	bool IsEnableObjectPool();// 0x374dd00
	bool IsEnableDamageInfo();// 0x365b774
	bool IsCreativeEditor();// 0x375dad4
	FString GetWeatherLevelName();// 0x375da14
	int GetWeatherID();// 0x375d9ec
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x375d9c4
	int GetServerStartUnixTimestamp();// 0x375d99c
	FString GetServerStartTime();// 0x375d8dc
	float GetRepServerWorldTimeSeconds();// 0x375d8b4
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x375d808
	int GetPVEWeatherPhaseIndex();// 0x375d7e0
	STExtraPlayerState* GetPlayerStateByUID(uint64 PlayerUID);// 0x375d75c
	STExtraPlayerState* GetPlayerStateByPlayerName(FString PlayerName);// 0x375d698
	STExtraPlayerState* GetPlayerStateByPlayerKey(uint32 PlayerKey);// 0x375d618
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x375d5f0
	bool GetIsReadyStateReport();// 0x375d5c0
	bool GetIsCreative();// 0x375d590
	FName GetGameModeState();// 0x375d550
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x375d528
	FString GetDSSwitchValueFastWithCache(const int InSwitchId);// 0x375d420
	FString GetDSSwitchValue(const int InSwitchId);// 0x375d318
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x375d2f0
	enum GetCurWeatherState();// 0x375d2c8
	enum GetCurDynamicWeatherState();// 0x375d2a0
	int GetCurCircleWave();// 0x375d284
	byte GetCurCircleState();// 0x375d244
	int GetCurCircleIndex();// 0x375d21c
	GetCircleInfo GetCircleStateInfo();// 0x375d190
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x375d0e4
	MarkSyncData[] GetAllMarkLocalData(byte _TYPE);// 0x375d038
	int GetAlivePlayerNum();// 0x375d010
	AirDropPathData3D GetAirDropPathData();// 0x375ce74
	STExtraBaseCharacter* FindCharacterByPlayerKey(FString PlayerKey);// 0x375cd14
	void ExecuteCVarConfig();// 0x375cd00
	void EnableObjectPool(bool bEnable);// 0x375cc80
	void DSSwitchChangeDelegate__DelegateSignature();// 0x446e168
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x375cbbc
	void ClearAirDropPathData();// 0x375cba8
	bool CheckIsLowMatch();// 0x375cb80
	void CheckInitLuaRemoteEvent();// 0x375cb6c
	bool CheckDSSwitchOpen(const int SwitchId);// 0x375cae4
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x367842c
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x375ca6c
	void ChangeDynamicWeatherState(enum DayState);// 0x375c9f4
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x375c8ec
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x375c6d8
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x375c50c
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x375c340
	void BroadcastTemporaryMessage(FString Message);// 0x375c27c
	void BroadcastShowGameTips(int TipsID, FString Params);// 0x375c174
	void BroadcastLuaTipsBehaviorWithTime(FString BehaviorTag, int ID, FString Params1, FString Params2, float ControlTime);// 0x375bf18
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x375bd04
	void BroadcastEndCircle();// 0x375bca8
	void BroadcastCustomLuaTipsBehavior(FString BehaviorTag, int ID, const byte[] ExpandDataContent);// 0x375bb1c
	void BroadcastCircleWaveOver(int Index);// 0x375ba68
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain, bool IsCustomCircle);// 0x375b754
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex, enum State);// 0x375b53c
	void BroadcastAirAttackWarning(const Vector AirAttackAreaSrc, int waveIndex);// 0x375b480
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackAreaSrc, int waveIndex);// 0x375b2ac
	void AsyncLoadResFinishCallback();// 0x375b298
	void AsyncLoadCommonResFinishCallback();// 0x375b284
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x360b4d8
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x360b414
	void AddPveZombieGrenadeCount(int Value);// 0x375b20c
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x375b194
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x360b10c

--------------------------------
Class: UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x428, Size: 12]
	FString DamageSearchTableName;//[Offset: 0x434, Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x3ed31a4
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x3ed3068
	bool CheckDSSwitchOpen(const int SwitchId);// 0x375cae4

--------------------------------
Class: LuaGameState.GameState.GameStateBase.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x39c, Size: 60]
	FString LuaFilePath;//[Offset: 0x3d8, Size: 12]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x338, Size: 8]
	FName PreviousMatchState;//[Offset: 0x340, Size: 8]
	int ElapsedTime;//[Offset: 0x348, Size: 4]
	void OnRep_MatchState();// 0x5fed414
	void OnRep_ElapsedTime();// 0x5fed550

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x1c, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector MapCenter;//[Offset: 0x2c, Size: 12]
	float Radius;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ViewMaskManager.Object
	enum ViewMaskTypeSetting;//[Offset: 0x1c, Size: 1]
	class Actor[] FilterActorClassList;//[Offset: 0x20, Size: 12]
	void SetViewMaskType(enum NewMaskType);// 0x38f9c70
	bool IsPlayerViewMaskValid(STExtraBaseCharacter* BaseCharacter);// 0x38f9bf0
	void Init();// 0x38f9bdc
	int ClearViewMaskForActor(Actor* MaskActor);// 0x38f9b5c
	int ApplyViewMaskForPlayer(STExtraBaseCharacter* BaseCharacter);// 0x38f9adc
	int ApplyViewMaskForActorWithOwnerPlayer(Actor* MaskActor, STExtraBaseCharacter* BaseCharacter);// 0x38f9a18

--------------------------------
Class: ModAdapter.Object
	Actor* SpawnPointLightActor(ModAdapterSpawnInfo SpawnInfo);// 0x3572630
	Actor* SpawnModActorByClass(class Actor ActorClass, out const Transform SpawnTransform, Pawn* Instigator, Actor* Owner);// 0x3572480

--------------------------------
Class: ModAdapterSpawnInfo
	Actor* RelatedActor;//[Offset: 0x0, Size: 4]
	FName LightType;//[Offset: 0x8, Size: 8]
	Transform SpawnTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14, Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x18, Size: 12]
	class Character[] ExcludeCheckCharacterClass;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x50, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x58, Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x94, Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xd0, Size: 8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	int updateTime;//[Offset: 0xc, Size: 4]
	int upassLevel;//[Offset: 0x10, Size: 4]
	int upassScore;//[Offset: 0x14, Size: 4]
	int planeAvatarId;//[Offset: 0x18, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	FString iconUrl;//[Offset: 0x20, Size: 12]
	FString Nation;//[Offset: 0x2c, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38, Size: 52]
	int upassKeepBuy;//[Offset: 0x6c, Size: 4]
	int upassCurValue;//[Offset: 0x70, Size: 4]
	int pass_type;//[Offset: 0x74, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x78, Size: 4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24, Size: 12]
	GameWatchReport[] WatchReport;//[Offset: 0x30, Size: 12]

--------------------------------
Class: GameWatchReport
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	uint64 player_uid;//[Offset: 0x10, Size: 8]
	float total_time;//[Offset: 0x18, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: WatchFlow
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	byte CurrentInstanceCount;//[Offset: 0xbc, Size: 1]
	byte CurrentLocalInstanceCount;//[Offset: 0xbd, Size: 1]
	MarkDispatchAction[] ActionQueue;//[Offset: 0xc0, Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0xcc, Size: 12]
	MarkDispatchAction[] FramingDispatchMarkQueue;//[Offset: 0xd8, Size: 12]
	int MarkCountProcessed;//[Offset: 0xe4, Size: 4]
	int OverflowFrameCount;//[Offset: 0xe8, Size: 4]
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x3563624
	byte GenerateNewLocalInstanceID();// 0x35635fc
	byte GenerateNewInstanceID();// 0x35635d8
	void DispatchMarkData(MarkDispatchAction Data);// 0x3563420
	void ClearMarkDataByTypeID(int TypeId, enum MarkTypeIDClearType, STExtraPlayerState* WeakPlayerState);// 0x3563320

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4, Size: 68]
	float DispatchDelayTime;//[Offset: 0x48, Size: 4]
	float RangeRad;//[Offset: 0x4c, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x50, Size: 8]
	float DispatchTime;//[Offset: 0x58, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x60, Size: 16]

--------------------------------
Class: ActorExtraComponents
	class ActorComponent[] BPComponents;//[Offset: 0x0, Size: 12]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0xbc, Size: 60]
	float EventCDTime;//[Offset: 0xf8, Size: 4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x393859c

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c, Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28, Size: 12]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x34ccc28
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x34ccba8
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x34ccad4
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x34cca5c
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x446e168
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x446e168

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0xbc, Size: 12]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0xc8, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0xcc, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	enum FieldOfViewNotificationStatus;//[Offset: 0xd8, Size: 1]
	bool IsNotificationWorking();// 0x34cc6ac
	static int IsGlobalDebugLineTraceDrawn();// 0x34cc680
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x446e168
	enum GetFieldOfViewNotificationStatus();// 0x34cc658

--------------------------------
Class: GameModeCVarConfigItem
	FString Key;//[Offset: 0x0, Size: 12]
	FString Value;//[Offset: 0xc, Size: 12]

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x320, Size: 12]
	float DamageFieldUpdatePeriod;//[Offset: 0x384, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x388, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x384ffd0
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x384fec0
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x350db18
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* Receiver, bool RebuildSphere);// 0x384fd28

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 4]
	SimpleCollisionSphere Sphere;//[Offset: 0x4, Size: 16]
	float PassedTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	float Radius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: MapUIMarkManager.LuaActorComponent.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0x17c, Size: 12]
	class ScreenMarkManager* ScreenMarkMgrClass;//[Offset: 0x188, Size: 4]
	class ScreenRotationMarkManager* ScreenRotationMarkMgrClass;//[Offset: 0x18c, Size: 4]
	MapUIBase* m_pMiniMap;//[Offset: 0x190, Size: 4]
	MapUIBase* m_pEntireMap;//[Offset: 0x194, Size: 4]
	ScreenMarkManager* m_ScreenMarkManager;//[Offset: 0x198, Size: 4]
	ScreenRotationMarkManager* m_ScreenRotationMarkManager;//[Offset: 0x19c, Size: 4]
	int[] CurMarkInstList;//[Offset: 0x1a0, Size: 12]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x224, Size: 12]
	delegate OnMiniMapPointerException;//[Offset: 0x230, Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x23c, Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0x240, Size: 4]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x270, Size: 12]
	float TickRate_Internal;//[Offset: 0x284, Size: 4]
	float TickRate_Callback;//[Offset: 0x288, Size: 4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x28c, Size: 60]
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x35685ec
	void OnShowOrHideLegendMarkWidget(FString Tag, bool bIsShow);// 0x3568444
	void OnMiniMapPointerExceptionDelegate__DelegateSignature();// 0x446e168
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x446e168

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 4]
	FString UIBPSoftPtr;//[Offset: 0x4, Size: 12]
	FString UIDescription;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ScreenMarkManager.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	<int,ScreenMarkGroupData> ScreenMarkGroupMap;//[Offset: 0x6c, Size: 60]
	<FString,ScreenMarkPriorityGroup> ScreenMarkPriorityGroupMap;//[Offset: 0xa8, Size: 60]
	bool bDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	bool bUseLuaWorldOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 1]
	Vector2D LimitXY;//[Offset: 0xe8, Size: 8]
	Vector2D LimitZW;//[Offset: 0xf0, Size: 8]
	Vector2D UIOffset;//[Offset: 0xf8, Size: 8]
	byte[] CheckObjectTypes;//[Offset: 0x100, Size: 12]
	ActorVectorPair[] ActorVectorHeapToBind;//[Offset: 0x218, Size: 12]
	ActorVectorPair[] ActorVectorArrayToUnBind;//[Offset: 0x224, Size: 12]
	void UpdateScreenMarkState(int TypeId, int InstanceID, out const CustomMarkEventData EventData);// 0x36368ec
	void UpdateBindingWidgetByPanel(int ID);// 0x3636874
	void UpdateBindingLocationWidget(int ID);// 0x36367fc
	void UpdateBindingActorWidget(int ID);// 0x3636784
	void ResetGroupQueryTime(out ScreenMarkGroupData GroupData);// 0x36365a0
	void RemoveScreenMark(int TypeId, int InstanceID);// 0x36364d8
	bool RemoveBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x3636414
	void ReleaseGroupByID(int ID);// 0x363639c
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x36362d8
	bool PushScreenMark(int InstanceID, out const MarkSyncData MarkData);// 0x3636138
	void OnLocationUnbindUI(Widget* BindWidget, int ID);// 0x3636074
	void OnLocationBindUI(Widget* BindWidget, int ID);// 0x3635fb0
	void OnInitMarkGroupData(int ID);// 0x34ccba8
	void OnInit();// 0x3387ff8
	void OnActorUnbindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x3635ea8
	void OnActorBindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x3635da0
	bool IsInBindingRange(out const Vector PlayerToCharacter, int ID);// 0x3635ccc
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x3635c00
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x3635b3c
	Widget* FetchUI(int ID);// 0x3635abc
	void ClearMarkGroupByTypeID(int ID);// 0x3635a44
	bool CheckShouldShow(Actor* Actor, out const ScreenMarkGroupData GroupData);// 0x3635820
	bool CheckGroupNeedExist(int TypeId);// 0x3635798
	bool AddBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x36356d4

--------------------------------
Class: ScreenMarkGroupData
	ScreenMarkGroupConfig Config;//[Offset: 0x0, Size: 88]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x58, Size: 4]
	<int,ScreenMarkInstanceData> MarkInstanceDataMap;//[Offset: 0x5c, Size: 60]
	Widget*[] HidingUIArr;//[Offset: 0x98, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0xa4, Size: 12]
	<int,Widget*> MarkBindingUIMap;//[Offset: 0xb0, Size: 60]
	UAEUserWidget* ScreenMarkPanel;//[Offset: 0xf4, Size: 4]
	CanvasPanel* AddToPanel;//[Offset: 0xf8, Size: 4]
	Actor*[] IgnoreBlockArr;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: ScreenMarkGroupConfig
	int MaxWidgetNum;//[Offset: 0x0, Size: 4]
	float MaxShowDistance;//[Offset: 0x4, Size: 4]
	float UpdateBindingInterval;//[Offset: 0x8, Size: 4]
	float UpdateBindingIntervalMax;//[Offset: 0xc, Size: 4]
	float ReduseBindingVelocityThreshold;//[Offset: 0x10, Size: 4]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bIsUpdatedByPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	bool bBindOutScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	bool bBindBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 1]
	FString UIPathName;//[Offset: 0x18, Size: 12]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	FName SkeletaSocketName;//[Offset: 0x28, Size: 8]
	Vector WorldPositionOffset;//[Offset: 0x30, Size: 12]
	Vector2D UIOffset;//[Offset: 0x3c, Size: 8]
	bool bNeedUpdateState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	FString PriorityGroupTag;//[Offset: 0x48, Size: 12]
	byte Priority;//[Offset: 0x54, Size: 1]
	bool bNeedOBShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool bNeedReplayShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]

--------------------------------
Class: UIDuplicatedItemPool.Object
	delegate OnAsyncFinishedDelegate;//[Offset: 0x38, Size: 12]
	bool bActiveItemListHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	FString[] TagArray;//[Offset: 0x48, Size: 12]
	FString ItemBPClassPath;//[Offset: 0x54, Size: 12]
	class Object* ItemClass;//[Offset: 0x60, Size: 4]
	UserWidget*[] UsedItemList;//[Offset: 0x64, Size: 12]
	UserWidget*[] IdleItemList;//[Offset: 0x70, Size: 12]
	UserWidget*[] IdleItemListHold;//[Offset: 0x7c, Size: 12]
	void RemoveTagFromItemPool(FString TagName);// 0x38993e8
	void RemoveAllTagFromItemPool();// 0x38993d4
	void RecycleUnusedItem();// 0x38993c0
	void RecycleAllItems();// 0x38993ac
	void OnAsyncLoadWidgetFinished(UserWidget* Widget, int InstID);// 0x38992f0
	bool ItemPoolHasTag(FString TagName);// 0x389922c
	bool ItemPoolHasOneTagAtLeast(out const FString[] TagNameList);// 0x38990f0
	bool ItemPoolHasAllTag(out const FString[] TagNameList);// 0x3898fb4
	void InitItemPool(FString ClassPath, int DefaultItemCounts, bool bAsync);// 0x3898e68
	UserWidget* GetOneItem();// 0x3898e40
	void GetAllUsedItem(out UserWidget*[] ItemList);// 0x3898d74
	void GetAllTagFromItemPool(out FString[] tagList);// 0x3898c40
	void FreeOneItem(UserWidget* IdleItem);// 0x3898bc8
	void AddTagToItemPool(FString TagName);// 0x3898b0c
	void AddMultiTagToItemPool(out const FString[] TagNameList);// 0x38989d8

--------------------------------
Class: ScreenMarkInstanceData
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	int CustomInt;//[Offset: 0x14, Size: 4]
	float CustomFloat;//[Offset: 0x18, Size: 4]
	FString CustomString;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x535e268
	bool GetDontPaintWhenChildEmpty();// 0x535e240
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x535e1c0

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	int ZOrder;//[Offset: 0x50, Size: 4]
	void SetZOrder(int InZOrder);// 0x535eeb8
	void SetSupportNotch(bool InSupportNotch);// 0x535ee38
	void SetSize(Vector2D InSize);// 0x535edc8
	void SetPosition(Vector2D InPosition);// 0x535ed58
	void SetOffsets(Margin InOffset);// 0x535ecd0
	void SetMinimum(Vector2D InMinimumAnchors);// 0x535ec60
	void SetMaximum(Vector2D InMaximumAnchors);// 0x535ebf0
	void SetLayout(out const AnchorData InLayoutData);// 0x535eb58
	void SetAutoSize(bool InbAutoSize);// 0x535ead8
	void SetAnchors(Anchors InAnchors);// 0x535ea50
	void SetAlignment(Vector2D InAlignment);// 0x535e9e0
	int GetZOrder();// 0x535e9b8
	Vector2D GetSize();// 0x535e978
	Vector2D GetPosition();// 0x535e938
	Margin GetOffsets();// 0x535e8f4
	AnchorData GetLayout();// 0x535e8a0
	bool GetAutoSize();// 0x535e878
	Anchors GetAnchors();// 0x535e834
	Vector2D GetAlignment();// 0x535e7f4
	bool GeSupportNotch();// 0x535e7cc

--------------------------------
Class: ScreenMarkPriorityGroup
	int MaxShowNum;//[Offset: 0x0, Size: 4]
	int CurShowNum;//[Offset: 0x4, Size: 4]
	int[] GroupTypeArray;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ActorVectorPair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]
	int InstanceID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ScreenRotationMarkManager.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	<int,ScreenRotationMarkGroupData> ScreenRotationMarkGroupMap;//[Offset: 0x6c, Size: 60]
	Vector PlayerLoc;//[Offset: 0xa8, Size: 12]
	Vector PlayerDir;//[Offset: 0xb4, Size: 12]
	class Widget* ImageType;//[Offset: 0x1bc, Size: 4]
	void UpdateBindingLocationWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x363c7c8
	void UpdateBindingLocationWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x363c654
	void UpdateBindingActorWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x363c4e0
	void UpdateBindingActorWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x363c36c
	void UnbindLocation(out const Vector BingdingLoction, int ID);// 0x363c2a0
	void UnbindActor(Actor* BindingObject, int ID);// 0x363c1e4
	void ReleaseGroupByID(int ID);// 0x363c16c
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x363c0a8
	void OnInit();// 0x363c094
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x363bfc8
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x363bf04
	Widget* FetchUI(int ID, out ScreenRotationMarkGroupData GroupData);// 0x363bd88
	enum CheckWidgetDisAndAngleValid(Vector TargetLoc, out ScreenRotationMarkGroupData GroupData, out float Angle, out float Distance);// 0x363bb60
	bool BindToLoc(out const Vector BingdingLoction, int ID);// 0x363ba8c
	bool BindToActor(Actor* BindingObject, int ID);// 0x363b9c8

--------------------------------
Class: ScreenRotationMarkGroupData
	ScreenRotationMarkConfig Config;//[Offset: 0x0, Size: 72]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x48, Size: 4]
	Actor*[] WorldObjectArr;//[Offset: 0x4c, Size: 12]
	Vector[] WorldLocationArr;//[Offset: 0x58, Size: 12]
	Widget*[] HidingUIArr;//[Offset: 0x64, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0x70, Size: 12]
	<Actor*,Widget*> BindingActorUIMap;//[Offset: 0x7c, Size: 60]
	<Vector,Widget*> BindingLocationUIMap;//[Offset: 0xb8, Size: 60]
	CanvasPanel* RootPanel;//[Offset: 0xf4, Size: 4]

--------------------------------
Class: ScreenRotationMarkConfig
	ScreenRotationRangeValue DistanceRange;//[Offset: 0x0, Size: 16]
	ScreenRotationRangeValue AngleRange;//[Offset: 0x10, Size: 16]
	Actor* BindActor;//[Offset: 0x20, Size: 8]
	FString UIPathName;//[Offset: 0x28, Size: 12]
	float AngleOffset;//[Offset: 0x34, Size: 4]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float UpdateBindingInterval;//[Offset: 0x3c, Size: 4]
	int DefaultNum;//[Offset: 0x40, Size: 4]
	float Radius;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ScreenRotationRangeValue
	float MaxValue;//[Offset: 0x0, Size: 4]
	bool IsCloseOutMaxValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float MinValue;//[Offset: 0x8, Size: 4]
	bool IsCloseInMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: MapUIBase.Object
	delegate OnSetupUIMarkRoot;//[Offset: 0x1c, Size: 12]
	delegate OnUpdateMark;//[Offset: 0x28, Size: 12]
	delegate OnUpdateMultiMark;//[Offset: 0x34, Size: 12]
	delegate OnRepositionItemOnMap;//[Offset: 0x40, Size: 12]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x4c, Size: 4]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x50, Size: 12]
	<FString,CanvasPanel*> DynamaicCustomPanelMap;//[Offset: 0x5c, Size: 60]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x98, Size: 60]
	<int,MapImageMarkData> AllImageMarks;//[Offset: 0xd4, Size: 60]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	bool bRepositionMarkerAndPinDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 1]
	Vector LevelLandScapeCenterC;//[Offset: 0x240, Size: 12]
	Vector2D SelfMarkerAligmentC;//[Offset: 0x24c, Size: 8]
	CanvasPanel* CanvasPanel_ShowAirPlaneRoute;//[Offset: 0x254, Size: 4]
	bool bIsShowAirPlaneRouteAfteHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0x25c, Size: 12]
	FakeRadiationCircle* InnerCircle;//[Offset: 0x268, Size: 4]
	float ImageBlueCircleScale;//[Offset: 0x26c, Size: 4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x270, Size: 240]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x360, Size: 240]
	MapDataBase* CurrentMapData;//[Offset: 0x450, Size: 8]
	UserWidget* BindWidget;//[Offset: 0x458, Size: 8]
	MapObjct* ParentMapObject;//[Offset: 0x460, Size: 8]
	Vector LandscapeCenterCpp;//[Offset: 0x468, Size: 12]
	float LevelToMapScaleC;//[Offset: 0x474, Size: 4]
	float MapScaleCpp;//[Offset: 0x478, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x47c, Size: 8]
	float MapScalingRadio;//[Offset: 0x484, Size: 4]
	int LocalPlayerIndexC;//[Offset: 0x488, Size: 4]
	float MapImageExtentC;//[Offset: 0x48c, Size: 4]
	float MapWindowExtentC;//[Offset: 0x490, Size: 4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	bool bNeedDrawSelfGuideLineOutC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 1]
	LinearColor GuideLineColor;//[Offset: 0x498, Size: 16]
	LinearColor WhiteCircleColorC;//[Offset: 0x4a8, Size: 16]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	float GuideLineDashSizeC;//[Offset: 0x4bc, Size: 4]
	float DefaultLineThicknessC;//[Offset: 0x4c0, Size: 4]
	bool bNeedDrawWhiteCircleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	bool bNeedDrawCircleGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c5, Size: 1]
	Vector2D MapAdjustLocation;//[Offset: 0x4c8, Size: 8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x4d0, Size: 8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x4d8, Size: 8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x4e0, Size: 8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	int AirDropIndex;//[Offset: 0x4ec, Size: 4]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x4f4, Size: 8]
	void UpdatePlayersLocAndRotC(STExtraPlayerController* STEPC, STExtraPlayerState* STEPS, STExtraGameStateBase* STEGS);// 0x349ff88
	void UpdateMultiMarkC(int Index, out const Vector2D[] MultiMarkLocs, bool IsShow, float Opacity);// 0x3565408
	void UpdateMarkC(int Index, Vector2D FLoc, bool IsShow, float Opacity);// 0x35652b8
	void TickWidget(out const Geometry MyGeometry, float InDeltaTime);// 0x349fe8c
	void ShowOrHideLegendMarks(FString Tag, bool bIsShow);// 0x3565110
	void SetupUIMarkRoot();// 0x35650fc
	void RepositionMapMultiMarkC(int playerIndex, Vector2D CurSize);// 0x3565048
	void RepositionMapMarkC(int FIndex, int LocalPlayerIndex, Vector2D CurSize);// 0x3564f48
	void RedrawAllMapMarkC(Vector2D CurSize);// 0x3564ed8
	void ReCalMapInfoC();// 0x3564ec4
	void OnUpdateUIMarks();// 0x3431c88
	void OnUpdateImageMarks();// 0x33bb640
	void OnPaint(PaintContext InContext);// 0x3564e30
	void InitMap(MapDataBase* InMapData, UserWidget* InUserWidget);// 0x349fd78
	World* GetWorldInternal();// 0x3564e08
	float GetLevelToMapScale();// 0x349fd48
	STExtraGameStateBase* GetGameState();// 0x3564dc0

--------------------------------
Class: MapUIMarkBaseWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x3c8, Size: 8]
	int DefaultZOrder;//[Offset: 0x3d0, Size: 4]
	bool bIsNeedRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	TextBlock* CountDownText;//[Offset: 0x3d8, Size: 4]
	FString CountDownFormat;//[Offset: 0x3dc, Size: 12]
	CanvasPanelSlot* ChangeSizeSlot;//[Offset: 0x3fc, Size: 4]
	float OriginSizeX;//[Offset: 0x404, Size: 4]
	float OriginSizeY;//[Offset: 0x408, Size: 4]
	UpdateStateChangePorperty[] UpdateStatePropertyArray;//[Offset: 0x410, Size: 12]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x35674d0
	void UpdateMarkSize(float inScale);// 0x343fc74
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x3567380
	bool ShouldLimitedInMinimap();// 0x3567358
	void SetWidgetCurPostion(Vector WorldPos3D);// 0x35672e8
	void SetUpdatePropertyArray(out const UpdateStateChangePorperty[] PropertyArray, int InitState);// 0x356719c
	void SetCountDownText(TextBlock* TextBlock, int TotalSecond, bool IsShowZero, FString Format);// 0x3566f60
	void SetChangeSizePanel(float SizeX, float SizeY, bool IsChangeSize, bool IsChangeInUpdate, float Ratio);// 0x3566dbc
	void RefreshPanelScale(float Scale);// 0x3566d44
	void RefreshCountDownText();// 0x3566d30
	void OnWidgetShow(out const CustomMarkEventData InState);// 0x3566c54
	void OnUpdateState(out const CustomMarkEventData InState);// 0x3566b78
	void OnUpdateMarkSize(float Scale, float Ratio);// 0x3566abc
	void OnUpdateIconMap(int NewState);// 0x3566a44
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x3566960
	void OnUIBPDestroy();// 0x3566944
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x356681c
	void OnEnterEntireMap();// 0x446e168
	Vector GetWidgetCurWorldPos();// 0x35667d4

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf4, Size: 12]
	delegate TextDelegate;//[Offset: 0x100, Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x110, Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130, Size: 16]
	SlateColor SelectColorAndOpacity;//[Offset: 0x140, Size: 28]
	SlateColor NoSelectColorAndOpacity;//[Offset: 0x15c, Size: 28]
	bool bHaveSelectColorAndOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	SlateFontInfo Font;//[Offset: 0x180, Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x1c0, Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x1c8, Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1d8, Size: 16]
	float MinDesiredWidth;//[Offset: 0x1e8, Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	void SetVerticalJustification(byte InJustification);// 0x537b1bc
	void SetText(FText InText);// 0x537af0c
	void SetShadowOffset(Vector2D InShadowOffset);// 0x537ae9c
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x537ae20
	void SetSelectColor(bool bIsSelect);// 0x537ada0
	void SetOpacity(float InOpacity);// 0x537ad28
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x537acb0
	void SetJustification(byte InJustification);// 0x537ac38
	void SetFont(SlateFontInfo InFontInfo);// 0x537a920
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x537a600
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x537a574
	FText GetText();// 0x537a418

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xd0, Size: 4]
	byte Justification;//[Offset: 0xd4, Size: 1]
	byte VerticalJustification;//[Offset: 0xd5, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	float WrapTextAt;//[Offset: 0xd8, Size: 4]
	enum WrappingPolicy;//[Offset: 0xdc, Size: 1]
	Margin Margin;//[Offset: 0xe0, Size: 16]
	float LineHeightPercentage;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 4]
	Object* FontMaterial;//[Offset: 0x4, Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8, Size: 28]
	FName TypefaceFontName;//[Offset: 0x30, Size: 8]
	int Size;//[Offset: 0x38, Size: 4]
	bool IsBold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4, Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8, Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: UpdateStateChangePorperty
	Widget* UpdateWidget;//[Offset: 0x0, Size: 4]
	FString[] IconPathArray;//[Offset: 0x4, Size: 12]
	enum[] IconVisibleArray;//[Offset: 0x10, Size: 12]
	LinearColor[] IconColorArray;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MapImageMarkData
	int ConfigId;//[Offset: 0x0, Size: 4]
	Image* Image;//[Offset: 0x4, Size: 4]
	Vector CurrentWorldPos;//[Offset: 0x8, Size: 12]
	Vector2D OriginalSize;//[Offset: 0x14, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Vector2D MaxSize;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FakeRadiationCircle.Actor.Object

--------------------------------
Class: MapRealTimeInfo
	Vector2D MapCenterToPlayer;//[Offset: 0x0, Size: 8]
	Vector MapCenterToBlueCircle;//[Offset: 0x8, Size: 12]
	Vector MapCenterToWhiteCircle;//[Offset: 0x14, Size: 12]
	Vector2D PlayerCoord;//[Offset: 0x20, Size: 8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x28, Size: 8]
	Vector2D WhiteCircleCoord;//[Offset: 0x30, Size: 8]
	Vector2D BlueCircleCoord;//[Offset: 0x38, Size: 8]
	float WhiteCircleRadius;//[Offset: 0x40, Size: 4]
	float BlueCircleRadius;//[Offset: 0x44, Size: 4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x48, Size: 8]
	enum LastDriveVehicleType;//[Offset: 0x50, Size: 1]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x54, Size: 100]
	AirDropPathData AirDropPathData;//[Offset: 0xb8, Size: 56]

--------------------------------
Class: AirplaneRouteData
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 8]
	float PlaneRotation;//[Offset: 0x24, Size: 4]
	AirDropPathData[] AirDropPaths;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLocInMapForCamp;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLocInMapForCamp;//[Offset: 0x3c, Size: 8]
	float CampRouteLengthInMap;//[Offset: 0x44, Size: 4]
	float CampRouteWidgetRotateAngle;//[Offset: 0x48, Size: 4]
	Vector2D LastValidCanJumpLocInMap;//[Offset: 0x4c, Size: 8]
	Vector2D LastValidForceJumpLocInMap;//[Offset: 0x54, Size: 8]
	float LastValidRouteWidgetRotateAngle;//[Offset: 0x5c, Size: 4]
	float LastValidRouteLengthInMap;//[Offset: 0x60, Size: 4]

--------------------------------
Class: AirDropPathData
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector2D StartLoc;//[Offset: 0x4, Size: 8]
	Vector2D TargetLoc;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D[] AirDropLocs;//[Offset: 0x1c, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x28, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: MapDataBase.Object
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x1c, Size: 12]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x28, Size: 12]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x34, Size: 12]
	MapUIBase* CurrentMapUI;//[Offset: 0x40, Size: 4]
	Vector PlayerLocOffset;//[Offset: 0x44, Size: 12]
	delegate FinaleChangeCurLocDelegate;//[Offset: 0x50, Size: 12]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x5c, Size: 8]
	void Init(MapUIBase* INMapUI);// 0x35639fc
	World* GetWorldInternal();// 0x35639d4
	STExtraGameStateBase* GetGameState();// 0x356398c

--------------------------------
Class: MapObjct.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	MapUIBase* CurrentHoldMapUI;//[Offset: 0x6c, Size: 8]
	World* GetWorldInternal();// 0x3566044
	void DrawCircle(Vector2D CircleCenter, LinearColor CircleColor, float CircleRadius, float MapWindowExtent, Vector2D PlayerCoord, byte MapType, bool bAntiAlias);// 0x3565e04

--------------------------------
Class: UIBPAsyncParams
	MarkSyncData MarkData;//[Offset: 0x4, Size: 68]
	class Widget* UIIconSoftPtr;//[Offset: 0x50, Size: 40]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x78, Size: 40]
	class Object* UIClass;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: MapMarkConfig
	int ConfigId;//[Offset: 0x0, Size: 4]
	FString UIPath;//[Offset: 0x4, Size: 12]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Vector2D MaxSize;//[Offset: 0x20, Size: 8]
	int ZOrder;//[Offset: 0x28, Size: 4]
	bool bIsControlByLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	FString LegendTags;//[Offset: 0x30, Size: 12]

--------------------------------
Class: WidgetToRenderTarget.Object
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x1c, Size: 60]
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x58, Size: 12]
	void ReleaseCachedParams();// 0x392c950
	bool ReceivePreDrawTextToTextureRenderTarget2DAsync(out DrawTextToTextureRenderTarget2DParams Params);// 0x446e168
	void ReceivePostDrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params);// 0x446e168
	void DrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params, out const delegate OnWidgetToRenderTargetDrawn);// 0x392c650

--------------------------------
Class: TextureRenderTarget2DManagerWidgetInfo
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 40]
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 4]
	UserWidget* UserWidget;//[Offset: 0x2c, Size: 4]
	FName UpdateWidgetFunctionName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DrawTextToTextureRenderTarget2DParams
	FText Text;//[Offset: 0x0, Size: 12]
	FName WidgetName;//[Offset: 0x10, Size: 8]
	int DrawWidth;//[Offset: 0x18, Size: 4]
	int DrawHeight;//[Offset: 0x1c, Size: 4]
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0x20, Size: 4]
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x28, Size: 40]
	FName TextureParameterName;//[Offset: 0x50, Size: 8]
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x58, Size: 4]
	FString Payload;//[Offset: 0x5c, Size: 12]
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: GameStateWeaponRule
	bool bForbidShootTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CheckForbidShootTime;//[Offset: 0x4, Size: 4]
	class Actor[] ForbidShootClassArray;//[Offset: 0x8, Size: 12]
	class Actor[] SwallowBulletClassArray;//[Offset: 0x14, Size: 12]

--------------------------------
Class: EmotePlayer
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	uint32 FollowPlayer;//[Offset: 0x4, Size: 4]
	int EmoteId;//[Offset: 0x8, Size: 4]
	Vector pos;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ReplayRecordInfo.Actor.Object
	float WorldTimeSecondsForReplay;//[Offset: 0x308, Size: 4]

--------------------------------
Class: ParallelWorldDebugSummary
	int WorldNum;//[Offset: 0x0, Size: 4]
	int MaxPlayerNumPerPW;//[Offset: 0x4, Size: 4]
	ParallelWorldDebugEntry[] DebugData;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParallelWorldDebugEntry
	int ParallelWorldId;//[Offset: 0x0, Size: 4]
	int PlayerNum;//[Offset: 0x4, Size: 4]
	int AINum;//[Offset: 0x8, Size: 4]
	int TeamNum;//[Offset: 0xc, Size: 4]
	int[] TeamIds;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AirAttackOrder
	uint16 waveIndex;//[Offset: 0x4, Size: 2]
	float FlightHeight;//[Offset: 0x8, Size: 4]
	float SeaLevelHeight;//[Offset: 0xc, Size: 4]
	uint32[] bombsInterval;//[Offset: 0x10, Size: 12]
	uint16 BombBaseDamage;//[Offset: 0x1c, Size: 2]
	uint16 BombMinDamage;//[Offset: 0x1e, Size: 2]
	Vector2D[] bombsPosition2D;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x4, Size: 12]
	byte ParticleType;//[Offset: 0x10, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x14, Size: 4]
	FName ShaderName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 12]
	ExponentialHeightFog* Fog;//[Offset: 0xc, Size: 4]
	WeatherDstFog DstWeatherFog;//[Offset: 0x10, Size: 20]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x24, Size: 12]
	float blendTime;//[Offset: 0x30, Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x38, Size: 12]

--------------------------------
Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float StartDistance;//[Offset: 0x4, Size: 4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0, Size: 4]
	int[] HitNumEveryBodys;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LastGameRemainItemData
	FName TombName;//[Offset: 0x0, Size: 8]
	Vector DropGroundPoint;//[Offset: 0x8, Size: 12]
	FString TargetPlayerUID;//[Offset: 0x14, Size: 12]
	RemainItemData[] RemainItemDataList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RemainItemData
	int ItemID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x8, Size: 12]
	int SlotID;//[Offset: 0x14, Size: 4]
	int8 RemainType;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParachuteData
	uint64 UId;//[Offset: 0x0, Size: 8]
	float SlideDuration;//[Offset: 0x8, Size: 4]
	byte FollowState;//[Offset: 0xc, Size: 1]
	Vector ClientLandLocation;//[Offset: 0x10, Size: 12]
	Vector ClientLocation;//[Offset: 0x1c, Size: 12]
	Vector ServerLandLocation;//[Offset: 0x28, Size: 12]
	float SlideStartTime;//[Offset: 0x34, Size: 4]
	float SlideEndTime;//[Offset: 0x38, Size: 4]
	FString InputCount;//[Offset: 0x3c, Size: 12]
	FString PositionCheck;//[Offset: 0x48, Size: 12]
	FString ClientPositionDiff;//[Offset: 0x54, Size: 12]
	float LastCorrectionTime;//[Offset: 0x60, Size: 4]
	float LastCorrectionHeight;//[Offset: 0x64, Size: 4]
	Vector LastCorrectionLocation;//[Offset: 0x68, Size: 12]
	Vector LastCorrectedLocation;//[Offset: 0x74, Size: 12]

--------------------------------
Class: ScreenAppearanceActor.Actor.Object
	bool EnableScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool FollwCameraManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	ScreenAppearanceProvider*[] DefaultScreenAppearanceProviders;//[Offset: 0x30c, Size: 12]
	<Actor*,ScreenAppearanceProviders> SavedPlayerScreenAppearances;//[Offset: 0x318, Size: 60]
	ScreenAppearanceProviders PersistentScreenAppearances;//[Offset: 0x354, Size: 12]
	void StopScreenAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x36316b4
	void StopScreenAppearance(ScreenAppearanceProvider* Provider);// 0x363163c
	void StopAllScreenAppearances(const Actor* AppearanceOwner);// 0x36315c4
	void SetScalarParameter(out const FName ParameterName, float ParameterValue);// 0x36314f0
	void SetFloatParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, float NewValue);// 0x36313c0
	void SetColorParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, out const LinearColor NewValue);// 0x3631284
	void SetColorParameter(out const FName ParameterName, out const LinearColor ParameterValue);// 0x36311a4
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x36310d4
	Actor* ResolveAppearanceOwner(Actor* InOwner);// 0x363104c
	ScreenAppearanceProvider* PlayDefaultScreenAppearance(const Actor* AppearanceOwner, FName AppearanceName, const Actor* Causer);// 0x3630f44
	bool IsScreenAppearancePlaying(const Actor* AppearanceOwner, FName AppearanceName);// 0x3630e80
	bool HasActiveAppearance();// 0x3630e58
	PlayerController* GetPlayerController();// 0x3630da0
	PlayerCameraManager* GetPlayerCameraManager();// 0x3630d2c
	Actor* GetCurrentViewTarget();// 0x3630d04
	ScreenAppearanceProvider* FindDefaultScreenAppearanceProvider(out const FName Name);// 0x3630c70
	ScreenAppearanceProvider* FindAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x3630bac

--------------------------------
Class: ScreenAppearanceProvider.Object
	FName AppearanceName;//[Offset: 0x20, Size: 8]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	float TickInterval;//[Offset: 0x2c, Size: 4]
	AppearanceParameter[] MaterialParameterCurve;//[Offset: 0x30, Size: 12]
	float LifeSpan;//[Offset: 0x3c, Size: 4]
	ScreenAppearanceScalarParameter[] AppearanceScalarParamters;//[Offset: 0x40, Size: 12]
	ScreenAppearanceColorParameter[] AppearanceColorParameters;//[Offset: 0x4c, Size: 12]
	ScreenAppearanceActor* OwnerAppearance;//[Offset: 0x70, Size: 4]
	Actor* OwnerActor;//[Offset: 0x74, Size: 4]
	FName[] HighPriorityProviderNames;//[Offset: 0x80, Size: 12]
	Transform AlignRelationTransform;//[Offset: 0x90, Size: 48]
	bool bAttachToActiveCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	void UpdateRelativeTransform(out const Transform RelativeTrans);// 0x3632880
	void SetVectorParameter(out const FName ParameterName, out const Vector Param);// 0x363279c
	void SetLifeSpan(float NewLifeSpan);// 0x3632728
	void SetFloatParameter(out const FName ParameterName, float Param);// 0x3632654
	void SetColorParameter(out const FName ParameterName, out const LinearColor Param);// 0x3632574
	void SetAsset(Object* Asset);// 0x36324f4
	void ReceiveTick(float DeltaTime);// 0x446e168
	void ReceiveEndPlay();// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	MaterialInterface* GetMaterial();// 0x36324c4
	void AlignActiveCamera(bool bForceUseActiveCamera);// 0x3632444

--------------------------------
Class: AppearanceParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	CurveBase* ControlCurve;//[Offset: 0x8, Size: 40]

--------------------------------
Class: ScreenAppearanceScalarParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ScreenAppearanceColorParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ScreenAppearanceProviders
	ScreenAppearanceProvider*[] ScreenAppearances;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PlayerPetSpectatorComponent.LuaActorComponent.ActorComponent.Object
	STExtraPetSpectatorCharacter* PetSpectatorPawn;//[Offset: 0x14c, Size: 4]
	bool bTeammatePetShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	STExtraPetSpectatorCharacter* SpawnPetSpectator(class Actor ActorClass, out const Transform SpawnTransform, Actor* Owner);// 0x35e3870
	void OnRep_PetSpectatorPawn();// 0x446e168
	bool CanControlSpectator();// 0x35e383c

--------------------------------
Class: STExtraPetSpectatorCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnMovementBaseChanged;//[Offset: 0xc80, Size: 12]
	PetLevelInfo PetLevelInfo;//[Offset: 0xc8c, Size: 8]
	delegate PetSpectatorStateChangeDelegate;//[Offset: 0xcac, Size: 12]
	SpectatorPetStateInfo CurrentStateInfo;//[Offset: 0xcb8, Size: 8]
	FName FeatureActorName;//[Offset: 0xcc0, Size: 8]
	float BornMaxHight;//[Offset: 0xcc8, Size: 4]
	float BornMinHight;//[Offset: 0xccc, Size: 4]
	float BornCamerHight;//[Offset: 0xcd0, Size: 4]
	float BornMaxForwardDis;//[Offset: 0xcd4, Size: 4]
	float BornMinForwardDis;//[Offset: 0xcd8, Size: 4]
	float WarterBornMoreHight;//[Offset: 0xcdc, Size: 4]
	PlayerPetMovementComponent* PetMovementComponent;//[Offset: 0xce0, Size: 4]
	float MaxSpecDistance;//[Offset: 0xce4, Size: 4]
	STExtraPetSpectatorAnimInstance* PetAnimInstance;//[Offset: 0xcec, Size: 4]
	delegate OnSwimStateChange;//[Offset: 0xcf0, Size: 12]
	bool TeleportToPointSafety(Vector Location, Rotator Rotation);// 0x3789fb8
	bool SpectatorPetLeaveState(enum State);// 0x3789f30
	bool SpectatorPetHasState(enum State);// 0x3789ea8
	bool SpectatorPetEnterState(enum State, int Params);// 0x3789ddc
	bool SpectatorPetBornRightPostion(STExtraPlayerCharacter* SpectatorPawn, out const ResolvePenetrationParams ResolveParams, out Vector backLocation);// 0x3789b64
	void ServerHandleSpectatorPetStateMsg(enum MsgType, int Params);// 0x3789a68
	void OnRep_PetLevelInfo();// 0x36fba18
	void OnRep_CurrentStateInfo();// 0x3789a4c
	bool LocalHandleSpectatorPetStateMsg(enum MsgType, int Params);// 0x446e168
	void ClientOnPossessedBy();// 0x36fb060
	void BPOnRespawned();// 0x446e168
	void BPOnRecycled();// 0x446e168

--------------------------------
Class: PetLevelInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpectatorPetStateInfo
	enum CurrentState;//[Offset: 0x0, Size: 1]
	int Param;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerPetMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	STExtraPetSpectatorCharacter* PetOwner;//[Offset: 0x670, Size: 4]
	bool bFollowMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	bool bEnableSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 1]
	float TraceWaterHalfHeight;//[Offset: 0x678, Size: 4]
	float TraceWaterMaxHalfHeight;//[Offset: 0x67c, Size: 4]
	bool bEnableServerAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]
	float SecurityAllowedMoveSpeedRatio;//[Offset: 0x684, Size: 4]
	float SecurityAllowedJumpHeightRatio;//[Offset: 0x688, Size: 4]
	bool ShouldRecordPosition();// 0x35e34cc
	STExtraPetSpectatorCharacter* GetPetOwner();// 0x35e34a4

--------------------------------
Class: STExtraPetSpectatorAnimInstance.AnimInstance.Object
	STExtraPetSpectatorCharacter* C_PetCharacter;//[Offset: 0x2f0, Size: 4]
	int C_DeviceLevel;//[Offset: 0x2f4, Size: 4]
	bool bIsPetAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	Vector Velocity;//[Offset: 0x2fc, Size: 12]
	float PetMoveSpeed;//[Offset: 0x308, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 1]
	float SwimmingAnimRate;//[Offset: 0x310, Size: 4]
	AnimSequenceBase* C_AppearAnim;//[Offset: 0x314, Size: 4]
	AnimSequenceBase* C_DisppearAnim;//[Offset: 0x318, Size: 4]
	AnimSequenceBase* C_IdleAnim;//[Offset: 0x31c, Size: 4]
	AnimSequenceBase* C_FreeFallAnim;//[Offset: 0x320, Size: 4]
	AnimSequenceBase* C_FastFreeFallAnim;//[Offset: 0x324, Size: 4]
	AnimSequenceBase* C_FollowAnim;//[Offset: 0x328, Size: 4]
	AnimSequenceBase* C_FlyAroundAnim;//[Offset: 0x32c, Size: 4]
	AnimSequenceBase* C_SwimmingAnim;//[Offset: 0x330, Size: 4]
	BlendSpaceBase* C_SwimmingBS;//[Offset: 0x334, Size: 4]
	BlendSpaceBase* C_MovementBS;//[Offset: 0x338, Size: 4]
	AnimSequence* C_JumpAnim;//[Offset: 0x33c, Size: 4]
	AnimSequence* C_InAirAnim;//[Offset: 0x340, Size: 4]
	AnimSequence* C_LandingAnim;//[Offset: 0x344, Size: 4]
	void ResetJump();// 0x3789230
	void OnPetSpectatorStateChange(enum State, FString Param);// 0x3789128
	void OnPetMontageStarted(AnimMontage* InMontage);// 0x3786898
	void OnPetMontageEnded(AnimMontage* InMontage, bool bInterrupted);// 0x33c3f68
	void OnJumped();// 0x3789114
	void DestroySubAnimations();// 0x37866bc

--------------------------------
Class: BattleOpenSequencerInfo
	Transform StartPosition;//[Offset: 0x0, Size: 48]
	VehicleWarStartVehicleInfo[] VehicleInfoList;//[Offset: 0x30, Size: 12]
	float Time;//[Offset: 0x3c, Size: 4]
	float ServerStartTimestamp;//[Offset: 0x40, Size: 4]

--------------------------------
Class: VehicleWarStartVehicleInfo
	Vector Position;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	STExtraVehicleBase* Vehicle;//[Offset: 0x18, Size: 4]
	VehicleWarStartVehiclePlayerInfo DriverInfo;//[Offset: 0x1c, Size: 12]
	VehicleWarStartVehiclePlayerInfo PassengerInfo;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleWarStartVehiclePlayerInfo
	int upassLevel;//[Offset: 0x0, Size: 4]
	int upassScore;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BasePlayer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 4]
	Transform DecalTransform;//[Offset: 0x10, Size: 48]
	int DecalInstanceId;//[Offset: 0x40, Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x44, Size: 12]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x308, Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x30c, Size: 4]
	float NearToFarDistance;//[Offset: 0x310, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x314, Size: 4]
	float PlayEffectDelayTime;//[Offset: 0x318, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x320, Size: 144]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 12]
	BulletHitInfoUploadBinaray[] HitBinarayArray;//[Offset: 0xc, Size: 12]
	BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray;//[Offset: 0x18, Size: 12]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0x24, Size: 12]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x30, Size: 12]
	byte[] CopmpressBinarayData;//[Offset: 0x3c, Size: 12]
	uint32[] CopmpressBinaraySectionLen;//[Offset: 0x48, Size: 12]
	int ShootTimes;//[Offset: 0x54, Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x58, Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0x64, Size: 4]
	int NetworkStatus;//[Offset: 0x68, Size: 4]
	int Sequence;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: BulletHitInfoUploadBinaray
	byte[] Data;//[Offset: 0x0, Size: 12]
	uint16 CompensationTime;//[Offset: 0xc, Size: 2]
	Actor* Actor;//[Offset: 0x10, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x18, Size: 8]

--------------------------------
Class: BulletHitInfoWithoutDamage
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	uint32 ShootID;//[Offset: 0x34, Size: 4]
	Actor* Actor;//[Offset: 0x38, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x40, Size: 8]
	byte HitBodyType;//[Offset: 0x48, Size: 1]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x4a, Size: 1]

--------------------------------
Class: HitTargetExtraData
	byte PlatForm;//[Offset: 0x0, Size: 1]
	int CharacterReplicatID;//[Offset: 0x4, Size: 4]
	int CharacterMovementReplicatID;//[Offset: 0x8, Size: 4]
	float LastReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xc, Size: 4]
	float LastReplicatedTimePass;//[Offset: 0x10, Size: 4]
	float CapsulePreMoveDistance;//[Offset: 0x14, Size: 4]
	float MeshOffsetDistance;//[Offset: 0x18, Size: 4]
	float AverageFPS;//[Offset: 0x1c, Size: 4]
	float ImpactFrameDeltaTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STExtraFireBalloon.LuaActor.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x3a0, Size: 4]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x3a4, Size: 4]
	FireBalloonMovementComponent* Movement;//[Offset: 0x3a8, Size: 4]
	int MapMarkTypeID;//[Offset: 0x3ac, Size: 4]
	enum MapMarkFlag;//[Offset: 0x3b0, Size: 1]
	Pawn* Driver;//[Offset: 0x3b8, Size: 4]
	float MoveUpValue;//[Offset: 0x3bc, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x3f0, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x3f4, Size: 4]
	float MoveUpScale;//[Offset: 0x3f8, Size: 4]
	float AutoFallOffSpeed;//[Offset: 0x3fc, Size: 4]
	bool UseStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	Vector ControlInputVector;//[Offset: 0x404, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x410, Size: 12]
	float TickInterval;//[Offset: 0x41c, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	Vector2D FObservationArea;//[Offset: 0x428, Size: 8]
	bool bIsInObservationArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x3744ec4
	void SetMoveUpValue(float InMoveUpValue);// 0x3744e4c
	void SetMoveInputValue(float InMoveUpValue, float InMoveForwardValue, float InMoveRightValue);// 0x3744d44
	void SetDriver(Pawn* InPawn);// 0x3348758
	void OnRep_Driver(Pawn* PrevDriver);// 0x3744cc4
	Pawn* GetDriver();// 0x3744ca8
	void CheckWishTask();// 0x446e168
	bool CanBeDriver(Pawn* InPawn);// 0x33e3378
	void BPUpdateUIVisible();// 0x446e168
	void BPUpdateObservationArea();// 0x446e168
	void BPSetPlayCameraOffsetData(float FAlpha, bool IsUpdateCameraLocation);// 0x446e168
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x446e168

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x135, Size: 1]
	float InitialMaxTarceDist;//[Offset: 0x138, Size: 4]
	Vector InitialLocation;//[Offset: 0x13c, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x148, Size: 12]
	Actor* ActorOwner;//[Offset: 0x154, Size: 4]
	float MaxFlyHeight;//[Offset: 0x168, Size: 4]
	void SetSkipUpdate(bool bNewValue);// 0x3744868
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x446e168
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x446e168
	float GetMaxFlyHeight();// 0x3744838

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x124, Size: 4]
	float Acceleration;//[Offset: 0x128, Size: 4]
	float Deceleration;//[Offset: 0x12c, Size: 4]
	float TurningBoost;//[Offset: 0x130, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 1]

--------------------------------
Class: OBPlayerWeaponRecord
	uint64 OBPlayerWeaponRecord_UID;//[Offset: 0x0, Size: 8]
	OBSingleWeaponRecord[] WeaponReport;//[Offset: 0x8, Size: 12]

--------------------------------
Class: OBSingleWeaponRecord
	int OBSingleWeaponRecord_WeaponID;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockDownCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 12]
	FString GLVersion;//[Offset: 0xc, Size: 12]
	FString OSVersion;//[Offset: 0x18, Size: 12]
	FString DeviceMake;//[Offset: 0x24, Size: 12]
	FString DeviceModel;//[Offset: 0x30, Size: 12]
	FString VulkanVersion;//[Offset: 0x3c, Size: 12]
	FString MemorySizeInGB;//[Offset: 0x48, Size: 12]
	FString OpenID;//[Offset: 0x54, Size: 12]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRemainTombBox.PlayerTombBox.LuaActor.Actor.Object
	FString TargetPlayerUID;//[Offset: 0x494, Size: 12]
	int MiniMapIconID;//[Offset: 0x4a0, Size: 4]
	int MiniMapInstanceID;//[Offset: 0x4a4, Size: 4]
	bool bIsSearchedRemainBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	void OnRep_IsSearchedRemainBox();// 0x35e3d94
	void HandleBoxIsSearched();// 0x35e3d78

--------------------------------
Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0, Size: 4]
	int Score;//[Offset: 0x4, Size: 4]
	enum ScoreChangeReason;//[Offset: 0x8, Size: 1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc, Size: 4]
	int HighestScore;//[Offset: 0x10, Size: 4]
	int FollowScore;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 12]
	int8 PlatID;//[Offset: 0x14, Size: 1]
	uint16 AreaID;//[Offset: 0x16, Size: 2]
	FString ZoneID;//[Offset: 0x18, Size: 12]
	VehicleMovePoint[] PointList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0, Size: 4]
	int8 Type;//[Offset: 0x4, Size: 1]
	int X;//[Offset: 0x8, Size: 4]
	int Y;//[Offset: 0xc, Size: 4]
	int Z;//[Offset: 0x10, Size: 4]
	int Speed;//[Offset: 0x14, Size: 4]
	int8 VehicleN2oUse;//[Offset: 0x18, Size: 1]
	int8 VehicleCarPetUse;//[Offset: 0x19, Size: 1]
	int VehicleMoveDistance;//[Offset: 0x1c, Size: 4]
	int TimeStamp;//[Offset: 0x20, Size: 4]
	int8 RoleType;//[Offset: 0x24, Size: 1]

--------------------------------
Class: PlayerPositionFlow
	PlayBaseInfo PlayerBaseInfo;//[Offset: 0x0, Size: 40]
	int FirstPointTimestamp;//[Offset: 0x28, Size: 4]
	IntPosition2D[] PointList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: PlayBaseInfo
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 12]
	int8 PlatID;//[Offset: 0x14, Size: 1]
	uint16 AreaID;//[Offset: 0x16, Size: 2]
	FString ZoneID;//[Offset: 0x18, Size: 12]

--------------------------------
Class: IntPosition2D
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FatalDamageParameter
	FatalDamageStringParameter String;//[Offset: 0x0, Size: 84]
	int DamageType;//[Offset: 0x54, Size: 4]
	int AdditionalParam;//[Offset: 0x58, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int ResultHealthStatus;//[Offset: 0x60, Size: 4]
	int Relationship;//[Offset: 0x64, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x68, Size: 4]
	int realKillerNewKillNum;//[Offset: 0x6c, Size: 4]
	uint32 CauserKey;//[Offset: 0x70, Size: 4]
	uint32 VictimKey;//[Offset: 0x74, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x78, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x7c, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x80, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x84, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x88, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x8c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x90, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x94, Size: 4]
	int CauserType;//[Offset: 0x98, Size: 4]
	int VictimType;//[Offset: 0x9c, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0xa0, Size: 12]
	int AssistNum;//[Offset: 0xac, Size: 4]
	bool isCausedByDevliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]

--------------------------------
Class: FatalDamageStringParameter
	FString CauserName;//[Offset: 0x0, Size: 12]
	FString VictimName;//[Offset: 0xc, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x18, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x24, Size: 12]
	FString RealKillerName;//[Offset: 0x30, Size: 12]
	FString CauserNation;//[Offset: 0x3c, Size: 12]
	FString VictimNation;//[Offset: 0x48, Size: 12]

--------------------------------
Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0, Size: 12]
	enum CaculateType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SIslandInactiveClearComponent.ActorComponent.Object
	float ComponentTickInterval;//[Offset: 0xbc, Size: 4]
	float InactiveCheckGap;//[Offset: 0xc0, Size: 4]
	float InactiveTimeForTipPreTime;//[Offset: 0xc8, Size: 4]
	float PreActiveTime;//[Offset: 0xcc, Size: 4]
	float ClientSendActiveRPCGap;//[Offset: 0xd4, Size: 4]
	bool bIsClientActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	enum SIslandActiveType;//[Offset: 0xd9, Size: 1]
	Vector PrePawnLoc;//[Offset: 0xdc, Size: 12]
	Rotator PreControllerRotation;//[Offset: 0xe8, Size: 12]
	delegate OnInactiveTipInSocialIslandDelegate;//[Offset: 0xf4, Size: 12]
	void ServerMarkPlayerActive();// 0x3660818
	void OnInactiveTipInSocialIslandDelegate__DelegateSignature(float RemainTime);// 0x446e168
	void MarkPlayerActive();// 0x3660804
	void KickOutPlayer();// 0x36607f0
	void ClientShowKickOutTip(float RemainTime);// 0x3332304
	void ClientCachedActiveState();// 0x36607dc
	bool CheckForMovement();// 0x36607b4
	void CheckForInactive();// 0x35dcbb8

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0x1a0, Size: 12]
	delegate OnKillInfoDownloadComplete;//[Offset: 0x1ac, Size: 12]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x1b8, Size: 4]
	<FString,uint32> ReportSequenceMap;//[Offset: 0x1d0, Size: 60]
	FString ReplayServerURL;//[Offset: 0x224, Size: 12]
	byte TlogBatchVersion;//[Offset: 0x230, Size: 1]
	int64 TlogBatchMaxSize;//[Offset: 0x238, Size: 8]
	uint32 SendTlogInterval;//[Offset: 0x248, Size: 4]
	RecordTlogBatch RecordTlogBatch;//[Offset: 0x250, Size: 16]
	void RequestReplaysFromServer(FString URLString);// 0x35ad390
	void ClearStreams();// 0x35ad37c

--------------------------------
Class: RecordTlogBatch
	byte Version;//[Offset: 0x0, Size: 1]
	RecordTlog[] TlogArray;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RecordTlog
	FString UId;//[Offset: 0x0, Size: 12]
	byte EventId;//[Offset: 0xc, Size: 1]
	FString OpenID;//[Offset: 0x10, Size: 12]
	int64 TimeStamp;//[Offset: 0x20, Size: 8]
	float DSElapsedSeconds;//[Offset: 0x28, Size: 4]
	<FString,FString> KeyValueMap;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: DailyTaskReportInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	uint32 TaskSyncToDsTs;//[Offset: 0xc, Size: 4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0x10, Size: 12]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: DailyTaskAwardInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	TaskAwardItemInfo[] AwardList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: TaskAwardItemInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DeathReplayData
	bool IsValidDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsForCE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	FString SelfName;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint64 PlayerUID;//[Offset: 0x20, Size: 8]
	uint64 MLAIUID;//[Offset: 0x28, Size: 8]
	int DamageType;//[Offset: 0x30, Size: 4]
	int SubType;//[Offset: 0x34, Size: 4]
	FString CauseName;//[Offset: 0x38, Size: 12]
	FString CauseActionName;//[Offset: 0x44, Size: 12]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool IsSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool bIsDeliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	int aliasID;//[Offset: 0x54, Size: 4]
	FString aliasTitle;//[Offset: 0x58, Size: 12]
	FString aliasNation;//[Offset: 0x64, Size: 12]
	int aliasRank;//[Offset: 0x70, Size: 4]
	FString aliasPartnerName;//[Offset: 0x74, Size: 12]
	int aliasPartnerRelation;//[Offset: 0x80, Size: 4]
	int aliasRankID;//[Offset: 0x84, Size: 4]
	int SegmentLevel;//[Offset: 0x88, Size: 4]
	float KDNum;//[Offset: 0x8c, Size: 4]
	int GameCount;//[Offset: 0x90, Size: 4]
	int WinCount;//[Offset: 0x94, Size: 4]
	int TopTenCount;//[Offset: 0x98, Size: 4]
	int KillNum;//[Offset: 0x9c, Size: 4]
	float Distance;//[Offset: 0xa0, Size: 4]
	DeathReplayHitInfo OtherHitInfo;//[Offset: 0xa4, Size: 32]
	DeathReplayHitInfo SelfHitInfo;//[Offset: 0xc4, Size: 32]

--------------------------------
Class: DeathReplayHitInfo
	float Damage;//[Offset: 0x0, Size: 4]
	int HitCount;//[Offset: 0x4, Size: 4]
	int HeadShoot;//[Offset: 0x8, Size: 4]
	int LimbsShoot;//[Offset: 0xc, Size: 4]
	int BodyShoot;//[Offset: 0x10, Size: 4]
	int HandShoot;//[Offset: 0x14, Size: 4]
	int FootShoot;//[Offset: 0x18, Size: 4]
	float GunHitRate;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: KillInfoRecordData
	FString Killer;//[Offset: 0x0, Size: 12]
	FString Victim;//[Offset: 0xc, Size: 12]
	bool bKillDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	uint64 KillTimeStampDemoTime;//[Offset: 0x20, Size: 8]
	uint64 KillTimeStampGameTime;//[Offset: 0x28, Size: 8]
	FString SafeLabel;//[Offset: 0x30, Size: 12]
	int SafeParam1;//[Offset: 0x3c, Size: 4]
	int SafeParam2;//[Offset: 0x40, Size: 4]
	float RecordTimestamp;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MLAIInfoRecordData
	float MLAITimeStamp;//[Offset: 0x0, Size: 4]
	uint32 PlayerKey;//[Offset: 0x4, Size: 4]
	uint64 UId;//[Offset: 0x8, Size: 8]
	byte Type;//[Offset: 0x10, Size: 1]
	<FString,FString> AdditionalData;//[Offset: 0x14, Size: 60]

--------------------------------
Class: PlayerEventInfoRecordData
	FString PlayerUID;//[Offset: 0x0, Size: 12]
	uint64 RecordTimestamp;//[Offset: 0x10, Size: 8]
	uint32 EventType;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SingleStrategyRecordFullInfo
	int StrategyTypeInReplay;//[Offset: 0x0, Size: 4]
	SingleStrategyRecordInReplay SingleStrategyRecordInReplay;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SingleStrategyRecordInReplay
	byte CountValue;//[Offset: 0x0, Size: 1]
	uint16 ReplayTimeStampInSeconds;//[Offset: 0x2, Size: 2]

--------------------------------
Class: BattleDeathPlaybackInfo
	float DeathPlaybackStartTime;//[Offset: 0x0, Size: 4]
	float DeathPlaybackEndTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BattleWonderfulInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	FString OpenID;//[Offset: 0x1c, Size: 12]
	WonderfulPeriodInfo[] WonderfulPeriodInfoArray;//[Offset: 0x28, Size: 12]

--------------------------------
Class: WonderfulPeriodInfo
	float WonderfulStartTime;//[Offset: 0x0, Size: 4]
	float WonderfulEndTime;//[Offset: 0x4, Size: 4]
	int WonderfulPeriodIndex;//[Offset: 0x8, Size: 4]
	WonderfulTypeInfo WondefulTypeInfo;//[Offset: 0xc, Size: 16]

--------------------------------
Class: WonderfulTypeInfo
	enum WondefulType;//[Offset: 0x0, Size: 1]
	float[] AdditionalData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LobbyWonderfulInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	uint64 SaveTimestamp;//[Offset: 0x10, Size: 8]
	FString ModeID;//[Offset: 0x18, Size: 12]
	int SegmentLevel;//[Offset: 0x24, Size: 4]
	float TotalTime;//[Offset: 0x28, Size: 4]
	WonderfulTypeInfo[] TypeInfoArray;//[Offset: 0x2c, Size: 12]
	FString AppVersion;//[Offset: 0x38, Size: 12]
	FString SrcVersion;//[Offset: 0x44, Size: 12]
	enum ErrorCode;//[Offset: 0x50, Size: 1]
	WonderfulWeSeeInfo[] WeSeeInfoArray;//[Offset: 0x54, Size: 12]

--------------------------------
Class: WonderfulWeSeeInfo
	float StartTime;//[Offset: 0x0, Size: 4]
	float EndTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	DeathReplayData DeathReplayData;//[Offset: 0x1a0, Size: 232]
	DeathPlayCameraShot* DeathPlayCameraShot;//[Offset: 0x288, Size: 4]
	void SetMurderInfo();// 0x3471288
	void PlayCollectReplay(FString DemoName);// 0x339998c
	void OnKillOrPutDownMessageEvent();// 0x3471274
	void OnDeathEvent(STExtraBaseCharacter* BaseCharacter);// 0x34711fc
	void OnClientObserveCharacterEvent();// 0x34711e8
	bool IsSwitchedOffByDevice();// 0x34711c0
	bool IsNewDeathReplay();// 0x3471198
	bool HaveRecordingData_New();// 0x3471170
	FString GetReplayTargetName();// 0x34710b0
	STExtraPlayerCharacter* GetDeadCharacter();// 0x3471088
	BattleDeathPlaybackInfo GetBattleDeathPlaybackInfo();// 0x3471048
	void GetAllCollectReplay(out FString[] OutCollectReplayList);// 0x3470f14

--------------------------------
Class: DeathPlayCameraShot.Actor.Object
	FString LuaFilePath;//[Offset: 0x34c, Size: 12]
	void StopCameraShot();// 0x33510e0
	void StartCameraShot(PlayerController* PlayerController);// 0x3363a24

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x200, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x228, Size: 4]
	int MaxHoursForKeepingFiles;//[Offset: 0x22c, Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool bUsingMapPlayerItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x234, Size: 12]
	int EnableCheckpointConfig;//[Offset: 0x240, Size: 4]
	float CheckpointUploadDelayConfig;//[Offset: 0x244, Size: 4]
	float CheckpointSaveMaxMSPerFrameConfig;//[Offset: 0x248, Size: 4]
	int[] DelayStopRecordingGameModes;//[Offset: 0x24c, Size: 12]
	float DelayStopRecordingTime;//[Offset: 0x258, Size: 4]
	int DefaultCompressionFlag;//[Offset: 0x25c, Size: 4]
	int OodleCompressor;//[Offset: 0x260, Size: 4]
	int Oodlelevel;//[Offset: 0x264, Size: 4]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x278, Size: 12]
	byte TlogBatchVersion;//[Offset: 0x284, Size: 1]
	int64 TlogBatchMaxSize;//[Offset: 0x288, Size: 8]
	uint32 SendTlogInterval;//[Offset: 0x298, Size: 4]
	RecordTlogBatch RecordTlogBatch;//[Offset: 0x2a0, Size: 16]
	bool bUseWeseeStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	FString RecordTargetUID;//[Offset: 0x2b4, Size: 12]
	int RecordTargetTeamID;//[Offset: 0x2c0, Size: 4]
	<FString,uint32> ReportSequenceMap;//[Offset: 0x3fc, Size: 60]
	int StrategyRecordMaxSizeInByte;//[Offset: 0x438, Size: 4]
	void SetForceAllowFreeView(bool bInValue);// 0x344ab04
	bool PlayDemoWithFilename(FString DemoName);// 0x344aa40
	void OnPlayerKilledOthersPlayer(out const FatalDamageParameter FatalDamageParameter);// 0x344a8f0
	bool LoadKillInfo();// 0x344a8c4
	FString GetRealNameByUID(FString PlayerUID);// 0x344a780
	FString GetDemoPlayTime();// 0x344a6c0
	float GetCurrentTimeInReplay();// 0x344a698
	void AddStrategyRecord(FString UId, const int StrategyTypeInReplay, out const SingleStrategyRecordInReplay InSingleStrategyRecordInReplay);// 0x344a540

--------------------------------
Class: WonderfulPlayback.GameReplay.Object
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	enum WonderfulPlayType;//[Offset: 0x1a3, Size: 1]
	void SetWonderfulPlayType(enum InWonderfulPlayType);// 0x392e884
	bool PlayReplayMemory();// 0x392e85c
	bool PlayReplayFile(FString DemoName);// 0x392e798
	bool PlayReplayAgain();// 0x392e770
	bool IsSwitchedOffByDevice();// 0x392e748
	void GetUserWonderfulList(out FString[] OutWonderfulList, FString InRoleId);// 0x392e584
	uint64 GetTargetUID();// 0x392e55c
	FString GetTargetPlayerName();// 0x392e49c
	FString GetTargetOpenID();// 0x392e3dc
	uint64 GetTargetGameID();// 0x392e3b4
	FString GetReplayFileNamePart();// 0x392e2f4
	WonderfulTypeInfo GetCurWonderfulTypeInfo();// 0x392e22c
	void GetAllWonderfulList(out FString[] OutWonderfulList);// 0x392e0f8
	void FetchBattleWonderfulInfo();// 0x392e0e4
	uint64[] DecryptFileName(FString DemoFullPathName);// 0x392dfa0
	FString BPGetTargetUID();// 0x392dee0
	FString BPGetTargetGameID();// 0x392de20
	enum AnalysizeReplayFile(FString InReplayFileName);// 0x392dd5c
	LobbyWonderfulInfo AnalysizeInfoFile(FString InInfoFileName);// 0x392dc74

--------------------------------
Class: AutoRobotModule.Object

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x1c, Size: 12]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 12]
	int bUseFeatureSet;//[Offset: 0xc, Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x10, Size: 12]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x1c, Size: 12]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x28, Size: 12]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x34, Size: 12]
	FString[] ExcludeComponentsList_DSAI;//[Offset: 0x40, Size: 12]
	FString[] ExcludeComponentsList_DSMLAI;//[Offset: 0x4c, Size: 12]
	FString[] ExcludeComponentsList_ClientAI;//[Offset: 0x58, Size: 12]
	FString[] ExcludeComponentsList_Standalone;//[Offset: 0x64, Size: 12]
	FString[] ExcludeComponentsList_StandaloneAI;//[Offset: 0x70, Size: 12]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarItemDownload.Object
	int DisableInBattleThreshold;//[Offset: 0x1c, Size: 4]
	void StartDownloadItem(uint32 ItemID, uint32 Priority, delegate OnItemDownloadDelegate);// 0x338b9cc
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x338b7b8
	void SetDisableInBattleThreshold(uint32 InThreshold);// 0x338b738
	int GetDisableInBattleThreshold();// 0x3353554

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: RemoteControlManager.Object
	bool Tick(float DeltaTime);// 0x3621530
	void Stop();// 0x3365b48
	bool BeginWithFile();// 0x34dfb20
	bool Begin(FString Name, FString Host, int Port);// 0x3621274

--------------------------------
Class: CreativeModeGlobalManagerCenter.Object
	STExtraGameInstance* OuterInstance;//[Offset: 0x24, Size: 4]
	STExtraManagerBase*[] ManagerArray;//[Offset: 0x28, Size: 12]
	class STExtraManagerBase[] ManagerClassArray;//[Offset: 0x34, Size: 12]

--------------------------------
Class: STExtraManagerBase.Object
	World* CacheWorld;//[Offset: 0xac, Size: 8]
	float NetUpdateFrequency;//[Offset: 0xb4, Size: 4]
	bool ReceiveTick(float DeltaSeconds);// 0x446e168
	bool ReceiveIsDedicatedServer();// 0x3770d60
	bool ReceiveHasAuthority();// 0x3770d38
	bool ReceiveDoUnInit();// 0x446e168
	bool ReceiveDoPostInit();// 0x446e168
	bool ReceiveDoInitByPhase();// 0x446e168
	bool ReceiveDoInit();// 0x446e168

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x310, Size: 4]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x314, Size: 4]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x318, Size: 4]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x31c, Size: 4]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x320, Size: 4]
	void OnRep_ReplicatedPhysAsset();// 0x3363a08
	void OnRep_ReplicatedMesh();// 0x334c7ac
	void OnRep_ReplicatedMaterial1();// 0x3348728
	void OnRep_ReplicatedMaterial0();// 0x3487c10

--------------------------------
Class: UAELobbyGamePawnMode_C.UAELobbyGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object
	void UserConstructionScript();// 0x446e168
	SceneComponent* DefaultSceneRoot;//[Offset: 0x390, Size: 4]

--------------------------------
Class: UAELobbyGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: StatHUD.HUD.Actor.Object
	void ToggleSlateStat();// 0x3365b48

--------------------------------
Class: NewLobbyModelShowActorBP_C.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x398, Size: 4]
	void SetCastPhotoShadow(bool bShow, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MeshComponent*[] CallFunc_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, ActorComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess2);// 0x446e168
	void Get3DHandleMatAndTex(Backpack3DIconHandle* SoftObjectRef, out Object* maleMat, out Object* Tex, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue, MaterialInterface* K2Node_DynamicCast_AsMaterial_Interface, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue2);// 0x446e168
	void GetAttachPoint(out Actor* attachPoint, Actor*[] CallFunc_GetAllActorsWithInterface_OutActors, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x446e168
	void ArrayFind(FString Input, out bool Index, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x446e168
	void SetCastShadow(bool CastShadow, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MeshComponent*[] CallFunc_GetComponentsByClass_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, ActorComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess2);// 0x446e168
	void UpdateWeaponMatParam(float Alpha);// 0x446e168
	void PlayProjectileEffect(Vector CallFunc_MakeVector_ReturnValue, Actor*[] ___object_Variable, HitResult CallFunc_K2_SetActorLocationAndRotation_SweepHitResult, bool CallFunc_K2_SetActorLocationAndRotation_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, HitResult CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutHit, Vector[] CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions, Vector CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination, bool CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue);// 0x446e168
	void UserConstructionScript();// 0x446e168
	void WeaponMatTimeline__FinishedFunc();// 0x446e168
	void WeaponMatTimeline__UpdateFunc();// 0x446e168
	void Projectile(float X, float Y, float Z);// 0x446e168
	void TickWeaponMat(float fromShake, float toShake);// 0x446e168
	void ReceiveTick(float DeltaSeconds);// 0x446e168
	void ExecuteUbergraph_NewLobbyModelShowActorBP(int EntryPoint, float K2Node_Event_DeltaSeconds, Actor*[] ___object_Variable, float K2Node_CustomEvent_x, float K2Node_CustomEvent_y, float K2Node_CustomEvent_z, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutHit, Vector[] CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions, Vector CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination, bool CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue, HitResult CallFunc_K2_SetActorLocationAndRotation_SweepHitResult, bool CallFunc_K2_SetActorLocationAndRotation_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float K2Node_CustomEvent_fromShake, float K2Node_CustomEvent_toShake, float CallFunc_Lerp_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x446e168
	StaticMeshComponent* Sphere;//[Offset: 0x39c, Size: 4]
	CapsuleComponent* Capsule;//[Offset: 0x3a0, Size: 4]
	SceneComponent* Scene;//[Offset: 0x3a4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3a8, Size: 4]
	float WeaponMatTimeline_time_CC1B41C749E55AE85A5FF0A2EA7DF654;//[Offset: 0x3ac, Size: 4]
	byte WeaponMatTimeline__Direction_CC1B41C749E55AE85A5FF0A2EA7DF654;//[Offset: 0x3b0, Size: 1]
	TimelineComponent* WeaponMatTimeline;//[Offset: 0x3b4, Size: 4]
	STExtraWeapon* WeaponActor;//[Offset: 0x3b8, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x3bc, Size: 4]
	bool press;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	byte FingerIndex;//[Offset: 0x3c1, Size: 1]
	float LocationX;//[Offset: 0x3c4, Size: 4]
	bool canAutoRotateZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	float zRotateSpeed;//[Offset: 0x3cc, Size: 4]
	float LocationY;//[Offset: 0x3d0, Size: 4]
	bool canAutoRotateX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	float backTime;//[Offset: 0x3d8, Size: 4]
	float curBackTime;//[Offset: 0x3dc, Size: 4]
	float disinteractDis;//[Offset: 0x3e0, Size: 4]
	float yIntensity;//[Offset: 0x3e4, Size: 4]
	float yDisinteractRatio;//[Offset: 0x3e8, Size: 4]
	float originX;//[Offset: 0x3ec, Size: 4]
	float originY;//[Offset: 0x3f0, Size: 4]
	bool alreadyRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	bool alreadyRotateY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 1]
	bool canRotateBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f6, Size: 1]
	int ShowType;//[Offset: 0x3f8, Size: 4]
	bool needXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	Character* PlaneCharacter;//[Offset: 0x400, Size: 4]
	float XRotateMin;//[Offset: 0x404, Size: 4]
	float XRotateMax;//[Offset: 0x408, Size: 4]
	float YRotateMin;//[Offset: 0x40c, Size: 4]
	float YRotateMax;//[Offset: 0x410, Size: 4]
	int CurrentItemID;//[Offset: 0x414, Size: 4]
	BP_Lobby_Grenade_C* grenadeActor;//[Offset: 0x418, Size: 4]
	bool isTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	Vector[] projectilePredictArray;//[Offset: 0x420, Size: 12]
	int projectileTickIndex;//[Offset: 0x42c, Size: 4]
	float xRotateSpeed;//[Offset: 0x430, Size: 4]
	Rotator AttachPointDefaultRotate;//[Offset: 0x434, Size: 12]
	LobbyModelCommonActorBP_C* bagWidgetActor;//[Offset: 0x440, Size: 4]
	Transform SpawnTransform;//[Offset: 0x450, Size: 48]
	BP_LobbyVehicle_C* VehicleActor;//[Offset: 0x480, Size: 4]
	bool CanRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	int curGrenadeIndex;//[Offset: 0x488, Size: 4]
	int spawnIndex;//[Offset: 0x48c, Size: 4]
	<int,ShowActorData> ShowActorDataArray;//[Offset: 0x490, Size: 60]
	BP_LobbyVehicle_C* refitVehicleActor;//[Offset: 0x4cc, Size: 4]
	LobbyModelCommonActorBP_C* parachuteActor;//[Offset: 0x4d0, Size: 4]
	int curVehicleIndex;//[Offset: 0x4d4, Size: 4]
	FString[] ExtraData;//[Offset: 0x4d8, Size: 12]
	bool EnableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	bool RotateBackZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	NewLobbyModelShowActorBP_C* nextShowActor;//[Offset: 0x4e8, Size: 4]
	bool isAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	bool weaponDynMatChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 1]
	LobbyModelCommonActorBP_C* icon3DActor;//[Offset: 0x4f0, Size: 4]
	<int> HasShakeEffectItem;//[Offset: 0x4f4, Size: 60]
	LobbyModelCommonActorBP_C* bagActor;//[Offset: 0x530, Size: 4]
	BP_STRUCT_WeaponMatParamCfg_type WeaponMatParam;//[Offset: 0x534, Size: 76]
	float MatAlpha;//[Offset: 0x580, Size: 4]
	BP_LobbyWingman_C* WingmanActor;//[Offset: 0x584, Size: 4]

--------------------------------
Class: Backpack3DIconHandle.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	Texture2D* attachTex;//[Offset: 0x968, Size: 40]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xc0, Size: 136]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	void Stop();// 0x61391cc
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x6139110
	void SetTimelineLengthMode(byte NewLengthMode);// 0x6139098
	void SetTimelineLength(float NewLength);// 0x6139020
	void SetPlayRate(float NewRate);// 0x6138fa8
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x6138e94
	void SetNewTime(float NewTime);// 0x6138e1c
	void SetLooping(bool bNewLooping);// 0x6138d9c
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x6138ce0
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x6138c60
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x6138ba4
	void ReverseFromEnd();// 0x6138b90
	void Reverse();// 0x6138b7c
	void PlayFromStart();// 0x6138b68
	void Play();// 0x6138b54
	void OnRep_Timeline();// 0x6138b40
	bool IsReversing();// 0x6138b18
	bool IsPlaying();// 0x6138af0
	bool IsLooping();// 0x6138ac8
	float GetTimelineLength();// 0x6138aa0
	float GetPlayRate();// 0x33814e4
	float GetPlaybackPosition();// 0x6138a78
	bool GetIgnoreTimeDilation();// 0x6138a50

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	float Length;//[Offset: 0x4, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	float PlayRate;//[Offset: 0xc, Size: 4]
	float Position;//[Offset: 0x10, Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x14, Size: 12]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 12]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x2c, Size: 12]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x38, Size: 12]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48, Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x58, Size: 16]
	Object* PropertySetObject;//[Offset: 0x70, Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 8]
	Property* DirectionProperty;//[Offset: 0x80, Size: 4]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 4]
	delegate EventFunc;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: BP_Lobby_Grenade_C.Actor.Object
	void Sleep(bool CallFunc_SetStaticMesh_ReturnValue);// 0x446e168
	void SetAvatarReady();// 0x446e168
	void UserConstructionScript();// 0x446e168
	GrenadeAvatarComponent_BP_C* GrenadeAvatarComponent_BP;//[Offset: 0x308, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x30c, Size: 4]
	bool IsAvatarReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	int grenadeResId;//[Offset: 0x314, Size: 4]
	int ShowType;//[Offset: 0x318, Size: 4]

--------------------------------
Class: GrenadeAvatarComponent_BP_C.GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b8, Size: 4]
	int GetDefaultAvatarID(int InAvatarID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x446e168
	FString GetItemAvatarHandlePath(int ItemID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetPath_ReturnValue, FString CallFunc_GetPath_ReturnValue2, bool CallFunc_IsBattleItemHandlePathExist_ReturnValue);// 0x446e168
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_IsLobbyAvatar_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle2, bool K2Node_DynamicCast_bSuccess2);// 0x446e168
	void GrenadeAvatarEquiped();// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void ExecuteUbergraph_GrenadeAvatarComponent_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate);// 0x446e168
	ParticleSystem* ExplodeEffect;//[Offset: 0x3c0, Size: 40]
	AkAudioEvent* ExplodeSound;//[Offset: 0x3e8, Size: 40]
	AkAudioEvent* GrenadeFuzeAkSoundEvent;//[Offset: 0x410, Size: 40]
	AkAudioEvent* GrenadeThrowAkSoundEvent;//[Offset: 0x438, Size: 40]
	AkAudioEvent* GrenadeWallCollideAkSoundEvent;//[Offset: 0x460, Size: 40]

--------------------------------
Class: BP_STRUCT_WeaponSkinMapping_type
	FString OutputDesc_0_4C755C4055DE81011AC086EE07D9D3D3;//[Offset: 0x0, Size: 12]
	int SkinID_1_6AF5A0C03E8D665F2B8E33D5019212C4;//[Offset: 0xc, Size: 4]
	int WeaponID_2_1D11360041F2AB4A2B54AC9608775314;//[Offset: 0x10, Size: 4]
	FString URL_3_276895001829BC3265405AC70F011B5C;//[Offset: 0x14, Size: 12]
	FString iconURL_4_1C201F405280621B7F9C0B550EBB3B4C;//[Offset: 0x20, Size: 12]

--------------------------------
Class: UAELoadedClassManager.Object
	<FString,BPTable*> BPTableMap;//[Offset: 0x1c, Size: 60]
	<FString,BPTable*> BPTableMap_Mod;//[Offset: 0x58, Size: 60]
	<int,FString> BPTableNameMap;//[Offset: 0x94, Size: 60]
	FString LoadedClassManagerClassName;//[Offset: 0xd0, Size: 12]
	<Object*,SoftClassPath> AsyncLoadClassDict;//[Offset: 0x22c, Size: 60]
	void InitTableData();// 0x35bc7c4
	void InitialModTableItemMap();// 0x33bb640
	void InitBPTableMap_Mod();// 0x446e168
	void InitBPTableMap();// 0x446e168
	void HandleTableModNameChanged(FString InModName);// 0x3a25fd0
	FString GetWrapperPath(FString BPTableName, int ID);// 0x3a25e48
	class Object GetWrapperClass(FString BPTableName, int ID);// 0x3a25d40
	FString GetPath(FString BPTableName, int ID, bool IsLobby, bool bForceLobby);// 0x3a25b18
	Object* GetObject(FString BPTableName, int ID, Object* Outer, bool IsLobby, bool IsLowDevice);// 0x3a2592c
	class Object GetCustom1Class(FString BPTableName, int ID);// 0x3a25824
	class Object GetClass(FString BPTableName, int ID, bool IsLobby, bool IsLowDevice);// 0x3a2567c
	FString GetBPTableName(int Type);// 0x3a25574
	void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate);// 0x3a25394
	static UAELoadedClassManager* Get();// 0x3a2536c
	BPTable* CreateAndAddBPTable_Mod(FString BPTableName);// 0x3a252a8
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x3a251e4
	void ClearModTableItemMap();// 0x3431c88
	void ClearBPTable_Mod();// 0x3a251d0
	void ClearBPTable();// 0x3a251bc
	void ClearAssetByAssetReferenceAsync(delegate AssetLoadSuccessDelegate);// 0x3a25118
	void ClearAllData();// 0x3a25104

--------------------------------
Class: BPTable.Object
	FString BPTableName;//[Offset: 0x1c, Size: 12]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x28, Size: 60]
	<int,BPTableItem> BPTableItemMap_Mod;//[Offset: 0x64, Size: 60]
	FString GetWrapperPath(int ID);// 0x3a24a50
	class Object GetWrapperClass(int ID);// 0x3a249d0
	FString GetPath(int ID, bool IsLobby, bool bForceLobby);// 0x3a24828
	Object* GetObject(int ID, Object* Outer, bool IsLobby, bool IsLowDevice);// 0x3a246c4
	Object* GetModObject(int ID, Object* Outer, bool IsLobby);// 0x3a245b4
	class Object GetModClass(int ID, bool IsLobby);// 0x3a244e8
	class Object GetCustom1Class(int ID);// 0x3a24468
	class Object GetClass(int ID, bool IsLobby, bool IsLowDevice);// 0x3a2434c
	void ConvertPath(int ID);// 0x3a242d4

--------------------------------
Class: BPTableItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	FString Path;//[Offset: 0x10, Size: 12]
	FString LobbyPath;//[Offset: 0x1c, Size: 12]
	FString WrapperPath;//[Offset: 0x28, Size: 12]
	FString Custom1;//[Offset: 0x34, Size: 12]

--------------------------------
Class: LobbyModelCommonActorBP_C.LobbyModelCommonActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x446e168
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e8, Size: 4]
	int commonActorResId;//[Offset: 0x3ec, Size: 4]
	int ShowType;//[Offset: 0x3f0, Size: 4]

--------------------------------
Class: LobbyModelCommonActor.LuaActor.Actor.Object
	MeshComponent* MeshComponent;//[Offset: 0x398, Size: 4]
	<enum,FString> SlotNameMap;//[Offset: 0x39c, Size: 60]
	delegate OnCommonActorLoaded;//[Offset: 0x3d8, Size: 12]
	void ShowByResId(out const ItemDefineID ItemDefineID, bool bSync);// 0x3555a94
	void ShowByHandle(BattleItemHandleBase* InHandle, bool bSync);// 0x35559d0
	MeshComponent* SetupMeshComponent(MeshComponent* MeshComp);// 0x3555950
	void SetMeshAndMaterial(BattleItemHandleBase* BattleItemHandleBase, MeshComponent* MeshComp);// 0x3555894
	void OnCommonActorLoaded__DelegateSignature();// 0x446e168
	StaticMeshComponent* InitStaticMesh();// 0x355586c
	SkeletalMeshComponent* InitSkeletalMesh();// 0x3555844
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x3555790
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x35556dc
	CharacterAvatarComponent2* GetRelativeCharacterAvatarComponent2();// 0x446e168
	MaterialInterface*[] GetMeshAppliedMaterials(BackpackAvatarHandle* AvatarHandle, MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x3555504
	void ApplyMaterialByIdx(MeshComponent* MeshComp, MaterialInstance* Material, int idx);// 0x3555404

--------------------------------
Class: BP_LobbyVehicle_C.STExtraLobbyVehicle.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a8, Size: 4]
	void SetHighLight(float invincible, float FreExp, float Speed, MaterialInstanceDynamic* DynamicMat);// 0x446e168
	int GetDefaultAvatarID(int InAvatarID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_VehiclePlaneSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x446e168
	void SetDMIParam(MaterialInstanceDynamic* Target, FName Name, float Value, bool CallFunc_IsValid_ReturnValue);// 0x446e168
	void GetVehicleMasterPath(int VehicleSkinID, out FString MeshBasePath, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_VehicleBPTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_VehicleShapeTable_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2);// 0x446e168
	bool ClearAllVehicleItems();// 0x446e168
	bool PreChangeVehicleAvatar_Old(int InAvatarID, int InAdvanceAvatarID, FString CallFunc_GetNewVehicleMasterAnimBPPath_AnimBPPath, FString CallFunc_GetNewVehilceMasterPath_MeshBasePath, bool CallFunc_PreChangeVehicleAvatar_Old_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_PreChangeVehicleAvatar_Old_ReturnValue2);// 0x446e168
	bool PutOffVehicleSlot(enum InSlotType, bool CallFunc_PutOffSlotInLobby_result);// 0x446e168
	bool PutOffVehicleItem(int InModelID, bool CallFunc_PutOffItemIDInLobby_result);// 0x446e168
	bool PutOnVehicleItem(int InModelID, int ColorID, int PatternID, int ParticleID, bool CallFunc_PutOnItemIDInLobby_result);// 0x446e168
	void GetNewVehicleMasterAnimBPPath(int InSkinID, out FString AnimBpPath, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitInfo_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue2, BP_STRUCT_VehicleShapeTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2);// 0x446e168
	void GetNewVehilceMasterPath(int VehicleSkinID, out FString MeshBasePath, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitInfo_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue2, BP_STRUCT_VehicleShapeTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2);// 0x446e168
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID, bool CallFunc_PreChangeVehicleAvatar_ReturnValue, FString CallFunc_GetNewVehilceMasterPath_MeshBasePath, bool CallFunc_PreChangeVehicleAvatar_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetVehicleMasterPath_MeshBasePath);// 0x446e168
	bool ClearAllVehicleStyleID();// 0x446e168
	bool PutOffVehicleStyleID(int InStyleID, bool CallFunc_HandleUnequipStyle_ReturnValue);// 0x446e168
	bool PutOnVehicleStyleID(int InStyleID, bool CallFunc_HandleEquipStyle_ReturnValue);// 0x446e168
	void UserConstructionScript();// 0x446e168
	void TrySetHighlight(float invincible, float Freq, float Speed);// 0x446e168
	void ExecuteUbergraph_BP_LobbyVehicle(int EntryPoint, float K2Node_CustomEvent_Invincible, float K2Node_CustomEvent_Freq, float K2Node_CustomEvent_speed, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Array_Index_Variable, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue2, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x446e168
	VehicleAdvanceAvatarComp_BP_C* VehicleAdvanceAvatarComp_BP;//[Offset: 0x3ac, Size: 4]
	VehicleAvatarComponent_BP_C* VehicleAvatarComponent_BP;//[Offset: 0x3b0, Size: 4]
	MaterialInstanceDynamic* DMI;//[Offset: 0x3b4, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0x3b8, Size: 4]
	FName TailLightParamName;//[Offset: 0x3c0, Size: 8]
	FName FrontLightParamName;//[Offset: 0x3c8, Size: 8]
	FName FPPBoostLightParamName;//[Offset: 0x3d0, Size: 8]
	int vehicleResId;//[Offset: 0x3d8, Size: 4]
	MaterialInstanceDynamic* DMI_TailLight;//[Offset: 0x3dc, Size: 4]
	MaterialInstanceDynamic* DMI_AdvanceVehicle;//[Offset: 0x3e0, Size: 4]
	int HighlightTryTime;//[Offset: 0x3e4, Size: 4]
	<int> SkyMotors;//[Offset: 0x3e8, Size: 60]
	<int> SpecialMotors;//[Offset: 0x424, Size: 60]
	int ShowType;//[Offset: 0x460, Size: 4]

--------------------------------
Class: STExtraLobbyVehicle.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x390, Size: 4]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0x394, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0x398, Size: 4]
	FString LuaFilePath;//[Offset: 0x39c, Size: 12]
	bool PutOnVehicleStyleID(int InStyleID);// 0x375cae4
	bool PutOnVehicleItem(int InModelID, int ColorID, int PatternID, int ParticleID);// 0x376f488
	bool PutOffVehicleStyleID(int InStyleID);// 0x376f400
	bool PutOffVehicleSlot(enum InSlotType);// 0x376f378
	bool PutOffVehicleItem(int InModelID);// 0x34263e0
	bool PreChangeVehicleFPPAvatar();// 0x376f348
	bool PreChangeVehicleBrokenMat();// 0x34275a4
	bool PreChangeVehicleAvatar_Old(int InAvatarID, int InAdvanceAvatarID);// 0x376f27c
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x376f1b0
	VehicleAvatarComponent* GetVehicleAvatar();// 0x376f188
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x376f160
	MaterialInstanceDynamic* GetTailLightDIM();// 0x376f138
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x376f110
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x376f0e8
	int GetDefaultAvatarID(int InAvatarID);// 0x376f060
	bool ClearAllVehicleStyleID();// 0x376f030
	bool ClearAllVehicleItems();// 0x376f000

--------------------------------
Class: BP_STRUCT_VehiclePlaneSkinMapping_type
	int OrginalID_0_035F8000705EAFE8164A73BF05CF7C94;//[Offset: 0x0, Size: 4]
	int SkinID_1_2D869240386FF4E567A70940014D8664;//[Offset: 0x4, Size: 4]
	FString iconURL_2_025050C0368B0D852A82EE78056E714C;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleBPTable_type
	int ID_0_0D9DF74051BBD583279703B701F172E4;//[Offset: 0x0, Size: 4]
	FString Path_2_2F72974026FE3BC32110651501735958;//[Offset: 0x4, Size: 12]
	FString CName_3_138BC5001BE2FE5E5E66B36807255925;//[Offset: 0x10, Size: 12]
	int VehicleShapeID_4_2C43E38070C85DC025E56CC303F69884;//[Offset: 0x1c, Size: 4]
	FString LobbyPath_5_4594B5404A7DACE145FA22A607895AE8;//[Offset: 0x20, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleShapeTable_type
	FString MeshBasePath_0_417CD1001B80DC1E44CCF1BC0A899508;//[Offset: 0x0, Size: 12]
	FString BPPath_1_04FA93804ECCC4B06DEB74AB015A0988;//[Offset: 0xc, Size: 12]
	int ID_2_63908F0075AF39C00FB6A5F00F6121F4;//[Offset: 0x18, Size: 4]
	FString AnimBPPath_3_12EBB4C05FB48819333454CC00540308;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleRefitInfo_type
	int cost_num1_0_206D9D404A460C770DD906380BC58481;//[Offset: 0x0, Size: 4]
	FString unlock_part_list_1_154E4640205F8CA9261052710E193D64;//[Offset: 0x4, Size: 12]
	int cost_num2_5_206E9D804A460C780DD9063F0BC58482;//[Offset: 0x10, Size: 4]
	int cost_id2_6_69AB5CC07C73718975D5265F08BC42F2;//[Offset: 0x14, Size: 4]
	int vehicle_group_id_8_28A4BD0014BDAA3A35B5E24106F2D5E4;//[Offset: 0x18, Size: 4]
	int level_9_406ABD00274B124A3D84959D01EC2D9C;//[Offset: 0x1c, Size: 4]
	int cost_id1_11_69AA5C807C73718875D5265808BC42F1;//[Offset: 0x20, Size: 4]
	int vehicle_id_14_12DD9A006C12A260363420170D9E9004;//[Offset: 0x24, Size: 4]
	int VehicleShapeID_15_1C46A68016CA3E7862FCD8770C15F554;//[Offset: 0x28, Size: 4]
	FString DefaultStyleList_16_42E513804A54486A3C87203A06970FC4;//[Offset: 0x2c, Size: 12]
	int CameraMapID_17_008BD40017FB573E1D5C69DF09B42634;//[Offset: 0x38, Size: 4]
	FString des_18_2CE9E60030AFF29C7BC43AC30121D423;//[Offset: 0x3c, Size: 12]
	int levelShowedInStore_19_0F3E688048D05E406085DB75090EB705;//[Offset: 0x48, Size: 4]
	FString levelIcon_20_3B181F40595EF03B0759382D0DA1167E;//[Offset: 0x4c, Size: 12]
	int levelShowRefit_21_62A703C06E7AA2A73D47FB960412BC34;//[Offset: 0x58, Size: 4]
	FString big_icon_22_6C9A25804E63836E6E62E43101E7E53E;//[Offset: 0x5c, Size: 12]
	FString StaticMeshPath_23_08D3F7804FBB3CE866105B0D080582D8;//[Offset: 0x68, Size: 12]
	int effectId_24_1B2A1D802F1E8EC807DD4D3302D9B5A4;//[Offset: 0x74, Size: 4]

--------------------------------
Class: BP_STRUCT_Item_type
	FString ItemBigIcon_0_733663734EEB8DD5D7FF41A6E96480D4;//[Offset: 0x0, Size: 12]
	int MaxCount_1_D5BF33434E37E75739D213989C4FA372;//[Offset: 0xc, Size: 4]
	int BPID_2_F73A5EF243D620CE49BBCAA8832C6AF9;//[Offset: 0x10, Size: 4]
	int ItemType_3_4CBCE77A4D2A20BEBD861AADEF3B616B;//[Offset: 0x14, Size: 4]
	bool AutoEquipAndDrop_4_144B885646B92B9836CE33923842AB1E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ItemID_5_29F7B64741688A0A853FD281FAE4E28D;//[Offset: 0x1c, Size: 4]
	bool Consumable_7_B08070BD407AD029B7CDA7BDB341A342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString ItemDesc_8_8ED919494479E8A62F11DBB9C7AD0F9A;//[Offset: 0x24, Size: 12]
	FString ItemSmallIcon_9_B13D206C4A153C963FCE478A1B39C15F;//[Offset: 0x30, Size: 12]
	FString ItemName_10_B257B36A422BB69651454E90EBC1323B;//[Offset: 0x3c, Size: 12]
	FString WardrobeTab_11_6562B47746AECB0B5C84BC9C96EACD9D;//[Offset: 0x48, Size: 12]
	int ItemSubType_12_087F026E41DAB82F567758A4F56D72CF;//[Offset: 0x54, Size: 4]
	bool Equippable_13_BB222DC04DCB195FCB3F29B89EA210CA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float UnitWeight_f_14_725EBB604F31443B93AF3597580ECAE4;//[Offset: 0x5c, Size: 4]
	FString ItemWhiteIcon_15_AA35FD8045790AA9F73F58829F202B94;//[Offset: 0x60, Size: 12]
	int ItemQuality_16_3EF7461D45D14FC186EB3DBB70D01484;//[Offset: 0x6c, Size: 4]
	FString KillWhiteIcon_27_16289384496FF361F9005580DEF9CAD1;//[Offset: 0x70, Size: 12]
	int NeedShare_73_D9C0818D40A3C6AB07231BABA5477060;//[Offset: 0x7c, Size: 4]
	int WeightforOrder_29_4373EFCD4D78E7DF4067FF9D3E213664;//[Offset: 0x80, Size: 4]
	FString Preview_32_1997D4634D3D3F8CC7360283D2AF4E6C;//[Offset: 0x84, Size: 12]
	FString ExTime_33_8299B7454C71BC6A899937AF00BFF0C5;//[Offset: 0x90, Size: 12]
	FString PickupDesc_36_D5D621864C55ED8C6ABE728B6F002D4E;//[Offset: 0x9c, Size: 12]
	int WardrobeMainTab_38_D234FCBE4A19AAF3066394AD7C7D98DF;//[Offset: 0xa8, Size: 4]
	int Durability_39_7B54DEB94CD411488438539500D225E1;//[Offset: 0xac, Size: 4]
	bool IsBatchUse_40_88AB90DA48C707B0FE6DB18185C6253A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int AIFullVaule_43_6A3A6FC023E58D4B4FDDDF270E81E075;//[Offset: 0xb4, Size: 4]
	int LongDescID_44_4E8350406652C05F7794F90804562904;//[Offset: 0xb8, Size: 4]
	FString ItemSmallIcon2_46_6ED99A00141F4C900B45252101330012;//[Offset: 0xbc, Size: 12]
	FString ItemBigIcon2_47_2C0E40404ED554873AD82D3A053DBC62;//[Offset: 0xc8, Size: 12]
	FString BackpackSimple_48_26F807C06BB149650FE17C280F83D985;//[Offset: 0xd4, Size: 12]
	FString ItemRegion_49_3899A60047215AA47D8652720D715E6E;//[Offset: 0xe0, Size: 12]
	int ShowSexInMall_56_0C9F0CC01B8DDF89290B2B7F0D9E026C;//[Offset: 0xec, Size: 4]
	int AvatarID_68_319E644077E02FFF04B5C19B04157FD4;//[Offset: 0xf0, Size: 4]
	FString SpecialIcon_72_55E01BC05ADCEE1500E06C0F01021C3E;//[Offset: 0xf4, Size: 12]
	FString ValidRegionCodes_74_2EA4F9C02DC66B4573D87CB8064AB793;//[Offset: 0x100, Size: 12]
	int ValidTimes_75_5BC6A5C03028B6616FF746180062B373;//[Offset: 0x10c, Size: 4]
	int RateType_77_176334C00292E359401D0B6600355865;//[Offset: 0x110, Size: 4]
	FString QualityRate_78_5F4A46807D1C4B2C0A08E8F50F3EB745;//[Offset: 0x114, Size: 12]
	int character_param_81_2F2A70804AD88C7E6E8F5B83071E93DD;//[Offset: 0x120, Size: 4]
	int JKBPID_82_1FF3B64037160BBF09A6FDF60967EB24;//[Offset: 0x124, Size: 4]
	int ItemSoundID_83_7010328028DE3D6841FCD9F407C46B04;//[Offset: 0x128, Size: 4]
	int ResSeprateType_84_5349D1400501D3B166D23C1D0CBC9FE5;//[Offset: 0x12c, Size: 4]
	int CanIntoBag_85_416CF6C01FD7CDED0F5E477601A418C7;//[Offset: 0x130, Size: 4]
	int ItemPickupRule_87_49300E005A58193E16239C7A00F80F05;//[Offset: 0x134, Size: 4]
	FString SpecialIconSize_89_4BBF62802BA083E043328BD00C42A315;//[Offset: 0x138, Size: 12]

--------------------------------
Class: VehicleAdvanceAvatarComp_BP_C.VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7b8, Size: 4]
	FName GetReflectionCubeName_Lobby();// 0x446e168
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x446e168
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_Old_ReturnValue, bool CallFunc_GenerateDefaultAvatarConfig_ReturnValue, VehicleAvatarData K2Node_MakeStruct_VehicleAvatarData, bool CallFunc_InitVehicleAvatar_ReturnValue);// 0x446e168
	void PutOffItemIDInLobby(int InItemID, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnequipItem_ReturnValue);// 0x446e168
	void PutOnItemIDInLobby(int InItemID, int ColorID, int PatternID, int Particle ID, out bool Result, FString CallFunc_Conv_IntToString_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x446e168
	void PutOffSlotInLobby(byte InSlotType, out bool Result, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_HandleUnequipSlot_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x446e168
	void BP_ProcessStyleUnequipped(int OldStyleID, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int CallFunc_IsStyleHasModelConfig_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipStyle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue2, int CallFunc_IsStyleHasModelConfig_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2);// 0x446e168
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x446e168
	void BP_ProcessStyleEquipped(int NewStyleID, int OldStyleID);// 0x446e168
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x446e168
	void BPCreateAvatarCustomHandle(int SlotID, int ItemID, out AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle, class VAH_Pattern_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Pattern_BP_Base, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, VAH_Pattern_BP_Base_C* CallFunc_SpawnObject_ReturnValue, BP_STRUCT_VehicleRefitPatternTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_VehicleRefitColorTable_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class VAH_Particle_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Particle_BP_Base, bool K2Node_ClassDynamicCast_bSuccess2, VAH_Particle_BP_Base_C* CallFunc_SpawnObject_ReturnValue2, class VAH_Color_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Color_BP_Base, bool K2Node_ClassDynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue2, VAH_Color_BP_Base_C* CallFunc_SpawnObject_ReturnValue3, bool CallFunc_IsValid_ReturnValue3, AvatarCustomBase*[] K2Node_MakeArray_Array);// 0x446e168
	VehicleStyleData MakeVehicleStyleData(int InStyleID, VehicleStyle[] Temp, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitStyle_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, VehicleStyle K2Node_MakeStruct_VehicleStyle, int CallFunc_Array_Add_ReturnValue, VehicleStyle K2Node_MakeStruct_VehicleStyle2, byte CallFunc_Conv_IntToByte_ReturnValue3, int CallFunc_Array_Add_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue3, VehicleStyleData K2Node_MakeStruct_VehicleStyleData);// 0x446e168
	bool GenerateDefaultAvatarConfig(int InBaseSkinID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, AvatarBPUtils* CallFunc_GetBPUtils_ReturnValue, int[] CallFunc_GetVehicleDefaultStyleID_OutStyleIDList, bool CallFunc_GetVehicleDefaultStyleID_ReturnValue, int CallFunc_Array_Get_Item, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, int CallFunc_IsStyleHasModelConfig_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID);// 0x446e168
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_ReturnValue);// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x446e168
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x446e168
	void BP_EventStyleEquipped(int NewStyleID, int OldStyleID);// 0x446e168
	void BP_EventStyleUnequipped(int OldStyleID);// 0x446e168
	void ExecuteUbergraph_VehicleAdvanceAvatarComp_BP(int EntryPoint, int K2Node_CustomEvent_OldStyleID, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, int K2Node_CustomEvent_NewStyleID, int K2Node_CustomEvent_OldStyleID2);// 0x446e168
	int[] DefaultStyleIDList;//[Offset: 0x7bc, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleRefitBPTable_type
	FString Path_0_367735C04445450711936E2507D65338;//[Offset: 0x0, Size: 12]
	int SkinID_1_178D3B00586DF4A03398AF2E06BA7504;//[Offset: 0xc, Size: 4]
	int TemplateID_2_188844C035CA84B912116AE102FE3804;//[Offset: 0x10, Size: 4]
	int ID_3_7E5115C05AFA7931402A62180B97D7E4;//[Offset: 0x14, Size: 4]
	FString LobbyPath_6_1DD513C07D99921F4DE3874A01E3EA48;//[Offset: 0x18, Size: 12]

--------------------------------
Class: VAH_Pattern_BP_Base_C.AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomPattern.AvatarCustomBase.CustomBase.Object
	void InitPatternInfo(float Scale1, float Scale2, FString Path1, FString Path2, FString Offset);// 0x34537c4

--------------------------------
Class: BP_STRUCT_VehicleRefitPatternTable_type
	int IconScale2_0_46572E4071F9B3293BE305FF087656B2;//[Offset: 0x0, Size: 4]
	FString IconPath2_1_024EF7804CE8216627C3CAFF038879F2;//[Offset: 0x4, Size: 12]
	int IconScale1_2_46562E0071F9B3283BE305F8087656B1;//[Offset: 0x10, Size: 4]
	FString IconPath1_3_024DF7404CE8216527C3CAFC038879F1;//[Offset: 0x14, Size: 12]
	int ID_4_3B4768C07AEB475737EB9B560A7BEF14;//[Offset: 0x20, Size: 4]
	FString IconOffset_5_59F5A18037D665B02424026A0AB3EDF4;//[Offset: 0x24, Size: 12]
	FString PatternBPPath_6_4B5944C06FBA413D7EB727A808597AD8;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleRefitColorTable_type
	int ID_0_7607F1003C307130785E051708091744;//[Offset: 0x0, Size: 4]
	int Gray_1_23C2528073E753A86CAE45C709177089;//[Offset: 0x4, Size: 4]
	FString Color3_2_133F1A40217781872E65F412071E3F43;//[Offset: 0x8, Size: 12]
	FString Color2_3_133E1A00217781862E65F413071E3F42;//[Offset: 0x14, Size: 12]
	FString Color1_4_133D19C0217781852E65F410071E3F41;//[Offset: 0x20, Size: 12]
	FString ColorBPPath_5_507BD54027F0DEF913818BAA07048B58;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: VAH_Particle_BP_Base_C.AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomParticle.AvatarCustomBase.CustomBase.Object
	ParticleAsset[] ParticleDataList;//[Offset: 0x3c, Size: 12]
	ParticleGroup ParticleGroup;//[Offset: 0x48, Size: 36]
	bool ClearCustomInfo();// 0x34533f4
	void AsyncLoadCustomParticleDone();// 0x34533e0
	bool ApplyCustomInfo();// 0x34533b0

--------------------------------
Class: VAH_Color_BP_Base_C.AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomColor.AvatarCustomBase.CustomBase.Object
	void InitColorInfo(float Gray, FString Color1, FString Color2, FString Color3);// 0x3452bac

--------------------------------
Class: BP_STRUCT_VehicleRefitStyle_type
	int cost_id1_21_40D3BDC00FA1EC252A325218091B0AE1;//[Offset: 0x0, Size: 4]
	int cost_id2_2_40D4BE000FA1EC262A325219091B0AE2;//[Offset: 0x4, Size: 4]
	int auto_unlock_3_70A1E14054C1515F34AD00AA03FE271B;//[Offset: 0x8, Size: 4]
	int part_id_19_2960F1004F796BBC287325E80772B0B4;//[Offset: 0xc, Size: 4]
	int part_group_id_20_580314001313FC7E5037A1C0001EF544;//[Offset: 0x10, Size: 4]
	int style_id_6_3334EF8009D542BA023C1EFF04520144;//[Offset: 0x14, Size: 4]
	int vehicle_group_id_7_2FA91E401396E1572443357005BAE444;//[Offset: 0x18, Size: 4]
	int cost_num2_8_567B5EC042ECFAD5581D19B001B10392;//[Offset: 0x1c, Size: 4]
	int cost_num1_9_567A5E8042ECFAD4581D19B101B10391;//[Offset: 0x20, Size: 4]
	FString style_icon_10_2B88068062961F24124419A202014E0E;//[Offset: 0x24, Size: 12]
	FString part_name_11_242D66002BB47CD41AA53D3702B10145;//[Offset: 0x30, Size: 12]
	FString part_group_icon_12_75E1AB0010031F6A4A4800D10EF54A4E;//[Offset: 0x3c, Size: 12]
	FString style_name_13_7772E4800830FFC6124AFDB20202F465;//[Offset: 0x48, Size: 12]
	int value1_14_12B54BC05132BBB9260C3FBC04D988D1;//[Offset: 0x54, Size: 4]
	int value2_15_12B64C005132BBBA260C3FBF04D988D2;//[Offset: 0x58, Size: 4]
	int real_part_16_420F46C07AAD2FE77C0DB8570D3321D4;//[Offset: 0x5c, Size: 4]
	int type2_17_243BF54066D327F75079C483054BFDB2;//[Offset: 0x60, Size: 4]
	int type1_18_243AF50066D327F65079C482054BFDB1;//[Offset: 0x64, Size: 4]
	int can_fit_22_68F7CD4000E30BD17923736E08996A54;//[Offset: 0x68, Size: 4]
	FString part_group_tab_icon_23_089B9080591DEC3273FD6659077B104E;//[Offset: 0x6c, Size: 12]
	int real_part2_24_0189F34001B6E9815CB7C17003321DA2;//[Offset: 0x78, Size: 4]
	int type21_25_7B46618009DF2DB0732EC53204BFDB01;//[Offset: 0x7c, Size: 4]
	int value21_26_048158402E894EF74D0737BF0D988D11;//[Offset: 0x80, Size: 4]

--------------------------------
Class: AvatarBPUtils.Object
	CreateAvatarHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xf4, Size: 12]
	<int,CreateAvatarHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0x100, Size: 60]
	<int,WeaponAttachmentsDataRow> WeaponAttachmentsTableRowMap;//[Offset: 0x1b4, Size: 60]
	FString InitedUpWeaponTableName;//[Offset: 0x1f0, Size: 12]
	<int,UpWeaponDataRow> UpWeaponTableRowMap;//[Offset: 0x1fc, Size: 60]
	<int,int> UpWeaponBPIDMap;//[Offset: 0x238, Size: 60]
	FString InitedUpWeaponAttachmentTableName;//[Offset: 0x274, Size: 12]
	<int,UpWeaponAttachmentDataRow> UpWeaponAttachmentTableRowMap;//[Offset: 0x280, Size: 60]
	<int,WeaponReuseCfgDataRow> WeaponReuseCfgTableRowMap;//[Offset: 0x2bc, Size: 60]
	FString InitedUpBulletTableName;//[Offset: 0x2f8, Size: 12]
	<int,UpBulletTableDataRow> UpBulletTableRowMap;//[Offset: 0x304, Size: 60]
	<int,SupportUpBullets> AvailableBulletsMap;//[Offset: 0x340, Size: 60]
	FString InitedChipSupportTableName;//[Offset: 0x37c, Size: 12]
	<int,ChipSupportDataRow> ChipSupportDataRowMap;//[Offset: 0x388, Size: 60]
	<int,ChipSupportItem> ChipSupportItemMap;//[Offset: 0x3c4, Size: 60]
	FString InitedChipTableName;//[Offset: 0x400, Size: 12]
	<int,ChipDataRow> ChipDataRowMap;//[Offset: 0x40c, Size: 60]
	bool bEditorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	<int,int> OverrideTemplateMap_EditorMode;//[Offset: 0x44c, Size: 60]
	void StringToArrayString(FString str, out FString[] OutArray, FString Sign);// 0x339a0d4
	void StringToArrayName(FString str, out FName[] OutArray, FString Sign);// 0x3399e60
	void StringToArray(FString str, out int[] OutArray, FString Sign);// 0x3399bec
	void SetEditorMode(bool bOpen);// 0x3399b70
	void RefreshWeaponAttachmentsTableRowMap(int WeaponID, out const WeaponAttachmentsDataRow RowData);// 0x3399a48
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x339998c
	void OnModNameChanged(FString InModName);// 0x33998d0
	void InitWeaponReuseCfgTable();// 0x33998bc
	void InitWeaponAttrBPTable();// 0x33998a8
	void InitWeaponAttachmentsTable();// 0x3399894
	void InitUpWeaponTable(FString tableName);// 0x33997d8
	void InitUpWeaponAttachmentsTable(FString tableName);// 0x339971c
	void InitUpBulletTable(FString tableName);// 0x3399660
	void Initialize();// 0x339964c
	void InitChipTable(FString tableName);// 0x3399590
	void InitChipSupportTable(FString tableName);// 0x33994d4
	int GetVehicleShapeBySkinID(int InVehicleSkinID);// 0x339944c
	bool GetVehicleDefaultStyleID(int InVehicleSkinID, out int[] OutStyleIDList);// 0x339932c
	FString GetVehicleBPPathBySkinID(int InVehicleSkinID);// 0x339921c
	int GetVehicleAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x339917c
	void GetVehicleAvatarModifyEnterSocket(int InVehicleSkinID, out FName[] OutSocketList);// 0x3399064
	int GetClothAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x3398fc4
	void GetClothAvatarSuits(int gender, out const ItemDefineID ItemDefineID, out int[] OutClothSuits);// 0x3398e50
	int GetBPIDByResID(int resID);// 0x3398dc8
	FString GetAvatarHandlePath(ItemDefineID DefineID, bool bLobby);// 0x3398c58
	void GetAvatarDataFromTable(int ItemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x3398aec
	int GetAdjustWeaponBPID_Lobby(int WeaponID);// 0x3398a64
	ItemHandleBase* CreateAvatarHandle(ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x3398938
	void ConstructAvatarDataFromTable(int ItemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x33987c4
	void AddOverrideTemplateID(int TypeSpecificID, int TemplateID);// 0x3398708

--------------------------------
Class: CreateAvatarHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 4]
	FString Path;//[Offset: 0x1c, Size: 12]
	delegate Callback;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CreateAvatarHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 12]
	FString[] PathList;//[Offset: 0xc, Size: 12]
	Object* Outer;//[Offset: 0x18, Size: 4]
	delegate Callback;//[Offset: 0x20, Size: 16]

--------------------------------
Class: WeaponAttachmentsDataRow
	int WeaponID;//[Offset: 0x0, Size: 4]
	int BulletID;//[Offset: 0x4, Size: 4]
	int ProposeBulletNum;//[Offset: 0x8, Size: 4]
	int AIMinAttackDist;//[Offset: 0xc, Size: 4]
	int AIMaxAttackDist;//[Offset: 0x10, Size: 4]
	int[] MuzzleIDList;//[Offset: 0x14, Size: 12]
	int[] UpperIDList;//[Offset: 0x20, Size: 12]
	int[] StockIDList;//[Offset: 0x2c, Size: 12]
	int[] MagazineIDList;//[Offset: 0x38, Size: 12]
	int[] LowerIDList;//[Offset: 0x44, Size: 12]
	int[] UpperSideIDList;//[Offset: 0x50, Size: 12]
	int[] CoreIDList;//[Offset: 0x5c, Size: 12]
	int[] BezelIDList;//[Offset: 0x68, Size: 12]
	int[] GunLockIDList;//[Offset: 0x74, Size: 12]

--------------------------------
Class: UpWeaponDataRow

--------------------------------
Class: UpWeaponAttachmentDataRow

--------------------------------
Class: WeaponReuseCfgDataRow

--------------------------------
Class: UpBulletTableDataRow
	int MiltiBulletID;//[Offset: 0x0, Size: 4]
	int ParentBulletID;//[Offset: 0x4, Size: 4]
	float BulletImpactDamagePerc;//[Offset: 0x8, Size: 4]
	int BulletImpactDamageAddVal;//[Offset: 0xc, Size: 4]
	float BulletMomentumPerc;//[Offset: 0x10, Size: 4]
	int BulletMomentumAddVal;//[Offset: 0x14, Size: 4]
	int DefaultPriority;//[Offset: 0x18, Size: 4]
	int[] BulletHitBuffIdList;//[Offset: 0x1c, Size: 12]
	FString IgnoreBulletHitBuffAttrName;//[Offset: 0x28, Size: 12]

--------------------------------
Class: SupportUpBullets
	SupportUpBullet[] SupportUpBulletList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ChipSupportDataRow
	int ItemID;//[Offset: 0x0, Size: 4]
	int[] SupportChipSupTypeList;//[Offset: 0x4, Size: 12]
	int SupportChipNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ChipSupportItem
	int ChipSubType;//[Offset: 0x0, Size: 4]
	<int,bool> SupportItemDic;//[Offset: 0x4, Size: 60]

--------------------------------
Class: ChipDataRow
	int ItemID;//[Offset: 0x0, Size: 4]
	AttrModifyData[] AttrModifyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 4]
	FName GetReflectionCubeName_Lobby();// 0x446e168
	void TryAddLightEffect(BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue);// 0x446e168
	FString GetItemAvatarHandlePath(int ItemID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetPath_ReturnValue, FString CallFunc_GetPath_ReturnValue2, bool CallFunc_IsBattleItemHandlePathExist_ReturnValue);// 0x446e168
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID, bool NewLocalVar, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_IsLobbyAvatar_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLobbyAvatar_ReturnValue2, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle2, bool K2Node_DynamicCast_bSuccess2);// 0x446e168
	void OnLoaded_F4972C3D46F3CFC0E0742D8E88D4527B(Object* Loaded);// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void VehicleAvatarEquiped();// 0x446e168
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x446e168
	void VehicleFPPMeshLoaded();// 0x446e168
	void LoadedBrokenMat();// 0x446e168
	void ClearVehicleLightEffect();// 0x446e168
	void BPBeginPlay();// 0x446e168
	void ExecuteUbergraph_VehicleAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x446e168
	ParticleSystem* CurLightEffect;//[Offset: 0x578, Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x5a0, Size: 4]
	bool VehicleBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]

--------------------------------
Class: ShowActorData
	float XOffset_15_335B6FB64E64691029499DB91D53AA1B;//[Offset: 0x0, Size: 4]
	FString XRotateLimit_16_7DCE96BC4B110EFA0168E382CB6609C3;//[Offset: 0x4, Size: 12]
	FString YRotateLimit_17_0404EC6E4BADBFF829934994775B2098;//[Offset: 0x10, Size: 12]
	bool NeedResetRotation_7_684BD15842498260989021B083E180BD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Rotator Rotator_10_F22B16E84D6EB79AB51C6C9294C0A08E;//[Offset: 0x20, Size: 12]
	Rotator InitRotate_12_2D3D2DC74733E25DF25F1E8EA6AD9A16;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponMatParamCfg_type
	int ID_0_01306C0006E69B6C5E6CBB190B10ADC4;//[Offset: 0x0, Size: 4]
	FString RotateMax_1_34BDAE003728AED6240ED2BB0B806958;//[Offset: 0x4, Size: 12]
	FString RotateMin_2_2CDAAD805AF7CA44240ED7AF0B80692E;//[Offset: 0x10, Size: 12]
	FString ShakeMax_3_5CDAED403E5A84016FD5821105714F08;//[Offset: 0x1c, Size: 12]
	FString ShakeMin_4_54F7ECC024AD0C3F6FD58F7905714F7E;//[Offset: 0x28, Size: 12]
	FString RotateStartMax_5_1B3031800163A6B0438B0A0A07319588;//[Offset: 0x34, Size: 12]
	FString RotateStartMin_6_134D310064C8066E438B0902073195FE;//[Offset: 0x40, Size: 12]

--------------------------------
Class: BP_LobbyWingman_C.STExtraLobbyWingman.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 4]
	void SetHighLight(float invincible, float Freq, float Speed, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x446e168
	void UserConstructionScript();// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void WingmanAvatarEqiuped_Event();// 0x446e168
	void ExecuteUbergraph_BP_LobbyWingman(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate);// 0x446e168
	WingmanAvatarComp_BP_C* WingmanAvatarComp_BP;//[Offset: 0x3a4, Size: 4]
	float invincible;//[Offset: 0x3a8, Size: 4]
	float Freq;//[Offset: 0x3ac, Size: 4]
	float Speed;//[Offset: 0x3b0, Size: 4]
	bool isNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	int ShowType;//[Offset: 0x3b8, Size: 4]

--------------------------------
Class: STExtraLobbyWingman.LuaActor.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x398, Size: 4]
	void TickWingmanAnimation();// 0x37702b0

--------------------------------
Class: WingmanAvatarComp_BP_C.WingmanAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	void CreateItemAvatarHandle(int ItemID, out BattleItemHandleBase* ItemHandle, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue);// 0x446e168
	BackpackWingmanAvatarHandle* GetWingmanAvatarHandle(int ItemID, BattleItemHandleBase* CallFunc_CreateItemAvatarHandle_itemHandle, BackpackWingmanAvatarHandle* K2Node_DynamicCast_AsBackpack_Wingman_Avatar_Handle, bool K2Node_DynamicCast_bSuccess);// 0x446e168

--------------------------------
Class: WingmanAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	MeshComponent* WingmanMesh;//[Offset: 0x228, Size: 4]
	ItemDefineID SyncData;//[Offset: 0x230, Size: 24]
	enum CurMeshChangeState;//[Offset: 0x248, Size: 1]
	delegate WingmanAvatarEqiuped;//[Offset: 0x2e8, Size: 12]
	ItemDefineID DefaultWingmanCfg;//[Offset: 0x2f8, Size: 24]
	SkeletalMesh* FPPSkMesh;//[Offset: 0x310, Size: 4]
	SkeletalMesh* TPPSkMesh;//[Offset: 0x314, Size: 4]
	BackpackWingmanAvatarHandle* WingmanAvatarHandle;//[Offset: 0x318, Size: 4]
	bool bUseLobbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool bIsUsingFppMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	void SetWingmanChangeState(enum State);// 0x392d184
	void SetUseLobbyAnim(bool UseLobbyAnim);// 0x392d104
	void PreChangeWingmanAvatar(int InItemID);// 0x392d08c
	void PreChangeDestoryAvatar();// 0x392d078
	void OnRep_WingmanAvatarChanged();// 0x392d064
	bool IsValidDestoryAvatar();// 0x392d03c
	bool IsValidAvatar();// 0x392d014
	BackpackWingmanAvatarHandle* GetWingmanAvatarHandle(int ItemID);// 0x446e168
	int GetCurrentAvatarID();// 0x392cff8
	bool CheckNeedChangeFPPMesh();// 0x392cfd0
	void AsyncLoadWingmanAvatarDone(int InItemID, enum State);// 0x392cf14
	void AsyncLoadHandle(int InItemID, enum State);// 0x392ce58

--------------------------------
Class: BackpackWingmanAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	WingmanAvatarData[] WingmanAvatarMats;//[Offset: 0xf4, Size: 12]
	SkeletalMesh* WingmanSkeletalMesh;//[Offset: 0x100, Size: 40]
	class AnimInstance* LobbyAnimBPClass;//[Offset: 0x128, Size: 40]
	class AnimInstance* animBPClass;//[Offset: 0x150, Size: 40]
	AnimationAsset* LobbyHallMontage;//[Offset: 0x178, Size: 40]
	SkeletalMesh* WingmanDestorySkeletalMesh;//[Offset: 0x1a0, Size: 40]
	WingmanAvatarData[] DestoryMatData;//[Offset: 0x1c8, Size: 12]
	SkeletalMesh* WingmanFPPSkeletalMesh;//[Offset: 0x1d8, Size: 40]
	BackpackComponent* GetBackpackComponent();// 0x33a3d0c

--------------------------------
Class: WingmanAvatarData
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]

--------------------------------
Class: BP_PlayerLobbyPawn_C.STExtraLobbyCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7d0, Size: 4]
	void SetCompRotate(SceneComponent* RotateComp, float Rotate, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x446e168
	void SetAddCharacterWeaponAnimListHandle(out LobbyCharacterWeaponAnimData[] addAnimData, out bool Suc, bool CallFunc_SetAddCharacterWeaponAnimList_ReturnValue);// 0x446e168
	void CharEquipWeaponPendant(int WeaponID, enum PendantSocketType);// 0x446e168
	void WeaponAllAssetLoadFinish();// 0x446e168
	void CharUnEquipWeaponByResId(int resID, FName SocketName);// 0x446e168
	void CharUnEquipExtraWeapon();// 0x446e168
	void SetForceUseDefaultIdle(bool force);// 0x446e168
	void UpdateClothInten(float leten, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue, ItemDefineID CallFunc_GetEquippedItemDefineID_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess);// 0x446e168
	void UpdateClothMatParam(float RotateSpeed, int ItemID, float CallFunc_FClamp_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Lerp_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue, ItemDefineID CallFunc_GetEquippedItemDefineID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x446e168
	void StopActionCamera();// 0x446e168
	void RotateOnTickInternal(bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, HitResult CallFunc_K2_AddActorWorldRotation_SweepHitResult);// 0x446e168
	void GetCurrentActionID(out int ActionID);// 0x446e168
	void SetAvatarLevel(int Level);// 0x446e168
	void OnAvatarAllMeshLoaded();// 0x446e168
	void TryRotateAvatar(bool CallFunc_CanRotateMainCharacter_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x446e168
	void SetAvatarVisibleForEmote(bool Visible);// 0x446e168
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x446e168
	void SetIsMVPMotion(bool isMVPMotion);// 0x446e168
	void SyncWeaponMontage();// 0x446e168
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x446e168
	void SetClothAnimDyAlphaInst(float Alpha);// 0x446e168
	void SetClothAnimDyAlphaGrad(float Alpha, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x446e168
	void SetClothAnimDyAlpha(float Alpha, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue);// 0x446e168
	void RotateOnTick(float RotateTime, float TargetRotation, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x446e168
	void OnEndActionHandle(int ActionID);// 0x446e168
	void OnPlayActionHandle(int ActionID);// 0x446e168
	void SetConflictRuleEnable(bool bEnableConflictRule);// 0x446e168
	void PutOffEquipmentBySlot(enum SlotType, out bool Result);// 0x446e168
	void PlayEmoteLoop();// 0x446e168
	void ShouldCurEmoteShowWeapon(out bool Result);// 0x446e168
	void HandleWeaponDisplayWhenPlayEmote();// 0x446e168
	void GetAllEquipmentList(out int[] Result);// 0x446e168
	void SetCanRotate(bool CanRotate);// 0x446e168
	void PutoffEquipmentByResid(int resID, out bool Result);// 0x446e168
	void PutOnEquipmentByResID(int resID, int ColorID, int PatternID, out bool Result);// 0x446e168
	void HideWeapon(bool isHide);// 0x446e168
	void CharPlayEmoteByResId(int EmoteId, FString ExtraInfo);// 0x446e168
	void CharUnEquipWeapon();// 0x446e168
	void CharEquipWeaponByResId(int resID, bool bUse, bool bAsync, FName SocketName, out STExtraWeapon* Weapon);// 0x446e168
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x446e168
	void GetBPID(int RowName, out int BPID);// 0x446e168
	void UserConstructionScript();// 0x446e168
	void Timeline_0__FinishedFunc();// 0x446e168
	void Timeline_0__UpdateFunc();// 0x446e168
	void ReceiveTick(float DeltaSeconds);// 0x446e168
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_3_ComponentOnInputTouchBeginSignature__DelegateS(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x446e168
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentOnInputTouchEndSignature__DelegateSig(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x446e168
	void TickClothLeten(float from);// 0x446e168
	void ExecuteUbergraph_BP_PlayerLobbyPawn(int EntryPoint, float K2Node_Event_DeltaSeconds, byte K2Node_ComponentBoundEvent_FingerIndex2, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent2, byte K2Node_ComponentBoundEvent_FingerIndex, PrimitiveComponent* K2Node_ComponentBoundEvent_TouchedComponent, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, float K2Node_CustomEvent_From, float CallFunc_Lerp_ReturnValue, ItemDefineID CallFunc_GetEquippedItemDefineID_ReturnValue);// 0x446e168
	void OnSceneType2Change__DelegateSignature(int sceneType);// 0x446e168
	void OnAvatarComponentAllMeshLoaded__DelegateSignature();// 0x446e168
	void OnSetForceUseDefaultIdle__DelegateSignature(bool force);// 0x446e168
	void OnEquipClothStateChange__DelegateSignature(BackpackAvatarHandle* AvatarHandle, bool IsEuqiped, int ItemID, int SlotType);// 0x446e168
	void OnChangeWeapon__DelegateSignature();// 0x446e168
	void OnchangeGender__DelegateSignature();// 0x446e168
	void OnChangeEquipment__DelegateSignature();// 0x446e168
	void OnStopAction__DelegateSignature(int ActionID);// 0x446e168
	void OnPlayAction__DelegateSignature(int ActionID);// 0x446e168
	BP_LobbyWeaponManager_C* BP_LobbyWeaponManager;//[Offset: 0x7d4, Size: 4]
	LobbyPlayEmoteComponent_BP_C* LobbyPlayEmoteComponent_BP;//[Offset: 0x7d8, Size: 4]
	LobbyWeaponAnimationComponent_C* LobbyWeaponAnimationComponent;//[Offset: 0x7dc, Size: 4]
	SkeletalMeshComponent* WeaponSkeletalMesh;//[Offset: 0x7e0, Size: 4]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x7e4, Size: 4]
	AELobbyCharAnimListComp* AELobbyCharAnimListComp;//[Offset: 0x7e8, Size: 4]
	float Timeline_0_Time_DFD4E0A94A64AF2CC7AD9DB7F31CA12E;//[Offset: 0x7ec, Size: 4]
	byte Timeline_0__Direction_DFD4E0A94A64AF2CC7AD9DB7F31CA12E;//[Offset: 0x7f0, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x7f4, Size: 4]
	int headid;//[Offset: 0x7f8, Size: 4]
	int resID;//[Offset: 0x7fc, Size: 4]
	bool press;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 1]
	float LocationX;//[Offset: 0x804, Size: 4]
	byte FingerIndex;//[Offset: 0x808, Size: 1]
	int LobbyPosition;//[Offset: 0x80c, Size: 4]
	STExtraWeapon* curEquipingWeapon;//[Offset: 0x810, Size: 4]
	<int,BackpackEmoteHandle*> EmoteItemIDToHandleMap;//[Offset: 0x814, Size: 60]
	FString PlayerKey;//[Offset: 0x850, Size: 12]
	bool HeadIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85c, Size: 1]
	bool CanRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85d, Size: 1]
	int LuaID;//[Offset: 0x860, Size: 4]
	delegate OnPlayAction;//[Offset: 0x864, Size: 12]
	delegate OnStopAction;//[Offset: 0x870, Size: 12]
	delegate OnChangeEquipment;//[Offset: 0x87c, Size: 12]
	BackpackEmoteHandle* CurEmoteHandle;//[Offset: 0x888, Size: 4]
	bool bIsEmoteLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 1]
	int CurrentActionID;//[Offset: 0x890, Size: 4]
	bool IsChangingHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 1]
	int PlayOnChangingHeadAcionID;//[Offset: 0x898, Size: 4]
	int CurPlayEmoteId;//[Offset: 0x89c, Size: 4]
	bool IsPlayingAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	float RotateTime;//[Offset: 0x8a4, Size: 4]
	float TargetRotation;//[Offset: 0x8a8, Size: 4]
	bool StartRotateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ac, Size: 1]
	float ClothAnimDyAlpha;//[Offset: 0x8b0, Size: 4]
	float CurClothAnimDyAlpha;//[Offset: 0x8b4, Size: 4]
	float ClothAnimDyAlphaDiff;//[Offset: 0x8b8, Size: 4]
	bool isMVPMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 1]
	delegate OnchangeGender;//[Offset: 0x8c0, Size: 12]
	delegate OnChangeWeapon;//[Offset: 0x8cc, Size: 12]
	bool bEquipingSkateAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 1]
	bool isAutoTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d9, Size: 1]
	Vector LocationBeforeEmote;//[Offset: 0x8dc, Size: 12]
	int AvatarLevel;//[Offset: 0x8e8, Size: 4]
	float Inten;//[Offset: 0x8ec, Size: 4]
	delegate OnEquipClothStateChange;//[Offset: 0x8f0, Size: 12]
	bool ForceUseDefaultIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fc, Size: 1]
	delegate OnSetForceUseDefaultIdle;//[Offset: 0x900, Size: 12]
	<int,int> DynamicMatClothMap;//[Offset: 0x90c, Size: 60]
	float WindSpeed_Editor;//[Offset: 0x948, Size: 4]
	float WindStrength_Editor;//[Offset: 0x94c, Size: 4]
	float WindRadius_Editor;//[Offset: 0x950, Size: 4]
	CurveFloat* WindSpeed;//[Offset: 0x954, Size: 4]
	float AccumelateWindTime;//[Offset: 0x958, Size: 4]
	delegate OnAvatarComponentAllMeshLoaded;//[Offset: 0x95c, Size: 12]
	delegate OnSceneType2Change;//[Offset: 0x968, Size: 12]
	int SceneType2;//[Offset: 0x974, Size: 4]

--------------------------------
Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	FString LobbyPlayerKey;//[Offset: 0x66c, Size: 12]
	FString PlayerUID;//[Offset: 0x678, Size: 12]
	bool bWeaponAnimOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x688, Size: 12]
	byte charSceneType;//[Offset: 0x694, Size: 1]
	byte lobbyPosIdx;//[Offset: 0x695, Size: 1]
	int LocalLobbyPos;//[Offset: 0x698, Size: 4]
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x69c, Size: 12]
	delegate LobbyCharWeaponChangeDelegate;//[Offset: 0x6a8, Size: 12]
	delegate ChangeWeaponVisibilityDelegate;//[Offset: 0x6b4, Size: 12]
	byte lobbyGender;//[Offset: 0x6c0, Size: 1]
	class AnimInstance* LobbyMaleAnimClass;//[Offset: 0x6c8, Size: 40]
	class AnimInstance* LobbyFemaleAnimClass;//[Offset: 0x6f0, Size: 40]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x718, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x71c, Size: 4]
	int resultAvatarPoseIndex;//[Offset: 0x720, Size: 4]
	LobbyCharacterWeaponAnimData[] AddCharacterWeaponAnimList;//[Offset: 0x724, Size: 12]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x730, Size: 12]
	BackpackEmoteHandle* curHandle;//[Offset: 0x73c, Size: 4]
	delegate EmoteMontageStartEvent;//[Offset: 0x740, Size: 12]
	delegate EmoteStartWithMainCharacterConfigEvent;//[Offset: 0x74c, Size: 12]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x758, Size: 12]
	AkComponent* emoteSound_Comp;//[Offset: 0x764, Size: 4]
	LobbyGodEffectComponent* GodEffectComponent;//[Offset: 0x768, Size: 4]
	class LobbyGodEffectComponent* GodEffectComponentPath;//[Offset: 0x770, Size: 40]
	bool IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 1]
	delegate LobbyPoseWithFriend;//[Offset: 0x7a0, Size: 12]
	delegate LobbyCancelPoseWithFriend;//[Offset: 0x7ac, Size: 12]
	FString LuaFilePath;//[Offset: 0x7b8, Size: 12]
	void UnequipWeapon(STExtraWeapon* Weapon);// 0x376e2b0
	void StopGodEffect();// 0x376e29c
	void SetStatueInfo(out const CharacterStatueInfo Info);// 0x376e1b8
	void SetResultAvatarPosIndex(int PosIndex);// 0x376e140
	void SetMaleAnimClass();// 0x33e5e54
	void SetLobbyPosIndexInAvatarScene(int pos);// 0x376e0c8
	void SetLobbyPosIndex(byte pos);// 0x376e048
	void SetLobbyCharacterProperty(byte sceneType, byte pos, byte gender);// 0x376df30
	void SetLobbyAnimGender(byte gender);// 0x376deb0
	void SetFemaleAnimClass();// 0x33e5e70
	void SetCharSceneType(byte sceneType);// 0x376de30
	bool SetAddCharacterWeaponAnimList(out const LobbyCharacterWeaponAnimData[] addAnimData);// 0x376dd74
	void PlayGodEffect(int Level);// 0x376dcfc
	void PlayEmoteInterruptSound();// 0x376dce8
	bool OnStopEmote();// 0x376dcc0
	bool OnPlayEmote(int EmoteId, FString ExtraInfo);// 0x376db18
	void HandleOnCharAnimLoadingFinished(STExtraWeapon* Weapon);// 0x376daa0
	AELobbyCharAnimListComp* GetWeaponAnimComponent();// 0x376da78
	AnimationAsset* GetWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x376d970
	int GetPosIndex();// 0x376d948
	byte GetLobbyPosIndex();// 0x376d920
	byte GetLobbyAnimGender();// 0x376d8f8
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x446e168
	STExtraWeapon* GetCurrentWeapon();// 0x376d8d0
	byte GetCharSceneType();// 0x376d8a8
	AnimationAsset* GetCharacterPlayWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int AnimIndex);// 0x376d7a0
	AnimationAsset* GetCharacterAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x376d698
	void ForceRefreshCharacterAnimation();// 0x376d684
	void EquipWeapon(STExtraWeapon* Weapon);// 0x376d60c
	void CallGlobalLuaFunction(FString FunctionName);// 0x376d550
	void BroadcastWeaponVisibilityChange();// 0x376d53c

--------------------------------
Class: LobbyCharacterWeaponAnimData
	byte PosIndex;//[Offset: 0x0, Size: 1]
	FString CharPosName;//[Offset: 0x4, Size: 12]
	LobbyCharacterGenderWeaponAnimData[] GenderWeaponAnimList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: LobbyCharacterGenderWeaponAnimData
	byte GenderType;//[Offset: 0x0, Size: 1]
	FString GenderTypeName;//[Offset: 0x4, Size: 12]
	AnimationAsset* WeaponAnimSoftPtr;//[Offset: 0x10, Size: 40]
	AnimationAsset* WeaponAddAnimSoftPtr;//[Offset: 0x38, Size: 40]
	AnimationAsset*[] WeaponPlayAnimSoftPtrArray;//[Offset: 0x60, Size: 12]

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xf8, Size: 40]
	float blendTime;//[Offset: 0x120, Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x128, Size: 12]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x134, Size: 12]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0x140, Size: 12]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0x14c, Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x158, Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x15c, Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x164, Size: 12]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x170, Size: 12]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x339daa4
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x339d684
	bool HandleDrop(int InCount, enum Reason);// 0x339d0a0
	bool HandleDisuse(enum Reason);// 0x3388314
	BackpackComponent* GetBackpackComponent();// 0x33a3d0c
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x33a3c48

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]

--------------------------------
Class: EmoteAnimConfig
	FName GenderStr;//[Offset: 0x0, Size: 8]
	class Character* MainCharacter;//[Offset: 0x8, Size: 40]
	AnimationAsset* MainCharacterAnimAsset;//[Offset: 0x30, Size: 40]
	bool CanRotateMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	Transform MainCharacterTransform;//[Offset: 0x60, Size: 48]
	bool RotateBackToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	LevelSequence* EmoteLevelSequence;//[Offset: 0x94, Size: 4]
	EmoteAnimCharacterConfig[] MultiFollowerCharacters;//[Offset: 0x98, Size: 12]
	class Character* FollowerCharacter;//[Offset: 0xa8, Size: 40]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 60]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x260, Size: 60]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x29c, Size: 60]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 12]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 12]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x1c, Size: 12]
	Object* CachedComponent;//[Offset: 0x28, Size: 8]

--------------------------------
Class: EmoteAnimCharacterConfig
	class Character* Character;//[Offset: 0x0, Size: 40]
	Transform Transform;//[Offset: 0x30, Size: 48]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: EmoteActionBase.Object
	float PropStartShowTime;//[Offset: 0x1c, Size: 4]
	float PropEndShowTime;//[Offset: 0x20, Size: 4]
	bool bOnlyInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	delegate OnActionReady;//[Offset: 0x38, Size: 12]
	void SetExecuteFlag(bool IsExecute);// 0x3499840
	void SetEmotePlayRate(Object* InOuter, BackpackEmoteHandle* InHandle, float OldEmoteRate, float NewEmoteRate);// 0x34996f8
	void SetActionDelayTimeHandle(Object* InOuter, BackpackEmoteHandle* InHandle);// 0x349963c
	Object* GetSoftRefObj(out const SoftObjectPath AssetRef);// 0x3499560
	class Object GetSoftRefClass(out const SoftObjectPath AssetRef);// 0x3499484
	bool GetIsExecuting();// 0x3499468
	void Destroy();// 0x341f4c8
	void DelayShow();// 0x33886a8

--------------------------------
Class: LobbyGodEffectComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* ParticleEffect1;//[Offset: 0x260, Size: 40]
	ParticleSystem* ParticleEffect2;//[Offset: 0x288, Size: 40]
	ParticleSystem* ParticleEffect3;//[Offset: 0x2b0, Size: 40]
	ParticleSystem* ParticleEffect100;//[Offset: 0x2d8, Size: 40]
	ParticleSystem* ParticleEffect101;//[Offset: 0x300, Size: 40]
	ParticleSystem* ParticleEffect102;//[Offset: 0x328, Size: 40]
	ParticleSystem* ParticleEffect103;//[Offset: 0x350, Size: 40]
	ParticleSystem* ParticleEffect104;//[Offset: 0x378, Size: 40]
	class UserWidget* GodEffectWidget;//[Offset: 0x3a0, Size: 4]
	WidgetComponent* WidgetComponent;//[Offset: 0x3a4, Size: 4]
	ParticleSystemComponent*[] effects;//[Offset: 0x3ac, Size: 12]
	void StopEffect();// 0x3554268
	void SetNameText(int TextId);// 0x35541e8
	void PlayGodEffect(int Level, Vector Location);// 0x3554128
	void OnAsyncLoadEffectFinish(int Level, Vector Location);// 0x3554068

--------------------------------
Class: CharacterStatueInfo
	int AGender;//[Offset: 0x0, Size: 4]
	int Head;//[Offset: 0x4, Size: 4]
	int Hair;//[Offset: 0x8, Size: 4]
	int WeaponID;//[Offset: 0xc, Size: 4]
	FString Name;//[Offset: 0x10, Size: 12]
	FString Nation;//[Offset: 0x1c, Size: 12]
	int[] AvatarList;//[Offset: 0x28, Size: 12]
	GameModePlayerItem[] AvatarInfoList;//[Offset: 0x34, Size: 12]
	int Index;//[Offset: 0x40, Size: 4]

--------------------------------
Class: AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	LobbyCharacterWeaponAnimData[] CharacterWeaponAnimEditList;//[Offset: 0x180, Size: 12]
	LobbyCharacterWeaponAnimData[] AvatarSceneCharacterWeaponAnimEditList;//[Offset: 0x18c, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbyWithCarCharacterWeaponAnimEditList;//[Offset: 0x198, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbySystemCharacterWeaponAnimEditList;//[Offset: 0x1a4, Size: 12]
	int resultAvatarPoseIndex;//[Offset: 0x1b0, Size: 4]
	void OnAsyncLoadingFinished(LobbyAsyncLoadCharAnimParams LoadingParam);// 0x3ed6760
	void InitPendingList(out LobbyCharacterWeaponAnimData[] animEditList, out SoftObjectPath[] PendingList);// 0x3ed65b4
	AnimationAsset* GetCharacterAnim(byte PosIdx, byte GenderType, int WeaponAnimType, byte sceneType);// 0x3ed6464
	void BuildAnimMap(out LobbyCharacterWeaponAnimData[] AnimList, byte sceneType);// 0x3ed6370

--------------------------------
Class: LobbyAsyncLoadCharAnimParams

--------------------------------
Class: BP_LobbyWeaponManager_C.LobbyWeaponManagerComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a8, Size: 4]
	void UnEquipAllWeapon(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, FName[] CallFunc_Map_Keys_Keys, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, STExtraWeapon* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x446e168
	void UnEquipAllExtraWeapon(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, STExtraWeapon* CallFunc_GetUsingWeapon_ReturnValue, FName[] CallFunc_Map_Keys_Keys, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, FString CallFunc_Conv_NameToString_ReturnValue, STExtraWeapon* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_NotEqual_ObjectObject_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x446e168
	void AsyncWeaponAllAssetsLoadFinish(BP_LobbyWeapon_C* BPLobbyWeapon, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue, BP_PlayerLobbyPawn_C* K2Node_DynamicCast_AsBP_Player_Lobby_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x446e168
	void AsyncWeaponMeshLoadFinish(AvatarDIYComponent* AvatarDIYComponent, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x446e168
	void AsyncWeaponAnimLoadFinish(STExtraLobbyWeapon* LobbyWeapon, delegate K2Node_CreateDelegate_OutputDelegate, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x446e168
	void CheckWeaponNeedLODOptimize(int AvatarLevel, out bool bIsNeedLodOptimize, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x446e168
	void CheckCanEquipWeapon(int resID, out bool CanEquip, bool bIsOriginWeaponExist, bool bIsSkinWeaponExist, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID3, bool CallFunc_IsBattleItemHandleExist_ReturnValue3, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x446e168
	void EquipWeaponByResId(int resID, bool bUse, bool bAsync, FName SocketName, out STExtraWeapon* Weapon, STExtraWeapon* curEquipWeapon, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_CheckCanEquipWeapon_canEquip, FString CallFunc_Concat_StrStr_ReturnValue, STExtraWeapon* CallFunc_EquipWeaponBySocketID_ReturnValue);// 0x446e168
	void UnEquipWeaponByResId(FName SocketName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue);// 0x446e168
	void GetWeaponSocketNameByResId(int resID, out FName SocketName, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x446e168
	void SetWeaponVisibility(bool bHide, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, STExtraLobbyCharacter* K2Node_DynamicCast_AsSTExtra_Lobby_Character, bool K2Node_DynamicCast_bSuccess, STExtraWeapon*[] CallFunc_Map_Values_Values, STExtraWeapon* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x446e168
	void CreateWeapon(int inInt, out STExtraWeapon* Weapon, out BattleItemHandleBase* Handle, class BattleItemHandleBase tmpBattleHandle, Actor* CallFunc_GetOwner_ReturnValue, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, BP_PlayerLobbyPawn_C* K2Node_DynamicCast_AsBP_Player_Lobby_Pawn, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class Object CallFunc_GetLobbyWeaponClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class STExtraWeapon K2Node_ClassDynamicCast_AsSTExtra_Weapon, bool K2Node_ClassDynamicCast_bSuccess2, FString CallFunc_Conv_IntToString_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue2, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, class BackpackWeaponHandle K2Node_ClassDynamicCast_AsBackpack_Weapon_Handle, bool K2Node_ClassDynamicCast_bSuccess3, FString CallFunc_Conv_IntToString_ReturnValue3, int CallFunc_GetTableDataField_Out3, bool CallFunc_GetTableDataField_ReturnValue3, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess4, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, STExtraWeapon* CallFunc_FinishSpawningActor_ReturnValue);// 0x446e168
	class Object GetLobbyWeaponClass(int InWeaponAvatarID, int CallFunc_GetWeaponAvatarParentID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue);// 0x446e168
	STExtraWeapon* CreateWeaponAndChangeSkin(int WeaponSkinID, bool bUse, bool bSync, BattleItemHandleBase* CurEquipWeaponBattleItemHandle, STExtraWeapon* curEquipWeapon, class BattleItemHandleBase BattleHandle, STExtraWeapon* CallFunc_CreateWeapon_weapon, BattleItemHandleBase* CallFunc_CreateWeapon_handle, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate3, BP_LobbyWeapon_C* K2Node_DynamicCast_AsBP_Lobby_Weapon2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_PlayerLobbyPawn_C* K2Node_DynamicCast_AsBP_Player_Lobby_Pawn, bool K2Node_DynamicCast_bSuccess3, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_CheckWeaponNeedLODOptimize_bIsNeedLodOptimize, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2);// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void ExecuteUbergraph_BP_LobbyWeaponManager(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue);// 0x446e168
	int CurEquipWeaponID;//[Offset: 0x2ac, Size: 4]
	int CurUseWeaponID;//[Offset: 0x2b0, Size: 4]
	<int> NoneLODModeWeapons;//[Offset: 0x2b4, Size: 60]
	int ExactDeviceLevel;//[Offset: 0x2f0, Size: 4]

--------------------------------
Class: LobbyWeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xbc, Size: 60]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0xf8, Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x134, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x170, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x178, Size: 8]
	<int,int> SpecialBagLevelMap;//[Offset: 0x180, Size: 60]
	FName CurUseWeaponSocket;//[Offset: 0x1c0, Size: 8]
	FName LastUseSocket;//[Offset: 0x1c8, Size: 8]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x1e4, Size: 60]
	STExtraWeapon* LastEquipWeapon;//[Offset: 0x298, Size: 4]
	void UseWeaponBySocketID(FName SocketID);// 0x355b034
	void UnUseWeapon();// 0x355b020
	void UnEquipWeaponBySocketID(FName SocketID);// 0x355afa8
	void SwapMainWeapon();// 0x355af94
	void OnWeaponAllAssetsLoadedDone();// 0x355af80
	void OnPawnEquipmentsChanged(enum SlotType, bool IsEquipped, int ItemID);// 0x355ae74
	void OnDestroy();// 0x355ae60
	STExtraWeapon* GetWeaponBySocketID(FName SocketID);// 0x355ade0
	FName GetWeaponAttachSocketFromSocketID(out const FName SocketID, STExtraWeapon* BackupWeapon);// 0x355acfc
	SceneComponent* GetWeaponAttachComp();// 0x355acd4
	STExtraWeapon* GetUsingWeapon();// 0x355acac
	int GetLogicSocketSideType(FName SocketID);// 0x355ac2c
	int GetBagLevel();// 0x355ac04
	STExtraWeapon* EquipWeaponBySocketID(int WeaponSkinID, FName SocketID, bool bUse, bool bForceAsync);// 0x355aa9c
	void DoWeapnAttachToBack(FName SocketID);// 0x355aa24
	void DoUseWeaponBySocketID(FName SocketID);// 0x355a9ac
	void DoUnUseWeapon();// 0x355a998
	void DestroyLastWeapon();// 0x355a984
	STExtraWeapon* CreateWeaponAndChangeSkin(int WeaponSkinID, bool bUse, bool bSync);// 0x446e168
	void AsyncEquipWeapon(bool bUse, FName SocketID, uint32 Index);// 0x355a878

--------------------------------
Class: BP_LobbyWeapon_C.STExtraLobbyWeapon.STExtraWeapon.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x8f0, Size: 4]
	void HandleIdleAnim(SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, WeaponAnimInstanceBase* K2Node_DynamicCast_AsWeapon_Anim_Instance_Base, bool K2Node_DynamicCast_bSuccess2);// 0x446e168
	void OnDependentWeaponLoaded();// 0x446e168
	void SetForceForbideIdleAnim(SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, WeaponAnimInstanceBase* K2Node_DynamicCast_AsWeapon_Anim_Instance_Base, bool K2Node_DynamicCast_bSuccess2);// 0x446e168
	void RequestWeaponDIYData(FString PlayerUID, int WeaponAvatarID, int DIYPlanID);// 0x446e168
	void EquipWeaponPandentByPandentId(int pendantID, enum PendantSocketType, bool CallFunc_PutOnEquipmentByResID_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess);// 0x446e168
	void OnAsyncLoadLobbyWeaponAnimDone();// 0x446e168
	void CheckWeaponAssetsAllLoaded(bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x446e168
	void ResetWeaponLoadedStatus();// 0x446e168
	void OnAsyncLoadLobbyWeaponMeshDone();// 0x446e168
	Transform GetWeaponAttachToBackRelativeTransformByBagLevel_Lobby(int Level, int SideType, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Transform CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Transform CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue);// 0x446e168
	void InitMesh(BattleItemHandleBase* Handle);// 0x446e168
	void UserConstructionScript();// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void BPBeginPlay();// 0x446e168
	void ExecuteUbergraph_BP_LobbyWeapon(int EntryPoint);// 0x446e168
	void OnWeaponAllAssetsLoaded__DelegateSignature(BP_LobbyWeapon_C* BPLobbyWeapon);// 0x446e168
	WeaponAvatarComp_BP_C* WeaponAvatarComp_BP;//[Offset: 0x8f4, Size: 4]
	bool bHoldBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	<FString,Transform> WeaponAttachRelativeTransformMap;//[Offset: 0x8fc, Size: 60]
	bool WeaponMeshAndMatLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	bool WeaponAnimLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x939, Size: 1]
	delegate OnWeaponAllAssetsLoaded;//[Offset: 0x93c, Size: 12]
	bool ForbiddenWeaponIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x948, Size: 1]
	int ShowType;//[Offset: 0x94c, Size: 4]

--------------------------------
Class: STExtraLobbyWeapon.STExtraWeapon.LuaActor.Actor.Object
	delegate WeaponAnimLoadFinishEvent;//[Offset: 0x8e0, Size: 12]
	void WeaponAnimLoadFinishEvent__DelegateSignature(STExtraLobbyWeapon* Weapon);// 0x446e168
	void ReattachWeaponToSocket(SkeletalMeshComponent* AttachMesh, FName AttachSocket);// 0x376ff6c
	Transform GetWeaponAttachToBackRelativeTransformByBagLevel_Lobby(int Level, int SideType);// 0x376fe78

--------------------------------
Class: WeaponAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x334, Size: 4]
	STExtraLobbyCharacter* C_OwnerLobbyCharacter;//[Offset: 0x338, Size: 4]
	STExtraShootWeapon* C_OwnerWeapon;//[Offset: 0x33c, Size: 4]
	STExtraLobbyWeapon* C_OwnerLobbyWeapon;//[Offset: 0x340, Size: 4]
	bool ForceUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool C_Equipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	bool C_Charge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 1]
	bool C_Tactical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 1]
	byte C_WeaponState;//[Offset: 0x348, Size: 1]
	float C_ReloadAnimRate;//[Offset: 0x34c, Size: 4]
	float C_CurGasAngle;//[Offset: 0x350, Size: 4]
	bool C_CustomScopping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	bool C_WeaponState_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 1]
	bool C_State_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x356, Size: 1]
	bool C_State_Charge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x357, Size: 1]
	float C_AlphaForHolder;//[Offset: 0x358, Size: 4]
	AnimMontage* TacticalReloadMontage;//[Offset: 0x35c, Size: 4]
	AnimMontage* ChargeReloadMontage;//[Offset: 0x360, Size: 4]
	AnimMontage* BoltMontage;//[Offset: 0x364, Size: 4]
	AnimMontage* FireMontage;//[Offset: 0x368, Size: 4]
	AnimMontage* WeaponDropMontage;//[Offset: 0x36c, Size: 4]
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x370, Size: 4]
	bool ShouldUpdateReloadData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool PlayIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	bool UseAdvancedSkinCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool IsLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	AnimMontage* LoopIdleMontage;//[Offset: 0x380, Size: 4]
	float IdleAnimLoopInterval;//[Offset: 0x384, Size: 4]
	float IdleAnimWaitedTime;//[Offset: 0x388, Size: 4]
	bool IsAimingAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	FString LuaFilePath;//[Offset: 0x390, Size: 12]
	SkeletalMeshComponent* TryGetParentMeshComponent();// 0x33c3aec
	void SetHolderBack_Lobby();// 0x3381b90
	void PlayReloadWeaponAnimation();// 0x3381f2c
	void PlayPostReloadWeaponAnimation(int RemainReloadTimes);// 0x3687710
	void OnWeaponUnEquip();// 0x390a3d0
	void OnWeaponEquip();// 0x390a3bc
	void OnOwnerPlayerScopeOut(bool IsBegin);// 0x390a33c
	void OnOwnerPlayerScopeIn(bool IsBegin);// 0x390a2bc
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x390a23c
	AnimMontage* GetLastPlayReloadMontage();// 0x390a20c
	AnimMontage* GetCurrentReloadMontageCore();// 0x36c71b0
	void BpStopAllMontages();// 0x390a1f8
	void BPOnPlayerKillEvent();// 0x3381a50

--------------------------------
Class: WeaponAvatarComp_BP_C.WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: BackpackWeaponHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0x100, Size: 4]
	WeaponMeshCfg MeshPackage;//[Offset: 0x108, Size: 328]
	WeaponMeshCfg[] ExtMeshPackageList;//[Offset: 0x250, Size: 12]
	class AnimInstance* animBP;//[Offset: 0x25c, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x260, Size: 40]
	CharSpecialLevelSequenceData[] WeaponSpecialLevelSequenceList;//[Offset: 0x288, Size: 12]
	<ItemDefineID,ItemDefineID> AttachmentAvatarList;//[Offset: 0x294, Size: 60]
	ItemDefineID[] DefaultAvatarList;//[Offset: 0x2d0, Size: 12]
	ItemDefineID ParentID;//[Offset: 0x2e0, Size: 24]
	ItemDefineID[] ParentIDList;//[Offset: 0x2f8, Size: 12]
	enum OverrideSocket;//[Offset: 0x304, Size: 1]
	BattleItemAdditionalData[] WeaponAttachmentAdditionalDataList;//[Offset: 0x308, Size: 12]
	STExtraWeapon* CachedTargetWeapon;//[Offset: 0x314, Size: 4]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x318, Size: 64]
	WeaponAttachItemUnit[] CachedWeaponAttachmentListBeforeDrop;//[Offset: 0x358, Size: 12]
	WeaponKillEffectCfg KillEffect;//[Offset: 0x364, Size: 4]
	ParticleSystem* LightEffect;//[Offset: 0x368, Size: 40]
	ParticleSystem* ShootLightEffect;//[Offset: 0x390, Size: 40]
	<byte,AkAudioEvent*> HitSoundMap;//[Offset: 0x3b8, Size: 60]
	AkAudioEvent* SlashSound;//[Offset: 0x3f8, Size: 40]
	bool IsInitUIWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	<int,Transform> PendantSocketRelativeTransform;//[Offset: 0x424, Size: 60]
	<FName,ParticleAsset> ParticleAssetMap;//[Offset: 0x460, Size: 60]
	MatParamModifyCfg[] MatParamModifyCfgs;//[Offset: 0x49c, Size: 12]
	bool LowDeviceForceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	<FName,LobbyWeaponSkinExclusiveActionCfg> SkinExclusiveActions;//[Offset: 0x4ac, Size: 60]
	WeaponEffectCfgBase*[] AvatarEffects;//[Offset: 0x4e8, Size: 12]
	int CachedWeaponDurability;//[Offset: 0x4f4, Size: 4]
	int CachedUpgradeInfoID;//[Offset: 0x4f8, Size: 4]
	int CacheBulletNumSaveToWrapper;//[Offset: 0x4fc, Size: 4]
	void UpdateWeaponDataFromWeapon();// 0x338839c
	void UpdateWeaponDataFromPickUp();// 0x3381b74
	void SetMesh(FString skMesh, FString SkMeshLoad, FString stMesh, FString StMeshLoad, FString Material);// 0x33c6484
	void SetAnimationBp(FString AnimBpPath);// 0x33c63c8
	void ReturnAllBullets();// 0x446e168
	void PreLocalHandleDisuse();// 0x33c63b4
	BattleItemAdditionalData MakeWeaponDurabilityData(int Durability);// 0x33c6284
	BattleItemAdditionalData MakeUpgradeInfoAdditionalData(int UpgradeInfoID);// 0x33c6154
	BattleItemAdditionalData MakeBulletNumAdditionalData(int BulletNum);// 0x33c6024
	PickUpWrapperActor* LocalSpawnWrapperOnGround(class Object InWrapperClass, STExtraBaseCharacter* InOwningCharacter, ItemDefineID InDefineID);// 0x33c5f04
	bool LocalHandleUse(out const BattleItemUseTarget InTarget, enum InReason, WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, BattleItemHandleBase* InCharacterItemHandle, BackpackComponent* InOwningBackpackComponnent, STExtraBaseCharacter* InOwningCharacter, class STExtraWeapon InWeaponClass, bool bInResetInitBulletInBullet, out STExtraWeapon* OutTargetWeaponActor, out FName bOutSocket);// 0x33c5950
	FName LocalGetAvailableInstantLogicSocketName(WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, out bool bOutNeedPutDownOldWeapon, out bool bOutAutoUse, enum InReason);// 0x33c5598
	void LocalAutoEquipAttachments();// 0x446e168
	bool IsVirtualAvatarHandle();// 0x33c5568
	bool IsAvatarWeapon();// 0x33c5540
	void InitWeaponUpgradeInfo();// 0x33c552c
	void InitWeaponDurability(int WeaponDurability);// 0x33c54b4
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x33c53e0
	int GetWeaponUpgradeInfoID();// 0x33c53b8
	int GetWeaponDurability();// 0x33c5390
	int GetSubSlotID();// 0x33c5360
	int GetSlotID();// 0x33c5330
	void GetParentDefineIDList(out ItemDefineID[] ParentList);// 0x33c5208
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x33c519c
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x33c4fd4
	void GetDefaultAvatarList(out ItemDefineID[] DefaultAvatarList);// 0x33c4f00
	void GetDefaultAttachment(out int[] AttachmentArray, bool IsLobby);// 0x33c4ddc
	int GetCacheBulletNumSaveToWrapper(STExtraWeapon* Weapon, bool Initial);// 0x33a61b0
	class Object GetAnimationBP();// 0x33c4dac
	bool CanDisuseOldWeapon(bool bDisuseResult, enum InReason);// 0x33c4cd4
	bool BPModifyAutoUse(bool bInAutoUse, STExtraBaseCharacter* OwnerPawn);// 0x33c4bfc

--------------------------------
Class: CharSpecialLevelSequenceData
	byte LevelSequenceType;//[Offset: 0x0, Size: 1]
	LevelSequenceConfig LevelSequenceConfig;//[Offset: 0x8, Size: 192]

--------------------------------
Class: LevelSequenceConfig
	SoftClassPath SequenceActorTemplate;//[Offset: 0x0, Size: 24]
	LevelSequence* LevelSequence;//[Offset: 0x18, Size: 40]
	float LevelSequenceDuration;//[Offset: 0x40, Size: 4]
	<FString,FString> TrackBindingInfos;//[Offset: 0x44, Size: 60]
	<FString,SoftObjectPath> TrackBindingObjects;//[Offset: 0x80, Size: 60]

--------------------------------
Class: WeaponAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum socket;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WeaponKillEffectCfg
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x0, Size: 4]

--------------------------------
Class: LobbyWeaponSkinExclusiveActionCfg
	int ActionID;//[Offset: 0x0, Size: 4]
	SoftObjectPath ActionHandlePath;//[Offset: 0x8, Size: 24]

--------------------------------
Class: LobbyPlayEmoteComponent_BP_C.LobbyPlayEmoteComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 4]
	void OnEquipmentChange(bool CallFunc_OnStopEmote_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x446e168
	void OnStartLevelSequence(bool CallFunc_OnCameraStart_ReturnValue);// 0x446e168
	void GetLobbyCamera(out CameraActor* CameraActor, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, CameraActor*[] CallFunc_GetAllActorsOfClass_OutActors, GameInstance* CallFunc_GetGameInstance_ReturnValue, CameraActor* CallFunc_Array_Get_Item, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, FrontendUtils* CallFunc_GetUtils_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x446e168
	void OnStopLevelSequence(bool CallFunc_OnCameraStop_ReturnValue, CameraActor* CallFunc_GetLobbyCamera_cameraActor, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x446e168
	void ChangetoLevelSequenceCamera(PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, Actor* CallFunc_Array_Get_Item);// 0x446e168
	void OnTrackEvent(FString EventData, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_OnCameraTrackEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_LevelSequenceCameraMask_C* CallFunc_Create_ReturnValue, BP_LevelSequenceCameraMask_W_C* CallFunc_Create_ReturnValue2, bool CallFunc_IsValid_ReturnValue2);// 0x446e168
	void PlayCameraEmoteAnim(LevelSequence* CurrentCameraEmoteAnim);// 0x446e168
	void StopCameraEmoteAnim();// 0x446e168
	void ShowAvatarForEmote(bool Show, bool force);// 0x446e168
	void BindEventToCameraSequence(LevelSequencePlayer* SeqPlayer);// 0x446e168
	void ExecuteUbergraph_LobbyPlayEmoteComponent_BP(int EntryPoint, int ___int_Loop_Counter_Variable, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable, LevelSequence* K2Node_Event_CurrentCameraEmoteAnim, LevelSequenceActor* CallFunc_CreateLevelSequencePlayer_OutActor, LevelSequencePlayer* CallFunc_CreateLevelSequencePlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool K2Node_Event_show, bool K2Node_Event_force, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, int ___int_Array_Index_Variable2, Actor*[] CallFunc_GetAttachedActors_OutActors, Actor* CallFunc_Array_Get_Item, BP_PlayerLobbyPawn_C* K2Node_DynamicCast_AsBP_Player_Lobby_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraWeapon* K2Node_DynamicCast_AsSTExtra_Weapon, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ParticleSystemComponent*[] CallFunc_GetComponentsByTag_ReturnValue, LevelSequencePlayer* K2Node_Event_SeqPlayer, ParticleSystemComponent* CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3);// 0x446e168
	LevelSequencePlayer* LevelSequencePlayer;//[Offset: 0x314, Size: 4]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 4]
	UserWidget* levelSequenceMask;//[Offset: 0x31c, Size: 4]
	<int> stopEmoteArray;//[Offset: 0x320, Size: 60]

--------------------------------
Class: LobbyPlayEmoteComponent.SceneComponent.ActorComponent.Object
	BackpackEmoteHandle* curHandle;//[Offset: 0x260, Size: 4]
	STExtraLobbyCharacter* OwnerCharacter;//[Offset: 0x264, Size: 4]
	GenderMapping[] GenderMappingConfig;//[Offset: 0x268, Size: 12]
	Character* MainCharacter;//[Offset: 0x274, Size: 4]
	LevelSequencePlayer* CurLevelSequencePlayer;//[Offset: 0x284, Size: 4]
	SoftObjectPath[] CurMultiEmotePathList;//[Offset: 0x288, Size: 12]
	AnimationAsset*[] CurMultiEmoteAnimList;//[Offset: 0x294, Size: 12]
	AnimMontage* CurEmoteMontage;//[Offset: 0x2a0, Size: 4]
	int CurrentEmoteID;//[Offset: 0x2a4, Size: 4]
	int DefaultHideAvatarTickCount;//[Offset: 0x2a8, Size: 4]
	bool isPlayCameraAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	delegate OnEmoteCameraStart;//[Offset: 0x2d0, Size: 16]
	delegate OnEmoteCameraStop;//[Offset: 0x2e0, Size: 16]
	delegate OnEmoteCameraTrackEvent;//[Offset: 0x2f0, Size: 16]
	void SyncMontageInner(AnimInstance* Leader, float DeltaTime);// 0x3559620
	void SyncMontage(float DeltaTime);// 0x35595a8
	void StopMontageParticle(AnimMontage* Montage);// 0x3559530
	void StopLastEmoteParticle();// 0x355951c
	void StopCameraEmoteAnim();// 0x446e168
	void ShowAvatarForEmote(bool Show, bool force);// 0x446e168
	void PlayEmoteSound();// 0x3559508
	void PlayCameraEmoteAnim(LevelSequence* CurrentCameraEmoteAnim);// 0x446e168
	bool OnStopEmote();// 0x35594e0
	void OnPlayEmoteActionEnd();// 0x35594cc
	bool OnPlayEmote(int EmoteId, int LocalLobbyPos, FString ExtraInfo);// 0x35592dc
	void OnOneActionReady(int Index);// 0x3559264
	void OnLobbyEmoteCameraTrackEvent__DelegateSignature(FString TrackData);// 0x446e168
	void OnLobbyEmoteCameraStop__DelegateSignature();// 0x446e168
	void OnLobbyEmoteCameraStart__DelegateSignature();// 0x446e168
	bool OnCameraTrackEvent(FString TrackData);// 0x3559104
	bool OnCameraStop();// 0x35590dc
	bool OnCameraStart();// 0x35590b4
	void OnAsyncLoadSingleAnim(AnimationAsset* CurrentEmoteAnim, int Index);// 0x3558ef0
	void OnAsyncLoadMultiAnims(int Index);// 0x3558e78
	void OnAsyncLoadEmoteAction(int Index);// 0x3558e00
	bool LoopEmoteAnimFinishedFirstSection();// 0x3558dd8
	bool IsLoopMontage(AnimMontage* Montage);// 0x3558d58
	void InterruptEmoteSound();// 0x3558d44
	SoftObjectPath[] GetMultiAnimFollowerAssetRef();// 0x3558bec
	EmoteAnimCharacterConfig[] GetMultiAnimFollower();// 0x3558a94
	EmoteAnimConfig GetMultiAnimConfig();// 0x35589fc
	LevelSequence* GetMainCharacterCameraAnimAsset();// 0x3558960
	EmoteAnimCharacterConfig GetMainCharacterAssetRef();// 0x3558858
	AnimationAsset* GetMainCharacterAnimAsset();// 0x35587bc
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x355873c
	AnimMontage* GetCurrentMontage();// 0x3558714
	bool EmoteAnimFinishedSuccessfully();// 0x35586ec
	bool DoesEmoteStop();// 0x35586c4
	void ClearMultiAnimCharacters();// 0x35586b0
	bool CanRotateMainCharacter();// 0x3558688
	void BindEventToCameraSequence(LevelSequencePlayer* SeqPlayer);// 0x446e168
	bool AsyncLoadSingleAnim(BackpackEmoteHandle* Handle);// 0x3558608
	bool AsyncLoadMultiAnims();// 0x35585e0
	bool AsyncLoadEmoteAction(out FString ExtraInfo);// 0x355850c

--------------------------------
Class: GenderMapping
	FName GenderStr;//[Offset: 0x0, Size: 8]
	byte GenderType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x644, Size: 12]
	delegate OnTrackEvent;//[Offset: 0x650, Size: 12]
	Object*[] AdditionalEventReceivers;//[Offset: 0x688, Size: 12]
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x55eda5c

--------------------------------
Class: MovieSceneSequen.Object
	delegate OnPlay;//[Offset: 0x2e0, Size: 12]
	delegate OnPlayReverse;//[Offset: 0x2ec, Size: 12]
	delegate OnStop;//[Offset: 0x2f8, Size: 12]
	delegate OnPreStop;//[Offset: 0x304, Size: 12]
	bool FreezeEndFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	delegate OnPause;//[Offset: 0x314, Size: 12]
	delegate OnFinished;//[Offset: 0x320, Size: 12]
	delegate OnObjectSpawnedEvent;//[Offset: 0x32c, Size: 12]
	byte Status;//[Offset: 0x338, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 1]
	bool bPendingFirstUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x33c, Size: 4]
	float TimeCursorPosition;//[Offset: 0x340, Size: 4]
	float StartTime;//[Offset: 0x344, Size: 4]
	float EndTime;//[Offset: 0x348, Size: 4]
	int CurrentNumLoops;//[Offset: 0x34c, Size: 4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x35c, Size: 32]
	void Stop();// 0x515ff74
	void StartPlayingNextTick();// 0x515ff60
	void SetPlayRate(float PlayRate);// 0x515fee8
	void SetPlayLoopCount(int NumLoops);// 0x515fe70
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x515fdb4
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x515fc74
	void Scrub();// 0x515fda0
	void PlayReverse();// 0x515fd8c
	void PlayLooping(int NumLoops);// 0x515fd14
	void Play();// 0x515fd00
	void Pause();// 0x515fcec
	void JumpToPositionEx(float NewPlaybackPosition);// 0x515fc74
	void JumpToPosition(float NewPlaybackPosition);// 0x515fbfc
	bool IsPlaying();// 0x515fbd4
	bool IsPaused();// 0x515fbac
	void GoToEndAndStop();// 0x515fb98
	float GetPlayRate();// 0x515fb70
	float GetPlaybackStart();// 0x515fb54
	float GetPlaybackPosition();// 0x515fb2c
	float GetPlaybackEnd();// 0x515fb10
	float GetLength();// 0x515fae8
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x515f9a4
	void ChangePlaybackDirection();// 0x515f990

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0, Size: 4]
	float PlayRate;//[Offset: 0x4, Size: 4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	interface class None* BindingOverrides;//[Offset: 0x18, Size: 8]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x310, Size: 32]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x330, Size: 4]
	SoftObjectPath LevelSequence;//[Offset: 0x338, Size: 24]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x350, Size: 12]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x35c, Size: 4]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x360, Size: 4]
	bool bReduceFrequency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	int ReduceFrameCount;//[Offset: 0x368, Size: 4]
	float IgnoreFrameTolerance;//[Offset: 0x36c, Size: 4]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x374, Size: 4]
	bool bForceAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x37c, Size: 4]
	void SetSequence(LevelSequence* InSequence);// 0x55ec7fc
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x55ec6a4
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x55ec50c
	void SetAllMovieSceneSectionsToKeepState();// 0x55ec4f8
	void ResetBindings();// 0x55ec4b8
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x55ec3c0
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x55ec280
	void ReceiveInitailizePlayer();// 0x446e168
	LevelSequence* GetSequence(bool bLoad, bool bInitializePlayer);// 0x55ec1a8
	MovieSceneObjectBindingID GetPossessableByName(FString NameKeyString);// 0x55ec0d0
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x55ebf48

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x20, Size: 24]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x38, Size: 4]

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x20, Size: 12]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 24]
	Object* Object;//[Offset: 0x18, Size: 8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 4]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x204, Size: 48]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x234, Size: 4]
	void SetSettings(Object* InSettings);// 0x446e168
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x3cddad0

--------------------------------
Class: LevelSequencePlayerSnapshot
	FText MasterName;//[Offset: 0x0, Size: 12]
	float MasterTime;//[Offset: 0xc, Size: 4]
	FText CurrentShotName;//[Offset: 0x10, Size: 12]
	float CurrentShotLocalTime;//[Offset: 0x1c, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x20, Size: 4]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x24, Size: 8]
	MovieSceneSequenceID ShotID;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	float FrameRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_LevelSequenceCameraMask_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* FadeOut;//[Offset: 0x208, Size: 4]
	CanvasPanel* CanvasPanel;//[Offset: 0x20c, Size: 4]
	Image* Image;//[Offset: 0x210, Size: 4]

--------------------------------
Class: BP_LevelSequenceCameraMask_W_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* FadeOut;//[Offset: 0x208, Size: 4]
	CanvasPanel* CanvasPanel;//[Offset: 0x20c, Size: 4]
	Image* Image;//[Offset: 0x210, Size: 4]

--------------------------------
Class: LobbyWeaponAnimationComponent_C.ActorComponent.Object
	void SyncMontage(float Position, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue2, AnimMontage* CallFunc_GetCurrentActiveMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue3, float CallFunc_Montage_GetPosition_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x446e168
	void StopLobbyWeaponAnimation(bool CallFunc_IsValid_ReturnValue);// 0x446e168
	void PlayOnAction(int ActionID, bool isMVPMotion, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LobbyActionWeaponRef_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x446e168
	void PlayLobbyWeaponAnimationByID(int WeaponAnimationID, bool isMVPMotion, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_LobbyWeaponAnimation_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class LobbyWeaponAnimationActor_C K2Node_ClassDynamicCast_AsLobby_Weapon_Animation_Actor, bool K2Node_ClassDynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, LobbyWeaponAnimationActor_C* CallFunc_FinishSpawningActor_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, LobbyWeaponAnimationActor_C* CallFunc_FinishSpawningActor_ReturnValue2);// 0x446e168
	void Destroy();// 0x446e168
	void SetLobbyPlayerObj(BP_PlayerLobbyPawn_C* LobbyPlayerObj);// 0x446e168
	BP_PlayerLobbyPawn_C* LobbyPlayer;//[Offset: 0xc0, Size: 4]
	LobbyWeaponAnimationActor_C* WeaponAnimationActor;//[Offset: 0xc4, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]

--------------------------------
Class: BP_STRUCT_LobbyActionWeaponRef_type
	int ActionID_0_284E37801299E72232C748730798C614;//[Offset: 0x0, Size: 4]
	int WeaponActionID_1_2D2D7200775F04DA5CEAA9680C11A5C4;//[Offset: 0x4, Size: 4]
	int WeaponID_3_4C59DA80554AE47019513EF506BFC7B4;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BP_STRUCT_LobbyWeaponAnimation_type
	int UID_0_10B4DE80647FDFD62CA212CC08FE7DC4;//[Offset: 0x0, Size: 4]
	FString BlueprintPath_1_5BB4F6800155AFFA599CC691037A5148;//[Offset: 0x4, Size: 12]
	int DelayOutTime_2_1A47538047426C525839AEE100220975;//[Offset: 0x10, Size: 4]
	int TotalTime_3_45F4CAC00CF5269D7341686E029FD145;//[Offset: 0x14, Size: 4]

--------------------------------
Class: LobbyWeaponAnimationActor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x308, Size: 4]
	void PlayLobbyAnimation(AnimInstance* CallFunc_GetAnimInstance_ReturnValue, float CallFunc_Montage_Play_ReturnValue);// 0x446e168
	void UserConstructionScript();// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void OnAnimEnd(AnimMontage* Montage, bool bInterrupted);// 0x446e168
	void SetAnimTimeInfo(int DelayTime, int TotalTime);// 0x446e168
	void ExecuteUbergraph_LobbyWeaponAnimationActor(int EntryPoint, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimMontage* K2Node_CustomEvent_Montage, bool K2Node_CustomEvent_bInterrupted, int K2Node_Event_DelayTime, int K2Node_Event_TotalTime, float CallFunc_Multiply_IntFloat_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2);// 0x446e168
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x30c, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 4]
	AnimMontage* WeaponMontage;//[Offset: 0x314, Size: 4]
	int DelayTime;//[Offset: 0x318, Size: 4]
	int TotalTime;//[Offset: 0x31c, Size: 4]

--------------------------------
Class: CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xcd0, Size: 4]
	void PrintDefaultConfig();// 0x446e168
	void HandleCharacterHiddenChange(bool bHidden);// 0x446e168
	void HandlePlayerScopeInOrOut(bool bScopeIn);// 0x446e168
	void EnableAvatarAnimation(bool IsEnable, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue2, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance, bool K2Node_DynamicCast_bSuccess2, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base, bool K2Node_DynamicCast_bSuccess3, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base2, bool K2Node_DynamicCast_bSuccess4, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance2, bool K2Node_DynamicCast_bSuccess5);// 0x446e168
	int GetRepalceIDOnVehicle(int OriginID);// 0x446e168
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x446e168
	bool IsEnableItemDownload(int ItemID);// 0x446e168
	SoftObjectPath GetBatchDefaultBodyPath(int ___int_Variable, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, SoftObjectPath K2Node_Select_Default);// 0x446e168
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh, SkeletalMaterial[] MatArray);// 0x446e168
	bool PutOffEquimentByResID(int resID, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_HandleUnequipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasLogicEquipped_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x446e168
	bool PutOnEquipmentByResID(int resID, int CallFunc_GetBPIDByResID_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x446e168
	void IsNeedConsiderHairCut(int InSlotID, out ItemDefineID ItemDefineID, BackpackAvatarHandle* Handle, out bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x446e168
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID, int CallFunc_GetFakeAvatarHandleItem_ReturnValue);// 0x446e168
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x446e168
	bool BPClientPostProcessViewDataMiddle();// 0x446e168
	void ProcessGodzillaSuit(int CallFunc_TypeToInt_ReturnValue, int CallFunc_TypeToInt_ReturnValue2, int CallFunc_TypeToInt_ReturnValue3, bool CallFunc_ModifySyncDataByReplace_ReturnValue, int CallFunc_TypeToInt_ReturnValue4, int CallFunc_TypeToInt_ReturnValue5, int CallFunc_TypeToInt_ReturnValue6, bool CallFunc_ModifySyncDataByReplace_ReturnValue2, int CallFunc_TypeToInt_ReturnValue7, int CallFunc_TypeToInt_ReturnValue8, bool CallFunc_ModifySyncDataByReplace_ReturnValue3, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc, bool CallFunc_GetSyncDataBySlot_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, int CallFunc_TypeToInt_ReturnValue9, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc2, bool CallFunc_GetSyncDataBySlot_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, int CallFunc_TypeToInt_ReturnValue10, int CallFunc_TypeToInt_ReturnValue11, int CallFunc_TypeToInt_ReturnValue12, bool CallFunc_ModifySyncDataByHide_ReturnValue, bool CallFunc_ModifySyncDataByReplace_ReturnValue4, int CallFunc_TypeToInt_ReturnValue13, int CallFunc_TypeToInt_ReturnValue14, int CallFunc_TypeToInt_ReturnValue15, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc3, bool CallFunc_GetSyncDataBySlot_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue3, bool CallFunc_IsLobbyAvatar_ReturnValue2, bool CallFunc_IsBattleItemHandleExist_ReturnValue2);// 0x446e168
	bool IsItemHasMutilReplaceMesh(int InSlotID, out ItemDefineID InItemID, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result);// 0x446e168
	bool IsUseDefaultReplaceModel(int InSlotID, out ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle, int CallFunc_TypeToInt_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result, int CallFunc_TypeToInt_ReturnValue2, AvatarSlotDesc CallFunc_GetViewDataBySlot_OutSlotDesc, bool CallFunc_GetViewDataBySlot_ReturnValue, int CallFunc_TypeToInt_ReturnValue3, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2);// 0x446e168
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);// 0x446e168
	void CheckAvatarWhoHideWho(enum SlotType, ItemDefineID resID, out int[] HideSomeAvatar, out int[] HideBySomeAvatar, int[] OutHideSomeAvatar, int[] OutHideBySomeAvatar, int ___int_Array_Index_Variable, int CallFunc_TypeToInt_ReturnValue, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, int[] CallFunc_GetSyncDataStateFor_OutHideSlotID, int[] CallFunc_GetSyncDataStateFor_OutReplaceSlotID, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, enum CallFunc_IntToType_ReturnValue, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID, bool CallFunc_GetSyncDataItemID_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Conv_IntToBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item2, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID2, bool CallFunc_GetSyncDataItemID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x446e168
	void PutOnCustomEquipmentByID(int resID, int ColorID, int PatternID, out bool Result, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x446e168
	void SetEquipmentPattern(enum SlotType, Texture* MaskGrayTexture, SlotToMatPattern K2Node_MakeStruct_SlotToMatPattern, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x446e168
	void SetEquipmentColor(enum SlotType, LinearColor MaskColor1, LinearColor MaskColor2, LinearColor MaskColor3, Texture* MaskGrayTextrue, LinearColor[] K2Node_MakeArray_Array, SlotToMatColor K2Node_MakeStruct_SlotToMatColor, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x446e168
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x446e168
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x446e168
	int GetEquipmentSkinItemID(int InItemID, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, BackpackBlueprintUtils_BP_C* K2Node_DynamicCast_AsBackpack_Blueprint_Utils_BP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetEquipmentSkinIDByAvatar_SkinItemID);// 0x446e168
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x446e168
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID, bool CallFunc_IsDedicatedServer_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_DisuseItem_ReturnValue);// 0x446e168
	bool PutOnDefaultEquipment(BackpackAvatarHandle* ItemHandle, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue, bool CallFunc_HandleEquipItem_ReturnValue);// 0x446e168
	bool InitBodyMeshByHead(out ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle, int[] TempBodyResIDList, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_AvatarDefaultConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, FString CallFunc_Split_LeftS3, FString CallFunc_Split_RightS3, bool CallFunc_Split_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue5, int CallFunc_Conv_StringToInt_ReturnValue6, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x446e168
	void ReceiveBeginPlay();// 0x446e168
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x446e168
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x446e168
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x446e168
	void ClearEventFromOnAvatarEquippedEvent();// 0x446e168
	void OnPlayerScopeIn(bool bIsBegin);// 0x446e168
	void OnPlayerScopeOut(bool bIsBegin);// 0x446e168
	void OnCharacterHiddenStateChange(bool bIsHidden);// 0x446e168
	void ExecuteUbergraph_CharacterAvatarComp2_BP(int EntryPoint, bool K2Node_CustomEvent_bIsHidden, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, BattleItemUseTarget K2Node_Event_Target, BackpackAvatarHandle* K2Node_Event_InAvatarHandle, enum K2Node_Event_Reason, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess2, bool K2Node_CustomEvent_bIsBegin2, bool K2Node_CustomEvent_bIsBegin);// 0x446e168
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0xcd4, Size: 4]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0xcd8, Size: 4]
	int[] HoodClothSubTypeMap;//[Offset: 0xcdc, Size: 12]
	enum PreEquipClothReason;//[Offset: 0xce8, Size: 1]
	SkeletalMesh* MaleBatchBodySoftPath;//[Offset: 0xcf0, Size: 40]
	SkeletalMesh* FemaleBatchBodySoftPath;//[Offset: 0xd18, Size: 40]
	bool bForbidBindAvatarEquippedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 1]
	int[] NeedModifyVehicleID;//[Offset: 0xd44, Size: 12]
	<enum,int> SlotToFakeHandleMap;//[Offset: 0xd50, Size: 60]

--------------------------------
Class: STClothAnimInstance.AnimInstance.Object
	enum AnimInstanceType;//[Offset: 0x2ef, Size: 1]
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2f0, Size: 4]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool C_IsSimulatCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	float C_BlendFactorInLobby;//[Offset: 0x2f8, Size: 4]
	float C_BlendFactorInBattle;//[Offset: 0x2fc, Size: 4]
	float C_MoveThreshold;//[Offset: 0x300, Size: 4]
	float C_BlendScaleThreshold;//[Offset: 0x304, Size: 4]
	float C_BlendScale;//[Offset: 0x308, Size: 4]
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x310, Size: 4]
	Vector LastLocation;//[Offset: 0x314, Size: 12]
	SkeletalMeshComponent* TryGetParentMeshComponent();// 0x36c71b0
	bool isCothAnimEnable();// 0x36c7188
	void EnableClothAnim();// 0x36c7174
	void DisableClothAnim();// 0x36c7160

--------------------------------
Class: SkirtAnimInstanceBase.AvatarDynamicAnimInstance.AnimInstance.Object
	byte CurrentPoseType;//[Offset: 0x300, Size: 1]
	bool IsOnMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	bool IsInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]
	Vector PawnCurVelocity;//[Offset: 0x304, Size: 12]
	CharacterAvatarComponent2* AvatarComp;//[Offset: 0x310, Size: 4]
	int gender;//[Offset: 0x314, Size: 4]
	bool IsBackpackEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool IsLobbyPawnRotating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	bool IsWindEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 1]
	bool IsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 1]
	bool IsUsingSpecialIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool AllowSKMeshCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	bool bParachuteWindFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 1]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x320, Size: 4]
	STExtraLobbyCharacter* OwnerLobbyCharacter;//[Offset: 0x324, Size: 4]
	SkeletalMeshComponent* OwnerReAttachMesh;//[Offset: 0x338, Size: 4]
	bool bTriggerIKWhenHoldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	enum[] TriggerIKStateList;//[Offset: 0x340, Size: 12]
	enum[] ForceIgnoreBoneRetargetStateList;//[Offset: 0x34c, Size: 12]
	bool bAnimNotifyForceIKState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool AnyMontageIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	bool bForceIgnoreBoneRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a, Size: 1]
	bool bIsEquippedAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35b, Size: 1]
	bool bIsInIKState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	void SetIsInIKState(const bool InIsInIKState);// 0x33476d8
	void SetForceIgnoreBoneRetarget(bool Ignore);// 0x366433c
	void RefreshIKVariableState();// 0x3381f2c
	void RefreshForceIgnoreBoneRetarget();// 0x3381b74
	void OnStateInterrupted(int StateID, int InterruptedBy);// 0x3664280
	void OnSimulateCharStateChanged(const uint64 InCurrentStates, const uint64 InPrevStates);// 0x36641a8
	void OnOwnerLobbyCharWeaponVisibilityChange();// 0x3664194
	void OnOwnerLobbyCharChangeWeapon();// 0x3664194
	void OnOwnerCharChangeWeapon(byte TargetChangeSlot);// 0x366411c
	bool IsEnableCustomIK();// 0x3388110
	bool isCothAnimEnable();// 0x36640f4
	bool IsAnyMontagePlayingOnOwner();// 0x36640cc
	void HandleStateChanged(enum EnteredState);// 0x3664054
	void HandleCorectSkMeshAnim(bool bOpenCorrect);// 0x3663fd4
	void EnableClothAnim();// 0x3663fc0
	void DisableClothAnim();// 0x3663fac
	void AnimNotifyForceIKState(const bool InIsForce);// 0x3663f24

--------------------------------
Class: AvatarDynamicAnimInstance.AnimInstance.Object
	enum InGameSimulationSpace;//[Offset: 0x2ef, Size: 1]
	enum LobbySimulationSpace;//[Offset: 0x2f0, Size: 1]
	float AnimDynAlpha;//[Offset: 0x2f4, Size: 4]
	enum CurrentSimulateSpace;//[Offset: 0x2f8, Size: 1]
	SkeletalMeshComponent* OwnerCharacterMesh;//[Offset: 0x2fc, Size: 4]

--------------------------------
Class: BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	bool IsSwimConfig(bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x446e168
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x446e168
	void GetWrapperClass(out class PickUpWrapperActor WrapperClass, ItemDefineID CallFunc_GetDefineID_ReturnValue, class Object CallFunc_GetWrapperActorClass_ReturnValue, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_ClassDynamicCast_bSuccess);// 0x446e168
	BattleItemData ExtractItemData(<int,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, ItemDefineID CallFunc_GetDefineID_ReturnValue, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x446e168
	void LocalHandleDisuse(int CallFunc_GetAssociationTypeIDFromAvatarSlotType_ReturnValue);// 0x446e168
	World* GetWorldInternal(World* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x446e168
	void SpawnWrapperOnGround(class PickUpWrapperActor WrapperClass, bool bUseRandomLoc, GameModeBase* CallFunc_GetGameMode_ReturnValue, BattleRoyaleGameModeBase* K2Node_DynamicCast_AsBattle_Royale_Game_Mode_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValidClass_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue2, BattleRoyaleGameModeBase* K2Node_DynamicCast_AsBattle_Royale_Game_Mode_Base2, bool K2Node_DynamicCast_bSuccess2, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, PickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Vector CallFunc_GetRandomPutDownLocation_ReturnValue, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);// 0x446e168
	bool HandleDisuse(enum Reason, bool CallFunc_HandleDisuse_ReturnValue);// 0x446e168
	bool HandleDrop(int InCount, enum Reason, class PickUpWrapperActor CallFunc_GetWrapperClass_wrapperClass, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);// 0x446e168
	bool HandlePickup(out interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason, bool CallFunc_HandlePickup_ReturnValue, BattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, BackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_GetTransform_ReturnValue, Object* CallFunc_GetOwningObject_ReturnValue, Controller* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);// 0x446e168
	bool HandleUse(BattleItemUseTarget Target, enum Reason, bool CallFunc_HandleUse_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_GetAssociationTypeIDFromAvatarSlotType_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, ItemDefineID CallFunc_GetDefineID_ReturnValue2, ItemAssociation K2Node_MakeStruct_ItemAssociation, ItemDefineID CallFunc_GetDefineID_ReturnValue3, bool CallFunc_IsValid_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue4, ItemAssociation K2Node_MakeStruct_ItemAssociation2);// 0x446e168
	STExtraPlayerController* OwningPlayerController;//[Offset: 0x968, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0x96c, Size: 4]
	BackpackComponent* OwningBackpackComponent;//[Offset: 0x970, Size: 4]
	Transform SourceWrapperTrans;//[Offset: 0x980, Size: 48]
	Transform WrapperPutdownTrans;//[Offset: 0x9b0, Size: 48]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0x9e0, Size: 4]
	BattleItemHandleBase* CharacterItemHandle;//[Offset: 0x9e4, Size: 4]
	byte SlotNameConfig;//[Offset: 0x9e8, Size: 1]
	byte ForceGender;//[Offset: 0x9e9, Size: 1]

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef1, Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef2, Size: 1]
	int DefaultRevivalCount;//[Offset: 0xef4, Size: 4]
	bool ReducePlayersNumAfterDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 1]
	int DefaultBuyLifeCount;//[Offset: 0xefc, Size: 4]
	bool EnableTeamMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 1]
	GameModeParms GameModeParms;//[Offset: 0xf04, Size: 216]
	STExtraPlayerStart*[] STEPlayerStartsList;//[Offset: 0xfdc, Size: 12]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0xfe8, Size: 60]
	enum GameModeType;//[Offset: 0x1024, Size: 1]
	enum GameModeSubType;//[Offset: 0x1025, Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0x1028, Size: 4]
	GameStatisComponent* GameStatisComp;//[Offset: 0x102c, Size: 4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0x1030, Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0x1034, Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0x103c, Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0x1040, Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0x1044, Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1048, Size: 1]
	FString SubAISuffix;//[Offset: 0x104c, Size: 12]
	int MlAIType;//[Offset: 0x1058, Size: 4]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0x105c, Size: 4]
	class AIController* AIControllerClass;//[Offset: 0x1060, Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0x1064, Size: 4]
	byte WorldLoadedType;//[Offset: 0x1068, Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0x106c, Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0x1070, Size: 4]
	int PlayerNumPerTeam;//[Offset: 0x1074, Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1079, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x107c, Size: 12]
	float CircleSpeedMultiplicator;//[Offset: 0x1088, Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108d, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108e, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108f, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1090, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1091, Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1092, Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1093, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1094, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1095, Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1096, Size: 1]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1097, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1098, Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0x109c, Size: 12]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0x10a8, Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ac, Size: 1]
	bool bEnableArmorEquipmentToBeAutoDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ad, Size: 1]
	FString GameModeConfigPath;//[Offset: 0x10b0, Size: 12]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bc, Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bd, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10be, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bf, Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c1, Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0x10c4, Size: 80]
	Vector BornLocation;//[Offset: 0x1114, Size: 12]
	Vector AIBornLocation;//[Offset: 0x1120, Size: 12]
	float BornRadius;//[Offset: 0x112c, Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0x1130, Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0x1131, Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0x1134, Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0x1138, Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x113c, Size: 4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1140, Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0x1158, Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0x115c, Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1160, Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0x1164, Size: 4]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1168, Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1169, Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0x116c, Size: 4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0x1170, Size: 4]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0x1174, Size: 4]
	float OverrideBackpackCapacity;//[Offset: 0x1178, Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117c, Size: 1]
	FString LuaModPath;//[Offset: 0x1180, Size: 12]
	FString LuaSubMod;//[Offset: 0x118c, Size: 12]
	FString[] CustomWidgets;//[Offset: 0x1198, Size: 12]
	FString CustomUIName;//[Offset: 0x11a4, Size: 12]
	GameModeState* CurrentState;//[Offset: 0x11b0, Size: 4]
	GameModeState*[] AllGameModeStates;//[Offset: 0x11b4, Size: 12]
	GameModeState* GameModeStateActive;//[Offset: 0x11c0, Size: 4]
	GameModeState* GameModeStateReady;//[Offset: 0x11c4, Size: 4]
	GameModeState* GameModeStateFighting;//[Offset: 0x11c8, Size: 4]
	GameModeState* GameModeStateFinished;//[Offset: 0x11cc, Size: 4]
	FName CurGameModeState;//[Offset: 0x11d0, Size: 8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e4, Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x11e8, Size: 4]
	EventReportComponent* EventReportComponent;//[Offset: 0x11ec, Size: 4]
	Actor* PlanePawn;//[Offset: 0x11f0, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f4, Size: 1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0x11f8, Size: 12]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0x1204, Size: 4]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0x1208, Size: 4]
	float OutBoundDamage;//[Offset: 0x120c, Size: 4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0x1290, Size: 4]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0x1294, Size: 4]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0x1298, Size: 60]
	PlaneComponent* PlaneComp;//[Offset: 0x12d4, Size: 4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x12d8, Size: 4]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0x12dc, Size: 4]
	ShowVehicleComponent* ShowVehicle;//[Offset: 0x12e0, Size: 4]
	delegate OnVehicleDamageInfo;//[Offset: 0x12e4, Size: 12]
	delegate OnSpawnAISuccessDelegate;//[Offset: 0x1310, Size: 12]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x1384, Size: 12]
	int MatchGoal;//[Offset: 0x13d4, Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d8, Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x13f0, Size: 56]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0x1428, Size: 12]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434, Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x1438, Size: 12]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x1444, Size: 4]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x1448, Size: 4]
	FName FeatureDefaultPawnName;//[Offset: 0x1450, Size: 8]
	FName FeaturePlayerControllerName;//[Offset: 0x1458, Size: 8]
	FName FeatureWeaponName;//[Offset: 0x1460, Size: 8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1468, Size: 1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1469, Size: 1]
	int VehicleExplosionLifeSpan;//[Offset: 0x146c, Size: 4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1470, Size: 1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1471, Size: 1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1472, Size: 1]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1473, Size: 1]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1474, Size: 1]
	bool bEnableDSAITickRateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1475, Size: 1]
	DSTickRateOptimize DSTickRateOptimizeConfig;//[Offset: 0x1478, Size: 16]
	float DelaySpawnVehicleTime;//[Offset: 0x1488, Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0x148c, Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x1490, Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1494, Size: 1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0x1498, Size: 60]
	int MaxVehiclesInReady;//[Offset: 0x14d4, Size: 4]
	int MaxVehiclesPerGroupInReady;//[Offset: 0x14d8, Size: 4]
	int MaxWingmanInReady;//[Offset: 0x14dc, Size: 4]
	int MaxWingmanPerGroupInReady;//[Offset: 0x14e0, Size: 4]
	bool EnableSuperCarPreTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e4, Size: 1]
	int SuperCarNum;//[Offset: 0x14e8, Size: 4]
	int MaxGroups;//[Offset: 0x14ec, Size: 4]
	int MaxPlayersPerGroup;//[Offset: 0x14f0, Size: 4]
	<int,GroupPlayers> PlayersInGroup;//[Offset: 0x14f4, Size: 60]
	PVSNetRelevantHelper* PVSNetRelevantHelper;//[Offset: 0x16a4, Size: 4]
	bool bOpenPVSNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a8, Size: 1]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a9, Size: 1]
	bool bMLAIAsHuman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16aa, Size: 1]
	STExtraPlayerController*[] WaitAddWeaponPlayerList;//[Offset: 0x16ac, Size: 12]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x16b8, Size: 12]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c4, Size: 1]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0x16c8, Size: 60]
	bool bNeedBroadcastFatalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1704, Size: 1]
	bool bNeedBroadcastLastBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1705, Size: 1]
	<int,AIControllerList> AIDeathResIDToControllerList;//[Offset: 0x1708, Size: 60]
	AIPawnPoolItem[] AILivingPawnForPool;//[Offset: 0x1744, Size: 12]
	bool bEnablePacketSimulationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1750, Size: 1]
	int MinPacketSimulationLag;//[Offset: 0x1754, Size: 4]
	float CaculateConnectionsAvgLagTimer;//[Offset: 0x1758, Size: 4]
	int ConnectionsAvgLag;//[Offset: 0x175c, Size: 4]
	float CaculateConnectionsAvgLagTime;//[Offset: 0x1760, Size: 4]
	FString[] ReasonsToSend;//[Offset: 0x1764, Size: 12]
	bool bAIDropBulletInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1770, Size: 1]
	bool bDropAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1771, Size: 1]
	bool bOnlyDropMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1772, Size: 1]
	float DistanceCullFactor;//[Offset: 0x1774, Size: 4]
	float CheckDestoryActorTime;//[Offset: 0x1778, Size: 4]
	bool bReCalcCharacterNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177c, Size: 1]
	bool bInvincibleIgnorePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177d, Size: 1]
	float RemainReadyStateTimeForceSpawnMLAI;//[Offset: 0x1780, Size: 4]
	Vector2D TimerSpawnMLAITime;//[Offset: 0x1784, Size: 8]
	bool IsRegisterDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178c, Size: 1]
	bool bMlAITraining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178d, Size: 1]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x33dc730
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x33dc5d0
	void StopAllFakePlayerAIBehaviorTree();// 0x33dc5bc
	void StatisticsVehicleDamage(float Damage, int DamageTypeId, Actor* DamageCauser, Controller* InstigatorController, Controller* VictimController, bool bIsFatalHealthCost, Actor* VictimVehicle);// 0x33dc394
	bool SpawnTeammateAIWithPlayerKey(uint32 PlayerKey);// 0x33dc314
	bool SpawnMLAIWithPlayerKeyRet(uint32 PlayerKey, int TeamID, uint32 Level, bool bDelivery, bool bTeammate);// 0x33dc16c
	void SpawnAllAI();// 0x33dc158
	bool SpawnAIAtPosiotn(int TeamID, float PosiX, float PosiY, float PosiZ, int WeaponID);// 0x33dbfc0
	void SpawnAI(int Num);// 0x33dbf48
	bool ShouldDisableRoomCircleConfig();// 0x33dbf18
	void SetStateLeftTime(int leftTime);// 0x33dbe98
	void SetGameEndReportData();// 0x33dbe7c
	void SetCharacterCustomEnd(UAECharacter* Character);// 0x33dbe04
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x33dbd48
	void RevisePlayerTombBoxDropWrapperList(STExtraBaseCharacter* Character, out PickUpItemData[] OutItemDataList, STExtraBaseCharacter* DamageCauser, int InstanceIDCnt);// 0x33dbbc0
	void RestartPlayer(Controller* NewPlayer);// 0x33dbb40
	void ResetGameMode();// 0x33dbb24
	void RemoveUnuseComponent(SubSystemConfig InSubSystemConfig);// 0x33dba70
	void RegisterComponentInternal(enum InSubSystemId, ActorComponent* NewComp, bool bAddToRoot);// 0x33db960
	void RefreshNetworkObject(Actor* Actor, Vector Loction);// 0x33db89c
	void OnVehicleKill(int DamageTypeId, Actor* DamageCauser);// 0x33db7d8
	void OnReportNetworkData();// 0x33db7bc
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x336b494
	void OnGameModeStateChange();// 0x33db7a0
	void OnGameEnterReady();// 0x33db784
	void OnGameEnterFinish();// 0x33db768
	void OnGameEnterFight();// 0x33db74c
	void OnGameEnterActive();// 0x33db730
	void OnAirDropBoxDestroy(int boxId);// 0x33db6b8
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x33db594
	bool IsVisualFieldFeatureSupported();// 0x33db56c
	bool IsSubAIMode();// 0x33db544
	bool IsRevivalGameMode(STExtraPlayerState* PlayerState);// 0x33db4bc
	bool IsRestartPlayerUsePawnRotation();// 0x33db48c
	bool IsPlayerCanSelfRevival(STExtraPlayerState* PlayerState);// 0x33db404
	bool IsFeatureSupported(enum SubSystemType);// 0x33db384
	bool IsCanJump(PlayerController* PC);// 0x33db2fc
	void InitlializeRespawnItemConfig();// 0x33db2e8
	void InitialGameModeState();// 0x33db2d4
	void HandleGameEnd();// 0x33db2b8
	void GotoReadyState();// 0x33db2a4
	void GotoFinishedState();// 0x33db288
	void GotoFightingState();// 0x33db26c
	void GotoActiveState();// 0x33db258
	void GMGameModeGotoFightingState();// 0x33db244
	void GetPlayerRealtimeVerifyInfo(uint32 PlayerKey, out RealtimeVerifyInfo RealtimeVerifyInfo);// 0x33db0fc
	int GetMonsterCount();// 0x33db0d4
	class Object GetGlobalOverrideClass(class Object InComponentClass);// 0x33db054
	STExtraBaseCharacter* GetFirstAlivePlayerCharacter();// 0x33db024
	byte GetDefaultAIType(uint32 PlayerKey);// 0x33dafa4
	int GetCurWeatherPhaseIndex();// 0x33daf74
	GameModeState* GetCurrentState();// 0x33daf4c
	GameModeParam GetCurPlaneRouteData();// 0x33dae14
	FName GetCurGameModeState();// 0x33dade8
	GameModeState*[] GetAllGameModeStates();// 0x33dad28
	AIWorldVolume* GetAIWorldVolume();// 0x33dad00
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x33dacd8
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x33dac0c
	void GenerateRespawnItemsForAllPlayers();// 0x33dabf8
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x33dab6c
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x33daaec
	void ExecuteCVarConfig();// 0x33daad8
	void DropItemRegisterAIPickupPoint(Actor* PickUpActor);// 0x33daa60
	void CreatePVSNetRelevant();// 0x33daa4c
	void CreateGameModeComponents();// 0x33daa30
	STExtraBaseCharacter* CreateBaseCharacter(FakePlayerAIController* InAIController);// 0x33da9a8
	ActorComponent* CreateAndRegisterComponent(SubSystemConfig InSubSystemConfig);// 0x33da8ec
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x33da864
	bool CheckNoHumanExist();// 0x33da834
	bool CheckMatchGoalAchieved();// 0x33da804
	void CheckInitGameTriggerEnv();// 0x33da7f0
	bool CheckGameEnd();// 0x33da7c0
	void ChangeStateGM(FName TargetGameModeState);// 0x33da748
	bool CanFinishWhenAllNearDeathInSelfRevival(STExtraPlayerState* PlayerState);// 0x33da6c0
	bool CanEnterObserve(STExtraPlayerState* PlayerState);// 0x33da638
	bool CanCharacterCircleTakePain(STExtraCharacter* Character);// 0x33da5b0
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x33da4ec
	void CaculateConnectionsAvgLag(float DeltaTime);// 0x33da474
	void BPSpawnAI(int Num);// 0x33da3fc

--------------------------------
Class: GameModeParms
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0, Size: 24]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x18, Size: 24]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x30, Size: 24]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x48, Size: 24]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0x60, Size: 24]
	SubSystemConfig SSC_VisualField;//[Offset: 0x78, Size: 24]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x90, Size: 24]
	SubSystemConfig SSC_SuperCold;//[Offset: 0xa8, Size: 24]
	SubSystemConfig SSC_ARWeaponManager;//[Offset: 0xc0, Size: 24]

--------------------------------
Class: SubSystemConfig
	enum SubSystemId;//[Offset: 0x0, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum ConstructType;//[Offset: 0x2, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x4, Size: 4]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x8, Size: 8]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x10, Size: 8]

--------------------------------
Class: DynamicCompConfig
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x32c, Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	int PlayerBornPointID;//[Offset: 0x334, Size: 4]
	bool CheckEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	int CampID;//[Offset: 0x33c, Size: 4]
	int TeamID;//[Offset: 0x340, Size: 4]
	bool IsEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool CreativeModeCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	void SetMarkOccupied();// 0x37d3cd4
	void ReSetMarkOccupied();// 0x37d3cc0
	bool IsMarkOccupied();// 0x37d3c98

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x320, Size: 8]

--------------------------------
Class: BornPlayerStartData
	int BornPointID;//[Offset: 0x0, Size: 4]
	STExtraPlayerStart*[] PlayerStarts;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameStatisComponent.ActorComponent.Object
	bool IsIngameLikeManagerRevenge(uint64 FriendUID, uint64 OpponentUID);// 0x34f8ba4
	void InitTLogDamageToPlayerCount();// 0x34f8b90
	void InitPlayerHatredStatis();// 0x33a7180
	void InitIngameTeammateLabelDamageCheck(float DamgeTriggerMin, float DamgeTriggerMax);// 0x34f8ad4
	void InitCarryBackDamageStatis();// 0x34f8ac0
	void InitAchievementDamageCount();// 0x34f8aac
	int GetTLogDamageToPlayerCount(uint64 UId);// 0x34f8a28
	float GetDamageTakenWhenCarrying(uint64 UId);// 0x34f89a4
	float GetDamageTakenWhenBeingCarried(uint64 UId);// 0x34f8920
	float GetDamageTakenAchievement(uint64 UId);// 0x34f889c
	void ClearDamageTakenWhenCarrying(uint64 UId);// 0x34f8820
	void ClearDamageTakenWhenBeingCarried(uint64 UId);// 0x34f87a4

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x20, Size: 4]
	FString TablePath;//[Offset: 0x24, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x30, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x3c, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x48, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] UAVAirDropBoxGroupConfigs;//[Offset: 0x54, Size: 12]
	AirDropBoxGenerateWrapperItemData[] GetUAVAirDropBoxGenerateDataList(int GroupIndex);// 0x3547b28
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x3547948
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x3547768
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x35476a8
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x35475e8

--------------------------------
Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0, Size: 12]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0, Size: 4]
	FString CategoryFilter;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0, Size: 4]
	float Radius1;//[Offset: 0x4, Size: 4]
	float Radius3;//[Offset: 0x8, Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float Radius2;//[Offset: 0x10, Size: 4]
	Vector2D[] PolygonPoints;//[Offset: 0x14, Size: 12]
	float BlueCircleRadius;//[Offset: 0x20, Size: 4]
	Vector MapCenter;//[Offset: 0x24, Size: 12]
	float PlaneSpeed;//[Offset: 0x30, Size: 4]
	float PlaneHeight;//[Offset: 0x34, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x38, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x3c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x40, Size: 4]
	bool bCrossCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float CrossCenterRadius;//[Offset: 0x48, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x338, Size: 12]
	FString HousePathFilePath;//[Offset: 0x344, Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	FString LogicAreaFilePath;//[Offset: 0x354, Size: 12]
	bool bTestOccupiedOcclusionPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x39c, Size: 60]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x414, Size: 4]
	void RemoveDamageableActor(DamageableActor* DamageableActor);// 0x3354e40
	void BreakWall(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x3354d7c
	void BreakHouse(Vector LogicAreaLoc);// 0x3354d0c
	void AddDamageableActor(DamageableActor* DamageableActor);// 0x3354c94

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x330, Size: 4]

--------------------------------
Class: DamageableActor.UAERegionActor.LuaActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x3464260
	int GetVehicleDamagedSpeed();// 0x446e168
	int GetVehicleDamagedCoefficient();// 0x446e168
	<enum,float> GetTargetDamageRateMap();// 0x34640e0
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3463f5c
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x3463ed4
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x3463d3c
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x3463c90
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x3463c08
	enum[] CPP_GetDamageableGameObjectType();// 0x3463b40
	bool CPP_GetCanBePicked();// 0x3463b10
	FName CPP_GetBulletBlockComponentTag();// 0x3463ac8
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x3463a1c
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x3463950
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x346385c
	void BroadcastDamageState(int DState);// 0x34637a8
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x446e168
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x446e168
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x446e168
	float BP_GetMaxHP();// 0x446e168
	Vector BP_GetHurtApperanceOffset();// 0x446e168
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x446e168
	float BP_GetDamageRateByTarget(Actor* Target);// 0x446e168
	enum[] BP_GetDamageableGameObjectType();// 0x446e168
	float BP_GetCurrentHP();// 0x446e168
	bool BP_GetCanBePicked();// 0x446e168
	FName BP_GetBulletBlockComponentTag();// 0x446e168
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x446e168
	void BP_DamageStateChange(int DState);// 0x446e168
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x446e168
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x446e168

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x20, Size: 12]
	GameModeParam[] GameModeParams;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0xbc, Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0xc0, Size: 12]
	<int,SpawnTableData> PawnTableData;//[Offset: 0xcc, Size: 60]
	void InitialItemTable();// 0x3578c50

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0, Size: 4]
	int PawnID;//[Offset: 0x4, Size: 4]
	int PawnPercent;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpawnTableData
	int PawnID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0xc4, Size: 60]
	<enum,SoundConfig> MlAISoundConfig;//[Offset: 0x100, Size: 60]
	enum[] HearSoundCharacterTypes;//[Offset: 0x13c, Size: 12]
	FName SoundTypeKey;//[Offset: 0x148, Size: 8]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x150, Size: 8]
	void SetEnableMlAIPlayerHearSound(bool IsEnable);// 0x3354900
	void ProduceSoundInPos(enum soundType, out const Vector pos, Actor* SourceActor);// 0x33547f0
	void OnProjectileExplode(Actor* Projectile, Actor* Instigator);// 0x3354734

--------------------------------
Class: SoundConfig
	float TransDist;//[Offset: 0x0, Size: 4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x363e900

--------------------------------
Class: StatueBaseParam
	FString MatPath;//[Offset: 0x0, Size: 12]
	FString TeamFlag;//[Offset: 0xc, Size: 12]
	FString TeamName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: GameModeState.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	float StateTime;//[Offset: 0x80, Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x84, Size: 4]
	GameStateBase* OwningGameState;//[Offset: 0x88, Size: 4]
	void SetLeftTime(int InLeftTime);// 0x34ee5bc
	void ReceiveGotoNextState();// 0x446e168
	void ReceiveEnter();// 0x446e168
	int64 GetLeftTime();// 0x34ee594
	void DSExitGame(enum Reason);// 0x34ee51c

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x1790, Size: 12]
	delegate OnGameModeExitFlying;//[Offset: 0x179c, Size: 12]
	FString LogicAreaDataPath;//[Offset: 0x17a8, Size: 12]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c0, Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17cc, Size: 1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17cd, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ce, Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x17d0, Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d4, Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x17d8, Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x17dc, Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x17e0, Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x17e4, Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e8, Size: 1]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x1800, Size: 4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1804, Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x1808, Size: 12]
	float GameModeStateReadyEnterTime;//[Offset: 0x1820, Size: 4]

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	bool bUseTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString AIEquipmentTableName;//[Offset: 0x24, Size: 12]
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x30, Size: 12]
	bool bUseSpecificEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int SpecificEquipId;//[Offset: 0x40, Size: 4]
	float RandomStartJumpTime;//[Offset: 0x44, Size: 4]
	float RandomEndJumpTime;//[Offset: 0x48, Size: 4]
	float JumpRadius;//[Offset: 0x4c, Size: 4]
	float JumpHeight;//[Offset: 0x50, Size: 4]
	float RandomAccelerateStart;//[Offset: 0x54, Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x58, Size: 4]
	float OpenParachuteHeight;//[Offset: 0x5c, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x60, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x64, Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x68, Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x6c, Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x70, Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x74, Size: 4]
	float StopdeliverTime;//[Offset: 0x78, Size: 4]
	float NoCirlceRadius;//[Offset: 0x7c, Size: 4]
	float TraceHeight;//[Offset: 0x80, Size: 4]
	float RangeMin;//[Offset: 0x84, Size: 4]
	float RangeMax;//[Offset: 0x88, Size: 4]
	float OriginCheckSquare;//[Offset: 0x8c, Size: 4]
	float DestCheckSquare;//[Offset: 0x90, Size: 4]
	int HouseCheckTimes;//[Offset: 0x94, Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x98, Size: 8]
	float FlyToCircleRadius;//[Offset: 0xa0, Size: 4]
	float FlyToCircleOutRadius;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0xbc, Size: 4]
	float AvoidanceWeight;//[Offset: 0xc0, Size: 4]
	float CohesionWeight;//[Offset: 0xc4, Size: 4]
	float AlignmentWeight;//[Offset: 0xc8, Size: 4]
	float ArriveWeight;//[Offset: 0xcc, Size: 4]
	float PushedWeight;//[Offset: 0xd0, Size: 4]
	float SeparationWeight;//[Offset: 0xd4, Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0xdc, Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0xe0, Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0xe4, Size: 4]
	<Actor*,int> actor2AgentIndex;//[Offset: 0x4fc, Size: 60]
	void SetQueryInterfaceBlueprint(AIWorldVolume* Query);// 0x34526a0
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x3452628
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x3452518
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float SegmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x34522b0

--------------------------------
Class: EventReportComponent.ActorComponent.Object
	<byte,bool> EnabledCollectedEventDataEventIds;//[Offset: 0xbc, Size: 60]
	UAEGameMode* GameMode;//[Offset: 0xf8, Size: 4]
	<int,CollectedEvent_TabRes> CollectedEventTableMap;//[Offset: 0xfc, Size: 60]

--------------------------------
Class: CollectedEvent_TabRes
	int EventId;//[Offset: 0x0, Size: 4]
	bool bWeSeeNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0xbc, Size: 12]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	void ResetVisibleLevels();// 0x393134c
	void OutSetWorldAlwaysVisible(int SetLoadType);// 0x39312d4
	void OutSetLevelVisibleInfo(Vector[] Center, float[] VisibleRadius);// 0x3931060

--------------------------------
Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig[] AnimalGroupRespawnConfig;//[Offset: 0xbc, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0x140, Size: 8]

--------------------------------
Class: AnimalGroupRespawnConfig
	enum AnimalType;//[Offset: 0x0, Size: 1]
	AnimalGroupRespawnNumProbability[] AnimalGroupRespawnNumProbability;//[Offset: 0x4, Size: 12]
	float NoBlueCircleRadius;//[Offset: 0x10, Size: 4]
	float CheckPlayerRadius;//[Offset: 0x14, Size: 4]
	float EndRespawnTime;//[Offset: 0x18, Size: 4]
	int TryFindSpawnLocNum;//[Offset: 0x1c, Size: 4]
	FString[] ValidTraceActorIncludeName;//[Offset: 0x20, Size: 12]
	Vector AnimalGenerateOffset;//[Offset: 0x2c, Size: 12]
	class STAnimalCharacter* AnimalCharacterClass;//[Offset: 0x38, Size: 40]

--------------------------------
Class: AnimalGroupRespawnNumProbability
	uint32 AnimalNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalCharacter.STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	AnimalStateMutual[] AnimalStateMutuals;//[Offset: 0xd34, Size: 12]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xd44, Size: 4]
	InterpMovementComponent* InterpMovement;//[Offset: 0xd48, Size: 4]
	WidgetComponent* AnimalInfoWidget;//[Offset: 0xd4c, Size: 4]
	Vector RelativeLocation;//[Offset: 0xd50, Size: 12]
	class UserWidget* WidgetClass;//[Offset: 0xd5c, Size: 4]
	bool bUseMediumRegionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	AnimalAnimListComponent* _AnimListComponent;//[Offset: 0xd64, Size: 4]
	STAnimalAnimInstance* _AnimInstance;//[Offset: 0xd68, Size: 4]
	ProduceDropItemComponent* ProduceDropItemComponent;//[Offset: 0xd6c, Size: 4]
	int AnimalGroupID;//[Offset: 0xd70, Size: 4]
	enum AnimalType;//[Offset: 0xd7e, Size: 1]
	<enum,float> AnimalStateSpeeds;//[Offset: 0xd80, Size: 60]
	float HearRadius;//[Offset: 0xdbc, Size: 4]
	bool bAttackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc0, Size: 1]
	SkeletalMesh*[] RandomMeshs;//[Offset: 0xdc4, Size: 12]
	MaterialInterface*[] RandomMaterials;//[Offset: 0xdd0, Size: 12]
	delegate CustomObjectEvent;//[Offset: 0xddc, Size: 12]
	ParticleSystem* FootPrintRes;//[Offset: 0xde8, Size: 4]
	ParticleSystemComponent* FootPrintParticleSys;//[Offset: 0xdec, Size: 4]
	FName AttachedSocket;//[Offset: 0xdf0, Size: 8]
	float MovementTickInterval;//[Offset: 0xdf8, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0xdfc, Size: 4]
	delegate OnAnimalChangeAnimParam;//[Offset: 0xe00, Size: 12]
	void ShowFootPrintEffect(bool IsEnabled);// 0x36887bc
	void SetExtendData(FString Key, int Value);// 0x3688618
	void OnRep_IdleBlendSpaceValue();// 0x3688604
	void LeaveState(enum State);// 0x368858c
	bool HasState(enum State);// 0x368850c
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x368843c
	WeatherDetailStatus GetCurrentWeatherStatus();// 0x36883f4
	bool EnterState(enum State);// 0x3688374
	void DisappearOnDeath();// 0x3688358
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x3688294
	void BeforeDestroyed();// 0x3688278

--------------------------------
Class: STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xc80, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xc84, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xc88, Size: 4]
	float SensedRadius;//[Offset: 0xc8c, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xc90, Size: 4]
	float HeardRadius;//[Offset: 0xc94, Size: 4]
	float DelayHideDuration;//[Offset: 0xc98, Size: 4]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9d, Size: 1]
	Vector HurtDir;//[Offset: 0xca0, Size: 12]
	float HurtDistance;//[Offset: 0xcac, Size: 4]
	float HurtResetDefaultTime;//[Offset: 0xcb0, Size: 4]
	StateMutual[] StateMutuals;//[Offset: 0xcbc, Size: 12]
	delegate StateEnterEvent;//[Offset: 0xcc8, Size: 12]
	delegate StateLeaveEvent;//[Offset: 0xcd4, Size: 12]
	delegate OnDeath;//[Offset: 0xcf4, Size: 12]
	SimpleDamageRepData SimpleDamageRepData;//[Offset: 0xd00, Size: 24]
	int[] randomIndexes;//[Offset: 0xd18, Size: 12]
	SimpleAnimListBaseComponent* AnimListComponent;//[Offset: 0xd24, Size: 4]
	STExtraSimpleAnimInstanceBase* AnimInstance;//[Offset: 0xd28, Size: 4]
	byte NetRelevantType;//[Offset: 0xd2c, Size: 1]
	void SetNetRelevantType(byte InType);// 0x37fa71c
	void OnRep_SimpleDamageData();// 0x37fa708
	void DisappearOnDeath();// 0x3688358
	void CurrentStatesRemove(int State);// 0x37fa688
	void CurrentStatesAdd(int State);// 0x36f0b84
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x3688294
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37fa3ac
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37fa054
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f9d78
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f9a9c
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f9778
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f949c
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f91c0
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f8ea4
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x37f8b4c
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x446e168
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x446e168
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x37f89d8

--------------------------------
Class: AnimalStateMutual
	enum state1;//[Offset: 0x0, Size: 1]
	enum state2;//[Offset: 0x1, Size: 1]

--------------------------------
Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxMoveSpeed;//[Offset: 0x124, Size: 4]
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	float ScalePower;//[Offset: 0x12c, Size: 4]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float AvoidanceWeight;//[Offset: 0x134, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x138, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x13c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x140, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x144, Size: 4]
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x14c, Size: 12]
	Character* CharacterOwner;//[Offset: 0x158, Size: 4]
	int AvoidanceUID;//[Offset: 0x16c, Size: 4]

--------------------------------
Class: AnimalAnimListComponent.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimalAnimData[] AnimalAnimDatas;//[Offset: 0x1e0, Size: 12]
	AnimalMoveAnimSpeed[] AnimalMoveAnimSpeeds;//[Offset: 0x1ec, Size: 12]

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x174, Size: 12]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x180, Size: 4]
	<int,float> moveAnimSpeed;//[Offset: 0x184, Size: 60]
	float PlayMoveDeathMinimumDist;//[Offset: 0x1c0, Size: 4]
	delegate OnAnimLoadedFinished;//[Offset: 0x1c4, Size: 12]
	void SortAnimations();// 0x3656f04
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x3422848
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x3656c80
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x3656bbc

--------------------------------
Class: AnimalAnimData
	enum PoseType;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AnimalMoveAnimSpeed
	enum PoseType;//[Offset: 0x0, Size: 4]
	float Speed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AsyncLoadAnimParams

--------------------------------
Class: STAnimalAnimInstance.STExtraSimpleAnimInstanceBase.AnimInstance.Object
	bool b_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	bool b_Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 1]
	bool b_Trot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x336, Size: 1]
	bool b_Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x337, Size: 1]
	float f_MoveRate;//[Offset: 0x338, Size: 4]
	Vector v_HitVector;//[Offset: 0x33c, Size: 12]
	bool b_IsFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	int RandomIdleBlendSpaceIndex;//[Offset: 0x34c, Size: 4]
	AnimSequence* A_Idle;//[Offset: 0x350, Size: 4]
	AnimMontage* A_Idle_Arder;//[Offset: 0x354, Size: 4]
	AnimSequence* A_MoveAnim_Walk;//[Offset: 0x358, Size: 4]
	AnimSequence* A_MoveAnim_Trot;//[Offset: 0x35c, Size: 4]
	AnimSequence* A_MoveAnim_Run;//[Offset: 0x360, Size: 4]
	BlendSpace* A_HitAnim;//[Offset: 0x364, Size: 4]
	AnimMontage* A_DeadAnim;//[Offset: 0x368, Size: 4]
	AnimMontage* A_FearAnim;//[Offset: 0x36c, Size: 4]
	AnimMontage* A_CuteAnim;//[Offset: 0x370, Size: 4]
	BlendSpace1D* A_Random_Idle;//[Offset: 0x374, Size: 4]
	void ResetAnimState();// 0x3381a18
	void OnUpdateAnimalAnimParam();// 0x3687a20
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsPointDamage);// 0x3687790
	void OnLeaveState(int State);// 0x3687710
	void OnEnterState(int State);// 0x3687690
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x3687404
	void CacheAnimState(float DeltaSeconds);// 0x3387c14
	void CacheAnimDataList(bool ForceRefreshVar);// 0x368737c

--------------------------------
Class: STExtraSimpleAnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacterBase* OwnerCharacter;//[Offset: 0x2f0, Size: 4]
	FString OwnerClassPath;//[Offset: 0x304, Size: 12]
	bool EnableAdjustFloorNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	Rotator AdjustFloorRot;//[Offset: 0x320, Size: 12]
	float AdjustFloorDelta;//[Offset: 0x32c, Size: 4]
	void ResetAnimState();// 0x3381a18
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsHeadShotDamage);// 0x3687790
	void OnLeaveState(int State);// 0x3687710
	void OnEnterState(int State);// 0x3687690
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x3687404
	void CacheAnimState(float DeltaSeconds);// 0x3387c14
	void CacheAnimDataList(bool ForceRefreshVar);// 0x368737c

--------------------------------
Class: StateMutual
	int state1;//[Offset: 0x0, Size: 4]
	int state2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleDamageRepData
	float Damage;//[Offset: 0x0, Size: 4]
	float CurrentHeath;//[Offset: 0x4, Size: 4]
	bool IsFatalHealthCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Pawn* DamageInstigatorPawn;//[Offset: 0xc, Size: 4]
	Pawn* DamageReceiver;//[Offset: 0x10, Size: 4]
	int NetCounter;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AnimalTeleportComponent.ActorComponent.Object
	bool bDeliverToInDoorPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	AnimalDeliverRatingConfig[] ChickDeliverConfig;//[Offset: 0xc0, Size: 12]
	AnimalDeliverRatingConfig[] DeerDeliverConfig;//[Offset: 0xcc, Size: 12]
	AnimalDeliverRatingConfig[] GoblinDeliverConfig;//[Offset: 0xd8, Size: 12]
	AnimalDeliverRatingConfig[] IceDeliverConfig;//[Offset: 0xe4, Size: 12]
	AnimalDeliverAreaLimit[] DeliveryAreaLimit;//[Offset: 0xf0, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0xfc, Size: 8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x104, Size: 8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x10c, Size: 4]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x110, Size: 4]
	<STExtraPlayerCharacter*> DeliveredGoblinPlayers;//[Offset: 0x114, Size: 60]
	<STExtraPlayerCharacter*> DeliveredIcePlayers;//[Offset: 0x150, Size: 60]
	<enum,int> DeleverCountPerWave;//[Offset: 0x294, Size: 60]

--------------------------------
Class: AnimalDeliverRatingConfig
	float RightRatingSection;//[Offset: 0x0, Size: 4]
	uint32 DeliverGroupNumPerWave;//[Offset: 0x4, Size: 4]
	float DeliverBeginTime;//[Offset: 0x8, Size: 4]
	float DeliveryWaveInterval;//[Offset: 0xc, Size: 4]
	float DeliverEndTime;//[Offset: 0x10, Size: 4]
	uint32 FullFeedLimit;//[Offset: 0x14, Size: 4]
	float DeliverFreqInterval;//[Offset: 0x18, Size: 4]
	int DeliverNumEachFreq;//[Offset: 0x1c, Size: 4]
	<int,int> DeliverCountByPlayerNum;//[Offset: 0x20, Size: 60]

--------------------------------
Class: AnimalDeliverAreaLimit
	Vector TopLeft;//[Offset: 0x0, Size: 12]
	Vector BottomRight;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AnimalDeliverConfiguration.Object
	AnimalDeliverStrategy*[] TeamDeliverStrategies;//[Offset: 0x1c, Size: 12]
	AnimalDeliverStrategy*[] IndividualDeliverStrategies;//[Offset: 0x28, Size: 12]

--------------------------------
Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x1c, Size: 1]
	enum SortStrategy;//[Offset: 0x5c, Size: 1]
	enum SelectStrategy;//[Offset: 0x5d, Size: 1]

--------------------------------
Class: PlaneComponent.ActorComponent.Object
	int ClassicFlightNo;//[Offset: 0xbc, Size: 4]
	<int,PlaneData> PlaneDataMap;//[Offset: 0xc0, Size: 60]
	class Pawn* PlaneClass;//[Offset: 0xfc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bEnableClassic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	bool bSyncRouteAfterFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x104, Size: 12]
	AIController*[] CachedTotalAI;//[Offset: 0x110, Size: 12]
	int FlightTimes;//[Offset: 0x11c, Size: 4]
	int NotifyEndFlightDelayTime;//[Offset: 0x120, Size: 4]
	int CustomFlightTimes;//[Offset: 0x130, Size: 4]
	void StartFlight(int FlightNo);// 0x35cf16c
	void SetPlaneClassPath(FString PlaneClassPath);// 0x35cf0b0
	void SetFlight(int FlightNo, out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x35cee5c
	int SetCustomFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x35cec40
	void NotifyEndFlight();// 0x35cec2c
	PlaneData GetPlaneDataByFlightNo(int FlightNo);// 0x35cea2c
	void EndPlaneFlightByFlightNo(int FlightNo);// 0x35ce9b4
	bool AddPlayerToFlight(PlayerController* PC, int FlightNo);// 0x35ce8f0

--------------------------------
Class: PlaneData
	int FlightNo;//[Offset: 0x0, Size: 4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Actor* ThePlane;//[Offset: 0x8, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector PlaneVelocity;//[Offset: 0x10, Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x1c, Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x3c, Size: 8]
	float PlaneHeight;//[Offset: 0x44, Size: 4]
	int TotalPlayerNum;//[Offset: 0x48, Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x4c, Size: 12]
	PlayerController*[] CurPlayers;//[Offset: 0x58, Size: 12]
	int TotalAINum;//[Offset: 0x64, Size: 4]
	AIController*[] TotalAIs;//[Offset: 0x68, Size: 12]
	int CurAINum;//[Offset: 0x74, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x78, Size: 4]
	bool bCanFixedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0xc0, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xc4, Size: 4]
	enum RespawnPointType;//[Offset: 0xc8, Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0xcc, Size: 12]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0xd8, Size: 12]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0xe4, Size: 12]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0xf0, Size: 60]
	<uint32,RespawnIgnoreItemType> PlayerRespawnIgnoreItemTypes;//[Offset: 0x12c, Size: 60]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x168, Size: 24]
	int[] DefaultWeaponList;//[Offset: 0x180, Size: 12]
	float bRestoreDataDelay;//[Offset: 0x18c, Size: 4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	delegate OnGlobalRespawnedDelegate;//[Offset: 0x194, Size: 12]
	delegate OnRespawnedPlayerDelegate;//[Offset: 0x1a0, Size: 12]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x29c, Size: 4]
	Pawn* RespawningPlayerPawn;//[Offset: 0x2a0, Size: 4]
	void SetRespawnInvincibleTime(float DefaultRespawnInvincibleTimeIn);// 0x35e54f4
	void RespawnAllPlayer();// 0x35e54e0
	void RemovePlayerRespawnTimer(uint32 PlayerKey, bool bAI);// 0x35e541c
	void PlayerDelayAddItem(uint32 PlayerKey, int ItemID);// 0x35e5360
	void OnCharacterStartFire(STExtraWeapon* _, STExtraBaseCharacter* Character);// 0x35e52a4
	bool IsContainPlayerTimer(uint32 PlayerKey);// 0x35e5224
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x35e5154
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x35e5098
	int GetRespawnWeaponBulletNum(out const RespawnKeepAllItemData RespawnKeepAllItemData, int SlotType, int SpecificID);// 0x35e4f40
	bool GetPlayerRespawnKeepAllItemData(uint32 PlayerKey, bool bAI, out RespawnKeepAllItemData OutRespawnKeepAllItemData, bool bKeepBullet);// 0x35e4d8c
	float GetDefaultPlayerRespawnTime();// 0x35e4d64
	void GenerateRespawnKeepItems(uint32 PlayerKey, bool bAI, out const RespawnKeepAllItemData RespawnKeepAllItemData, bool bForceKeepItems);// 0x35e4bb8
	void DealWithDelayAddItem(uint32 PlayerKey, bool bAddAll, bool bClearAll);// 0x35e4aa4
	void ClearDelayAddItems(uint32 PlayerKey);// 0x35e4a2c
	void ClearAllPlayerRespawnTimer();// 0x35e4a18
	void ChangeWeaponSchemeIndex(int InIndex);// 0x3332304
	void AddPlayerRespawnIgnoreKeepItemType(uint32 PlayerKey, bool IsAdd, int ItemType);// 0x35e490c

--------------------------------
Class: ReplaceWeaponDataMap
	<byte,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ReplaceWeaponData
	int WeaponID;//[Offset: 0x0, Size: 4]
	BattleItemData WeaponItemData;//[Offset: 0x8, Size: 160]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0xa8, Size: 12]

--------------------------------
Class: RespawnIgnoreItemType

--------------------------------
Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 12]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x18, Size: 1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x1c, Size: 12]
	int ClipBulletNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0, Size: 4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0, Size: 4]
	RespawnItem[] ItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShowVehicleComponent.LuaInstancedActorComponent.ActorComponent.Object
	class Actor* VehicleSpotClass;//[Offset: 0x114, Size: 4]
	float DropHeightOffset;//[Offset: 0x118, Size: 4]
	float LeftTimeToDestroyVehicles;//[Offset: 0x11c, Size: 4]
	float TimerHzToDestroyVehicles;//[Offset: 0x120, Size: 4]
	bool bUseNewVehicleSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	float LeftTimeToDestroyWingman;//[Offset: 0x128, Size: 4]
	float TimerHzToDestroyWingman;//[Offset: 0x12c, Size: 4]
	int MaxVehicles;//[Offset: 0x130, Size: 4]
	int MaxVehiclesPerGroup;//[Offset: 0x134, Size: 4]
	Actor*[] VehicleSpotActors;//[Offset: 0x138, Size: 12]
	VehicleSpots[] VehicleSpotGroup;//[Offset: 0x15c, Size: 12]
	<uint32,Actor*> VehicleContainers;//[Offset: 0x168, Size: 60]
	<int,Actor*> WingmanMap;//[Offset: 0x1e8, Size: 60]
	void ShowWingmanFor(uint32 InPlayerKey, FString InWingmanClassPath, out const Transform InWingmanSpawnTransform);// 0x3656510
	void ShowVehicleFor(uint32 InPlayerKey, FString InVehiclePath, FString InVehicleContainerPath, int InAvatarID);// 0x3656344
	void SetVehicleSpotsInfo();// 0x3332384
	void OnGameModeStateChanged(out const GameModeStateChangedParams InParams);// 0x36562b4
	void DestroyWingman();// 0x36562a0
	void DestroyVehicleFor(uint32 InPlayerKey);// 0x3656228

--------------------------------
Class: VehicleSpots
	Transform[] Spots;//[Offset: 0x0, Size: 12]
	<int> UsedSpot;//[Offset: 0xc, Size: 60]
	<int,UsedVehicleSpots> GroupIndexUsedVehicleSpotsMap;//[Offset: 0x48, Size: 60]

--------------------------------
Class: UsedVehicleSpots
	<int> UsedSpot;//[Offset: 0x0, Size: 60]

--------------------------------
Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0, Size: 4]
	FString PlaneClassFullPath;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ItemAttach
	int BaseItemID;//[Offset: 0x0, Size: 4]
	AddItemInfo[] AttachItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AddItemInfo
	int AddItemID;//[Offset: 0x0, Size: 4]
	int AddItemNum;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0, Size: 4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 12]
	FString FakePlayerCampNameTableName;//[Offset: 0xc8, Size: 12]
	FString FakePlayerRandomNameTableName;//[Offset: 0xd4, Size: 12]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0xe0, Size: 60]
	<int,FString> FakePlayerCampNameMap;//[Offset: 0x11c, Size: 60]
	FString[] FakePlayerRandomNamePrefixArray;//[Offset: 0x158, Size: 12]
	FString[] FakePlayerRandomNameArray;//[Offset: 0x164, Size: 12]
	void InitRowDataMap();// 0x34ca7f0
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x34ca6ec
	FString GetControllerPath(int resID);// 0x34ca5e4

--------------------------------
Class: FakePlayerCustomRow
	int ID;//[Offset: 0x0, Size: 4]
	FString ControllerPath;//[Offset: 0x4, Size: 12]
	FString Name;//[Offset: 0x10, Size: 12]
	int gender;//[Offset: 0x1c, Size: 4]
	FString ItemStr;//[Offset: 0x20, Size: 12]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x2c, Size: 12]
	int IsUseRandomName;//[Offset: 0x38, Size: 4]
	int NameLocalizeId;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DSTickRateOptimize
	float TickFrequency;//[Offset: 0x0, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x4, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x8, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GroupPlayers
	uint32[] Players;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PVSNetRelevantHelper.Object
	float MaxVoiceSyncDissquaredDeathMatch;//[Offset: 0x9c, Size: 4]
	float MaxVoiceSyncDissquaredBR;//[Offset: 0xa0, Size: 4]
	float MaxVoiceSyncDissquared;//[Offset: 0xa4, Size: 4]
	bool bEnableVoiceLODSector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int VoiceLODSectorCircleDivideCount;//[Offset: 0xbc, Size: 4]
	int VoiceLODSectorBeginDistance;//[Offset: 0xc0, Size: 4]
	int VoiceLODSectorBeginThickness;//[Offset: 0xc4, Size: 4]
	enum GameModeModType;//[Offset: 0xc8, Size: 4]
	bool bEnableLandscapeRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bEnableWholeMapCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool bDoNotForceVisibleOnlyBecauseOfViewerOnVehicleForLandscapeRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	float ModdedMinJudgeDistanceSquared;//[Offset: 0xd0, Size: 4]
	float BaseModMinJudgeDistanceSquared;//[Offset: 0xd4, Size: 4]
	float MinJudgeDisquared;//[Offset: 0xd8, Size: 4]
	float MinSprintFootVoiceNeedVelocitySquared;//[Offset: 0xdc, Size: 4]
	bool bAIVoiceSyncSpecial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bHasDecidedMinJudgeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	float RayVisibilityMoveUpDistance;//[Offset: 0x24c, Size: 4]
	float RayVisibilityPerSecondTimeLimit;//[Offset: 0x250, Size: 4]
	float RayVisibilityCheckIntervalWhenVisible;//[Offset: 0x254, Size: 4]
	void RegisterObfuscateSync(const UAEPlayerController* PlayerController);// 0x361a3f4
	void EnableFeatureInBeta();// 0x361a3e0

--------------------------------
Class: AIControllerList

--------------------------------
Class: AIPawnPoolItem
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: RoomCustomParams
	int CircleSpeedMultiplicator;//[Offset: 0x0, Size: 4]
	bool bAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bShowSkull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bGunRemoveBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int BlueCircleDamageMultiplicator;//[Offset: 0xc, Size: 4]
	bool bUseFirstWhiteCircleDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bUseFirstSafeZoneAppearTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bUseFirstWhiteCircleRadiusMultiplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int FirstWhiteCircleDelayTime;//[Offset: 0x14, Size: 4]
	int FirstSafeZoneAppearTime;//[Offset: 0x18, Size: 4]
	int FirstWhiteCircleRadiusMultiplicator;//[Offset: 0x1c, Size: 4]
	bool EnableRedZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	CustomCircleParams[] CustomCircleParamsList;//[Offset: 0x24, Size: 12]
	bool bFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: CustomCircleParams
	int Stage;//[Offset: 0x0, Size: 4]
	int DelayTime;//[Offset: 0x4, Size: 4]
	int SafeZoneAppeartime;//[Offset: 0x8, Size: 4]
	int LastTime;//[Offset: 0xc, Size: 4]
	int CircleDamage;//[Offset: 0x10, Size: 4]
	int BlueCircleRadius;//[Offset: 0x14, Size: 4]
	int WhiteCircleRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BackpackBlueprintUtils.Object
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0xb8, Size: 12]
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xc4, Size: 12]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0xd0, Size: 60]
	<int,enum> TClipTypeMap;//[Offset: 0x10c, Size: 60]
	<int,int> mapPickupBullet;//[Offset: 0x148, Size: 60]
	<int,enum> mapAttachPos;//[Offset: 0x184, Size: 60]
	<int,int> CustomPickupItemIDMap;//[Offset: 0x1c0, Size: 60]
	PickupSetting PickupSetting;//[Offset: 0x1fc, Size: 376]
	PickupSettingForTPlan PickupSettingForMod;//[Offset: 0x374, Size: 364]
	PickupProposeData proposeData;//[Offset: 0x4e0, Size: 344]
	int[] NeedToShowTypeList;//[Offset: 0x638, Size: 12]
	int[] ConsumeableMissionItemID;//[Offset: 0x644, Size: 12]
	int[] CanNotAutoSwitchGrenadeList;//[Offset: 0x650, Size: 12]
	<int,FName> ItemSubTypeNameMap;//[Offset: 0x65c, Size: 60]
	enum CurrentGameModeType;//[Offset: 0x698, Size: 1]
	FString ItemTableName;//[Offset: 0x69c, Size: 12]
	FString AttachTableName;//[Offset: 0x6a8, Size: 12]
	FString ItemAttrsTableName;//[Offset: 0x6b4, Size: 12]
	FString SuitEmoteTableName;//[Offset: 0x6c0, Size: 12]
	FString OccupationTableName;//[Offset: 0x6cc, Size: 12]
	enum[] AvatarDownloadGameModeTypes;//[Offset: 0x6d8, Size: 12]
	<enum,int> AvatarDownloadPriority;//[Offset: 0x6e4, Size: 60]
	bool bShowWeaponPendant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	<int,int> itemGuid2Useful;//[Offset: 0x724, Size: 60]
	<int,int> gunMainTypeUseful;//[Offset: 0x760, Size: 60]
	<int,int> attachMainTypeUseful;//[Offset: 0x79c, Size: 60]
	<int,int> bulletMainTypeUseful;//[Offset: 0x7d8, Size: 60]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0x814, Size: 60]
	<int,int> constructTypeUseful;//[Offset: 0x850, Size: 60]
	<int,int> skillpropsTypeUseful;//[Offset: 0x88c, Size: 60]
	<int,bool> itemPathExist;//[Offset: 0x8c8, Size: 60]
	int[] ItemToDownload;//[Offset: 0x904, Size: 12]
	int AvatarDownloadMaxLimitTimes;//[Offset: 0x910, Size: 4]
	bool bAvatarDownloadClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 1]
	<int,EquipmentBrief> EquipmentBriefMap;//[Offset: 0x918, Size: 60]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 1]
	bool bEnableDSAvatarOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 1]
	int[] TombBoxItemBlackList;//[Offset: 0x958, Size: 12]
	int CharacterVirtualItem_Type;//[Offset: 0x964, Size: 4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0x968, Size: 4]
	<int,class BattleItemHandleBase> VirtualItemClassMap;//[Offset: 0x96c, Size: 60]
	<int> NoUseVirtualItemIDs;//[Offset: 0x9a8, Size: 60]
	bool bAutoPickIngoreBackpackCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 1]
	void ResetItemToDownload();// 0x33bb7a8
	void ResetBattleItemHandleExist(out const ItemDefineID DefineID);// 0x33bb718
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x33bb65c
	void OnGameModeTypeChanged();// 0x33bb640
	bool IsVirtualItemData(out const BattleItemData ItemData);// 0x33bb584
	bool IsRollItem(out const PickUpItemData SearchItemResult);// 0x33bb428
	bool IsParachuteItemType(int ItemID);// 0x33874b4
	bool IsInPveMode();// 0x446e168
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID);// 0x33bb35c
	bool IsGrenadeCanAutoSwitch(int ItemID);// 0x33498f4
	bool IsGlideItemType(int ItemID);// 0x33bb2d4
	bool IsGhillieSuitItemType(int ItemID);// 0x33bb24c
	bool IsForceLoadLobbyHandle(out const ItemDefineID InItemID);// 0x33bb1ac
	bool IsEquipmentItem(int ItemID);// 0x33bb124
	bool IsConsumableMissionItemType(int ItemID);// 0x33bb09c

--------------------------------
Class: CreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 4]
	FString Path;//[Offset: 0x1c, Size: 12]
	delegate Callback;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CreateBattleItemHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 12]
	FString[] PathList;//[Offset: 0xc, Size: 12]
	Object* Outer;//[Offset: 0x18, Size: 4]
	delegate Callback;//[Offset: 0x20, Size: 16]

--------------------------------
Class: PickupSetting
	int LimitBandage;//[Offset: 0x0, Size: 4]
	int LimitMedical;//[Offset: 0x4, Size: 4]
	int LimitFirstAidKit;//[Offset: 0x8, Size: 4]
	int LimitAnodyne;//[Offset: 0xc, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0x10, Size: 4]
	int LimitAdrenaline;//[Offset: 0x14, Size: 4]
	int LimitShouliudan;//[Offset: 0x18, Size: 4]
	int LimitYanwudan;//[Offset: 0x1c, Size: 4]
	int LimitZhenbaodan;//[Offset: 0x20, Size: 4]
	int LimitRanshaodan;//[Offset: 0x24, Size: 4]
	int LimitViscidityBomb;//[Offset: 0x28, Size: 4]
	int LimitGrenadeZombie;//[Offset: 0x2c, Size: 4]
	int LimitGrenadeYedan;//[Offset: 0x30, Size: 4]
	int LimitAntidote;//[Offset: 0x34, Size: 4]
	int LimitBatteryChip;//[Offset: 0x38, Size: 4]
	int LimitGameCoin;//[Offset: 0x3c, Size: 4]
	int LimitBullet9mm;//[Offset: 0x40, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x44, Size: 4]
	int Limit12koujing;//[Offset: 0x48, Size: 4]
	int Limit45koujing;//[Offset: 0x4c, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x50, Size: 4]
	int Limitbolt;//[Offset: 0x54, Size: 4]
	int LimitBullet5;//[Offset: 0x58, Size: 4]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	int LimitSniper2X;//[Offset: 0x60, Size: 4]
	int LimitSniper3X;//[Offset: 0x64, Size: 4]
	int LimitSniper4X;//[Offset: 0x68, Size: 4]
	int LimitSniper6X;//[Offset: 0x6c, Size: 4]
	int LimitSniper8X;//[Offset: 0x70, Size: 4]
	bool AutoPickupSkillProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	int LimitSkillProps;//[Offset: 0x78, Size: 4]
	int LimitSnowMan;//[Offset: 0x7c, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int AutoPickClipType;//[Offset: 0x84, Size: 4]
	<int,int> LimitDrugMap;//[Offset: 0x88, Size: 60]
	<int,int> LimitThrowObjMap;//[Offset: 0xc4, Size: 60]
	<int,int> LimitMultipleMirrorMap;//[Offset: 0x100, Size: 60]
	<int,int> LimitFixConsumeItemMap;//[Offset: 0x13c, Size: 60]

--------------------------------
Class: PickupSettingForTPlan
	int LimitSkillProps;//[Offset: 0x0, Size: 4]
	<int,int> LimitBulletMap_XT;//[Offset: 0x4, Size: 60]
	<int,int> LimitDrugMap_XT;//[Offset: 0x40, Size: 60]
	<int,int> LimitThrowObjMap_XT;//[Offset: 0x7c, Size: 60]
	<int,int> LimitMultipleMirrorMap_XT;//[Offset: 0xb8, Size: 60]
	<int,int> LimitNormalInfillingMap_XT;//[Offset: 0xf4, Size: 60]
	<int,int> LimitHalloweenInfillingMap_XT;//[Offset: 0x130, Size: 60]

--------------------------------
Class: PickupProposeData
	PickupFirstCount[] pickFirst;//[Offset: 0x0, Size: 12]
	int closeSubType;//[Offset: 0xc, Size: 4]
	int crossbowSubType;//[Offset: 0x10, Size: 4]
	int panID;//[Offset: 0x14, Size: 4]
	int pistolSubType;//[Offset: 0x18, Size: 4]
	int gunType;//[Offset: 0x1c, Size: 4]
	int specialType;//[Offset: 0x20, Size: 4]
	int specialType2;//[Offset: 0x24, Size: 4]
	int lens2ID;//[Offset: 0x28, Size: 4]
	int lens3ID;//[Offset: 0x2c, Size: 4]
	int lens4ID;//[Offset: 0x30, Size: 4]
	int lens6ID;//[Offset: 0x34, Size: 4]
	int lens8ID;//[Offset: 0x38, Size: 4]
	int ID2Type;//[Offset: 0x3c, Size: 4]
	int pistolClipSubType;//[Offset: 0x40, Size: 4]
	int SubMachineGunClipSubType;//[Offset: 0x44, Size: 4]
	int SniperClipSubType;//[Offset: 0x48, Size: 4]
	int RifleClipSubType;//[Offset: 0x4c, Size: 4]
	int gasSubID;//[Offset: 0x50, Size: 4]
	int backSubType;//[Offset: 0x54, Size: 4]
	int MedicalSubType;//[Offset: 0x58, Size: 4]
	int back3ID;//[Offset: 0x5c, Size: 4]
	int BandageID;//[Offset: 0x60, Size: 4]
	int QuickBandageID;//[Offset: 0x64, Size: 4]
	int EnergyDrinksID;//[Offset: 0x68, Size: 4]
	int AdrenalineID;//[Offset: 0x6c, Size: 4]
	int AnodyneID;//[Offset: 0x70, Size: 4]
	int Medical1ID;//[Offset: 0x74, Size: 4]
	int QuickMedical1ID;//[Offset: 0x78, Size: 4]
	int Medical2ID;//[Offset: 0x7c, Size: 4]
	int AntidoteID;//[Offset: 0x80, Size: 4]
	int BatteryChipID;//[Offset: 0x84, Size: 4]
	int GameCoinID;//[Offset: 0x88, Size: 4]
	int ZhenBaoDan;//[Offset: 0x8c, Size: 4]
	int YanWuDan;//[Offset: 0x90, Size: 4]
	int RanShaoPing;//[Offset: 0x94, Size: 4]
	int ShouLei;//[Offset: 0x98, Size: 4]
	int FlarePistolID;//[Offset: 0x9c, Size: 4]
	int[] SideMirrorList;//[Offset: 0xa0, Size: 12]
	int[] MirrorList;//[Offset: 0xac, Size: 12]
	int ViscidityBomb;//[Offset: 0xb8, Size: 4]
	int GrenadeZombie;//[Offset: 0xbc, Size: 4]
	int GrenadeYedan;//[Offset: 0xc0, Size: 4]
	int DefaultMedicineNum;//[Offset: 0xc4, Size: 4]
	int helmetSubType;//[Offset: 0xc8, Size: 4]
	int armorSubType;//[Offset: 0xcc, Size: 4]
	int ScoreItemSubType;//[Offset: 0xd0, Size: 4]
	int SpecialNoDropItemSubType;//[Offset: 0xd4, Size: 4]
	int IceDrinkItemSubType;//[Offset: 0xd8, Size: 4]
	int IsAutoPickUpTaskSubType;//[Offset: 0xdc, Size: 4]
	int[] carryOnPlane;//[Offset: 0xe0, Size: 12]
	int CapacityThreshold;//[Offset: 0xec, Size: 4]
	int GlideSubType;//[Offset: 0xf0, Size: 4]
	int ParachuteItemSubType;//[Offset: 0xf4, Size: 4]
	int revivalCardID;//[Offset: 0xf8, Size: 4]
	int SnowManID;//[Offset: 0xfc, Size: 4]
	float revivalCardValidTime;//[Offset: 0x100, Size: 4]
	int[] firewoodPriority;//[Offset: 0x104, Size: 12]
	int[] meatPriority;//[Offset: 0x110, Size: 12]
	int[] UAVList;//[Offset: 0x11c, Size: 12]
	int[] ElectricityList;//[Offset: 0x128, Size: 12]
	int[] ToUseInBackpackSubList;//[Offset: 0x134, Size: 12]
	int[] ToUseInBackpackIDList;//[Offset: 0x140, Size: 12]
	int[] notExtractItemIDList;//[Offset: 0x14c, Size: 12]

--------------------------------
Class: PickupFirstCount
	int pickID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: EquipmentBrief
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemSubType;//[Offset: 0x4, Size: 4]
	int BPID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BackpackBlueprintUtils_BP_C.BackpackBlueprintUtils.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x9e8, Size: 4]
	int GetEquipmentArmorLevel(int ItemID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x446e168
	int GetEquipmentHelmetLevel(int ItemID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x446e168
	bool IsForceLoadLobbyHandle(out ItemDefineID InItemID, int CallFunc_GetClothAvatarTemplateID_ReturnValue, AvatarTableData CallFunc_GetAvatarDataFromTable_OutAvatarTableData, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x446e168
	void IsSinkMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x446e168
	int GetCustomPickupItemCountByDefineID(BackpackComponent* BackpackComp, out ItemDefineID DefineID, out JudgePickupUsefulItem JudgePickUseful, int CallFunc_GetItemCountByDefineID_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Max_ReturnValue);// 0x446e168
	class Object GetBattleItemHandleClass(out ItemDefineID DefineID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class BattleItemHandleBase CallFunc_GetVirtualItemHandleClass_OutClass, bool CallFunc_GetVirtualItemHandleClass_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x446e168
	bool CanNotAutoSwitchToGrenade(int InGrenadeID, bool CallFunc_Array_Contains_ReturnValue);// 0x446e168
	void PreModifyPickupSettingData(SettingConfig_C* SettingConfig, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int ___int_Variable4, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x446e168
	bool IsConsumableMissionItemType(int ItemID, bool CallFunc_Array_Contains_ReturnValue);// 0x446e168
	int GetGrenadePriorityByType(int InGrenadeType, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x446e168
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_DrinkCompoundConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x446e168
	bool IsEquipmentItem(int ItemID, bool CallFunc_Map_Contains_ReturnValue);// 0x446e168
	BattleItemHandleBase* CreateVirtualItemHandle(out ItemDefineID DefineID, Object* Outer, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, class BattleItemHandleBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, CallFunc_IsValid_ReturnValue(BoolPr) CallFunc_IsValid_ReturnValue);// 0x446e168
	int GetPendantIDByWeaponID(int WeaponID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponAttrBPTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x446e168
	int GetWeaponSkinMappingID(int InWeaponSkinID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x446e168
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_ItemSoundTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x446e168
	bool IsGlideItemType(int ItemID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x446e168
	bool IsGhillieSuitItemType(int ItemID, bool CallFunc_Array_Contains_ReturnValue);// 0x446e168
	int GetEquipmentBagLevel(int ItemID, int ResultBagLevel, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString CallFunc_GetGameStatus_ReturnValue, FString CallFunc_ToLower_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x446e168
	int GetEquipmentLevel(int ItemID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x446e168
	bool Is3BackpackID(int ID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x446e168
	bool IsInPveMode(bool CallFunc_IsPveMode_out);// 0x446e168
	void IsPVEMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x446e168
	void GetEquipmentSkinIDByAvatar(int InItemID, GameModePlayerEquipmentAvatar EquipmentAvatar, out int SkinItemID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Conv_IntToBool_ReturnValue3, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, int CallFunc_GetEquipmentLevel_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int K2Node_Select_Default, int K2Node_Select2_Default, int K2Node_Select3_Default, FString CallFunc_Concat_StrStr_ReturnValue3, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x446e168
	void ModifySetting();// 0x446e168
	void ModifyPickupSetting(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, PickupSettingForTPlan K2Node_MakeStruct_PickupSettingForTPlan, PickupSetting K2Node_MakeStruct_PickupSetting);// 0x446e168
	void ModifyBulletAndMedician(int ___int_Array_Index_Variable, bool CallFunc_IsSinkMode_out, UAEDataTable* CallFunc_GetDataTable_ReturnValue, int ___int_Loop_Counter_Variable, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_STRUCT_ArmoryConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Get_Item2, int CallFunc_Add_IntInt_ReturnValue2);// 0x446e168
	int GetBPIDByResID(int resID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue);// 0x446e168
	void AddToWeaponAttachPos(int attachID, enum socket, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x446e168
	void InitItemTable(delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x446e168
	FString GetBattleItemHandlePath(out ItemDefineID DefineID, bool bLobby, bool bForceLobby, FString CallFunc_GetBattleItemHandlePathInner_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x446e168
	FString GetRawBattleTextByRawTextID(int ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x446e168
	FString GetRawBattleTextByType(enum Type, int InSubType, FName RowName, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x446e168
	int GetItemSubTypeID(int SpecificID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue);// 0x446e168
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out ItemDefineID DefineID, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, FString CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, BattleWeaponItemDisplayData K2Node_MakeStruct_BattleWeaponItemDisplayData);// 0x446e168
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2);// 0x446e168
	bool IsVirtualItemData(out BattleItemData ItemData, bool CallFunc_Greater_IntInt_ReturnValue);// 0x446e168
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, interface classNone CallFunc_GetItemHandleListByDefineID_self_CastInput, ItemHandleBase*[] CallFunc_GetItemHandleListByDefineID_ReturnValue, int CallFunc_Array_Length_ReturnValue, ItemHandleBase* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, BattleItemHandleBase* K2Node_DynamicCast_AsBattle_Item_Handle_Base, bool K2Node_DynamicCast_bSuccess);// 0x446e168
	void CreateBattleItemHandle_Character(Object* Outer, out BattleItemHandleBase* BattleItemHandle, BattleItemHandle_VirtualCharacter_C* CallFunc_SpawnObject_ReturnValue);// 0x446e168
	void CreateBattleItemHandle_Default(int Type, int ID, Object* Outer, bool bLobby, out BattleItemHandleBase* BattleItemHandle, bool CallFunc_NeedUseLowDeviceHandle_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2);// 0x446e168
	void GetBattleItemFeatureData(ItemDefineID DefineID, out BattleItemFeatureData FeatureData, int CountLimit, BattleItemFeatureData BattleItemFeatureData, int CallFunc_GetItemAttrsFlag_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData7 CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, BattleItemFeatureData K2Node_MakeStruct_BattleItemFeatureData);// 0x446e168
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData);// 0x446e168
	BattleItemHandleBase* CreateBattleItemHandle(out ItemDefineID DefineID, Object* Outer, bool bLobby, bool UseLobby, BattleItemHandleBase* Handle, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Character_BattleItemHandle, bool CallFunc_NeedUseLowDeviceHandle_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandleInner_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Default_BattleItemHandle, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x446e168
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemData[] CallFunc_GetItemListByDefineID_ReturnValue, BattleItemData CallFunc_Array_Get_Item);// 0x446e168
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData5 CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x446e168
	BattleItemData ConstructBattleItemDataByDefineID(out ItemDefineID DefineID, int TypeSpecificID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, FString CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, FString CallFunc_GetTableDataField_Out3, bool CallFunc_GetTableDataField_ReturnValue3, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x446e168
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x446e168
	void InitialItemTable();// 0x446e168
	void ExecuteUbergraph_BackpackBlueprintUtils_BP(int EntryPoint, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BackpackComponent* K2Node_Event_BackpackComp, STExtraBaseCharacter* K2Node_Event_Character, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, BattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, ItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, bool CallFunc_PickupItem_ReturnValue);// 0x446e168
	BattleItemAdditionalData[] EmptyAdditionalData;//[Offset: 0x9ec, Size: 12]
	<FName,ItemAssociation> EmptyAssociationMap;//[Offset: 0x9f8, Size: 60]
	ItemAssociation[] EmptyAssociationArray;//[Offset: 0xa34, Size: 12]
	<int,enum> EquipmentID2SlotID_Map;//[Offset: 0xa40, Size: 60]
	<int,int> EquipmentBagID2Level_Map;//[Offset: 0xa7c, Size: 60]
	<int,int> EquipmentHelmetID2Level_Map;//[Offset: 0xab8, Size: 60]
	<int,int> EquipmentArmorID2Level_Map;//[Offset: 0xaf4, Size: 60]
	int[] GhillieSuitItem;//[Offset: 0xb30, Size: 12]
	<int,int> GrenadeTypeToPriority;//[Offset: 0xb3c, Size: 60]
	<int,int> CacheItemId2BagLevelMap;//[Offset: 0xb78, Size: 60]

--------------------------------
Class: JudgePickupUsefulItem
	PickUpItemData MainItemData;//[Offset: 0x0, Size: 48]
	int NetGUIDOffsetValue;//[Offset: 0x30, Size: 4]
	bool DropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: BP_STRUCT_DrinkCompoundConfig_type
	int awardID_0_2BBEB1403F5A9B0B0EB1D00709609964;//[Offset: 0x0, Size: 4]
	int awardNum_1_37D1DA0026A0923C7757AA8B0609AE2D;//[Offset: 0x4, Size: 4]
	int descID_2_1FD235403A90703F024A7AEA0BB716C4;//[Offset: 0x8, Size: 4]
	int ID_3_2F902D8037E77FA46237D6880B8119C4;//[Offset: 0xc, Size: 4]
	Int isMayCarry_4_2AB2AB40581603397B72EE3809C59429;//[Size: 4]
	int JpKrAwardID_5_49A847000D2541FE5295535A097982A4;//[Offset: 0x14, Size: 4]
	int JpKrAwardNum_6_2ECC8FC045A856D735DAF8570798322D;//[Offset: 0x18, Size: 4]
	FString Name_7_3AE82A806F13962C42B917EB011A5DB5;//[Offset: 0x1c, Size: 12]
	FString solt_8_7F0FFAC007CB390F4285A58D011A9FB4;//[Offset: 0x28, Size: 12]
	int EmoteID_9_4C84EC007C583218352536360B9EB844;//[Offset: 0x34, Size: 4]
	FString PhizExplain_10_2575C54064E510CF536AC4300D724F0E;//[Offset: 0x38, Size: 12]
	FString EmoteVoiceName_11_60ECC6803A15389C4AA097EC0673F2D5;//[Offset: 0x44, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponAttrBPTable_type
	FString AttachmentSkinIDList_1_68C117003440A0EE1A2DDA300D678804;//[Offset: 0x0, Size: 12]
	int BPID_2_5A4F6D006A4E746E1527F1660046AA94;//[Offset: 0xc, Size: 4]
	int[] AttachmentIDList_a_5_6E7001C028E30A41653FBE36025F1751;//[Offset: 0x10, Size: 12]
	int[] ParentIDList_a_6_3486FA0030D9987A663B62F90FFCB731;//[Offset: 0x1c, Size: 12]
	FString DeadInventoryBoxPath_7_1883E1C0339C8C7958767FF2080EC2C8;//[Offset: 0x28, Size: 12]
	int PendantID_8_32B77B0039C6C1D620F9E77400A423B4;//[Offset: 0x34, Size: 4]
	FString DeadInventoryBoxIDs_10_7CB7FE8050FC74B432EE0A820680F713;//[Offset: 0x38, Size: 12]
	float CheckWeaponSkillDuration_f_11_6111F9C073ADAB21228400A10010AD36;//[Offset: 0x44, Size: 4]
	int WeaponSkillID_12_225B82C01AF0B81B520FC56F0A446294;//[Offset: 0x48, Size: 4]

--------------------------------
Class: BP_STRUCT_ItemSoundTable_type
	FString EquipSound_0_068B68C066212493052EBF3305D63E14;//[Offset: 0x0, Size: 12]
	FString DropSound_1_4DD7CD003E11476C25039DA50902AA34;//[Offset: 0xc, Size: 12]
	int ID_2_42F748C040D81BA3690F7C020EF58C44;//[Offset: 0x18, Size: 4]
	FString PickUpSound_3_0B99FAC07345086D4963B6D504877D14;//[Offset: 0x1c, Size: 12]
	FString DropBank_4_1D8769C022E35E311709B3FF07910C6B;//[Offset: 0x28, Size: 12]
	FString EquipBank_5_30BCE58001E2251E07D41C7C055C432B;//[Offset: 0x34, Size: 12]
	FString UnEquipBank_6_4FF4964008C1F90F14F8C45904D7459B;//[Offset: 0x40, Size: 12]
	FString UnEquipSound_7_0376B980772F43423C77A2D80D665704;//[Offset: 0x4c, Size: 12]
	FString PickUpBank_8_3C7477801367726A5EFE3B0D0549773B;//[Offset: 0x58, Size: 12]

--------------------------------
Class: BP_STRUCT_BackpackMapping_type
	int ItemIDLv1_0_21A3A0400039E85B0FB4B5AE02FC6161;//[Offset: 0x0, Size: 4]
	int ItemIDLv3_4_21A5A0C00039E85D0FB4B5A802FC6163;//[Offset: 0x4, Size: 4]
	int SkinID_5_0CC9E5002CE60FA0348CD8800DC46CC4;//[Offset: 0x8, Size: 4]
	int ItemIDLv2_6_21A4A0800039E85C0FB4B5AF02FC6162;//[Offset: 0xc, Size: 4]
	int SkinItemIDLv1_8_54E5658067900F920ABA96CA085B62E1;//[Offset: 0x10, Size: 4]
	int SkinItemIDLv3_9_54E7660067900F940ABA96CC085B62E3;//[Offset: 0x14, Size: 4]
	int LobbyShowItemID_10_2F22E9C00E7C61770577495A0A75F1B4;//[Offset: 0x18, Size: 4]
	int SkinItemIDLv2_11_54E665C067900F930ABA96CD085B62E2;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BP_STRUCT_ArmoryConfig_type
	FString Power_0_66023CC06166E049160058F001EA47E2;//[Offset: 0x0, Size: 12]
	FString ShotRange_1_59BA1C40037657B76427F9810CB9A205;//[Offset: 0xc, Size: 12]
	int WeaponID_2_04A777401625BC6D3B1E56BA09255CF4;//[Offset: 0x18, Size: 4]
	int BulletID_3_7D8136C0262C958112A0BCFE0A90D7B4;//[Offset: 0x1c, Size: 4]
	int IsShow_4_4C2F70C02E814ECD68323BF600FA3D47;//[Offset: 0x20, Size: 4]
	FString VerticalRecoil_5_34839F80315AFB6669A7FB050FB382AC;//[Offset: 0x24, Size: 12]
	FString Shake_6_7E9B148046BA7452166E7E6601E6CE35;//[Offset: 0x30, Size: 12]
	int WeaponType_7_482A1C8059A944560A6FD461055DA945;//[Offset: 0x3c, Size: 4]
	FString ShootInterval_8_49712E00653738B65705EBAE034CD55C;//[Offset: 0x40, Size: 12]
	FString HorizontalRecoil_9_1EB63B80354249506510039F02A0FBAC;//[Offset: 0x4c, Size: 12]
	FString ReloadSpeed_10_13836B803042987230C406AD067DC2C4;//[Offset: 0x58, Size: 12]
	FString ClipCapacity_11_3EA5A7000BBA4130106249B307164639;//[Offset: 0x64, Size: 12]
	FString WeaponName_12_715DB4407742DAAB0A7C764D055D6F15;//[Offset: 0x70, Size: 12]
	FString ExtCapcity_13_128419002CEBB022532CC2890B99BD99;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: BP_STRUCT_LocalizeRes_type
	FString TextValue_0_4D37165A410D67320AF278A1C1028E4F;//[Offset: 0x0, Size: 12]
	int TextId_1_20B947934F165858A322E599888F816E;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BattleWeaponItemDisplayData
	FString ItemName;//[Offset: 0x0, Size: 12]
	FString WhiteIconPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BattleItemHandle_VirtualCharacter_C.BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object
	BattleItemData ExtractItemData(<int,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x446e168

--------------------------------
Class: BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object

--------------------------------
Class: ItemRecordData7
	int ItemType_2_CC000069486107946E5ECAAF21EFAF0B;//[Offset: 0x0, Size: 4]
	int WeightforOrder_4_E72E5D4C4B2B91B238136B89316C7DEF;//[Offset: 0x4, Size: 4]
	float UnitWeight_f_7_1AEC4D7B4F3AC4894A33FBAAC0165559;//[Offset: 0x8, Size: 4]
	int MaxCount_10_ADC2EE5A44ABBCF4C00515AB724AD5AA;//[Offset: 0xc, Size: 4]
	bool AutoEquipandDrop_13_CC1AD656453F2BAB5FCB9586C6793874;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool Consumable_15_B2094A1644FCC44D1EBC08B3D9578342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool Equippable_17_D54B5E3C4807D350ED7429BF09AAB7D1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]

--------------------------------
Class: ItemRecordData5
	int ItemID_2_2F9636FC420298B4EF34E588F58E38B0;//[Offset: 0x0, Size: 4]
	int ItemType_4_B2ED20EE489C1F500EBA389884CAC16D;//[Offset: 0x4, Size: 4]
	FString ItemName_7_DEB27023488D6036B9B24AB5DB114F34;//[Offset: 0x8, Size: 12]
	FString ItemBigIcon_9_A4409DA14B47CD0F4D6A7EBB7CBF2F2F;//[Offset: 0x14, Size: 12]
	FString ItemDesc_11_8AB433674EC5E4AF7F82069136B23CF5;//[Offset: 0x20, Size: 12]

--------------------------------
Class: BP_STRUCT_AvatarDefaultConfig_type
	int id_0_582DD74020EEE8C12D00E1A40C84B664;//[Offset: 0x0, Size: 4]
	FString pant_1_00F930C0654EFFCD6B08CAF404B7FCD4;//[Offset: 0x4, Size: 12]
	FString shirt_2_53D54E8062374FD817805CCA0B7038D4;//[Offset: 0x10, Size: 12]
	FString shoe_3_12522FC065073BE56B0E507104B703D5;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: BP_Rifle_AKM_10000_C.BP_LobbyWeapon_C.STExtraLobbyWeapon.STExtraWeapon.LuaActor.Actor.Object
	void UserConstructionScript();// 0x446e168
	LobbyWeaponAnimList_Rifle_C* LobbyWeaponAnimList_Rifle;//[Offset: 0x950, Size: 4]

--------------------------------
Class: LobbyWeaponAnimList_Rifle_C.AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: BP_WEP_Machete_10000_C.BP_LobbyWeapon_C.STExtraLobbyWeapon.STExtraWeapon.LuaActor.Actor.Object
	Transform GetWeaponAttachToBackRelativeTransformByBagLevel_Lobby(int Level, int SideType, Transform CallFunc_MakeTransform_ReturnValue);// 0x446e168
	void UserConstructionScript();// 0x446e168
	LobbyWeaponAnimList_Melee_C* LobbyWeaponAnimList_Melee;//[Offset: 0x950, Size: 4]

--------------------------------
Class: LobbyWeaponAnimList_Melee_C.AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
