//Generated by @snakee2019 (telegram)

Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 12]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 12]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60, Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c, Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74, Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78, Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c, Size: 136]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x108, Size: 4]
	Object*[] SyncPreLoadSet;//[Offset: 0x10c, Size: 12]
	NavigationSystem* NavigationSystem;//[Offset: 0x134, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x138, Size: 4]
	GameStateBase* GameState;//[Offset: 0x13c, Size: 4]
	AISystemBase* AISystem;//[Offset: 0x140, Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x144, Size: 4]
	Level*[] Levels;//[Offset: 0x148, Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x154, Size: 12]
	Level* CurrentLevel;//[Offset: 0x164, Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x168, Size: 4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x16c, Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x178, Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x17c, Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x6ec, Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x732, Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x49216cc

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 4]
	Model* Model;//[Offset: 0x8c, Size: 4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x254, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x264, Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x268, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 1]
	int HighDeviceMemoryTotalSize;//[Offset: 0x2c8, Size: 4]
	int LowDeviceMemoryTotalSize;//[Offset: 0x2cc, Size: 4]
	WorldSettings* WorldSettings;//[Offset: 0x308, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x310, Size: 12]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x66c, Size: 4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x2b4, Size: 4]
	float MinDrawDistance;//[Offset: 0x2b8, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x2bc, Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x2c0, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x2c4, Size: 4]
	bool UseScopeDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x2c9, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2ca, Size: 1]
	enum LightmapType;//[Offset: 0x2cb, Size: 1]
	bool bForceInjectToHierarchicalSurfel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cc, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cc, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cc, Size: 1]
	bool bAsyncGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cd, Size: 1]
	bool bGenerateOverlapEventsByBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cd, Size: 1]
	bool bGenerateOverlapEventsByRoot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cd, Size: 1]
	bool bGenerateOverlapEventsByBoundsDoubleCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cd, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cd, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cd, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cd, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cd, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ce, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ce, Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ce, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ce, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ce, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ce, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ce, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ce, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cf, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cf, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cf, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cf, Size: 1]
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cf, Size: 1]
	bool bIdeaOutlineNew;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cf, Size: 1]
	bool bIdeaOutlineOcclusionHighlight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cf, Size: 1]
	bool bIdeaOverrideOutlineAndOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cf, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x2d4, Size: 16]
	LinearColor IdeaOutlineOcclusionColor;//[Offset: 0x2e4, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x2f8, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x2fd, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x300, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x310, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	bool bEnableTransparentZWrite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 1]
	bool bOnlyAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x320, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x320, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x320, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x321, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x321, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x321, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x321, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x321, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x321, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x321, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x321, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x322, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x322, Size: 1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x322, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x322, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x322, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x322, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x322, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x322, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x323, Size: 1]
	bool bReceiveLandscapeShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x323, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x323, Size: 1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x323, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x323, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x323, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x323, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x323, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x325, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x327, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x328, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x329, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x32c, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x330, Size: 4]
	int TranslucencySortGroupPriority;//[Offset: 0x334, Size: 4]
	int VisibilityId;//[Offset: 0x338, Size: 4]
	byte PrimitiveShadingStrategy;//[Offset: 0x340, Size: 1]
	byte ShadingRate;//[Offset: 0x341, Size: 1]
	float FOVAdaptiveShadingFactor;//[Offset: 0x344, Size: 4]
	bool bUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	bool bAffectAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x350, Size: 4]
	float BoundsScale;//[Offset: 0x358, Size: 4]
	float OCBoundsScale;//[Offset: 0x35c, Size: 4]
	int OCBoundsExtent;//[Offset: 0x360, Size: 4]
	float LastSubmitTime;//[Offset: 0x364, Size: 4]
	float LastRenderTime;//[Offset: 0x368, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x36c, Size: 4]
	float ShadowLastRenderTime;//[Offset: 0x370, Size: 4]
	bool bFreezeMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x378, Size: 12]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x384, Size: 12]
	MaterialInterface*[] LODDefault;//[Offset: 0x398, Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x3f0, Size: 320]
	delegate OnComponentHit;//[Offset: 0x530, Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x53c, Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x548, Size: 12]
	delegate OnComponentWake;//[Offset: 0x554, Size: 12]
	delegate OnComponentSleep;//[Offset: 0x560, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x578, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x584, Size: 12]
	delegate OnClicked;//[Offset: 0x590, Size: 12]
	delegate OnReleased;//[Offset: 0x59c, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x5a8, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x5b4, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x5c0, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x5cc, Size: 12]
	<int,MaterialInterface*> LowLevelLODMaterial;//[Offset: 0x5e4, Size: 60]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x620, Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x624, Size: 60]
	bool WasRecentlyRendered(float Tolerance);// 0x65ea898
	void WakeRigidBody(FName BoneName);// 0x65ea818
	void WakeAllRigidBodies();// 0x3950fb8
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x65ea780
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x65ea6fc
	void SetUnderWater(bool bNewUnderWater);// 0x65ea67c
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x65ea604
	void SetTranslucentSortGroupPriority(int NewTranslucentSortGroupPriority);// 0x65ea58c
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x65ea50c
	void SetSimulatePhysics(bool bSimulate);// 0x5a0fd44
	void SetRenderInMono(bool bValue);// 0x65ea48c
	void SetRenderInMainPass(bool bValue);// 0x65ea40c
	void SetRenderCustomDepth(bool bValue);// 0x65ea38c
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x65ea30c
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x65ea28c
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x65ea178
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x65ea054
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x65ea054
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x65e9f40
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x65e9e2c
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x65e9cf4
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x65e9cf4
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x65e9c74
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x65e9bf4
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x65e9b70
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x37cd7dc
	void SetMaterialByNameAsyncCallBack(FName MaterialSlotName, MaterialInterface* AssetPtr);// 0x65e99a0
	void SetMaterialByNameAsync(FName MaterialSlotName, FString MaterialPath);// 0x65e97f4
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x65e9730
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x65e966c
	void SetMassScale(FName BoneName, float InMassScale);// 0x65e95a0
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x65e9484
	void SetMaskFilter(int InMaskFilter);// 0x65e940c
	void SetLODDefault(int LODIndex, MaterialInterface* LODMat);// 0x65e9350
	void SetLockedAxis(byte LockedAxis);// 0x65e92d0
	void SetLinearDamping(float InDamping);// 0x65e9250
	void SetIdeaOverrideOutlineAndOcclusion(bool bOutlineAndOcclusion);// 0x3597804
	void SetIdeaOutlineUseNormalInVertexColor(bool bNewUseNormalInVertexColor);// 0x3597804
	void SetIdeaOutlineOcclusionHighlight(bool bOcclusionHighlight);// 0x3597804
	void SetIdeaOutlineOcclusionColor(out const LinearColor InOcclusionColor);// 0x65e91cc
	void SetIdeaOutlineNew(bool bNew);// 0x3597804
	void SetEnableGravity(bool bGravityEnabled);// 0x65d22fc
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x65e914c
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x65e90d4
	void SetDrawDyeing(bool bNewDrawOutline);// 0x65e9054
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x65e8fdc
	void SetCustomDepthStencilValue(int Value);// 0x65e8f64
	void SetCullDistance(float NewCullDistance);// 0x65e8eec
	void SetConstraintMode(byte ConstraintMode);// 0x6474480
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x65e8e28
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x65e8da8
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x6504830
	void SetCollisionObjectType(byte Channel);// 0x37e2930
	void SetCollisionEnabled(byte NewType);// 0x65e8d28
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x65e8c68
	void SetCastShadow(bool NewCastShadow);// 0x659579c
	void SetCastPhotonShadow(bool bNewCastPhotonShadow);// 0x65e8be8
	void SetBoundsScale(float NewBoundsScale);// 0x65e8b70
	void SetAngularDamping(float InDamping);// 0x37b58c8
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x65e8aa4
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x65e89c8
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x65e88c0
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x65e87e4
	void SetAllMassScale(float InMassScale);// 0x65e8764
	void SetAffectAO(bool bNewAffectAO);// 0x65e86e4
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x65e85f8
	void PutRigidBodyToSleep(FName BoneName);// 0x65e8580
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x65e84b8
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x65e83e4
	void K2_SetMoveIgnoreMask(int InIgnoreMask);// 0x65e8370
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x65e8028
	bool K2_IsQueryCollisionEnabled();// 0x65e7fe8
	bool K2_IsPhysicsCollisionEnabled();// 0x65e7fa8
	bool K2_IsCollisionEnabled();// 0x65e7f70
	int K2_GetMoveIgnoreMask();// 0x65e7f54
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x65e7ed4
	bool IsOverlappingActor(const Actor* Other);// 0x65e7e54
	bool IsGravityEnabled();// 0x38e350c
	bool IsAnyRigidBodyAwake();// 0x65e7e24
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x65e7d60
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x65e7c9c
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x65e7c60
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x65e7b7c
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x65e7ae8
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x65e7a54
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x65e79a8
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x65e79a8
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x65e78dc
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x65e77c8
	int GetNumMaterials();// 0x65e7798
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x65e76bc
	MaterialInterface* GetMaterialAsync(int ElementIndex, delegate MaterialCallback);// 0x65e75c4
	MaterialInterface* GetMaterial(int ElementIndex);// 0x65e753c
	float GetMassScale(FName BoneName);// 0x65e74b4
	float GetMass();// 0x65e7484
	int GetMaskFilter();// 0x65e7468
	Vector GetLocalCenterOfMass(FName BoneName);// 0x65e73d4
	float GetLinearDamping();// 0x38e0eb4
	Vector GetInertiaTensor(FName BoneName);// 0x65e7338
	byte GetCollisionResponseToChannel(byte Channel);// 0x65e72b0
	FName GetCollisionProfileName();// 0x65e7270
	byte GetCollisionObjectType();// 0x65e7240
	byte GetCollisionEnabled();// 0x65e7210
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x65e70e0
	Vector GetCenterOfMass(FName BoneName);// 0x65e704c
	float GetAngularDamping();// 0x65e701c
	void ForceRecoverMaterial(int ElementIndex);// 0x65e6f9c
	void ForceClearMaterial(int ElementIndex);// 0x65e6f1c
	MaterialInstanceDynamic* CreateDynamicMaterialInstanceAsync(int ElementIndex, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x65e6de0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x65e6d14
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterialAsync(int ElementIndex, MaterialInterface* Parent, delegate MaterialInstCallback);// 0x65e6bd8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x65e6b0c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicAsync(int ElementIndex, delegate MaterialInstCallback);// 0x65e6a14
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x37e1bac
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x65e6954
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x65e6894
	void ClearMoveIgnoreComponents();// 0x65e6864
	void ClearMoveIgnoreActors();// 0x65e6850
	bool CanCharacterStepUp(Pawn* Pawn);// 0x65e67c8
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x65e6584
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x65e6694
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x65e6584
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x65e63e0
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x65e623c
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x65e6124
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x65e600c
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x65e5ef4
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x65e5ddc
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x65e5cc4
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x65e5bac
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x65e5a70
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x65e5958

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xc8, Size: 4]
	FName AttachSocketName;//[Offset: 0xd0, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 12]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe4, Size: 12]
	Vector RelativeLocation;//[Offset: 0x118, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x124, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x130, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x1f0, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x200, Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x208, Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x210, Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x218, Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x220, Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x228, Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	byte Mobility;//[Offset: 0x22d, Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x230, Size: 4]
	byte DetailMode;//[Offset: 0x234, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x280, Size: 12]
	void ToggleVisibility(bool bPropagateToChildren);// 0x6601b2c
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x6601a68
	void SetWorldScale3D(Vector NewScale);// 0x66019f8
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x6601920
	void SetSkipUpdateChildTransforms(bool EnableSkipUpdateChildTransforms);// 0x66018a4
	void SetRelativeScale3D(Vector NewScale3D);// 0x4414bec
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x66017d0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x66016b0
	void ResetRelativeTransform();// 0x660169c
	void OnRep_Visibility(bool OldValue);// 0x660161c
	void OnRep_Transform();// 0x6601608
	void OnRep_AttachSocketName();// 0x66015f4
	void OnRep_AttachParent();// 0x66015f4
	void OnRep_AttachChildren();// 0x66015e0
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x66013c0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6601200
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6601008
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6600e50
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6600c30
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6600a6c
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6600874
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x66006bc
	Transform K2_GetComponentToWorld();// 0x660065c
	Vector K2_GetComponentScale();// 0x6600614
	Rotator K2_GetComponentRotation();// 0x66005cc
	Vector K2_GetComponentLocation();// 0x6600584
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x6600434
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x660024c
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x66000f0
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x65ffed0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x65ffd18
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x65ffb60
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x65ff9a8
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x65ff7f0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x65ff5d0
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x65ff418
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x65ff260
	bool IsVisible();// 0x39c7b4c
	bool IsSimulatingPhysics(FName BoneName);// 0x65ff1d8
	bool IsAnySimulatingPhysics();// 0x36d2874
	Vector GetUpVector();// 0x65ff190
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x65ff094
	Rotator GetSocketRotation(FName InSocketName);// 0x65feff8
	Quat GetSocketQuaternion(FName InSocketName);// 0x65fef5c
	Vector GetSocketLocation(FName InSocketName);// 0x65feec0
	Vector GetRightVector();// 0x65fee78
	Transform GetRelativeTransform();// 0x65fee18
	PhysicsVolume* GetPhysicsVolume();// 0x65fedf0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x65fed24
	int GetNumChildrenComponents();// 0x65fecfc
	Vector GetForwardVector();// 0x65cd418
	Vector GetComponentVelocity();// 0x65fecac
	Transform GetComponentTransformViewTranslatedBP();// 0x65fec70
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x65feb70
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x65fea4c
	SceneComponent* GetChildComponent(int ChildIndex);// 0x65fe9cc
	FName GetAttachSocketName();// 0x65fe9b0
	SceneComponent* GetAttachParent();// 0x4236c18
	FName[] GetAllSocketNames();// 0x65fe8f0
	bool DoesSocketExist(FName InSocketName);// 0x65fe868
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x65fe790

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bFastCreation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	bool bCallPreReplication;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x70, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x88, Size: 1]
	enum CreationMethod;//[Offset: 0x8a, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x8c, Size: 12]
	delegate OnComponentActivated;//[Offset: 0x9c, Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xa8, Size: 12]
	void ToggleActive();// 0x3716624
	void SetTickGroup(byte NewTickGroup);// 0x6478a2c
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x64789ac
	void SetIsReplicated(bool ShouldReplicate);// 0x647892c
	void SetComponentTickInterval(float TickInterval);// 0x64788b4
	void SetComponentTickEnabled(bool bEnabled);// 0x3efb534
	void SetAutoActivate(bool bNewAutoActivate);// 0x3515984
	void SetActive(bool bNewActive, bool bReset);// 0x64787dc
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x398993c
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x647875c
	void ReceiveTick(float DeltaSeconds);// 0x49216cc
	void ReceiveEndPlay(byte EndPlayReason);// 0x49216cc
	void ReceiveBeginPlay();// 0x49216cc
	void OnRep_Replicates();// 0x6478748
	void OnRep_IsActive();// 0x6478734
	void K2_DestroyComponent(Object* Object);// 0x64786bc
	bool IsComponentTickEnabled();// 0x6478694
	bool IsBeingDestroyed();// 0x6478674
	bool IsActive();// 0x3baca28
	Actor* GetOwner();// 0x6478658
	float GetComponentTickInterval();// 0x6478630
	void ForceNetUpdate();// 0x3721bbc
	void Deactivate();// 0x37165ec
	bool ComponentHasTag(FName Tag);// 0x64785b0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6478530
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x64784b0
	void Activate(bool bReset);// 0x35158fc

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x330, Size: 4]
	int Priority;//[Offset: 0x334, Size: 4]
	float FluidFriction;//[Offset: 0x338, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x308, Size: 1]
	Color BrushColor;//[Offset: 0x30c, Size: 4]
	int PolyFlags;//[Offset: 0x310, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 1]
	Model* Brush;//[Offset: 0x318, Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x31c, Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x324, Size: 12]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float CustomTimeDilation;//[Offset: 0x5c, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x61, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x62, Size: 1]
	byte RemoteRole;//[Offset: 0x63, Size: 1]
	Actor* Owner;//[Offset: 0x64, Size: 4]
	byte WorldParallelismID;//[Offset: 0x68, Size: 1]
	FName NetDriverName;//[Offset: 0x70, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x78, Size: 72]
	float InitialLifeSpan;//[Offset: 0xc0, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xc8, Size: 56]
	byte Role;//[Offset: 0x100, Size: 1]
	byte NetDormancy;//[Offset: 0x101, Size: 1]
	byte AutoReceiveInput;//[Offset: 0x102, Size: 1]
	int InputPriority;//[Offset: 0x104, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x108, Size: 4]
	float NetCullDistanceSquared;//[Offset: 0x10c, Size: 4]
	int NetTag;//[Offset: 0x110, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x118, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x11c, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x120, Size: 4]
	byte ActorReplicateFreqLODGroupID;//[Offset: 0x124, Size: 1]
	bool bLowRepFreqOptimizedNAK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x125, Size: 1]
	float NetPriority;//[Offset: 0x128, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x130, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x130, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x130, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x130, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x130, Size: 1]
	bool bNetDormancyForReplay;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x130, Size: 1]
	bool bSkipComparePropertiesForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x131, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x131, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x131, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x131, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x131, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x132, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x132, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x133, Size: 1]
	Pawn* Instigator;//[Offset: 0x140, Size: 4]
	Actor*[] Children;//[Offset: 0x144, Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x150, Size: 4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x154, Size: 12]
	FName[] Layers;//[Offset: 0x168, Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x174, Size: 8]
	FName[] Tags;//[Offset: 0x17c, Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x188, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x190, Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x19c, Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x1a8, Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x1b4, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1c0, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1cc, Size: 12]
	delegate OnClicked;//[Offset: 0x1d8, Size: 12]
	delegate OnReleased;//[Offset: 0x1e4, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1f0, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x1fc, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x208, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x214, Size: 12]
	delegate OnActorHit;//[Offset: 0x220, Size: 12]
	delegate OnDestroyed;//[Offset: 0x22c, Size: 12]
	delegate OnEndPlay;//[Offset: 0x238, Size: 12]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2bc, Size: 12]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2c8, Size: 12]
	int ParallelWorldId;//[Offset: 0x2e4, Size: 4]
	bool bAlwaysRelevantToParallelWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	delegate OnActorEnterParallelWorld;//[Offset: 0x2ec, Size: 12]
	delegate OnActorLeaveParallelWorld;//[Offset: 0x2f8, Size: 12]
	int RealParallelWorldId;//[Offset: 0x304, Size: 4]
	bool WasRecentlyRendered(float Tolerance);// 0x64747f0
	void UserConstructionScript();// 0x49216cc
	void TearOff();// 0x355f9e4
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x6474734
	void SetTickGroup(byte NewTickGroup);// 0x64746bc
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x647463c
	void SetReplicates(bool bInReplicates);// 0x64745bc
	void SetReplicateMovement(bool bInReplicateMovement);// 0x38f09ec
	void SetParallelWorldId(int InWorldId, int Masks);// 0x6474500
	void SetOwner(Actor* NewOwner);// 0x3ef7904
	void SetNetUpdateGroupID(byte InGroupID);// 0x6474480
	void SetNetUpdateGroup(Actor* InConnectionActor);// 0x6474400
	void SetNetDormancy(byte NewDormancy);// 0x6474388
	void SetLifeSpan(float InLifespan);// 0x6474308
	void SetActorTickInterval(float TickInterval);// 0x6474290
	void SetActorTickEnabled(bool bEnabled);// 0x6474210
	void SetActorScale3D(Vector NewScale3D);// 0x64741a0
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x6474130
	void SetActorHiddenInGame(bool bNewHidden);// 0x3efb7dc
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x64740b0
	void ResetParallelWorldId(int Masks);// 0x6474038
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x35affe4
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x35b0064
	void ReceiveTick(float DeltaSeconds);// 0x49216cc
	void ReceiveReInitForReplay();// 0x49216cc
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x49216cc
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x49216cc
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x49216cc
	void ReceiveEndPlay(byte EndPlayReason);// 0x49216cc
	void ReceiveDestroyed();// 0x49216cc
	void ReceiveBeginPlay();// 0x49216cc
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x49216cc
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x49216cc
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x49216cc
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x49216cc
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x49216cc
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x49216cc
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x49216cc
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x49216cc
	void ReceiveActorEndCursorOver();// 0x49216cc
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x49216cc
	void ReceiveActorBeginCursorOver();// 0x49216cc
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x6473f24
	void OnRep_ReplicateMovement();// 0x35b23f8
	void OnRep_ReplicatedMovement();// 0x3605848
	void OnRep_Owner();// 0x3716624
	void OnRep_Instigator();// 0x355f1c4
	void OnRep_AttachmentReplication();// 0x372292c
	void MarkNetDormancyForReplay(bool bInDormancyForReplay);// 0x6473ea4
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x6473d08
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x3bb2ab0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x6473c40
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6473a20
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x6473950
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6473730
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6473578
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x64733c0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x64731b4
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6472ff8
	void K2_OnReset();// 0x49216cc
	void K2_OnEndViewTarget(PlayerController* PC);// 0x49216cc
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x49216cc
	SceneComponent* K2_GetRootComponent();// 0x3a651e0
	Rotator K2_GetActorRotation();// 0x6472f04
	Vector K2_GetActorLocation();// 0x6472e40
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x6472d40
	void K2_DestroyComponent(ActorComponent* Component);// 0x6472cc8
	void K2_DestroyActor();// 0x350fd74
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6472ae8
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6472908
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x64727b4
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x6472660
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6472440
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6472288
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x64720d0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6471eb0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6471cf0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6471b38
	bool IsOverlappingActor(const Actor* Other);// 0x6471ab8
	bool IsChildActor();// 0x6471a90
	bool IsActorTickEnabled();// 0x6471a68
	bool IsActorBeingDestroyed();// 0x6471a44
	bool HasAuthority();// 0x6471a1c
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x647199c
	Vector GetVelocity();// 0x396f5b8
	Transform GetTransform();// 0x6471950
	bool GetTickableWhenPaused();// 0x6471928
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x64718a8
	byte GetRole();// 0x6471880
	byte GetRemoteRole();// 0x6471864
	ChildActorComponent* GetParentComponent();// 0x647183c
	Actor* GetParentActor();// 0x6471814
	int GetParallelWorldId();// 0x64717ec
	Actor* GetOwner();// 0x64717d0
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x6471704
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x64715f0
	byte GetLocalRole();// 0x64715d4
	float GetLifeSpan();// 0x64715a4
	Controller* GetInstigatorController();// 0x647157c
	Pawn* GetInstigator();// 0x36e580c
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x6471278
	float GetInputAxisValue(const FName InputAxisName);// 0x64711f8
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x6470f00
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x6470e80
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x6470e00
	float GetGameTimeSinceCreation();// 0x6470dd8
	float GetDotProductTo(const Actor* OtherActor);// 0x6470d58
	float GetDistanceTo(const Actor* OtherActor);// 0x6470cd8
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x6470b84
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x6470a7c
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x64709fc
	FName GetAttachParentSocketName();// 0x64709bc
	Actor* GetAttachParentActor();// 0x6470994
	void GetAttachedActors(out Actor*[] OutActors);// 0x64708c8
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x64707ac
	Vector GetActorUpVector();// 0x6470738
	float GetActorTimeDilation();// 0x6470710
	float GetActorTickInterval();// 0x64706e8
	Vector GetActorScale3D();// 0x64706a0
	Vector GetActorRightVector();// 0x647062c
	Vector GetActorRelativeScale3D();// 0x64705e4
	Vector GetActorForwardVector();// 0x6470570
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x6470490
	bool GetActorEnableCollision();// 0x6470470
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x6470348
	void ForceNetUpdate();// 0x3721bbc
	void ForceNetConsider();// 0x647032c
	void FlushNetDormancy();// 0x6470318
	void EnableInput(PlayerController* PlayerController);// 0x36b20c0
	void DisableInput(PlayerController* PlayerController);// 0x37f9af4
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x6470298
	bool BeenInParallelWorld();// 0x6470270
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x64701f0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x38ed81c
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x6470030
	bool ActorHasTag(FName Tag);// 0x646ffa4

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x660, Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x664, Size: 4]
	Vector PrePivot;//[Offset: 0x668, Size: 12]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 52]
	FName BoneName;//[Offset: 0x50, Size: 8]
	byte PhysicsType;//[Offset: 0x58, Size: 1]
	bool bCustomizePhysicsBlendWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0x5c, Size: 4]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x64, Size: 4]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x6c, Size: 12]
	byte CollisionReponse;//[Offset: 0x78, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0x7c, Size: 12]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0x88, Size: 12]
	byte[] BoxCollisionEnabledList;//[Offset: 0x94, Size: 12]
	byte[] ConvexCollisionEnabledList;//[Offset: 0xa0, Size: 12]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xac, Size: 12]
	byte CollisionTraceFlag;//[Offset: 0xb8, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xc0, Size: 320]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x200, Size: 16]
	float BuildScale;//[Offset: 0x210, Size: 4]
	Vector BuildScale3D;//[Offset: 0x214, Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 12]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Vector Center;//[Offset: 0x50, Size: 12]
	float Radius;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float X;//[Offset: 0x78, Size: 4]
	float Y;//[Offset: 0x7c, Size: 4]
	float Z;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float Radius;//[Offset: 0x78, Size: 4]
	float Length;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10, Size: 12]
	Box ElemBox;//[Offset: 0x1c, Size: 28]
	Transform Transform;//[Offset: 0x40, Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float Restitution;//[Offset: 0x24, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	Color MaterialColor;//[Offset: 0x2c, Size: 4]
	float Density;//[Offset: 0x30, Size: 4]
	float RaiseMassToPower;//[Offset: 0x34, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x38, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x3c, Size: 4]
	byte SurfaceType;//[Offset: 0x40, Size: 1]
	float TireFrictionScale;//[Offset: 0x44, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x48, Size: 12]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: StaticMesh.Object
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int MinLOD;//[Offset: 0x2c, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 12]
	StaticMaterial[] StaticMaterials;//[Offset: 0x3c, Size: 12]
	float LightmapUVDensity;//[Offset: 0x48, Size: 4]
	int LightMapResolution;//[Offset: 0x4c, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x50, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x54, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x5c, Size: 4]
	int LODForCollision;//[Offset: 0x60, Size: 4]
	float CullingScreenSize;//[Offset: 0x64, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bLazyLoadBulkData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 1]
	bool bEnableTransparentRenderOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xa4, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd4, Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xe8, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xf4, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x100, Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x11c, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x128, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bEnableMeshletCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	ClusterNode_Mesh[] ClusterNodesTree;//[Offset: 0x138, Size: 12]
	int ElementToIgnoreForTexFactor;//[Offset: 0x144, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x148, Size: 12]
	NavCollision* NavCollision;//[Offset: 0x154, Size: 4]
	int GetNumSections(int InLOD);// 0x6626f1c
	int GetNumLODs();// 0x6626ef4
	int GetMaterialIndex(FName MaterialSlotName);// 0x6626e74
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x6626df4
	BoxSphereBounds GetBounds();// 0x6626da0
	Box GetBoundingBox();// 0x6626d4c

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20, Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x40, Size: 12]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x6590314
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x65901ac
	PhysicalMaterial* GetPhysicalMaterial();// 0x378fc50
	Material* GetBaseMaterial();// 0x6590184

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x58, Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x90, Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc8, Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0x100, Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x138, Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x170, Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a8, Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e8, Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x220, Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x258, Size: 56]
	byte MaterialDomain;//[Offset: 0x290, Size: 1]
	byte BlendMode;//[Offset: 0x291, Size: 1]
	byte DecalBlendMode;//[Offset: 0x292, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x293, Size: 1]
	byte ShadingModel;//[Offset: 0x294, Size: 1]
	byte ShadingRate;//[Offset: 0x295, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x298, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x29c, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	byte OITBlendMode;//[Offset: 0x2a1, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8, Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8, Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328, Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360, Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398, Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0, Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408, Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x440, Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478, Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678, Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0, Size: 56]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x6f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x740, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x790, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x790, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x790, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x790, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x790, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x790, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x790, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x794, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x798, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x79c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x7a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x7a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x7ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x7b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x7b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x7b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x7c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7ce, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cf, Size: 1]
	bool bProcessInGammaSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d1, Size: 1]
	bool bShadowUseTentFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d1, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d1, Size: 1]
	bool bUsedWithLandscapeShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d1, Size: 1]
	bool bUseLandscapeMultiLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d2, Size: 1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d2, Size: 1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d2, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d2, Size: 1]
	byte ShadowOverride;//[Offset: 0x7d3, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x7d4, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d5, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d5, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d5, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d5, Size: 1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d5, Size: 1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d5, Size: 1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d5, Size: 1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d5, Size: 1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d6, Size: 1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d6, Size: 1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d6, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d6, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d6, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d6, Size: 1]
	bool bApplyFogInscattering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d6, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d6, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x7d7, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 1]
	bool bUsedWithTexture2DArrayShaderVariant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 1]
	float MaxDisplacement;//[Offset: 0x7dc, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e0, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e0, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e0, Size: 1]
	int EditorX;//[Offset: 0x7e4, Size: 4]
	int EditorY;//[Offset: 0x7e8, Size: 4]
	int EditorPitch;//[Offset: 0x7ec, Size: 4]
	int EditorYaw;//[Offset: 0x7f0, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x7f4, Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x800, Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x80c, Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x818, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x818, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x818, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x818, Size: 1]
	bool bClearCoatBottomIBLOptClose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x818, Size: 1]
	bool bUsedWithMobileTAA;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x818, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x818, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x819, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x819, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x819, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x819, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x819, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x81c, Size: 4]
	byte BlendableLocation;//[Offset: 0x820, Size: 1]
	int BlendablePriority;//[Offset: 0x824, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	byte RefractionMode;//[Offset: 0x829, Size: 1]
	float RefractionDepthBias;//[Offset: 0x82c, Size: 4]
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x830, Size: 1]
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x830, Size: 1]
	bool bEnableMeshDiscard;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x830, Size: 1]
	bool bEnableMeshArcPlaneClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x830, Size: 1]
	bool bUsedWithMultiPassInstanceID;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x830, Size: 1]
	bool bUsedWithMobileReadScene;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x830, Size: 1]
	bool bIsEnhancedUImage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x830, Size: 1]
	Guid stateID;//[Offset: 0x834, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x8dc, Size: 12]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Color Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector Constant;//[Offset: 0x34, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float ConstantX;//[Offset: 0x34, Size: 4]
	float ConstantY;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 4]
	FString Desc;//[Offset: 0x24, Size: 12]
	Color BorderColor;//[Offset: 0x30, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38, Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	FString Description;//[Offset: 0x2c, Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c, Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 12]
	int Mask;//[Offset: 0xc, Size: 4]
	int MaskR;//[Offset: 0x10, Size: 4]
	int MaskG;//[Offset: 0x14, Size: 4]
	int MaskB;//[Offset: 0x18, Size: 4]
	int MaskA;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20, Size: 16]
	int LODBias;//[Offset: 0x30, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x48, Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x54, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	byte CompressionSettings;//[Offset: 0x59, Size: 1]
	byte Filter;//[Offset: 0x5a, Size: 1]
	byte LODGroup;//[Offset: 0x5b, Size: 1]
	byte CrunchSetting;//[Offset: 0x5c, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x60, Size: 4]
	byte BasisSetting;//[Offset: 0x64, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x68, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 12]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 12]
	Vector RelativeScale;//[Offset: 0x40, Size: 12]
	FString Tag;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ClusterNode_Mesh
	Vector BoundMin;//[Offset: 0x0, Size: 12]
	int FirstChild;//[Offset: 0xc, Size: 4]
	Vector BoundMax;//[Offset: 0x10, Size: 12]
	int LastChild;//[Offset: 0x1c, Size: 4]
	int FirstInstance;//[Offset: 0x20, Size: 4]
	int LastInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58, Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64, Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70, Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20, Size: 4]
	Color DrawColor;//[Offset: 0x24, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19, Size: 1]
	byte DOFMode;//[Offset: 0x1a, Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b, Size: 1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 4]
	float MassInKgOverride;//[Offset: 0x64, Size: 4]
	float LinearDamping;//[Offset: 0x68, Size: 4]
	float AngularDamping;//[Offset: 0x6c, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 12]
	Vector COMNudge;//[Offset: 0x7c, Size: 12]
	float MassScale;//[Offset: 0x88, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 12]
	byte ObjectType;//[Offset: 0x98, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4, Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8, Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0, Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8, Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 1]
	byte EndTickGroup;//[Offset: 0x5, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	float TickInterval;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]
	bool LocationQuantizationLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	FName LocationQuantizationLODGroup;//[Offset: 0x38, Size: 8]
	byte ForcedLocationQuantizationLOD;//[Offset: 0x40, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 12]
	FName AttachSocket;//[Offset: 0x28, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 4]
	byte ExtraData;//[Offset: 0x34, Size: 1]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x650a828
	bool WasControllerKeyJustPressed(Key Key);// 0x650a828
	bool IsControllerKeyDown(Key Key);// 0x650a828
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x650a6a8
	Vector GetControllerVectorKeyState(Key Key);// 0x650a3a4
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x650a2c4
	float GetControllerKeyTimeDown(Key Key);// 0x6509ea8
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x650a1a0
	float GetControllerAnalogKeyState(Key Key);// 0x6509ea8

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30c, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30c, Size: 1]
	bool bRoleReplicationOptim;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30c, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30c, Size: 1]
	float BaseEyeHeight;//[Offset: 0x310, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x314, Size: 1]
	enum AutoPossessAI;//[Offset: 0x315, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x318, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x31c, Size: 4]
	byte RemoteViewPitch;//[Offset: 0x320, Size: 1]
	Controller* LastHitBy;//[Offset: 0x324, Size: 4]
	Controller* Controller;//[Offset: 0x328, Size: 4]
	Vector ControlInputVector;//[Offset: 0x334, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x340, Size: 12]
	void SpawnDefaultController();// 0x65c59dc
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x3a9cb08
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x65c590c
	void ReceiveUnpossessed(Controller* OldController);// 0x49216cc
	void ReceivePossessed(Controller* NewController);// 0x49216cc
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x65c57b8
	void OnRep_PlayerState();// 0x37a9314
	void OnRep_Controller();// 0x35d1618
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x65c56a4
	Vector K2_GetMovementInputVector();// 0x65c5634
	bool IsPlayerControlled();// 0x3a9ad64
	bool IsMoveInputIgnored();// 0x35a7980
	bool IsLocallyControlled();// 0x398f004
	bool IsControlled();// 0x65c567c
	Vector GetPendingMovementInputVector();// 0x65c5634
	Vector GetNavAgentLocation();// 0x64c05f4
	PawnMovementComponent* GetMovementComponent();// 0x39675c8
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x65c55bc
	Vector GetLastMovementInputVector();// 0x38f5768
	Rotator GetControlRotation();// 0x65c556c
	Controller* GetController();// 0x65c5550
	Rotator GetBaseAimRotation();// 0x65c5500
	void DetachFromControllerPendingDestroy();// 0x65c54e4
	Vector ConsumeMovementInputVector();// 0x65c5494
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x65c5380
	void AddControllerYawInput(float Val);// 0x65c5300
	void AddControllerRollInput(float Val);// 0x357d378
	void AddControllerPitchInput(float Val);// 0x65c5280

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x30c, Size: 4]
	Character* Character;//[Offset: 0x318, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x31c, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x320, Size: 4]
	Rotator ControlRotation;//[Offset: 0x324, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	FName StateName;//[Offset: 0x340, Size: 8]
	Actor* ObservedActor;//[Offset: 0x348, Size: 4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x34c, Size: 12]
	void UnPossess();// 0x393903c
	void StopMovement();// 0x40af520
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x40a14e8
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x39354b0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x64c0840
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x3934cac
	void ResetIgnoreMoveInput();// 0x35a8da0
	void ResetIgnoreLookInput();// 0x64c0824
	void ResetIgnoreInputFlags();// 0x35a88fc
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x49216cc
	void Possess(Pawn* InPawn);// 0x38b72f0
	void OnRep_PlayerState();// 0x37a9314
	void OnRep_Pawn();// 0x35d1618
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x64c0708
	Pawn* K2_GetPawn();// 0x3e8cea8
	bool IsPlayerController();// 0x64c06e8
	bool IsMoveInputIgnored();// 0x64c06b8
	bool IsLookInputIgnored();// 0x35a7980
	bool IsLocalPlayerController();// 0x64c0674
	bool IsLocalController();// 0x64c0644
	Actor* GetViewTarget();// 0x64b83e8
	Rotator GetDesiredRotation();// 0x64c05f4
	Rotator GetControlRotation();// 0x64c05a4
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x64c04d8
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x64c0410
	PlayerController* CastToPlayerController();// 0x64c03e8

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x34c, Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x350, Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x354, Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x358, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x388, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x3b8, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x3bc, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x3d0, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3e0, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x3f0, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3f4, Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3f8, Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3fc, Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x400, Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x408, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 1]
	byte Ping;//[Offset: 0x40d, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40e, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40e, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40e, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40e, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40e, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40e, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40e, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40e, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x410, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x414, Size: 4]
	int JumpMaxCount;//[Offset: 0x418, Size: 4]
	int JumpCurrentCount;//[Offset: 0x41c, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x420, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x424, Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x43c, Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x448, Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x454, Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4f0, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x530, Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x540, Size: 224]
	void UnCrouch(bool bClientSimulation);// 0x64b5bb8
	void StopJumping();// 0x35a88e0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x64b5b38
	void SetReplicateMovement(bool bInReplicateMovement);// 0x38f09ec
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x64b5a74
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x64b595c
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x64b57dc
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x64b57c8
	void OnRep_RootMotion();// 0x64b57b4
	void OnRep_ReplicatedBasedMovement();// 0x64b5798
	void OnRep_IsCrouched();// 0x64b577c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x49216cc
	void OnLanded(out const HitResult Hit);// 0x49216cc
	void OnJumped();// 0x3aadb34
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x64b5660
	void K2_UpdateCustomMovement(float DeltaTime);// 0x49216cc
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x49216cc
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x49216cc
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x49216cc
	void Jump();// 0x64b5644
	bool IsPlayingRootMotion();// 0x64b561c
	bool IsPlayingNetworkedRootMotionMontage();// 0x64b55f4
	bool IsJumpProvidingForce();// 0x35a62d0
	AnimMontage* GetCurrentMontage();// 0x64b55cc
	Vector GetBaseTranslationOffset();// 0x64b55a8
	Rotator GetBaseRotationOffsetRotator();// 0x64b5544
	float GetAnimRootMotionTranslationScale();// 0x64b551c
	void Crouch(bool bClientSimulation);// 0x64b5494
	void ClientCheatWalk();// 0x64b5478
	void ClientCheatGhost();// 0x64b545c
	void ClientCheatFly();// 0x38d0f3c
	bool CanJumpInternal();// 0x64b542c
	bool CanJump();// 0x64b5404
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x64b533c

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x804, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x808, Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x80c, Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x810, Size: 4]
	AnimInstance*[] SubInstances;//[Offset: 0x814, Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x820, Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x824, Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x858, Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x864, Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x884, Size: 4]
	enum UseAsyncScene;//[Offset: 0x888, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x889, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x88a, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x88b, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88c, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88c, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88c, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88c, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88c, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x88c, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x890, Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89c, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89c, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89c, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89c, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89c, Size: 1]
	float ClothBlendWeight;//[Offset: 0x8a0, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x8a8, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b4, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b4, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b4, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b5, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b6, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x8b8, Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8bd, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8bd, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8bd, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8bd, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8bd, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8bd, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8bd, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8bd, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8be, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x8c0, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x8d0, Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x998, Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x99c, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x9a0, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0xa90, Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0xb24, Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0xb28, Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2c, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2c, Size: 1]
	float DefaultPosition;//[Offset: 0xb30, Size: 4]
	float DefaultPlayRate;//[Offset: 0xb34, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xb38, Size: 4]
	float LastPoseTickTime;//[Offset: 0xb3c, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6a, Size: 1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x660a654
	void SuspendClothingSimulation();// 0x660a640
	void Stop();// 0x660a62c
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x660a51c
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x3597804
	void SetTeleportRotationThreshold(float Threshold);// 0x660a4a4
	void SetTeleportDistanceThreshold(float Threshold);// 0x660a42c
	void SetPosition(float InPos, bool bFireNotifies);// 0x660a368
	void SetPlayRate(float rate);// 0x660a2f0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x660a278
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x660a154
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x660a040
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x6609fc0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x6609ea4
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x6609ddc
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x6609d5c
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x6609c90
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x6609b74
	void SetClothMaxDistanceScale(float Scale);// 0x6609afc
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x6609a2c
	void SetAnimInstanceClass(class Object NewClass);// 0x66099b4
	void SetAnimationMode(byte InAnimationMode);// 0x660993c
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x66098c4
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x6609770
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x6609654
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x66095d4
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x66094b4
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x6609394
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x6609244
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x66091c4
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x6609100
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x6608fd4
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x6608e60
	void ResumeClothingSimulation();// 0x6608e4c
	void ResetClothTeleportMode();// 0x6608e38
	void ResetAllowedAnimCurveEvaluation();// 0x6608e24
	void ResetAllBodiesSimulatePhysics();// 0x6608e10
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x6608d4c
	void Play(bool bLooping);// 0x6608ccc
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x6608b24
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x6608938
	bool IsPlaying();// 0x6608910
	bool IsClothingSimulationSuspended();// 0x66088e8
	bool IsBodyGravityEnabled(FName BoneName);// 0x6608868
	float GetTeleportRotationThreshold();// 0x6608840
	float GetTeleportDistanceThreshold();// 0x6608840
	AnimInstance*[] GetSubAnimInstances();// 0x6608780
	Vector GetSkeletalCenterOfMass();// 0x6608738
	AnimInstance* GetPostProcessInstance();// 0x6608710
	float GetPosition();// 0x66086e8
	float GetPlayRate();// 0x66086c0
	float GetMorphTarget(FName MorphTargetName);// 0x6608640
	bool GetDisableAnimCurves();// 0x660861c
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x660849c
	float GetClothMaxDistanceScale();// 0x6608474
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x66083a0
	AnimInstance* GetAnimInstance();// 0x6608378
	byte GetAnimationMode();// 0x6608350
	bool GetAllowedAnimCurveEvaluate();// 0x6608330
	void ForceClothNextUpdateTeleportAndReset();// 0x660831c
	void ForceClothNextUpdateTeleport();// 0x6608308
	FName FindConstraintBoneName(int ConstraintIndex);// 0x6608280
	void ClearMorphTargets();// 0x660826c
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x660815c
	void BindClothToMasterPoseComponent();// 0x6608148
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x660807c
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x6607f14
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x6607dac
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x6607c8c

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x680, Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x684, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70c, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x728, Size: 4]
	int ForcedLodModel;//[Offset: 0x72c, Size: 4]
	int MinLodModel;//[Offset: 0x730, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x740, Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x74c, Size: 4]
	Color WireframeColor;//[Offset: 0x750, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x754, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x754, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x754, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x754, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x764, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x764, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x764, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x765, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x766, Size: 1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x767, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x767, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x774, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x774, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x775, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x776, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x776, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x778, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77c, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x794, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d1, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d2, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x660e504
	void UnHideBoneByName(FName BoneName);// 0x660e48c
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x660e2c8
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x660e104
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x660dff4
	bool SetSkinWeightProfile(FName InProfileName);// 0x660df74
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x660de64
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x660dd98
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReinit);// 0x660dccc
	void SetMinLOD(int InNewMinLOD);// 0x660dc54
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x660dbdc
	void SetForcedLOD(int InNewForcedLOD);// 0x660db64
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x660dae4
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x660da64
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x660d9ec
	void ResetAnimUROParams(float[] DistanceFactors, int MaxEvalRateForInterpolation);// 0x660d850
	bool IsUsingSkinWeightProfile();// 0x660d830
	bool IsBoneHiddenByName(FName BoneName);// 0x660d7b0
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x660d6ec
	FName GetSocketBoneName(FName InSocketName);// 0x660d660
	FName GetParentBone(FName BoneName);// 0x660d5d4
	int GetNumLODs();// 0x660d5ac
	int GetNumBones();// 0x660d584
	FName GetCurrentSkinWeightProfileName();// 0x660d560
	FName GetBoneName(int BoneIndex);// 0x660d4d8
	int GetBoneIndex(FName BoneName);// 0x660d458
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x660d2e0
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x6595200
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x65950f0
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x6594fc4
	void DisableMeshClipPlane(int PlaneIndex);// 0x3589610
	void DisableMeshClipArc();// 0x38e25ec
	void DisableMeshClip4Planes();// 0x394f3c4
	void ClearVertexColorOverride(int LODIndex);// 0x660d268
	void ClearSkinWeightProfile();// 0x34f4004
	void ClearSkinWeightOverride(int LODIndex);// 0x660d1f0
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x660d124

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x660, Size: 12]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x6595c30
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x6595b6c
	void SetLayerVisibilityValue(byte Layer, bool Visible, bool bPropagateToChildren);// 0x6595a50
	void SetLayerVisibilityEnable(bool Enable, bool bPropagateToChildren);// 0x6595978
	void SetLayerCastShadowValue(byte Layer, bool NewCastShadow);// 0x65958ac
	void SetLayerCastShadowEnable(bool Enable);// 0x6595824
	void SetCastShadow(bool NewCastShadow);// 0x659579c
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x6595688
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x6595600
	FName[] GetMaterialSlotNames();// 0x6595538
	MaterialInterface*[] GetMaterials();// 0x6595470
	int GetMaterialIndex(FName MaterialSlotName);// 0x65953e8
	bool GetLayerVisibilityValue(byte Layer);// 0x6595360
	bool GetLayerCastShadowValue(byte Layer);// 0x65952d8
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x6595200
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x65950f0
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x6594fc4
	void DisableMeshClipPlane(int PlaneIndex);// 0x3589610
	void DisableMeshClipArc();// 0x38e25ec
	void DisableMeshClip4Planes();// 0x394f3c4

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20, Size: 4]
	byte RootMotionMode;//[Offset: 0x24, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c, Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38, Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44, Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50, Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118, Size: 12]
	bool bDispatchQueuedAnimEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	bool bNeedReInitializeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	bool bForceParallelUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee, Size: 1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x6483b80
	Pawn* TryGetPawnOwner();// 0x39839dc
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x6483ac4
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x64839ac
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x64838e8
	void SetRootMotionMode(byte Value);// 0x6483868
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x64837a4
	void SetForceParallelUpdateAnimation(bool bForce);// 0x6483724
	void SavePoseSnapshot(FName SnapshotName);// 0x64836a4
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x6483624
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x64833ac
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x64831c4
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x6483108
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x648304c
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x6482f90
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x6482e88
	void Montage_Resume(const AnimMontage* Montage);// 0x6482e10
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x39896b0
	void Montage_Pause(const AnimMontage* Montage);// 0x6482d98
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x6482cdc
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x6482c20
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x6482ba0
	bool Montage_IsActive(const AnimMontage* Montage);// 0x6482b20
	float Montage_GetPosition(const AnimMontage* Montage);// 0x6482aa0
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x6482a20
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x6482948
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x64828c8
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x6482840
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x64827c0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x64826f0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x6482580
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x64824bc
	bool IsAnyMontagePlaying();// 0x6482494
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x64823c8
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x6482298
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x6482200
	AnimInstance* GetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x6482180
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x64820bc
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x6481ff8
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x6481f34
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x6481e70
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x6481dac
	SkeletalMeshComponent* GetOwningComponent();// 0x6481d84
	Actor* GetOwningActor();// 0x6481d5c
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x6481c98
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x6481bd4
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x6481b10
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x6481a4c
	float GetInstanceMachineWeight(int MachineIndex);// 0x64819cc
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x648194c
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x64818cc
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x648184c
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x64817cc
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x648174c
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x64816cc
	float GetCurveValue(FName CurveName);// 0x648164c
	FName GetCurrentStateName(int MachineIndex);// 0x64815c4
	AnimMontage* GetCurrentActiveMontage();// 0x648159c
	AnimMontage* GetCurMontageBySlot(FName SlotName);// 0x648151c
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x648149c
	void DestroyAllSubAnimInstances();// 0x6481488
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x64813c4
	void ClearMorphTargets();// 0x64813b0
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x64812d0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x49216cc
	void BlueprintPostEvaluateAnimation();// 0x49216cc
	void BlueprintInitializeAnimation();// 0x49216cc
	void BlueprintBeginPlay();// 0x49216cc

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20, Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c, Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124, Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c, Size: 60]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8, Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 12]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	FName BoneName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x660c108
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x660c078

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 12]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 4]
	FName NotifyName;//[Offset: 0x38, Size: 8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 4]
	float Duration;//[Offset: 0x48, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	byte MontageTickType;//[Offset: 0x71, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 4]
	byte NotifyFilterType;//[Offset: 0x78, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int TrackIndex;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 4]
	int SlotIndex;//[Offset: 0x8, Size: 4]
	int SegmentIndex;//[Offset: 0xc, Size: 4]
	byte LinkMethod;//[Offset: 0x10, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 4]
	float SegmentLength;//[Offset: 0x18, Size: 4]
	float LinkValue;//[Offset: 0x1c, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x49216cc
	FString GetNotifyName();// 0x648b3e4

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c, Size: 12]
	float SequenceLength;//[Offset: 0x68, Size: 4]
	float RateScale;//[Offset: 0x6c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70, Size: 12]
	float GetPlayLength();// 0x648d3c8

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20, Size: 4]
	AnimMetaData*[] MetaData;//[Offset: 0x44, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 12]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 12]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 84]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41, Size: 1]
	float DefaultValue;//[Offset: 0x44, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x49216cc
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x49216cc
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x49216cc
	FString GetNotifyName();// 0x648b3e4

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c, Size: 44]
	float BlendInTime;//[Offset: 0xa8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 44]
	float BlendOutTime;//[Offset: 0xd8, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc, Size: 4]
	FName SyncGroup;//[Offset: 0xe0, Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec, Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x104, Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110, Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c, Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x12a, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c, Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138, Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144, Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 4]
	float blendTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float GetFloatValue(float InTime);// 0x64c433c

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x64c3d78
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x64c3c98

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28, Size: 8]
	float StartTime;//[Offset: 0x30, Size: 4]
	FName NextSectionName;//[Offset: 0x38, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 12]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 4]
	float StartPos;//[Offset: 0x4, Size: 4]
	float AnimStartTime;//[Offset: 0x8, Size: 4]
	float AnimEndTime;//[Offset: 0xc, Size: 4]
	float AnimPlayRate;//[Offset: 0x10, Size: 4]
	int LoopingCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28, Size: 8]
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 12]
	FName[] BoneNames;//[Offset: 0xc, Size: 12]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 8]
	FName SnapshotName;//[Offset: 0x20, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x5c, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x78, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x94, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xa0, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xac, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 12]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc4, Size: 12]
	byte SkelMirrorAxis;//[Offset: 0xd0, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0xd1, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd4, Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe0, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe0, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe0, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe0, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xe4, Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xe8, Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xec, Size: 4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xf0, Size: 12]
	MorphTarget*[] MorphTargets;//[Offset: 0xfc, Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x218, Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x224, Size: 4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x228, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x234, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x244, Size: 12]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x25c, Size: 12]
	int NumSockets();// 0x6604b80
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x6604ab4
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x6604a34
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x66049b4
	BoxSphereBounds GetImportedBounds();// 0x6604960
	BoxSphereBounds GetBounds();// 0x660490c
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x6604830
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x66047b0

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x14, Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20, Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30, Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178, Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204, Size: 532]
	FName[] RemovedBones;//[Offset: 0x418, Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x424, Size: 12]
	AnimSequence* BakePose;//[Offset: 0x430, Size: 4]
	FString SourceImportFilename;//[Offset: 0x434, Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	byte TextureImportance;//[Offset: 0x1d, Size: 1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c, Size: 12]
	int BaseLOD;//[Offset: 0x38, Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44, Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144, Size: 4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte TextureWidth;//[Offset: 0x3, Size: 1]
	byte TextureHeight;//[Offset: 0x4, Size: 1]
	byte SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	byte TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24, Size: 68]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 1]
	byte Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	byte TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 1]
	byte BlendMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80, Size: 12]
	float StreamableFirstChunkSecond;//[Offset: 0x98, Size: 4]
	float StreamableFollowingChunkSecond;//[Offset: 0x9c, Size: 4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x108, Size: 1]
	byte RefPoseType;//[Offset: 0x109, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x10c, Size: 4]
	int RefFrameIndex;//[Offset: 0x110, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x114, Size: 4]
	FName RetargetSource;//[Offset: 0x118, Size: 8]
	enum Interpolation;//[Offset: 0x120, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x122, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x128, Size: 12]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24, Size: 104]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4, Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c, Size: 12]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28, Size: 12]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34, Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc, Size: 4]
	BodySetup*[] BodySetup;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2b0, Size: 12]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10, Size: 8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 8]
	Vector Pos1;//[Offset: 0x28, Size: 12]
	Vector PriAxis1;//[Offset: 0x34, Size: 12]
	Vector SecAxis1;//[Offset: 0x40, Size: 12]
	Vector Pos2;//[Offset: 0x4c, Size: 12]
	Vector PriAxis2;//[Offset: 0x58, Size: 12]
	Vector SecAxis2;//[Offset: 0x64, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c, Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58, Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 12]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 4]
	byte BlueprintType;//[Offset: 0x68, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 12]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]
	FName VariableName;//[Offset: 0x60, Size: 8]
	FName AttachToName;//[Offset: 0x68, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 12]
	Guid VariableGuid;//[Offset: 0x9c, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 4]
	byte LengthMode;//[Offset: 0x20, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 12]
	Guid TimelineGuid;//[Offset: 0x60, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	Vector GetVectorValue(float InTime);// 0x64c55ac

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	LinearColor GetLinearColorValue(float InTime);// 0x64c4724

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 12]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 12]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 4]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 12]
	Guid AssetGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	float SavedPosition;//[Offset: 0x8, Size: 4]
	float SavedPlayRate;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x12c, Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float GravityScale;//[Offset: 0x134, Size: 4]
	float MaxStepHeight;//[Offset: 0x138, Size: 4]
	float JumpZVelocity;//[Offset: 0x13c, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x140, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x144, Size: 4]
	float WalkableFloorZ;//[Offset: 0x148, Size: 4]
	byte MovementMode;//[Offset: 0x14c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x14d, Size: 1]
	float GroundFriction;//[Offset: 0x170, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x174, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x178, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x17c, Size: 4]
	float MaxFlySpeed;//[Offset: 0x180, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x184, Size: 4]
	float MaxAcceleration;//[Offset: 0x188, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x18c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x190, Size: 4]
	float BrakingFriction;//[Offset: 0x194, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x19c, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1a0, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1a4, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1a8, Size: 4]
	float AirControl;//[Offset: 0x1ac, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1b0, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1b4, Size: 4]
	float FallingLateralFriction;//[Offset: 0x1b8, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1bc, Size: 4]
	float Buoyancy;//[Offset: 0x1c0, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1c4, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1c8, Size: 4]
	Rotator RotationRate;//[Offset: 0x1cc, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1dc, Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1e0, Size: 4]
	float OutofWaterZ;//[Offset: 0x1e4, Size: 4]
	float Mass;//[Offset: 0x1e8, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x1f4, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x1f8, Size: 4]
	float PushForceFactor;//[Offset: 0x1fc, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x200, Size: 4]
	float TouchForceFactor;//[Offset: 0x204, Size: 4]
	float MinTouchForce;//[Offset: 0x208, Size: 4]
	float MaxTouchForce;//[Offset: 0x20c, Size: 4]
	float RepulsionForce;//[Offset: 0x210, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x218, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x21c, Size: 4]
	Vector Acceleration;//[Offset: 0x220, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x22c, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x250, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x25c, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x260, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x26c, Size: 12]
	float AnalogInputModifier;//[Offset: 0x278, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x284, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x288, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x28c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x290, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x294, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x298, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x29c, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2a0, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2a4, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2a8, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2ac, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2b0, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2b4, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2b8, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2bd, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2c0, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2c4, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2c8, Size: 160]
	byte DefaultLandMovementMode;//[Offset: 0x368, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x369, Size: 1]
	byte GroundMovementMode;//[Offset: 0x36a, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36b, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x36b, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x36b, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x36b, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x36b, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x36b, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x370, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x370, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x370, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x370, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x370, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x370, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x370, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x371, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x371, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x371, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x371, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x371, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x371, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x371, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x372, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x372, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x372, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x372, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x372, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x384, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x388, Size: 12]
	int AvoidanceUID;//[Offset: 0x394, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x398, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x39c, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3a0, Size: 4]
	float AvoidanceWeight;//[Offset: 0x3a4, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x3a8, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x460, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x464, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x468, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x46c, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x470, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x474, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x478, Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4bc, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4c0, Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5e0, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x620, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x64b9818
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x64b97a0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x64b96dc
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x64b9658
	void SetGroupsToIgnore(int GroupFlags);// 0x64b95e0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x64b955c
	void SetGroupsToAvoid(int GroupFlags);// 0x64b94e4
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x64b9460
	void SetAvoidanceGroup(int GroupFlags);// 0x64b93e8
	void SetAvoidanceEnabled(bool bEnable);// 0x64b9368
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x64b9214
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x64b8cdc
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x64b87a4
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x64b8418
	float K2_GetWalkableFloorZ();// 0x36e5714
	float K2_GetWalkableFloorAngle();// 0x36e56ec
	float K2_GetModifiedMaxAcceleration();// 0x64b83e8
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x64b82c4
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x64b80c8
	bool IsWalking();// 0x38f6070
	bool IsWalkable(out const HitResult Hit);// 0x3826a1c
	float GetValidPerchRadius();// 0x64b80a0
	float GetPerchRadiusThreshold();// 0x64b8078
	PrimitiveComponent* GetMovementBase();// 0x64b8050
	float GetMinAnalogSpeed();// 0x38d8f98
	float GetMaxJumpHeightWithJumpTime();// 0x64b8020
	float GetMaxJumpHeight();// 0x64b7ff0
	float GetMaxBrakingDeceleration();// 0x382634c
	float GetMaxAcceleration();// 0x64b7fc0
	Vector GetImpartedMovementBaseVelocity();// 0x3826214
	Vector GetCurrentAcceleration();// 0x3825ed4
	Character* GetCharacterOwner();// 0x382dff0
	float GetAnalogInputModifier();// 0x64b7f98
	void FlushServerMoves();// 0x64b7f7c
	void DisableMovement();// 0x64b7f60
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x64b7d20
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x64b7918
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x64b75f4
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x64b734c
	void ClientAckGoodMove(float TimeStamp);// 0x64b72cc
	void ClearAccumulatedForces();// 0x64b72b0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3589690
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x64b7154
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x64b7088
	void AddForce(Vector force);// 0x64b7010

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x120, Size: 4]
	Vector K2_GetInputVector();// 0x65c65c4
	bool IsMoveInputIgnored();// 0x65c660c
	Vector GetPendingInputVector();// 0x65c65c4
	Pawn* GetPawnOwner();// 0x65c659c
	Vector GetLastInputVector();// 0x65c6554
	Vector ConsumeInputVector();// 0x65c6504
	void AddInputVector(Vector WorldVector, bool bForce);// 0x3643a9c

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf4, Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x10c, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 1]
	MovementProperties MovementState;//[Offset: 0x114, Size: 4]
	void StopMovementKeepPathing();// 0x65a49fc
	void StopActiveMovement();// 0x35e4728
	bool IsSwimming();// 0x440ea9c
	bool IsMovingOnGround();// 0x38f6070
	bool IsFlying();// 0x65a49cc
	bool IsFalling();// 0x65a499c
	bool IsCrouching();// 0x64984fc

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xbc, Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 4]
	Vector Velocity;//[Offset: 0xc8, Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xd5, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 1]
	void StopMovementImmediately();// 0x38214a0
	void SnapUpdatedComponentToPlane();// 0x65984dc
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x350b540
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x6598464
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x65983ec
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x6598324
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x659829c
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x38215d8
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x37bce38
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x659809c
	float K2_GetModifiedMaxSpeed();// 0x659806c
	float K2_GetMaxSpeedModifier();// 0x659803c
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x35bc330
	Vector GetPlaneConstraintOrigin();// 0x6598008
	Vector GetPlaneConstraintNormal();// 0x6597fd4
	enum GetPlaneConstraintAxisSetting();// 0x6597fb8
	PhysicsVolume* GetPhysicsVolume();// 0x35891cc
	float GetMaxSpeed();// 0x6597f88
	float GetGravityZ();// 0x6597f58
	Vector ConstrainNormalToPlane(Vector Normal);// 0x6597ebc
	Vector ConstrainLocationToPlane(Vector Location);// 0x6597e20
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x6597d84

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]
	Vector[] TriangleVertexLocationArray;//[Offset: 0x84, Size: 12]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x308, Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x310, Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x360, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x360, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x360, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x360, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x361, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x364, Size: 4]
	uint32 DataVersion;//[Offset: 0x368, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3f4, Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18, Size: 8]
	Color Color;//[Offset: 0x20, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30, Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 12]
	int AreaID;//[Offset: 0xc, Size: 4]
	class Object* AreaClass;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 144]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x670, Size: 4]
	float CapsuleRadius;//[Offset: 0x674, Size: 4]
	float CapsuleHeight;//[Offset: 0x678, Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x64b4178
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x64b40b0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x64b3fe8
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x64b3efc
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x64b3e18
	float GetUnscaledCapsuleRadius();// 0x64b3dfc
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x64b3dcc
	float GetUnscaledCapsuleHalfHeight();// 0x64b3db0
	float GetShapeScale();// 0x64b3d40
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x64b3be8
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x64b3a98
	float GetScaledCapsuleRadius();// 0x64b3a18
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x64b3990
	float GetScaledCapsuleHalfHeight();// 0x64b3918

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x660, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x664, Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x668, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x668, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x668, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x66c, Size: 4]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	bool bNearPushBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bPushedByBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 12]
	Rotator Rotation;//[Offset: 0x20, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 224]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 4]
	float Position;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x308, Size: 4]
	byte Ping;//[Offset: 0x30c, Size: 1]
	FString PlayerName;//[Offset: 0x310, Size: 12]
	int PlayerID;//[Offset: 0x328, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x32c, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x32c, Size: 1]
	int StartTime;//[Offset: 0x330, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x334, Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x33c, Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x348, Size: 12]
	Pawn* PawnPrivate;//[Offset: 0x360, Size: 4]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x49216cc
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x49216cc
	void OnRep_UniqueId();// 0x34f5ff4
	void OnRep_Score();// 0x34d87f0
	void OnRep_PlayerName();// 0x34d78b8
	void OnRep_bIsInactive();// 0x34ee148

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	float DamageImpulse;//[Offset: 0x20, Size: 4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 4]
	float DamageFalloff;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x358, Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x360, Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x364, Size: 4]
	HUD* MyHUD;//[Offset: 0x36c, Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x370, Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x374, Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x37c, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x394, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x398, Size: 12]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x3a4, Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x3b4, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x3b8, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3c4, Size: 12]
	int ClientCap;//[Offset: 0x3d0, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x3d4, Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x3d8, Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x3dc, Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3e0, Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44e, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x44f, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x47c, Size: 4]
	NetConnection* NetConnection;//[Offset: 0x480, Size: 4]
	float InputYawScale;//[Offset: 0x490, Size: 4]
	float InputPitchScale;//[Offset: 0x494, Size: 4]
	float InputRollScale;//[Offset: 0x498, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49c, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49c, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49c, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x49c, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x49c, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x49c, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x4a0, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x4a4, Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x4b0, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x4b1, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x4b2, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x4b3, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x4b4, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c8, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x538, Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x53c, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x548, Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x58c, Size: 4]
	Vector SpawnLocation;//[Offset: 0x590, Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x5a2, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x5a4, Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x65dc7f8
	bool WasInputKeyJustPressed(Key Key);// 0x65dc504
	void ToggleSpeaking(bool bInSpeaking);// 0x65dc47c
	void SwitchLevel(FString URL);// 0x65dc3b8
	void StopHapticEffect(enum Hand);// 0x65dc340
	void StartFire(byte FireModeNum);// 0x65dc2c0
	void SetVirtualJoystickVisibility(bool bVisible);// 0x65dc238
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x65dc098
	void SetName(FString S);// 0x65dbfd4
	void SetMouseLocation(const int X, const int Y);// 0x65dbf18
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x65dbe5c
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x65dbd5c
	void SetControllerLightColor(Color Color);// 0x65dbcec
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x65dbb20
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x65dba14
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x65db904
	void ServerViewPrevPlayer();// 0x65db8a8
	void ServerViewNextPlayer();// 0x65db84c
	void ServerVerifyViewTarget();// 0x65db7f0
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x65db6e4
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x65db5e0
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x65db0c4
	void ServerToggleAILogging();// 0x65db068
	void ServerShortTimeout();// 0x65db00c
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x65daf44
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x65dae2c
	void ServerRestartPlayer();// 0x65dadd0
	void ServerPause();// 0x65dad74
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x65dacd0
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x65da7b4
	void ServerCheckClientPossessionReliable();// 0x65da758
	void ServerCheckClientPossession();// 0x65da6fc
	void ServerChangeName(FString S);// 0x65da608
	void ServerCamera(FName NewMode);// 0x65da554
	void ServerAcknowledgePossession(Pawn* P);// 0x65da4a0
	void SendToConsole(FString Command);// 0x65da3dc
	void RestartLevel();// 0x65da3c0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x65da2a0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x65da150
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x65d9e70
	void Pause();// 0x3991710
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x65d9ddc
	void OnGoingToLoseJoystick();// 0x38d095c
	void LocalTravel(FString URL);// 0x65d9d18
	bool IsInputKeyDown(Key Key);// 0x65d9a24
	void GetViewportSize(out int SizeX, out int SizeY);// 0x65d9944
	SpectatorPawn* GetSpectatorPawn();// 0x65d9928
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x65d9840
	Vector GetInputVectorKeyState(Key Key);// 0x65d953c
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x65d93bc
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x65d92dc
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x65d9158
	float GetInputKeyTimeDown(Key Key);// 0x65d8e60
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x65d8d3c
	float GetInputAnalogKeyState(Key Key);// 0x65d8a44
	HUD* GetHUD();// 0x65d8a1c
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x65d8810
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x65d8658
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x65d84a0
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x65d82d8
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x65d8164
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x65d7ff0
	Vector GetFocalLocation();// 0x392122c
	void FOV(float NewFOV);// 0x38db2d8
	void EnableCheats();// 0x65d7fd4
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x65d7e68
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x65d7d88
	void ConsoleKey(Key Key);// 0x65d7a94
	void ClientWasKicked(const FText KickReason);// 0x65d7900
	void ClientVoiceHandshakeComplete();// 0x3ad38d4
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x65d7748
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x65d73dc
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x65d722c
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x65d708c
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x65d6ef0
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x65d6e2c
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x65d6d60
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x65d6ce0
	void ClientStartOnlineSession();// 0x65d6cc4
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3838234
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x65d6bbc
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x65d6b34
	void ClientSetHUD(class HUD NewHUDClass);// 0x65d6ab4
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x65d69ac
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x65d6830
	void ClientSetCameraMode(FName NewCamMode);// 0x65d67b0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x65d660c
	void ClientSetBlockOnAsyncLoading();// 0x376ff18
	void ClientReturnToMainMenu(FString ReturnReason);// 0x65d6548
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x65d64c8
	void ClientRestart(Pawn* NewPawn);// 0x65d6448
	void ClientReset();// 0x65d642c
	void ClientRepObjRef(Object* Object);// 0x65d63ac
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x649e2b4
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x65d6250
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x65d612c
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x65d5fd8
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x65d5ed0
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x65d5d64
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x65d5c10
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x65d5940
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x65d55d4
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x65d5480
	void ClientIgnoreMoveInput(bool bIgnore);// 0x65d53f8
	void ClientIgnoreLookInput(bool bIgnore);// 0x65d5370
	void ClientGotoState(FName NewState);// 0x65d52f0
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x65d5224
	void ClientForceGarbageCollection();// 0x40982f0
	void ClientFlushLevelStreaming();// 0x65d5210
	void ClientEndOnlineSession();// 0x3770284
	void ClientEnableNetworkVoice(bool bEnable);// 0x65d5188
	void ClientCommitMapChange();// 0x3831370
	void ClientClearCameraLensEffects();// 0x3587be4
	void ClientCapBandwidth(int Cap);// 0x65c3fc4
	void ClientCancelPendingMapChange();// 0x38316bc
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x65d507c
	void ClearJoystick();// 0x65d5060
	void ClearAudioListenerOverride();// 0x65d504c
	void Camera(FName NewMode);// 0x65d4fcc
	void AddYawInput(float Val);// 0x65d4f4c
	void AddRollInput(float Val);// 0x65d4ecc
	void AddPitchInput(float Val);// 0x65d4e4c
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x39199f4

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x308, Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30c, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30c, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30c, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30c, Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30c, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x310, Size: 12]
	FName[] DebugDisplay;//[Offset: 0x324, Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x330, Size: 12]
	Canvas* Canvas;//[Offset: 0x33c, Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x340, Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x344, Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x350, Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x354, Size: 4]
	Actor* UpdateShowDebugTargetActor();// 0x49216cc
	void ShowHUD();// 0x34d87f0
	void ShowDebugToggleSubCategory(FName Category);// 0x650493c
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x65048c4
	void ShowDebugForMoifiedTargetActor();// 0x65048b0
	void ShowDebug(FName DebugType);// 0x6504830
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x650476c
	void RemoveAllDebugStrings();// 0x6504758
	void ReceiveHitBoxRelease(const FName BoxName);// 0x49216cc
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x49216cc
	void ReceiveHitBoxClick(const FName BoxName);// 0x49216cc
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x49216cc
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x49216cc
	Vector Project(Vector Location);// 0x65046c4
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x65044c8
	PlayerController* GetOwningPlayerController();// 0x36e7a98
	Pawn* GetOwningPawn();// 0x65044a0
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x6504248
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x65040b0
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6503c38
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x65039c0
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x6503824
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x65034a0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x6503278
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6502ea0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x6502cbc
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x6502b58
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x65029bc
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x65025cc

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 4]
	float OrgY;//[Offset: 0x20, Size: 4]
	float ClipX;//[Offset: 0x24, Size: 4]
	float ClipY;//[Offset: 0x28, Size: 4]
	Color DrawColor;//[Offset: 0x2c, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	int SizeX;//[Offset: 0x34, Size: 4]
	int SizeY;//[Offset: 0x38, Size: 4]
	Plane ColorModulate;//[Offset: 0x40, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x64b2ad8
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x64b29c8
	Vector K2_Project(Vector WorldLocation);// 0x64b2934
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x64b2790
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x64b24bc
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x64b20b4
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x64b1f20
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x64b1d7c
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x64b1b64
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x64b1a0c
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x64b190c
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x64b13ec
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x64b12d0

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xa8, Size: 4]
	int LevelIndex;//[Offset: 0xac, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xb0, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xb4, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xc0, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xca, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xca, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xca, Size: 1]
	byte AddressX;//[Offset: 0xcb, Size: 1]
	byte AddressY;//[Offset: 0xcc, Size: 1]
	int Blueprint_GetSizeY();// 0x662e468
	int Blueprint_GetSizeX();// 0x662e440

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 12]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 12]
	int IsRemapped;//[Offset: 0x3c, Size: 4]
	float EmScale;//[Offset: 0x40, Size: 4]
	float Ascent;//[Offset: 0x44, Size: 4]
	float Descent;//[Offset: 0x48, Size: 4]
	float Leading;//[Offset: 0x4c, Size: 4]
	int Kerning;//[Offset: 0x50, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 144]
	int NumCharacters;//[Offset: 0xe4, Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 12]
	float ScalingFactor;//[Offset: 0xf4, Size: 4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 4]
	FName LegacyFontName;//[Offset: 0x100, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 24]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 12]
	float Height;//[Offset: 0xc, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	byte CharacterSet;//[Offset: 0x11, Size: 1]
	FString Chars;//[Offset: 0x14, Size: 12]
	FString UnicodeRange;//[Offset: 0x20, Size: 12]
	FString CharsFilePath;//[Offset: 0x2c, Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 4]
	int XPadding;//[Offset: 0x64, Size: 4]
	int YPadding;//[Offset: 0x68, Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int Kerning;//[Offset: 0x80, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc, Size: 12]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 12]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 12]
	enum Hinting;//[Offset: 0xc, Size: 1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0, Size: 12]
	Int32Range[] CharacterRanges;//[Offset: 0xc, Size: 12]
	float ScalingFactor;//[Offset: 0x18, Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 12]
	FString DebugText;//[Offset: 0x1c, Size: 12]
	float TimeRemaining;//[Offset: 0x28, Size: 4]
	float Duration;//[Offset: 0x2c, Size: 4]
	Color TextColor;//[Offset: 0x30, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float FontScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x308, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x30c, Size: 4]
	float DefaultFOV;//[Offset: 0x318, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x320, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x328, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x370, Size: 1408]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8f0, Size: 1408]
	TViewTarget ViewTarget;//[Offset: 0xe70, Size: 1424]
	TViewTarget PendingViewTarget;//[Offset: 0x1400, Size: 1424]
	CameraModifier*[] ModifierList;//[Offset: 0x19a4, Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x19b0, Size: 12]
	float FreeCamDistance;//[Offset: 0x19bc, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x19c0, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x19cc, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x19e8, Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x19f4, Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x19f8, Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1a18, Size: 12]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1a30, Size: 12]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1a3c, Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x1a48, Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4c, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a4c, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a4c, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a4d, Size: 1]
	float ViewPitchMin;//[Offset: 0x1a50, Size: 4]
	float ViewPitchMax;//[Offset: 0x1a54, Size: 4]
	float ViewYawMin;//[Offset: 0x1a58, Size: 4]
	float ViewYawMax;//[Offset: 0x1a5c, Size: 4]
	float ViewRollMin;//[Offset: 0x1a60, Size: 4]
	float ViewRollMax;//[Offset: 0x1a64, Size: 4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x65d2670
	void StopCameraFade();// 0x64c0824
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x65d25a4
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x65d24d8
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x65d240c
	void StopAllCameraShakes(bool bImmediately);// 0x65d2384
	void StopAllCameraAnims(bool bImmediate);// 0x65d22fc
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x65d2110
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x65d1ffc
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x64eacfc
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x65d1f7c
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x65d1e20
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x65d1afc
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x65d1994
	void OnPhotographySessionStart();// 0x34f5ff4
	void OnPhotographySessionEnd();// 0x34ee148
	void OnPhotographyMultiPartCaptureStart();// 0x34d78b8
	void OnPhotographyMultiPartCaptureEnd();// 0x34d87f0
	PlayerController* GetOwningPlayerController();// 0x65d1964
	float GetFOVAngle();// 0x38d8f98
	Rotator GetCameraRotation();// 0x65d191c
	Vector GetCameraLocation();// 0x65d18d4
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x65d184c
	void ClearCameraLensEffects();// 0x65d1830
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x49216cc
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x65d17a8
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x65d1720

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1392]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1312]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x560, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTDefaultOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSkyLightScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	byte BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc, Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2d4, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2dc, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e0, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2fc, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x300, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x304, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x308, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x30c, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x310, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x314, Size: 4]
	bool BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]
	Texture2D* BlindWatermarkingTexture;//[Offset: 0x31c, Size: 4]
	bool bOverride_BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	bool bOverride_ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 1]
	bool bOverride_BlindWatermarkingTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 1]
	float AutoExposureBias;//[Offset: 0x324, Size: 4]
	float HistogramLogMin;//[Offset: 0x328, Size: 4]
	float HistogramLogMax;//[Offset: 0x32c, Size: 4]
	float LensFlareIntensity;//[Offset: 0x330, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x334, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x344, Size: 4]
	int LensFlareCount;//[Offset: 0x348, Size: 4]
	float LensFlareThreshold;//[Offset: 0x34c, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x350, Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x354, Size: 16]
	float VignetteIntensity;//[Offset: 0x3d4, Size: 4]
	float GrainJitter;//[Offset: 0x3d8, Size: 4]
	float GrainIntensity;//[Offset: 0x3dc, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3e0, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3e4, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3e8, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ec, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3f0, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3f4, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3f8, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x404, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x408, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x40c, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x410, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x414, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x424, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x428, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x42c, Size: 4]
	float SRTDefaultOcclusion;//[Offset: 0x430, Size: 4]
	float SRTSkyLightScale;//[Offset: 0x434, Size: 4]
	float SRTFilterSmoothness;//[Offset: 0x438, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x43c, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x44c, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x450, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x454, Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x458, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x45c, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x460, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x464, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x468, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x46c, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x470, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x474, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x478, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x480, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x484, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x488, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x490, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x494, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x498, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4a0, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4a4, Size: 4]
	float MotionBlurMax;//[Offset: 0x4a8, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4ac, Size: 4]
	float LPVIntensity;//[Offset: 0x4b0, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4b4, Size: 4]
	float LPVSize;//[Offset: 0x4b8, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4bc, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4c0, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4c4, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4c8, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4cc, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4d0, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4d4, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4d8, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4dc, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4e0, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4e4, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4e8, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4ec, Size: 4]
	float LPVFadeRange;//[Offset: 0x4f0, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4f4, Size: 4]
	float ScreenPercentage;//[Offset: 0x4f8, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x4fc, Size: 12]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x508, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x50c, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x510, Size: 4]
	Object*[] Blendables;//[Offset: 0x514, Size: 12]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1392]
	PlayerState* PlayerState;//[Offset: 0x580, Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	byte Priority;//[Offset: 0x1d, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 4]
	float AlphaInTime;//[Offset: 0x24, Size: 4]
	float AlphaOutTime;//[Offset: 0x28, Size: 4]
	float Alpha;//[Offset: 0x2c, Size: 4]
	bool IsDisabled();// 0x35b2414
	Actor* GetViewTarget();// 0x34da7d8
	void EnableModifier();// 0x380dff4
	void DisableModifier(bool bImmediate);// 0x35b14bc
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x49216cc
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x49216cc

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x34c, Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x350, Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x354, Size: 4]
	Transform RelativeTransform;//[Offset: 0x360, Size: 48]
	float BaseFOV;//[Offset: 0x390, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x394, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x398, Size: 12]
	float DistFromCamera;//[Offset: 0x3a4, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x308, Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30c, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x310, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x31c, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x328, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x334, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x340, Size: 12]
	void ToggleActive();// 0x64d633c
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x64d627c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x363dc98
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x64d61c0
	void SetFloatParameter(FName ParameterName, float Param);// 0x64d60fc
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x64d6034
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x64d5f78
	void OnRep_bCurrentlyActive();// 0x34d78b8
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x34d78d4
	bool IsActive();// 0x64d5f50
	void Deactivate();// 0x64d5f3c
	void Activate();// 0x64d5f28

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x660, Size: 4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x664, Size: 12]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x670, Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67d, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67d, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x67d, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x67d, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67e, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67e, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67e, Size: 1]
	byte LODMethod;//[Offset: 0x680, Size: 1]
	enum RequiredSignificance;//[Offset: 0x681, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x684, Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x690, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x69c, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x6a8, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x6b4, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x6c0, Size: 12]
	Vector OldPosition;//[Offset: 0x6cc, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x6d8, Size: 12]
	float WarmupTime;//[Offset: 0x6e4, Size: 4]
	float WarmupTickRate;//[Offset: 0x6e8, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x6f0, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x6f8, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x718, Size: 12]
	float CustomTimeDilation;//[Offset: 0x72c, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x770, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x778, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x780, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x781, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x782, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x7ac, Size: 12]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x65c23d4
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x65c41f0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x65c4178
	void SetSocketName(FName InSocketName);// 0x65c4100
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x65c4044
	void SetLODLevel(int InLODLevel);// 0x65c3fc4
	void SetFloatParameter(FName ParameterName, float Param);// 0x65c2308
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x65c3ef0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x65c2230
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x65c3de4
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x65c3cdc
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x65c3bd0
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x65c3ac4
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x65c39bc
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x65c38b0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x65c37ec
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x65c36c4
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x65c3524
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x65c216c
	void OnMaterialLoaded(MaterialInterface* MaterialInstance, int ElementIndex);// 0x65c3468
	int GetNumActiveParticles();// 0x65c3440
	MaterialInterface* GetNamedMaterial(FName InName);// 0x65c33b8
	int GetLODLevel();// 0x395b6ec
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x65c329c
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x65c317c
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x65c3060
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x65c2f44
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x65c2e24
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x65c2d08
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x65c2c30
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x65c2a90
	void EndTrails();// 0x65c2a7c
	void CreateNamedDynamicMaterialInstanceAsync(FName InName, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x65c2938
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x65c286c
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x65c2714

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x65c23d4
	void SetFloatParameter(FName ParameterName, float Param);// 0x65c2308
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x65c2230
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x65c216c

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 1]
	bool bAlwaysUpdateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 4]
	float WarmupTime;//[Offset: 0x28, Size: 4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bUseNewLodFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	byte LODMethod;//[Offset: 0x4e, Size: 1]
	float[] LODDistances;//[Offset: 0x50, Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x60, Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0x8c, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	float Delay;//[Offset: 0x94, Size: 4]
	float DelayLow;//[Offset: 0x98, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa0, Size: 4]
	enum InsignificantReaction;//[Offset: 0xa4, Size: 1]
	float InsignificanceDelay;//[Offset: 0xa8, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xac, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb0, Size: 12]
	float MacroUVRadius;//[Offset: 0xbc, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc4, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe0, Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xec, Size: 12]
	bool ContainsEmitterType(class Object TypeData);// 0x65bec68

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20, Size: 8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x50, Size: 4]
	byte DetailMode;//[Offset: 0x54, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	enum SignificanceLevel;//[Offset: 0x56, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 12]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 12]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 12]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 12]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x2c, Size: 4]
	MaterialInterface* MaterialPath;//[Offset: 0x30, Size: 40]
	Vector EmitterOrigin;//[Offset: 0x58, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x64, Size: 12]
	byte ScreenAlignment;//[Offset: 0x70, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x74, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x78, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	byte SortMode;//[Offset: 0x7d, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e, Size: 1]
	float EmitterDuration;//[Offset: 0x80, Size: 4]
	float EmitterDurationLow;//[Offset: 0x84, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	int EmitterLoops;//[Offset: 0x8c, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x90, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0xb8, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xbc, Size: 12]
	float EmitterDelay;//[Offset: 0xc8, Size: 4]
	float EmitterDelayLow;//[Offset: 0xcc, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 1]
	byte InterpolationMethod;//[Offset: 0xd1, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xd4, Size: 4]
	int SubImages_Vertical;//[Offset: 0xd8, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	float RandomImageTime;//[Offset: 0xe0, Size: 4]
	int RandomImageChanges;//[Offset: 0xe4, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xec, Size: 12]
	float MacroUVRadius;//[Offset: 0xf8, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	int MaxDrawCount;//[Offset: 0x100, Size: 4]
	enum UVFlippingMode;//[Offset: 0x104, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0x108, Size: 4]
	Texture2D* CutoutTexturePath;//[Offset: 0x110, Size: 40]
	byte BoundingMode;//[Offset: 0x138, Size: 1]
	byte OpacitySourceMode;//[Offset: 0x139, Size: 1]
	float AlphaThreshold;//[Offset: 0x13c, Size: 4]
	int CutoutSubImagesX;//[Offset: 0x140, Size: 4]
	int CutoutSubImagesY;//[Offset: 0x144, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0x148, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0x14c, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0x158, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x168, Size: 12]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x174, Size: 12]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	byte LODValidity;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 28]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 1]
	byte EntryCount;//[Offset: 0x1, Size: 1]
	byte EntryStride;//[Offset: 0x2, Size: 1]
	byte SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0xc, Size: 12]
	byte LockFlag;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat rate;//[Offset: 0x30, Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x58, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x80, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x84, Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x90, Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2d, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x70, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x74, Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xb4, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xb8, Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	Vector MinValueVec;//[Offset: 0x24, Size: 12]
	Vector MaxValueVec;//[Offset: 0x30, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2c, Size: 1]
	FName EventName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 12]
	int ActiveTab;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 12]
	float ViewStartInput;//[Offset: 0x18, Size: 4]
	float ViewEndInput;//[Offset: 0x1c, Size: 4]
	float ViewStartOutput;//[Offset: 0x20, Size: 4]
	float ViewEndOutput;//[Offset: 0x24, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 4]
	Color CurveColor;//[Offset: 0x4, Size: 4]
	FString CurveName;//[Offset: 0x8, Size: 12]
	int bHideCurve;//[Offset: 0x14, Size: 4]
	int bColorCurve;//[Offset: 0x18, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 4]
	int bClamp;//[Offset: 0x20, Size: 4]
	float ClampLow;//[Offset: 0x24, Size: 4]
	float ClampHigh;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x658fa44
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x658f988
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x658f8c4
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x658f7c4
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x658f734
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x658f6b4
	float K2_GetScalarParameterValue(FName ParameterName);// 0x658f634
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x658f5bc
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x658f544
	void CopyInterpParameters(MaterialInstance* Source);// 0x658f4cc

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	MaterialInterface* Parent;//[Offset: 0x54, Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x5c, Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x68, Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x74, Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x80, Size: 12]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x8c, Size: 60]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xcc, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0xf0, Size: 12]
	bool bEnableTexture2DArrayShaderVariant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 1]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 4]
	int FontPage;//[Offset: 0xc, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	byte BlendMode;//[Offset: 0xc, Size: 1]
	byte ShadingModel;//[Offset: 0xd, Size: 1]
	byte ShadingRate;//[Offset: 0xe, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x30, Size: 12]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakeMap;//[Offset: 0x3c, Size: 60]
	float SplitScreenShakeScale;//[Offset: 0x78, Size: 4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float OscillationDuration;//[Offset: 0x20, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 12]
	float AnimPlayRate;//[Offset: 0x80, Size: 4]
	float AnimScale;//[Offset: 0x84, Size: 4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 4]
	float ShakeScale;//[Offset: 0x134, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 4]
	void ReceiveStopShake(bool bImmediately);// 0x49216cc
	void ReceivePlayShake(float Scale);// 0x49216cc
	bool ReceiveIsFinished();// 0x35dc0b8
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x49216cc

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 4]
	float AnimLength;//[Offset: 0x20, Size: 4]
	Box BoundingBox;//[Offset: 0x24, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float BaseFOV;//[Offset: 0x44, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 1312]
	float BasePostProcessBlendWeight;//[Offset: 0x570, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 12]
	FName GroupName;//[Offset: 0x30, Size: 8]
	Color GroupColor;//[Offset: 0x38, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 4]
	byte ActiveCondition;//[Offset: 0x34, Size: 1]
	FString TrackTitle;//[Offset: 0x38, Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 4]
	float PlayRate;//[Offset: 0x3c, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 4]
	byte PlaySpace;//[Offset: 0x58, Size: 1]
	void Stop(bool bImmediate);// 0x64abc38
	void SetScale(float NewDuration);// 0x36ba3f0
	void SetDuration(float NewDuration);// 0x64abbc0
	void SetCurrentTime(float NewTime);// 0x64abb48

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 4]
	Actor* GroupActor;//[Offset: 0x20, Size: 4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 12]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 12]
	FName LookAtGroupName;//[Offset: 0x80, Size: 8]
	float LinCurveTension;//[Offset: 0x88, Size: 4]
	float AngCurveTension;//[Offset: 0x8c, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	byte RotMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 12]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 12]
	Rotator ResetRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x308, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x30c, Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x310, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	float AspectRatio;//[Offset: 0x320, Size: 4]
	float FOVAngle;//[Offset: 0x324, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x328, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x330, Size: 1312]
	int GetAutoActivatePlayerIndex();// 0x64ab598

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2b0, Size: 4]
	float OrthoWidth;//[Offset: 0x2b4, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2b8, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x2bc, Size: 4]
	float AspectRatio;//[Offset: 0x2c0, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c4, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c4, Size: 1]
	bool bAutoFixFovByAspectRatio;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c4, Size: 1]
	byte ProjectionMode;//[Offset: 0x2c5, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x2c8, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2d0, Size: 1312]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x850, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x64ac774
	void SetProjectionMode(byte InProjectionMode);// 0x64ac700
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x64ac68c
	void SetOrthoWidth(float InOrthoWidth);// 0x64ac618
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x64ac5a4
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x64ac530
	void SetFieldOfView(float InFieldOfView);// 0x36a8b88
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x64ac4a8
	void SetAutoFixFovByAspectRatio(bool bInAutoFixFovByAspectRatio);// 0x64ac428
	void SetAspectRatio(float InAspectRatio);// 0x64ac3b4
	void SetActive(bool bNewActive, bool bReset);// 0x64787dc
	void RemoveBlendable(interface classNone InBlendableObject);// 0x64ac2c4
	void OnViewportSizeChanged(Vector2D OldViewportSize, Vector2D NewViewportSize);// 0x64ac210
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x3706960
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x64ac198
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x64ac068

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 4]
	void Walk();// 0x380dff4
	void ViewSelf();// 0x355f1c4
	void ViewPlayer(FString S);// 0x64bcf28
	void ViewClass(class Actor DesiredClass);// 0x4403518
	void ViewActor(FName actorName);// 0x3510150
	void TriggerCrash();// 0x64bcf14
	void ToggleDebugCamera();// 0x34ceabc
	void ToggleAILogging();// 0x34ce768
	void TestCollisionDistance();// 0x64bcef8
	void Teleport();// 0x3716608
	void Summon(FString ClassName);// 0x3e8d37c
	void StreamLevelOut(FName PackageName);// 0x34e9de0
	void StreamLevelIn(FName PackageName);// 0x36cee54
	void Slomo(float NewTimeDilation);// 0x64bce78
	void SetWorldOrigin();// 0x64bce64
	void SetNavDrawDistance(float DrawDistance);// 0x64bcdec
	void SetMouseSensitivityToDefault();// 0x64bcdd8
	void ServerToggleAILogging();// 0x64bcd7c
	void ReceiveInitCheatManager();// 0x49216cc
	void ReceiveEndPlay();// 0x49216cc
	void RebuildNavigation();// 0x64bcd60
	void PlayersOnly();// 0x3515c60
	void OnlyLoadLevel(FName PackageName);// 0x64bcce0
	void LogLoc();// 0x34e2974
	void InvertMouse();// 0x64bcccc
	void God();// 0x380f590
	void Ghost();// 0x3797724
	void FreezeFrame(float Delay);// 0x3519384
	void Fly();// 0x3515c44
	void FlushLog();// 0x64bccb0
	void EnableDebugCamera();// 0x3840828
	void DumpVoiceMutingState();// 0x3aa9a04
	void DumpPartyState();// 0x64bcc94
	void DumpOnlineSessionState();// 0x383ad20
	void DumpChatState();// 0x64bcc78
	void DisableDebugCamera();// 0x64bcc5c
	void DestroyTarget();// 0x3516084
	void DestroyPawns(class Pawn aClass);// 0x586de10
	void DestroyAllPawnsExceptTarget();// 0x359b4c4
	void DestroyAll(class Actor aClass);// 0x64bcbdc
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x64bcb18
	void DebugCapsuleSweepPawn();// 0x3840600
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x64bca90
	void DebugCapsuleSweepClear();// 0x4441e0c
	void DebugCapsuleSweepChannel(byte Channel);// 0x64bca10
	void DebugCapsuleSweepCapture();// 0x384061c
	void DebugCapsuleSweep();// 0x351026c
	void DamageTarget(float DamageAmount);// 0x64bc990
	void CheatScript(FString ScriptName);// 0x64bc838
	void ChangeSize(float F);// 0x424df4c
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x64bc63c
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x64bc45c
	void BugIt(FString ScreenShotDescription);// 0x64bc398

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ad, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5ad, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5b0, Size: 4]
	float SpeedScale;//[Offset: 0x5c4, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x5c8, Size: 4]
	float InitialAccel;//[Offset: 0x5cc, Size: 4]
	float InitialDecel;//[Offset: 0x5d0, Size: 4]
	void ToggleDisplay();// 0x64c73b8
	void ShowDebugSelectedInfo();// 0x3691dc0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x64c7340
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x49216cc
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x49216cc
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x49216cc
	Actor* GetSelectedActor();// 0x64c7318

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x660, Size: 4]
	float FrustumAngle;//[Offset: 0x664, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x668, Size: 4]
	float FrustumStartDist;//[Offset: 0x66c, Size: 4]
	float FrustumEndDist;//[Offset: 0x670, Size: 4]
	Texture* Texture;//[Offset: 0x674, Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160, Size: 12]
	FName[] InvertedAxis;//[Offset: 0x190, Size: 12]
	void SetMouseSensitivity(const float Sensitivity);// 0x65e0fec
	void SetBind(FName BindName, FString Command);// 0x65e0ee4
	void InvertAxisKey(const Key AxisKey);// 0x65e0bf8
	void InvertAxis(const FName AxisName);// 0x65e0b80
	void ClearSmoothing();// 0x65e0b6c

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 16]
	FString Command;//[Offset: 0x10, Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 12]
	float Duration;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 12]
	NetDriver* Driver;//[Offset: 0x3c, Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 12]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 12]
	Actor* ViewTarget;//[Offset: 0x60, Size: 4]
	Actor* OwningActor;//[Offset: 0x64, Size: 4]
	Actor* ObserveTarget;//[Offset: 0x68, Size: 4]
	int MaxPacket;//[Offset: 0x6c, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool RecordLifetimeChangelist;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool BackwardsCompatible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xf0, Size: 12]
	double LastReceiveTime;//[Offset: 0x148, Size: 8]
	bool bOpenClampBandwidthDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29798, Size: 1]
	float MaxBandwitdhDeltaTime;//[Offset: 0x2979c, Size: 4]
	Channel*[] ChannelsToTick;//[Offset: 0x2994c, Size: 12]
	int MaxPacketFaultCountPerMinute;//[Offset: 0x2b444, Size: 4]
	int MaxPacketFaultCountTotal;//[Offset: 0x2b448, Size: 4]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x2b458, Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38, Size: 4]
	int MaxClientRate;//[Offset: 0x3c, Size: 4]
	float ServerTravelPause;//[Offset: 0x40, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44, Size: 4]
	float RelevantTimeout;//[Offset: 0x48, Size: 4]
	float KeepAliveTime;//[Offset: 0x4c, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50, Size: 4]
	float ConnectionTimeout;//[Offset: 0x54, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x58, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x60, Size: 4]
	NetConnection*[] ClientConnections;//[Offset: 0x64, Size: 12]
	World* World;//[Offset: 0x7c, Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x90, Size: 4]
	Property* RoleProperty;//[Offset: 0x94, Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x98, Size: 4]
	FName NetDriverName;//[Offset: 0xa0, Size: 8]
	float Time;//[Offset: 0xcc, Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x404, Size: 60]
	NetOptimConfig* NetOptimConfig;//[Offset: 0x490, Size: 4]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: NetOptimConfig.WorldSubsystem.Subsystem.Object
	bool ActorRepNetNotRelevantLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	<byte,ActorRepNetNotRelevantLODConfig> ActorRepNetNotRelevantLODGroups;//[Offset: 0x24, Size: 60]
	<byte,ActorReplicateFreqLODGroup> ActorReplicateFreqLODGroups;//[Offset: 0x60, Size: 60]

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: ActorRepNetNotRelevantLODConfig
	FName Category;//[Offset: 0x0, Size: 8]
	bool LODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float LODDeltaTime;//[Offset: 0xc, Size: 4]
	float LODDistFactor;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ActorReplicateFreqLODGroup
	FName Category;//[Offset: 0x0, Size: 8]
	bool LODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool LODDistEnhancedOnBack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float LODBackEnhanceMinDistSq;//[Offset: 0xc, Size: 4]
	float LODBackEnhanceFactor;//[Offset: 0x10, Size: 4]
	float LODLongDistViewFactor;//[Offset: 0x14, Size: 4]
	ActorReplicateFreqLODConfig[] LODDistConfigs;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ActorReplicateFreqLODConfig
	float DistSquared;//[Offset: 0x0, Size: 4]
	float NetUpdateFreq;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 12]
	float ActiveOpacity;//[Offset: 0x28, Size: 4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 4]
	float TimeUntilReset;//[Offset: 0x34, Size: 4]
	float ActivationDelay;//[Offset: 0x38, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float StartupDelay;//[Offset: 0x40, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 4]
	Texture2D* Image2;//[Offset: 0x4, Size: 4]
	SlateBrush Brush1;//[Offset: 0x8, Size: 152]
	SlateBrush Brush2;//[Offset: 0xa0, Size: 152]
	Vector2D Center;//[Offset: 0x138, Size: 8]
	Vector2D VisualSize;//[Offset: 0x140, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x148, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x150, Size: 8]
	Vector2D InputScale;//[Offset: 0x158, Size: 8]
	Key MainInputKey;//[Offset: 0x160, Size: 16]
	Key AltInputKey;//[Offset: 0x170, Size: 16]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4, Size: 8]
	Margin Margin;//[Offset: 0xc, Size: 16]
	SlateColor TintColor;//[Offset: 0x1c, Size: 28]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Object* ResourceObject;//[Offset: 0x3c, Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40, Size: 40]
	FName ResourceName;//[Offset: 0x68, Size: 8]
	Box2D UVRegion;//[Offset: 0x70, Size: 20]
	byte DrawAs;//[Offset: 0x84, Size: 1]
	byte Tiling;//[Offset: 0x85, Size: 1]
	byte Mirroring;//[Offset: 0x86, Size: 1]
	byte ImageType;//[Offset: 0x87, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x34c, Size: 4]
	float BaseLookUpRate;//[Offset: 0x350, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x354, Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x358, Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x35c, Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 1]
	void TurnAtRate(float rate);// 0x64c9d34
	void MoveUp_World(float Val);// 0x35a41e4
	void MoveRight(float Val);// 0x398c764
	void MoveForward(float Val);// 0x4433158
	void LookUpAtRate(float rate);// 0x64c9cbc

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x670, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x661abd0
	float GetUnscaledSphereRadius();// 0x64b3db0
	float GetShapeScale();// 0x64b3d40
	float GetScaledSphereRadius();// 0x64b3918

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x680, Size: 4]
	int LowDeviceForcedLodModel;//[Offset: 0x684, Size: 4]
	int PreviousLODLevel;//[Offset: 0x688, Size: 4]
	int MinLOD;//[Offset: 0x68c, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x690, Size: 4]
	byte TileLength;//[Offset: 0x6d0, Size: 1]
	byte TileNum;//[Offset: 0x6d1, Size: 1]
	Texture2D* TileTexture;//[Offset: 0x6d4, Size: 4]
	Vector2D TileLocalMin;//[Offset: 0x6d8, Size: 8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e0, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e0, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6e0, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6e0, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6e0, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6e0, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6e0, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6e0, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e1, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e1, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6e1, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6e1, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6e1, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6e1, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6e1, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x6e4, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x6e8, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x6ec, Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x700, Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x710, Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x74c, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x764, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x778, Size: 12]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x784, Size: 12]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x5ab9e7c
	void SetOverrideCullingScreenSizeEnable(bool bEnable);// 0x6627a5c
	void SetOverrideCullingScreenSize(float ScreenSize);// 0x66279e4
	void SetLowDeviceForcedLodModel(int NewLowDeviceForcedLodModel);// 0x662796c
	void SetForcedLodModel(int NewForcedLodModel);// 0x66278f4
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x36b3b78
	void SetDirty();// 0x66278e0
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x6627868
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x6627790
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x6595200
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x65950f0
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x6594fc4
	void DisableMeshClipPlane(int PlaneIndex);// 0x3589610
	void DisableMeshClipArc();// 0x38e25ec
	void DisableMeshClip4Planes();// 0x394f3c4

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 12]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 1]
	byte Y;//[Offset: 0x1, Size: 1]
	byte Z;//[Offset: 0x2, Size: 1]
	byte W;//[Offset: 0x3, Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd4, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe8, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf8, Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x118, Size: 16]
	Margin Padding;//[Offset: 0x128, Size: 16]
	WAnimTime WAnimTime;//[Offset: 0x138, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x148, Size: 12]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x154, Size: 12]
	delegate OnTouchStart;//[Offset: 0x160, Size: 16]
	delegate OnTouchMove;//[Offset: 0x170, Size: 16]
	delegate OnTouchEnd;//[Offset: 0x180, Size: 16]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x190, Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x19c, Size: 4]
	int Priority;//[Offset: 0x1a0, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a4, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a4, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a4, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a4, Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a4, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a4, Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	FName[] autoPlayNameList;//[Offset: 0x1a8, Size: 12]
	enum TickFrequency;//[Offset: 0x1b4, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1b8, Size: 4]
	void UnregisterInputComponent();// 0x585cd68
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x49216cc
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x585cc9c
	void StopListeningForAllInputActions();// 0x585cc88
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x585cc10
	void SetWAnimTime(WAnimTime InWAnimTime);// 0x585cb88
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x585cac8
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x585ca0c
	void SetPadding(Margin InPadding);// 0x585c984
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x585c90c
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x585c894
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x585c7d8
	void SetInputActionPriority(int NewPriority);// 0x585c760
	void SetInputActionBlocking(bool bShouldBlock);// 0x585c6e0
	void SetForegroundColor(SlateColor InForegroundColor);// 0x585c3c0
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x585c340
	void SetDesiredSizeInViewport(Vector2D Size);// 0x585c2d0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x585c254
	void SetAnchorsInViewport(Anchors Anchors);// 0x585c1cc
	void SetAlignmentInViewport(Vector2D Alignment);// 0x585c15c
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x585c0e4
	void RemoveFromViewport();// 0x585c0d0
	void RegisterInputComponent();// 0x585c0bc
	void PreConstruct(bool IsDesignTime);// 0x49216cc
	void PlaySound(SoundBase* SoundToPlay);// 0x585c044
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x585be70
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x585bce0
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x585bc60
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x49216cc
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x49216cc
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x49216cc
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x49216cc
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x49216cc
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x49216cc
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x49216cc
	void OnPaint(out PaintContext Context);// 0x49216cc
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x49216cc
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x49216cc
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x49216cc
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x49216cc
	void OnMouseCaptureLost();// 0x49216cc
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x49216cc
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x49216cc
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x49216cc
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x49216cc
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x49216cc
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x49216cc
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x49216cc
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x49216cc
	void OnFocusLost(FocusEvent InFocusEvent);// 0x49216cc
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x49216cc
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x49216cc
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x49216cc
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x49216cc
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x49216cc
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x49216cc
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x585bbe0
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x350fd90
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x49216cc
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x49216cc
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x585ba50
	bool IsPlayingAnimation();// 0x585ba28
	bool IsListeningForInputAction(FName ActionName);// 0x585b9a8
	bool IsInViewport();// 0x585b774
	bool IsInteractable();// 0x49216cc
	bool IsAnyAnimationPlaying();// 0x585b980
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x585b900
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x585b880
	Widget* GetWidgetFromName(out const FName Name);// 0x585b7ec
	Pawn* GetOwningPlayerPawn();// 0x585b7c4
	PlayerController* GetOwningPlayer();// 0x34da7d8
	LocalPlayer* GetOwningLocalPlayer();// 0x585b79c
	bool GetIsVisible();// 0x585b774
	bool GetDontPaintWhenChildEmpty();// 0x585b74c
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x585b6cc
	Anchors GetAnchorsInViewport();// 0x585b688
	Vector2D GetAlignmentInViewport();// 0x585b648
	void Destruct();// 0x49216cc
	void Construct();// 0x49216cc
	void AddToViewport(int ZOrder);// 0x585b5d0
	bool AddToPlayerScreen(int ZOrder);// 0x585b550

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 16]
	FText ToolTipText;//[Offset: 0x30, Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 1]
	bool bDisableVolatileInSlateGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBufferNew;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9c, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0x9d, Size: 1]
	byte PreservedLayerNum;//[Offset: 0x9e, Size: 1]
	byte Cursor;//[Offset: 0x9f, Size: 1]
	enum Clipping;//[Offset: 0xa0, Size: 1]
	enum Visibility;//[Offset: 0xa1, Size: 1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	enum WidgetVisible;//[Offset: 0xa3, Size: 1]
	bool bOpenReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	bool bReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa8, Size: 4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc4, Size: 12]
	void SetWidgetRender(const enum InWidgetVisible);// 0x58624d0
	void SetVisibility(enum InVisibility);// 0x5862450
	void SetUserFocus(PlayerController* PlayerController);// 0x58623d8
	void SetToolTipText(out const FText InToolTipText);// 0x5862234
	void SetToolTip(Widget* Widget);// 0x58621bc
	void SetRenderTranslation(Vector2D Translation);// 0x586214c
	void SetRenderTransformPivot(Vector2D Pivot);// 0x58620dc
	void SetRenderTransform(WidgetTransform InTransform);// 0x5862004
	void SetRenderShear(Vector2D Shear);// 0x5861f94
	void SetRenderScale(Vector2D Scale);// 0x5861f24
	void SetRenderAngle(float Angle);// 0x5861eac
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x5861da4
	void SetKeyboardFocus();// 0x5861d90
	void SetIsEnabled(bool bInIsEnabled);// 0x35158fc
	void SetCursor(byte InCursor);// 0x5861d18
	void SetClipping(enum InClipping);// 0x5861ca0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x5861be4
	void ResetCursor();// 0x5861bd0
	void RemoveFromParent();// 0x3716608
	EventReply OnReply__DelegateSignature();// 0x49216cc
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x49216cc
	bool IsVisible();// 0x5861ba8
	bool IsHovered();// 0x5861b80
	void InvalidateLayoutCache();// 0x5861b6c
	void InvalidateLayoutAndVolatility();// 0x5861b58
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x5861ad8
	bool HasUserFocus(PlayerController* PlayerController);// 0x5861a58
	bool HasMouseCapture();// 0x5861a30
	bool HasKeyboardFocus();// 0x5861a08
	bool HasFocusedDescendants();// 0x58619e0
	bool HasAnyUserFocus();// 0x58619b8
	enum GetWidgetRender();// 0x5861990
	Widget* GetWidget__DelegateSignature();// 0x49216cc
	enum GetVisibility();// 0x5861968
	Geometry GetTickSpaceGeometry();// 0x58618e8
	Widget* GetTheTemplate();// 0x5861940
	FText GetText__DelegateSignature();// 0x49216cc
	enum GetSlateVisibility__DelegateSignature();// 0x49216cc
	SlateColor GetSlateColor__DelegateSignature();// 0x49216cc
	SlateBrush GetSlateBrush__DelegateSignature();// 0x49216cc
	PanelWidget* GetParent();// 0x5861918
	Geometry GetPaintSpaceGeometry();// 0x58618e8
	PlayerController* GetOwningPlayer();// 0x34da7d8
	byte GetMouseCursor__DelegateSignature();// 0x49216cc
	LinearColor GetLinearColor__DelegateSignature();// 0x49216cc
	bool GetIsEnabled();// 0x58618c0
	int GetInt32__DelegateSignature();// 0x49216cc
	float GetFloat__DelegateSignature();// 0x49216cc
	Vector2D GetDesiredSize();// 0x5861880
	enum GetClipping();// 0x5861858
	enum GetCheckBoxState__DelegateSignature();// 0x49216cc
	Geometry GetCachedGeometry();// 0x5861828
	Geometry GetCachedAllottedGeometry();// 0x58617f8
	bool GetBool__DelegateSignature();// 0x49216cc
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x49216cc
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x49216cc
	void ForceVolatile(bool bForce);// 0x5861778
	void ForceLayoutPrepass();// 0x5861764
	void DisableVolatileInSlateGI(bool bDisabled);// 0x58616e4
	void AdaptationWidgetSlot(out const Margin InOffset);// 0x5861654

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 4]
	Widget* Content;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xd0, Size: 12]
	bool RemoveChildAt(int Index);// 0x58460ac
	bool RemoveChild(Widget* Content);// 0x584602c
	bool HasChild(Widget* Content);// 0x5845fac
	bool HasAnyChildren();// 0x5845f84
	int GetChildrenCount();// 0x5845f5c
	int GetChildIndex(Widget* Content);// 0x5845edc
	Widget* GetChildAt(int Index);// 0x5845e5c
	void ClearChildren();// 0x5845e48
	PanelSlot* AddChildAt(int Index, Widget* Content);// 0x5845d84
	PanelSlot* AddChild(Widget* Content);// 0x5845d04

--------------------------------
Class: WAnimTime
	float PlayTime;//[Offset: 0x0, Size: 4]
	float PlayTime;//[Offset: 0x4, Size: 4]
	float PlayTime;//[Offset: 0x8, Size: 4]
	float PlayTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220, Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c, Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238, Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c, Size: 12]
	float GetStartTime();// 0x58634c4
	float GetEndTime();// 0x586349c

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x40, Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1d4, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1d8, Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 16]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 12]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 4]
	FloatRange SelectionRange;//[Offset: 0x74, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x84, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float FixedFrameInterval;//[Offset: 0x98, Size: 4]
	float InTime;//[Offset: 0x9c, Size: 4]
	float OutTime;//[Offset: 0xa0, Size: 4]
	float StartTime;//[Offset: 0xa4, Size: 4]
	float EndTime;//[Offset: 0xa8, Size: 4]
	bool bLowDeviceFrameRateLimitEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int LowDeviceFrameLimit;//[Offset: 0xb0, Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c, Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20, Size: 12]
	enum Ownership;//[Offset: 0x2c, Size: 1]
	enum DeviceLevel;//[Offset: 0x2d, Size: 1]
	enum UserQualitySettingLevel;//[Offset: 0x2e, Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c, Size: 4]
	Guid ParentGuid;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 12]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114, Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x14, Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 56]
	FName EvaluationGroup;//[Offset: 0x68, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4, Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34, Size: 16]
	int HierarchicalBias;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 12]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4, Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40, Size: 60]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 4]
	Widget*[] AllWidgets;//[Offset: 0x20, Size: 12]

--------------------------------
Class: Geometry

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38, Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c, Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	int ControllerId;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24, Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28, Size: 12]
	World* World;//[Offset: 0x58, Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c, Size: 4]
	void SSSwapControllers();// 0x35b23f8
	void ShowTitleSafeArea();// 0x355f9e4
	void SetConsoleTarget(int playerIndex);// 0x3519384
	static void RemoveViewportChangeDelegate(out const delegate Delegate);// 0x6500a54
	static void AddViewportChangeDelegate(out const delegate Delegate);// 0x6500994

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 12]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 4]
	class Object* WithinClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24, Size: 12]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30, Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c, Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	void ReceiveShutdown();// 0x49216cc
	void ReceiveInit();// 0x49216cc
	void HandleTravelError(byte FailureType);// 0x49216cc
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x49216cc
	int GetDeviceLevel();// 0x3566af0
	void DebugRemovePlayer(int ControllerId);// 0x64bce78
	void DebugCreatePlayer(int ControllerId);// 0x378fc80

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x24, Size: 4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x28, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x34, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x40, Size: 4]
	float Priority;//[Offset: 0x44, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x48, Size: 4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x4c, Size: 12]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x58, Size: 4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 12]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 12]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	byte OutputTarget;//[Offset: 0x25, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float EQPriority;//[Offset: 0x20, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 12]
	float InitialDelay;//[Offset: 0x6c, Size: 4]
	float FadeInTime;//[Offset: 0x70, Size: 4]
	float Duration;//[Offset: 0x74, Size: 4]
	float FadeOutTime;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 4]
	float PitchAdjuster;//[Offset: 0x8, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 532]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	byte DistanceType;//[Offset: 0x7e, Size: 1]
	float OmniRadius;//[Offset: 0x80, Size: 4]
	float StereoSpread;//[Offset: 0x84, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0x88, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0x8c, Size: 4]
	float RadiusMin;//[Offset: 0x90, Size: 4]
	float RadiusMax;//[Offset: 0x94, Size: 4]
	float LPFRadiusMin;//[Offset: 0x98, Size: 4]
	float LPFRadiusMax;//[Offset: 0x9c, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xa0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xa4, Size: 88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xfc, Size: 88]
	float LPFFrequencyAtMin;//[Offset: 0x154, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x158, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x15c, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x160, Size: 4]
	float FocusAzimuth;//[Offset: 0x164, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x168, Size: 4]
	float FocusDistanceScale;//[Offset: 0x16c, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x170, Size: 4]
	float FocusPriorityScale;//[Offset: 0x174, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x178, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x17c, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x180, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x184, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x188, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x18c, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x190, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x194, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x198, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x19c, Size: 4]
	enum ReverbSendMethod;//[Offset: 0x1a0, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x1a4, Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x1a8, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x1ac, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x1b0, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x1b4, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1b8, Size: 88]
	float ManualReverbSendLevel;//[Offset: 0x210, Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8, Size: 88]
	byte AttenuationShape;//[Offset: 0x60, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x64, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x68, Size: 12]
	float ConeOffset;//[Offset: 0x74, Size: 4]
	float FalloffDistance;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 12]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 4]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 12]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x1cc, Size: 1]
	float SourceBusDuration;//[Offset: 0x1d0, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 1]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x6c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	int StreamingPriority;//[Offset: 0x74, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 1]
	byte SoundGroup;//[Offset: 0x7a, Size: 1]
	FString SpokenText;//[Offset: 0x7c, Size: 12]
	float SubtitlePriority;//[Offset: 0x88, Size: 4]
	float Volume;//[Offset: 0x8c, Size: 4]
	float Pitch;//[Offset: 0x90, Size: 4]
	int NumChannels;//[Offset: 0x94, Size: 4]
	int SampleRate;//[Offset: 0x98, Size: 4]
	int RawPCMDataSize;//[Offset: 0x9c, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xa0, Size: 12]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xac, Size: 12]
	CurveTable* Curves;//[Offset: 0xb8, Size: 4]
	CurveTable* InternalCurves;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 12]
	float Time;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 12]
	SubtitleCue[] Subtitles;//[Offset: 0xc, Size: 12]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 12]
	Object* Payload;//[Offset: 0x28, Size: 4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 4]
	enum Pivot;//[Offset: 0x30, Size: 1]
	Vector2D Offset;//[Offset: 0x34, Size: 8]
	delegate OnDrop;//[Offset: 0x3c, Size: 12]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 12]
	delegate OnDragged;//[Offset: 0x54, Size: 12]
	void Drop(out const PointerEvent PointerEvent);// 0x5838074
	void Dragged(out const PointerEvent PointerEvent);// 0x5837e40
	void DragCancelled(out const PointerEvent PointerEvent);// 0x5837c0c

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float Angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98, Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 12]
	FName DestinationProperty;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0xc, Size: 4]
	Field* Field;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x308, Size: 4]
	FName MatineeControllerName;//[Offset: 0x310, Size: 8]
	float PlayRate;//[Offset: 0x318, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	float ForceStartPosition;//[Offset: 0x320, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x324, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x324, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x324, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x324, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x328, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x330, Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x340, Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x34c, Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x358, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x358, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x358, Size: 1]
	float InterpPosition;//[Offset: 0x35c, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x364, Size: 1]
	delegate OnPlay;//[Offset: 0x368, Size: 12]
	delegate OnStop;//[Offset: 0x374, Size: 12]
	delegate OnPause;//[Offset: 0x380, Size: 12]
	void Stop();// 0x34ee148
	void SetPosition(float NewPosition, bool bJump);// 0x6594400
	void SetLoopingState(bool bNewLooping);// 0x6594378
	void Reverse();// 0x34f5ff4
	void Play();// 0x34d78b8
	void Pause();// 0x3585a04
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x65941d0
	void ChangePlaybackDirection();// 0x34cfeec

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 4]
	float PathBuildTime;//[Offset: 0x20, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 4]
	float EdSectionStart;//[Offset: 0x34, Size: 4]
	float EdSectionEnd;//[Offset: 0x38, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 12]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 12]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2b0, Size: 4]
	Actor* ChildActor;//[Offset: 0x2b4, Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x2b8, Size: 4]
	void SetChildActorClass(class Actor InClass);// 0x64be330

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 4]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x49216cc
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x656f5f0
	bool RemoteEvent(FName EventName);// 0x656f568
	void LevelReset();// 0x49216cc

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x30c, Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x310, Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x314, Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x660, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 1]
	float ScreenSize;//[Offset: 0x668, Size: 4]
	float U;//[Offset: 0x66c, Size: 4]
	float UL;//[Offset: 0x670, Size: 4]
	float V;//[Offset: 0x674, Size: 4]
	float VL;//[Offset: 0x678, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x649e44c
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x649e2b4
	void SetSprite(Texture2D* NewSprite);// 0x35bf6ac

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x310, Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31c, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31c, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31c, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31c, Size: 1]
	bool bEnableParallelWorld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31c, Size: 1]
	int[] ParallelWorldIds;//[Offset: 0x320, Size: 12]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x32c, Size: 1]
	float KillZ;//[Offset: 0x330, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x334, Size: 4]
	float WorldGravityZ;//[Offset: 0x338, Size: 4]
	float GlobalGravityZ;//[Offset: 0x33c, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x340, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x344, Size: 4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x348, Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x34c, Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x350, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x358, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x364, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x368, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 1]
	float MaxWorldSize;//[Offset: 0x370, Size: 4]
	int RegionSizeNear;//[Offset: 0x374, Size: 4]
	int RegionSizeFar;//[Offset: 0x378, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	int Graduation;//[Offset: 0x380, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x384, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 1]
	int VisibilityCellSize;//[Offset: 0x38c, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x390, Size: 1]
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x391, Size: 1]
	byte CurrentDSPVSCategory;//[Offset: 0x392, Size: 1]
	<byte,DSPVSParameter> DSPVSCategorys;//[Offset: 0x394, Size: 60]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x3d4, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x424, Size: 100]
	SurfelRayTracingSettings SurfelRayTracingSettings;//[Offset: 0x488, Size: 64]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x4c8, Size: 16]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x4d8, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x4fc, Size: 4]
	float WorldToMeters;//[Offset: 0x500, Size: 4]
	float MonoCullingDistance;//[Offset: 0x504, Size: 4]
	BookMark* BookMarks;//[Offset: 0x508, Size: 4]
	float TimeDilation;//[Offset: 0x530, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x534, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x538, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x53c, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x540, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x544, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x548, Size: 4]
	PlayerState* Pauser;//[Offset: 0x54c, Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x550, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x550, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x554, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x560, Size: 12]
	bool bEnableUnLoadLevelGCMemoryOptimitize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	float[] LODRelativeDistances;//[Offset: 0x570, Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	int WorldCompositionNums;//[Offset: 0x580, Size: 4]
	int CompositionBlockLength;//[Offset: 0x584, Size: 4]
	void OnRep_WorldGravityZ();// 0x34d78b8

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x308, Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x314, Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x318, Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x31c, Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x320, Size: 4]
	class HUD* HUDClass;//[Offset: 0x324, Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x328, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x32c, Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x330, Size: 4]
	GameSession* GameSession;//[Offset: 0x334, Size: 4]
	GameStateBase* GameState;//[Offset: 0x338, Size: 4]
	FText DefaultPlayerName;//[Offset: 0x33c, Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 1]
	void StartPlay();// 0x37400c8
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x3745638
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x64ead90
	bool ShouldReset(Actor* ActorToReset);// 0x64eacfc
	void ReturnToMainMenuHost();// 0x64eace0
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x64eabc0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3766980
	void RestartPlayer(Controller* NewPlayer);// 0x357d378
	void ResetLevel();// 0x64eab98
	bool PlayerCanRestart(PlayerController* Player);// 0x37455b0
	bool MustSpectate(PlayerController* NewPlayerController);// 0x64eab10
	void K2_PostLogin(PlayerController* NewPlayer);// 0x49216cc
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x49216cc
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x49216cc
	void K2_OnLogout(Controller* ExitingController);// 0x49216cc
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x49216cc
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x64eaa08
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x64ea944
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x34d78d4
	bool HasMatchStarted();// 0x64c0644
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x64ea8c4
	int GetNumSpectators();// 0x64b83e8
	int GetNumPlayers();// 0x64ea894
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x64ea80c
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x64ea6fc
	Actor* ChoosePlayerStart(Controller* Player);// 0x64ea674
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x4097238
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x64ea5a8

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x308, Size: 4]
	int MaxPlayers;//[Offset: 0x30c, Size: 4]
	int MaxPartySize;//[Offset: 0x310, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x314, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	FName SessionName;//[Offset: 0x318, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x308, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x30c, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x310, Size: 4]
	PlayerState*[] PlayerArray;//[Offset: 0x314, Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x324, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x328, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x32c, Size: 4]
	void OnRep_SpectatorClass();// 0x35d1618
	void OnRep_ReplicatedWorldTimeSeconds();// 0x3602438
	void OnRep_ReplicatedHasBegunPlay();// 0x37a9314
	void OnRep_GameModeClass();// 0x3621580
	bool HasMatchStarted();// 0x39a0360
	bool HasBegunPlay();// 0x64fdf84
	float GetServerWorldTimeSeconds();// 0x39675c8
	float GetPlayerStartTime(Controller* Controller);// 0x64fdefc
	float GetPlayerRespawnDelay(Controller* Controller);// 0x64fde74

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x308, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x30c, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x310, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x314, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x318, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x320, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x324, Size: 4]
	int BadPingThreshold;//[Offset: 0x328, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x32c, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x330, Size: 4]
	float PercentForBadPing;//[Offset: 0x334, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x338, Size: 4]
	float MoveRepSize;//[Offset: 0x33c, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x340, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x344, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x348, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x34c, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x350, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x354, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x358, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x35c, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x360, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x364, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x36c, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x374, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x378, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x37c, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x380, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 1]

--------------------------------
Class: DSPVSParameter
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	int DSVisibilityCellSize;//[Offset: 0x4, Size: 4]
	byte DSVisibilityAggressiveness;//[Offset: 0x8, Size: 1]
	int[] DSDebugGroups;//[Offset: 0xc, Size: 12]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: SurfelRayTracingSettings
	bool bAllowSurfelRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	Vector SurfelVoxelSize;//[Offset: 0x4, Size: 12]
	IntVector SurfelHierarchyDimension;//[Offset: 0x10, Size: 12]
	Vector IrradianceVolumeCellSize;//[Offset: 0x1c, Size: 12]
	IntVector IrradianceVolumeDimension;//[Offset: 0x28, Size: 12]
	uint32 IrradianceVolumeCellDim;//[Offset: 0x34, Size: 4]
	uint32 SurfelInjectSingleSize;//[Offset: 0x38, Size: 4]
	uint32 SurfelPoolInitScale;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	byte ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 4]
	float Volume;//[Offset: 0x8, Size: 4]
	float FadeTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c, Size: 4]
	float Diffusion;//[Offset: 0x20, Size: 4]
	float Gain;//[Offset: 0x24, Size: 4]
	float GainHF;//[Offset: 0x28, Size: 4]
	float DecayTime;//[Offset: 0x2c, Size: 4]
	float DecayHFRatio;//[Offset: 0x30, Size: 4]
	float ReflectionsGain;//[Offset: 0x34, Size: 4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 4]
	float LateGain;//[Offset: 0x3c, Size: 4]
	float LateDelay;//[Offset: 0x40, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 12]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 4]
	Actor* InViewer;//[Offset: 0x4, Size: 4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 4]
	Vector ViewLocation;//[Offset: 0xc, Size: 12]
	Vector ViewDir;//[Offset: 0x18, Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20, Size: 8]
	World* WorldAsset;//[Offset: 0x28, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 12]
	Transform LevelTransform;//[Offset: 0x70, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa3, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa3, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa3, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa3, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 1]
	int LevelLODIndex;//[Offset: 0xa8, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 1]
	Color DrawColor;//[Offset: 0xb0, Size: 4]
	LinearColor LevelColor;//[Offset: 0xb4, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc4, Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xd0, Size: 4]
	FString[] Keywords;//[Offset: 0xd8, Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe4, Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xf0, Size: 12]
	delegate OnLevelShown;//[Offset: 0xfc, Size: 12]
	delegate OnLevelHidden;//[Offset: 0x108, Size: 12]
	delegate OnStatusChanged;//[Offset: 0x114, Size: 12]
	Level* LoadedLevel;//[Offset: 0x12c, Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 4]
	Level*[] UnloadingLevels;//[Offset: 0x134, Size: 12]
	bool IsStreamingStatePending();// 0x656ff54
	bool IsLevelVisible();// 0x656ff2c
	bool IsLevelLoaded();// 0x656ff08
	FName GetWorldAssetPackageFName();// 0x656fec8
	Level* GetLoadedLevel();// 0x382dff0
	LevelScriptActor* GetLevelScriptActor();// 0x656fea0
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x656fd40

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x330, Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 1]
	byte StreamingUsage;//[Offset: 0x33d, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x534, Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x7b4, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ce, Size: 1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cf, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x7ec, Size: 4]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 4]
	Level* Level;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4, Size: 60]
	<FName,ObjectPoolClassConfig> mapClassConfigs;//[Offset: 0x40, Size: 60]
	Actor* Holder;//[Offset: 0x84, Size: 4]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0, Size: 4]
	int ObjectLifePeriodTime;//[Offset: 0x4, Size: 4]
	Object*[] Pool;//[Offset: 0x8, Size: 12]
	<Object*,uint32> RecycleTime;//[Offset: 0x14, Size: 60]
	int Size;//[Offset: 0x50, Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]

--------------------------------
Class: ObjectPoolClassConfig
	FName ObjectClassName;//[Offset: 0x0, Size: 8]
	bool ObjectPoolEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool ObjectPoolEnableForComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int PoolSize;//[Offset: 0xc, Size: 4]
	int LifePeriodTime;//[Offset: 0x10, Size: 4]
	bool UseOldPoolLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool DisableOnLowMemDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	int BackendSwitchType;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c, Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20, Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x28, Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	enum DataGatheringMode;//[Offset: 0x2d, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x30, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x34, Size: 12]
	float UpdateInterval;//[Offset: 0x40, Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x44, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x48, Size: 12]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x54, Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa8, Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb4, Size: 12]
	enum OperationMode;//[Offset: 0x15c, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x659f590
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x659f518
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x659f458
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x659f3a4
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x659f32c
	void SetGeometryGatheringMode(enum NewMode);// 0x659f2b4
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x659f2a0
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x659f1a0
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x659eff4
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x659ef7c
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x659ed7c
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x659eb8c
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x659e99c
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x659e7ac
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x659e734
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x659e6bc
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x659e510
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x659e364
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x659e160
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x659df5c
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x659dee4
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x659dd38
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x659db58

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 4]
	float TravelCostOverride;//[Offset: 0x4, Size: 4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x330, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c, Size: 12]
	Vector[] PathPoints;//[Offset: 0x28, Size: 12]
	byte RecalculateOnInvalidation;//[Offset: 0x34, Size: 1]
	bool IsValid();// 0x659d204
	bool IsStringPulled();// 0x365435c
	bool IsPartial();// 0x659d1dc
	float GetPathLength();// 0x659d1b4
	float GetPathCost();// 0x659d18c
	FString GetDebugString();// 0x659d0cc
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x659d04c
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x659cf7c

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 24]
	FName AISystemModuleName;//[Offset: 0x38, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 4]
	float TestHeightDifference;//[Offset: 0x34, Size: 4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x649de94
	int GetObjectCount();// 0x649de6c
	int GetNewAvoidanceUID();// 0x649de44
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x649ddb4

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 4]
	<Level*> Levels;//[Offset: 0x14, Size: 60]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 4]
	World* World;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0xd4, Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xe0, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xec, Size: 4]
	FString PVEBordersName;//[Offset: 0xf0, Size: 12]
	FString[] UnloadTileOnServer;//[Offset: 0xfc, Size: 12]
	<FString> UnloadTileSet;//[Offset: 0x108, Size: 60]
	bool bClientUseInitViewpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	Vector ClientInitViewPoint;//[Offset: 0x160, Size: 12]
	LevelStreaming*[] LandScapeStreamingLevel;//[Offset: 0x16c, Size: 12]
	bool SetStreamingDistanceScalePerLevel(out const FName LevelName, float Scale);// 0x663cc88
	bool SetStreamingDistanceScaleByLayer(FString LayerName, float Scale);// 0x663cb80
	bool SetStreamingDistanceScaleAllLevel(float Scale);// 0x663cb00
	bool RemoveDynamicTile(FString TilePackageNameStr);// 0x663ca3c
	LevelStreaming* GetDynamicTile(FString TilePackageNameStr);// 0x663c978
	void AddEnableStreamingTile(int EnableTileIdx);// 0x663c900
	void AddEnableStreamingLayer(FString EnableLayerName);// 0x663c7a8
	LevelStreaming* AddDynamicTile(FString TilePackageNameStr, int X, int Y, bool bAllowCopy, bool bDisableDistanceStreaming);// 0x663c5bc

--------------------------------
Class: AkAmbientSound.Actor.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x308, Size: 4]
	AkComponent* AkComponent;//[Offset: 0x30c, Size: 4]
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	void StopAmbientSound();// 0x72624e8
	void StartAmbientSound();// 0x72624d4

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MinimumDuration;//[Offset: 0x28, Size: 4]
	float MaximumDuration;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2b0, Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2b4, Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x2c0, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x2c4, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2c8, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d2, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d2, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x2d4, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x2d8, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2dc, Size: 4]
	FString EventName;//[Offset: 0x2e0, Size: 12]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x7269944
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x7269610
	void StopPlayingID(int StopEventID);// 0x7269598
	void Stop();// 0x7269584
	int SetSwitch(FString SwitchGroup, FString SwitchState);// 0x726930c
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x726928c
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x72690f0
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x7268f10
	void SetOutputBusVolume(float BusVolume);// 0x7268e98
	void SetListeners(out const AkComponent*[] Listeners);// 0x7268dcc
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x7268d54
	void SetAutoDestroy(bool in_AutoDestroy);// 0x7268cd8
	void SetAttenuationScalingFactor(float Value);// 0x7268c60
	int SeekOnEvent(FString in_EventName, int in_iPosition);// 0x7268b58
	void PostTrigger(FString Trigger);// 0x7268a00
	int PostAssociatedAkEvent();// 0x72689d8
	int PostAkEventByName(FString in_EventName);// 0x7268914
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x726880c
	float GetAttenuationRadius();// 0x72687e4
	void GetAkGameObjectName(out FString Name);// 0x7268718

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x310, Size: 32]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x330, Size: 4]
	SoftObjectPath LevelSequence;//[Offset: 0x338, Size: 24]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x350, Size: 12]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x35c, Size: 4]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x360, Size: 4]
	bool bReduceFrequency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	int ReduceFrameCount;//[Offset: 0x368, Size: 4]
	float IgnoreFrameTolerance;//[Offset: 0x36c, Size: 4]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x374, Size: 4]
	bool bForceAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x37c, Size: 4]
	void SetSequence(LevelSequence* InSequence);// 0x5ac8bbc
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x5ac8a64
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x5ac88cc
	void SetAllMovieSceneSectionsToKeepState();// 0x5ac88b8
	void ResetBindings();// 0x5ac8878
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x5ac8780
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x5ac8640
	void ReceiveInitailizePlayer();// 0x49216cc
	LevelSequence* GetSequence(bool bLoad, bool bInitializePlayer);// 0x5ac8568
	MovieSceneObjectBindingID GetPossessableByName(FString NameKeyString);// 0x5ac8490
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x5ac8308

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0, Size: 4]
	float PlayRate;//[Offset: 0x4, Size: 4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	interface class None* BindingOverrides;//[Offset: 0x18, Size: 8]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x644, Size: 12]
	delegate OnTrackEvent;//[Offset: 0x650, Size: 12]
	Object*[] AdditionalEventReceivers;//[Offset: 0x688, Size: 12]
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x5ac9e1c

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x2e0, Size: 12]
	delegate OnPlayReverse;//[Offset: 0x2ec, Size: 12]
	delegate OnStop;//[Offset: 0x2f8, Size: 12]
	delegate OnPreStop;//[Offset: 0x304, Size: 12]
	bool FreezeEndFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	delegate OnPause;//[Offset: 0x314, Size: 12]
	delegate OnFinished;//[Offset: 0x320, Size: 12]
	delegate OnObjectSpawnedEvent;//[Offset: 0x32c, Size: 12]
	byte Status;//[Offset: 0x338, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 1]
	bool bPendingFirstUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x33c, Size: 4]
	float TimeCursorPosition;//[Offset: 0x340, Size: 4]
	float StartTime;//[Offset: 0x344, Size: 4]
	float EndTime;//[Offset: 0x348, Size: 4]
	int CurrentNumLoops;//[Offset: 0x34c, Size: 4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x35c, Size: 32]
	void Stop();// 0x562e36c
	void StartPlayingNextTick();// 0x562e358
	void SetPlayRate(float PlayRate);// 0x562e2e0
	void SetPlayLoopCount(int NumLoops);// 0x562e268
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x562e1ac
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x562e06c
	void Scrub();// 0x562e198
	void PlayReverse();// 0x562e184
	void PlayLooping(int NumLoops);// 0x562e10c
	void Play();// 0x562e0f8
	void Pause();// 0x562e0e4
	void JumpToPositionEx(float NewPlaybackPosition);// 0x562e06c
	void JumpToPosition(float NewPlaybackPosition);// 0x562dff4
	bool IsPlaying();// 0x562dfcc
	bool IsPaused();// 0x562dfa4
	void GoToEndAndStop();// 0x562df90
	float GetPlayRate();// 0x562df68
	float GetPlaybackStart();// 0x562df4c
	float GetPlaybackPosition();// 0x562df24
	float GetPlaybackEnd();// 0x37b2844
	float GetLength();// 0x562defc
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x562ddb8
	void ChangePlaybackDirection();// 0x562dda4

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 60]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x260, Size: 60]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x29c, Size: 60]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 12]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 12]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x1c, Size: 12]
	Object* CachedComponent;//[Offset: 0x28, Size: 8]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 4]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x20, Size: 24]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x38, Size: 4]

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x20, Size: 12]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 24]
	Object* Object;//[Offset: 0x18, Size: 8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x204, Size: 48]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x234, Size: 4]
	void SetSettings(Object* InSettings);// 0x49216cc
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x3e98d08

--------------------------------
Class: LevelSequencePlayerSnapshot
	FText MasterName;//[Offset: 0x0, Size: 12]
	float MasterTime;//[Offset: 0xc, Size: 4]
	FText CurrentShotName;//[Offset: 0x10, Size: 12]
	float CurrentShotLocalTime;//[Offset: 0x1c, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x20, Size: 4]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x24, Size: 8]
	MovieSceneSequenceID ShotID;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	float FrameRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Editor_login_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 4]
	void SetFpsByIndex(int idx, int CallFunc_Subtract_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x49216cc
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x49216cc
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x49216cc
	void InpActEvt_BackSpace_K2Node_InputKeyEvent(Key Key);// 0x49216cc
	void InpActEvt_B_K2Node_InputKeyEvent(Key Key);// 0x49216cc
	void InpActEvt_G_K2Node_InputKeyEvent(Key Key);// 0x49216cc
	void ReceiveBeginPlay();// 0x49216cc
	void ExecuteUbergraph_Editor_login(int EntryPoint, bool CallFunc_IsEditor_ReturnValue, FString Temp_string_Variable, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key2, bool CallFunc_NotEqual_IntInt_ReturnValue, Key K2Node_InputKeyEvent_Key3, FString CallFunc_GetPlatformName_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_IsEditor_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, Key K2Node_InputKeyEvent_Key4, Key K2Node_InputKeyEvent_Key5);// 0x49216cc

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: LuaBPVar

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x34da7a8
	static GameBackendHUD* GetInstance();// 0x3e8bd0c
	GameFrontendHUD* GetGameFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x3e8bc8c
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x3e8bc0c

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x1c, Size: 4]
	FString BackendUtilsClassName;//[Offset: 0x20, Size: 12]
	BackendUtils* Utils;//[Offset: 0x2c, Size: 4]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x30, Size: 12]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x3c, Size: 60]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x674835c
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x67482dc

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x3e8b960

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c, Size: 12]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x28, Size: 12]
	FString ManualTableDirectory;//[Offset: 0x34, Size: 12]
	bool AllowItemTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	UAEDataTable*[] TableObjList;//[Offset: 0x104, Size: 12]
	World* CurWorld;//[Offset: 0x110, Size: 4]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x114, Size: 60]
	<FName,UAEDataTable*> TableObjMap_Mod;//[Offset: 0x150, Size: 60]
	delegate OnTableCreateInFighting;//[Offset: 0x18c, Size: 12]
	FString PathCompressionConfigsPath;//[Offset: 0x264, Size: 12]
	bool bIsPathCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bIsPathCompressionCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	int PathCompressionCacheMaxSize;//[Offset: 0x274, Size: 4]
	bool bTranslationFallBackUnloadDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	bool bShrinkTranslationMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	FString BaseTableRelativeDir;//[Offset: 0x280, Size: 12]
	FString ModTableRelativeDir;//[Offset: 0x28c, Size: 12]
	FString[] BaseModTableConfig;//[Offset: 0x298, Size: 12]
	<FName,ModTable*> ModTableMap;//[Offset: 0x2a4, Size: 60]
	<FName,UAEDataTable*> ModTableObjMap;//[Offset: 0x2e0, Size: 60]
	UAEDataTable*[] InGameTableObjList;//[Offset: 0x31c, Size: 12]
	<FName,bool> CheckNeedModMap;//[Offset: 0x328, Size: 60]
	FString CurrentModName;//[Offset: 0x364, Size: 12]
	FString EmptyModName;//[Offset: 0x370, Size: 12]
	<FString,BaseTableResMap*> LoadedTableMap;//[Offset: 0x37c, Size: 60]
	<FString,bool> CheckMapTable;//[Offset: 0x3b8, Size: 60]
	<FString,DataTableProxy*> TableCache;//[Offset: 0x3f4, Size: 60]
	void ReleaseTable(FName TableFName);// 0x3bd56a4
	UAEDataTable* GetTablePtr_Mod(FName tableName);// 0x3bd5624
	UAEDataTable* GetTablePtr(FName tableName, bool bCheckModTable);// 0x3bd5550
	BaseTableResMap* GetTableMap(FString tableName);// 0x3bd548c
	static bool GetTableData(FString tableName, FString Key, out TableRowBase OutRow);// 0x3bd4b90
	static UAETableManager* GetInstance();// 0x3bd4b68
	static FString GetDomainByID(const int ID);// 0x3bd4a68
	static UAEDataTable* GetDataTableStatic_Mod(FString tableName);// 0x3bd49ac
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x3bd48f0
	DataTableProxy* GetDataTableProxy(FString tableName, bool bTempory);// 0x3bd47e0

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0x80, Size: 60]
	bool SetTableData_String(FString KeyValue, FString TagName, FString Value);// 0x6750320
	bool SetTableData_Int32(FString KeyValue, FString TagName, int Value);// 0x6750194
	bool SetTableData_Float(FString KeyValue, FString TagName, float Value);// 0x6750008
	FString GetTableName();// 0x674ff48
	FString GetRealTableName(FString tableName);// 0x674fe04
	bool ConditionAddEmptyRow(out const FName RowName);// 0x674fd70

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: ModTable.Object

--------------------------------
Class: BaseTableResMap.Object
	ScriptStruct* DataStruct;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: DataTableProxy.Object
	DataTable* ModDataTable;//[Offset: 0x1c, Size: 4]
	DataTable* DataTable;//[Offset: 0x20, Size: 4]
	DataTableRowDesc* Desc;//[Offset: 0x9c, Size: 4]

--------------------------------
Class: DataTableRowDesc.Object

--------------------------------
Class: TableRowBase

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20, Size: 4]
	SoftObjectPath TinyFontName;//[Offset: 0x28, Size: 24]
	Font* SmallFont;//[Offset: 0x5c, Size: 4]
	SoftObjectPath SmallFontName;//[Offset: 0x60, Size: 24]
	Font* MediumFont;//[Offset: 0x78, Size: 4]
	SoftObjectPath MediumFontName;//[Offset: 0x80, Size: 24]
	Font* LargeFont;//[Offset: 0x98, Size: 4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0, Size: 24]
	Font* SubtitleFont;//[Offset: 0xb8, Size: 4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0, Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xd8, Size: 12]
	FString[] AdditionalFontNames;//[Offset: 0xec, Size: 12]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 4]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x190, Size: 4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x198, Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1b0, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1b4, Size: 4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b8, Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1d0, Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e8, Size: 4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1f0, Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x208, Size: 4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x20c, Size: 4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x210, Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x228, Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x240, Size: 24]
	Object* GameSingleton;//[Offset: 0x258, Size: 4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x260, Size: 24]
	AssetManager* AssetManager;//[Offset: 0x278, Size: 4]
	Texture2D* DefaultTexture;//[Offset: 0x27c, Size: 4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x280, Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x298, Size: 4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2a0, Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b8, Size: 4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2c0, Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d8, Size: 4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2e0, Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f8, Size: 4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x300, Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x318, Size: 4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x320, Size: 24]
	Material* WireframeMaterial;//[Offset: 0x338, Size: 4]
	FString WireframeMaterialName;//[Offset: 0x33c, Size: 12]
	Material* DebugMeshMaterial;//[Offset: 0x348, Size: 4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x350, Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x368, Size: 4]
	FString LevelColorationLitMaterialName;//[Offset: 0x36c, Size: 12]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x378, Size: 4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x37c, Size: 12]
	Material* LightingTexelDensityMaterial;//[Offset: 0x388, Size: 4]
	FString LightingTexelDensityName;//[Offset: 0x38c, Size: 12]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x398, Size: 4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x39c, Size: 12]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a8, Size: 4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3ac, Size: 12]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b8, Size: 4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3c0, Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x3d8, Size: 4]
	FString VertexColorMaterialName;//[Offset: 0x3dc, Size: 12]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e8, Size: 4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3ec, Size: 12]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f8, Size: 4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3fc, Size: 12]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x408, Size: 4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x40c, Size: 12]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x418, Size: 4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x41c, Size: 12]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x428, Size: 4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x42c, Size: 12]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x438, Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x450, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x454, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x458, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x45c, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x460, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x464, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x468, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x46c, Size: 4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x470, Size: 4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x478, Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x490, Size: 4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x498, Size: 24]
	Material* ArrowMaterial;//[Offset: 0x4b0, Size: 4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b8, Size: 24]
	Material* OutlineMaterial;//[Offset: 0x4d0, Size: 4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d8, Size: 24]
	Material* OutlineMaskedMaterial;//[Offset: 0x4f0, Size: 4]
	SoftObjectPath OutlineMaskedMaterialName;//[Offset: 0x4f8, Size: 24]
	Material* LowLevelLODMaterial;//[Offset: 0x510, Size: 4]
	Material* LowLevelLODMaskMaterial;//[Offset: 0x514, Size: 4]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x518, Size: 24]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x530, Size: 24]
	Texture2D* SmaaAreaTex;//[Offset: 0x548, Size: 4]
	Texture2D* SmaaSearchTex;//[Offset: 0x54c, Size: 4]
	Material* DyeingColorMaterial;//[Offset: 0x550, Size: 4]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x558, Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x570, Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x580, Size: 12]
	LinearColor[] QuadComplexityColors;//[Offset: 0x58c, Size: 12]
	LinearColor[] LightComplexityColors;//[Offset: 0x598, Size: 12]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x5a4, Size: 12]
	LinearColor[] LODColorationColors;//[Offset: 0x5b0, Size: 12]
	LinearColor[] HLODColorationColors;//[Offset: 0x5bc, Size: 12]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x5c8, Size: 12]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x5d4, Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x5d8, Size: 4]
	float MinLightMapDensity;//[Offset: 0x5dc, Size: 4]
	float IdealLightMapDensity;//[Offset: 0x5e0, Size: 4]
	float MaxLightMapDensity;//[Offset: 0x5e4, Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x5ec, Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x5f0, Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x5f4, Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x604, Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x614, Size: 12]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x620, Size: 4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x628, Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x640, Size: 12]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x64c, Size: 12]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x658, Size: 12]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x664, Size: 12]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x670, Size: 4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x678, Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x690, Size: 4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x698, Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x6b0, Size: 4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x6b8, Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x6d0, Size: 4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x6d8, Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x6f4, Size: 4]
	FString[] DeferredCommands;//[Offset: 0x6f8, Size: 12]
	int TickCycles;//[Offset: 0x704, Size: 4]
	int GameCycles;//[Offset: 0x708, Size: 4]
	int ClientCycles;//[Offset: 0x70c, Size: 4]
	float NearClipPlane;//[Offset: 0x710, Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x714, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x714, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x718, Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71c, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71c, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71c, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71c, Size: 1]
	float FixedFrameRate;//[Offset: 0x720, Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x724, Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x734, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x738, Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73c, Size: 1]
	Color C_WorldBox;//[Offset: 0x740, Size: 4]
	Color C_BrushWire;//[Offset: 0x744, Size: 4]
	Color C_AddWire;//[Offset: 0x748, Size: 4]
	Color C_SubtractWire;//[Offset: 0x74c, Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x750, Size: 4]
	Color C_NonSolidWire;//[Offset: 0x754, Size: 4]
	Color C_WireBackground;//[Offset: 0x758, Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x75c, Size: 4]
	Color C_VolumeCollision;//[Offset: 0x760, Size: 4]
	Color C_BSPCollision;//[Offset: 0x764, Size: 4]
	Color C_OrthoBackground;//[Offset: 0x768, Size: 4]
	Color C_Volume;//[Offset: 0x76c, Size: 4]
	Color C_BrushShape;//[Offset: 0x770, Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x774, Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x778, Size: 12]
	byte TransitionType;//[Offset: 0x784, Size: 1]
	FString TransitionDescription;//[Offset: 0x788, Size: 12]
	FString TransitionGameMode;//[Offset: 0x794, Size: 12]
	float MeshLODRange;//[Offset: 0x7a0, Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a4, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x7a8, Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x7ac, Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x7b0, Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x7b4, Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b8, Size: 1]
	int MaxParticleResize;//[Offset: 0x7bc, Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x7c0, Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x7c4, Size: 12]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x7d0, Size: 32]
	float NetClientTicksPerSecond;//[Offset: 0x7f0, Size: 4]
	float DisplayGamma;//[Offset: 0x7f4, Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x7f8, Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x7fc, Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x800, Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x810, Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x820, Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x830, Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x840, Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x851, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x851, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x851, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x851, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x854, Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x860, Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x864, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x868, Size: 12]
	float SelectionHighlightIntensity;//[Offset: 0x880, Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x884, Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x888, Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x88c, Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x890, Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0x9e4, Size: 12]
	FString[] ServerActors;//[Offset: 0x9f0, Size: 12]
	FString[] RuntimeServerActors;//[Offset: 0x9fc, Size: 12]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa08, Size: 1]
	int NextWorldContextHandle;//[Offset: 0xa18, Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x60, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x64, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c, Size: 4]
	int WindowPosX;//[Offset: 0x70, Size: 4]
	int WindowPosY;//[Offset: 0x74, Size: 4]
	int FullscreenMode;//[Offset: 0x78, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x80, Size: 4]
	uint32 Version;//[Offset: 0x84, Size: 4]
	int AudioQualityLevel;//[Offset: 0x88, Size: 4]
	float FrameRateLimit;//[Offset: 0x8c, Size: 4]
	int DesiredScreenWidth;//[Offset: 0x94, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	int DesiredScreenHeight;//[Offset: 0x9c, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xa0, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xa4, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xa8, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xac, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xb0, Size: 12]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xbc, Size: 12]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc8, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xd0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd4, Size: 12]
	void ValidateSettings();// 0x3716624
	bool SupportsHDRDisplayOutput();// 0x64ff614
	void SetVSyncEnabled(bool bEnable);// 0x64ff594
	void SetVisualEffectQuality(int Value);// 0x3e8823c
	void SetViewDistanceQuality(int Value);// 0x64ff51c
	void SetToDefaults();// 0x350f6c4
	void SetTextureQuality(int Value);// 0x64ff4a4
	void SetShadowQuality(int Value);// 0x64ff42c
	void SetScreenResolution(IntPoint Resolution);// 0x64ff3bc
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x64ff344
	void SetResolutionScaleValue(int NewScaleValue);// 0x64ff2cc
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x64ff254
	void SetPostProcessingQuality(int Value);// 0x64ff1dc
	void SetOverallScalabilityLevel(int Value);// 0x3519384
	void SetFullscreenMode(byte InFullscreenMode);// 0x64ff164
	void SetFrameRateLimit(float NewLimit);// 0x64ff0ec
	void SetFoliageQuality(int Value);// 0x64ff074
	void SetBenchmarkFallbackValues();// 0x64ff060
	void SetAudioQualityLevel(int QualityLevel);// 0x64fefe8
	void SetAntiAliasingQuality(int Value);// 0x64fef70
	void SaveSettings();// 0x380dff4
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x64fee68
	void RevertVideoMode();// 0x64fee54
	void ResetToCurrentSettings();// 0x3797724
	void LoadSettings(bool bForceReload);// 0x35b14bc
	bool IsVSyncEnabled();// 0x64fee2c
	bool IsVSyncDirty();// 0x64fee04
	bool IsScreenResolutionDirty();// 0x64feddc
	bool IsHDREnabled();// 0x64fedb4
	bool IsFullscreenModeDirty();// 0x64fed8c
	bool IsDirty();// 0x35b2414
	int GetVisualEffectQuality();// 0x64fed64
	int GetViewDistanceQuality();// 0x3515cd0
	int GetTextureQuality();// 0x64fed3c
	int GetShadowQuality();// 0x64fed14
	IntPoint GetScreenResolution();// 0x64feccc
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x64feb38
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x64fe9a4
	float GetRecommendedResolutionScale();// 0x3ab723c
	byte GetPreferredFullscreenMode();// 0x64fe97c
	int GetPostProcessingQuality();// 0x3e971ec
	int GetOverallScalabilityLevel();// 0x64fe954
	IntPoint GetLastConfirmedScreenResolution();// 0x64fe90c
	byte GetLastConfirmedFullscreenMode();// 0x64fe8e4
	static GameUserSettings* GetGameUserSettings();// 0x64fe8bc
	byte GetFullscreenMode();// 0x64fe894
	float GetFrameRateLimit();// 0x64fe86c
	int GetFoliageQuality();// 0x64fe844
	IntPoint GetDesktopResolution();// 0x64fe7fc
	static IntPoint GetDefaultWindowPosition();// 0x64fe7bc
	static byte GetDefaultWindowMode();// 0x3898c64
	float GetDefaultResolutionScale();// 0x64fe78c
	static IntPoint GetDefaultResolution();// 0x64fe74c
	int GetCurrentHDRDisplayNits();// 0x64fe724
	int GetAudioQualityLevel();// 0x64fe708
	int GetAntiAliasingQuality();// 0x64fe6e0
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x64fe618
	void ConfirmVideoMode();// 0x64fe604
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x64fe57c
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x64fe4fc
	void ApplyNonResolutionSettings();// 0x355f9e4
	void ApplyHardwareBenchmarkResults();// 0x350f798

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x1c0, Size: 12]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x1d8, Size: 4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 12]
	StatColorMapEntry[] colorMap;//[Offset: 0xc, Size: 12]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 4]
	Color Out;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 8]
	FName NewGameName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 8]
	FName OldClassName;//[Offset: 0x8, Size: 8]
	FName NewClassName;//[Offset: 0x10, Size: 8]
	FName OldSubobjName;//[Offset: 0x18, Size: 8]
	FName NewSubobjName;//[Offset: 0x20, Size: 8]
	FName NewClassClass;//[Offset: 0x28, Size: 8]
	FName NewClassPackage;//[Offset: 0x30, Size: 8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 12]
	FString NewPluginName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 8]
	FName NewStructName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 12]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	FString Comment;//[Offset: 0x18, Size: 12]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x4, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x8, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0xc, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x10, Size: 4]
	float AngularRecipFixTime;//[Offset: 0x14, Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x18, Size: 4]
	float AngularSpeedThresholdSq;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 8]
	FName DriverClassName;//[Offset: 0x8, Size: 8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c, Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34, Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40, Size: 4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44, Size: 12]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50, Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0, Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4, Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8, Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac, Size: 4]
	FName CurrentGameStatus;//[Offset: 0xb0, Size: 8]
	FName LastGameStatus;//[Offset: 0xb8, Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	FName PendingGameStatus;//[Offset: 0xc8, Size: 8]
	FString LatestGameStatusURL;//[Offset: 0xd0, Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xdc, Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xe8, Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xf4, Size: 12]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x10c, Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x118, Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x124, Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x130, Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x13c, Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x148, Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x154, Size: 4]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x674a068
	void StandAloneSwitchGameStatus(FName InGameStatus, FString Options);// 0x6749eb4
	void OnPreLoadMap(FString MapName);// 0x6749df0
	void OnPostLoadMapWithWorld(World* World);// 0x6749d70
	void OnGameViewportClientCreated();// 0x34f4004
	World* GetWorld();// 0x6749d40
	FrontendUtils* GetUtils();// 0x6749d18
	PlayerController* GetPlayerController();// 0x6749cf0
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x6749b90
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x6749b10
	GameViewportClient* GetGameViewportClient();// 0x6749ae8
	GameMode* GetGameMode();// 0x6749ac0
	GameInstance* GetGameInstance();// 0x64fed14
	Object*[] FindRegistedUIFunctionList(FString strMsg, FString moduleMsg);// 0x67498f8
	void EnableGuiTest(bool bEnable);// 0x6749878
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget, FString module);// 0x6749778
	void ClearLogicManagerListByStatus(FName PendingStatus, bool bIsForceDelete);// 0x67496ac
	void ClearLogicManagerByName(FString managerName);// 0x6749554

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 4]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x20, Size: 12]
	FName CurrentSceneCameraName;//[Offset: 0x30, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x38, Size: 12]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x44, Size: 60]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x80, Size: 12]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x8c, Size: 60]
	PointLight*[] ScenePointLightList;//[Offset: 0xc8, Size: 12]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xd4, Size: 60]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x110, Size: 60]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x1a8, Size: 12]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x1b4, Size: 4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x1b8, Size: 4]
	FString GlobalUIContainerClassName;//[Offset: 0x1bc, Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x1c8, Size: 12]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x1d4, Size: 60]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x210, Size: 12]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x21c, Size: 60]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x280, Size: 60]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce, bool bAutoFixAspect);// 0x674bb30
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x674ba10
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x674b840
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x674b5e0
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x674b3c0
	void SetAutoFixFovByAspectRatio(CameraActor* CameraActor, bool bInAutoFixFov);// 0x674b2f4
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x674b238
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x674b17c
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x674b0c0
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x674b004
	void PopAllPushedUI();// 0x674aff0
	void OnAllSceneCamerasRegistered();// 0x3515c44
	bool IsPushedPanel(out const FName managerName);// 0x674af5c
	bool IsNoRenderClient();// 0x674af34
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x674add4
	FString GetUIStackTopSrcTag();// 0x674ad14
	FString GetUIStackTopDstTag();// 0x674ac54
	FString GetUIStackTop();// 0x674ab94
	CameraActor* GetSceneCamera();// 0x674ab6c
	FrontendHUD* GetOwningFrontendHUD();// 0x35ee75c
	Object* GetGlobalUIEventDispatcher();// 0x674ab44
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x674aac4
	void EnableLobbyMainLight(bool NewEnable);// 0x674aa44
	void ClearAllSceneCameras();// 0x674aa30

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x308, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	void ToggleEnabled();// 0x657107c
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x657100c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6570f94
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x6570f1c
	void SetLightColor(LinearColor NewLightColor);// 0x6570ea0
	void SetEnabled(bool bSetEnabled);// 0x6570e20
	void SetCastShadows(bool bNewValue);// 0x6570da0
	void SetBrightness(float NewBrightness);// 0x6570d28
	void SetAffectTranslucentLighting(bool bNewValue);// 0x6570ca8
	void OnRep_bEnabled();// 0x34d87f0
	bool IsEnabled();// 0x6570c80
	LinearColor GetLightColor();// 0x6570c3c
	float GetBrightness();// 0x6570c14

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2d8, Size: 4]
	float MaxDrawDistance;//[Offset: 0x2dc, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x2e0, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 1]
	int ShadowMapChannel;//[Offset: 0x2e8, Size: 4]
	float MinRoughness;//[Offset: 0x2f0, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x2f4, Size: 4]
	int LightPriority;//[Offset: 0x2f8, Size: 4]
	float ShadowBias;//[Offset: 0x2fc, Size: 4]
	float ShadowSharpen;//[Offset: 0x300, Size: 4]
	float ContactShadowLength;//[Offset: 0x304, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x308, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x308, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x308, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x308, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x309, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x30c, Size: 4]
	Vector LightFunctionScale;//[Offset: 0x310, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x31c, Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	float IESBrightnessScale;//[Offset: 0x324, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x328, Size: 4]
	float DisabledBrightness;//[Offset: 0x32c, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	float BloomScale;//[Offset: 0x334, Size: 4]
	float BloomThreshold;//[Offset: 0x338, Size: 4]
	Color BloomTint;//[Offset: 0x33c, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x344, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x6571fc4
	void SetTemperature(float NewTemperature);// 0x6571f4c
	void SetShadowBias(float NewValue);// 0x6571ed4
	void SetLightPriority(int Priority);// 0x6571e5c
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x6571dec
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6571d74
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x6571cfc
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x6571c84
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x6571bbc
	void SetIntensity(float NewIntensity);// 0x6571b44
	void SetIndirectLightingIntensity(float NewIntensity);// 0x6571acc
	void SetIESTexture(TextureLightProfile* NewValue);// 0x6571a54
	void SetEnableLightShaftBloom(bool bNewValue);// 0x65719d4
	void SetBloomTint(Color NewValue);// 0x6571964
	void SetBloomThreshold(float NewValue);// 0x65718ec
	void SetBloomScale(float NewValue);// 0x6571874
	void SetAffectTranslucentLighting(bool bNewValue);// 0x65717f4
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x6571774
	void ForceUpdateShadowState();// 0x6571760

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2b0, Size: 16]
	float Brightness;//[Offset: 0x2c0, Size: 4]
	float Intensity;//[Offset: 0x2c4, Size: 4]
	Color LightColor;//[Offset: 0x2c8, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cc, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x2d0, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x2d4, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x657459c
	void SetCastShadows(bool bNewValue);// 0x657451c
	LinearColor GetLightColor();// 0x65744d8

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xe4, Size: 4]
	float TextureMultiplier;//[Offset: 0xe8, Size: 4]

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x310, Size: 4]
	void SetRadius(float NewRadius);// 0x65e1dc4
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x65e1d4c

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x3ac, Size: 4]
	float AttenuationRadius;//[Offset: 0x3b0, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 1]
	float LightFalloffExponent;//[Offset: 0x3b8, Size: 4]
	float SourceRadius;//[Offset: 0x3bc, Size: 4]
	float SoftSourceRadius;//[Offset: 0x3c0, Size: 4]
	float SourceLength;//[Offset: 0x3c4, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c8, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c8, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x3cc, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x3d0, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x3d8, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x65e24d8
	void SetSourceLength(float NewValue);// 0x65e2460
	void SetSoftSourceRadius(float bNewValue);// 0x65e23e8
	void SetSimulateRectLight(bool NewValue);// 0x65e2368
	void SetSimulatePortalLight(bool NewValue);// 0x65e22e8
	void SetRectLightSourceWidth(float NewValue);// 0x65e2270
	void SetRectLightSourceHeight(float NewValue);// 0x65e21f8
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x65e2180
	void SetAttenuationRadius(float NewRadius);// 0x65e2108

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x308, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	void OnRep_bEnabled();// 0x34d87f0

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x2d8, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x2dc, Size: 4]
	TextureCube* ProcessedCubemap;//[Offset: 0x2e0, Size: 4]
	float SourceCubemapAngle;//[Offset: 0x2e4, Size: 4]
	int CubemapResolution;//[Offset: 0x2e8, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x2ec, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x2f4, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x304, Size: 4]
	float Contrast;//[Offset: 0x308, Size: 4]
	float OcclusionExponent;//[Offset: 0x30c, Size: 4]
	float MinOcclusion;//[Offset: 0x310, Size: 4]
	Color OcclusionTint;//[Offset: 0x314, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x318, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3b8, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x66124b0
	void SetOcclusionTint(out const Color InTint);// 0x661242c
	void SetOcclusionExponent(float InOcclusionExponent);// 0x66123b4
	void SetOcclusionContrast(float InOcclusionContrast);// 0x661233c
	void SetMinOcclusion(float InMinOcclusion);// 0x66122c4
	void SetLightColor(LinearColor NewLightColor);// 0x6612248
	void SetIntensity(float NewIntensity);// 0x66121d0
	void SetIndirectLightingIntensity(float NewIntensity);// 0x6612158
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x6612058
	void SetCubemap(TextureCube* NewCubemap);// 0x6611fe0
	void RecaptureSky();// 0x6611fcc

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x354, Size: 12]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x350b540
	void RemoveWidget(UserWidget* Widget);// 0x6755514
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x36f2bf8
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x6755458
	void AddWidgetInternal(UserWidget* Widget);// 0x39c6ea4
	void AddWidget(UserWidget* Widget);// 0x67553e0

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x204, Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x208, Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x20c, Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x210, Size: 4]
	Property*[] Params;//[Offset: 0x28c, Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x2a0, Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x2b0, Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x2d0, Size: 32]
	float TickRate;//[Offset: 0x2f0, Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f7, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2f8, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x300, Size: 8]
	enum FadingStatus;//[Offset: 0x310, Size: 1]
	float CurrentOpacity;//[Offset: 0x314, Size: 4]
	float FadingInTime;//[Offset: 0x318, Size: 4]
	float FadingOutTime;//[Offset: 0x31c, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 1]
	FString UIMsgPrefix;//[Offset: 0x324, Size: 12]
	FString[] UIMsgFunctionList;//[Offset: 0x330, Size: 12]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	FString MoudleToRegisted;//[Offset: 0x340, Size: 12]
	bool Visible();// 0x67536c4
	void UnRegistFromGameFrontendHUD();// 0x67536b0
	void SynchronizeBlueprintProperties();// 0x49216cc
	void Show();// 0x675369c
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x6753624
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x67535ac
	static void SetOnWidgetShow(delegate onShow);// 0x6753510
	static void SetOnWidgetHide(delegate OnHide);// 0x6753474
	static void SetOnClearUIStack(delegate onClear);// 0x67533d8
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x6753290
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x6753218
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x6753154
	void ReceiveShow();// 0x49216cc
	void ReceiveHide();// 0x49216cc
	void ReceivedMountWidget();// 0x34b6cb4
	void ReceivedInitWidget();// 0x49216cc
	void ReCachedUIMsgFunction();// 0x6753140
	static void PushOpenedUIStack(FString Name);// 0x675308c
	static void PopOpenedUIStack(FString curOpen);// 0x6752fd8
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x49216cc
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x49216cc
	void OnRightClicked(Vector2D TempScreenPos);// 0x49216cc
	void OnFadeOutFinished();// 0x6752fbc
	void OnFadeInFinished();// 0x35cacec
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x49216cc
	void OnClicked(Vector2D TempScreenPos);// 0x49216cc
	void OnClearUIStack__DelegateSignature();// 0x49216cc
	bool IntCompare(int A, int B, enum CompareType);// 0x6752eb4
	void InitWidget(bool Recursive);// 0x6752e34
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x3731624
	void Hide();// 0x6752e20
	void HandleUIMessageBattle(FString UIMessage);// 0x6752d64
	void HandleUIMessage(FString UIMessage);// 0x6752ca8
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x6752b14
	Widget* GetWidgetContainsName(FString Name);// 0x6752a50
	UAEUserWidget* GetParentWidget();// 0x6752a28
	PlayerController* GetOwningPlayer();// 0x34da7d8
	LogicManagerBase* GetOwningLogicManager();// 0x6752a00
	FrontendHUD* GetOwningFrontendHUD();// 0x67529d8
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x6752958
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x675280c
	UserWidget* GetChildWidget(FString WName);// 0x6752748
	Margin GetAdapation();// 0x6752720
	bool FloatCompare(float A, float B, enum CompareType);// 0x6752618
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget);// 0x67525a0
	void DestroyWidget();// 0x675258c
	static void ClearOpenedUIStack();// 0x6752578
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x67524bc
	void ClearFunctionCache();// 0x67524a8
	void ClearClassWidgetTree();// 0x6752494
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x36a3be0

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	int iUIControlState;//[Offset: 0x38, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x3c, Size: 4]
	FName[] GameStatusList;//[Offset: 0x4c, Size: 12]
	class Object[] WidgetUClassList;//[Offset: 0x7c, Size: 12]
	UAEUserWidget*[] WidgetList;//[Offset: 0x88, Size: 12]
	Object*[] DelayMessage_Obj;//[Offset: 0xa4, Size: 12]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x674d5cc
	bool IsEnableRemoveDynamicWidgets();// 0x674d5a4
	UAEUserWidget*[] GetWidgetList();// 0x674d4e4
	UAEUserWidget* GetWidgetByName(FString InName);// 0x674d420
	UAEUserWidget* GetWidgetByClass(class Object InClass);// 0x674d3a0
	FrontendHUD* GetOwningFrontendHUD();// 0x64fe6e0
	int GetDefaultSceneCamera();// 0x64fe844
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x674d1c0

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 12]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAntialiased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 1]
	float RTScale;//[Offset: 0x680, Size: 4]
	enum Space;//[Offset: 0x684, Size: 1]
	enum TimingPolicy;//[Offset: 0x685, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x688, Size: 4]
	IntPoint DrawSize;//[Offset: 0x68c, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 1]
	float RedrawTime;//[Offset: 0x698, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x6a8, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	Vector2D Pivot;//[Offset: 0x6b8, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x6c4, Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x6c8, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x6d8, Size: 16]
	float OpacityFromTexture;//[Offset: 0x6e8, Size: 4]
	enum BlendMode;//[Offset: 0x6ec, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ed, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ee, Size: 1]
	UserWidget* Widget;//[Offset: 0x6f0, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x704, Size: 4]
	MaterialInterface* TranslucentMaterialAA;//[Offset: 0x708, Size: 4]
	MaterialInterface* TranslucentMaterialAA_OneSided;//[Offset: 0x70c, Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x710, Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x714, Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x718, Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x71c, Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x720, Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x724, Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x728, Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x72c, Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x731, Size: 1]
	FName SharedLayerName;//[Offset: 0x738, Size: 8]
	int LayerZOrder;//[Offset: 0x740, Size: 4]
	enum GeometryMode;//[Offset: 0x744, Size: 1]
	float CylinderArcAngle;//[Offset: 0x748, Size: 4]
	void SetWidget(UserWidget* Widget);// 0x37688d8
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x586a834
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x586a7bc
	void SetDrawSize(Vector2D Size);// 0x586a74c
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x586a6d0
	void RequestRedraw();// 0x37d6988
	UserWidget* GetUserWidgetObject();// 0x586a6a8
	TextureRenderTarget2D* GetRenderTarget();// 0x371158c
	LocalPlayer* GetOwnerPlayer();// 0x586a680
	MaterialInstanceDynamic* GetMaterialInstance();// 0x586a658
	Vector2D GetDrawSize();// 0x586a618
	Vector2D GetCurrentDrawSize();// 0x586a5d8

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xb0, Size: 4]
	int SizeY;//[Offset: 0xb4, Size: 4]
	LinearColor ClearColor;//[Offset: 0xb8, Size: 16]
	byte AddressX;//[Offset: 0xc8, Size: 1]
	byte AddressY;//[Offset: 0xc9, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xca, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xcb, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 1]
	byte OverrideFormat;//[Offset: 0xcd, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: Image.Widget.Visual.Object
	bool bIsEnhancedImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	SlateBrush Brush;//[Offset: 0xd8, Size: 152]
	delegate BrushDelegate;//[Offset: 0x170, Size: 16]
	delegate OnSetBrushAsyncComplete;//[Offset: 0x180, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x190, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1a0, Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 1]
	FString imageSrcPath;//[Offset: 0x1b4, Size: 12]
	float HitTestAreaRadius;//[Offset: 0x1c0, Size: 4]
	bool bFixOverScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	Vector2D ScalePivot;//[Offset: 0x1c8, Size: 8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1d0, Size: 16]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	bool bAsyncLoadImageAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 1]
	SoftObjectPath AsyncLoadResourcePath;//[Offset: 0x1e8, Size: 24]
	void SetOpacity(float InOpacity);// 0x583def0
	void SetDontPaintWhenColorZero(bool Enable);// 0x583de70
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x583ddf0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x583dd74
	void SetBrushResourceFromPathSync(FString ResourcePath);// 0x583dcb8
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x583dbf4
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x583db30
	void SetBrushFromPathAsync(FString ResourcePath, bool bMatchSize);// 0x583da28
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x583d9b0
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x583d8b8
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x583d840
	void SetBrush(out const SlateBrush InBrush);// 0x583d6d8
	void SeFixOverScale(bool Enable);// 0x583d658
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x583d630
	bool GetDontPaintWhenColorZero();// 0x583d608
	bool GetDontPaintWhenAlphaZero();// 0x583d5e0

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20, Size: 152]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x358, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 1]
	int NumSpectators;//[Offset: 0x364, Size: 4]
	int NumPlayers;//[Offset: 0x368, Size: 4]
	int NumBots;//[Offset: 0x36c, Size: 4]
	float MinRespawnDelay;//[Offset: 0x370, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x374, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x378, Size: 4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x37c, Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x388, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	void StartMatch();// 0x3951a08
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x3570880
	void Say(FString Msg);// 0x64e9728
	void RestartGame();// 0x64e970c
	bool ReadyToStartMatch();// 0x64e96dc
	bool ReadyToEndMatch();// 0x64e96ac
	void K2_OnSetMatchState(FName NewState);// 0x49216cc
	bool IsMatchInProgress();// 0x64e967c
	bool HasMatchEnded();// 0x64e964c
	FName GetMatchState();// 0x64e9628
	void EndMatch();// 0x64e960c
	void AbortMatch();// 0x64e95f0

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnHandleWebviewActionDelegate;//[Offset: 0x15c, Size: 12]
	delegate OnGetTicketNotifyDelegate;//[Offset: 0x168, Size: 12]
	delegate OnHandleServerListDownload;//[Offset: 0x174, Size: 12]
	delegate OnUIStatReport;//[Offset: 0x180, Size: 12]
	delegate OnReportClientTool;//[Offset: 0x18c, Size: 12]
	FString CSVTableRelativeDir;//[Offset: 0x198, Size: 12]
	<FName,FString> GameStatusMap;//[Offset: 0x1a4, Size: 60]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bEnableReportMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 1]
	VoiceSDKInterface* VoiceSDK;//[Offset: 0x1f4, Size: 4]
	BugReporter* GameBugReporter;//[Offset: 0x1f8, Size: 4]
	GMLogShare* LogShare;//[Offset: 0x1fc, Size: 4]
	int MaxUpdateRetryTimes;//[Offset: 0x200, Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x20c, Size: 4]
	Translator* Translator;//[Offset: 0x210, Size: 4]
	HttpWrapper* HttpWrapper;//[Offset: 0x214, Size: 4]
	GCPufferDownloader* GPuffer;//[Offset: 0x218, Size: 4]
	LaggingReporter* LaggingReporter;//[Offset: 0x21c, Size: 4]
	AsyncTaskDownloader* DownloadTask;//[Offset: 0x224, Size: 4]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26f, Size: 1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bEnableEditorPufferDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x273, Size: 1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	CDNUpdate* CDNUpdater;//[Offset: 0x288, Size: 4]
	int ODPaksPoolSize;//[Offset: 0x28c, Size: 4]
	int ODPaksPoolSizeLowend;//[Offset: 0x290, Size: 4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x294, Size: 4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	interface class None* ClientNetInterface;//[Offset: 0x2b4, Size: 8]
	FName UnrealNetworkStatus;//[Offset: 0x2c0, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x2d8, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x2ec, Size: 4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	FString[] PersistentLuaManager;//[Offset: 0x2f4, Size: 12]
	bool bPatchReInitSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x308, Size: 4]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x30c, Size: 4]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x310, Size: 4]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x314, Size: 4]
	FString ScriptBPRelativeDir;//[Offset: 0x31c, Size: 12]
	FString ScriptRelativeDir;//[Offset: 0x328, Size: 12]
	FString InGameLuaDir;//[Offset: 0x334, Size: 12]
	FString PreloadLuaFileRelativePath;//[Offset: 0x340, Size: 12]
	FString[] LuaDirList;//[Offset: 0x34c, Size: 12]
	FString[] NoGCPackage;//[Offset: 0x358, Size: 12]
	float LuaTickTime;//[Offset: 0x364, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	int PingFirstReportIntervalSecond;//[Offset: 0x388, Size: 4]
	int PingReportIntervalSecond;//[Offset: 0x38c, Size: 4]
	int LossSyncIntervalSecond;//[Offset: 0x390, Size: 4]
	int PlayerStatusReportIntervalSecond;//[Offset: 0x394, Size: 4]
	int LossArraySyncIntervalSecond;//[Offset: 0x398, Size: 4]
	int vmInstrumentOptimization;//[Offset: 0x3a0, Size: 4]
	TssManager* TssMgr;//[Offset: 0x3a4, Size: 4]
	float PingReportInterval;//[Offset: 0x3c8, Size: 4]
	int64 DeactivatedThreshold;//[Offset: 0x4a8, Size: 8]
	int64 TimePassThreshold;//[Offset: 0x4b0, Size: 8]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x4b8, Size: 4]
	delegate UIStackChangeDelegate;//[Offset: 0x4bc, Size: 12]
	delegate UIStackRecoverDelegate;//[Offset: 0x4c8, Size: 12]
	delegate OnFRefreshAdaptationUIEvent;//[Offset: 0x4d4, Size: 12]
	delegate OnFRefreshAdaptationExUIEvent;//[Offset: 0x4e0, Size: 12]
	delegate EnterBattleStageDelegate;//[Offset: 0x4ec, Size: 12]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x590, Size: 4]
	int FpsForWindowClient;//[Offset: 0x594, Size: 4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x598, Size: 4]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59e, Size: 1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59f, Size: 1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a2, Size: 1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a3, Size: 1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	int GDPRUserType;//[Offset: 0x5a8, Size: 4]
	bool bShouldShowAdaptTipInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 1]
	float fLaggingFPSDiffThreshold;//[Offset: 0x5b0, Size: 4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x5b4, Size: 4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x5b8, Size: 4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x5bc, Size: 4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x5c0, Size: 4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x5c4, Size: 4]
	float fFPSReportInterval;//[Offset: 0x5c8, Size: 4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	Package*[] NoGcPackages;//[Offset: 0x5e0, Size: 12]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ef, Size: 1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	bool bCheckWorldNameForLoadConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 1]
	ColorBlindnessMgr* ColorBlindnessMgrInstace;//[Offset: 0x67c, Size: 4]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x680, Size: 12]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x690, Size: 4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x694, Size: 4]
	FString BattleUtilsClassName;//[Offset: 0x698, Size: 12]
	BattleUtils* BattleUtils;//[Offset: 0x6a4, Size: 4]
	delegate OnImagePickDetectEvent;//[Offset: 0x6b0, Size: 16]
	delegate OnPermissionResultEvent;//[Offset: 0x6c0, Size: 16]
	FString CurrentMapName;//[Offset: 0x6d0, Size: 12]
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x3e8f94c
	void TimeStatisticStop(int Type, FString Name);// 0x3e8f7ac
	void TimeStatisticStart(int Type);// 0x3e8f734
	void TickUdpCollector(float DeltaTime);// 0x3e8f6bc
	void StatisVisibilityWidget(Widget* Widget);// 0x36b3b78
	void StatisLoadedTexture(Texture* Texture);// 0x36b3b78
	bool StartGrayUpdate();// 0x3e8f694
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x3e8f680
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x3e8f66c
	void ShutdownUnrealNetwork();// 0x3716624
	void SetShouldShowAdaptTipInLobby(bool bShoudShow);// 0x3e8f5ec
	void SetGameSubMode(FString SubMode);// 0x3e8f530
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x3e8f384
	void SetClientEnterBattleStage(FString InStageStr);// 0x3e8f2c8
	void SetAccountByWebLogin(int Channel, FString OpenID, FString userId, FString TokenID, const int ExpireTime);// 0x3e8f074
	void RetryDownload();// 0x3e8f060
	void RetryCDNDownload();// 0x3e8f04c
	void RequestPhotoPermission(delegate PermissionResultEvent);// 0x3e8efa8
	void RequestCameraPermission(delegate PermissionResultEvent);// 0x3e8ef04
	void ReportNetContinuousSaturate();// 0x3e8eef0
	void RemoveSuppotAdaptationBind(PanelSlot* PanelSlot);// 0x3e8ee78
	void ReleaseBattleUtils();// 0x3e8ee64
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x3e8edc0
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x3e8ebf8
	void PickImageDetectQRCode(delegate ImagePickDetectEvent);// 0x3e8eb54
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x3e8ea4c
	void OnWebviewActionNotify(FString URL);// 0x3e8e8f4
	void OnUAAssistantEvent(out const UAAssistantInfoWrapper UAAssistentInfo);// 0x3e8e7e8
	void OnSDKCallbackEvent(out const SDKCallbackInfoWrapper sdkCallbackInfo);// 0x3e8e6dc
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x3e8e610
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x3e8e420
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x3e8e314
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x3e8e204
	void OnNotUpdateFinished();// 0x3e8e1f0
	void OnLoginFlowNotify(int _Flow, int _Param, FString ExtraData);// 0x3e8e008
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x3e8df4c
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x3e8de8c
	void OnGetTicketNotify(FString Ticket);// 0x3e8dd34
	void OnGetShortUrlNotify(int Ret, FString ShortUrl);// 0x3e8db94
	void OnGetCountryNoNotify(int country);// 0x3e8db1c
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x3e8d9d8
	void OnGameMasterEvent(FString EventName, int Ret);// 0x3e8d83c
	void OnConnectorNetStateChangeNotify(int State, int EventParam1, int EventParam2, int EventParam3);// 0x3e8d6f4
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x3e8d5ec
	void OnAreaChanged(FString InArea);// 0x3e8d530
	void NotifyLoadingUIOperation(int OperationType);// 0x3e8d4b8
	void MakeToSuppotAdaptation(PanelSlot* PanelSlot);// 0x3e8d440
	void LuaDoString(FString LuaString);// 0x3e8d37c
	bool IsWindowOB();// 0x365435c
	bool IsInstallPlatform(FString PlatForm);// 0x3e8d21c
	bool IsCEHideLobbyUI();// 0x3e8d1f4
	bool HasAnyNetMsgToHandle();// 0x3e8d1cc
	bool GetWidgetRenderCanChange();// 0x3e8d1a4
	VoiceSDKInterface* GetVoiceSDKInterface();// 0x35652dc
	SaveGame* GetUserSettings();// 0x35655ac
	GDolphinUpdater* GetUpdater();// 0x3a5ece8
	Translator* GetTranslator();// 0x3a5ecb0
	bool GetShouldShowAdaptTipInLobby();// 0x3e8d17c
	SettingSubsystem* GetSettingSubsystem();// 0x3e8d154
	GCPufferDownloader* GetPufferDownloader();// 0x3e8d138
	FString GetPlayerStatusReportInfo();// 0x3e8d078
	FString GetPingReportInfo();// 0x3e8cfb8
	int GetPhotoPermission();// 0x3e8cf90
	FString GetPacketLossReportInfo();// 0x3e8ced0
	LuaStateWrapper* GetLuaStateWrapper();// 0x36e7a98
	LuaEventBridge* GetLuaEventBridge();// 0x3e8cea8
	LuaBlueprintMgr* GetLuaBlueprintSysMgr();// 0x3e8ce80
	HttpWrapper* GetHttpWrapper();// 0x3e8ce64
	FString GetGameSubMode();// 0x3e8cdfc
	GameStateBase* GetGameState();// 0x3e8cdd4
	FString GetFPSReportInfo();// 0x3e8cd14
	EffectSettingMgr* GetEffectSettingMgr();// 0x3e8cce4
	int GetDetailNetInfoFromDPM();// 0x3530d08
	ColorBlindnessMgr* GetColorBlindnessMgr();// 0x378fc50
	Object* GetClientNetObj();// 0x3e8ccbc
	FString GetClientEnterBattleStageCostTime();// 0x3e8cbfc
	FString GetClientEnterBattleStage();// 0x3e8cb94
	int GetCameraPermission();// 0x3e8cb6c
	BugReporter* GetBugReporter();// 0x3e8cb44
	BattleUtils* GetBattleUtils();// 0x3e8cb1c
	FString GetBattleIDHexStr();// 0x3e8ca5c
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x3e8ca34
	void FinishModifyUserSettings();// 0x3e8ca20
	void EnableFPSAndMemoryLog(bool bEnable);// 0x3e8c9a0
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x3e8c918
	void DispatchConfirmMisKill(FString KillerName);// 0x3e8c86c
	Texture2D* CreateQRCodeTexture(FString Text);// 0x3e8c7a8
	void CreateBattleUtils();// 0x3e8c794
	void CallGlobalScriptFunction(FString InFunctionName);// 0x3e8c6d0
	void BeginModifyUserSettings();// 0x3e8c6bc
	void BattleUtilsGameEnd();// 0x3e8c6a8
	void AfterLoadedEditorLogin();// 0x3e8c694
	void AddAdaptationWidgetDelegateEx(PanelSlot* PanelSlot);// 0x3e8c61c
	void AddAdaptationWidgetDelegate(PanelSlot* PanelSlot);// 0x3e8c5a4

--------------------------------
Class: VoiceSDKInterface.Object
	int lbsRoomMemberID;//[Offset: 0x24, Size: 4]
	delegate OnSTTReportCallback;//[Offset: 0x40, Size: 16]
	delegate OnRSTSCallback;//[Offset: 0x50, Size: 16]
	delegate OnRSTSSpeechToTextCallback;//[Offset: 0x60, Size: 16]
	FString ServerInfo;//[Offset: 0x7c, Size: 12]
	uint32 openVoiceSDKLog;//[Offset: 0x88, Size: 4]
	uint32 MicVolumeMUFactor;//[Offset: 0x8c, Size: 4]
	uint32 SpeekerVolumeMUFactor;//[Offset: 0x90, Size: 4]
	int RoomOperationTimeout;//[Offset: 0x94, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x98, Size: 4]
	delegate OpenMicFail;//[Offset: 0x110, Size: 16]
	delegate OpenMicSuccess;//[Offset: 0x120, Size: 16]
	delegate CloseMicFail;//[Offset: 0x130, Size: 16]
	delegate CloseMicSuccess;//[Offset: 0x140, Size: 16]
	delegate OpenSpeakerFail;//[Offset: 0x150, Size: 16]
	delegate OpenSpeakerSuccess;//[Offset: 0x160, Size: 16]
	delegate CloseSpeakerFail;//[Offset: 0x170, Size: 16]
	delegate CloseSpeakerSuccess;//[Offset: 0x180, Size: 16]
	delegate JoinRoomFail;//[Offset: 0x190, Size: 16]
	delegate JoinRoomNotify;//[Offset: 0x1a0, Size: 16]
	delegate QuitRoomNotify;//[Offset: 0x1b0, Size: 16]
	delegate JoinLbsRoomNotify;//[Offset: 0x1c0, Size: 16]
	delegate QuitLbsRoomNotify;//[Offset: 0x1d0, Size: 16]
	delegate RoomStatusUpdatedNotify;//[Offset: 0x1e0, Size: 16]
	delegate SetAppInfoSuccess;//[Offset: 0x1f0, Size: 16]
	delegate SetAppInfoFail;//[Offset: 0x200, Size: 16]
	delegate GetReconnectInfo;//[Offset: 0x210, Size: 16]
	delegate ImSpeakingNotify;//[Offset: 0x220, Size: 16]
	delegate TestMicFail;//[Offset: 0x230, Size: 16]
	delegate TestMicSuccess;//[Offset: 0x240, Size: 16]
	delegate QuitRoomFail;//[Offset: 0x250, Size: 16]
	delegate DownLoadFileNotify;//[Offset: 0x260, Size: 16]
	delegate UploadFileNotify;//[Offset: 0x270, Size: 16]
	delegate ApplyMessageKeyNotify;//[Offset: 0x280, Size: 16]
	delegate MemberIsSpeakingNotify;//[Offset: 0x290, Size: 16]
	delegate LbsMemberIsSpeakingNotify;//[Offset: 0x2a0, Size: 16]
	delegate OnMuteSwitchResult;//[Offset: 0x2b0, Size: 16]
	delegate ReportVoiceTimeToServer;//[Offset: 0x2c0, Size: 16]
	delegate RecordSuccess;//[Offset: 0x2d0, Size: 16]
	delegate RecordFail;//[Offset: 0x2e0, Size: 16]
	delegate UploadSuccess;//[Offset: 0x2f0, Size: 16]
	delegate UploadFail;//[Offset: 0x300, Size: 16]
	delegate DownloadFileSuccess;//[Offset: 0x310, Size: 16]
	delegate DownloadFileFail;//[Offset: 0x320, Size: 16]
	delegate EnableRoomMicrophone;//[Offset: 0x330, Size: 16]
	delegate ExitInfectionGameMode;//[Offset: 0x340, Size: 16]
	delegate JoinInfectionGameMode;//[Offset: 0x350, Size: 16]
	delegate RequestPrivacyInSetting;//[Offset: 0x360, Size: 16]
	delegate OnReportPlayerCallback;//[Offset: 0x370, Size: 16]
	delegate OnVoiceSDKEvent;//[Offset: 0x380, Size: 16]
	delegate BeforeVoiceSDKInitDelegate;//[Offset: 0x390, Size: 16]
	delegate AfterVoiceSDKInitDelegate;//[Offset: 0x3a0, Size: 16]
	void UploadRecordFile(bool InPermanent);// 0x3f054c0
	int UploadRecordedFile(FString InFilePath, int InTimeout, bool InPermanent);// 0x3f0536c
	int UpdateVoiceCoordinate(FString InRoomName, int64 X, int64 Y, int64 Z, int64 Radius);// 0x3f05170
	void TestMic();// 0x3f0515c
	bool TeamSpeakerEnable();// 0x3f05140
	bool TeamMicphoneEnable();// 0x3f05124
	void SwitchMode(enum CharMode);// 0x3f050ac
	void SwitchMicphoneWhenCorpsMode();// 0x3f05098
	void SwitchCampRoom(enum campMode);// 0x3f05020
	int StopRecording();// 0x3f04ff8
	void StopRecord();// 0x3f04fe4
	void StopPlayRecordFile();// 0x3f04fd0
	void StopInterphone();// 0x3f04fbc
	void StopCampMode();// 0x3f04fa8
	int StartRecording(FString InFilePath, bool InNotVoip);// 0x3f04e98
	void StartRecord();// 0x3f04e84
	void StartInterphone();// 0x3f04e70
	void StartCampMode(FString ZombieCampRoomName, FString ManCampRoomName, FString userId);// 0x3f04cac
	void ShowOpenSpeakerAtFirstMsg();// 0x3716624
	void ShowCorpsModeCannotUseLBSVoice();// 0x380f590
	void SetVoiceServer(FString ServerInfo);// 0x3f04bf0
	void SetVoiceSDKSupportBackgroundChat(bool isSupportBGChat);// 0x3f04b70
	void SetVoiceSDKChatServiceEnable(bool IsEnable);// 0x3f04af0
	void SetVoiceMode(int Type);// 0x3f04a78
	void SetSpeakerVolum(float Value);// 0x3f04a00
	void SetSpeakerStatus(bool Flag);// 0x3f04980
	int SetServerInfo(FString URL, FString InDefaultIpSvr);// 0x3f04838
	void SetRoomOperationTimeout(int InTimeout);// 0x3f047c0
	void SetReportBufferTime(int nTimeSec);// 0x3f04748
	void SetPlayerVolume(FString InPlayerId, int InVol);// 0x3f045ac
	int SetNotify();// 0x3f04584
	int SetMode(int InGVMode);// 0x3f04504
	void SetMicphoneVolum(float Value);// 0x3f0448c
	void SetMicphoneStatus(bool Flag);// 0x3f0440c
	void SetLbsVoiceRadius(float Radius);// 0x3f04398
	void SetLbsRoomEnableStatus(bool Flag);// 0x3f04318
	void SetGMServerUrl(FString InServerUrl);// 0x3f0421c
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x3f041a4
	void SetFeature(int8 InFeature, bool Inactive);// 0x3f040e0
	void SetCurrentDownloadFieldID(FString filedId);// 0x3f03f48
	int SetAppInfo(FString InAppId, FString InAppKey, FString InOpenId);// 0x3f03d7c
	void SetAllVoiceStatus(bool Flag);// 0x35cb02c
	void RSTSStopRecording();// 0x3f03d68
	int RSTSSpeechToText(int InSrcLang);// 0x3f03ce8
	void ResetWhenLogOut();// 0x3f03cd4
	bool ReportPlayers(FString InExtraInfo, FString[] InOpenids);// 0x3f039a8
	int ReportFileForAbroad(FString InFilePath, bool InTranslate, bool InChangeVoice, int InTime);// 0x3f037fc
	void ReactiveLbsStatus();// 0x3f037e8
	int QuitVoiceRoom(FString InRoomName);// 0x3f03724
	void QuitRoom();// 0x3f03710
	void QuitCommonRoom(FString InRoomName);// 0x3f03654
	int Poll();// 0x3f0362c
	void PlayRecordFile();// 0x3f03618
	int PlayRecordedFile(FString InDownloadInFilePath);// 0x3f03554
	int OpenVoiceSpeaker();// 0x3f0352c
	int OpenVoiceMic();// 0x3f03504
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x3f03484
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x3f033fc
	int OpenTeamInterphone();// 0x3f033d4
	int OpenSpeaker();// 0x3f033ac
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x3f03398
	int OpenMic();// 0x3f03370
	void OpenIngameSpeaker();// 0x3f0335c
	int OpenIngameMicphone();// 0x3f03334
	void OpenAllSpeaker(bool ShowTips);// 0x3f032b4
	int OpenAllMicphone(bool ShowTips);// 0x3f0322c
	int OpenAllInterphone();// 0x3f03204
	void OnRoomTypeChanged(FString itemtext);// 0x3f030d8
	void OnResume();// 0x3f030c4
	void OnPause();// 0x3f030b0
	bool LbsSpeakerEnable();// 0x3f03094
	bool LbsMicphoneEnable();// 0x3f03078
	int JoinTeamRoom(FString InRoomName);// 0x3f02fb4
	void JoinRoom(FString room, FString userId);// 0x3f02d44
	int JoinRangeRoom(FString InRoomName);// 0x3f02c80
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x3f02a10
	void JoinCommonRoom(FString InRoomName);// 0x3f02954
	bool IsVoiceSDKEnable();// 0x3f0292c
	bool IsTeamInterphoneOpenned();// 0x3f02910
	bool IsSpeaking();// 0x3f028e8
	bool IsLbsInterphoneOpenned();// 0x3f028cc
	bool IsInterphoneMode();// 0x3f02890
	bool IsEnableCivilFile();// 0x3f02868
	int Invoke(uint32 InCmd, uint32 InParam1, uint32 InParam2, FString InExterInfo);// 0x3f026d4
	void InitVoiceSDKComponent(FString userId);// 0x3f0257c
	int InitVoiceSDK();// 0x3f02554
	void Init();// 0x3f02540
	bool HaveTeamRoom();// 0x3f02518
	bool HaveLbsRoom();// 0x3f024f0
	float GetVoiceLength();// 0x3f024c8
	FString GetTeamRoomName();// 0x3f02408
	int GetRoomStatus(FString InRoomName);// 0x3f02344
	int GetPlayerVolume(FString InPlayerId);// 0x3f021e4
	int GetMicState();// 0x3f021bc
	FString GetLocalRecordFilePath(FString InFileName);// 0x3f02078
	FString GetLbsRoomName();// 0x3f01fb8
	FString GetGMServerUrl();// 0x3f01ea0
	void GetAuthKey();// 0x3f01e8c
	int GetAudioDeviceConnectionState();// 0x3f01e64
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x3f01da0
	int ForbidMemberVoice(int InMember, bool InEnable, FString InRoomName);// 0x3f01c48
	void ForbidLbsMemberVoiceById(int memberID, bool IsEnable);// 0x3f01b84
	int EnableVoiceRoomMicrophone(FString InRoomName, bool InEnable);// 0x3f01a74
	void EnableVoiceChat(bool InEnable);// 0x3f019f4
	int EnableRoomSpeaker(FString InRoomName, bool InEnable);// 0x3f018e4
	int EnableReportForAbroad(bool InIsWholeRoundaudit);// 0x3f0185c
	bool EnableReportALLAbroad(bool InEnable, bool InWithEncryption, int InTimeout);// 0x3f0173c
	int EnableMultiRoom(bool InEnable);// 0x3f016b4
	void EnableLog(bool InEnable);// 0x3f01634
	int EnableCivilFile(bool Enable);// 0x3f015ac
	void EnableBluetoothSCO(bool InEnable);// 0x3f0152c
	void DownloadRecordFile(bool InPermanent);// 0x3f014ac
	int DownloadRecordedFile(FString InFileID, FString InDownloadInFilePath, int InTimeout, bool InPermanent);// 0x3f012d0
	void CommonTestMic();// 0x3f012bc
	int CloseVoiceSpeaker();// 0x3f01294
	int CloseVoiceMic();// 0x3f0126c
	void CloseSpeaker();// 0x3f01258
	void CloseMic();// 0x3f01244
	void CloseIngameSpeaker();// 0x35b23f8
	void CloseIngameMicphone();// 0x355f9e4
	void CloseAllSpeaker(bool ShowTips);// 0x3f011c4
	void CloseAllMicphone(bool ShowTips);// 0x3f01144
	int CheckDeviceMuteState();// 0x3f0111c
	void CheckAndEnableWWisePlugin();// 0x3f01108
	void CheckAndEnableRoomSpeaker();// 0x3f010f4
	void ChatShowAgeRestrictionMsgInLobby();// 0x380dff4
	void ChatShowAgeRestrictionMsgInFighting();// 0x3797724
	void ChatShowAgeRestrictionMsgInChat();// 0x3515c44
	void ChatRequestPrivacyInSetting();// 0x3f010e0
	void ChatRequestPrivacyInGame();// 0x3f010cc
	int ApplyMessageKey();// 0x3f010a4
	void AlwaysDisableRoomMic(FString InRoomName, bool WithClear);// 0x3f00f9c

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x3e79084
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x3e78ca0
	void ReadZipLog(FString Filename);// 0x3e78b48
	byte[] CompressLog(bool pullAllLog);// 0x3e78a38

--------------------------------
Class: GMLogShare.Object
	static void ShareLogFile();// 0x38c5f90
	static void Init();// 0x3e9cd60

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x50, Size: 60]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x130, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x134, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x138, Size: 4]
	bool EnableRandomBackupURL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool EnablePufferUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	FString UpdateInfoPath;//[Offset: 0x150, Size: 12]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	void StartAppUpdate();// 0x3e9763c
	void SetEnableCDNGetVersion(bool Enable);// 0x3e975bc
	void OnUpdateError(int curVersionStage, int ErrorCode);// 0x3e97500
	void OnDolphinBGDownloadDone();// 0x3e974ec
	void OnAreaChanged(FString InArea);// 0x3e97430
	bool IsUpdating();// 0x3e97408
	bool IsInstallInApp();// 0x3e973e0
	bool IsGrayUpdate();// 0x3e973b8
	bool IsExamine();// 0x365435c
	void Install();// 0x3e973a4
	int GetTotalValue();// 0x3e9737c
	int GetCurValue();// 0x3e97354
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x3e97214
	float GetCurPercent();// 0x3e971ec
	uint32 GetChannelIDWithHUD(GameFrontendHUD* InGameFrontendHUD);// 0x3e9716c
	uint32 GetChannelID();// 0x36e56ec
	void FinishUpdate();// 0x3e97158
	void FinishPufferUpdate();// 0x3e97144
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x3597804
	bool EnableCDNGetVersion();// 0x3e9711c
	void ContinueUpdate();// 0x3e97108
	void CancelUpdate();// 0x3e970f4
	void CancelAppUpdate();// 0x3e970e0

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x1c, Size: 12]
	FString StoredAccessToken;//[Offset: 0x28, Size: 12]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x38, Size: 16]
	delegate OnDetectDelegate;//[Offset: 0x48, Size: 16]
	delegate OnTranslateDelegate;//[Offset: 0x58, Size: 16]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 4]
	void TranslateV2(int Channel, int ID, FString Text);// 0x3ef0cc0
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3ef0980
	void PostMsg(FString URL, FString Content);// 0x3ef0840
	void OnTranslateV2(bool Success, FString Data);// 0x3ef0734
	void OnTranslate__DelegateSignature(bool IsSuccess, FString LanguageFrom, FString Translation);// 0x49216cc
	void OnTranslate(bool Success, FString Data);// 0x3ef0628
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x3ef051c
	void OnGetAccessToken__DelegateSignature(bool IsSuccess, FString Token);// 0x49216cc
	void OnGetAccessToken(bool Success, FString Data);// 0x3ef0410
	void OnDetectV2(bool Success, FString Data);// 0x3ef0304
	void OnDetect__DelegateSignature(bool IsSuccess, FString from, FString to);// 0x49216cc
	void OnDetect(bool Success, FString Data);// 0x3ef01f8
	bool HasTranslating();// 0x3ef01d0
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3eefe3c
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3eefafc

--------------------------------
Class: HttpWrapper.Object
	delegate OnResponseEvent;//[Offset: 0x1c, Size: 12]
	delegate OnImageDownloadResponseEvent;//[Offset: 0x28, Size: 12]
	void SimplePostForLua(FString URL, FString Content, int Priority, int QueueType);// 0x3e9e938
	void SetQueueSize(int QueueType, int InSize);// 0x3e9e87c
	void SetQueueEnable(bool InEnableQueue);// 0x3e9e800
	void SetPoolEnable(bool InEnablePool);// 0x3e9e778
	int RequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority, int QueueType);// 0x3e9e444
	int ImageDownloadRequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority);// 0x3e9e154
	bool GetQueueEnable();// 0x3e9e138
	bool GetPoolEnable();// 0x3e9e110
	int GetInternalIndex();// 0x3e9e0f4
	void CancelRequestAll(int QueueType);// 0x3e9e07c
	void CancelRequest(int QueueType, int ReqIndex);// 0x3e9dfc0

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	FString DownloadDir;//[Offset: 0x2a4, Size: 12]
	FString PufferTmpDir;//[Offset: 0x2b0, Size: 12]
	uint32 CleanFlagVer;//[Offset: 0x2bc, Size: 4]
	FString[] CleanFileNamePattern;//[Offset: 0x2c0, Size: 12]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 1]
	FString[] PreFetchPakNames;//[Offset: 0x2d0, Size: 12]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x2dc, Size: 4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x2e4, Size: 4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x2e8, Size: 4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x2ec, Size: 4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x2f0, Size: 4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x2f4, Size: 12]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x304, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x308, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x30c, Size: 4]
	bool DisableBGDownloadNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	float PreFetchODPaks_StartTime;//[Offset: 0x314, Size: 4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x318, Size: 12]
	bool StopTask(uint64 TaskId);// 0x3e9bb28
	int StopMergeBinDiffPak(int outterTaskID);// 0x3e9baa8
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x3e9ba28
	void StopBGDownloadNotification();// 0x3e9ba14
	bool StopAllTask();// 0x3e9b9ec
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate downloadDelegate);// 0x3e9b8c0
	void StartBGDownloadNotification(uint64 InDownloadedSize);// 0x3e9b844
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x3e9b638
	void SetTempProductIdBase(int ProductIdRaw);// 0x3e9b5c0
	void SetTempProductId(FString ProductIdRaw);// 0x3e9b468
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, FString FileList, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x3e9b144
	void SetIOSBGDownloadAttribute(bool bEnableCellularAccess, bool bEnableResumeData, int nMinFileSize, int nMaxTasks);// 0x3e9afe4
	bool SetImmDLMaxSpeed(uint64 MaxSpeed);// 0x3e9af60
	void SetBattleDownloadSwitch(bool Enable);// 0x3e9aee0
	static int ReturnSplitMiniPakFilelist_LuaState();// 0x3e98d08
	static int ReturnLocalFiles_LuaState();// 0x3e98d08
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x3e9ad30
	bool RemountPakFiles();// 0x3e9ad08
	FString ReadFile(FString Filename);// 0x3e9ab28
	bool PreFetchPakFiles();// 0x3e9ab00
	int PreFetchODPakFilesUpdate();// 0x3e9aad8
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x3e9aa50
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x3e9a9d0
	bool PreFetchODPakFiles(bool Start);// 0x3e9a948
	void OnItemDownloadedInFighting(FString PackHash, FString ErrorCode);// 0x3e9a6d8
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x3e9a538
	int MoveFileTo(FString Filename, FString from, FString to);// 0x3e9a1a8
	int MoveFile(FString from, FString to);// 0x3e99f30
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x3e99b08
	bool IsODPaks(FString FilePath);// 0x3e999a8
	bool IsODFileExists(FString Path);// 0x3e998e4
	bool IsInitSuccess();// 0x3e998bc
	bool IsFileReady(FString FilePath);// 0x3e9975c
	bool IsFileExist(FString Filename, FString extension);// 0x3e994e4
	bool InitializeODPaks();// 0x3e994bc
	FString GetTempWorkPath();// 0x3e993fc
	void GetProductIDBase(out int[] ProductIDs);// 0x3e99330
	void GetProductID(out int[] ProductIDs);// 0x3e99264
	int GetODPakNum();// 0x3e9923c
	FString GetODPakName(FString Path);// 0x3e990f8
	uint32 GetInitErrcode();// 0x3e990d0
	uint64 GetFileSizeCompressed(FString FilePath);// 0x3e98f70
	float GetFileSize(FString Filename);// 0x3e98e0c
	FString GetDownloadPath();// 0x3e98d4c
	float GetCurrentSpeed();// 0x3e98d24
	int GetBatchODPaksDownloadList_LuaState();// 0x3e98d08
	void EnableUseOldInterface(bool Enable);// 0x3e98c88
	bool DeleteFileEvenIfUnfinished(FString FilePath);// 0x3e98b28
	static bool DeleteFile(FString fullPath);// 0x3e989d0
	bool ConvertPreFetchFiles();// 0x3e989a8
	FString ConvertItemIdToPakName(uint32 ItemId);// 0x3e988a0
	bool ClearUselessODPaks();// 0x3e98878
	bool ClearPreFetchODPaksFiles();// 0x3e98850
	bool ClearPreFetchFiles();// 0x3e98828
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x3e9863c

--------------------------------
Class: LaggingReporter.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x3c, Size: 12]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x3e74bc8

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x35b23f8

--------------------------------
Class: CDNUpdate.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x90, Size: 4]
	void StartUpdateApp();// 0x3e85180
	void StartAppUpdate(bool StartGrayUpdate);// 0x3e85100
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x3e85034
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x3e84f68
	bool IsUpdating();// 0x3e84f40
	bool IsGrayUpdate();// 0x3e84f18
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x3e84dd8
	void FinishUpdate();// 0x3e84dc4
	void ContinueUpdate();// 0x3e84db0
	void CancelUpdate();// 0x3e84d9c

--------------------------------
Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x28, Size: 60]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x64, Size: 60]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xa0, Size: 60]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0xdc, Size: 12]
	Property*[] Params;//[Offset: 0xe8, Size: 12]
	void SyncLuaRegisterEventNum(FString EventType, FString EventID, int Number);// 0x3bb7ba4
	LuaTemBPData*[] GetCurrentParam();// 0x3bb7b3c
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x3bb7ab4
	bool CheckNeedPostEventWithFilterKey(out const uint32 FilterKey, FString EventType, FString EventID, bool bCheckNeedPostLua);// 0x3bb78c4
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventID, const bool bActive);// 0x3bb76dc

--------------------------------
Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0, Size: 12]

--------------------------------
Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0, Size: 8]
	FString FunctionName;//[Offset: 0x8, Size: 12]
	FString EventType;//[Offset: 0x14, Size: 12]
	FString EventID;//[Offset: 0x20, Size: 12]

--------------------------------
Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	FString LuaManagerName;//[Offset: 0x24, Size: 12]
	FString ShowUI;//[Offset: 0x30, Size: 12]
	FString HideUI;//[Offset: 0x3c, Size: 12]
	FString CheckWindowOpen;//[Offset: 0x48, Size: 12]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x1c, Size: 60]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x3eab124
	void AddSystem(const FString SystemName, const FString BPPath);// 0x3eaaeb4

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	void Init();// 0x49216cc

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x1c, Size: 12]
	FString TssCDNHostInfo;//[Offset: 0x28, Size: 12]
	FString TssBuildInIpInfo;//[Offset: 0x34, Size: 12]
	int TssLocal;//[Offset: 0x40, Size: 4]
	static int SendSkdData_LuaState();// 0x3e98d08
	static int SendEigeninfoData_LuaState();// 0x3e98d08
	static uint32 SaveSendEigeninfoCode_LuaState();// 0x3e98d08
	static int OnRecvData_LuaState();// 0x3e98d08
	static uint32 InvokeSDKIoctl(int Command, FString InCmdData);// 0x3ef1340
	static int GetUserTag4Lua_LuaState();// 0x3e98d08
	static int GetDeviceFeature_LuaState();// 0x3e98d08
	static int EigenArrayObfuscationVerify_LuaState();// 0x3e98d08

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 12]
	delegate OnFail;//[Offset: 0x28, Size: 12]
	FString FileURL;//[Offset: 0x34, Size: 12]
	FString CompreesedFileUrl;//[Offset: 0x40, Size: 12]
	FString FileSavePath;//[Offset: 0x4c, Size: 12]
	FString CompreesedFileSavePath;//[Offset: 0x58, Size: 12]
	FString UrlHash;//[Offset: 0x64, Size: 12]
	FString CompreesedUrlHash;//[Offset: 0x70, Size: 12]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	void Start(FString URL);// 0x3e9f3f0
	static ImageDownloader* MakeDownloaderInGame();// 0x3e9f3c8
	static ImageDownloader* MakeDownloader();// 0x3e9f3a0
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x3e9f240
	static FString CheckAndGetEncryptUrl(out FString InUrl);// 0x3e9f0f4

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x44, Size: 60]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0x90, Size: 12]
	void TickUDPPing(float DeltaTime);// 0x3ef9cf4
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x3ef99f8
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x3ef9818
	void OnPingServerResultDelegate__DelegateSignature(FString address, int IsSuccess, float Time);// 0x49216cc
	bool IsChooingZoneAccess();// 0x3ef97f0
	bool isAllZoneHasPingValue();// 0x3ef97c8
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x3ef9638
	float GetZoneServerDelay(FString ServerAddress);// 0x3ef94d4
	int GetMinDealyAddress();// 0x3ef94ac
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x3ef930c

--------------------------------
Class: PingServerInfo

--------------------------------
Class: Package.Object

--------------------------------
Class: ColorBlindnessMgr.Object
	<int,LinearColor> CBColorMap;//[Offset: 0x1c, Size: 60]
	<int,ParticleSysColor> CBParticleColorMap;//[Offset: 0x58, Size: 60]
	<uint32,ImageOriginal> HandleCBColorImageContaner;//[Offset: 0x94, Size: 60]
	<uint32,HandleMesh> HandleCBColorMeshContaner;//[Offset: 0xd0, Size: 60]
	<uint32,HandleParticleSystem> HandleCBColorParticleContaner;//[Offset: 0x10c, Size: 60]
	void Reset();// 0x35d22cc
	void RemoveParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x35d2254
	void RemoveMeshComponent(MeshComponent* Mesh);// 0x35d21dc
	void RemoveImage(Image* Image);// 0x35d2164
	void HandleUserSettingChange();// 0x35d2150
	LinearColor GetColorByType(int Type);// 0x35d20c4
	void Clear();// 0x35d20b0
	void AddParticleSystem(ParticleSystemComponent* ParticleSystem, int Type);// 0x35d1ff4
	void AddMeshComponent(MeshComponent* Mesh, int Type);// 0x35d1f38
	void AddImage(Image* Image, LinearColor Color, int Type);// 0x35d1e2c
	void AddColorByType(FString Type, LinearColor Color);// 0x35d1c88

--------------------------------
Class: ParticleSysColor
	<FString,LinearColor> colorMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ImageOriginal
	LinearColor OriginalColir;//[Offset: 0x8, Size: 16]
	int Type;//[Offset: 0x18, Size: 4]

--------------------------------
Class: HandleMesh
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HandleParticleSystem
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 8]

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x1c, Size: 60]
	void SetMaxTaskNum(int Num);// 0x3632520
	void RunNextTask();// 0x3e73708
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x3e7359c
	void ClearOneTask(FString ObjectPath);// 0x3e73444
	void ClearAllTask();// 0x3e73430
	void AddTask(FString ObjectPath, int LoadPriority);// 0x3e73294

--------------------------------
Class: BattleUtils.Object
	GameFrontendHUD* OwningFrontendHUD;//[Offset: 0x60, Size: 4]
	UAEGameMode* BattleGameMode;//[Offset: 0x78, Size: 4]
	BattlePlayer*[] BattlePlayerList;//[Offset: 0x7c, Size: 12]
	BattleGameInfo CachedBattleGameInfo;//[Offset: 0x88, Size: 48]
	GameModeAIPlayerParams CachedAIPlayerParams;//[Offset: 0xb8, Size: 816]
	FString LuaFilePath;//[Offset: 0x3e8, Size: 12]
	uint32 SyncNewBattlePlayer(uint64 UID, out const PlayerInfoData Info);// 0x3e77698
	void SyncGameInfo(out const BattleGameInfo Info);// 0x3e7758c
	void SyncGameExit();// 0x3e77578
	void SyncBattlePlayerExit(uint64 UID, FName PlayerType, FString Reason);// 0x3e7737c
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x3e772a4
	GameModeAIPlayerParams RetrieveAIPlayerParams(PlayerID PlayerID);// 0x3e771bc
	void ResponPlayerWeaponDIYData(uint64 PlayerUID, WeaponDIYData InWeaponDIYData);// 0x3e77090
	void RequestSomePlayersBattleData(uint64[] PlayerUIDList, byte DataType);// 0x3e76ef4
	void RequestPlayerWeaponDIYData(uint64 PlayerUID, int WeaponSkinID, int PlanID);// 0x3e76dec
	void RequestOnePlayersBattleData(uint64 PlayerUID, byte DataType);// 0x3e76d24
	void RequestAllPlayersBattleData(byte DataType);// 0x3e76cac
	void OnPostLoadMapWithWorld(World* World);// 0x3e76c34
	BattlePlayer* NewBattlePlayer();// 0x3e76c0c
	BattleAIPlayer* NewBattleAIPlayer();// 0x3e76be4
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x3e76b54
	UAEGameMode* GetBattleGameMode();// 0x3e76b2c
	void GenerateAIPlayerParams(out const PlayerInfoData Info);// 0x3e76a14
	BattlePlayer* FindPlayerByUID(uint64 UID, FName PlayerType);// 0x3e76948
	BattlePlayer* FindPlayerByPlayerName(FString PlayerName, FName PlayerType);// 0x3e767a0
	BattlePlayer* FindPlayerByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x3e766dc

--------------------------------
Class: UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x3e0, Size: 8]
	float GridCheckSize;//[Offset: 0x3e8, Size: 4]
	float DeepCheckSize;//[Offset: 0x3ec, Size: 4]
	float HeightCheckSize;//[Offset: 0x3f0, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x3f4, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	bool bUseDefaultResultRules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x407, Size: 1]
	int AntiDataCD;//[Offset: 0x408, Size: 4]
	int WeatherId;//[Offset: 0x40c, Size: 4]
	FString WeatherName;//[Offset: 0x410, Size: 12]
	int RoomMode;//[Offset: 0x41c, Size: 4]
	int SeasonIdx;//[Offset: 0x420, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x424, Size: 4]
	FString ItemTableName;//[Offset: 0x428, Size: 12]
	FString ItemClassPath;//[Offset: 0x434, Size: 12]
	FString ReplayPushURL;//[Offset: 0x440, Size: 12]
	int ReplayType;//[Offset: 0x44c, Size: 4]
	FString ReplayTitle;//[Offset: 0x450, Size: 12]
	enum EnableObserverEnemyTrace;//[Offset: 0x45c, Size: 1]
	FString[] ItemSpawnTableList;//[Offset: 0x460, Size: 12]
	FString[] IgnoreItemClassPathList;//[Offset: 0x46c, Size: 12]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x478, Size: 12]
	<uint64,CharacterMoveDragData> CharacterMoveDragDataMap;//[Offset: 0x484, Size: 60]
	<uint64,ParachuteDragData> ParachuteDragDataMap;//[Offset: 0x4c0, Size: 60]
	<uint64,VehicleMoveDragDataFriendly> VehicleMoveDrag;//[Offset: 0x4fc, Size: 60]
	<uint64,CharacterShootVerifyData> CharacterShootVerifyDataMap;//[Offset: 0x538, Size: 60]
	<uint64,CharacterShootVerifyStat> CharacterShootVerifyStatMap;//[Offset: 0x574, Size: 60]
	uint32 ServerStartTime;//[Offset: 0x5b0, Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x5b8, Size: 12]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x5c8, Size: 12]
	FString VehicleTableName;//[Offset: 0x5d4, Size: 12]
	FString VehicleClassPath;//[Offset: 0x5e0, Size: 12]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 1]
	Vector RegionCenter;//[Offset: 0x5f0, Size: 12]
	float RegionRadius;//[Offset: 0x5fc, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x600, Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x63c, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x640, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x644, Size: 4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x64c, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x650, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x654, Size: 4]
	float RescueSelfRestoreDuration;//[Offset: 0x658, Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x65c, Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x660, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x665, Size: 1]
	FString NetObjectPathNameMappingCSV;//[Offset: 0x668, Size: 12]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x674, Size: 12]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x680, Size: 4]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x684, Size: 12]
	Actor*[] DynamicTriggers;//[Offset: 0x690, Size: 12]
	int IsGameModeFpp;//[Offset: 0x69c, Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x6a4, Size: 12]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x6b0, Size: 60]
	VehicleAvatarReplaceCfg[] VehicleAvatarReplaceCfgList;//[Offset: 0x6ec, Size: 12]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x6fc, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x708, Size: 12]
	int[] DynamicLevelArray;//[Offset: 0x714, Size: 12]
	FString RoomType;//[Offset: 0x720, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 1]
	int ZoneID;//[Offset: 0x730, Size: 4]
	int nClientType;//[Offset: 0x734, Size: 4]
	int MainModeID;//[Offset: 0x738, Size: 4]
	delegate OnGameModeStateChanged;//[Offset: 0x760, Size: 12]
	delegate SendTeammateResultWhenChicken;//[Offset: 0x7e8, Size: 16]
	delegate HaveSentTeamBattleResult;//[Offset: 0x7f8, Size: 16]
	delegate SendTeamBattleResult;//[Offset: 0x808, Size: 12]
	delegate SendGameStopJoin;//[Offset: 0x894, Size: 12]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	float OBInfoTimeStep;//[Offset: 0xbf8, Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0xc1c, Size: 12]
	UAEPlayerController*[] KickFlagControllerList;//[Offset: 0xc28, Size: 12]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0xc34, Size: 12]
	class UAEAdvertisementActor* AdvertisementActorBP;//[Offset: 0xcd4, Size: 4]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0xcd8, Size: 12]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0xce4, Size: 12]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0xcf0, Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfc, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0xd00, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0xd0c, Size: 12]
	FString GrenadeEffectPath;//[Offset: 0xd18, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd24, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd25, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd26, Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd27, Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0xd28, Size: 12]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34, Size: 1]
	float FestivalAirDropProb;//[Offset: 0xd38, Size: 4]
	float MonsterDropPar;//[Offset: 0xd3c, Size: 4]
	float SceneDropParam;//[Offset: 0xd40, Size: 4]
	uint32 DSOpenSwtich;//[Offset: 0xd44, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xd48, Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xd4c, Size: 4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0xd54, Size: 12]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0xd60, Size: 12]
	FString SeasonStatueClassPath;//[Offset: 0xd6c, Size: 12]
	FString StatueBaseClassPath;//[Offset: 0xd78, Size: 12]
	StatueBaseData StatueBaseInfo;//[Offset: 0xd84, Size: 84]
	int BattleStopJoin;//[Offset: 0xdd8, Size: 4]
	int nSignalGunEffectId;//[Offset: 0xddc, Size: 4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0xde0, Size: 12]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0xe64, Size: 12]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb1, Size: 1]
	int StandAloneTestPlayerKey;//[Offset: 0xeb4, Size: 4]
	FName StandAloneTestPlayerType;//[Offset: 0xeb8, Size: 8]
	void WriteStatistics();// 0x4099c6c
	void SyncPlayerNames();// 0x386609c
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x4099b30
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x40999f0
	void SetVehicleReportEntry(uint32 InUniqueID, VehicleReportEntry InEntry);// 0x4099900
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x40997f8
	void SetMaxWeaponReportNum(int Num);// 0x4099784
	void SetKillerPlayerKey(Controller* VictimPlayer, uint32 KillerPlayerKey);// 0x357a5a4
	void SetGameEndReportData();// 0x357d6b4
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x40996d0
	void RetrieveBattleData(out BattleData OutBattleData);// 0x409963c
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3766980
	void ResetGameParamsFromGameMode();// 0x4099620
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x409955c
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x4099498
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x4099418
	void RefreshWorldActiveRange();// 0x40993fc
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x4099338
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 UID, int IdxInTeam);// 0x4099064
	int RecoardAlivePlayerNum();// 0x4099034
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x4098fac
	void OnStandAloneGameEnd();// 0x4098f90
	void OnReportNetworkData();// 0x357cff4
	void OnPlayerFiring(uint32 InPlayerKey);// 0x4098f10
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x357cf74
	void OnPlayerBreathChange(uint32 InPlayerKey, float InBreath);// 0x4098e4c
	void OnObserverLogout(UAEPlayerController* InController);// 0x4098dcc
	void OnObserverLogin(UAEPlayerController* InController);// 0x4098d4c
	void OnMsg(FString Msg);// 0x4098c88
	void OnAirDropBoxLanded(int BoxId, out const Vector Pos);// 0x4098bb8
	void OnAirDropBoxEmpty(int BoxId);// 0x4098b38
	void NotifyPlayerExitWhenNotStarted(uint32 PlayerKey, FName PlayerType, FString Reason);// 0x3accf0c
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage, FName ParamState, FString ParamReason);// 0x3acca88
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x4098a74
	void NotifyGameModeParamsChanged(out const GameModeParams GameModeParams);// 0x40989dc
	void NotifyGameModeLuckmate(int64 MyUID, int64 LuckmateUID);// 0x4098904
	void NotifyGameModeInit();// 0x3ad38d4
	void NotifyExistPlayerReEnter(uint32 PlayerKey);// 0x4098884
	void NotifyAIPlayerEnter(uint32 PlayerKey, bool IsMLAI, const bool bTeammateAI);// 0x4098768
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x357cd4c
	float ModifyVehicleDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* VictimVehicle, Actor* DamageCauser);// 0x3a86504
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x40985a4
	void Killed(Controller* Killer, Controller* VictimPlayer, Actor* DamageCauser, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x40983ec
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x4098360
	void InitWorldActiveRange();// 0x395fd88
	void InitSeasonStatue();// 0x4098344
	void InitMissionBoard();// 0x4098328
	void InitGenerator();// 0x395ff48
	void InitGameParamsFromGameMode();// 0x409830c
	void InitDynamicTriggers();// 0x38316bc
	void InitDynamicBuildingGroups();// 0x40982f0
	void InitBornWithApple();// 0x40982d4
	void Heartbeat();// 0x40982c0
	bool HasVehicleReportEntry(uint32 InUniqueID);// 0x40981d8
	bool HasDynamicBuildingGroup();// 0x40981b0
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x4098014
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x4097f50
	VehicleReportEntry GetVehicleReportEntry(uint32 InUniqueID);// 0x4097e18
	int GetSurvivingTeamCount();// 0x385f974
	int GetSurvivingCharacterCount();// 0x4097de8
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x4097c94
	void GetPlayerRealtimeVerifyInfo(uint32 PlayerKey, out RealtimeVerifyInfo RealtimeVerifyInfo);// 0x357c8b8
	UAEPlayerController* GetPlayerControllerWithUID(uint64 UID);// 0x4097c10
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x4097abc
	void GetPlayerAndRealAiNum(out HeartBeatData Data);// 0x4097a18
	UAEPlayerController*[] GetObserverControllerList();// 0x4097958
	void GetMonsterNum(out HeartBeatData Data);// 0x40978b4
	int GetMaxWeaponReportNum();// 0x4097898
	Vector GetClassicPlaneDirection();// 0x4097848
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x4097784
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x40976c0
	PlayerController* FindPlayerControllerByUId(uint64 UID);// 0x357c328
	Controller* FindControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x40975fc
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x4097518
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x4097498
	void DestroyAllPickUpObjs();// 0x34f4004
	void DeleteSeasonStatue();// 0x409747c
	void DeleteDynamicLoadItem();// 0x3831370
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x40973fc
	void CreateDynamicBuildingGroups(Vector Offset);// 0x409738c
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x4097238
	void AddAirDropBox(int BoxId, out const Vector Pos);// 0x4097168

--------------------------------
Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x3d4, Size: 12]

--------------------------------
Class: DSSwitchInfo
	int KeyNum;//[Offset: 0x0, Size: 4]
	FString SValue;//[Offset: 0x4, Size: 12]

--------------------------------
Class: CharacterMoveDragData
	CharacterMoveDrag[] Drag;//[Offset: 0x0, Size: 12]
	CharacterSimulateMoveDrag[] SimulateDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: CharacterMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	<byte,int> ReasonCount;//[Offset: 0x4, Size: 60]
	DistanceDragData[] ExceedsDistances;//[Offset: 0x40, Size: 12]

--------------------------------
Class: DistanceDragData
	float CX;//[Offset: 0x0, Size: 4]
	float CY;//[Offset: 0x4, Size: 4]
	float CZ;//[Offset: 0x8, Size: 4]
	float SX;//[Offset: 0xc, Size: 4]
	float SY;//[Offset: 0x10, Size: 4]
	float sz;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterSimulateMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int DragCount;//[Offset: 0x8, Size: 4]
	int ShakeCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ParachuteDragData
	uint32 MyDrag;//[Offset: 0x0, Size: 4]
	uint32 OtherDrag;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleMoveDragDataFriendly
	VehicleMoveDragFriendly[] MoveDrag;//[Offset: 0x0, Size: 12]
	VehicleMoveDragFriendly[] SimulatedMoveDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleMoveDragFriendly
	int Minute;//[Offset: 0x0, Size: 4]
	byte VehicleType;//[Offset: 0x4, Size: 1]
	<byte,int> Counters;//[Offset: 0x8, Size: 60]

--------------------------------
Class: CharacterShootVerifyData
	<byte,int> ShootVerifyFailed;//[Offset: 0x0, Size: 60]

--------------------------------
Class: CharacterShootVerifyStat
	<byte,int> ShootVerifyStat;//[Offset: 0x0, Size: 60]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x2ad, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae, Size: 1]
	int WorldCompositionID;//[Offset: 0x2b0, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x2b4, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x2b8, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 1]
	void SetGroupValid(bool Valid);// 0x406e0d8
	bool IsValidGroup();// 0x406e0a8
	int FindWorldCompositionID();// 0x406e080
	void DoPickUp();// 0x406e06c

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 12]
	FString TriggerClassPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 12]
	int ActID;//[Offset: 0xc, Size: 4]
	FString Path;//[Offset: 0x10, Size: 12]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	int[] PosIdxList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: DynamicBuildingGroupTransform
	float locX;//[Offset: 0x0, Size: 4]
	float locY;//[Offset: 0x4, Size: 4]
	float LocZ;//[Offset: 0x8, Size: 4]
	float RotX;//[Offset: 0xc, Size: 4]
	float RotY;//[Offset: 0x10, Size: 4]
	float RotZ;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VehicleAvatarReplaceCfg
	int OriginID;//[Offset: 0x0, Size: 4]
	int[] SkinIDList;//[Offset: 0x4, Size: 12]
	float[] ProbabilityDistribute;//[Offset: 0x10, Size: 12]
	int MaxNum;//[Offset: 0x1c, Size: 4]
	int CurrentNum;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AirDropBoxInOb
	int BoxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector Pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x648, Size: 8]
	FString PlayerName;//[Offset: 0x650, Size: 12]
	uint32 PlayerKey;//[Offset: 0x65c, Size: 4]
	uint64 UID;//[Offset: 0x660, Size: 8]
	FString PlayerOpenID;//[Offset: 0x668, Size: 12]
	int TeamID;//[Offset: 0x674, Size: 4]
	int64 IdxInTeam;//[Offset: 0x678, Size: 8]
	int CampID;//[Offset: 0x680, Size: 4]
	Vector CharacterLocation;//[Offset: 0x684, Size: 12]
	int RoomMode;//[Offset: 0x690, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x694, Size: 20]
	int planeAvatarId;//[Offset: 0x6a8, Size: 4]
	int DyeDebugFlag;//[Offset: 0x6ac, Size: 4]
	int PlayerStartID;//[Offset: 0x6b0, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x6b8, Size: 48]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	FString PlanetailResLink;//[Offset: 0x6ec, Size: 12]
	int InPacketLossRate;//[Offset: 0x6f8, Size: 4]
	int OutPacketLossRate;//[Offset: 0x6fc, Size: 4]
	int ClientNetworkType;//[Offset: 0x700, Size: 4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 1]
	int GameReplayType;//[Offset: 0x720, Size: 4]
	bool bDisableProcessPlayerInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x728, Size: 48]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x758, Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x764, Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x770, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 1]
	FString Nation;//[Offset: 0x778, Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x78c, Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x790, Size: 4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x794, Size: 12]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x7a0, Size: 12]
	int RolewearIndex;//[Offset: 0x7ac, Size: 4]
	int[] equip_plating_list;//[Offset: 0x7b0, Size: 12]
	GameModePlayerItem[] InitialSharedSkin;//[Offset: 0x7bc, Size: 12]
	GameModePlayerKnapsackSingleInfo InitialSharedKnapsack;//[Offset: 0x7c8, Size: 80]
	bool bSharedSkinOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 1]
	bool bUsingSharedSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 1]
	bool bSubscribeBagOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81a, Size: 1]
	int FashionBagStartIndex;//[Offset: 0x81c, Size: 4]
	int VehicleSkinInReady;//[Offset: 0x820, Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x828, Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x834, Size: 28]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x850, Size: 12]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0x85c, Size: 12]
	delegate OnInitialWeaponScheme;//[Offset: 0x868, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x874, Size: 4]
	int PveLevel;//[Offset: 0x878, Size: 4]
	int[] InitialCharSkillList;//[Offset: 0x87c, Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x888, Size: 12]
	GameModePlayerItems[] InitialVehicleAvatarSkinList;//[Offset: 0x894, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x8a0, Size: 4]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0x8a4, Size: 12]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x8b0, Size: 12]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0x8bc, Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x8c8, Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x8d8, Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0x8e4, Size: 60]
	<int,int> GrenadeAvatarItemList;//[Offset: 0x95c, Size: 60]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x998, Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0x9a4, Size: 60]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x9e0, Size: 60]
	<int,VehicleAvatarSkinList> VehicleAvatarSkinList;//[Offset: 0xa1c, Size: 60]
	int[] VehicleMusicList;//[Offset: 0xa58, Size: 12]
	int[] DefaultVehicleMusic;//[Offset: 0xa64, Size: 12]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0xa70, Size: 12]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0xa7c, Size: 12]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0xa88, Size: 60]
	<int,int> InitialWeaponPendantList;//[Offset: 0xac4, Size: 60]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xb00, Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xb0c, Size: 12]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xb18, Size: 12]
	uint32 TaskSyncToDsTs;//[Offset: 0xb24, Size: 4]
	int AnchorPlatResID;//[Offset: 0xb28, Size: 4]
	int AnchorPlatColorID;//[Offset: 0xb2c, Size: 4]
	delegate OnPlayerGotoSpectatingDelegate;//[Offset: 0xb30, Size: 12]
	delegate OnReceiveUIMessage;//[Offset: 0xb44, Size: 12]
	int64 LastGameResultTime;//[Offset: 0xb50, Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb58, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb59, Size: 1]
	FString IpCountryStr;//[Offset: 0xb5c, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb69, Size: 1]
	uint32 ObserverFlags;//[Offset: 0xb6c, Size: 4]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 1]
	LobbyWatchInfo LobbyWatchInfo;//[Offset: 0xb74, Size: 8]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0xb7c, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0xb80, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84, Size: 1]
	float UpdateOBCircleCounter;//[Offset: 0xb88, Size: 4]
	float UpdateOBCircleInterval;//[Offset: 0xb8c, Size: 4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 1]
	bool bWaitRetryGotoSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb91, Size: 1]
	FString[] FriendObservers;//[Offset: 0xb94, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba1, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xbf0, Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbfc, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbfd, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xc0c, Size: 12]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xc18, Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xc24, Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xc30, Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xc3c, Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xc48, Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xc54, Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xc60, Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0xc6c, Size: 12]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0xc78, Size: 12]
	bool bCanWatchEnemyInRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c, Size: 1]
	Object*[] SecurityObjs;//[Offset: 0xcf4, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0xd00, Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 1]
	float NotifyTimeOut;//[Offset: 0xd10, Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0xd14, Size: 4]
	FString NeedLoadLevelName;//[Offset: 0xd18, Size: 12]
	FString NeedLoadedLevelFullName;//[Offset: 0xd24, Size: 12]
	bool IsTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 1]
	int AntiDataCD;//[Offset: 0xd40, Size: 4]
	int ModeID;//[Offset: 0xd44, Size: 4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd48, Size: 1]
	float ClientToDSFlowLimitTime;//[Offset: 0xd6c, Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0xd70, Size: 4]
	FString UsingNetObjectPathNameMappingCSV;//[Offset: 0xd84, Size: 12]
	NetworkReportActor* NetworkReportActor;//[Offset: 0xd90, Size: 4]
	bool UseingWeaponScheme();// 0x40a8778
	void TestShowLongTimeNoOperation();// 0x40a873c
	void TestShowConfirmDialogOfMisKill();// 0x40a8728
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x40a85a4
	void SyncDailyTaskStoreInfo(DailyTaskStoreInfo[] NewDailyTaskStoreList);// 0x40a8448
	void SetUsedSimulationCVar(bool Value);// 0x40a83c8
	static void SetTargetMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x40a82e8
	void SetPanels(out const UAEUserWidget*[] panels);// 0x40a8214
	void SetIsInPetSpectator(bool inIsInPetSpectator);// 0x40a8194
	static void SetDSMsgReceiveDelegate(delegate InDelegate);// 0x40a80f8
	static void SetClientMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x40a8018
	void ServerSetVoiceId(int VoiceID);// 0x40a7f64
	void ServerKickSelf();// 0x40a7f08
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x40a7e54
	void ServerExitGame();// 0x40a7df8
	void ServerAcknowledgeReconnection(uint32 Token);// 0x40a7d44
	void SendNetObjectPathNameMappingHashToServer(uint32 VersionHash);// 0x40a7c90
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x40a7b80
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x40a7a70
	void RPC_Server_SyncClientNetInfo(int InLoss, int OutLoss, int InNetworkType);// 0x40a792c
	void RPC_Server_ReportClientNetInfo(int AvgPing, int MaxPing, int MinPing, int LostPackRate, int AvgNoOutlier, int StdNoOutlier, int NumNoOutlier, int InLoss, int OutLoss);// 0x40a7614
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x40a74d8
	void RPC_LuaClientToDS(int ID, const byte[] Content);// 0x40a739c
	void Respawn();// 0x40a7380
	void ResetUsedSimulationCVar();// 0x40a736c
	void ReleaseInGameUI();// 0x40a7350
	void ReceivePostLoginInit();// 0x49216cc
	void PrintStatistics();// 0x34f4004
	void PlayerStartIDReceived();// 0x40a733c
	void OnRep_WeaponAvatarDataList();// 0x39264ac
	void OnRep_UsingNetObjectPathNameMappingCSV();// 0x40a7328
	void OnRep_UsedSimulation();// 0x3926490
	void OnRep_PveLevel();// 0x40a730c
	void OnRep_PlayerOBInfoList();// 0x40a72f8
	void OnRep_LobbyWatchInfo();// 0x40a72dc
	void OnRep_LastGameResultTime();// 0x40a72c0
	void OnRep_IsSpectatingEnemy();// 0x40a72a4
	void OnRep_IsSpectating();// 0x40a7288
	void OnRep_IsObserver();// 0x40a726c
	void OnRep_InitialWeaponSchemeInfo();// 0x40a7258
	void OnRep_InitialEquipmentAvatar();// 0x3926394
	void OnRep_InitialConsumableAvatar();// 0x3926378
	void OnRep_FriendObservers();// 0x3839fc4
	void OnRep_CurWeaponSchemeIndex();// 0x34f4004
	void OnRep_bRoomOwner();// 0x40a723c
	void OnNetObjectPathNameMappingTableAsyncLoad();// 0x40a7228
	void NotifyEnterBattle();// 0x3924a88
	void KickSelf();// 0x34f4004
	bool IsTeammateSpectator();// 0x40a7200
	bool IsSpectatorOrDemoPlayer();// 0x40a71d8
	bool IsSpectator();// 0x40a71b0
	bool IsRoomMode();// 0x40a718c
	bool IsPureSpectator();// 0x40a7164
	bool IsObserver();// 0x40a713c
	bool IsInSpectatingEnemy();// 0x40a7114
	bool IsInSpectating();// 0x40a70ec
	bool IsInPetSpectator();// 0x40a70c4
	bool IsHawkEyeSpectator();// 0x40a709c
	bool IsFriendOrEnemySpectator();// 0x40a7074
	bool IsFriendObserver();// 0x40a704c
	bool IsFriendNotHawkEyeObserver();// 0x40a7024
	bool IsExited();// 0x40a6ffc
	bool IsDemoRecSpectator();// 0x40a6fd4
	bool IsDemoPlaySpectator();// 0x398cccc
	bool IsDemoPlayGlobalObserver();// 0x40a6fac
	bool IsDeathSpectator();// 0x40a6f84
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x40a6ed8
	void InitWeaponAvatarItems();// 0x40a6ebc
	void InitVehicleMusicList();// 0x40a6ea0
	void InitVehicleAvatarSkinList();// 0x3923948
	void InitVehicleAvatarList();// 0x392392c
	void InitVehicleAdvanceAvatarList();// 0x40a6e84
	void InitIngameUI();// 0x40a6e68
	void InitGrenadeAvatarList(bool ReInitial);// 0x40a6de0
	bool HasAnySpectatorReplayFlag(uint32 InFlag);// 0x392340c
	int GotoSpectating(int PlayerID);// 0x3922a98
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x40a6d0c
	int GetWeaponAvatarItemId(int ID);// 0x3922810
	void GetVisibleLevelsLoadedName(out FString[] VisibleLevels);// 0x40a6bd8
	FString GetLobbyWatchedPlayerKeyAsString();// 0x40a6b18
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskId);// 0x40a6a88
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x40a6a60
	uint32 GetCurrentOBPlayerKey();// 0x40a6a30
	int GetCurrentOBPlayerInfoIndex();// 0x40a6a08
	int GenerateKillBroadcastItemID(int ClothAvatarID, int PlayerUID);// 0x49216cc
	void ForceNetReady();// 0x40a69f4
	void ExitGame();// 0x40a69e0
	void ExhaustCPU();// 0x40a69cc
	void ExecDSCommand(const FString DSCommand);// 0x391fd3c
	void ExcuteIntRecord(FString Key, int Count);// 0x40a6830
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x40a6694
	void EnableInGameUI();// 0x40a6680
	void DumpUAENetActors();// 0x40a666c
	void DumpRegions();// 0x40a6658
	void DumpNetActors();// 0x34f4004
	void DumpCharacters();// 0x40a6644
	void DumpAllUI();// 0x34f4004
	void DumpAllObjects();// 0x34f4004
	void DumpAllActors();// 0x34f4004
	void DoCrash();// 0x34f4004
	void DisableInGameUI();// 0x40a6630
	void DelayEnterBattleCheck();// 0x40a6614
	void DealWithPickUpFailed(ItemDefineID DefineID);// 0x40a6584
	void ClientShowTeammateEscapeNotice();// 0x40a6568
	void ClientRPC_CastUIMsgWithStrings(FString strMsg, FString module, const int TipsID, FString Param1, FString Param2);// 0x40a62cc
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x40a6140
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x40a5ff8
	void ClientInitPlayerOBInfoButton();// 0x40a5fdc
	void ClientBroadcastRespawnComplete();// 0x40a5fc0
	void ClientBroadcastReconnectionSuccessful();// 0x39801e0
	void ClientAcknowledgeReconnection(uint32 Token);// 0x3846cd4
	void CheckPlayerOBInfoButtonInit();// 0x40a5fa4
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x40a5f1c
	void CastUIMsg(FString strMsg, FString module);// 0x40a5dd4
	enum CanPickUpItem(ItemDefineID DefineID);// 0x40a5d3c
	void BroadcastUIMessage(FString MessageName, const int TipsIDOrType, FString Param1, FString Param2);// 0x40a5b30
	void BroadcastRespawnComplete();// 0x40a5b1c

--------------------------------
Class: LuaPlayerController.PlayerController.Controller.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x5f4, Size: 60]
	FString LuaFilePath;//[Offset: 0x630, Size: 12]

--------------------------------
Class: LuaNetSerialization

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 12]
	int WeatherId;//[Offset: 0xc, Size: 4]
	float WeatherTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 12]
	FString LocalAddr;//[Offset: 0xc, Size: 12]
	float AvgPing;//[Offset: 0x18, Size: 4]
	float MaxPing;//[Offset: 0x1c, Size: 4]
	float HighPingPercent;//[Offset: 0x20, Size: 4]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0, Size: 4]
	int upassLevel;//[Offset: 0x4, Size: 4]
	int upassScore;//[Offset: 0x8, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	FString iconUrl;//[Offset: 0x10, Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int upassKeepBuy;//[Offset: 0x20, Size: 4]
	int upassCurValue;//[Offset: 0x24, Size: 4]
	int pass_type;//[Offset: 0x28, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UID;//[Offset: 0x8, Size: 8]
	int ZoneID;//[Offset: 0x10, Size: 4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	int WinCount;//[Offset: 0x24, Size: 4]
	int TopTenCount;//[Offset: 0x28, Size: 4]
	int KillNum;//[Offset: 0x2c, Size: 4]
	float KDNum;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 12]
	bool bDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 12]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0, Size: 4]
	int BagSkin;//[Offset: 0x4, Size: 4]
	int HelmetSkin;//[Offset: 0x8, Size: 4]
	int FlySkin;//[Offset: 0xc, Size: 4]
	int GrenadeSkin;//[Offset: 0x10, Size: 4]
	GameModePlayerConsumableAvatar ConsumableAvatarList;//[Offset: 0x14, Size: 16]
	GameModePlayerItem[] WeaponList;//[Offset: 0x24, Size: 12]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x30, Size: 12]
	GameModePlayerItem[] BackPackPendantList;//[Offset: 0x3c, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x48, Size: 4]
	int WingmanSkin;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatarShoulei;//[Offset: 0x0, Size: 4]
	int GrenadeAvatarSmoke;//[Offset: 0x4, Size: 4]
	int GrenadeAvatarStun;//[Offset: 0x8, Size: 4]
	int GrenadeAvatarBurn;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]
	int PetCfgId;//[Offset: 0x8, Size: 4]
	int PetColor;//[Offset: 0xc, Size: 4]
	int[] PetAvatarList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 80]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int WearIndex;//[Offset: 0x54, Size: 4]

--------------------------------
Class: GameModePlayeWeaponSchemeInfo
	int SchemeIndex;//[Offset: 0x0, Size: 4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	GameModePlayeWeaponSchemeSlotInfo[] SlotList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayeWeaponSchemeSlotInfo
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemId;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int[] AttachList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: GameModePlayerItems
	GameModePlayerItem[] Items;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0, Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x4, Size: 12]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int ParticleID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0, Size: 4]
	int HelmetAvatar;//[Offset: 0x4, Size: 4]
	int ArmorAvatar;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0, Size: 4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleAvatarSkinList
	int[] SkinList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: GameModeWeaponDIYPlanData
	int WeaponAvatarID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DailyTaskStoreInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	int State;//[Offset: 0x4, Size: 4]
	int Progress;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LobbyWatchInfo
	uint32 WatchedPlayerKey;//[Offset: 0x0, Size: 4]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: NetworkReportActor.Actor.Object
	int LossRateArrayNum;//[Offset: 0x308, Size: 4]
	int MaxCacheLossRateArrayNum;//[Offset: 0x30c, Size: 4]
	FString InPacketLossRateArrayStr;//[Offset: 0x310, Size: 12]
	FString OutPacketLossRateArrayStr;//[Offset: 0x31c, Size: 12]
	void RPC_Server_SyncClientPkgLossArrayInfo(const byte[] InLoss, const byte[] OutLoss);// 0x407ada0
	void ResetAllNetworkData();// 0x407ad8c

--------------------------------
Class: GameModePlayerParams
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x4, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	int ZoneID;//[Offset: 0x24, Size: 4]
	int8 PlatID;//[Offset: 0x28, Size: 1]
	FName PlayerType;//[Offset: 0x30, Size: 8]
	FString PlayerName;//[Offset: 0x38, Size: 12]
	uint32 PlayerKey;//[Offset: 0x44, Size: 4]
	int TeamID;//[Offset: 0x48, Size: 4]
	int64 IdxInTeam;//[Offset: 0x50, Size: 8]
	uint64 PreTeamID;//[Offset: 0x58, Size: 8]
	int PlayerBornPointID;//[Offset: 0x60, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]
	byte gender;//[Offset: 0x66, Size: 1]
	FString PIC_URL;//[Offset: 0x68, Size: 12]
	int Level;//[Offset: 0x74, Size: 4]
	int Segment_Level;//[Offset: 0x78, Size: 4]
	int AceImprintShowId;//[Offset: 0x7c, Size: 4]
	int AceImprintBaseId;//[Offset: 0x80, Size: 4]
	int AvatarBoxId;//[Offset: 0x84, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	uint64 MLAIDisplayUID;//[Offset: 0x90, Size: 8]
	GameModePlayerItem[] ItemList;//[Offset: 0x98, Size: 12]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0xa4, Size: 12]
	int[] equip_plating_list;//[Offset: 0xb0, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0xbc, Size: 12]
	int RolewearIndex;//[Offset: 0xc8, Size: 4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xcc, Size: 12]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xd8, Size: 12]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0xe4, Size: 12]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xf0, Size: 12]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0xfc, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x108, Size: 12]
	GameModeWeaponDIYPlanData[] WeaponDIYPlanData;//[Offset: 0x114, Size: 12]
	int VehicleSkinInReady;//[Offset: 0x120, Size: 4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x124, Size: 52]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x158, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x188, Size: 28]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x1a4, Size: 12]
	GameModePlayeWeaponSchemeInfo[] WeaponSchemeInfoList;//[Offset: 0x1b0, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x1bc, Size: 4]
	int PveLevel;//[Offset: 0x1c0, Size: 4]
	int[] CharSkillList;//[Offset: 0x1c4, Size: 12]
	GameModePlayerBanChat banChat;//[Offset: 0x1d0, Size: 16]
	GameModePlayerBanChat banTarget;//[Offset: 0x1e0, Size: 16]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x1f0, Size: 12]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x1fc, Size: 12]
	int[] audioChat;//[Offset: 0x208, Size: 12]
	FName CurrentPlayerState;//[Offset: 0x218, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x220, Size: 8]
	float SyncedTimestamp;//[Offset: 0x228, Size: 4]
	float DestinyValue;//[Offset: 0x22c, Size: 4]
	float WarmScore;//[Offset: 0x230, Size: 4]
	float AIAllocMarkValue;//[Offset: 0x234, Size: 4]
	int LeaderCount;//[Offset: 0x238, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x240, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x248, Size: 12]
	uint64 LastGameBattleID;//[Offset: 0x258, Size: 8]
	float RatingScore;//[Offset: 0x260, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	float MaxRankingScore;//[Offset: 0x268, Size: 4]
	uint32 ObserverFlags;//[Offset: 0x26c, Size: 4]
	uint64 WatchPlayerKey;//[Offset: 0x270, Size: 8]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0x27c, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0x280, Size: 4]
	byte PlatformGender;//[Offset: 0x284, Size: 1]
	int planeAvatarId;//[Offset: 0x288, Size: 4]
	int DyeDebugFlag;//[Offset: 0x28c, Size: 4]
	FString Nation;//[Offset: 0x290, Size: 12]
	int MatchLabel;//[Offset: 0x29c, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x2a0, Size: 4]
	int AnchorPlatResID;//[Offset: 0x2a4, Size: 4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x2b0, Size: 8]
	int64 CorpsID;//[Offset: 0x2b8, Size: 8]
	int64 CampID;//[Offset: 0x2c0, Size: 8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 1]
	FString IpCountryStr;//[Offset: 0x2cc, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	int VeteranRecruitIndex;//[Offset: 0x2dc, Size: 4]
	int MatchStrategyLabel;//[Offset: 0x2e0, Size: 4]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x2e4, Size: 12]
	int LandId;//[Offset: 0x2f0, Size: 4]
	int FollowType;//[Offset: 0x2f4, Size: 4]
	uint64 FollowUID;//[Offset: 0x2f8, Size: 8]
	uint32 TaskSyncToDsTs;//[Offset: 0x300, Size: 4]
	uint64 LuckmateUID;//[Offset: 0x308, Size: 8]
	FString GameAPPIDFromDS;//[Offset: 0x310, Size: 12]
	float RealHiddenScore;//[Offset: 0x31c, Size: 4]

--------------------------------
Class: GameModePlayerAliasInfo
	int AliasID;//[Offset: 0x0, Size: 4]
	FString AliasTitle;//[Offset: 0x4, Size: 12]
	FString AliasNation;//[Offset: 0x10, Size: 12]
	int AliasRank;//[Offset: 0x1c, Size: 4]
	FString AliasPartnerName;//[Offset: 0x20, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x2c, Size: 4]
	int AliasRankID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AchievementPrize
	int MedalAvatarID;//[Offset: 0x0, Size: 4]
	int NotifyTitleAvatarID;//[Offset: 0x4, Size: 4]
	int ScoreBoardAvatarID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x354, Size: 12]
	bool bMultiAdvertisement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	<byte,Texture2D*> IdTextureMap;//[Offset: 0x364, Size: 60]
	StaticMesh* StaticMesh;//[Offset: 0x3a0, Size: 4]
	FString StaticMeshPath;//[Offset: 0x3a4, Size: 12]
	FrontendHUD* FrontendHUD;//[Offset: 0x3b0, Size: 4]
	int ID;//[Offset: 0x3b4, Size: 4]
	float NetCullDistance;//[Offset: 0x3b8, Size: 4]
	void SetStaticMeshPath(FString InMeshPath);// 0x4089db8
	void SetStaticMesh(StaticMesh* InStaticMesh);// 0x38b642c
	void SetScale(Vector inScale);// 0x4089d40
	void SetId(int InputID);// 0x4089cc8
	void SetCulDistance(float CulDistance);// 0x362159c
	void RequestHttpImageByUrl(FString PicUrl);// 0x4089c0c
	void ReplaceTexture(Texture2D* Texture);// 0x4089b94
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x4089a8c
	void OnRep_MeshPath();// 0x49216cc
	void OnRep_Id();// 0x49216cc
	void OnClientLoadMesh();// 0x49216cc
	void InitImageDownloadUtil();// 0x4089a78

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x308, Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x30d, Size: 1]

--------------------------------
Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	FString HttpImgPath;//[Offset: 0xc, Size: 12]
	Vector Loc;//[Offset: 0x18, Size: 12]
	Rotator Rot;//[Offset: 0x24, Size: 12]
	Vector Scale;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	int CulDistance;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MissionBoardConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	float Progress;//[Offset: 0x30, Size: 4]
	FString CountOrTime;//[Offset: 0x34, Size: 12]
	int TipId;//[Offset: 0x40, Size: 4]

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x20c, Size: 12]
	byte BornIslandGroupType;//[Offset: 0x218, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x21c, Size: 208]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x2ec, Size: 60]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x328, Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 1]
	FString[] AreaIDList;//[Offset: 0x338, Size: 12]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x344, Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x350, Size: 12]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x35c, Size: 12]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x368, Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x3a4, Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x3c4, Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x3c8, Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x3cc, Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x408, Size: 60]
	Actor*[] BornIslandItems;//[Offset: 0x444, Size: 12]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x450, Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45e, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x460, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x468, Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x4b0, Size: 12]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x4c8, Size: 12]
	FString CookedBandFilePath;//[Offset: 0x510, Size: 12]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x55c, Size: 12]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x568, Size: 60]
	int DSSwitchSyncLoadId;//[Offset: 0x5a4, Size: 4]
	bool bUseDynamicSpotConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	DynamicSpotConfig[] DynamicSpotConfigs;//[Offset: 0x5ac, Size: 12]
	bool bEnablePreCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	int RandomSpotCountPerTick;//[Offset: 0x5f8, Size: 4]
	delegate PreCalculateCompleted;//[Offset: 0x638, Size: 12]
	bool bCheckPreCalculateComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	bool bEnablePrimeItemCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	PrimeItemCircleConfig[] PrimeItemCircleConfigs;//[Offset: 0x648, Size: 12]
	<Vector,UAESpotGroupObject*> SpotGroupObjectsMapByLoc;//[Offset: 0x678, Size: 60]
	bool bRemovableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	int RemoveGeneratedItemPerTick;//[Offset: 0x730, Size: 4]
	int RemoveDropGroundItemPerTick;//[Offset: 0x734, Size: 4]
	bool bAddHouseActorSerializeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	void WriteItemSpotStatisticsDatas();// 0x40741fc
	void WriteItemClassStatisticsDatas_V15();// 0x34f4004
	void WriteItemClassStatisticsDatas();// 0x40741e8
	void WriteGroupStatisticsDatas();// 0x40741d4
	void WriteBuildingStatisticsDatas();// 0x40741c0
	void WriteAreaItemStatisticsDatas();// 0x40741ac
	void WriteAllStatisticsDatasToLog();// 0x350de6c
	void WriteAllStatisticsDatas();// 0x37839ac
	void SetRandomSeed(int Seed);// 0x36b3b78
	void SetCatetoryRate(<FString,float> Rates);// 0x4074000
	bool RemoveSpotInfo(bool bFirstEnterState);// 0x4073f78
	void RemoveItemOnTick();// 0x4073f64
	bool RemoveDropGround(bool bFirstEnterState);// 0x4073edc
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x4073df8
	void RegisterBornIslandItem(Actor* Item);// 0x39c6f24
	UAEDataTable* ReadItemGenerateTable(FString TablePath);// 0x4073c98
	void ReAddAllSpot();// 0x4073c84
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x4073acc
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x40739b4
	void RandomBornIslandGroups();// 0x350db34
	void OnAsyncLoadItemClassFinish(class Actor ActorClassPtr, ItemGenerateSpawnClass SpawnClass);// 0x4073760
	void LuaCustomFunctionAfterGenerate(out ItemGenerateSpawnClass SpawnClass, Actor* ItemActor);// 0x4073618
	bool LuaAddRandomItemClassArray(ItemGenerateSpawnClass SpawnClass);// 0x40734f8
	void LoadItemGenerateTable();// 0x36bd764
	bool IsCatetoryEnabled();// 0x40734d0
	void InitCatetorys();// 0x40734bc
	void InitCategoryEx();// 0x40734a8
	Vector[] GMTrackGroundCheck(class Object CheckClass, float FloatUp, float FloatDown, float SinkUp, float SinkTop, bool bCheckBounds);// 0x4073234
	bool GMGenerateAllSpot(FString ItemPath);// 0x40730d4
	void GMEnableRefreshAllSpotWithSeed(int Seed);// 0x36b3b78
	FString[] GetSpotTags();// 0x4072f78
	Vector[] GetSpotLocsByTag(FString ExTag);// 0x4072e34
	int GetSpotLocInPolygon(Vector[] Anchors, out Vector[] OutLocs, int RandomNum);// 0x4072bf4
	int GetSpotLocInCircle(Vector Center, int Radius, out Vector[] OutLocs, int RandomNum);// 0x4072a50
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x4072928
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, ItemSpotSceneComponent* SpotComponent);// 0x4072648
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4050710
	int GetItemDefineID(class Object PickUpClass);// 0x49216cc
	float GetCatetoryRate(FString Catetory);// 0x4072580
	void GenerateSpotOnTick(float DeltaTime);// 0x34cc880
	void GenerateNewRandomSeed();// 0x34f4004
	Vector FindASpawnLoc(World* InWorld, const Vector TraceStart);// 0x40724a8
	void EnableRemoveItem();// 0x4072494
	void EnableRefreshAllSpot();// 0x4072480
	void EnablePrimeItemPolygon(Vector[] Anchors, int PrimeConfigIndex);// 0x40722e0
	void EnablePrimeItemCircle(Vector Center, int Radius, int PrimeConfigIndex);// 0x40721e4
	void EnableDynamicSpotConfigByIndex(int DynamicIndex);// 0x407216c
	void DoPickUp(int ItemSpotDataIndex, FString Value, FString Category);// 0x4071fe0
	void DeleteBornIslandItems();// 0x4071fcc
	bool CheckShouldGenerateItem(int ItemId);// 0x4071f44
	void CheckRecoverItems();// 0x4071f30
	bool CheckInPolygon(out const Vector Pos, out const Vector[] Anchors);// 0x4071e08
	bool CheckInCircle(out const Vector Pos, out const Vector Center, out int Radius);// 0x4071cd0
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x4071b9c
	void AddDropGround(Actor* InActor);// 0x4071b24

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0x14c, Size: 4]
	FString ItemTableName;//[Offset: 0x150, Size: 12]
	FString[] ItemSpawnTableList;//[Offset: 0x15c, Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0x168, Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x170, Size: 60]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x1ac, Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x1b8, Size: 60]
	FString CookedFilePath;//[Offset: 0x1f4, Size: 12]
	FString[] CookedFileAddPathArray;//[Offset: 0x200, Size: 12]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x34cc800
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x35a0e54
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x35a0fd4
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4050710
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x4050644
	void GenerateSpots();// 0x35b345c
	void GenerateSpotOnTick(float DeltaTime);// 0x34cc880
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x40503f4
	void CheckTileLevelsVisible();// 0x40503e0

--------------------------------
Class: ItemActorComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: LuaActorComponent.ActorComponent.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x100, Size: 60]
	FString LuaFilePath;//[Offset: 0x13c, Size: 12]
	void UnRegistLuaTick();// 0x76d6634
	void RegistLuaTick(float TickInterval);// 0x76d6a50

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x2ad, Size: 1]
	int ID;//[Offset: 0x2b0, Size: 4]
	int WorldCompositionID;//[Offset: 0x2b4, Size: 4]
	float HalfHeight;//[Offset: 0x2b8, Size: 4]
	int SpotProbability;//[Offset: 0x2bc, Size: 4]
	float LineOffsetZ;//[Offset: 0x2c0, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 1]
	void SetSpotValid(bool Valid);// 0x4089364
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x4089070
	bool IsSpotValid();// 0x4089040
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4088e74
	bool GenerateSpot();// 0x3a45d94
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x4088cfc

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 12]
	int Weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x4, Size: 4]
	FString ItemPath;//[Offset: 0x8, Size: 12]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString MetaData;//[Offset: 0x18, Size: 12]
	FString ItemValue;//[Offset: 0x24, Size: 12]
	FString ItemCategory;//[Offset: 0x30, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x40, Size: 12]
	Vector SpotGroupLoc;//[Offset: 0x4c, Size: 12]
	Rotator SpotRotator;//[Offset: 0x58, Size: 12]
	int SpotPercent;//[Offset: 0x64, Size: 4]
	FString SpotDefaultTag;//[Offset: 0x6c, Size: 12]
	Actor* HostActor;//[Offset: 0x80, Size: 4]
	Actor* AttachedActor;//[Offset: 0x84, Size: 4]
	int SpotIndex;//[Offset: 0x9c, Size: 4]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	Vector RelativeLoc;//[Offset: 0xa4, Size: 12]

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c, Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88, Size: 60]
	AreaItemStatisticsData[] AreaItemStatisticsData;//[Offset: 0xc4, Size: 12]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllSpotCount;//[Offset: 0x10, Size: 4]
	int AllValidSpotCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4, Size: 12]
	float BuildingLocationX;//[Offset: 0x10, Size: 4]
	float BuildingLocationY;//[Offset: 0x14, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c, Size: 4]
	int AllSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidSpotCount;//[Offset: 0x24, Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28, Size: 60]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18, Size: 12]
	int ItemTogetherCount;//[Offset: 0x24, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: AreaItemStatisticsData.TableRowBase
	FString ItemName;//[Offset: 0x4, Size: 12]
	int UID;//[Offset: 0x10, Size: 4]
	int ItemId;//[Offset: 0x14, Size: 4]
	int GroupType;//[Offset: 0x18, Size: 4]
	int SpotType;//[Offset: 0x1c, Size: 4]
	FString AreaName;//[Offset: 0x20, Size: 12]
	Vector Location;//[Offset: 0x2c, Size: 12]
	float X;//[Offset: 0x38, Size: 4]
	float Y;//[Offset: 0x3c, Size: 4]
	int GameTime;//[Offset: 0x40, Size: 4]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18, Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ItemRegionCircle
	Vector Center;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float RadiusSquared2D;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ExtraItemSpawn
	int SpawnPercent;//[Offset: 0x0, Size: 4]
	FString SpawnItemValue;//[Offset: 0x4, Size: 12]
	FString SpawnItemCategory;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x4, Size: 12]
	FString ItemCategory;//[Offset: 0x10, Size: 12]
	int ItemWeight;//[Offset: 0x1c, Size: 4]
	FString ItemPath;//[Offset: 0x20, Size: 12]
	int ItemStackCount;//[Offset: 0x2c, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x30, Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x3c, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x40, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2c0, Size: 4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x2c4, Size: 12]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x2d0, Size: 12]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x4078c28
	void RepeatSpots();// 0x4078c14
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x4078b9c
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x4078a00
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x40788b0
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x407878c

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x2c8, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	byte SpotGroupType;//[Offset: 0x2ce, Size: 1]
	float RepeatGenerateItemCD;//[Offset: 0x2d0, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2d4, Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x2d8, Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x2e4, Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x2e8, Size: 60]
	Actor*[] CacheItems;//[Offset: 0x324, Size: 12]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x4079718
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x4079660
	bool GenerateSpot();// 0x3a45d94
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x407955c
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x40792ec
	int CountCacheItemValeCategory();// 0x40792c4
	void ClearCacheItems();// 0x40792b0

--------------------------------
Class: DateTime

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xa0, Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0xa8, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: AreaItemsLimitEdit
	int AreaX;//[Offset: 0x0, Size: 4]
	int AreaY;//[Offset: 0x4, Size: 4]
	GenerateItemLimit[] ItemsMaxLimitEdit;//[Offset: 0x8, Size: 12]
	GenerateItemLimit[] ItemsMinLimitEdit;//[Offset: 0x14, Size: 12]

--------------------------------
Class: GenerateItemLimit
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AreaItemsLimit
	RegionID RegionID;//[Offset: 0x0, Size: 12]
	bool IsBeginGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool IsCheckRecoverItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	Vector[] AvailablePosi;//[Offset: 0x10, Size: 12]
	<int,AreaItemsNum> ItemsMaxLimit;//[Offset: 0x1c, Size: 60]
	<int,AreaItemsNum> ItemsMinLimit;//[Offset: 0x58, Size: 60]

--------------------------------
Class: RegionID

--------------------------------
Class: AreaItemsNum
	int LimitNum;//[Offset: 0x0, Size: 4]
	int CurNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: DynamicSpotConfig
	FString Comment;//[Offset: 0x0, Size: 12]
	bool bDefaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	FString DynamicSpotPath;//[Offset: 0x10, Size: 12]
	CustomSpotConfig CustomSpotConfig;//[Offset: 0x1c, Size: 28]
	SpotGroupProperty[] SpotGroupProperties;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CustomSpotConfig
	bool bGenerateAtBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int NeedGroupMin;//[Offset: 0x4, Size: 4]
	int NeedGroupMax;//[Offset: 0x8, Size: 4]
	bool bSpotPerGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int NeedSpotPerGroupMin;//[Offset: 0x10, Size: 4]
	int NeedSpotPerGroupMax;//[Offset: 0x14, Size: 4]
	bool bUseCookedRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOverrideNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]

--------------------------------
Class: PrimeItemCircleConfig
	SpotGroupProperty[] PrimeItemCircleProperties;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UAESpotGroupObject.Object
	Object* Host;//[Offset: 0x58, Size: 4]

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	bool bCanBackupVehicleSpotDatas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x210, Size: 12]
	byte RegionType;//[Offset: 0x21c, Size: 1]
	BackupVehicleSpotData[] BackupVehicleSpotDatas;//[Offset: 0x220, Size: 12]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x22c, Size: 12]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x238, Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x248, Size: 60]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x284, Size: 60]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x2c0, Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x2fc, Size: 72]
	UAEDataTable* VehicleDataTable;//[Offset: 0x344, Size: 4]
	bool bRemovableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	<VehicleSpotObject*> PauseVehicleSpotObjectSet;//[Offset: 0x358, Size: 60]
	Actor*[] GeneratedActorArray;//[Offset: 0x394, Size: 12]
	delegate OnVehicleGeneratedDelegate;//[Offset: 0x3a4, Size: 12]
	delegate OnVehicleGenerateEndDelegate;//[Offset: 0x3b0, Size: 12]
	void WriteVehicleSpotStatisticsFromSpotFile();// 0x34f4004
	void WriteVehicleSpotStatisticsDatas_V15();// 0x34f4004
	void WriteVehicleSpotStatisticsDatas();// 0x34f4004
	void WriteVehicleClassStatisticsDatas_V15();// 0x34f4004
	void WriteVehicleClassStatisticsDatas();// 0x34f4004
	void WriteAllVehicleStatisticsDatasToLog();// 0x34f4004
	void WriteAllVehicleStatisticsDatas_V15();// 0x34f4004
	void WriteAllVehicleStatisticsDatas();// 0x34f4004
	void SetAllVehicleNumRate(<FString,float> Rates);// 0x40b8848
	void ResumeGenerate();// 0x40b8834
	void RegisterVehicleGenerateSpawnData(out const VehicleGenerateSpawnData Data);// 0x40b872c
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x35a0fd4
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x40b8558
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x40b8384
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x40b81b0
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x40b7fdc
	void RandomGroups();// 0x350b450
	void PauseGenerate();// 0x40b7fc8
	void LoadVehicleGenerateTable();// 0x49216cc
	bool GMGenerateAllVehicleSpot(FString VehiclePath);// 0x40b7e68
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoWithCategory(out VehicleSpotProperty SpotProperty, FString Category);// 0x40b7afc
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType, FString InCategory);// 0x40b78e8
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out const VehicleSpotProperty SpotProperty, FString InCategory);// 0x40b7618
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x40b73d0
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x40b7200
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4050710
	int GetAlreadyGeneratedVehicleNum();// 0x40b71e4
	void GenerateSpotOnTick(float DeltaTime);// 0x34cc880
	void EndGenerate();// 0x40b71d0
	void EnableRemovableMode();// 0x40b71bc
	bool DynamicSpawnVehicleBySpotId(int ID, FString Category);// 0x40b7014
	void DeleteGroups();// 0x40b7000
	bool CanDynamicSpawnVehicle(Vector SpawnLocation, Vector TestLocationOffset, Vector TestBoxSize);// 0x40b6ee8
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x40b6c70
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x40b6a84

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x2cc, Size: 1]
	byte RegionType;//[Offset: 0x2cd, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cf, Size: 1]
	float RandomRotationMin;//[Offset: 0x2d0, Size: 4]
	float RandomRotationMax;//[Offset: 0x2d4, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x2d8, Size: 32]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x2fc, Size: 4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x40bad04
	bool GenerateSpot();// 0x3a45d94

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 12]
	FString VehiclePath;//[Offset: 0xc, Size: 12]
	float FuelPercent;//[Offset: 0x18, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: BackupVehicleSpotData
	int ID;//[Offset: 0x0, Size: 4]
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	byte SpotType;//[Offset: 0x5, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x8, Size: 12]
	Rotator SpotRotator;//[Offset: 0x14, Size: 12]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int FuelPercentMin;//[Offset: 0x10, Size: 4]
	int FuelPercentMax;//[Offset: 0x14, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	byte RandomType;//[Offset: 0x19, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x20, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x24, Size: 4]
	float ProbabilityPersent;//[Offset: 0x28, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int TotalCountRangeMin;//[Offset: 0x10, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 12]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x4, Size: 12]
	FString VehiclePath;//[Offset: 0x10, Size: 12]
	int VehicleWeight;//[Offset: 0x1c, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 12]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc, Size: 60]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	FString VehiclePath;//[Offset: 0x8, Size: 12]
	float VehicleLocationX;//[Offset: 0x14, Size: 4]
	float VehicleLocationY;//[Offset: 0x18, Size: 4]
	float VehicleLocationZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int AllVehicleCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleSpotObject.Object
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x58, Size: 32]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0x78, Size: 4]
	void OnVehicleGenerateEnd();// 0x40baab4

--------------------------------
Class: SeasonStatueData
	FString Name;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	FString Nation;//[Offset: 0x30, Size: 12]
	int AGender;//[Offset: 0x3c, Size: 4]
	int Head;//[Offset: 0x40, Size: 4]
	int hair;//[Offset: 0x44, Size: 4]
	int WeaponId;//[Offset: 0x48, Size: 4]
	int[] AvatarList;//[Offset: 0x4c, Size: 12]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x58, Size: 12]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0, Size: 12]
	FString MatPath;//[Offset: 0xc, Size: 12]
	FString TeamFlag;//[Offset: 0x18, Size: 12]
	FString TeamName;//[Offset: 0x24, Size: 12]
	Vector Loc;//[Offset: 0x30, Size: 12]
	Rotator Rot;//[Offset: 0x3c, Size: 12]
	Vector Scale;//[Offset: 0x48, Size: 12]

--------------------------------
Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0, Size: 12]
	float AttrValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 8]
	FString CorpsName;//[Offset: 0x8, Size: 12]
	int Icon;//[Offset: 0x14, Size: 4]
	int SegmentLevel;//[Offset: 0x18, Size: 4]

--------------------------------
Class: VehicleReportEntry
	uint32 VehicleID;//[Offset: 0x0, Size: 4]
	int VehicleShapeType;//[Offset: 0x4, Size: 4]
	bool IsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float FirstAttackedTime;//[Offset: 0xc, Size: 4]
	float LastAttackedTime;//[Offset: 0x10, Size: 4]
	bool Drived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainTeamCount;//[Offset: 0xc, Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x10, Size: 4]
	float PlaneDirectionX;//[Offset: 0x14, Size: 4]
	float PlaneDirectionY;//[Offset: 0x18, Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x1c, Size: 60]
	<FString,float> PlayersOnlineTime;//[Offset: 0x58, Size: 60]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x94, Size: 12]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 12]
	int CorpsHeadIcon;//[Offset: 0xc, Size: 4]
	int KilledNum;//[Offset: 0x10, Size: 4]
	int SegmentLevel;//[Offset: 0x14, Size: 4]
	int RealtimeRank;//[Offset: 0x18, Size: 4]
	int DefeatPlayerNum;//[Offset: 0x1c, Size: 4]
	float TotalDamage;//[Offset: 0x20, Size: 4]
	float SurvivalTime;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BattleData
	int WatcherNum;//[Offset: 0x0, Size: 4]
	int CircleNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModeParams
	FName CurrentGameModeState;//[Offset: 0x0, Size: 8]
	int MaxKillTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DSAIDropInfo
	uint64 BattleID;//[Offset: 0x0, Size: 8]
	int nts;//[Offset: 0x8, Size: 4]
	DSAIDropItem[] ais;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DSAIDropItem
	uint64 UID;//[Offset: 0x0, Size: 8]
	int Time;//[Offset: 0x8, Size: 4]
	int8 hlv;//[Offset: 0xc, Size: 1]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	bool IsForcedNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	float surviveTime;//[Offset: 0x404, Size: 4]
	float surviveTimeFromPlane;//[Offset: 0x408, Size: 4]
	float Pronetime;//[Offset: 0x40c, Size: 4]
	int MovingCount;//[Offset: 0x418, Size: 4]
	float marchDistance;//[Offset: 0x41c, Size: 4]
	float travelDistance;//[Offset: 0x420, Size: 4]
	float DriveDistance;//[Offset: 0x424, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x428, Size: 4]
	int destroyVehicleNum;//[Offset: 0x42c, Size: 4]
	int rescueTimes;//[Offset: 0x430, Size: 4]
	uint64[] RescueTeammatesList;//[Offset: 0x434, Size: 12]
	int NormalItemsNum;//[Offset: 0x440, Size: 4]
	int SeniorItemsNum;//[Offset: 0x444, Size: 4]
	int GVMemberID;//[Offset: 0x448, Size: 4]
	FName PlayerType;//[Offset: 0x450, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x458, Size: 8]
	uint32 PlayerKey;//[Offset: 0x460, Size: 4]
	FString PlayerUID;//[Offset: 0x464, Size: 12]
	FString MLAIStringUID;//[Offset: 0x470, Size: 12]
	bool bPSEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	FString iconUrl;//[Offset: 0x480, Size: 12]
	int gender;//[Offset: 0x48c, Size: 4]
	int PlayerLevel;//[Offset: 0x490, Size: 4]
	int SegmentLevel;//[Offset: 0x494, Size: 4]
	int AceImprintShowId;//[Offset: 0x498, Size: 4]
	int AceImprintBaseId;//[Offset: 0x49c, Size: 4]
	int AvatarBoxId;//[Offset: 0x4a0, Size: 4]
	int planeAvatarId;//[Offset: 0x4a4, Size: 4]
	int CampID;//[Offset: 0x4a8, Size: 4]
	int resID;//[Offset: 0x4ac, Size: 4]
	uint64 UID;//[Offset: 0x4b0, Size: 8]
	uint64 MLAIDisplayUID;//[Offset: 0x4b8, Size: 8]
	FString OpenID;//[Offset: 0x4c0, Size: 12]
	int ZoneID;//[Offset: 0x4cc, Size: 4]
	FString Nation;//[Offset: 0x4d0, Size: 12]
	int TeamID;//[Offset: 0x4dc, Size: 4]
	int64 IdxInTeam;//[Offset: 0x4e0, Size: 8]
	uint64 PreTeamID;//[Offset: 0x4e8, Size: 8]
	int PreTeamChatState;//[Offset: 0x4f0, Size: 4]
	int PlayerBornPointID;//[Offset: 0x4f4, Size: 4]
	int Kills;//[Offset: 0x4f8, Size: 4]
	int KillsBeforeDie;//[Offset: 0x4fc, Size: 4]
	int Knockouts;//[Offset: 0x500, Size: 4]
	int AIKills;//[Offset: 0x504, Size: 4]
	int DeathsCount;//[Offset: 0x508, Size: 4]
	int MlAIDeliverNum;//[Offset: 0x510, Size: 4]
	int OriginalMlAIDeliverNum;//[Offset: 0x514, Size: 4]
	int Assists;//[Offset: 0x518, Size: 4]
	uint64[] AssistTeammatesList;//[Offset: 0x51c, Size: 12]
	int[] OvertimeAssistsTime;//[Offset: 0x564, Size: 12]
	byte PlatformGender;//[Offset: 0x570, Size: 1]
	int MatchStrategyLabel;//[Offset: 0x574, Size: 4]
	int MatchLabel;//[Offset: 0x578, Size: 4]
	uint32 Killer;//[Offset: 0x57c, Size: 4]
	uint32 KillerIGPlayerKey;//[Offset: 0x580, Size: 4]
	FString BeKilledOpenID;//[Offset: 0x584, Size: 12]
	FString KillerName;//[Offset: 0x590, Size: 12]
	uint32 KillerType;//[Offset: 0x59c, Size: 4]
	int KillerWeaponID;//[Offset: 0x5a0, Size: 4]
	uint32 KillerDeliveryType;//[Offset: 0x5a4, Size: 4]
	uint32 DeadCircleIndex;//[Offset: 0x5a8, Size: 4]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x5b0, Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x5b8, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x5bc, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x5c0, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x5c4, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x5c8, Size: 4]
	int HeadShotNum;//[Offset: 0x5cc, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x5d0, Size: 4]
	int KillNumByGrende;//[Offset: 0x5d4, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x5d8, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x5dc, Size: 4]
	int UseFlashGrenadeNum;//[Offset: 0x5e0, Size: 4]
	int UseBurnGrenadeNum;//[Offset: 0x5e4, Size: 4]
	int MaxKillDistance;//[Offset: 0x5e8, Size: 4]
	int HealTimes;//[Offset: 0x5ec, Size: 4]
	float DamageAmount;//[Offset: 0x5f0, Size: 4]
	float RealPlayerDamageAmount;//[Offset: 0x5f4, Size: 4]
	int MeleeKillTimes;//[Offset: 0x5f8, Size: 4]
	float MeleeDamageAmount;//[Offset: 0x5fc, Size: 4]
	float RangedDamagedAmount;//[Offset: 0x600, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x604, Size: 4]
	float HealAmount;//[Offset: 0x608, Size: 4]
	FString[] KillFlow;//[Offset: 0x60c, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x618, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x624, Size: 12]
	float InDamageAmount;//[Offset: 0x630, Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x640, Size: 12]
	int PickUpItemTimes;//[Offset: 0x64c, Size: 4]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x654, Size: 60]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x690, Size: 72]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x6dc, Size: 60]
	GameModeLikeResultData[] Like;//[Offset: 0x718, Size: 12]
	uint32 Switch;//[Offset: 0x724, Size: 4]
	uint32[] Self;//[Offset: 0x728, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x734, Size: 12]
	UseItemFlow[] UseItemFlow;//[Offset: 0x740, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x74c, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x758, Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x764, Size: 12]
	<int,int> TLog_BulletCount;//[Offset: 0x770, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x7ac, Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x7b8, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x7bc, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x7c8, Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x7cc, Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x7d0, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x7d4, Size: 4]
	int[] BuildFlow;//[Offset: 0x7d8, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x7e4, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x7f0, Size: 4]
	float HitShelterDamage;//[Offset: 0x7f4, Size: 4]
	Vector LandLocation;//[Offset: 0x7f8, Size: 12]
	Vector ParachuteLocation;//[Offset: 0x804, Size: 12]
	int LandTime;//[Offset: 0x810, Size: 4]
	Vector DeadLocation;//[Offset: 0x814, Size: 12]
	FString DeadDamangeType;//[Offset: 0x820, Size: 12]
	int PveDeadAttacker;//[Offset: 0x82c, Size: 4]
	int PveStageId;//[Offset: 0x830, Size: 4]
	FString DeadTimeStr;//[Offset: 0x834, Size: 12]
	int NearDeathDamageType;//[Offset: 0x840, Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x844, Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	int BeDownTimes;//[Offset: 0x84c, Size: 4]
	int BeSavedTimes;//[Offset: 0x850, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x854, Size: 80]
	int PersonalRank;//[Offset: 0x8a4, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	int GamePlayingTime;//[Offset: 0x8b4, Size: 4]
	int ObserverTime;//[Offset: 0x8b8, Size: 4]
	int TouchDownAreaID;//[Offset: 0x8bc, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x8c0, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x8c4, Size: 12]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	float ReportTouchDownHeight;//[Offset: 0x8d4, Size: 4]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x8d8, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x8e4, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x8f0, Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x8fc, Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x908, Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x914, Size: 4]
	float InHelicopterTime;//[Offset: 0x918, Size: 4]
	int RevivalNum;//[Offset: 0x91c, Size: 4]
	int BeRevivedNum;//[Offset: 0x920, Size: 4]
	int KillNumInVehicle;//[Offset: 0x924, Size: 4]
	float MaxVehicleToLandHeight;//[Offset: 0x928, Size: 4]
	float MaxVehicleInAirInterval;//[Offset: 0x92c, Size: 4]
	int KillPlayerNum;//[Offset: 0x930, Size: 4]
	int KillAINum;//[Offset: 0x934, Size: 4]
	float TotalSprintDistance;//[Offset: 0x938, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x93c, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x940, Size: 4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x944, Size: 12]
	int ProneTimes;//[Offset: 0x950, Size: 4]
	int CrouchTimes;//[Offset: 0x954, Size: 4]
	int JumpTimes;//[Offset: 0x958, Size: 4]
	int KillMonsterNum;//[Offset: 0x95c, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0x960, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x99c, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x9a0, Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x9a4, Size: 60]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x9e0, Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0xa1c, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0xa20, Size: 4]
	int LightCandleNum;//[Offset: 0xa24, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xa28, Size: 60]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0xa64, Size: 12]
	float BattleStateTime;//[Offset: 0xa70, Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa74, Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0xa78, Size: 4]
	int FistKillingCount;//[Offset: 0xa7c, Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0xa80, Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0xa84, Size: 60]
	FString[] DestroyVehicleFlow;//[Offset: 0xac0, Size: 12]
	int UseHelicoperNum;//[Offset: 0xacc, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0xad0, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0xadc, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0xae8, Size: 32]
	float UseHelicoperDistance;//[Offset: 0xb08, Size: 4]
	byte CharmRankIndex;//[Offset: 0xb0c, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0xb10, Size: 60]
	int FollowState;//[Offset: 0xb4c, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0xb50, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0xb54, Size: 4]
	int KillMagicWalkAI;//[Offset: 0xb58, Size: 4]
	int SendMagicWalkAI;//[Offset: 0xb5c, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0xb60, Size: 12]
	int KillSnowManCount;//[Offset: 0xb6c, Size: 4]
	uint64 LuckmateUID;//[Offset: 0xb70, Size: 8]
	<enum,int> EventCounterMap;//[Offset: 0xb78, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0xbb4, Size: 60]
	delegate OnGenerelCountChanged;//[Offset: 0xbf8, Size: 12]
	int VeteranRecruitIndex;//[Offset: 0xc04, Size: 4]
	delegate PlayerStateTeamChanged;//[Offset: 0xc08, Size: 12]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xc14, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xc20, Size: 52]
	int MemberIdInVoiceRoom;//[Offset: 0xc54, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xc5c, Size: 48]
	int UpassShow;//[Offset: 0xc8c, Size: 4]
	int upassKeepBuy;//[Offset: 0xc90, Size: 4]
	int upassCurValue;//[Offset: 0xc94, Size: 4]
	int pass_type;//[Offset: 0xc98, Size: 4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c, Size: 1]
	TLog_Micphone MicphoneTlog;//[Offset: 0xca0, Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0xcb8, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xcbc, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xcc0, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xcc4, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xcc8, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0xccc, Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0xcd0, Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0xcd4, Size: 4]
	DamageInfo LuaNearDeathDamageInfo;//[Offset: 0xcf0, Size: 144]
	DamageInfo LuaDeathDamageInfo;//[Offset: 0xd80, Size: 144]
	FName RepPropertyCategory;//[Offset: 0xe10, Size: 8]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe40, Size: 120]
	FString RealPlayerName;//[Offset: 0xebc, Size: 12]
	void SetRankAndPersonalRank(int TempRank, int TempPersonalRank);// 0x40b0424
	void SetGVMemberIDServerCall(int memberID);// 0x40b0370
	void SetGVMemberID(int memberID);// 0x40b02f8
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess, int EventTypeId);// 0x40b01ec
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x40b00dc
	void RPC_ServerAddGeneralCount(int ID, int InCount, bool bReset);// 0x40aff84
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x40afe48
	void RPC_ChangeOnlyTeamChat(int NewPreTeamChatState);// 0x40afd94
	void ReportTaskExtInfo(int TaskId, FString ExtInfo);// 0x40afbf4
	void ReportTaskData(int TaskId, int process);// 0x40afb38
	void ReportSpecialCollection(int ItemId, int Count);// 0x40afa7c
	void ReportSecretAreaID(int SecretAreaID);// 0x40afa04
	void ReportLikeTeammate(int64 BeLikeUID, int LikeType);// 0x40af944
	void ReportLikeSwitch(int SwitchSetting);// 0x40af8cc
	void ReportLikeSelf(int LikeType);// 0x40af854
	void ReportLandLocType(int TouchDownLocType);// 0x40af7dc
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x40af710
	void ReportLandArea(int TouchDownArea);// 0x40af698
	void ReportLabelCheck(int TeammateUID, int Result);// 0x40af5dc
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x40af564
	void OnRepCampIDBP();// 0x49216cc
	void OnRep_VeteranRecruitIndex();// 0x40af550
	void OnRep_UpdateKillMonsterNum();// 0x39510b8
	void OnRep_UID();// 0x35a8da0
	void OnRep_TeamID();// 0x40af53c
	void OnRep_RescueTimesChange();// 0x3a3c488
	void OnRep_PreTeamID();// 0x40af4d0
	void OnRep_PlayerKillsChange();// 0x3950fb8
	void OnRep_PlayerKey();// 0x40af520
	void OnRep_MLAIDisplayUID();// 0x40af50c
	void OnRep_MatchLabel();// 0x34f4004
	void OnRep_CollectItemRecord();// 0x40af4f8
	void OnRep_CampID();// 0x40af4e4
	void OnRep_bOnlyPreTeamChat();// 0x40af4d0
	void OnRep_AliasInfo();// 0x40af4bc
	void OnClientVeteranRecruitIndexUpdated();// 0x3950da4
	bool IsSpecialPickItemCollectionCompleted(int ItemId);// 0x40af43c
	bool IsSpecialPickItem(int ItemId);// 0x40af3bc
	bool IsNearDeathDamageInfoValid();// 0x40af394
	bool IsItemForbidMerge(int ItemResId);// 0x40af30c
	bool IsDeathDamageInfoValid();// 0x40af2e4
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x40af200
	int GetVeteranPlayerLevel();// 0x40af1d0
	uint32 GetUserIDByMemberID(int memberID);// 0x39508ec
	FString GetUIDString();// 0x40af110
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x40af0a4
	int GetTeamId();// 0x40af088
	int GetRank();// 0x40af060
	int GetPlayerTotalShootNum();// 0x40af038
	uint32 GetPlayerKey();// 0x40af010
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x40aef2c
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x40aeec0
	enum GetMentorPlayerType();// 0x40aee90
	void ForceUpdateCampCharacterList();// 0x40aee74
	void CopyNearDeathDamageInfo();// 0x40aee60
	void CopyDeathDamageInfo();// 0x40aee4c
	void ClearTlogData();// 0x35a88fc
	void ClearKillNum();// 0x40aee30
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x40aed6c
	void AddGeneralTLogJustForDelegate(int ID, int DeltaCnt, int CurrValue);// 0x40aec6c
	void AddGeneralCount(int ID, int InCount, bool bReset);// 0x40aeb64
	void AddEventCount(byte EventID, int InCount, bool bReset);// 0x40aea5c

--------------------------------
Class: LuaPlayerState.PlayerState.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x3b8, Size: 60]
	FString LuaFilePath;//[Offset: 0x3f4, Size: 12]

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0, Size: 8]
	int Times;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	FString TimeStr;//[Offset: 0x1c, Size: 12]
	uint64 InstanceID;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0, Size: 4]
	int ThrowCount;//[Offset: 0x4, Size: 4]
	int HitOthersCount;//[Offset: 0x8, Size: 4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AIDeliveryTlogData
	uint64 UID;//[Offset: 0x0, Size: 8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: AIDeliveryInfo
	int DeliveryStartTime;//[Offset: 0x0, Size: 4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int DeliveryArrivalTime;//[Offset: 0x8, Size: 4]
	int EventTypeId;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModeLikeResultData
	uint32[] Like;//[Offset: 0x0, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeTeammateLableCheckData
	uint32 Mask;//[Offset: 0x0, Size: 4]
	uint64 UID;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: UseBuffFlow
	int BuffID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: BuildingEnterFlow
	int BuildingID;//[Offset: 0x0, Size: 4]
	int EnterCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FString TimeStr;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0, Size: 8]
	int VehicleType;//[Offset: 0x8, Size: 4]
	int AvatarID;//[Offset: 0xc, Size: 4]
	float DriveDistance;//[Offset: 0x10, Size: 4]
	float DriveTime;//[Offset: 0x14, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20, Size: 12]
	int ViceWeaponID;//[Offset: 0x2c, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30, Size: 12]
	int CloseWeaponID;//[Offset: 0x3c, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40, Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int HeadShootCount;//[Offset: 0xc, Size: 4]
	int LimbsShootCount;//[Offset: 0x10, Size: 4]
	int BodyShootCount;//[Offset: 0x14, Size: 4]
	int HandShootCount;//[Offset: 0x18, Size: 4]
	int FootShootCount;//[Offset: 0x1c, Size: 4]
	int UniqueHitCount;//[Offset: 0x20, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x24, Size: 12]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int TotalOwnTime;//[Offset: 0x34, Size: 4]
	int KillCount;//[Offset: 0x38, Size: 4]
	int KnockNumber;//[Offset: 0x3c, Size: 4]
	int[] Associations;//[Offset: 0x40, Size: 12]
	int AvatarID;//[Offset: 0x4c, Size: 4]
	int DIYPlanID;//[Offset: 0x50, Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: DestroyVehicleWheelFlow
	int AreaID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityEventReportData
	byte EventID;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_KillInfo
	int FakePlayerID;//[Offset: 0x0, Size: 4]
	int DeadTime;//[Offset: 0x4, Size: 4]
	int AILastFightTime;//[Offset: 0x8, Size: 4]
	int[] PlayerAreas;//[Offset: 0xc, Size: 12]
	int ArmorID;//[Offset: 0x18, Size: 4]
	int HelmetID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TLog_Micphone
	float TeammateMicrophoneTime;//[Offset: 0x0, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x4, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x8, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xc, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x10, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DamageInfo
	uint32 DamageType;//[Offset: 0x0, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float Distance;//[Offset: 0x8, Size: 4]
	uint32 Time;//[Offset: 0xc, Size: 4]
	uint32 DamageValue;//[Offset: 0x10, Size: 4]
	uint32 AttackerID;//[Offset: 0x14, Size: 4]
	Vector AttackerLoc;//[Offset: 0x18, Size: 12]
	uint32 AttackerBulletNumInClip;//[Offset: 0x24, Size: 4]
	uint32 AttackerSightType;//[Offset: 0x28, Size: 4]
	uint32 AttackerWeaponType;//[Offset: 0x2c, Size: 4]
	uint32 AttackerWeaponScopeID;//[Offset: 0x30, Size: 4]
	uint32 AttackerShotTimes;//[Offset: 0x34, Size: 4]
	uint64 AttackerState;//[Offset: 0x38, Size: 8]
	bool bAttackerMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	uint64 VictimID;//[Offset: 0x48, Size: 8]
	uint32 VictimType;//[Offset: 0x50, Size: 4]
	uint32 VictimDeliveryType;//[Offset: 0x54, Size: 4]
	int CircleIndex;//[Offset: 0x58, Size: 4]
	Vector VictimLoc;//[Offset: 0x5c, Size: 12]
	uint32 VictimState;//[Offset: 0x68, Size: 4]
	bool bVictimInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	int VictimVehicleType;//[Offset: 0x70, Size: 4]
	float VictimVelocity;//[Offset: 0x74, Size: 4]
	uint32 AttackerAreaID;//[Offset: 0x78, Size: 4]
	uint32 AlivePlayerNum;//[Offset: 0x7c, Size: 4]
	uint32 VictimTeamID;//[Offset: 0x80, Size: 4]
	int FloorType;//[Offset: 0x84, Size: 4]
	uint32 AttackerWeaponAvatarID;//[Offset: 0x88, Size: 4]
	uint32 AttackerVehicleShapeType;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	FString GameAppID;//[Offset: 0xc, Size: 12]
	FString OpenID;//[Offset: 0x18, Size: 12]
	uint16 AreaID;//[Offset: 0x24, Size: 2]
	int8 PlatID;//[Offset: 0x26, Size: 1]
	FString ZoneID;//[Offset: 0x28, Size: 12]
	uint64 BattleID;//[Offset: 0x38, Size: 8]
	FString UserName;//[Offset: 0x40, Size: 12]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	int8 RoleType;//[Offset: 0x58, Size: 1]
	FString PicUrl;//[Offset: 0x5c, Size: 12]
	FString GameAPPIDFromDS;//[Offset: 0x68, Size: 12]

--------------------------------
Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0, Size: 12]
	WeaponReport[] Weapons;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponReport
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]
	int AdsFireCount;//[Offset: 0x8, Size: 4]
	int HitCount;//[Offset: 0xc, Size: 4]
	int UniqueHitCount;//[Offset: 0x10, Size: 4]
	int KillCount;//[Offset: 0x14, Size: 4]
	float TotalDamage;//[Offset: 0x18, Size: 4]
	float TotalMonsterDamage;//[Offset: 0x1c, Size: 4]
	float TotalRealPlayerDamage;//[Offset: 0x20, Size: 4]
	float TotalNormalAIDamage;//[Offset: 0x24, Size: 4]
	float TotalMLAIDamage;//[Offset: 0x28, Size: 4]
	int TotalOwnTime;//[Offset: 0x2c, Size: 4]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int KnockDownCount;//[Offset: 0x34, Size: 4]
	int HeadShootCount;//[Offset: 0x38, Size: 4]
	int KillAICount;//[Offset: 0x3c, Size: 4]
	int KnockDownAICount;//[Offset: 0x40, Size: 4]
	int HeadShootAICount;//[Offset: 0x44, Size: 4]
	int HitAICount;//[Offset: 0x48, Size: 4]
	int UniqueHitAICount;//[Offset: 0x4c, Size: 4]
	int UseCount;//[Offset: 0x50, Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x54, Size: 12]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 4]
	int Distance;//[Offset: 0x4, Size: 4]
	int IsKill;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte[] PlayerStates;//[Offset: 0x14, Size: 12]
	byte HitPos;//[Offset: 0x20, Size: 1]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
	int Kill;//[Offset: 0x18, Size: 4]
	int AIKills;//[Offset: 0x1c, Size: 4]
	FString State;//[Offset: 0x20, Size: 12]
	float travelDistance;//[Offset: 0x2c, Size: 4]
	float marchDistance;//[Offset: 0x30, Size: 4]
	float DriveDistance;//[Offset: 0x34, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x38, Size: 4]
	float DamageAmount;//[Offset: 0x3c, Size: 4]
	float RealPlayerDamageAmount;//[Offset: 0x40, Size: 4]
	float HealAmount;//[Offset: 0x44, Size: 4]
	int AssistNum;//[Offset: 0x48, Size: 4]
	uint64[] AssistTeammatesList;//[Offset: 0x4c, Size: 12]
	int HeadShotNum;//[Offset: 0x58, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x5c, Size: 4]
	float surviveTime;//[Offset: 0x60, Size: 4]
	float surviveTimeFromPlane;//[Offset: 0x64, Size: 4]
	int rescueTimes;//[Offset: 0x68, Size: 4]
	uint64[] RescueTeammatesList;//[Offset: 0x6c, Size: 12]
	int DestroyVehicles;//[Offset: 0x78, Size: 4]
	FString[] KillFlow;//[Offset: 0x7c, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x88, Size: 12]
	float OutsideBlueCircleTime;//[Offset: 0x94, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x98, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0xa4, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0xa8, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0xac, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xb0, Size: 12]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0xbc, Size: 4]
	float InDamageAmount;//[Offset: 0xc0, Size: 4]
	int ProneTimes;//[Offset: 0xc4, Size: 4]
	int CrouchTimes;//[Offset: 0xc8, Size: 4]
	int JumpTimes;//[Offset: 0xcc, Size: 4]
	int KillMonsterNum;//[Offset: 0xd0, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xd4, Size: 60]
	int LightCandleNum;//[Offset: 0x110, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0x114, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x150, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x154, Size: 4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x158, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x15c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	int mainWeaponID;//[Offset: 0x164, Size: 4]
	float MaxWeaponAccurate;//[Offset: 0x168, Size: 4]
	float MaxWeaponHeadShotRate;//[Offset: 0x16c, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 4]
	int DeerBBQNum;//[Offset: 0x4, Size: 4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 4]
	int UseKFNum;//[Offset: 0xc, Size: 4]
	int UseUAVNum;//[Offset: 0x10, Size: 4]
	int KFUsingTime;//[Offset: 0x14, Size: 4]
	int UAVUsingTime;//[Offset: 0x18, Size: 4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 12]

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainingPlayerCount;//[Offset: 0xc, Size: 4]
	int TotalPlayerCount;//[Offset: 0x10, Size: 4]
	int RemainingTeamCount;//[Offset: 0x14, Size: 4]
	int TotalTeamCount;//[Offset: 0x18, Size: 4]
	float OnlineTime;//[Offset: 0x1c, Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	uint64 Killer;//[Offset: 0x28, Size: 8]
	uint64 killer_ig_uid;//[Offset: 0x30, Size: 8]
	uint64 KillerAIDisplayUID;//[Offset: 0x38, Size: 8]
	FString KillerName;//[Offset: 0x40, Size: 12]
	FString BeKilledOpenID;//[Offset: 0x4c, Size: 12]
	uint32 KillerType;//[Offset: 0x58, Size: 4]
	uint32 KillerDeliveryType;//[Offset: 0x5c, Size: 4]
	int KillerWeaponID;//[Offset: 0x60, Size: 4]
	uint32 DeadCircleIndex;//[Offset: 0x64, Size: 4]
	int ShootWeaponShotNum;//[Offset: 0x68, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x6c, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x70, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x74, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x78, Size: 4]
	int HealTimes;//[Offset: 0x7c, Size: 4]
	FString[] KillFlow;//[Offset: 0x80, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x8c, Size: 12]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x98, Size: 12]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0xa4, Size: 60]
	int PickUpItemTimes;//[Offset: 0xe0, Size: 4]
	<int,int> TLog_BulletCount;//[Offset: 0xe4, Size: 60]
	uint64 parachute_leader_uid;//[Offset: 0x120, Size: 8]
	UseItemFlow[] UseItemFlow;//[Offset: 0x128, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x134, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x140, Size: 12]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x14c, Size: 12]
	int destroyVehicleNum;//[Offset: 0x158, Size: 4]
	int is_escape;//[Offset: 0x15c, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x160, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x16c, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x178, Size: 32]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x198, Size: 12]
	GameModeLikeResultData[] Like;//[Offset: 0x1a4, Size: 12]
	uint64[] BeLiked;//[Offset: 0x1b0, Size: 12]
	uint32 Switch;//[Offset: 0x1bc, Size: 4]
	uint32[] Self;//[Offset: 0x1c0, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x1cc, Size: 12]
	Vector LandLocation;//[Offset: 0x1d8, Size: 12]
	int LandTime;//[Offset: 0x1e4, Size: 4]
	Vector ParachuteLocation;//[Offset: 0x1e8, Size: 12]
	Vector DeadLocation;//[Offset: 0x1f4, Size: 12]
	FString DeadDamangeType;//[Offset: 0x200, Size: 12]
	int PveDeadAttacker;//[Offset: 0x20c, Size: 4]
	int PveStageId;//[Offset: 0x210, Size: 4]
	FString DeadTimeStr;//[Offset: 0x214, Size: 12]
	FString logoutime;//[Offset: 0x220, Size: 12]
	float Pronetime;//[Offset: 0x22c, Size: 4]
	float BeInWaterTime;//[Offset: 0x230, Size: 4]
	float SwimmingDistance;//[Offset: 0x234, Size: 4]
	int BeDownTimes;//[Offset: 0x238, Size: 4]
	int BeSavedTimes;//[Offset: 0x23c, Size: 4]
	int PickUpAirDrops;//[Offset: 0x240, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x244, Size: 80]
	int Rank;//[Offset: 0x294, Size: 4]
	int TotalScore;//[Offset: 0x298, Size: 4]
	int ProneTimes;//[Offset: 0x29c, Size: 4]
	int CrouchTimes;//[Offset: 0x2a0, Size: 4]
	int JumpTimes;//[Offset: 0x2a4, Size: 4]
	int TouchDownAreaID;//[Offset: 0x2a8, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x2ac, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x2b0, Size: 12]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x2bc, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x2c8, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x2d4, Size: 12]
	GrenadeDamageRecord GrenadeDamageRecord;//[Offset: 0x2e0, Size: 28]
	KniveDamageRecord KniveDamageRecord;//[Offset: 0x2fc, Size: 32]
	int[] SecretAreaIDList;//[Offset: 0x31c, Size: 12]
	int KillNumInVehicle;//[Offset: 0x328, Size: 4]
	float TotalSprintDistance;//[Offset: 0x32c, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x330, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x334, Size: 4]
	int[] BuildFlow;//[Offset: 0x338, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x344, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x350, Size: 4]
	float HitShelterDamage;//[Offset: 0x354, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x358, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x364, Size: 12]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	int KillMonsterNum;//[Offset: 0x374, Size: 4]
	int LightCandleNum;//[Offset: 0x378, Size: 4]
	int KillMagicWalkAI;//[Offset: 0x37c, Size: 4]
	int SendMagicWalkAI;//[Offset: 0x380, Size: 4]
	float BattleStateTime;//[Offset: 0x384, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	<int,int> ActivityButtonCount;//[Offset: 0x38c, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x3c8, Size: 8]
	float TotalDamage;//[Offset: 0x3d0, Size: 4]
	int MeleeKillTimes;//[Offset: 0x3d4, Size: 4]
	float MeleeDamageAmount;//[Offset: 0x3d8, Size: 4]
	float RangedDamagedAmount;//[Offset: 0x3dc, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x3e0, Size: 4]
	int OpenAirDropBoxesNum;//[Offset: 0x3e4, Size: 4]
	int FollowState;//[Offset: 0x3e8, Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x3ec, Size: 12]
	int UseHelicoperNum;//[Offset: 0x3f8, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x3fc, Size: 4]
	int RevivalNum;//[Offset: 0x400, Size: 4]
	int BeRevivedNum;//[Offset: 0x404, Size: 4]
	int DrivingHelicopterTime;//[Offset: 0x408, Size: 4]
	int InHelicopterTime;//[Offset: 0x40c, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0x410, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0x414, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0x418, Size: 12]
	int KillSnowManCount;//[Offset: 0x424, Size: 4]
	<enum,int> EventCounterMap;//[Offset: 0x428, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0x464, Size: 60]
	TLog_Micphone MicphoneTlog;//[Offset: 0x4a0, Size: 24]
	int NormalItemNum;//[Offset: 0x4b8, Size: 4]
	int SeniorItemNum;//[Offset: 0x4bc, Size: 4]
	SpecialWeaponRecord[] SpecicalWeaponRecordList;//[Offset: 0x4c0, Size: 12]

--------------------------------
Class: GrenadeDamageRecord
	int HitCount;//[Offset: 0x0, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x4, Size: 12]
	GrenadeDamageRecordItem[] Grenades;//[Offset: 0x10, Size: 12]

--------------------------------
Class: GrenadeDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	int KnockNumber;//[Offset: 0x10, Size: 4]
	int AvatarID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: KniveDamageRecord
	int HeadShootCount;//[Offset: 0x0, Size: 4]
	int LimbsShootCount;//[Offset: 0x4, Size: 4]
	int BodyShootCount;//[Offset: 0x8, Size: 4]
	int HandShootCount;//[Offset: 0xc, Size: 4]
	int FootShootCount;//[Offset: 0x10, Size: 4]
	KniveDamageRecordItem[] Knives;//[Offset: 0x14, Size: 12]

--------------------------------
Class: KniveDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockNumber;//[Offset: 0xc, Size: 4]
	int AvatarID;//[Offset: 0x10, Size: 4]
	int TotalUseTime;//[Offset: 0x14, Size: 4]
	int TotalOwnTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SpecialWeaponRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: RealtimeVerifyInfo
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	int HitCountsNoAI;//[Offset: 0x10, Size: 4]
	int HeadshotCountsNoAI;//[Offset: 0x14, Size: 4]
	int ShotCounts;//[Offset: 0x18, Size: 4]
	int Kills;//[Offset: 0x1c, Size: 4]
	int PrisonBreaks;//[Offset: 0x20, Size: 4]
	int JumpMaxHeight2;//[Offset: 0x24, Size: 4]
	int SkeletonLengthCheckInvaildNum;//[Offset: 0x28, Size: 4]
	int MuzzleAndOwnerPosInVaildNum;//[Offset: 0x2c, Size: 4]
	int ImpactActorPosOffsetBigNum;//[Offset: 0x30, Size: 4]
	int TotalImpactCharacterNum;//[Offset: 0x34, Size: 4]
	int WeaponScopeHeightBigNum;//[Offset: 0x38, Size: 4]
	int WeaponScopeDisBigNum;//[Offset: 0x3c, Size: 4]
	int OwnerHeadAndMuzzleBlockNum;//[Offset: 0x40, Size: 4]
	int ImpactPointAndBulletDisBigNum;//[Offset: 0x44, Size: 4]
	int ShootVerifyInvalidNum;//[Offset: 0x48, Size: 4]
	float TotalSkeletonLengthMax;//[Offset: 0x4c, Size: 4]
	int TimeAccTimes;//[Offset: 0x50, Size: 4]
	int SpeedQuickCheck;//[Offset: 0x54, Size: 4]
	float ShootVerifyClientHitAABBCount;//[Offset: 0x58, Size: 4]
	float ShootVerifyDSAABBMissCount;//[Offset: 0x5c, Size: 4]
	float PlayerZ;//[Offset: 0x60, Size: 4]

--------------------------------
Class: HeartBeatData
	int AlivePlayerNum;//[Offset: 0x0, Size: 4]
	int AINum;//[Offset: 0x4, Size: 4]
	int MonsterNum;//[Offset: 0x8, Size: 4]
	int ConnectionNum;//[Offset: 0xc, Size: 4]
	int OnlineNum;//[Offset: 0x10, Size: 4]
	int HighPingNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BattlePlayer.Object
	uint64 UID;//[Offset: 0x20, Size: 8]
	PlayerInfoData PlayerInfoData;//[Offset: 0x28, Size: 160]
	PlayerAvatarData PlayerAvatarData;//[Offset: 0xc8, Size: 16]
	<int,WeaponDIYData> WeaponDIYData;//[Offset: 0xd8, Size: 60]
	BattleUtils* OwningBattleUtils;//[Offset: 0x114, Size: 4]
	GameModePlayerParams ExtractGameModePlayerParams();// 0x3e75f50

--------------------------------
Class: PlayerInfoData.ResponResult
	FString PlayerType;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint32 PlayerKey;//[Offset: 0x1c, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	byte PlayerGender;//[Offset: 0x21, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	int64 CampID;//[Offset: 0x28, Size: 8]
	int PlayerBornPointID;//[Offset: 0x30, Size: 4]
	GameModePlayerItem[] ItemList;//[Offset: 0x34, Size: 12]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x40, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x4c, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x58, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x64, Size: 48]
	int planeAvatarId;//[Offset: 0x94, Size: 4]
	int RolewearIndex;//[Offset: 0x98, Size: 4]

--------------------------------
Class: ResponResult
	bool bResponed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: PlayerAvatarData.ResponResult
	AvatarBackpack[] AvatarBackpackData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AvatarBackpack
	int[] WeaponAvatarList;//[Offset: 0x0, Size: 12]
	int[] VehicleAvatarList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponDIYData.ResponResult
	int WeaponId;//[Offset: 0x4, Size: 4]
	int PlanID;//[Offset: 0x8, Size: 4]
	DIYMergedTexData[] DIYData;//[Offset: 0xc, Size: 12]
	int[] MatParam;//[Offset: 0x18, Size: 12]
	int[] MirroParam;//[Offset: 0x24, Size: 12]
	int[] SlotMatParam;//[Offset: 0x30, Size: 12]

--------------------------------
Class: DIYMergedTexData
	DIYOneTexData[] TextureList;//[Offset: 0x0, Size: 12]
	int TexPathID;//[Offset: 0xc, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x10, Size: 48]
	int SlotID;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DIYOneTexData
	int TexPathID;//[Offset: 0x0, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x4, Size: 48]

--------------------------------
Class: DIYParamData
	int Direction;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	float Opacity;//[Offset: 0x8, Size: 4]
	float Rotation;//[Offset: 0xc, Size: 4]
	float ScaleX;//[Offset: 0x10, Size: 4]
	float ScaleY;//[Offset: 0x14, Size: 4]
	float OffSetX;//[Offset: 0x18, Size: 4]
	float OffSetY;//[Offset: 0x1c, Size: 4]
	float UClipX;//[Offset: 0x20, Size: 4]
	float UClipY;//[Offset: 0x24, Size: 4]
	float VClipX;//[Offset: 0x28, Size: 4]
	float VClipY;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BattleGameInfo
	uint64 GameID;//[Offset: 0x0, Size: 8]
	FString GameModeID;//[Offset: 0x8, Size: 12]
	int GameMapID;//[Offset: 0x14, Size: 4]
	int WeatherId;//[Offset: 0x18, Size: 4]
	FString WeatherName;//[Offset: 0x1c, Size: 12]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x320, Size: 1]
	uint32 AILevel;//[Offset: 0x324, Size: 4]
	bool bMLAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	uint32 MLBotType;//[Offset: 0x32c, Size: 4]

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleAIPlayer.BattlePlayer.Object
	GameModeAIPlayerParams ExtractGameModeAIPlayerParams();// 0x3e7640c

--------------------------------
Class: GameModeStateChangedParams
	FName GameModeState;//[Offset: 0x0, Size: 8]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]
	int extend;//[Offset: 0x10, Size: 4]
	int Extend2;//[Offset: 0x14, Size: 4]
	FString MsgData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: UAAssistantInfoWrapper
	enum UAType;//[Offset: 0x0, Size: 1]
	int Result;//[Offset: 0x4, Size: 4]
	FString ExtraJson;//[Offset: 0x8, Size: 12]
	FString RetsultMsg;//[Offset: 0x14, Size: 12]

--------------------------------
Class: SDKCallbackInfoWrapper
	enum CallbackType;//[Offset: 0x0, Size: 1]
	FString CallbackParameter;//[Offset: 0x4, Size: 12]
	FString ExtraJson;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0, Size: 4]
	<FString,FString> friendsInfo;//[Offset: 0x4, Size: 60]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 4]
	int Flag;//[Offset: 0x4, Size: 4]
	int ErrorCode;//[Offset: 0x8, Size: 4]
	int PlatForm;//[Offset: 0xc, Size: 4]
	FString Desc;//[Offset: 0x10, Size: 12]
	NoschatGroupInfomation noschatGroupInfo;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: NoschatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 12]
	FString MemberNum;//[Offset: 0xc, Size: 12]
	FString ChatRoomURL;//[Offset: 0x18, Size: 12]

--------------------------------
Class: DownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]
	FString StringContent;//[Offset: 0x24, Size: 12]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: SettingSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bUseRegisterDelegateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	<FString,bool> CacheRegisterProperties_Bool;//[Offset: 0x24, Size: 60]
	<FString,int> CacheRegisterProperties_Int;//[Offset: 0x60, Size: 60]
	<FString,float> CacheRegisterProperties_Float;//[Offset: 0x9c, Size: 60]
	FString CachedSaveGameName;//[Offset: 0xd8, Size: 12]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0xe4, Size: 12]
	delegate GetUserSettingsDelegate;//[Offset: 0xf0, Size: 16]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x100, Size: 4]
	SaveGame* UserSettings;//[Offset: 0x104, Size: 4]
	class Object* UserSettingsClass;//[Offset: 0x108, Size: 4]
	FString UserSettingsClassName;//[Offset: 0x10c, Size: 12]
	FString ActiveSaveGameName;//[Offset: 0x118, Size: 12]
	FString LanguageSettingsClassName;//[Offset: 0x128, Size: 12]
	FString LanguageSaveGameName;//[Offset: 0x134, Size: 12]
	<FString,bool> LanguageMap;//[Offset: 0x188, Size: 60]
	bool UpdateCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x3eed8fc
	bool SetUserSettings_String(FString PropertyName, FString Val);// 0x3eed718
	bool SetUserSettings_Int(FString PropertyName, int Value);// 0x3eed610
	bool SetUserSettings_Float(FString PropertyName, float Value);// 0x3eed508
	bool SetUserSettings_Bool(FString PropertyName, bool Value, bool IngoreSave);// 0x3eed3a8
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x3eed27c
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x3eed27c
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x3eed27c
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x3eed1d8
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x3eed114
	FString GetUserSettings_String(FString PropertyName);// 0x3eecfd0
	int GetUserSettings_Int(FString PropertyName);// 0x3eecf0c
	float GetUserSettings_Float(FString PropertyName);// 0x3eece44
	bool GetUserSettings_Bool(FString PropertyName);// 0x3eecd80
	SaveGame* GetUserSettings();// 0x3eecd58
	FString GetUserLanguageSettingsProperty_String(FString PropertyName);// 0x3eecc14
	EffectSettingMgr* GetEffectSettingMgr();// 0x3eecbec
	SaveGame* GetCustomSetting(FString InSlotName);// 0x3eecb28
	void FinishModifyUserSettings();// 0x3eecb14
	void ClearCustomSetting();// 0x3eecb00
	void CheckLocalizationLanguage();// 0x3eecaec
	bool CheckChangeWithCache(Object* Source, Property* Property, FString PropertyName);// 0x3eec8fc
	void CacheRegisterValue(Object* Source, Property* Property, FString PropertyName);// 0x3eec714
	void BeginModifyUserSettings();// 0x3eec700
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x3eec600

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 12]
	SaveGame* SaveGame;//[Offset: 0xc, Size: 4]

--------------------------------
Class: EffectSettingMgr.Object
	FString SingleLayerColorTable;//[Offset: 0x1c, Size: 12]
	FString MultiLayerColorTable;//[Offset: 0x28, Size: 12]
	void UpdateSingleLayerColor(LinearColor Color);// 0x3615f9c
	void UpdateMultiLayerColcor(FString Key, LinearColor Color);// 0x3615df8
	void SetParticleSystemColorSingleLayer(ParticleSystemComponent* ParticleSystem);// 0x3615d80
	void SetParticleSystemColorMultiLayer(ParticleSystemComponent* ParticleSystem);// 0x3615d08

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x380, Size: 12]
	delegate OnRenderQualitySettingsChanged;//[Offset: 0x38c, Size: 12]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x398, Size: 12]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x3a4, Size: 12]
	delegate OnCampRoomChanged;//[Offset: 0x3b0, Size: 12]
	delegate ScreenOrientationChangedNotify;//[Offset: 0x3bc, Size: 12]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x3c8, Size: 8]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x3d0, Size: 8]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x3d8, Size: 8]
	UserDetailSetting UserDetailSetting;//[Offset: 0x3e0, Size: 112]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47a, Size: 1]
	bool TemporaryFixedLobbyRenderSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47b, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 1]
	int iEnableRegionID;//[Offset: 0x480, Size: 4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x484, Size: 12]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x490, Size: 12]
	RenderItem[] LobbyRenderSettingsUltralHigh;//[Offset: 0x49c, Size: 12]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x4a8, Size: 12]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x4b4, Size: 12]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x4c0, Size: 12]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x4cc, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x4d8, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x4e4, Size: 12]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x4f0, Size: 12]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x4fc, Size: 12]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x508, Size: 12]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x514, Size: 12]
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x520, Size: 12]
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x52c, Size: 12]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x538, Size: 12]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x544, Size: 12]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x550, Size: 12]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x55c, Size: 12]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x568, Size: 12]
	FString[] RePairDeleteDir;//[Offset: 0x574, Size: 12]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x580, Size: 12]
	MaterialParametersStyle[] MaterialParametersStyleArray;//[Offset: 0x58c, Size: 12]
	ObjectPoolClassConfig[] ObjectPoolClassConfigs;//[Offset: 0x598, Size: 12]
	FName[] ObjectPoolIgnoringProperties;//[Offset: 0x5a4, Size: 12]
	Vector2D FOVRange;//[Offset: 0x5bc, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x5c4, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cd, Size: 1]
	float SwimRotateX;//[Offset: 0x5d0, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d4, Size: 1]
	FString[] BPGameSubsystemClassPath;//[Offset: 0x5d8, Size: 12]
	int ModeID;//[Offset: 0x5e4, Size: 4]
	FString ModType;//[Offset: 0x5e8, Size: 12]
	FString ModType2;//[Offset: 0x5f4, Size: 12]
	int MainModeID;//[Offset: 0x600, Size: 4]
	Actor* mInstanceActor;//[Offset: 0x604, Size: 4]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x620, Size: 4]
	ClientInGameReplay* ClientInGameReplay;//[Offset: 0x624, Size: 4]
	DeathPlayback* DeathPlayback;//[Offset: 0x628, Size: 4]
	CompletePlayback* CompletePlayback;//[Offset: 0x62c, Size: 4]
	ObservingReplay* ObservingReplay;//[Offset: 0x630, Size: 4]
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x634, Size: 4]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x638, Size: 4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x688, Size: 4]
	AvatarItemDownload* AssociatedAvatarItemDownload;//[Offset: 0x68c, Size: 4]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x690, Size: 12]
	float DefaultGray;//[Offset: 0x69c, Size: 4]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x49216cc
	void VoiceSDKCampRoomChanged__DelegateSignature(enum CampRoomType);// 0x49216cc
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x49216cc
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x49216cc
	void UpdateWorldCullDistanceVolumes();// 0x38c0dd0
	void SuperBattleWithPlayerName(FString IP, FString PlayerName, int PlayerKey);// 0x38c0c4c
	void SuperBattle(FString IP);// 0x38c0af4
	void ShowInstance(int IndexStart, int indexEnd, out Vector Location);// 0x38c09e8
	void SetWorldDoorCullDistance(int Distance);// 0x38c0970
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x38c07d4
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x38c0718
	void SetWaterReflectionSetting(bool bDoOpen);// 0x38c0698
	void SetUserVulkanSetting(bool Enable);// 0x38c0618
	void SetUserSetingShadowQuality(bool bShadow);// 0x38c0598
	void SetUserSetingMobilceContentSCale(float mcs);// 0x38c0520
	bool SetSoundEffectQuality(int Type);// 0x38c04a0
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x38c03f4
	void SetModeID(int InModeID);// 0x38c037c
	void SetMainModeID(int ParamId);// 0x38c0304
	void SetKillZValue(float KillZ);// 0x38c028c
	void SetHZBMobileState();// 0x34f4004
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x38c0214
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x38c006c
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x38bfec4
	void ScreenOrientationChangedDelegate__DelegateSignature(int inScreenOrientation);// 0x49216cc
	void ReSetFOVScreenSizeCullingFactor();// 0x38bfeb0
	void ReplaceAllInstance(int NumperTick, int tickTime, int typeNum, out Vector Location);// 0x38bfd5c
	void RenderQualitySettingsChanged__DelegateSignature(RenderQualitySettings RenderQualitySettings);// 0x49216cc
	void RenderForLowFPS();// 0x38bfd48
	void RemovePPVBlendableMaterial(MaterialInterface* InMaterial);// 0x38bfcd0
	void RemoveInstance(int IndexStart, int indexEnd, int tickTime);// 0x38bfbd0
	void RefuseRenderForLowFPS();// 0x38bfbbc
	void RefreshObjectPoolConfig();// 0x38bfba8
	void QuitGame();// 0x38bfb94
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x38bfa94
	void PreLoadBPGameSubsystem();// 0x38bfa80
	void OpenHDR(bool bOpen);// 0x38bfa00
	void ObjectPoolServerSwitch(bool bOn);// 0x38bf980
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x36b3b78
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x38bf96c
	bool IsViewedByReplay(const Actor* InActor);// 0x38bf8ec
	bool isUsingAssumedNameInReplay();// 0x38bf8c4
	bool IsSupportTagCulling();// 0x38bf8a8
	bool IsSupportSwitchSoundEffectQuality();// 0x38bf880
	bool IsSupportSwitchRenderLevelRuntime();// 0x38bf858
	bool IsSupportMSAA();// 0x38bf830
	bool IsSupportLDR();// 0x38bf808
	bool IsRunningOnVulkan();// 0x38bf7e0
	bool IsPVENightChangeCullDistance();// 0x38bf7b8
	bool IsPlayingObservingReplay();// 0x38bf790
	bool IsOpenMSAA();// 0x38bf768
	bool IsOpenHDROcean();// 0x38bf740
	bool IsOpenHDR();// 0x38bf718
	bool IsObjectPoolEnabledByClassName(FName ClassName);// 0x38bf698
	bool IsObjectPoolEnabled();// 0x38bf670
	bool IsIOSOneGigabyteDevice();// 0x365435c
	bool IsInTournamentMap();// 0x38bf648
	bool IsFoldingScreenDevice(float baseValue);// 0x38bf5c8
	void HideInstance(int IndexStart, int indexEnd);// 0x38bf50c
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x38bf4e4
	WonderfulPlayback* GetWonderfulPlayback();// 0x38bf4bc
	FString GetWeatherLevelName();// 0x38bf3f4
	int GetWeatherID();// 0x38bf3c4
	bool GetWaterReflectionSetting();// 0x38bf39c
	bool GetUserVulkanSetting();// 0x38bf374
	bool GetUserSetingShadowQuality();// 0x38bf34c
	int GetUserQualitySettingLevel();// 0x38bf330
	int GetSuppotMSAA();// 0x38bf314
	static FString GetSuperBattleParam();// 0x38bf25c
	int GetSoundEffectQuality();// 0x38bf234
	RenderQualitySettings GetRenderQualityLastSet();// 0x38bf1dc
	RenderQualitySettings GetRenderQualityApplying();// 0x38bf184
	ObservingReplay* GetObservingReplay();// 0x38bf15c
	FString GetModType2();// 0x38bf09c
	FString GetModType();// 0x38befdc
	int GetModeID();// 0x38befb4
	int GetMainModeID();// 0x38bef8c
	FString GetLoadWeatherName(FString InWeatherName);// 0x38bee40
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x38bed74
	bool GetIsFirstInitWaterReflectionSetting();// 0x38bed4c
	static STExtraGameInstance* GetInstance();// 0x38bed24
	int GetExactDeviceLevel();// 0x38becfc
	int GetDeviceUpdateVersionFlag();// 0x38beccc
	FString GetDeviceProfilerLevel();// 0x38bec0c
	byte GetDeviceMaxSupportSoundEffect();// 0x38bebe4
	byte GetDeviceMaxSupportLevel();// 0x38bebbc
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel);// 0x38beb3c
	int GetDeviceLimit();// 0x38beb14
	int GetDeviceLevel();// 0x3566af0
	bool GetDefaultSoundEffectQuality();// 0x38beaec
	DeathPlayback* GetDeathPlayback();// 0x38beac4
	FString GetCurrentRHI();// 0x38bea04
	CompletePlayback* GetCompletePlayback();// 0x38be9dc
	ClientInGameReplay* GetClientInGameReplay();// 0x38be9b4
	AvatarItemDownload* GetAssociatedAvatarItemDownload();// 0x38be98c
	bool GetApplyingShadowQuality();// 0x38be964
	FString GetActiveDeviceProfile();// 0x38be8a4
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x38be634
	void EnableStreamingLevelLOD(bool bEnable);// 0x38be5b4
	void EnableObjectPoolByClassName(FName ClassName, bool Enable);// 0x38be4e8
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x38be3e8
	bool DeleteSavedFiles(bool allfilesSaved);// 0x38be360
	void CreativeDelegateCreated__DelegateSignature();// 0x49216cc
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x38be29c
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x38be1d8
	void ChangeLevelFXActor(FString LevelName, bool isLoad);// 0x38be0d0
	void ChangeCullDistanceVolume(bool UpdateCulldisImmediate);// 0x38be050
	void bHideGroundLevels(bool Disable);// 0x38bdfd0
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x38bdf50
	void AutoActiveUltralHighRenderItems();// 0x38bdf3c
	void AutoActiveLDR();// 0x38bdf28
	void AttachCameraViewToCharacter(STExtraBaseCharacter* Character);// 0x38bdeb0
	void AddOrUpdatePPVBlendableMaterial(MaterialInterface* InMaterial, float InWeight);// 0x38bddf4
	void AddInstance(int NumperTick, int tickTime, int typeNum, out Vector Location);// 0x38bdca0
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x38bdb90
	void ActiveStyle_PP(byte Level);// 0x38bdb10
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x38bda00
	void ActiveStyle(byte Level);// 0x38bd980
	void ActiveNightVision(bool bSet);// 0x38bd900
	void ActiveMSAA(bool bOpenMSAA, int MSAAValue);// 0x38bd838
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x38bd6d4

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x1d8, Size: 264]
	delegate EnginePreTick;//[Offset: 0x2e0, Size: 12]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x330, Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x338, Size: 4]
	bool bStandAloneFromLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	delegate OnPreBattleResult;//[Offset: 0x358, Size: 12]
	FString[] HighWeatherNames;//[Offset: 0x36c, Size: 12]
	int HighWeatherMinRenderQuality;//[Offset: 0x378, Size: 4]
	int HighWeatherMaxRenderQuality;//[Offset: 0x37c, Size: 4]
	void SetLuaStateWrapper(LuaStateWrapper* TLuaStateWrapper);// 0x3bcd264
	void OpenAssetLoadLog();// 0x34f4004
	void OnPreBattleResult__DelegateSignature();// 0x49216cc
	void LuaLeakDetect();// 0x3bcd250
	void LuaDoString(FString LuaString);// 0x3bcd194
	float GetWeatherTime();// 0x3bcd164
	FString GetWeatherLevelName();// 0x38bf3f4
	int GetWeatherID();// 0x38bf3c4
	LuaStateWrapper* GetLuaStateWrapper();// 0x35f6aac
	FString GetLoadWeatherName(FString InWeatherName);// 0x38bee40
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x38bed74
	FString GetGameID();// 0x3bcd098
	int GetDeviceLevel();// 0x3566af0
	UAEDataTable* GetDataTable_Mod(FString tableName);// 0x3bccfd4
	UAEDataTable* GetDataTable(FString tableName);// 0x3bccf10
	FrontendHUD* GetAssociatedFrontendHUD();// 0x3bccee8
	void CloseAssetLoadLog();// 0x34f4004

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 12]
	uint64 RoleID;//[Offset: 0x10, Size: 8]
	FString GameSvrId;//[Offset: 0x18, Size: 12]
	FString GameAppID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	uint64 GameID;//[Offset: 0x48, Size: 8]
	FString BattleServerIP;//[Offset: 0x50, Size: 12]
	uint32 BattleServerPort;//[Offset: 0x5c, Size: 4]
	FString UserName;//[Offset: 0x60, Size: 12]
	FString PicUrl;//[Offset: 0x6c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x78, Size: 4]
	int[] MrpcsData;//[Offset: 0x80, Size: 12]
	<int,FString> AdvConfig;//[Offset: 0x90, Size: 60]
	<FString,Texture2D*> AdvTextureList;//[Offset: 0xcc, Size: 60]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int RenderMSAAValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 4]
	int TCQualityGrade;//[Offset: 0x4, Size: 4]
	int DeviceMaxSoundEffectLevel;//[Offset: 0x8, Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0xc, Size: 4]
	int UserQualitySetting;//[Offset: 0x10, Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 4]
	int IsOpenHDR;//[Offset: 0x18, Size: 4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int UserMSAAValue;//[Offset: 0x28, Size: 4]
	float UserMCSSetting;//[Offset: 0x2c, Size: 4]
	int UserShadowSetting;//[Offset: 0x30, Size: 4]
	int UserShadowSwitch;//[Offset: 0x34, Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x38, Size: 4]
	int PUBGLimitSetting;//[Offset: 0x3c, Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x40, Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x44, Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x48, Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x4c, Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x50, Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x54, Size: 4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x58, Size: 4]
	int PUBGDeviceFPSUltimateHigh;//[Offset: 0x5c, Size: 4]
	int PUBGDeviceFPSUltimateHighTA;//[Offset: 0x60, Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x68, Size: 4]
	int UserVulkanSetting;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 12]
	SwitchesItem[] Switches;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 12]
	float Value;//[Offset: 0xc, Size: 4]
	FString DependKey;//[Offset: 0x10, Size: 12]
	float DependValue;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 12]
	float RenderValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 1]
	FString[] PostProcessParams;//[Offset: 0x4, Size: 12]
	ACESParameter ACESParams;//[Offset: 0x10, Size: 40]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MaterialParametersStyle
	FString StyleName;//[Offset: 0x0, Size: 12]
	MaterialParameterFloat[] Floats;//[Offset: 0xc, Size: 12]
	MaterialParameterVector[] Vectors;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MaterialParameterFloat
	FName Name;//[Offset: 0x0, Size: 8]
	float Value;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MaterialParameterVector
	FName Name;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x1c, Size: 12]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28, Size: 12]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x6c, Size: 12]
	void StopRecord(bool bRankFirst);// 0x3ac9458
	void StartRecord();// 0x3ac9444
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x3ac9208
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x3ac90d4
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x3ac8df8
	void BuildOutputData();// 0x3ac8de4
	void BuildContinuousKillOutputData();// 0x3ac8dd0

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	int KillNum;//[Offset: 0x8, Size: 4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte CaptureType;//[Offset: 0x1, Size: 1]
	byte ShootDamageType;//[Offset: 0x2, Size: 1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	float ShootDistance;//[Offset: 0x8, Size: 4]
	FString CauserName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte CaptureType;//[Offset: 0x9, Size: 1]
	byte ShootDamageType;//[Offset: 0xa, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ClientInGameReplay.GameReplay.Object
	bool bGWonderfulPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	int ConditionKillNums;//[Offset: 0x1bc, Size: 4]
	enum WonderfulKeepState;//[Offset: 0x1c0, Size: 1]
	bool bCanKeepReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	DeathReplayData DeathReplayData;//[Offset: 0x1c8, Size: 232]
	BattleDeathPlaybackInfo BattleDeathPlaybackInfo;//[Offset: 0x2f4, Size: 8]
	BattleWonderfulInfo BattleWonderfulInfo;//[Offset: 0x300, Size: 56]
	LobbyWonderfulInfo LobbyWonderfulInfo;//[Offset: 0x338, Size: 96]
	void SetSaveTimestamp(uint64 InCurrentTime);// 0x35d0474
	void SetGWonderfulPlaybackSwitch(bool bInSwitch);// 0x35d03f4
	void SetDeathReplayData(out const DeathReplayData ReplayData);// 0x35d032c
	void SetClientVersion(FString InAppVersion, FString InSrcVersion);// 0x35d01ec
	void OnPlayerRespawnNotify();// 0x35d01d8
	void OnKillOrPutDownMessageEvent();// 0x35d01c4
	void OnBattleResultStopRecordingNotify();// 0x35d01b0
	void MarkPlayerLastBeginInactiveTime(FString PlayerName);// 0x35d00f4
	void MarkPlayerLastBeginActiveTime(FString PlayerName);// 0x35d0038
	bool IsSwitchedOffByDevice();// 0x35d0010
	bool HaveWonderfulPlaybackData();// 0x35cffe8
	bool HaveDeathPlaybackData();// 0x35cffc0
	enum GetWonderfulKeepState();// 0x35cff80
	FString GetCompressedFileName();// 0x35cfec0
	int[] GetAllWonderfulPeriodType();// 0x35cfe00
	void EnableWonderfulPlayback(bool bEnable);// 0x35cfd80
	void EnableDeathPlayback(bool bEnable);// 0x35cfd00
	void DeleteWonderfulPeriod(int PeriodIndex);// 0x35cfc88
	void ClearWonderfulPeriod();// 0x35cfc74
	bool CheckKillNumsCondition();// 0x35cfc4c
	void AddWonderfulPeriod(int InWonderfulType, float InStartTime, float InEndTime, out const float[] InAdditionalData, int InPeriodIndex);// 0x35cfa68

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x30, Size: 4]
	class UserWidget* GMUIClass;//[Offset: 0x38, Size: 40]
	enum ReplayType;//[Offset: 0x60, Size: 1]
	delegate OnReplayReadyInitUIDelegate;//[Offset: 0x64, Size: 12]
	delegate OnReplayGotoTimeResetUIDelegate;//[Offset: 0x70, Size: 12]
	delegate OnReplayResetViewTargetDelegate;//[Offset: 0x7c, Size: 12]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0x120, Size: 4]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0x124, Size: 12]
	WeaponRecordDataForReplay[] RecordWeaponInfoDataArray;//[Offset: 0x130, Size: 12]
	MLAIInfoRecordData[] RecordMLAIInfoDataArray;//[Offset: 0x17c, Size: 12]
	PlayerEventInfoRecordData[] RecordPlayerEventInfoDataArray;//[Offset: 0x188, Size: 12]
	int64 ModInfoBatchMaxSize;//[Offset: 0x198, Size: 8]
	byte[] ModBinaryData;//[Offset: 0x1a0, Size: 12]
	bool StopRecordingReplay();// 0x35dc0fc
	bool StopPlay();// 0x35b2414
	bool StartRecordingReplay();// 0x35dc0b8
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x3666c24
	bool SetReplayTimeDilation(float InDilation);// 0x3666ba4
	void SetReplayStreamer(FString InReplayStreamer);// 0x3666a0c
	void SetIsGMSpectator(bool bGM);// 0x3666990
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x3666918
	void SetCanChangeViewTarget(bool bCanChange);// 0x3666898
	void ResetPlaybackData();// 0x3666884
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x366680c
	void ReplayOnWeaponChanged();// 0x36667f8
	void ReplayOnSimulatedWeaponChanged();// 0x36667e4
	void ReplayOnBulletNumChanged();// 0x36667d0
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x3666758
	bool PlayReplay();// 0x3666728
	bool PauseReplay(bool bPaused);// 0x3666698
	void LeaveFreeViewMode();// 0x3515fe8
	bool IsInRecordState();// 0x3666670
	bool IsInPlayState();// 0x3666648
	bool IsGMSpectator();// 0x366662c
	bool IsFastForwarding();// 0x3666604
	bool HaveRecordingData();// 0x36665d4
	void HandleChangeStatePC();// 0x36665c0
	STExtraBaseCharacter* GetViewCharacter();// 0x3666598
	SingleStrategyRecordFullInfo[] GetStrategyRecordArray(FString UID, int InStrategyTypeInReplay, bool bIsSort);// 0x36663c0
	FString GetSpectatorName();// 0x35fbac0
	float GetReplayRecordStartTime();// 0x3666398
	PlayerCameraManager* GetPlayerCameraManager();// 0x3666370
	float GetCurrentReplayTotalTimeInSeconds();// 0x3666348
	float GetCurrentReplayCurTimeInSeconds();// 0x3666320
	bool GetCanChangeViewTarget();// 0x36662f8
	void EnterFreeViewMode();// 0x3516310
	void CreateGMUIIfNotExists();// 0x36662e4
	void AddRecordPlayerEventInfo(FString PlayerUID, const uint32 EventType);// 0x36661e4
	void AddRecordMLAIInfo(uint32 InPlayerKey, uint64 InUID, byte InType, out const <FString,FString> InAdditionalData);// 0x3666000

--------------------------------
Class: DeathReplayData
	bool IsValidDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsForCE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	FString SelfName;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint64 PlayerUID;//[Offset: 0x20, Size: 8]
	uint64 MLAIUID;//[Offset: 0x28, Size: 8]
	int DamageType;//[Offset: 0x30, Size: 4]
	int SubType;//[Offset: 0x34, Size: 4]
	FString CauseName;//[Offset: 0x38, Size: 12]
	FString CauseActionName;//[Offset: 0x44, Size: 12]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool IsSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool bIsDeliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	int AliasID;//[Offset: 0x54, Size: 4]
	FString AliasTitle;//[Offset: 0x58, Size: 12]
	FString AliasNation;//[Offset: 0x64, Size: 12]
	int AliasRank;//[Offset: 0x70, Size: 4]
	FString AliasPartnerName;//[Offset: 0x74, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x80, Size: 4]
	int AliasRankID;//[Offset: 0x84, Size: 4]
	int SegmentLevel;//[Offset: 0x88, Size: 4]
	float KDNum;//[Offset: 0x8c, Size: 4]
	int GameCount;//[Offset: 0x90, Size: 4]
	int WinCount;//[Offset: 0x94, Size: 4]
	int TopTenCount;//[Offset: 0x98, Size: 4]
	int KillNum;//[Offset: 0x9c, Size: 4]
	float Distance;//[Offset: 0xa0, Size: 4]
	DeathReplayHitInfo OtherHitInfo;//[Offset: 0xa4, Size: 32]
	DeathReplayHitInfo SelfHitInfo;//[Offset: 0xc4, Size: 32]

--------------------------------
Class: DeathReplayHitInfo
	float Damage;//[Offset: 0x0, Size: 4]
	int HitCount;//[Offset: 0x4, Size: 4]
	int HeadShoot;//[Offset: 0x8, Size: 4]
	int LimbsShoot;//[Offset: 0xc, Size: 4]
	int BodyShoot;//[Offset: 0x10, Size: 4]
	int HandShoot;//[Offset: 0x14, Size: 4]
	int FootShoot;//[Offset: 0x18, Size: 4]
	float GunHitRate;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BattleDeathPlaybackInfo
	float DeathPlaybackStartTime;//[Offset: 0x0, Size: 4]
	float DeathPlaybackEndTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BattleWonderfulInfo
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	FString OpenID;//[Offset: 0x1c, Size: 12]
	WonderfulPeriodInfo[] WonderfulPeriodInfoArray;//[Offset: 0x28, Size: 12]

--------------------------------
Class: WonderfulPeriodInfo
	float WonderfulStartTime;//[Offset: 0x0, Size: 4]
	float WonderfulEndTime;//[Offset: 0x4, Size: 4]
	int WonderfulPeriodIndex;//[Offset: 0x8, Size: 4]
	WonderfulTypeInfo WondefulTypeInfo;//[Offset: 0xc, Size: 16]

--------------------------------
Class: WonderfulTypeInfo
	enum WondefulType;//[Offset: 0x0, Size: 1]
	float[] AdditionalData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LobbyWonderfulInfo
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	uint64 SaveTimestamp;//[Offset: 0x10, Size: 8]
	FString ModeID;//[Offset: 0x18, Size: 12]
	int SegmentLevel;//[Offset: 0x24, Size: 4]
	float TotalTime;//[Offset: 0x28, Size: 4]
	WonderfulTypeInfo[] TypeInfoArray;//[Offset: 0x2c, Size: 12]
	FString AppVersion;//[Offset: 0x38, Size: 12]
	FString SrcVersion;//[Offset: 0x44, Size: 12]
	enum ErrorCode;//[Offset: 0x50, Size: 1]
	WonderfulWeSeeInfo[] WeSeeInfoArray;//[Offset: 0x54, Size: 12]

--------------------------------
Class: WonderfulWeSeeInfo
	float StartTime;//[Offset: 0x0, Size: 4]
	float EndTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0xdb0, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xdb4, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xdbc, Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0xdf8, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xdfc, Size: 4]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0xe00, Size: 12]
	delegate OnPlayerControllerTouchEnd;//[Offset: 0xe0c, Size: 12]
	delegate OnPlayerRotationChanged;//[Offset: 0xe18, Size: 12]
	int RotationChangedBroadcastInterval;//[Offset: 0xe28, Size: 4]
	delegate OnPlayerCameraChanged;//[Offset: 0xe2c, Size: 12]
	int CameraChangedBroadcastInterval;//[Offset: 0xe3c, Size: 4]
	delegate OnAvatarInfoRep;//[Offset: 0xe40, Size: 12]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0xe8c, Size: 60]
	float MinOBRelevancyJudgeDissquared;//[Offset: 0xec8, Size: 4]
	bool bGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecc, Size: 1]
	FName FeatureActorName;//[Offset: 0xed0, Size: 8]
	ValidTouchMoveFrameConfig[] ValidTouchMoveFrameConfig;//[Offset: 0xed8, Size: 12]
	ValidTouchMoveFrameConfig CurValidTouchMoveFrameConfig;//[Offset: 0xee4, Size: 24]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0xefc, Size: 12]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0xf08, Size: 12]
	byte[] AddTouchMoveFingerArray;//[Offset: 0xf14, Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf20, Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0xf21, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xf24, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xf28, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xf2c, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xf30, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xf34, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xf38, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xf3c, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xf40, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xf44, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xf48, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xf4c, Size: 4]
	Vector2D StartPosition;//[Offset: 0xf50, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xf58, Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xf60, Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xf6c, Size: 12]
	FString FollowCandidateName;//[Offset: 0xf7c, Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xf88, Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0xfc4, Size: 12]
	Rotator PCFreeCameraStartRotation;//[Offset: 0xfd0, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0xfe0, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0x1010, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0x1011, Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0x1014, Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1018, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101a, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0x101c, Size: 12]
	LinearColor CrossHairColor;//[Offset: 0x1028, Size: 16]
	byte AutoAimType;//[Offset: 0x1038, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1040, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1041, Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1050, Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1051, Size: 1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1052, Size: 1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0x1054, Size: 12]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0x1060, Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0x106c, Size: 216]
	SensibilityConfig SensibilityConfig;//[Offset: 0x1144, Size: 236]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a8, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a9, Size: 1]
	int UseMotionControlType;//[Offset: 0x12ac, Size: 4]
	bool IsGyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b0, Size: 1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x12b4, Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0x12c0, Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x12cc, Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0x12d8, Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0x12e4, Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0x12f0, Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0x12fc, Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0x1308, Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0x1314, Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0x1320, Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0x132c, Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0x1338, Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0x1344, Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x1350, Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x135c, Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1368, Size: 12]
	delegate OnShowHideSelfMarkDelegate;//[Offset: 0x1374, Size: 12]
	delegate OnShowAllTeammatePosDelegate;//[Offset: 0x1380, Size: 12]
	delegate OnShowAliasInfoDelegate;//[Offset: 0x138c, Size: 12]
	delegate OnCongregationFlagDelegate;//[Offset: 0x1398, Size: 12]
	delegate OnTeamFollowStageChangeDelegate;//[Offset: 0x13a4, Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0x13b0, Size: 12]
	delegate OnHideFollowPanelAndBtnDelegate;//[Offset: 0x13bc, Size: 12]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x13c8, Size: 12]
	delegate OnRemindTeammateShoot;//[Offset: 0x13d4, Size: 12]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x13e0, Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0x13ec, Size: 12]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x13f8, Size: 12]
	delegate OnNightBeggan;//[Offset: 0x1404, Size: 12]
	delegate OnNightEnded;//[Offset: 0x1410, Size: 12]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x141c, Size: 12]
	delegate OnPlayerSwitchToDeadBox;//[Offset: 0x1428, Size: 12]
	delegate OnShowFollowEmoteDelegate;//[Offset: 0x1434, Size: 12]
	delegate OnShowMovableEmoteDelegate;//[Offset: 0x1440, Size: 12]
	delegate OnCoopEmoteChange;//[Offset: 0x144c, Size: 12]
	delegate OnServerStateTypeChanged;//[Offset: 0x1458, Size: 12]
	int SelectedNightRenderConfig;//[Offset: 0x1464, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x1468, Size: 12]
	delegate OnInitCollectionData;//[Offset: 0x1474, Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0x1480, Size: 12]
	delegate OnPlayerEnterArea;//[Offset: 0x148c, Size: 12]
	delegate OnPlayerKilling;//[Offset: 0x1498, Size: 12]
	delegate OnPickupItem;//[Offset: 0x14a4, Size: 12]
	delegate OnDropItem;//[Offset: 0x14b0, Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0x14bc, Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x14e8, Size: 132]
	delegate OnKillOrPutDownMessage;//[Offset: 0x156c, Size: 12]
	delegate OnStartFireEvent;//[Offset: 0x1578, Size: 12]
	delegate OnStopFireEvent;//[Offset: 0x1584, Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0x1590, Size: 12]
	delegate OnReleaseScreen;//[Offset: 0x159c, Size: 12]
	delegate OnFingerMove;//[Offset: 0x15a8, Size: 12]
	delegate OnHandleCameraModeChanged;//[Offset: 0x15b4, Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0x15c0, Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x15cc, Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0x15d8, Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0x15e4, Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x15f0, Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0x15fc, Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0x1608, Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0x1614, Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0x1620, Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x162c, Size: 12]
	delegate OnDamageToOther;//[Offset: 0x1638, Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1644, Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0x1650, Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0x165c, Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x1668, Size: 12]
	delegate OnRank;//[Offset: 0x1674, Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0x1680, Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0x168c, Size: 12]
	delegate OnRepPlayerState;//[Offset: 0x1698, Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0x16a4, Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x16b0, Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x16c0, Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0x16cc, Size: 12]
	delegate OnHideSkillPrompt;//[Offset: 0x16d8, Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x16e4, Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0x16f0, Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x16fc, Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x1708, Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x1714, Size: 12]
	delegate OnConsumableAvatarChange;//[Offset: 0x1720, Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0x172c, Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x1738, Size: 12]
	delegate OnGameStateChange;//[Offset: 0x1744, Size: 12]
	delegate OnPlayerKilledOthersPlayer;//[Offset: 0x1750, Size: 12]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x175c, Size: 12]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x1768, Size: 12]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x1774, Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x1780, Size: 12]
	delegate OnSetViewTarget;//[Offset: 0x1794, Size: 12]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x17a8, Size: 12]
	delegate OpenSequencerDelegate;//[Offset: 0x17b4, Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x17d0, Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x17d4, Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x17e0, Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x17ec, Size: 12]
	delegate OnPostTakeDamageDelegate;//[Offset: 0x17f8, Size: 12]
	delegate OnPostTakeDamageForBP;//[Offset: 0x1804, Size: 12]
	delegate OnLostConnection;//[Offset: 0x1810, Size: 12]
	delegate OnReconnected;//[Offset: 0x181c, Size: 12]
	delegate OnExitGame;//[Offset: 0x1828, Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x1834, Size: 12]
	delegate OnSpectatorToFreeView;//[Offset: 0x1848, Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1854, Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1860, Size: 12]
	delegate MoveForwarDelegate;//[Offset: 0x186c, Size: 12]
	delegate MoveRightDelegate;//[Offset: 0x1878, Size: 12]
	delegate MoveUpDelegate;//[Offset: 0x1884, Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x1890, Size: 4]
	int MaternalZombieWeight;//[Offset: 0x1894, Size: 4]
	PVSComponent* PVSComponent;//[Offset: 0x1898, Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x189c, Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x18a0, Size: 4]
	SpectatorComponent* SpectatorComponent;//[Offset: 0x18a4, Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a8, Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x1a68, Size: 12]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x1a74, Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a84, Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a85, Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a86, Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a87, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a88, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x1a8c, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1a90, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1a94, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x1a98, Size: 4]
	float GOOGLE_CameraMoveRateX;//[Offset: 0x1a9c, Size: 4]
	float GOOGLE_CameraMoveRateY;//[Offset: 0x1aa0, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1aa4, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1aa8, Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aac, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x1ab0, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1ad4, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1af8, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1b00, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1b08, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x1b2c, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x1b34, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x1b3c, Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x1b60, Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1b9c, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1ba0, Size: 4]
	float MoveCameraMaxDistanceThreshold;//[Offset: 0x1ba4, Size: 4]
	<byte,int> PlayerClothLODLevel;//[Offset: 0x1ba8, Size: 60]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x1be4, Size: 12]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bf0, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bf1, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1bf8, Size: 4]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bfc, Size: 1]
	byte CurCameraMode;//[Offset: 0x1bfd, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x1c00, Size: 12]
	FName AutoScopeAimCompName;//[Offset: 0x1c10, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1c18, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1c, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1d, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1e, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1f, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1c20, Size: 4]
	float CanMoveCDTime;//[Offset: 0x1c24, Size: 4]
	float CanSprintCDTime;//[Offset: 0x1c28, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1c2c, Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1c30, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x1c34, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c38, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1c3c, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x1c48, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x1c4c, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1c50, Size: 60]
	bool bAutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8c, Size: 1]
	bool bAutoEquipMelleeWeaponLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8d, Size: 1]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8e, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8f, Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c90, Size: 1]
	bool bMelleeWeaponAutoCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c92, Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x1c94, Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c98, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c99, Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x1c9c, Size: 8]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca4, Size: 1]
	float AccumulateYawInput;//[Offset: 0x1ca8, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x1cac, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb0, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb1, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb2, Size: 1]
	float NoRespondArea;//[Offset: 0x1cb4, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x1cb8, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cbc, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cbd, Size: 1]
	byte sprintOptType;//[Offset: 0x1cbe, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x1cc0, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x1cc4, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x1cc8, Size: 4]
	int JoystickSprintSensitity;//[Offset: 0x1ccc, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x1cd0, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd4, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x1cd5, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x1cd8, Size: 4]
	float AssistAreaHalfHeight;//[Offset: 0x1cdc, Size: 4]
	float AssistAreaRadius;//[Offset: 0x1ce0, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce4, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x1ce8, Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x1d24, Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x1d28, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x1d2c, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1d30, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x1d34, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d38, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x1d3c, Size: 4]
	byte TouchFireType;//[Offset: 0x1d40, Size: 1]
	float TestForce;//[Offset: 0x1d44, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x1d48, Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x1d54, Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d60, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d61, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d62, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d63, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x1d64, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x1d68, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x1d6c, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x1d70, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x1d74, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1d78, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d7c, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x1d80, Size: 4]
	float MinFovChangeView;//[Offset: 0x1d84, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1d88, Size: 32]
	int GameTipMsgID;//[Offset: 0x1da8, Size: 4]
	FString GameTipParam1;//[Offset: 0x1dac, Size: 12]
	FString GameTipParam2;//[Offset: 0x1db8, Size: 12]
	float AutoSprintCD;//[Offset: 0x1e00, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x1e04, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x1e40, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x1e7c, Size: 60]
	float TeamInfoForceUpdateInterval;//[Offset: 0x1ebc, Size: 4]
	float MaxDeltaYawBetweenControlAndActor;//[Offset: 0x1ec0, Size: 4]
	bool bWaistFollowingController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec4, Size: 1]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1ee0, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1fa8, Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x1fac, Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1fb0, Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1fb4, Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x2000, Size: 4]
	bool bTempDeadBoxIgnoreTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2004, Size: 1]
	FString[] ForbitPickList;//[Offset: 0x2008, Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2020, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x2024, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2028, Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2029, Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x202c, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x2030, Size: 4]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x2034, Size: 12]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2040, Size: 1]
	float FreeViewUpRate;//[Offset: 0x2044, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x2048, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x204c, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2050, Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2051, Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x2054, Size: 12]
	bool bSyncMLAIStateInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2060, Size: 1]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x2064, Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2078, Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x2079, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x207a, Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x207b, Size: 1]
	byte CurSightZoomFingerIndex;//[Offset: 0x20c4, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x20c5, Size: 1]
	byte ValidTouchMove;//[Offset: 0x2108, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x2134, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x21c0, Size: 4]
	BackpackRepActor* BackpackRepActor;//[Offset: 0x21c4, Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x21c8, Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x21cc, Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x21d0, Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x21d4, Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x21d8, Size: 4]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x21e0, Size: 12]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21f9, Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x21fa, Size: 1]
	int[] ObserveReplicateItems;//[Offset: 0x21fc, Size: 12]
	delegate OnOBPlayerItemChangedDelegate;//[Offset: 0x2208, Size: 12]
	delegate OnOBPlayerWeaponChangedDelegate;//[Offset: 0x2214, Size: 12]
	delegate OnOBPlayerBulletChangedDelegate;//[Offset: 0x2220, Size: 12]
	delegate OnViewTargetAttachedToVehicleDelegate;//[Offset: 0x222c, Size: 12]
	delegate OnViewTargetDetachedFromVehicleDelegate;//[Offset: 0x2238, Size: 12]
	BattleItemSpectatingData[] ObservedItemList;//[Offset: 0x2260, Size: 12]
	bool bIsSendingObserveReq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x226c, Size: 1]
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x22ac, Size: 12]
	delegate OnSetObserveCharacter;//[Offset: 0x22b8, Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x22c4, Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x22d0, Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x22dc, Size: 12]
	bool bIsCheckLevelStreamingReturnBeforeFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e8, Size: 1]
	bool bIsLevelLoadedSetGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e9, Size: 1]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x22ec, Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f8, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x22fc, Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x230c, Size: 4]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x2310, Size: 4]
	AIPlayerInfoInOB[] NearAIPlayerList;//[Offset: 0x2314, Size: 12]
	FString TPPFollowAIPlayerKey;//[Offset: 0x2324, Size: 12]
	<FString,AllStarReportData> AllStarReportInfoCache;//[Offset: 0x2330, Size: 60]
	ObservedData ObservedData;//[Offset: 0x2370, Size: 72]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c5, Size: 1]
	delegate OnToggleOBMapShowHide;//[Offset: 0x23cc, Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x23d8, Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x23ec, Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x23f8, Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x2404, Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x2410, Size: 12]
	delegate WeaponEquipAttachment;//[Offset: 0x241c, Size: 12]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x2428, Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x2434, Size: 12]
	delegate OnOBVehicleViewChangedDelegate;//[Offset: 0x2440, Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x245c, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x2460, Size: 4]
	bool IsSmoothlyVehicleViewSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2470, Size: 1]
	bool NeedCheckChangeToVehicleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2471, Size: 1]
	CurveVector* OBVehicleViewArmOffset;//[Offset: 0x2474, Size: 8]
	int OBVehicleViewAcceRecordsNum;//[Offset: 0x247c, Size: 4]
	class CameraShake* OnHitCameraShake;//[Offset: 0x248c, Size: 4]
	CurveVector* OBVehicleImpulseClamp;//[Offset: 0x2498, Size: 8]
	CurveFloat* OBVehicleImpulseRollClamp;//[Offset: 0x24a0, Size: 8]
	float CurrentOBVehicleViewArmLength;//[Offset: 0x24a8, Size: 4]
	float OBVehicleViewArmLengthMax;//[Offset: 0x24ac, Size: 4]
	float OBVehicleViewArmLengthMin;//[Offset: 0x24b0, Size: 4]
	Vector OBVehicleRelativeLocation;//[Offset: 0x24b4, Size: 12]
	float OBVehicleViewFOV;//[Offset: 0x24c0, Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x24c8, Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x24cc, Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24cd, Size: 1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ce, Size: 1]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x24d0, Size: 12]
	delegate OnLiveStateChanged;//[Offset: 0x24dc, Size: 12]
	int FireMode;//[Offset: 0x24e8, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ec, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ed, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ee, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ef, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x24f0, Size: 12]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x24fc, Size: 12]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2508, Size: 12]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x2514, Size: 12]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x2520, Size: 12]
	Actor*[] nowGrenadeList;//[Offset: 0x252c, Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2538, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x253c, Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x2548, Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2554, Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2560, Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x256c, Size: 12]
	delegate tirggerLandingVoiceCheckDelegate;//[Offset: 0x2578, Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2584, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x2588, Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x2594, Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a0, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x25a4, Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x25b0, Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25bc, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x25c0, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x25c4, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x25c8, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x25cc, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x25d0, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x25e0, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x25fc, Size: 20]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x2610, Size: 12]
	Actor* ThePlane;//[Offset: 0x261c, Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x2628, Size: 4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x262c, Size: 12]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x2638, Size: 12]
	delegate OnNotifyServerOpenAnyPickUpBox;//[Offset: 0x2644, Size: 12]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2650, Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x2654, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x2670, Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x2680, Size: 4]
	FString LastBreathMurder;//[Offset: 0x2688, Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2694, Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x2698, Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x26a0, Size: 4]
	FString murderName;//[Offset: 0x26a4, Size: 12]
	FString FinalMurderName;//[Offset: 0x26b0, Size: 12]
	uint64 MurderUID;//[Offset: 0x26c0, Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c8, Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c9, Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ca, Size: 1]
	bool bDisableItemOperationSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ff, Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x2710, Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x274c, Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x2790, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x2794, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x2798, Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x279c, Size: 60]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d8, Size: 1]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x28ac, Size: 4]
	AkAudioEvent* HitVehicleSoundFlesh;//[Offset: 0x28b0, Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b4, Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x28b8, Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x2900, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2904, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x2908, Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290c, Size: 1]
	enum ServerStateType;//[Offset: 0x290d, Size: 1]
	enum ClientStateType;//[Offset: 0x290e, Size: 1]
	enum GameStateMsgType;//[Offset: 0x290f, Size: 1]
	enum LastStateType;//[Offset: 0x2913, Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2917, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2918, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2919, Size: 1]
	float ObservingTime;//[Offset: 0x291c, Size: 4]
	KillerTracker* KillerCameraTracker;//[Offset: 0x2920, Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2934, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2935, Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x2944, Size: 4]
	FString DefaultHUDClassPath;//[Offset: 0x2948, Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x2968, Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x2974, Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2978, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2979, Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x297c, Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x2980, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x2984, Size: 56]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x29bc, Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x29c8, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x29cc, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x29d0, Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x2a0c, Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x2a4c, Size: 4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x2a50, Size: 12]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x2a5c, Size: 60]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x2ab0, Size: 4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x2ab4, Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x2ab8, Size: 4]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x2ae4, Size: 12]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x2af0, Size: 12]
	delegate SetCaptureIDCardStatusDelegate;//[Offset: 0x2b00, Size: 16]
	delegate OnPlayerExitGameDelegate;//[Offset: 0x2b10, Size: 12]
	delegate OnEnterVehicleDelegate;//[Offset: 0x2b2c, Size: 12]
	delegate ClientOnEnterVehicle;//[Offset: 0x2b38, Size: 12]
	delegate ClientOnLeaveVehicle;//[Offset: 0x2b44, Size: 12]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x2b50, Size: 12]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x2b5c, Size: 12]
	delegate ClientOnDeathReplayDataWhenFatalDamagedDelegate;//[Offset: 0x2b68, Size: 12]
	delegate OnViewTargetChange;//[Offset: 0x2b74, Size: 12]
	delegate OnPreViewTargetChange;//[Offset: 0x2b80, Size: 12]
	delegate OnImprisonStateChange;//[Offset: 0x2b8c, Size: 12]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b98, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b99, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x2b9c, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x2ba0, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x2bac, Size: 8]
	int IdCardMarkType;//[Offset: 0x2bb8, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc2, Size: 1]
	int VehicleControlMode;//[Offset: 0x2bc4, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc8, Size: 1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x2bcc, Size: 12]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x2bd8, Size: 12]
	float StreamingDistanceScaleFlying;//[Offset: 0x2be4, Size: 4]
	bool bClearWeaponRecordOnPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be8, Size: 1]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be9, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x2bec, Size: 12]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf8, Size: 1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x2bfc, Size: 12]
	float MoveDistanceThreshold;//[Offset: 0x2c08, Size: 4]
	float SpeedRecordTime;//[Offset: 0x2c0c, Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x2c10, Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x2c14, Size: 12]
	delegate OnChangeToWalkingDead;//[Offset: 0x2c20, Size: 12]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2c, Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x2c30, Size: 12]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x2c3c, Size: 12]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c48, Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c49, Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x2c4c, Size: 12]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x2c58, Size: 12]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x2c64, Size: 12]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x2c70, Size: 12]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x2c7c, Size: 12]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x2c88, Size: 4]
	uint32 LastKillerKey;//[Offset: 0x2c8c, Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c90, Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c91, Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9c, Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9d, Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9e, Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x2ca0, Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x2ca4, Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x2cb0, Size: 12]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x2cbc, Size: 12]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc8, Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x2ccc, Size: 12]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x2cd8, Size: 12]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x2ce4, Size: 12]
	delegate OnMemberVoiceDelegate;//[Offset: 0x2cf0, Size: 12]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x2cfc, Size: 12]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x2d08, Size: 12]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x2d14, Size: 12]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x2d20, Size: 12]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x2d2c, Size: 12]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x2d38, Size: 4]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x2d50, Size: 12]
	<byte,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x2d5c, Size: 60]
	enum CurrentWeaponFunction;//[Offset: 0x2d98, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x2d9c, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da0, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x2da4, Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x2da8, Size: 4]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db8, Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc8, Size: 1]
	double LastFlyLeapPlatfromTime;//[Offset: 0x2e08, Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4c, Size: 1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4d, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x2e50, Size: 60]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x2ea0, Size: 16]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x2eb0, Size: 16]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x2ec0, Size: 48]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef0, Size: 1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef2, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef3, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x2ef4, Size: 4]
	float ParachuteSlideReportDuration;//[Offset: 0x2efc, Size: 4]
	float ParachuteReportLocationDiffSq;//[Offset: 0x2f00, Size: 4]
	ParachuteData ParachuteData;//[Offset: 0x2f08, Size: 128]
	float TrustClientSinceEnterParachuteJump;//[Offset: 0x2f90, Size: 4]
	float ClientParachuteLandedFinishTimeMax;//[Offset: 0x2f98, Size: 4]
	VehicleMoveDragData DragData;//[Offset: 0x2fa8, Size: 24]
	float ReportSimulatedDragInterval;//[Offset: 0x2fc0, Size: 4]
	delegate OnTeammateRescueStateChanged;//[Offset: 0x2fcc, Size: 12]
	TimerHandle LocalRescueEndedTimer;//[Offset: 0x2fd8, Size: 8]
	delegate OnSwimDistanceChange;//[Offset: 0x2ff4, Size: 12]
	ScreenAppearanceActor* ScreenAppearanceMgr;//[Offset: 0x3000, Size: 4]
	bool bIsInFreeBuildState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3008, Size: 1]
	PlayerPetSpectatorComponent* PetSpectatorComp;//[Offset: 0x300c, Size: 4]
	CacheSACData[] CacheSACDataArray;//[Offset: 0x3018, Size: 12]
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x39394a0
	void ViewPlane();// 0x393948c
	void VehicleWarOpenSequencerDelegate__DelegateSignature(out const BattleOpenSequencerInfo SequencerInfo);// 0x49216cc
	void VehicleWarFireTakeDamagedEvent(Vector CauserLocation, Actor* DamageCauser, float Damage);// 0x393938c
	bool UseSharedBagSkin();// 0x393935c
	void UserDropItemOperation(ItemDefineID DefineID);// 0x39392d4
	void UseItem(int ID);// 0x393925c
	void UpdateTeammatesStreaming();// 0x3939240
	void UpdateSurfboardUI();// 0x393922c
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x39391ac
	void UpdatePoseViewPitchLimit();// 0x3939198
	void UpdatePoseState(byte PoseType);// 0x3939120
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x3939058
	void UnPossess();// 0x393903c
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x3938e9c
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x3938bec
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x3938cf4
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x3938bec
	void TriggerLandingVoiceCheckFuction(Vector posVector, float showTime);// 0x3938b30
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x3938b30
	void TPPFollowAI(FString AIPlayerKey);// 0x3523d84
	void TouchMove(Vector Loc, byte FingerIndex);// 0x3938a74
	bool TouchEnd(byte PressType);// 0x39389f4
	void TouchBegin(byte PressType);// 0x393897c
	void ToggleOBVehicleView();// 0x3938968
	void ToggleOBTPPFollowFreeView();// 0x3938954
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x39388d4
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x39387f8
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, float HealthMax, int VoiceID);// 0x39385d0
	void SyncSimulateCharacterLocation(STExtraBaseCharacter* TargetCharacter, Vector Location);// 0x393850c
	void SwitchToTeamByNumPressed();// 0x39384f8
	void SwitchToPlayerByNumPressed();// 0x39384e4
	void SwitchToDeadBox();// 0x39384d0
	void SwitchShowUI();// 0x39384bc
	void SwitchPoseStateWithTransformServer(STExtraBaseCharacter* TargetCharacter, byte PoseState, Vector Position, Rotator Rotation);// 0x3938308
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x393820c
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState, enum FailReason);// 0x39380bc
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x3937ff8
	void SwitchMouseCursorShowState();// 0x3937fe4
	void SwitchGenerateItem();// 0x3937f88
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x3937ecc
	void SwitchCameraModeByOrder();// 0x3937eb8
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x3937d5c
	void SwimDistanceDelegate__DelegateSignature(float Distance);// 0x49216cc
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x3937c54
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x3937b7c
	void StopAbsorb();// 0x3937b20
	void StartLandOnGroundAfterJumpPlane();// 0x3937b0c
	void StartGame();// 0x3937af8
	void StartFreeCamera(byte FigerIndex);// 0x3937a80
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x39379b8
	void SpawnGameFeatureActor(FString Path);// 0x39378fc
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x39377fc
	void SpawnAIPosi(int ID, int AITeamID, float PosiX, float PosiY, float PosiZ);// 0x393766c
	void SpawnAI(int Num, bool bSpawnAll);// 0x39375a8
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x3937530
	bool SkipChangeViewTarget();// 0x3937500
	void ShutDownBroadcastFatalDamage(bool IsOpen);// 0x3597804
	void ShowStringMsg(const FString Message, int MsgID, int ItemId, FString PlayerKeyString);// 0x3937298
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x3937154
	void ShowMovePath(const Vector[] Path);// 0x3937090
	void ShowGameTips(int TipsID, FString Params);// 0x3936f88
	void ShowFireBtn(bool bShow);// 0x49216cc
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x3936ec0
	void ShowAnimationButton(bool IsShow, int NewUIType);// 0x3936df0
	bool ShouldShowVoiceVisualizationForTrainingMode();// 0x3936dc0
	bool ShouldShowVoiceVisualizationForSameTeam(Pawn* Other);// 0x3936d38
	bool ShouldSendFatalDamageToClient(UAECharacter* Causer, UAECharacter* Victim);// 0x3936c6c
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x3936bec
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x3936b6c
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x3936aec
	void SetVirtualJoystickWidgetRender(enum Visible);// 0x3936a74
	void SetViewYawLimit(float YawMin, float YawMax);// 0x39369b8
	void SetViewTargetTest(Actor* NewViewTarget);// 0x3936940
	void SetViewPitchLimit(float PitchMin, float PitchMax);// 0x3936884
	void SetTouchFingerIndex(bool TouchBegin, byte FingerIndex);// 0x39367bc
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x39366ac
	void SetSTExtraBaseCharacter(STExtraBaseCharacter* InChar);// 0x3936634
	void SetSpectatorPawnLotation(out const Vector NewLocation);// 0x39365b0
	void SetSkillFingerIndex(byte FingerIndex);// 0x3936538
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x39364b8
	void SetShoulderFingerIndex(bool TouchBegin, byte FingerIndex);// 0x39363f0
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x3936328
	void SetPlayerMark(Vector Loc);// 0x393627c
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x39360bc
	void SetPlane(Actor* Plane);// 0x3936044
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x3935f30
	void SetParachuteAnimCached(byte AnimOverrideType, bool InValue);// 0x3935e6c
	void SetOBVehicleView(bool IsActive);// 0x3935dec
	void SetObservingTime(float Time);// 0x3935d74
	void SetMovable(bool IsMovable);// 0x3935cf4
	void SetLocalUnPossesTest(bool bControllerSide, bool bPawnSide);// 0x3935c24
	void SetLaunchFlyStateOnServer(enum StateType);// 0x3935bac
	void SetLaunchFlyState(enum StateType);// 0x3935b34
	void SetJoyStickScale(float JSScale);// 0x3935abc
	void SetJoyStickPtrFireMode(int FireMode);// 0x3935a44
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x3935988
	void SetJoyStickOpacityNotUpdate(float JSOpacity);// 0x3935910
	void SetJoyStickOpacity(float JSOpacity);// 0x3935898
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x3935828
	void SetJoyStickCenter(Vector2D JSCenter);// 0x39357b8
	void SetIsSnowy(bool bSnowy);// 0x3935738
	void SetIsShowBlood(bool InIsShowBlood);// 0x39356b8
	void SetIsRainy(bool bRainy);// 0x3935638
	void SetIsCacheReceiveRespawnZombie(bool isReceive);// 0x39355b8
	void SetIsBlizzard(bool bBlizzard);// 0x3935538
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x39354b0
	void SetHasResultState(bool InState);// 0x3935430
	void SetGhostValue(bool OutValue);// 0x39353b0
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x393524c
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x3935188
	void SetDisableTouchMoveInput(bool bDisable);// 0x3935108
	void SetCustomSensibility(int WeaponId, int AttrIndex, float Value);// 0x3935008
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x3934ec0
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x3934dc4
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x3934cac
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList, int WeaponSyncTicket);// 0x3934b28
	void SetCircleInfoToClient(GetCircleInfo ReConnectInfo);// 0x3934998
	void SetCaptureIDCardStatusDelegate__DelegateSignature(bool IsCapture);// 0x49216cc
	void SetCanJump(bool CanJump);// 0x3934918
	void SetCanGotoExPlane(bool bFlag);// 0x3934898
	void SetCanDropItem(bool bCanDrop);// 0x3934818
	void SetBeKickedPlayerName(FString InPlayerName);// 0x39346c0
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x39345f8
	void SetAllStarReportDataByOpenID(FString InPlayerOpenID, out AllStarReportData InReportData);// 0x39344e4
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x3934338
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x39341d0
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x393411c
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x3934068
	void ServerTriggerCharacterSkillWithID(int SkillID, bool bEnable);// 0x3933f58
	void ServerTriggerCharacterCustomEvent(byte SkillEvent, int SkillID);// 0x3933e5c
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x3933ca8
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x3933968
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x3933628
	void ServerStopFillGas(STExtraShootWeapon* TargetWeapon);// 0x3933574
	void ServerStateTypeChanged__DelegateSignature(enum ServerStateType);// 0x49216cc
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x3933478
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x39331d0
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x3932fec
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x3932ea8
	void ServerStartFillGas(STExtraShootWeapon* TargetWeapon);// 0x3932df4
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x3932cf8
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x3932c44
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte ShootType);// 0x3932b48
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x3932a04
	void ServerSetObsverLocation(const Vector locat);// 0x3932958
	void ServerSetIsFreeView(bool isFreeView);// 0x3932890
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x393277c
	void ServerSetFreeCamera(Rotator InRotation);// 0x39326d0
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x39325bc
	void ServerSetControlRotation(const Rotator NewRotation);// 0x3932510
	void ServerSendLogToLobby(FString ErrorLog);// 0x3932454
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x39322e8
	void ServerReportVehicleDrag(const VehicleMoveDragData InDragData);// 0x39321f4
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x3931f90
	void ServerRemoteDestroyAllActor();// 0x3931f78
	void ServerRemoteDestroyActor(int SingleId);// 0x3931f00
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x3931da4
	void ServerReceiveThePlane(int64 TimeStamp);// 0x3931cec
	void ServerQuitSpectating();// 0x3931c90
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x39319a4
	void ServerOpenParachute();// 0x3931948
	void ServerObserveKiller();// 0x39318ec
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x3931838
	void ServerObserveAirDropBox(int BoxId);// 0x3931784
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x3931674
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x39315c0
	void ServerJumpFromPlane();// 0x3931564
	void ServerInterruptGame();// 0x3931508
	void ServerInternalSetTeammateForbidPick(bool bIsForbid, int TLogIndex);// 0x3931440
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x393134c
	void ServerHandleMsg(enum Msg);// 0x3931298
	void ServerHandleHitDataArrayFlowOpt(STExtraShootWeapon* TargetWeapon, SACData AntiCheatData, const BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray);// 0x3931074
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x3930f28
	void ServerHandleExtraHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData, const HitTargetExtraData[] HitExtraDataArray);// 0x3930d54
	void ServerGetTotalPlayers();// 0x3930cf8
	void ServerGetPlayerAliasInfoList();// 0x3930c9c
	void ServerGetCircleInfo();// 0x3930c40
	void ServerFight();// 0x3930be4
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x3930b30
	void ServerExitFromFlyingVehicle(STExtraVehicleBase* ExitVehicle, float NewOpenParachuteHeight, float NewCanOpenParachuteHeight, float NewForceOpenParachuteHeight, float NewCloseParachuteHeight, bool bIsInSkipOpenParachuteHeight);// 0x39308ec
	void ServerExitFreeCamera();// 0x3930890
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x393072c
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x393061c
	void ServerDoPickupRevivalFlag();// 0x39305c0
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x39304a4
	void ServerControlFireBalloonMoveEx(STExtraFireBalloon* FireBalloon, float MoveUpValue, float MoveForwardValue, float MoveRightValue);// 0x3930310
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x3930214
	void ServerCMD_RPC(FString Cmd);// 0x3930120
	void ServerCMD(FString Cmd);// 0x3523d84
	void ServerClearTeammatesCache();// 0x39300c4
	void ServerChangeWeaponScheme(int Index);// 0x3930010
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x392ff5c
	void ServerChangeVehicleAvatar(const int AvatarID);// 0x392fea8
	void ServerChangeStatePC(enum TargetStateType);// 0x392fe30
	void ServerChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x392fccc
	void ServerAutoSwitchSameSlotWeapon(byte CurrentSlot);// 0x392fc54
	void SendWeaponInfoToOB(out OBPlayerWeaponRecord[] WeaponReport);// 0x392fb20
	void SendStringWithMsgID(FString Message, int MsgID, FString PlayerKeyString);// 0x392f99c
	void SendStringMsgWithTransform(FString Message, int MsgID, int ItemId, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x392f6f4
	void SendStringMsg(FString Message, int MsgID, int ItemId, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x392f44c
	void SendStringDirect(FString Message);// 0x392f390
	void SendLogToLobbyOnece(byte LogType);// 0x392f318
	void SendGameStateInitOK();// 0x392f2bc
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x392f1f0
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x392f074
	void SendCustomMsg(FString Message, int MsgExtraParam, bool bSTTMsg);// 0x392ef28
	void S2C_ResponseSkillPrompt(int PromptID, float PastTime);// 0x392ee2c
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x392ecd4
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x392eb7c
	void RunOnNextFrameEvent();// 0x392eb68
	void RunOnNextFrame__DelegateSignature();// 0x49216cc
	void RspGetVehiclePos(STExtraVehicleBase* SimVehicle, Vector Pos);// 0x392eaa4
	void RPC_ServerRefreshMaxBulletNum(STExtraShootWeapon* TargetWeapon);// 0x392e9f0
	void RPC_Server_VehicleWarSetPlayerHasLogin();// 0x392e994
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x392e810
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x392e4a0
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x392e190
	void RPC_Server_ShootMultiEnergyAccumulateProjectileBulletsSimulate(STExtraShootWeapon* TargetWeapon, const ShootMultiBulletsParam[] LaunchParams, float CurAccEnergyPercent);// 0x392e00c
	void RPC_Server_ShootGrenadeBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x392dd00
	void RPC_Server_SetRemainBoxIsSearched(PlayerRemainTombBox* RemainBox);// 0x392dc4c
	void RPC_Server_SetPlayerStateChoose(int choose);// 0x392db98
	void RPC_Server_SetMicphoneTLogToServer(const TLog_Micphone MicphoneTlog);// 0x392dad4
	void RPC_Server_SendLog(FString ErrorLog);// 0x392d9e0
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x392d984
	void RPC_Server_ReqHealth();// 0x392d928
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x392d834
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x392d73c
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x392d560
	void RPC_Server_PrintHP();// 0x392d504
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x392d408
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x392d354
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x392d2a0
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x392d190
	void RPC_Server_NotifyServerPetNotDownload(int PetId);// 0x392d0dc
	void RPC_Server_NotifyServerOpenAnyPickUpBox(PlayerTombBox* TombBox);// 0x392d028
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x392cf18
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x392cdc4
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x392cc10
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x392cb1c
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window, bool bIsSelfInstigator);// 0x392c720
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x392c6bc
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x392c580
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(const ItemDefineID[] WeaponIDArray);// 0x392c48c
	void RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes(const int[] TreasureBoxIDArray);// 0x392c398
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x392c2a4
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x392c1b0
	void RPC_Server_EquipWeaponBullet(STExtraShootWeapon* TargetWeapon, int BulletID);// 0x392c0b4
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x392bf64
	void RPC_Server_ClientHasReactivated();// 0x392bf08
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x392bda4
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x392bc40
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x392bb44
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x392ba90
	void RPC_ReviveState_GiveUpRevive();// 0x392ba34
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x392b980
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x392b76c
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x392b5a8
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x392b42c
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x392b32c
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x392b278
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x392b120
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x392afc4
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x392adbc
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x392abb4
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x392aaec
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x392a914
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x392a818
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x392a71c
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x392a620
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x392a4c8
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector_NetQuantize10 BulletStart, Vector_NetQuantize10 BulletEnd);// 0x392a3b0
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x392a274
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x392a130
	void RPC_GiveUpGame();// 0x392a0d4
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x3929f94
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime, float Thickness);// 0x3929e14
	void RPC_DrawDebug_Box(const Vector Center, const Vector Extent, const Color Color, float LifeTime);// 0x3929cdc
	void RPC_ClientSetVehicleSpawnServerTime(float STime);// 0x3929c5c
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x3929b54
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x3929940
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x3929774
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x39295a8
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x39293dc
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeId);// 0x39292d4
	void RPC_Client_SetSpectatorPawnLotation(const Vector NewLocation);// 0x3929228
	void RPC_Client_RemoteDestroyAllActor();// 0x392920c
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x392918c
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x3928ff8
	void RPC_Client_PreSetBulletListInClip(STExtraShootWeapon* TargetWeapon, BulletInClip CurBulletInClip);// 0x3928d60
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot, byte SurfaceType);// 0x3928bfc
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x3928954
	void RPC_Client_NotifyHealth(float Health);// 0x39288a0
	void RPC_Client_InfectionShowKillNum(int ShowKillNum);// 0x3928820
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x39286bc
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x39285c8
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x39284cc
	void RPC_Client_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x39283d0
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackArea);// 0x3928240
	void RevivalTemateSuccess();// 0x3928224
	void RevivalTemateFailImpl(FString Reason);// 0x3928160
	void RevivalTemateFail(FString Reason);// 0x392809c
	float RetriveMobileContentScaleFactor();// 0x3928074
	void RestoreDefaultInteractionSize(int JSIndex);// 0x3927ffc
	void RespawnRecoverData(UAEPlayerController* PC);// 0x3927f84
	bool ResetValidTouchMoveFrame();// 0x3927f5c
	void ResetMissingUIUpdate();// 0x49216cc
	void ResetIgnoreMoveInput();// 0x35a8da0
	void RequireNetCullingDistanceByDevice();// 0x3927f00
	void RequireDeviceInfo();// 0x3927ee4
	void RequestPlayerNewbieInfo();// 0x3927ed0
	bool RequestChangeWearInPhoto(int NewIndex);// 0x3927e50
	bool RequestChangeWearInBattle(int NewIndex);// 0x3927dd0
	bool RequestChangeWear(int NewIndex);// 0x3927d50
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x3927c88
	void ReqRecordEnterIceMountain();// 0x3927c2c
	void ReqGetVehiclePos(STExtraVehicleBase* SimVehicle);// 0x3927b78
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x3927b00
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x39279a4
	void ReportPlayerPositionFlow(const PlayerPositionFlow PlayerPositionFlow);// 0x392783c
	void ReportClientParachuteData(ParachuteData InParachuteData);// 0x3927574
	void ReportAntiCheatInfo();// 0x3927560
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x39274e8
	void RemoveCustomSensibility(int WeaponId);// 0x3927470
	void RemoveClientSpawnAndBackpackWeaponReplicatedData(const ItemDefineID WeaponData);// 0x39273bc
	void ReleaseFire();// 0x49216cc
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x3927344
	void ReInitParachuteItem();// 0x3927330
	void RefreshTopMostUIPanel(byte Type);// 0x49216cc
	void RefreshShootDetailInfo();// 0x392731c
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x49216cc
	void RecoverStatusAfterReconnecting();// 0x39272fc
	void RecoverJoystick(int FingerIndex);// 0x3927284
	void RecordPathPoint();// 0x3927270
	void ReceiveClientRestart();// 0x49216cc
	void ReceiveBackpackComponent();// 0x3927254
	void QuitSpectatingReSetData();// 0x3927240
	void QuitSpectating();// 0x392722c
	void PrivateTriggerVehicleVoiceCheckFuction(STExtraVehicleBase* PtrVehicle, Vector Position, float showTime);// 0x3927124
	void PrivateTriggerShotVoiceCheckFuction(STExtraShootWeapon* PtrWeapon, Vector Position, float showTime, bool bSilience, bool bExplosion);// 0x3926f7c
	void PrivateTriggerMoveVoiceCheckFuction(STExtraBaseCharacter* PtrCharacter, Vector Position, float showTime);// 0x3926e74
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x3926d24
	void PreViewTargetChangeDelegate__DelegateSignature(Actor* NewTarget, Actor* PrevTarget);// 0x49216cc
	void PressGrenade(bool isThrow);// 0x49216cc
	void PressFire(int FingerIndex);// 0x49216cc
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x3926c68
	void PlayerKillingDelegate__DelegateSignature();// 0x49216cc
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x49216cc
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x49216cc
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x49216cc
	void PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x49216cc
	void PlayerControllerNotifyChangeToWalkingDead__DelegateSignature(bool bCanChange, bool bIsWalkingDeadFinish);// 0x49216cc
	void PlayerControllerChangeToWalkingDeadRes__DelegateSignature(bool bSucc);// 0x49216cc
	void PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x49216cc
	void PlayBattleSound(FString BankName, FString SoundName);// 0x3926b28
	void PickupInitialItemListForRobustness();// 0x3926b14
	void PerRespawnClearOtherPawn();// 0x49216cc
	void OpenParachute();// 0x3926b00
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x49216cc
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x49216cc
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x49216cc
	void OnWallFeedBack(bool _WallFeedBack);// 0x3926a80
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x39269c4
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x392694c
	void OnViewTargetChangeVehicleSeat();// 0x3926938
	void OnViewTargetChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0x49216cc
	void OnViewTargetChange__DelegateSignature(STExtraBaseCharacter* ViewTarget, STExtraBaseCharacter* LastViewTarget, bool bIsOnPlane);// 0x49216cc
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x39268c0
	void OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x49216cc
	void OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x49216cc
	void OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x49216cc
	void OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x49216cc
	void OnVehicleExitFreeCameraDelegate__DelegateSignature(bool bExit);// 0x49216cc
	void OnUseVehicleWarWeapon();// 0x39268ac
	void OnUseVehicleWarItem();// 0x3926898
	void OnUseVehicleWarEyes();// 0x3926884
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x49216cc
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x49216cc
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x49216cc
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x39266a4
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x49216cc
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x49216cc
	void OnTeammatesAllDie();// 0x3926690
	void OnTeammateLogin(int InTeamID);// 0x3926618
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x49216cc
	void OnTeamFollowStageChangeDelegate__DelegateSignature();// 0x49216cc
	void OnTakeDamaged__DelegateSignature(float DamageAngel, Actor* DamageCauser, float Damage);// 0x49216cc
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x49216cc
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x49216cc
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x49216cc
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x49216cc
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x49216cc
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x49216cc
	void OnStopFireDelegate__DelegateSignature();// 0x49216cc
	void OnStartFireDelegate__DelegateSignature();// 0x49216cc
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x49216cc
	void OnSpectatorToFreeView__DelegateSignature();// 0x49216cc
	void OnSpectatorChangeFunc();// 0x3926604
	void OnSpectatorChange__DelegateSignature();// 0x49216cc
	void OnSpectatorCameraChange(bool bDie);// 0x49216cc
	void OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x49216cc
	void OnShowSkillPromptDelegate__DelegateSignature(int PromptID, float RemainTime);// 0x49216cc
	void OnShowHideSelfMarkDelegate__DelegateSignature();// 0x49216cc
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x49216cc
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x49216cc
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x3926534
	void OnShowAllTeammatePosDelegate__DelegateSignature(bool bShow);// 0x49216cc
	void OnShowAliasInfoDelegate__DelegateSignature();// 0x49216cc
	void OnSetViewTarget__DelegateSignature(Actor* Target);// 0x49216cc
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x49216cc
	void OnServerFinishPickupRevivalFlag();// 0x3926518
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x49216cc
	void OnRescuedStateChanged__DelegateSignature(bool bBeingRescued);// 0x49216cc
	void OnRepTeammateChange__DelegateSignature();// 0x49216cc
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x49216cc
	void OnRepPlayerState__DelegateSignature();// 0x49216cc
	void OnRepNotify_SetBattleOwner();// 0x3926504
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x34f4004
	void OnRep_WeatherFog();// 0x39264f0
	void OnRep_WeaponSystemReconnectReplicateData();// 0x39264dc
	void OnRep_WeaponFunctionChanged();// 0x39264c8
	void OnRep_WeaponAvatarDataList();// 0x39264ac
	void OnRep_UsedSimulation();// 0x3926490
	void OnRep_SwitchWeather();// 0x392647c
	void OnRep_STExtraBaseCharacter();// 0x3926468
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x3926454
	void OnRep_ShowWeaponHitDetailInfo();// 0x3926440
	void OnRep_ServerStateType();// 0x392642c
	void OnRep_Plane();// 0x3926418
	void OnRep_ObservedItemList();// 0x3926404
	void OnRep_InWateringRangeBP();// 0x49216cc
	void OnRep_InWateringCRange();// 0x39263b0
	void OnRep_InitialEquipmentAvatar();// 0x3926394
	void OnRep_InitialConsumableAvatar();// 0x3926378
	void OnRep_ImprisonmentTeammateSucess();// 0x3926364
	void OnRep_GameStateMsgType();// 0x3926350
	void OnRep_ForbitPickEffect();// 0x392633c
	void OnRep_ForbitPick();// 0x3926328
	void OnRep_EnableDeathPlaybackDelay();// 0x3926314
	void OnRep_DeadTombBox();// 0x3926300
	void OnRep_CanOpenParachute();// 0x39262ec
	void OnRep_CanJump();// 0x39262d8
	void OnRep_CanImprisonmentTeammate();// 0x39262c4
	void OnRep_bGhost();// 0x39262a8
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x3926294
	void OnRep_BackpackRepActor();// 0x3926280
	void OnRep_BackpackComponent();// 0x392626c
	void OnRep_AutoAimType();// 0x3926258
	void OnRemindTeammateShoot__DelegateSignature(FString sPlayerKey, bool bShow, float nDist);// 0x49216cc
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x49216cc
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x49216cc
	void OnReleaseFire();// 0x3926244
	void OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x49216cc
	void OnReconnected__DelegateSignature();// 0x49216cc
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x49216cc
	void OnPressVehicleWarMatchData();// 0x3926230
	void OnPressTurnplateQuickMsgBtn();// 0x392621c
	void OnPressTriggerEntireMapBtn();// 0x3926208
	void OnPressShowTagVehileSeatListBtn();// 0x39261f4
	void OnPressRolewearChangeBtn(int Index);// 0x392617c
	void OnPressItemSKillBtn();// 0x3926168
	void OnPressFire();// 0x3926154
	void OnPressBackpackBtn();// 0x3926140
	void OnPostTakeDamageForBP__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* DamageCauser);// 0x49216cc
	void OnPlayerUseRecoverItem();// 0x392612c
	void OnPlayerStateChanged();// 0x3926118
	void OnPlayerReConnected(int LostPlayerKey);// 0x3926064
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x49216cc
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x49216cc
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x49216cc
	void OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x49216cc
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x49216cc
	void OnPlayerLostConnection(int LostPlayerKey);// 0x3925fb0
	void OnPlayerLeaveRevivalStateDelegate__DelegateSignature();// 0x49216cc
	void OnPlayerKilledOthersPlayer__DelegateSignature(out const FatalDamageParameter FatalDamageParameter);// 0x49216cc
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x49216cc
	void OnPlayerInOutBlueCircleChangedDelegate__DelegateSignature(bool bIsInBlueCircle);// 0x49216cc
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x3925f30
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x49216cc
	void OnPlayerExitGameDelegate__DelegateSignature(FName ParamState, FString ParamReason);// 0x49216cc
	void OnPlayerEnterRevivalStateDelegate__DelegateSignature();// 0x49216cc
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x49216cc
	void OnPlayerControllerStateChangedCurrentType(enum CurrentType);// 0x3925eb8
	void OnPlayerClickDriveBtn();// 0x3925ea4
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x49216cc
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x49216cc
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x3925d60
	void OnPickupItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x49216cc
	void OnPickUpExpand();// 0x3925cf8
	void OnPickUpCollapsed(bool isCollapsed);// 0x3925c78
	void OnPickUpActor(int Guid, int PickupCount, int TotalCount);// 0x3925b78
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x49216cc
	void OnOccupyNewbieGuide(int inGuideID);// 0x3925b00
	void OnOBVehicleHitActor(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x392595c
	void OnObserverLevelLoaded();// 0x3925948
	void OnObservedWeaponDataChanged(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x39258a0
	void OnObservedUsingWeaponChanged();// 0x392588c
	void OnObservedPoisonFogStageChanged();// 0x3925878
	void OnObservedItemsChanged();// 0x3925864
	void OnObservedBulletNumChanged();// 0x3925850
	void OnOBPawnExitVehicle(STExtraVehicleBase* InTargetVehicle);// 0x39257d8
	void OnNightStateChangedDelegate__DelegateSignature();// 0x49216cc
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x3925760
	void OnMemberVoiceDelegate__DelegateSignature(int member, int Status);// 0x49216cc
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x49216cc
	void OnLostConnection__DelegateSignature();// 0x49216cc
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x49216cc
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x49216cc
	void OnLiveStateChanged__DelegateSignature(enum LiveState);// 0x49216cc
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x49216cc
	void OnKillerNotify(Actor* Killer);// 0x39256e8
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int Count);// 0x39255d8
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x39254f8
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x39253e8
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x49216cc
	void OnInfectionShowTipMsgDelegate__DelegateSignature(int MsgID, int IconID, float showTime, float DelayTime);// 0x49216cc
	void OnInfectionPlaySoundEvent__DelegateSignature(int SoundID);// 0x49216cc
	void OnImprisonStateChange__DelegateSignature(bool bEnterImprison);// 0x49216cc
	void OnHideSkillPromptDelegate__DelegateSignature(bool bForce, int PromptID);// 0x49216cc
	void OnHideFollowPanelAndBtnDelegate__DelegateSignature();// 0x49216cc
	void OnHandleCameraModeChangedDelegate__DelegateSignature(byte CameraMode);// 0x49216cc
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x49216cc
	void OnGameStartDelegate__DelegateSignature();// 0x49216cc
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x49216cc
	void OnGameModeStateChanged();// 0x49216cc
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0x49216cc
	void OnExitGame__DelegateSignature();// 0x49216cc
	void OnEquipWeaponDelegate__DelegateSignature();// 0x49216cc
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x49216cc
	void OnEquipmentAvatarChange__DelegateSignature();// 0x49216cc
	void OnEnterBattleResultStep();// 0x39253d4
	void OnDropItemOnPlane();// 0x39253c0
	void OnDropItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x49216cc
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x49216cc
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x49216cc
	void OnDeadBoxExpand();// 0x39253ac
	void OnDeadBoxCollapsed(bool isCollpased);// 0x392532c
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x49216cc
	void OnCoopEmoteChangeDelegate__DelegateSignature(bool bShow, EmotePlayer EmotePlayer);// 0x49216cc
	void OnConsumableAvatarChange__DelegateSignature();// 0x49216cc
	void OnCongregationFlagDelegate__DelegateSignature();// 0x49216cc
	void OnClientWillGotoSpectating();// 0x3925318
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CamID, Actor*[] PeerVisualFieldActorList);// 0x49216cc
	void OnClickVehicleWarBuff();// 0x3925304
	void OnClickToggleOBVehicleView();// 0x39252f0
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x49216cc
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x49216cc
	void OnCharacterRecoveryHealthEvent();// 0x39252dc
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x49216cc
	void OnCharacterReceiveHealthChangeHistory__DelegateSignature(out const float[] HealthChangeHistory);// 0x49216cc
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x49216cc
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x49216cc
	void OnCharacterLandingCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x49216cc
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x49216cc
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x392525c
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x49216cc
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x49216cc
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x49216cc
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x49216cc
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x39251dc
	void OnBuyRevivalSign();// 0x39251c0
	void OnAvatarInfoRep__DelegateSignature(int[] ItemIdList, FString PlayerUID, FString AvatarType);// 0x49216cc
	void OnAutoSprintActive__DelegateSignature();// 0x49216cc
	void OnAssociationOperation(ItemDefineID DefineID, ItemDefineID TargetDefineID, enum OperationType, byte Reason);// 0x3925058
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x49216cc
	void ObserveWhoKilledMe();// 0x3925044
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x3924f90
	void ObserveCharacter(FString InPlayerName);// 0x3924e38
	void ObserveAirDropBox(int BoxId);// 0x3924dc0
	void OBCameraTurnSlower();// 0x3924dac
	void OBCameraTurnFaster();// 0x3924d98
	void OBCameraMoveSlower();// 0x3924d84
	void OBCameraMoveNear();// 0x3924d70
	void OBCameraMoveFaster();// 0x3924d5c
	void OBCameraMoveFar();// 0x3924d48
	void NotifyOpenSequencer(BattleOpenSequencerInfo Info);// 0x3924b30
	void NotifyIsInResultView(bool isInResultView);// 0x3924aa4
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x49216cc
	void NotifyEnterBattle();// 0x3924a88
	void NotifyDeadBoxExpand();// 0x49216cc
	void NotifyDeadBoxCollapsed(bool isCollpased);// 0x49216cc
	void MoveUpDelegate__DelegateSignature(float rate);// 0x49216cc
	void MoveUp(float rate);// 0x3924a10
	void MoveToAIWithClassName(FString AIClassName, float XOffset, float YOffset, float ZOffset);// 0x3924884
	void MoveToAI();// 0x3924870
	void MoveRightDelegate__DelegateSignature(float rate);// 0x49216cc
	void MoveForwarDelegate__DelegateSignature(float rate);// 0x49216cc
	void MovableEmoteDelegate__DelegateSignature(bool bIsVisible);// 0x49216cc
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x39247b4
	void ModifyCameraViewPitchLimitWithPose(byte Pose, float PitchMin, float PitchMax);// 0x39246b4
	void MemberVoice(int member, int Status);// 0x49216cc
	void MarkStartFireFrame();// 0x39246a0
	void LocalMoveTo(out const Vector targetPos);// 0x392461c
	void LocalGetGameStateReconnectInfo();// 0x3924608
	void LerpFPPCamera();// 0x39245f4
	void KickPlayerFromGame();// 0x39245e0
	void K2_SetPawn(Pawn* InPawn);// 0x3924568
	void JumpPlanDell(STExtraBaseCharacter* dellPawn);// 0x49216cc
	void JumpFromPlane();// 0x3924554
	void JoystickTriggerSprint(bool bIsSprint);// 0x49216cc
	bool IsVirtualJoystickValid();// 0x392452c
	bool IsViewTarget(const Actor* pActor);// 0x39244a0
	bool IsUse3DTouch();// 0x3924478
	bool IsTouchToRotControl();// 0x3924448
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x39243c8
	bool IsToggleOBBulletTrackEffect();// 0x39243a0
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x3924320
	bool IsStandalone();// 0x39242ec
	bool IsShowBlood();// 0x39242cc
	bool IsSameTeam(Pawn* Other);// 0x392424c
	bool IsRevivalMode();// 0x392421c
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x392419c
	bool IsRecentlyCalledServerCMD(const float MarginSeconds);// 0x392411c
	bool IsParachuteAnimCached(byte AnimOverrideType);// 0x392409c
	bool IsMurderSelfDefense(FString InformMurderName);// 0x3923fd8
	bool IsMoveable_DontConsiderFollowingState();// 0x3923fb0
	bool IsMoveable();// 0x3923f88
	bool IsLastBreathOrRescueingOther();// 0x3923f60
	bool IsInRevival();// 0x3923f38
	bool IsInPlane();// 0x3923f10
	bool IsInParachuteOpen();// 0x3923ee8
	bool IsInParachuteJump();// 0x3923ec0
	bool IsInParachute();// 0x3923e98
	bool IsInObservingPlayback();// 0x3923e70
	bool IsInNormalPlane();// 0x3923e48
	bool IsInInitial();// 0x3923e20
	bool IsInFreeCameraView();// 0x3923e04
	bool IsInFreeBuildState();// 0x3923de4
	bool IsInFinish();// 0x3923dbc
	bool IsInFight();// 0x3923d94
	bool IsInDeathReplay();// 0x3923d6c
	bool IsInDead();// 0x3923d44
	bool IsGhost();// 0x3923d1c
	bool IsForbitPickMakeEffect();// 0x3923cf4
	bool IsForbitPick(out const FName TombName);// 0x3923c60
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x3923b94
	bool IsCanViewEnemy();// 0x3923b6c
	bool IsCanSpectateTeammate();// 0x3923b44
	bool IsCanImprisonmentTeammate();// 0x3923b1c
	bool IsCacheReceiveRespawnZombie();// 0x3923af4
	bool IsAutoParachuteEnable();// 0x3923acc
	bool IsAllowBackpackReplayData(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x39239b4
	bool IsAllowActorTouchMove();// 0x392398c
	bool IsAGMPlayer();// 0x3923964
	void InitVehicleAvatarSkinList();// 0x3923948
	void InitVehicleAvatarList();// 0x392392c
	void InitTaskDatas(uint32 InPlayerKey);// 0x39238b4
	void InitTaskDataDelegate__DelegateSignature(int TaskId, int process, FString ext_info);// 0x49216cc
	void InitTaskData(int TaskId, int process, FString ext_info);// 0x39236cc
	void InitTaskComponent();// 0x39236b8
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x49216cc
	void InitJoyStickAfterActivation();// 0x49216cc
	void InitCollectionDataDelegate__DelegateSignature(int ItemId, int CurrentCount, int TotalCount);// 0x49216cc
	void InitCollectionData(int ItemId, int CurrentCount, int TotalCount);// 0x39235b8
	void InfectionSelectZombieDelegate__DelegateSignature(enum TargetPawnType);// 0x49216cc
	void HideGameTipForLowFPSWarning();// 0x39235a4
	void HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x49216cc
	FString HawkEyesLocalize(int InPlayerKey);// 0x3923494
	bool HasAnySpectatorReplayFlag(uint32 InFlag);// 0x392340c
	void HandleVirtualJoystickInput(out const Geometry Geometry, out const Vector2D ScreenPosition, int PointerIndex, bool MouseDown);// 0x3923294
	void HandleVirtualJoystickActive(Vector2D NormalizedOffset, Vector2D VisualSize);// 0x39231d4
	void HandleUpdateShovelingRelease();// 0x39231c0
	void HandleUpdateShovelingPressed();// 0x39231ac
	void HandleUpdateShoveling();// 0x3923198
	void HandleTogglePlayerListInOB();// 0x3923184
	void HandleToggleOBTeamList(bool InShow);// 0x3923104
	void HandleToggleMapInOB();// 0x39230f0
	void HandleToggleHitDamageDisplay();// 0x39230dc
	void HandleToggleBulletTrack();// 0x39230c8
	void HandleTipInfo(FString FullMsg);// 0x392300c
	void HandleSwitchToTeammatePrev();// 0x3922ff8
	void HandleSwitchToTeammateNext();// 0x3922fe4
	void HandleSwitchToTeam(int InTeamID);// 0x3922f6c
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x3922ef4
	void HandleMsg(enum Msg);// 0x3922e7c
	void HandleLeaveFreeViewInOB();// 0x3922e68
	void HandleLandOnGroundEnd();// 0x3922e54
	void HandleHitDataArray(STExtraShootWeapon* TargetWeapon, out const SACData InAntiCheatData);// 0x3922d30
	void HandleFlyLeapPlatform();// 0x3922cd4
	void HandleEnterFreeViewInOB();// 0x3922cc0
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x3922bf0
	void HandleClientHasReactivated();// 0x3922bdc
	void HandleChangeRolewearDone();// 0x49216cc
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x3922b20
	int GotoSpectating(int TeammatePlayerid);// 0x3922a98
	void GotoFlying();// 0x3922a84
	void GMTeleport(FName Teleporter);// 0x3922a0c
	int GetWriteCircleDistance();// 0x39229e4
	WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x3922918
	int GetWeaponDIYPlanID(int WeaponId);// 0x3922898
	int GetWeaponAvatarItemId(int BPID);// 0x3922810
	int GetWeaponAvatarID(int WeaponId, bool isGrenade);// 0x3922744
	float GetViewPortDPIScale();// 0x3922714
	VehicleUserComponent* GetVehicleUserComp();// 0x39226ec
	bool GetUseMotionControlLog();// 0x39226c4
	bool GetUseMotionControlEnable();// 0x392269c
	int GetUnlockWearCount();// 0x3922674
	float GetTouchSensibilityRate();// 0x3922644
	float GetTouchForce(byte FingerIndex);// 0x39225c4
	Actor* GetThePlane();// 0x39225a4
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x3922524
	SpringArmComponent* GetTargetedSpringArm();// 0x39224fc
	int GetStatTriangles();// 0x3530d08
	FString GetStatMemory();// 0x38d8988
	StateMachineComponent* GetStateMachineCompent();// 0x39224d4
	int GetStatDrawCalls();// 0x3530d08
	STExtraPlayerState* GetSpecOrDemoPlayerState();// 0x39224ac
	Pawn* GetSpecOrDemoPawn();// 0x3922484
	BattleItemData[] GetSpecialClothingInAllBackpack(int Index);// 0x392232c
	int[] GetSpecialClothingCountInAllBackpack(int Index);// 0x3922224
	int[] GetSpecialAreaList();// 0x3922164
	int GetSpecialAreaID();// 0x392213c
	SIslandInactiveClearComponent* GetSIslandInactiveClearComponent();// 0x3922114
	byte GetSightTypeForSensibility(STExtraShootWeapon* ShootWeapon);// 0x392208c
	byte GetShakeCameraMode();// 0x392205c
	Rotator GetSensibilityRate(float YawInput, float PitchInput, bool bIsMotionControl);// 0x3921f38
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x3921ddc
	ScreenAppearanceActor* GetScreenAppearanceMgr();// 0x3921db4
	FString GetRHIThreadTime();// 0x38d8988
	int GetRevivalCountDownTime();// 0x3921d8c
	FString GetRenderThreadTime();// 0x38d8988
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x49216cc
	QuickSignComponent* GetQuickSignComponent();// 0x3921d64
	FString GetPresentTime();// 0x38d8988
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x3921d3c
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x3921c54
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x3921c2c
	STExtraBaseCharacter* GetPickingupCharacter();// 0x3921bfc
	PlayerPetSpectatorComponent* GetPetSpectatorComp();// 0x3921bd4
	CharacterParachuteComponent* GetParachuteComponent();// 0x3921bac
	AnimationAsset* GetParachuteAnimAsset(byte AnimType, byte AnimOverrideType);// 0x3921ae8
	Transform GetPaintDecalTargetTransform();// 0x3921a88
	ObservingReplay* GetObservingPlayback();// 0x3921a60
	Vector GetNewestAirDropBoxPos();// 0x3921a18
	FString GetMurderUIDStr();// 0x392191c
	FString GetMurderName();// 0x392185c
	bool GetMurderIsAI();// 0x3921824
	BattleItemSpectatingData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x3921644
	byte GetMaxTouchForceFinger();// 0x3921604
	enum GetLastStateType();// 0x39215dc
	Vector2D GetJoyStickVisualSize();// 0x392159c
	float GetJoyStickOpacity();// 0x3921574
	Vector2D GetJoyStickCenter();// 0x3921534
	int GetItemUseSpecialAreaID(int ItemId);// 0x39214b4
	bool GetIsRespawn();// 0x3921494
	bool GetIsMurderSameTeam();// 0x392145c
	bool GetIsFreeCamera();// 0x392143c
	enum GetInfectionPawnSubType();// 0x3921414
	enum GetInfectionPawnMainType();// 0x39213ec
	IdeaDecalManager* GetIdeaDecalManager();// 0x39213c4
	FString GetGameThreadTime();// 0x38d8988
	void GetGameStateReconnectInfoOnServer();// 0x3921368
	LastGameRemainItemData GetGameRemainItems();// 0x392127c
	int GetFriendDistance();// 0x3530d08
	Vector GetFocalLocation();// 0x392122c
	FString GetFinalMurderName();// 0x392110c
	WeaponHitDetailInfo GetDetailHitInfo();// 0x3920fd8
	void GetDailyTaskReportData(out DailyTaskReportInfo ResultData);// 0x3920e5c
	enum GetCurrentStateType();// 0x3920e34
	Vector GetCurrentLevelOffset();// 0x3920dec
	STExtraPlayerState* GetCurPlayerState();// 0x3920dc4
	int GetCurPlayerId();// 0x3920d9c
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x3920d74
	Vector GetCurPawnLocation();// 0x3920d2c
	Pawn* GetCurPawn();// 0x3920d04
	float GetCurFPS();// 0x3530d08
	Rotator GetControlLookRotation();// 0x3920cb4
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x3920bc8
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x3920a70
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x39209f0
	ChatComponent* GetChatComponent();// 0x39209c8
	byte GetCameraModeForSensibility();// 0x3920998
	uint32 GetBeKickedPlayerKey();// 0x3920970
	BackpackComponent* GetBackpackComponent();// 0x3920948
	AllStarReportData GetAllStarReportDataByOpenID(FString InPlayerOpenID);// 0x392087c
	void GenerateIdCardMark(out const Vector Loc);// 0x39207f0
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int BoxId);// 0x392068c
	void GameModeGotoFightingState();// 0x3920678
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x39205bc
	void ForceServerSetControlRotationOnVehicle();// 0x39205a8
	void ForceReleaseCurTouchMoveFinger();// 0x3920594
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x39204c8
	void ForceDropItemsWithType(int TypeItem);// 0x3920450
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x3920384
	void ForceDropItems(out const int[] ItemTableList);// 0x39202b8
	void ForceDropAllItem();// 0x39202a4
	bool ForbidSpectateTeamMateOnPlane();// 0x3920274
	void FollowEmoteDelegate__DelegateSignature(bool bIsVisible);// 0x49216cc
	void FlushItem(int onlyStatic);// 0x39201fc
	void FireTakeDamagedEvent(Vector CauserLocation, Actor* DamageCauser, float Damage);// 0x39200fc
	void FireOrGrenade();// 0x39200e8
	void Fight();// 0x39200d4
	void FadeSceneToGrayOnDeath(bool bSet);// 0x3920054
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x391feb0
	void ExitNightState();// 0x391fe9c
	void ExitFromFlyingVehicleParachuteJump();// 0x391fe80
	void ExitFreeCamera(bool IsForceReset);// 0x391fe00
	void ExecDSCommand(const FString DSCommand);// 0x391fd3c
	void EquipIceDrinkItems(out const int[] ItemList);// 0x391fc70
	void EnterVehicleDelegate__DelegateSignature(bool IsEnter, Actor* Vehicle);// 0x49216cc
	void EnterNightState();// 0x391fc5c
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x391fb54
	void EndForceTouchFire(Vector Loc);// 0x391fae4
	void EnablePlayerInHouse(bool bIsIn);// 0x391fa64
	void EnableNetUpdateGroupID(byte NetGroupID);// 0x391f9ec
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x49216cc
	void EnableAutoParachute(bool bEnable);// 0x391f96c
	void DynamicCreateComponents();// 0x391f958
	void DropItemsWithType(int TypeItem);// 0x391f8e0
	void DropItem(int ID);// 0x391f868
	void DropAllItem();// 0x391f854
	void DoUITouchMove(Vector Loc);// 0x49216cc
	void DoubleClickCancel(const byte FingerIndex);// 0x391f7dc
	void DoTouchMove(float Yaw, float Pitch);// 0x49216cc
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x391f728
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x391f674
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x49216cc
	void DisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString Param1, FString Param2, float ControlTime);// 0x391f420
	void DisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x391f214
	void DisplayLowFPSCountingDown();// 0x391f200
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x391ef48
	void DisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x391ec90
	void DisplayGameTipWithMsgID(int ID);// 0x391ec18
	void DisplayGameTipForLowFPSWarning(int ID, FString Param1, FString Param2);// 0x391e960
	void DisplayCustomLuaGameTips(FString FunctionName, int ID, out const byte[] ExpandDataContent);// 0x391e7cc
	void DisplayBattleGeneralTip(int ID, FString Param1, FString Param2);// 0x391e514
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x391e49c
	void DispatchPlayerReconnectedEvent();// 0x391e488
	void DispatchPlayerLostEvent();// 0x391e474
	void DispatchPlayerExitEvent();// 0x391e460
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x391e3e8
	void DisableNetUpdateGroupID(byte NetGroupID);// 0x391e370
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x49216cc
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x49216cc
	void DelayGotoSpectating();// 0x391e35c
	void DelayForceExitFreeCamera();// 0x391e348
	void DebugSetUIVisibility(bool bUIVisibility);// 0x49216cc
	void DealGetAllNearShotWeapon(float disRate);// 0x391e2d0
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x391e214
	void DealGetAllNearMoveCharacter(float checkDis);// 0x391e19c
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x391dfe0
	void ConsumeRevivalSign();// 0x391dfc4
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x391deac
	void ClientStopShoveling();// 0x391de50
	void ClientStartOnlineGame();// 0x391de34
	void ClientShowInfectAreaWarning();// 0x391ddd8
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x391dcb0
	void ClientSetPoisonSmogStage(int SmogStage);// 0x391dbfc
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x391daf4
	void ClientSetControlRotation(const Rotator NewRotation);// 0x391da7c
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x391d980
	void ClientSetAIPosToTarget(Vector StartPos, Vector targetPos);// 0x391d8b8
	void ClientSetAIPos(uint32 KeyID, Vector Pos, bool isStart);// 0x391d7a4
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x391d6d4
	void ClientRPC_TeamMateStateChanged(const TeamMateStateInfo TeamMateInfo);// 0x391d62c
	void ClientRequestPullInstanceData(uint32 Seq, out uint32[] InstanceIDs);// 0x391d51c
	void ClientRealPlayItemOperationSound(FString BankName, FString SoundName, Actor* TargetActor);// 0x391d390
	void ClientQuitViewEnemy();// 0x38619ac
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x391d290
	void ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x49216cc
	void ClientOnHurt();// 0x391d274
	void ClientOnEnterVehicleDelegate__DelegateSignature(int SeatType);// 0x49216cc
	void ClientOnDeathReplayDataWhenFatalDamaged__DelegateSignature(bool bIsDead, bool bIsValidDeathReplay, bool bIsSuicide, FString InPlayerName, FString PlayerUID, bool bIsPlayerAI, enum AIType, int DamageType, FString MLAIUID);// 0x49216cc
	void ClientOnDamageToOther(float _DamageToOther);// 0x391d1f4
	void ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature(enum SeatType);// 0x49216cc
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x391d0e0
	void ClientInterruptGame();// 0x391d084
	void ClientInitIngameUIAfterRespawn();// 0x391d028
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x391cf6c
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x391cea4
	void ClientGotoSpectating();// 0x391ce88
	void ClientGiveUpRevivalTemmates();// 0x391ce6c
	void ClientGameStarted();// 0x391ce50
	void ClientFriendBattleEnd(bool bIsShowWatchFriendBattleEndTips);// 0x391cdc8
	void ClientForbidLoadParahuteAnim(bool bCanForbid);// 0x391cd40
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x391ccb8
	void ClientEnterViewBox(int BoxId);// 0x391cc38
	void ClientEndOnlineGame();// 0x391cc1c
	void ClientDisplayNormalTips(FString Content);// 0x391cb58
	void ClientDisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString Param1, FString Param2, float ControlTime);// 0x391c8fc
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x391c6e8
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x391c524
	void ClientDisplayGameTipWithMsgID(int ID);// 0x391c470
	void ClientDisplayCustomLuaGameTips(FString FunctionName, int ID, const byte[] ExpandDataContent);// 0x391c2e4
	void ClientCheckStartShovelingFail();// 0x391c288
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x391c1d4
	void ClientChangeStatePC(enum TargetStateType);// 0x391c154
	void ClearParachuteAnimAssetCache();// 0x391c140
	void ClearDeadTombBox();// 0x391c12c
	void ClearAllConstructedBuilding();// 0x391c118
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x391c078
	bool CientRevivalTemmates();// 0x391c050
	void CheckServerStateIgnoreTouch();// 0x391c034
	void CheckQuitSpectatingInClientRestart(Pawn* NewPawn);// 0x391bfb4
	void CheckParachuteLandedFinish();// 0x391bfa0
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x391beb8
	void CheckDeadBoxIgnoreTouch();// 0x391be9c
	void CheckConsumeGlideItem();// 0x391be88
	bool CheckAllVehicleWeaponIsReadyForFire(bool WithBroadEvent);// 0x391be00
	bool ChecCanChangeWeaponScheme();// 0x391bdd0
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x391bd50
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x391bcd8
	void ChangeToWalkingDead();// 0x391bcc4
	void ChangeStatePC(enum TargetStateType);// 0x391bc4c
	void ChangeSpectatorStateToFreeView();// 0x391bc38
	bool ChangeRolewearIndex(int NewIndex, bool bIgnoreVault);// 0x391bb6c
	void ChangeCharacterLogicDelegate__DelegateSignature(enum TargetPawnType);// 0x49216cc
	void ChangeCharacterBeforeDelegate__DelegateSignature(enum TargetPawnType);// 0x49216cc
	bool ChangeActorRelevantTime(Actor* pActor, float Timeout);// 0x391baa8
	void CanSeeAllUI(bool bUIVisibility);// 0x3597804
	bool CanCombineShootHitData();// 0x391ba80
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x391b9e0
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x391b8d0
	bool CanAutoSwitchGrenade(int GrenadeID);// 0x391b848
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x391b764
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, float HealthMax, int VoiceID);// 0x391b580
	void CallShowTouchInterface(bool InShow);// 0x391b4f8
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x391af28
	Vector2D CalcAttactBtnPos(float locX, float locY, float SizeX, float SizeY);// 0x391adc8
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x391ad50
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x391acd8
	void CacheRecvInfectionSelectZombie__DelegateSignature(bool bRecv);// 0x49216cc
	void C2S_RequestSkillPrompt();// 0x391ac7c
	void C2S_RequestBeingRescuedRemainingTime();// 0x391ac20
	void BroadcastFatalDamageToClientWithStructNew(const FatalDamageParameterCompress FatalDamageParameter);// 0x391ab00
	void BroadcastFatalDamageToClientWithStruct(const FatalDamageParameter FatalDamageParameter);// 0x391a9b0
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x391a740
	SpringArmComponent* BPGetTargetedSpringArm();// 0x391a708
	bool BPGetIsAndroidSimulator();// 0x391a6e0
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString Param1, FString Param2);// 0x391a494
	void BPCastUIMsgWithParam(FString Func, FString module, FString Param1);// 0x391a2d0
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x49216cc
	void BP_BeginSpectatingState();// 0x49216cc
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x391a258
	void BindVoiceCheckFunction();// 0x391a244
	void BindVirtualJoystickInputDelegates(bool bBind);// 0x391a1c4
	void BindVirtualJoystickActiveDelegates(bool bBind);// 0x391a144
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x391a088
	void BeginAbsorb();// 0x391a02c
	void BecomeAGhost(bool Flag);// 0x3919fa4
	void BackToGameDataRefresh();// 0x3919f90
	bool AutoSelectViewTarget();// 0x3919f68
	void AutoSelectTeammateToView();// 0x3919f54
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x3919e48
	void AddParachuteAnimAssetCache(byte AnimType, AnimationAsset* AnimAsset, byte AnimOverrideType);// 0x3919d48
	void AddItemAttachList(int BaseItemID);// 0x3919cd0
	void AddItem(int ID, int Count, int PickupType);// 0x3919bd0
	void AddCharacterVirtualItemToBackpack();// 0x3919bbc
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x3919a74
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x39199f4

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0xcdc, Size: 12]
	delegate OnDeath;//[Offset: 0xce8, Size: 12]
	delegate OnBulletChange;//[Offset: 0xcf4, Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0xd00, Size: 12]
	delegate OnAnimAssetSkeletonMatch;//[Offset: 0xd0c, Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0xd18, Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0xd24, Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0xd30, Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0xd3c, Size: 12]
	delegate OnPlayerWeaponReloadLastBullet;//[Offset: 0xd48, Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0xd54, Size: 12]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0xd60, Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0xd6c, Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xd78, Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0xd84, Size: 12]
	delegate OnFollowStateChanged;//[Offset: 0xd90, Size: 12]
	delegate OnPlayerStartRescue;//[Offset: 0xdc4, Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0xdd0, Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0xddc, Size: 12]
	delegate OnServerPerspectiveChanged;//[Offset: 0xde8, Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xdf4, Size: 12]
	delegate OnDeathDelegate;//[Offset: 0xe00, Size: 12]
	delegate OnPostTakeDamage;//[Offset: 0xe0c, Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0xe18, Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0xe24, Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0xe30, Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0xe3c, Size: 12]
	delegate OnClientCurrentVehicleChange;//[Offset: 0xe48, Size: 12]
	delegate PostAttrModifiedDelegate;//[Offset: 0xe54, Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xe90, Size: 12]
	delegate AnimMontagePlayExtraDelegate;//[Offset: 0xe9c, Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xea8, Size: 12]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0xeb4, Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xec0, Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xecc, Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xed8, Size: 12]
	delegate OnCharacterShootBulletDelegate;//[Offset: 0xee4, Size: 12]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xef0, Size: 12]
	delegate OnCharacterEndViewTarget;//[Offset: 0xefc, Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xf08, Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xf14, Size: 12]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0xf20, Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0xf2c, Size: 12]
	delegate OnRequestPaintDecalDelegate;//[Offset: 0xf38, Size: 12]
	delegate OnPawnExitParachute;//[Offset: 0xf44, Size: 12]
	delegate SetClimbAnimationDelegate;//[Offset: 0xf50, Size: 12]
	delegate OnCanVaultFlagChangeDelegate;//[Offset: 0xf5c, Size: 12]
	delegate OnPreRepAttachment;//[Offset: 0xf68, Size: 12]
	delegate OnPostRepAttachment;//[Offset: 0xf74, Size: 12]
	delegate OnCalcPickUpItemFlow;//[Offset: 0xf80, Size: 12]
	delegate OnCalcUseItemFlow;//[Offset: 0xf8c, Size: 12]
	delegate OnReceivePlayerKey;//[Offset: 0xf98, Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xfa4, Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xfa8, Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xfac, Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xfb0, Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xfb4, Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xfb8, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfbc, Size: 1]
	bool bOnlyInvincibleToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbd, Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfbe, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfbe, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xfc0, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc4, Size: 1]
	float Money;//[Offset: 0xfc8, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfcc, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfcd, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfcd, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfce, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfcf, Size: 1]
	bool bShootSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xfd4, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd8, Size: 1]
	bool bStandAloneUnlimitBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd9, Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfda, Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdb, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdc, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xfe4, Size: 4]
	bool bCanBeHitWhenHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe9, Size: 1]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xfec, Size: 4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0xff0, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0xff4, Size: 4]
	FName HeadSocketName;//[Offset: 0xff8, Size: 8]
	FName LFootSocketName;//[Offset: 0x1000, Size: 8]
	FName RFootSocketName;//[Offset: 0x1008, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0x1010, Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0x1014, Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0x1018, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0x101c, Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0x1020, Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0x1024, Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0x1028, Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102c, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0x1030, Size: 12]
	byte PoseState;//[Offset: 0x103c, Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0x1040, Size: 4]
	Actor* ThePlane;//[Offset: 0x1044, Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0x1048, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0x104c, Size: 12]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1058, Size: 1]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1059, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105a, Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1068, Size: 1]
	float VaultCheckBroadcastInterval;//[Offset: 0x106c, Size: 4]
	bool bEnableSinkEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x1074, Size: 4]
	RepMovementKeyLoc RepMovementKeyLoc;//[Offset: 0x107c, Size: 36]
	byte ClientSidePoseState;//[Offset: 0x10a4, Size: 1]
	float RadialDamageScale;//[Offset: 0x10a8, Size: 4]
	float RadialDamageReduce;//[Offset: 0x10ac, Size: 4]
	float MomentumResistanceScale;//[Offset: 0x10b0, Size: 4]
	float MomentumResistanceFixed;//[Offset: 0x10b4, Size: 4]
	float MoveOptimizeChangeCD;//[Offset: 0x115c, Size: 4]
	byte LastPoseState;//[Offset: 0x1164, Size: 1]
	float LastSwitchCharPoseTime;//[Offset: 0x1168, Size: 4]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0x1184, Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118c, Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118d, Size: 1]
	bool bAttachmentRepNotifyAlways;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118e, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118f, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0x1190, Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1194, Size: 1]
	bool bRespawnResetAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1195, Size: 1]
	bool bRespawnClearAttrModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1196, Size: 1]
	bool bRespawnClearAllbuffs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1197, Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0x1198, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x119c, Size: 12]
	Actor*[] PlayerSlotData;//[Offset: 0x11a8, Size: 12]
	Actor*[] InventoryData;//[Offset: 0x11b4, Size: 12]
	AkComponent* SoundComp;//[Offset: 0x120c, Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0x1210, Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1214, Size: 1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1215, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0x1218, Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0x121c, Size: 4]
	AkAudioEvent* AkHitHeadWithHelmet;//[Offset: 0x1220, Size: 4]
	AkAudioEvent* AkHitHeadWithoutHelmet;//[Offset: 0x1224, Size: 4]
	enum[] ModesIgnoreHitHead;//[Offset: 0x1228, Size: 12]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x1234, Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0x1270, Size: 4]
	Vector2D MeshContainerDefaultOffsetXY;//[Offset: 0x1274, Size: 8]
	int CurrentTaskTriggerAreaID;//[Offset: 0x127c, Size: 4]
	float ProduceSoundInterval;//[Offset: 0x1280, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0x1284, Size: 4]
	float HearRadius;//[Offset: 0x1288, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1299, Size: 1]
	byte EnsureStyle;//[Offset: 0x129a, Size: 1]
	uint32 EnsureLevel;//[Offset: 0x129c, Size: 4]
	int MLEnsureStyle;//[Offset: 0x12a0, Size: 4]
	Actor* WaterObj;//[Offset: 0x12a4, Size: 4]
	byte DSHitPartJudgment;//[Offset: 0x12a9, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x12ac, Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x12b0, Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x12b4, Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b8, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0x12bc, Size: 4]
	float NearDeathBreath;//[Offset: 0x12c0, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c4, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x12c8, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0x12d4, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x12d8, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x12e0, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x12e8, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x12f0, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x12f8, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1300, Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0x133c, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x1348, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x1354, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x1358, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x1364, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x1368, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x136c, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x1374, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x1380, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x1384, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x1388, Size: 4]
	float ScopeLagScale;//[Offset: 0x1390, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x1394, Size: 4]
	float ScopeFov;//[Offset: 0x1398, Size: 4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139c, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x13a0, Size: 4]
	bool bAIDropToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a4, Size: 1]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x13a8, Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x13ac, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x13b0, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x13b4, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x13b8, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x13c4, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d0, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x13d4, Size: 4]
	bool bFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d8, Size: 1]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x13dc, Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x13e0, Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0x13e4, Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x13e8, Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0x13ec, Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x13f0, Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f4, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x13f8, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x1408, Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x1414, Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x1420, Size: 12]
	delegate OnMovementBaseChanged;//[Offset: 0x142c, Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1438, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1439, Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143a, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x143c, Size: 4]
	Vector ProneBoxRelativeLocation;//[Offset: 0x1440, Size: 12]
	float DamageCauserRecordKeepTime;//[Offset: 0x144c, Size: 4]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x1450, Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x145c, Size: 12]
	<STExtraPlayerState*,int> PlayerLastDamageTime;//[Offset: 0x1468, Size: 60]
	int MaxRecordOvertimeAssistTime;//[Offset: 0x14a4, Size: 4]
	float LastDamageTime;//[Offset: 0x14a8, Size: 4]
	float OutOfContestConfig;//[Offset: 0x14ac, Size: 4]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x14b0, Size: 4]
	bool AttackerNeedReceiveDamageRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b4, Size: 1]
	float PickUpRadius;//[Offset: 0x14b8, Size: 4]
	bool bSyncCameraByChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bc, Size: 1]
	SimLocalViewData SimulateViewData;//[Offset: 0x14c0, Size: 16]
	SimViewData NetSimulateViewData;//[Offset: 0x14d0, Size: 6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e4, Size: 1]
	AnchorPlatData AnchorPlat;//[Offset: 0x14e8, Size: 8]
	bool bShouldIgnorePVSTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b0, Size: 1]
	<int,class AnimInstance> SkillSubAnimInstances;//[Offset: 0x15cc, Size: 60]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1610, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1638, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x164c, Size: 12]
	float JumpCheckImmediatelyBlockZVelocityRate;//[Offset: 0x1658, Size: 4]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x165c, Size: 12]
	bool bCanSwitchToSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1668, Size: 1]
	delegate OnPlayWeaponSound;//[Offset: 0x166c, Size: 12]
	float MaxDispalyFootprintDistance;//[Offset: 0x1678, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x167c, Size: 12]
	Vector DefaultMeshLoc;//[Offset: 0x1688, Size: 12]
	InteractiveMoveActor* CurrentInteractiveMoveActor;//[Offset: 0x1694, Size: 4]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x1698, Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x169c, Size: 4]
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x16a0, Size: 4]
	class AnimInstance* AvatarAnimClassCache;//[Offset: 0x16a4, Size: 4]
	bool IsNetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a8, Size: 1]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a9, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x16ac, Size: 4]
	float EmoteAnimLastTime;//[Offset: 0x16b0, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x16b4, Size: 12]
	delegate EmoteReadyToPlayNext;//[Offset: 0x16c0, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x16cc, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x16d8, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x16e8, Size: 40]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1710, Size: 1]
	bool bStopEmoteLoadCallbackWhenCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1711, Size: 1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x1714, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x1718, Size: 4]
	bool bEnablePlayerPickUpAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1744, Size: 1]
	bool bEnablePlayerDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1745, Size: 1]
	bool bRecordKillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1746, Size: 1]
	float AIThrowPitch;//[Offset: 0x1748, Size: 4]
	Vector2D AISpeedScale;//[Offset: 0x174c, Size: 8]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0x1754, Size: 4]
	bool bValidCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1758, Size: 1]
	bool bExtraSwitchToGrenadeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1759, Size: 1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x175c, Size: 60]
	<int,enum> PawnStateRelatedBuffIDMap;//[Offset: 0x1798, Size: 60]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x17d4, Size: 12]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e0, Size: 1]
	float ForceSyncMovementStateDeltaTime;//[Offset: 0x17e4, Size: 4]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ed, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x17f0, Size: 4]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x17f4, Size: 12]
	float LastSyncHealthChange;//[Offset: 0x1800, Size: 4]
	Vector CurInputVector;//[Offset: 0x1804, Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0x1810, Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x1820, Size: 4]
	int[] DisableConfigAttrPoseMoveIndexs;//[Offset: 0x1824, Size: 12]
	float voiceCheckCD;//[Offset: 0x1830, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x1834, Size: 4]
	float voiceCheckDis;//[Offset: 0x1838, Size: 4]
	float voiceCheckDisInParachute;//[Offset: 0x183c, Size: 4]
	bool voiceCheckInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1840, Size: 1]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x1844, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x1860, Size: 60]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x189c, Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x18ac, Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0x18b0, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x18b4, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x18b8, Size: 4]
	int HandFolderRatio;//[Offset: 0x18bc, Size: 4]
	float SwimUpRate;//[Offset: 0x18c0, Size: 4]
	PlayerSwimComponent* SwimComponet;//[Offset: 0x18c4, Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c9, Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18ca, Size: 1]
	WeaponRecordDataForReplay WeaponRecordDataForReplay;//[Offset: 0x18d4, Size: 12]
	bool SkipCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e0, Size: 1]
	bool bIsOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e1, Size: 1]
	float UpdateAIPawnInfoTime;//[Offset: 0x18e4, Size: 4]
	PickUpItemData[] CacheDropList;//[Offset: 0x18ec, Size: 12]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f8, Size: 1]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f9, Size: 1]
	bool bForceDiffStateOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fa, Size: 1]
	Vector MoveInputState;//[Offset: 0x192c, Size: 12]
	byte MovementInputReplication;//[Offset: 0x1938, Size: 1]
	float SwitchPoseCD;//[Offset: 0x195c, Size: 4]
	float SwitchPoseStartTime;//[Offset: 0x1960, Size: 4]
	float SwitchPerspectiveStartTime;//[Offset: 0x1964, Size: 4]
	bool bWatchProneStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1968, Size: 1]
	bool bHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1980, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x1994, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x199c, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x19b0, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x19e0, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1a28, Size: 4]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x1a2c, Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1a30, Size: 4]
	float DelayHideDuration;//[Offset: 0x1a34, Size: 4]
	float DelayResetStandDuration;//[Offset: 0x1a38, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1a3c, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a40, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x1a44, Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a60, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1a64, Size: 192]
	AnimParamList CurAnimParamList;//[Offset: 0x1b24, Size: 316]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1c60, Size: 184]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x1d18, Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x1d48, Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x1d68, Size: 32]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x1d88, Size: 12]
	byte ThrowGrenadeMode;//[Offset: 0x1d94, Size: 1]
	bool bShowHPFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da4, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da5, Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da6, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x1da8, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db0, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1db4, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1db8, Size: 4]
	float HighWalkSpeed;//[Offset: 0x1dd0, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1dd4, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x1dd8, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1ddc, Size: 4]
	float MaxProneSpeed;//[Offset: 0x1de0, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1de4, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x1de8, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1dec, Size: 4]
	float HealthPredict;//[Offset: 0x1df0, Size: 4]
	float BreathAmount;//[Offset: 0x1df4, Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1df8, Size: 1]
	int PoisonSmogStage;//[Offset: 0x1dfc, Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1e00, Size: 4]
	float AntidoteExeTime;//[Offset: 0x1e04, Size: 4]
	float AntidoteMaxTime;//[Offset: 0x1e08, Size: 4]
	float SpeedDynamicScale;//[Offset: 0x1e0c, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1e10, Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1e14, Size: 12]
	byte HealthStatus;//[Offset: 0x1e20, Size: 1]
	byte LastHealthStatus;//[Offset: 0x1e21, Size: 1]
	delegate OnHealthStatusChangeDelegate;//[Offset: 0x1e24, Size: 12]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x1e30, Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6c, Size: 1]
	float SpeedRate;//[Offset: 0x1e70, Size: 4]
	float EnergySpeedScale;//[Offset: 0x1e74, Size: 4]
	float RecoveryScale;//[Offset: 0x1e78, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x1e7c, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x1e80, Size: 4]
	float SwitchWeaponSpeedScale;//[Offset: 0x1e84, Size: 4]
	BackpackReplayData BackpackReplayData;//[Offset: 0x1e88, Size: 32]
	CharacterEnergyData Energy;//[Offset: 0x1ea8, Size: 52]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x1edc, Size: 12]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee8, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1eec, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1ef0, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1ef4, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x1ef8, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1f00, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1f04, Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x1f0c, Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f10, Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x1f14, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1f18, Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1f1c, Size: 4]
	float StandHalfHeight;//[Offset: 0x1f20, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x1f24, Size: 4]
	float ProneHalfHeight;//[Offset: 0x1f28, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1f2c, Size: 4]
	float StandRadius;//[Offset: 0x1f30, Size: 4]
	float DyingRadius;//[Offset: 0x1f34, Size: 4]
	float DyingBeCarriedRadius;//[Offset: 0x1f38, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x1f3c, Size: 12]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x1f48, Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x1f54, Size: 4]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f64, Size: 1]
	delegate InAssistantStateDelegate;//[Offset: 0x1f68, Size: 12]
	Actor* CurrentAttachParent;//[Offset: 0x1f74, Size: 8]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f7c, Size: 1]
	RepVehicleAttachment VehicleReplication;//[Offset: 0x1f80, Size: 24]
	RepVehicleAttachment CurrentVehicleAttachment;//[Offset: 0x1f98, Size: 24]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x1fb4, Size: 4]
	float LastVehicleDamageCD;//[Offset: 0x1fb8, Size: 4]
	float LastLeaveVehicleTime;//[Offset: 0x1fbc, Size: 4]
	int VehicleSeatIdx;//[Offset: 0x1fc0, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fca, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x1fcc, Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe8, Size: 1]
	PredictLineComponent* PredictLineComp;//[Offset: 0x1fec, Size: 4]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x1ff0, Size: 4]
	CharacterPlayEmoteComponent* PlayEmoteComponent;//[Offset: 0x1ff4, Size: 4]
	CharacterFormationComponent* FormationComponent;//[Offset: 0x1ff8, Size: 4]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x1ffc, Size: 4]
	delegate OnAttachedToVehicle;//[Offset: 0x203c, Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x2048, Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x2054, Size: 12]
	delegate OnPlayerStateUpdated;//[Offset: 0x2060, Size: 12]
	float MaxLeaveVehicleVelocity;//[Offset: 0x2084, Size: 4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x2094, Size: 12]
	Rotator AngledSightRotOffset;//[Offset: 0x20a0, Size: 12]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x21b0, Size: 4]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b4, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x21b8, Size: 4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x21d4, Size: 60]
	STParachuteState STReplicateParchuteState;//[Offset: 0x2210, Size: 24]
	SlideMoveData SlideMoveData;//[Offset: 0x2228, Size: 20]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x223c, Size: 4]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x2240, Size: 48]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2270, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x2274, Size: 4]
	float MoveRightInputValue;//[Offset: 0x2278, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x227c, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x2280, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2284, Size: 1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2285, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2288, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x228c, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x2294, Size: 4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x2298, Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x22a4, Size: 4]
	enum FollowState;//[Offset: 0x22a8, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x22ac, Size: 12]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x22b8, Size: 12]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x22c4, Size: 12]
	FString LatestInviter;//[Offset: 0x22d0, Size: 12]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22dc, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x2320, Size: 4]
	float maxShowAlpha;//[Offset: 0x2328, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x232c, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x2330, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x2334, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x2360, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x2364, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x2368, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23ac, Size: 1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x23bc, Size: 12]
	float CollectPlayerRouteInterval;//[Offset: 0x23cc, Size: 4]
	int IsEnableReportRoute;//[Offset: 0x2450, Size: 4]
	int CurrentPlayEmoteId;//[Offset: 0x2458, Size: 4]
	bool IsHandedWeaponBeforePlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2464, Size: 1]
	Vector EmoteColBox;//[Offset: 0x2498, Size: 12]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x24a4, Size: 60]
	int IsEnableLogAIPlayerPos;//[Offset: 0x24e8, Size: 4]
	float CompVisionOpDis;//[Offset: 0x24ec, Size: 4]
	float CompVisionOpDelay;//[Offset: 0x24f0, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f4, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x2504, Size: 60]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2540, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x2548, Size: 4]
	float MaxRelavantDistanceSquared;//[Offset: 0x254c, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x2550, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x2554, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x2558, Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x255c, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x2560, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x2564, Size: 4]
	bool EnableDyingInVehicleMeshCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2568, Size: 1]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2569, Size: 1]
	BaseFPPComponent* FPPComp;//[Offset: 0x2570, Size: 4]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x2574, Size: 4]
	UAEChaCustomAnimListComponent* OwnedChaCustomAnimComp;//[Offset: 0x2578, Size: 4]
	float ClientSwitchWeaponDeltaTime;//[Offset: 0x2584, Size: 4]
	float ClientCallSwitchWeaponDur;//[Offset: 0x2588, Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258c, Size: 1]
	bool bExitingParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258d, Size: 1]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258e, Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x2590, Size: 12]
	float CharacterFallingVelocityZFactor;//[Offset: 0x25a0, Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b8, Size: 1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b9, Size: 1]
	int AloneDistance;//[Offset: 0x25c0, Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x25c4, Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x25d0, Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x25f8, Size: 4]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x25fc, Size: 4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x2600, Size: 12]
	SoftObjectPath ChangeWearingIconPath;//[Offset: 0x2650, Size: 24]
	Vector ChangeWearingColBox;//[Offset: 0x2668, Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x2678, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x267c, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x267d, Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x2680, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x2684, Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x2688, Size: 4]
	Actor* DecalActor;//[Offset: 0x268c, Size: 4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2690, Size: 1]
	float OutBattleStateTime;//[Offset: 0x2694, Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x269c, Size: 12]
	delegate OnCharacterPlayEmote;//[Offset: 0x26a8, Size: 12]
	delegate OnAutonomousCharacterPlayEmote;//[Offset: 0x26b4, Size: 12]
	delegate OnCharacterWin;//[Offset: 0x26c0, Size: 12]
	delegate OnCharacterFallingModeChange;//[Offset: 0x26cc, Size: 12]
	Vector LastServerHitImpactPoint;//[Offset: 0x26d8, Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x26e4, Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x26e5, Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e6, Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x26e8, Size: 12]
	int MonsterDamageReduceSkillID;//[Offset: 0x26f4, Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x26f8, Size: 60]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x2734, Size: 4]
	STExtraBaseCharacter* InteractionEmoteReceiver;//[Offset: 0x2738, Size: 4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2746, Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x2748, Size: 12]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x2754, Size: 4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x2758, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x276c, Size: 252]
	byte MeleeAutoAimType;//[Offset: 0x2868, Size: 1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2874, Size: 1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x2878, Size: 32]
	CharacterHide CharacterHide;//[Offset: 0x2898, Size: 12]
	float CharacterShowWeaponTime;//[Offset: 0x28a4, Size: 4]
	bool bForbiddenRespawnAfterConstructSetClientLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28aa, Size: 1]
	enum CharacterMainType;//[Offset: 0x28ab, Size: 1]
	enum CharacterSubType;//[Offset: 0x28ac, Size: 1]
	delegate BulletTrackShowDelegate;//[Offset: 0x28b0, Size: 12]
	delegate OnClientHoldGrenadeStateChange;//[Offset: 0x28bc, Size: 12]
	delegate MarkPlayerPosDelegate;//[Offset: 0x28c8, Size: 12]
	delegate OnPlayerOpenDoorDelegate;//[Offset: 0x28d4, Size: 12]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x28e0, Size: 4]
	PlayerMantleComponent* VaultControllerComp;//[Offset: 0x28e4, Size: 4]
	AnimParamsComponent* AnimParamsComponent;//[Offset: 0x28e8, Size: 4]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28ec, Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28ed, Size: 1]
	bool bEnableSetMeshUpdateFlagInBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28ee, Size: 1]
	delegate OnUseSpringJump;//[Offset: 0x28f0, Size: 12]
	float LastSprintTriggerTime;//[Offset: 0x28fc, Size: 4]
	float FallingTime;//[Offset: 0x2904, Size: 4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2908, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2909, Size: 1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290a, Size: 1]
	Actor* MyConstActor;//[Offset: 0x290c, Size: 4]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2910, Size: 1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x2914, Size: 12]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x2920, Size: 4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x2928, Size: 4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x2934, Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x2938, Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x293c, Size: 4]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2949, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294a, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x294c, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x2954, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x2960, Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x2990, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x2994, Size: 12]
	float ParticleShowingInterval;//[Offset: 0x29a0, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a8, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a9, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x29b0, Size: 40]
	Vector MoveAdditionalSpeed;//[Offset: 0x29d8, Size: 12]
	int CharacterMovementReplicatID;//[Offset: 0x29e4, Size: 4]
	int CharacterReplicatID;//[Offset: 0x29e8, Size: 4]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x29ec, Size: 4]
	float RTNoDamageTime;//[Offset: 0x29f0, Size: 4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f4, Size: 1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29fc, Size: 1]
	float MinWingUpControlTime;//[Offset: 0x2a08, Size: 4]
	WidgetComponent* PlayerInfoWidgetComp;//[Offset: 0x2a0c, Size: 4]
	FString DebugInfoWidgetPath;//[Offset: 0x2a10, Size: 12]
	FString DebugInfoWidgetRefreshFunName;//[Offset: 0x2a1c, Size: 12]
	Vector DebugInfoLocation;//[Offset: 0x2a28, Size: 12]
	Actor* ACurrentFloor;//[Offset: 0x2a34, Size: 8]
	bool IsMotifyAutoUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3c, Size: 1]
	bool IsMotifyAttackerByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3d, Size: 1]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x2a40, Size: 4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x2a44, Size: 4]
	float[] AIHotValueDebugInfo;//[Offset: 0x2a48, Size: 12]
	Actor*[] OverlapDarkAreas;//[Offset: 0x2a54, Size: 12]
	float SwimmingSwitchMovementModeCD;//[Offset: 0x2a60, Size: 4]
	int PrepareEmoteId;//[Offset: 0x2a68, Size: 4]
	FString EmoteSouceEventName;//[Offset: 0x2a6c, Size: 12]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2a78, Size: 4]
	bool bIsInUnderGroundArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7c, Size: 1]
	bool bIsAroundUndergroundEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7d, Size: 1]
	bool bIsSkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7e, Size: 1]
	bool bMoveHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7f, Size: 1]
	uint32 SightVisionMask;//[Offset: 0x2a80, Size: 4]
	bool bUnderWaterPoseCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a85, Size: 1]
	bool bReviseIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a86, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a87, Size: 1]
	int nRepShoulderState;//[Offset: 0x2a88, Size: 4]
	int nCurShoulderStateCount;//[Offset: 0x2a8c, Size: 4]
	bool bForceChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a90, Size: 1]
	bool bSkillLockChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a91, Size: 1]
	bool bEmoteLockChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a92, Size: 1]
	float SimulateFootstepQueryInternal;//[Offset: 0x2b28, Size: 4]
	<int> NotDownloadPetIDs;//[Offset: 0x2b34, Size: 60]
	bool bDisableAttachRepInBeCarried;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b70, Size: 1]
	NetCarryBackState NetCarryBackState;//[Offset: 0x2b74, Size: 12]
	STCharacterCarryBackComp* CarryBackComponent;//[Offset: 0x2b80, Size: 4]
	DynamicOptimizeActorComponents* DynamicOptimizeActorComponent;//[Offset: 0x2b84, Size: 4]
	delegate OnCharacterHiddenStateChange;//[Offset: 0x2b88, Size: 12]
	BattleRoyaleGameMode* CachedGameMode;//[Offset: 0x2b94, Size: 4]
	bool EnablePlayEmoteAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b99, Size: 1]
	float DefaultEmoteFollowCheckTime;//[Offset: 0x2b9c, Size: 4]
	float DefaultEmoteFollowCheckRange;//[Offset: 0x2ba0, Size: 4]
	float DefaultCoopEmoteCheckInterval;//[Offset: 0x2ba4, Size: 4]
	float DefaultCoopEmoteCheckRange;//[Offset: 0x2ba8, Size: 4]
	float CoopEmoteTargetOffset;//[Offset: 0x2bac, Size: 4]
	float CoopEmoteCheckGroundHeight;//[Offset: 0x2bb0, Size: 4]
	bool bFollowEmoteNeedRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bb4, Size: 1]
	STExtraBaseCharacter* CachedCoopEmotePlayer;//[Offset: 0x2bc4, Size: 8]
	BlowUpData CurrentBlowUpData;//[Offset: 0x2be0, Size: 44]
	delegate OnBlowUpCharacter;//[Offset: 0x2c0c, Size: 12]
	bool bNeedPlayVehicleEnterMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c20, Size: 1]
	bool EnableAireBorneAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c21, Size: 1]
	bool UseNewParachuteMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c22, Size: 1]
	float AirBornCanCurrentAbsoluteMaxHight;//[Offset: 0x2c24, Size: 4]
	float PawnCreateTime;//[Offset: 0x2c28, Size: 4]
	float PawnDestroyTime;//[Offset: 0x2c2c, Size: 4]
	float CheckCanStandOffset;//[Offset: 0x2c30, Size: 4]
	byte MoveSpeedParamMonitorStrategy;//[Offset: 0x2c34, Size: 1]
	NetMoveSpeedParameter ReplicatedServerMoveSpeedParam;//[Offset: 0x2c38, Size: 8]
	NetMoveSpeedParameter ReplicatedClientMoveSpeedParam;//[Offset: 0x2c40, Size: 8]
	float ExceptionMonitorInterval;//[Offset: 0x2c4c, Size: 4]
	int ExceptionMonitorHitTimes;//[Offset: 0x2c50, Size: 4]
	<int,enum> AttrStateMap;//[Offset: 0x2c54, Size: 60]
	float LowMoveSpeedThreshold;//[Offset: 0x2c90, Size: 4]
	bool bReportedModifierException;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c94, Size: 1]
	bool bReportedSpeedException;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c95, Size: 1]
	SplineMoveInfo SplineMoveInfo;//[Offset: 0x2ca4, Size: 8]
	delegate OnServerPlayerTryEnterSpline;//[Offset: 0x2cac, Size: 12]
	delegate OnClientPlayerLeaveSpline;//[Offset: 0x2cb8, Size: 12]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x3874ee4
	void VaultFailPawnCPP(const FString Content);// 0x3874e20
	void VaultFailPawnBluePrint(out const FString Content);// 0x3874d4c
	bool ValidCalculate();// 0x3874d24
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x3874c68
	void UseSpringJump(int SpringID);// 0x3874bf0
	void UserCancelRescue();// 0x3874bdc
	bool UpdateShovelingState();// 0x3874bb4
	void UpdateShovelingHoldStateRelease();// 0x3874ba0
	void UpdateShovelingHoldStatePressed();// 0x3874b8c
	void UpdatePoseCollisionCpp(byte CurState, byte preState);// 0x3874ad0
	void UpdateFallingTime(float Delta);// 0x3874a58
	void UpdateDynamicHoldGunOption();// 0x3874a44
	void UpdateCurrentShootWeaponTick();// 0x3874a30
	void UpdateAttrValue(FString AttrName, float Val, int Reason, bool bSet);// 0x387489c
	void UpdateAllInstanceBodyTransform(int Type);// 0x3874824
	void UnequipWeaponFinish();// 0x34f4004
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x3874760
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadshot, Actor* DamageCauser);// 0x3874598
	void TryReplaySpecialMontage();// 0x3874584
	void TryRecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x38744c8
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x38743f8
	bool TryFollowInitialParachuteLeader(FString Name);// 0x3874298
	bool TriggerEntrySkillWithParams(int SkillID, out const FString[] InKeyStrings, bool bEnable);// 0x38740b8
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x3873fe4
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(byte NewMode, byte PrevMode);// 0x49216cc
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x49216cc
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x3873e80
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x3873e00
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x3873d2c
	bool SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x3873bbc
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x3873a9c
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bSwitchToNoneWhenNoWeapon);// 0x3873928
	bool SwitchToGrenadeCheck(int GrenadeID);// 0x38738a0
	void SwitchShoulderStateServer(bool bShoulder, int nClientShouldState);// 0x3873790
	void SwitchShoulderStateLocal(bool bShoulder);// 0x3873708
	void SwitchShoulderState(bool bShoulder);// 0x3873688
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x38734c8
	void SwapMainWeapon();// 0x38734b4
	void STServerUpdateStateUnreliaby(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x387332c
	void STServerUpdateStateDirectly(float InThrottleInput, float InSteeringInput, Vector InLocalVelocity);// 0x38731d0
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x3873048
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x3872f38
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x3872eb8
	void StopMove();// 0x3872ea4
	void StopLastEmoteParticle();// 0x3872e90
	bool StopFireFilter();// 0x3872e60
	void StopFire();// 0x3872e4c
	void StopFillGas();// 0x3872e38
	bool StopChangeWearingAnim();// 0x3872e10
	void StopCarryBack(enum InDetachMethod);// 0x3872d98
	void StopAnimMontageOriginal(AnimMontage* AnimMontage);// 0x3872d20
	void StopAnimMontageExtra(AnimMontage* AnimMontage, FName IgnoreStopSection);// 0x3872c64
	void StopAllMontages(FString GroupName);// 0x3872b0c
	void StopAllAnimations(bool bStop);// 0x3872a8c
	void StartWaitRefreshShootDetailInfo();// 0x3872a78
	bool StartPlayEmoteAnim(int EmoteIndex, uint32 FollowPlayerKey);// 0x38729b4
	void StartFireSimple(byte ShootMode);// 0x3872934
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x38728ac
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x38726c0
	void StartFillGas();// 0x38726ac
	bool StartChangeWearingAnim();// 0x3872684
	void SpawnFootprint(enum FootprintType);// 0x387260c
	void SpawnAndSwithToGrenadeServerCall(int InGrenadeID);// 0x3872558
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(int GrenadeID);// 0x38724d8
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(int GrenadeID);// 0x3872458
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x387229c
	void SimulatedPlayEmote(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x387214c
	void ShowPlayerDebugInfo(bool bShow, FString[] BasicInfoKeys, FString[] DetailInfoKeys);// 0x3871d20
	void ShowNightVisionFrame();// 0x3871d04
	void ShowInjuryScreenEffect();// 0x3871cf0
	void ShowDebugRole();// 0x3871cdc
	void ShowDebugRecordData();// 0x3871cc8
	void ShowDebugPickUpFlow();// 0x3871cb4
	void ShowDebugEquipOrUnequipFlow();// 0x3871ca0
	void ShowDebugBornLandFlow();// 0x3871c8c
	void ShowConfirmDialogOfMisKill();// 0x3871c70
	bool ShouldUpdateHPOnUI();// 0x3871c40
	bool ShouldShowCorp();// 0x3871c18
	bool ShouldShowCoopEmoteBtn(EmotePlayer EmotePlayer);// 0x3871b4c
	bool ShouldShowAnchor();// 0x3871b24
	bool ShouldForceFPP();// 0x3871afc
	bool ShouldCheckCoopEmote();// 0x3871acc
	bool ShouldAutoScopeWhenPeek();// 0x3871a9c
	enum ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x38719b4
	void SeverParachuteSimualteDrag(uint32 DragCount);// 0x3871900
	void SetWeaponShootType(byte ShootType);// 0x3871888
	void SetViewTargetAgainForOB();// 0x3871874
	void SetThrowGrenadeMode(byte ThrowMode);// 0x38717fc
	void SetTargetPlayer(STExtraBaseCharacter* InTargetPlayer);// 0x3871784
	void SetSightVision(bool Enable, enum Flag);// 0x38716bc
	void SetSightCondition(bool Enable, enum Flag);// 0x38716bc
	void SetRTNoDamageTimer(float Timer);// 0x3871644
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x3871580
	void SetPrepareEmoteId(int InEmoteID);// 0x3871508
	void SetPoseState(byte NewPoseState);// 0x3871490
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x3871408
	void SetOverrideCirclePainActor(Actor* CirclePainActor);// 0x3871390
	void SetMLEnsureStyle(int InMLStyle);// 0x3871310
	void SetMeshForceAnimLOD(int InNewForceAnimLOD);// 0x3871298
	void SetMeshContainerOffsetZ(float Z);// 0x3871220
	void SetMeshContainerOffsetY(float Y);// 0x38711a8
	void SetMeshContainerOffsetX(float X);// 0x3871130
	void SetMEnsure(bool bMValue);// 0x38710a8
	void SetIsDuringTransferLeader(bool isTransfer);// 0x3871028
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x3870f60
	void SetInsectCameraEnable(bool bEnable);// 0x3870ee0
	void SetHitAnimInfo(Actor* DamageCauser);// 0x3870e68
	void SetHighWalkSpeed(float WalkSpeed);// 0x3870df0
	void SetHealthSafety(float NewHealth, byte Reason);// 0x3870d34
	void SetHandFoldRatio(int Ratio);// 0x3870cbc
	static void SetExpandDataContent(out const byte[] Content);// 0x3870bf8
	void SetExitingParachute(bool ExitParachute);// 0x3870b78
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x3870af8
	void SetEnsureStyle(byte InStyle);// 0x3870a80
	void SetEnsureLevel(uint32 InLevel);// 0x3870a08
	void SetEnsure(bool bValue);// 0x3870980
	void SetEmoteSouceEventName(FString EventName);// 0x3870828
	void SetDelayStateSwitchTime(float DelayTime);// 0x38707b0
	void SetDefaultWaterHeight(float InDefaultWater);// 0x3870738
	void SetCurScopeFov(float InFov);// 0x38706c0
	void SetCurrentVehicle(STExtraVehicleBase* InVehicle);// 0x387064c
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool ForceSetting);// 0x3870574
	void SetCurrentFloor(Actor* floor);// 0x38704fc
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x3870430
	void SetCheatSpeedModifier(float NewModifier);// 0x38703b0
	void SetCharAnimUpdateFlag();// 0x3870394
	void SetCharAnimInstanceClass(class Object NewAnimClass, FString SetReason, bool bForceClearOldAnim);// 0x3870240
	void SetCharacterHideInGame(bool bHide, bool bStopTick, bool bCloseCollision, float fScale);// 0x38700d4
	void SetChangeWearingPromptEnable(bool bShow);// 0x3870054
	void SetBasePoseStateMachineSwitching(bool bIsSwitching);// 0x386ffd4
	void SetBaseBluePrint(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x386fec4
	void SetAttachmentExtraData(int SeatIndex);// 0x386fe4c
	void SetAttachment(Actor* InAttachParent, SceneComponent* InAttachComponent, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D, FName AttachSocket);// 0x386fc5c
	void SetAntidoteMaxTime(float MaxTime);// 0x386fbe4
	void SetAntidoteExeTime(float ExeTime);// 0x386fb6c
	void SetAnimParamIsRescueing(bool Val);// 0x386faec
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x386fa6c
	void SetAnimParamClimbAnimTime(float ExplicitTime, bool bFlag);// 0x386f9a8
	void SetAnimParamClimbAnimSwitch(bool bFlag, float TransTime);// 0x386f8e0
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x386f860
	void SetAnimParamAlwaysLandLight(bool bAlwaysLandLight);// 0x386f7e0
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x386f724
	void SetAnimListComponentChild(UAECharAnimListCompBase* ChildComp, bool Add, byte AddLayer, byte AnimOverrideType);// 0x386f5d0
	void SetAmbientRTPC(FString RTPC, float Value);// 0x386f434
	void SetAIActive(bool bActive);// 0x386f3b4
	void SetActorLocationServerAndClient(Vector Location);// 0x386f344
	bool SetActorLocationSafetyWithParams(Vector NewLocation, out const ResolvePenetrationParams ResolveParams);// 0x386f17c
	bool SetActorLocationSafety(Vector NewLocation);// 0x386f104
	void ServerUpdateShovelingHoldState(bool ishold);// 0x386f03c
	void ServerTryEnterSpline(SplineComponent* InSpline, Vector EnterLocation, Rotator EnterRotation);// 0x386eedc
	void ServerTriggerJump();// 0x386ee80
	void ServerSetPoisonSmogStage(int SmogStage);// 0x386ee08
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x386ece4
	void ServerSetPeekCollision(bool HasCollision);// 0x386ec1c
	void ServerSetMovementStateNewReliable(byte Input);// 0x386eb68
	void ServerSetMovementStateNew(byte Input);// 0x386eab4
	void ServerSetMovementState(Vector Input);// 0x386ea08
	void ServerSendToLobbyServerUseItem(int ItemId, int Count);// 0x386e94c
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x386e768
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x386e5b4
	void ServerOnCoopEmotePhaseChange(int CoopPhase);// 0x49216cc
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x386e478
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x386e398
	void ServerFollowTeammate(FString Name);// 0x386e2a4
	void ServerDropCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x386e1f0
	bool ServerCheckEmoteCanPlay(int EmoteIndex);// 0x386e168
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x386e0b4
	void ServerCancelFollow();// 0x386e058
	void SendServerMoveToClientUnreliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x386df20
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x386dde8
	void SendServerMoveToAdjustClient(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x386dcb0
	void SendClientMoveToServerUnreliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x386db38
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x386d9c0
	void SendClientMoveToServerReliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x386d848
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x386d6d0
	void SendClientMoveToServerAccurate(float TimeStamp, float ThrottleInput, float SteerInput, float GlidingSpeed, enum State, Rotator CameraRotation, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x386d3c4
	void SendAckServerMoveToClient(float TimeStamp);// 0x386d344
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x386d220
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x386d11c
	void Scoping(byte NewType);// 0x386d0a4
	void ScopeOut(byte NewType);// 0x386d02c
	void ScopeInterrupt(byte NewType);// 0x386cfb4
	void ScopeIn(byte NewType);// 0x386cf3c
	void SaveMeshUpdateFlag();// 0x386cf18
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x386ce64
	void RspPlayInteractionEmote(int EmoteId);// 0x386cdb0
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x386cd28
	void RPC_Server_TriggerEntryEventWithParams(int SkillID, const FString[] InKeyStrings, bool bEnable);// 0x386cb20
	void RPC_Server_TriggerEntryEventByID(int SkillID, bool bEnable);// 0x386ca10
	void RPC_Server_SwitchWeaponShootInterval(STExtraShootWeapon* Weapon, enum Mode);// 0x386c914
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x386c748
	void RPC_Server_SwapMainWeapon();// 0x386c6ec
	void RPC_Server_SpawnAndSwitchToGrenade(int GrenadeID);// 0x386c638
	void RPC_Server_ShootVertifyFailAlarm(const enum VertifyRes, FString Tips);// 0x386c4fc
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x386c448
	void RPC_Server_SetCurScopeFov(float InFov);// 0x386c394
	void RPC_Server_SetCoopEmotePhase(int CoopPhase);// 0x386c2e0
	void RPC_Server_ReportSimulateCharacterLocation(STExtraBaseCharacter* MoveCharacter, const Vector Location, float TargetTime, int MoveType);// 0x386c154
	void RPC_Server_JoinCoopEmote(EmotePlayer EmotePlayer);// 0x386c044
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x386bfe8
	void RPC_Server_ChangeWeaponState(byte State, STExtraWeapon* Weapon);// 0x386beec
	void RPC_Server_ChangeToShootGrenade();// 0x386be90
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x386bddc
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x386bd28
	void RPC_Client_TeleportToFinish(bool bSuccess, Vector DestLocation, Rotator DestRotation);// 0x386bba8
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x386b9dc
	void RPC_Client_SwapMainWeapon();// 0x386b980
	void RPC_Client_SpawnAndSwitchToGrenade(int GrenadeID);// 0x386b8cc
	void RPC_Client_ShootVertifyRes(const enum VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x386b708
	void RPC_Client_ShootVertifyFailAlarm(const enum VertifyRes, FString Tips);// 0x386b5cc
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x386b518
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x386b464
	void RPC_Client_OnNearDeathRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x386b374
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x386b224
	void RPC_Client_OnDeathStopRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x386b134
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x386af88
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x386ace0
	void RPC_Client_OnCoopEmotePhaseChange(int CoopPhase);// 0x386ac2c
	void RPC_Client_NoticeSimulateMoveErrorRange(STExtraBaseCharacter* MoveCharacter, float ErrorRange, float TimeDif);// 0x386aae8
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x386a9f4
	void RPC_Client_LeaveSpline(SplineComponent* InSpline);// 0x386a940
	void RPC_Client_DrawDebugSphere(Vector Center, float Radius, int Segments, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x386a6cc
	void RPC_Client_DrawDebugLine(Vector LineStart, Vector LineEnd, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x386a49c
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x386a440
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x386a2e8
	void RestoreMeshUpdateFlag();// 0x386a2c4
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x386a130
	void ResetValueLimitForHealthPredict();// 0x386a11c
	void ResetCharAnimInstanceClass(FString SetReason, bool bForceClearOldAnim);// 0x386a00c
	void ResetCharacterEnergy();// 0x3869ff8
	void ResetCharacter();// 0x3869fdc
	void ResetCamera();// 0x3869fc8
	void ResetAnimInstanceClass();// 0x3869fb4
	void RequestWeaponStopFire(STExtraShootWeapon* ShootWeapon);// 0x3869f3c
	void RequestUserCancleRescue();// 0x3869ee0
	void RequestServerSureLeaveVehicle();// 0x3869e84
	void RequestServerAssistantTrackVehicle(bool bEnterAssistant);// 0x3869dbc
	bool RequestPaintDecal(int DecalId);// 0x3869d3c
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3869b98
	void ReqStartChangeWearing();// 0x3869b3c
	void ReqSetIsWingUpControl(bool IsUpControl);// 0x3869a74
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x38699c0
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x386987c
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x38697c8
	void ReqInteruptChangeWearing();// 0x386976c
	void ReqEmotePlayFinished(int EmoteIndex);// 0x38696b8
	void ReqChangeWearingFinished(int Index);// 0x3869604
	void ReqAcceptInteractionEmote();// 0x38695a8
	void ReportSpeedException();// 0x386958c
	void ReportPlayerLocationInfo();// 0x3869578
	void ReportExceptionOnVehicle(FString Type, FString Msg);// 0x49216cc
	void ReportAutonomousMoveSpeedParam(NetMoveSpeedParameter MoveSpeedParam);// 0x38694c0
	void ReportAttrException(int AttrIndex);// 0x3869440
	void ReportAntiCheatInfo();// 0x34f4004
	void RemoveClientLeaveStateCheck(enum State);// 0x38693c8
	void RemoveBuffWhenGotoPlane();// 0x38693b4
	bool ReloadWeaponFilter();// 0x3869384
	bool ReloadCurrentWeapon();// 0x386935c
	void RegisterPlayerPickUpList();// 0x3869348
	void RefreshVehicleReplication();// 0x3869334
	void RefreshPersonPerspective();// 0x3869320
	void RefreshPawnVaultTypeServer();// 0x38692c4
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x386923c
	void RefreshMoveAttrModifier();// 0x3869228
	void RefreshEmote();// 0x3869214
	void RefreshAvatar(enum SlotType, bool IsEquipped, int ItemId);// 0x3869108
	void RecordFinalParachuteLeader();// 0x38690f4
	void RecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x3869038
	void PrintAIPolicyDecisionData();// 0x3869024
	bool PreSwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x3868eb4
	void PreDoDrop(STExtraBaseCharacter* DamageCauser);// 0x3868e3c
	void PostGetPlayerAnimation();// 0x49216cc
	void PostCollectDropWrapperList();// 0x49216cc
	bool PoseOnGround(byte InPoseState);// 0x3868db4
	bool PlayWeaponSound(AkAudioEvent* WeaponSound, STExtraWeapon* Weapon);// 0x3868cf0
	void PlaySwitchSightSound(bool IsScopeIn);// 0x3868c70
	void PlaySwitchFireModeSound();// 0x3868c5c
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x3868be4
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime, const byte InLoopCount, const float InStartPos, const float LoopStartPos);// 0x38689b4
	void PlaySelfThrowAwayWeaponSound();// 0x38689a0
	void PlayPullBoltSound();// 0x386898c
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x386871c
	void PlayMountAccessoriesSound();// 0x3868708
	void PlayMagOUTSound();// 0x38686f4
	void PlayMagINSound();// 0x38686e0
	void PlayLocalShellDropFX();// 0x38686cc
	void PlayLoadBulletSound();// 0x38686b8
	void PlayFootstepSound(byte FootStepState);// 0x3868638
	bool PlayerConfirmToRescue();// 0x3868610
	void PlayEmoteSoundByEmoteId(int EmoteId);// 0x3868598
	bool PlayEmote_Autonomous(int EmoteId);// 0x3868518
	void PlayChangeMagazineSound();// 0x3868504
	float PlayAnimMontageExtra(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, bool bOnlyJumpToSectionWhilePlaying, FName IgnoreStopSection);// 0x3868354
	void PlayAmbientSound();// 0x3868340
	void PickUpWrapperAttachmentItem(Actor* Target, out const PickUpItemData ItemData, enum PickupAttachmentID, ItemDefineID TargetDefineID);// 0x386810c
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount, int BattleItemClientPickupType);// 0x3867ee8
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x3867da0
	void PawnVaultStopCPP();// 0x3867d84
	void PawnVaultStopBluePrint();// 0x3867d68
	void PawnVaultServerStopCheckCPP();// 0x3867d0c
	void PawnVaultServerStopCheckBluePrint();// 0x3867cf0
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x3867868
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x386748c
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x3867118
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x3866d88
	void PawnLeaveState(enum State);// 0x3866d08
	bool PawnHasState(enum PawnState);// 0x3866c80
	bool PawnEnterState(enum State);// 0x3866bf8
	bool PawnAllowState(enum State, bool withLog);// 0x3866b24
	void ParseServiceDebugInfo(out FString[] BasicInfoKeys, out FString[] DetailInfoKeys);// 0x38668e0
	void OnWeaponEquipmentUpdateHandled();// 0x38668c4
	void OnWeaponEquipmentUpdate();// 0x38668a8
	void OnWeaponDropStart(STExtraShootWeapon* ShootWeapon);// 0x3866830
	void OnWeaponDropFinished(STExtraShootWeapon* ShootWeapon);// 0x38667b8
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x38666f4
	void OnUnEquipWeapon();// 0x49216cc
	void OnStatusChanged();// 0x38666d8
	void OnStateLeave(enum EnteredState);// 0x3866658
	void OnStateEnter(enum EnteredState);// 0x38665d8
	void OnShowName(bool _IsShow, FString _Name);// 0x49216cc
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x3866558
	void OnScopeNotHandFold();// 0x3866544
	void OnScopeHandFold();// 0x3866530
	void OnRep_WaterObj();// 0x386651c
	void OnRep_VehicleSeatIdx();// 0x3866508
	void OnRep_VehicleReplication();// 0x38664f4
	void OnRep_UnmannedVehicleSyncData();// 0x38664d8
	void OnRep_ThrowGrenadeMode(byte PrevMode);// 0x3866460
	void OnRep_Temperature(float LastValue);// 0x38663e0
	void OnRep_SwitchWeaponSpeedScale();// 0x38663cc
	void OnRep_StatusChanged(byte prevStatus);// 0x386634c
	void OnRep_SightVisionMask();// 0x3866338
	void OnRep_ShowRevivalPointIcon();// 0x386631c
	void OnRep_ShowHPFX();// 0x3866308
	void OnRep_ShoulderStateChanged();// 0x38662ec
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x38662d8
	void OnRep_ScopeFov();// 0x38662c4
	void OnRep_RespawnResetAnim();// 0x38662b0
	void OnRep_ResetDataOnRespawn();// 0x386629c
	void OnRep_ReplicatedParachuteState();// 0x34f4004
	void OnRep_ReplicatedMoveState();// 0x3866288
	void OnRep_ReplicatedMovement();// 0x3605848
	void OnRep_ReplicatedIsStartParachute();// 0x3866274
	void OnRep_RemainUseSupplySpotTimes();// 0x3866260
	void OnRep_RemainUseEnhancerSpotTimes();// 0x386624c
	void OnRep_PoseStateNotify(byte LastState);// 0x38661d4
	void OnRep_PoisonFogStageChange();// 0x38661c0
	void OnRep_PlayerKey();// 0x3587b74
	void OnRep_PeekHasCollision();// 0x38661ac
	void OnRep_NetSimulateViewData();// 0x3866198
	void OnRep_MovementInputReplication();// 0x3866184
	void OnRep_MoneyNotify();// 0x3866170
	void OnRep_IsWingUpControl();// 0x386615c
	void OnRep_IsRescueingOtherStatusChange();// 0x3866148
	void OnRep_IsInvincible();// 0x386612c
	void OnRep_IsFPPChanged();// 0x3866110
	void OnRep_IsFakeOnVehicle();// 0x38660f4
	void OnRep_IsBeingRescuedStatusChange();// 0x38660e0
	void OnRep_InAssistantState();// 0x38660cc
	void OnRep_HealthPredict();// 0x38660b8
	void OnRep_HealthMax();// 0x386609c
	void OnRep_Health(float PrevHealth);// 0x34f690c
	void OnRep_HandFolderRatio();// 0x3866088
	void OnRep_FollowState();// 0x3866074
	void OnRep_EnergyChange();// 0x3866060
	void OnRep_DestroyOnDeath();// 0x386604c
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x3865fd4
	void OnRep_CurrentStates(uint64 prevStates);// 0x3865f50
	void OnRep_CharacterHide();// 0x3865f3c
	void OnRep_CharacterFallingVelocityZFactor();// 0x3865f28
	void OnRep_CarryBackStateChanged();// 0x3865f0c
	void OnRep_BreathAmmountChange();// 0x3865ef8
	void OnRep_bIsCallingForRevival();// 0x3865ee4
	void OnRep_AntidoteMaxTimeSync();// 0x34f4004
	void OnRep_AntidoteExeTimeSync();// 0x34f4004
	void OnRep_AngleSightRotOffsetChanged();// 0x3865ed0
	void OnRep_AnchorPlat();// 0x3865ebc
	void OnRep_AKEventNotify();// 0x3865ea8
	void OnPreRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x49216cc
	void OnPostRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x49216cc
	void OnPostFlushHealthChangeHistoryOnServer();// 0x3865e8c
	void OnPoseStateChange(byte LastState, byte CurState);// 0x49216cc
	bool OnPlayFollowEmote(int EmoteId, int FollowPlayerKey, bool bKeepFollowState);// 0x3865d7c
	void OnPlayEmoteStop(int EmoteIndex);// 0x3865d04
	void OnPlayEmoteEnd(int EmoteIndex);// 0x3865c8c
	bool OnPlayEmote(int EmoteId);// 0x3865c0c
	void OnOverlapDarkArea(bool bIsBegin, Actor* DarkAreaActor);// 0x3865b44
	void OnOpenDoor(PUBGDoor* Door, int DoorState);// 0x3865a80
	void OnNotifyHurt();// 0x49216cc
	void OnNeedSetSpeedOverLimit();// 0x3865a6c
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x386596c
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x38657b0
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x3865738
	void OnInterruptCurrentEmote();// 0x3865724
	void OnInterruptChangeWearing();// 0x3865710
	void OnHealthChangeFromRPC(float PrevHealth, float InHealth);// 0x3865654
	void OnFollowStateChangedDelegate__DelegateSignature(enum LastFollowState, enum NewFollowState);// 0x49216cc
	void OnFollowStateChange();// 0x3865640
	void OnFollowNearPlayerEmote();// 0x386562c
	void OnFlushHealthChangeHistoryOnClient(out const float[] ChangeHistory);// 0x3865558
	void OnEquipWeapon(byte Slot);// 0x49216cc
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x38654e0
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x3865424
	void OnEndChangeWearing(int StopReason);// 0x38653ac
	void OnDetectPaintDecalTarget(bool bStart);// 0x49216cc
	void OnCurEquipedShootWeaponReloadLastBullet(int RemainReloadTimes);// 0x386532c
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x3865270
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x3865170
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x3865070
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x3864ff8
	bool OnChangeWearing(int Index);// 0x3864f78
	void OnBPMoneyChange();// 0x49216cc
	void OnBPIsInvincibleChange();// 0x49216cc
	void OnBPHealthChange();// 0x49216cc
	void OnBeforeGetUp();// 0x49216cc
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x3864d28
	void OnAsyncLoadChangeWearingAnim();// 0x3864d14
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3864b70
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x3864a98
	bool NeedHandleHitAnim(int DamageID, float MinDamageThreshold);// 0x38649cc
	void MulticastStartPlayEmoteWithRandReliable(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3864828
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3864684
	void MulticastStartChangeWearing();// 0x3864628
	void MulticastPlayerSoundByID(int SoundID);// 0x3864574
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x38644c0
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x386440c
	void MulticastInteruptChangeWearingOnServer();// 0x38643b0
	void MulticastInteruptChangeWearing();// 0x3864354
	void MoveCameraTo(Vector DestLocation, Rotator DestRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath);// 0x3864168
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x38640e8
	float Montage_GetPosition(const AnimMontage* AnimMontage);// 0x3864068
	void MonitorAttrModifierException(float DeltaTime);// 0x3863ff0
	void MeleeServer();// 0x3863f94
	void MeleeReleased();// 0x3863f80
	void MeleeLocal();// 0x49216cc
	void MeleeBroadcastOtherClients();// 0x3863f24
	void Melee(bool IsForCE);// 0x3863ea4
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x3863e90
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x3863e18
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x3863cf0
	bool LocalStartPlayEmote(int EmoteIndex, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3863be0
	bool LocalStartChangeWearing();// 0x3863bb8
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x3863b38
	bool LocalInteruptChangeWearing();// 0x3863b10
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot, enum TriggerType);// 0x3863a10
	void LocalEquipProp(STExtraProp* Prop);// 0x3863998
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x3863918
	void LeaveState(enum State);// 0x3863898
	void LeaveServerState(enum State);// 0x38637e4
	void LeaveBattleState();// 0x38637d0
	bool IsWeaponOwnerLocallyControlled();// 0x38637a0
	bool IsVisionOptimizationComponent(SceneComponent* InSceneComp);// 0x3863720
	bool IsValidPaintDecalTarget_Simple();// 0x3863700
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x38635c8
	bool IsUsingGrenade();// 0x38635a0
	bool IsThermalImagingValid();// 0x3863578
	bool IsTargetAnimClassSkeletonMatching(class Object TargetAnimClass);// 0x38634f0
	bool IsSwimOnWaterSuface();// 0x38634c8
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x3863448
	bool IsSameTeamWithLocal();// 0x3863420
	bool IsSameTeam(Pawn* Other);// 0x3863398
	bool IsSameCharAnimClass(class Object NewAnimClass);// 0x3863318
	bool IsReplayViewTarget();// 0x38632f0
	bool IsProneMove();// 0x38632c8
	bool IsPlayingEmotes();// 0x38632a0
	bool IsOnVehicleNotUAV();// 0x3863278
	bool IsOnVehicle();// 0x3863250
	bool IsOnFireBalloon();// 0x3863228
	bool IsNowUpWater();// 0x3863200
	bool IsNightVisionValid();// 0x38631d8
	bool IsNearDeath();// 0x38631b0
	bool IsLocalViewed();// 0x3863180
	bool IsLocalControlorView();// 0x3863158
	bool IsInteractiveMoveComponentTakeOverJump();// 0x3863130
	bool IsInInteractiveMoveComponentState();// 0x3863108
	bool IsInFlyingTeam();// 0x38630e0
	bool IsInEditor();// 0x365435c
	bool IsInCarryBackState();// 0x38630b8
	bool IsInBeCarriedBackState();// 0x3863090
	bool IsHealthyAlive();// 0x3863068
	bool IsHealthAlive();// 0x3863040
	bool IsHandleInFold();// 0x3863018
	bool IsGunADS();// 0x3862fe8
	bool IsFirstPerson();// 0x3862fc0
	bool IsExitingParachute();// 0x3862f98
	bool IsEnableFollowPlayEmote();// 0x357bfc0
	bool IsEnableDamage(STExtraBaseCharacter* TargetBaseCharacter);// 0x3862f18
	bool IsEnableBulletFlySound();// 0x3862ee8
	bool IsDropAvatar();// 0x3862eb8
	bool IsDetectingPaintDecalTarget();// 0x3862e98
	bool IsDefaultCharType();// 0x37bc07c
	bool IsCoopEmote(int EmoteId, int CoopPhase);// 0x3862dcc
	bool IsComponentDormant(ActorComponent* InComp);// 0x3862d4c
	bool IsCompatibleSkeletalCharAnimClass(class Object NewAnimClass);// 0x3862ccc
	bool IsCommonFollowTeam(EmotePlayer EmotePlayer);// 0x3862c04
	bool IsClientCarryBackViewTarget();// 0x3862bdc
	bool IsClientBeCarriedBackViewTarget();// 0x3862bb4
	bool IsClient_WeaponOwner();// 0x3862b84
	bool IsCharacterSprinting();// 0x3862b5c
	bool IsChangeWearingState();// 0x3862b34
	bool IsCarryBackEnable();// 0x3862b0c
	bool IsCanPlayEmote(int EmoteId, bool ShowTips);// 0x3862a40
	bool IsCanFollowed();// 0x38469dc
	bool IsCanDriveSnowBoard();// 0x3862a18
	bool IsBattleState();// 0x38629f0
	bool IsAttackerIgnoreDamage(int DamageEventType);// 0x3862968
	bool IsAngledSight();// 0x3862940
	bool IsAllowScopeIn();// 0x3862918
	bool IsAlive();// 0x38628e8
	void InviteTeammate(FString Name, enum InvitationType);// 0x38627e8
	void InterruptAutonomousFollowEmote(int EmoteId);// 0x3862770
	void InterrupEmoteSoundByEmoteId(int EmoteId);// 0x38626f8
	void InteractiveMoveComponentHandleJumpInput();// 0x38626e4
	void InteractiveMoveComponentHandleEnterInput();// 0x38626d0
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x3862614
	void InitCharacterSkillList();// 0x3862600
	bool InDarkArea();// 0x38625d8
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x386251c
	void HidePlayerMagOnGunReload();// 0x3862508
	void HideNightVisionFrame();// 0x38624ec
	bool HaveAngledSight();// 0x38624c4
	bool HasStateExceptStandOrPlayEmote();// 0x386249c
	bool HasState(enum State);// 0x3862414
	bool HasSightCondition(enum Flags);// 0x3862394
	bool HasCarryBackState(enum InState);// 0x3862314
	bool HasAnyStates(enum[] States);// 0x38621b4
	bool HasAnySightVision(enum Flags);// 0x3862134
	bool HasAllStates(enum[] States);// 0x3861fd4
	void HandleWeaponShootLost();// 0x3861fb8
	void HandleWeaponOnShoot();// 0x3861fa4
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x3861ea4
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x3861e24
	void HandleStartFillGasDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x3861da4
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x3861d24
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x3861c68
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x3861be8
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x3861b2c
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x3861a70
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x38619f8
	void HandleOpenPickUpBoxAction();// 0x38619e4
	void HandleOnCharCustomAnimLoadingFinished();// 0x38619c8
	void HandleOnCharAnimLoadingFinished();// 0x38619ac
	void HandleMoveAntiShootVerifyMiss();// 0x3861990
	void HandleConsumeItemSkillBreak();// 0x386197c
	void HandleChangeWearingCloseWeapon(byte TargetChangeSlot);// 0x3861904
	void HandleBulletHitEvent(out const HitResult InImpactResult);// 0x3861824
	void HandleAutoSwitchWeaponDelay();// 0x3861810
	void GrenadeBackToWeaponServerCall();// 0x38617b4
	void GMShowName();// 0x34f4004
	Actor* GetWeaponUserConst();// 0x3861784
	float GetWeaponOwnerPawnHealth();// 0x3861754
	WeaponManagerComponent* GetWeaponManager();// 0x3861724
	Rotator GetViewRotation();// 0x38616d4
	int GetVehicleSeatSafetyIndex();// 0x38616ac
	PlayerMantleComponent* GetVaultComponent();// 0x3861684
	float GetValueLimitForHealthPredict();// 0x386165c
	STExtraUnderWaterEffectComp* getUnderWaterEffectComponent();// 0x3861634
	Vector GetUIHelmetPosition();// 0x38615e4
	enum GetUAVState();// 0x38615c8
	byte GetThrowGrenadeMode();// 0x38615a8
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x3861528
	STExtraBaseCharacter* GetTargetPlayer();// 0x3861508
	Vector GetSpringArmLocation();// 0x38614b8
	SkeletalMeshComponent* GetSpecialWeaponAttachMesh();// 0x3861488
	AkComponent* GetSoundComponent();// 0x3861460
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x3861280
	float GetSimpleCollisionHalfHeightInStandPose();// 0x3861258
	bool GetShouldDrowningHurt();// 0x3861228
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x49216cc
	Vector GetShootVertifyHitBoxScale(out const CharacterHistoryData CharacterHistotyData, out const MovementRecordData MovementRecordData);// 0x38610dc
	SecuryInfoComponent* GetSecuryComponent();// 0x38610b4
	STCharacterRescueOtherComp* GetRescueOtherComponent();// 0x3861094
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x3861074
	int GetRedClothIDByEmote(int EmoteIndex);// 0x3860fec
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x3860f54
	BoxComponent* GetProneShapeComponent();// 0x3860f34
	byte GetPlayerWeaponFireMode();// 0x37179ec
	byte GetPlayerWeaponEquipSlot();// 0x3860f0c
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x3860e48
	PlayerVehAnimList GetPlayerVehAnimation();// 0x3860e14
	int GetPlayerTeamIndex();// 0x3860dec
	STExtraPlayerState* GetPlayerStateSafety();// 0x3860dc4
	STExtraPlayerState* GetPlayerState();// 0x3860d94
	PlayerSecurityInfoCollector* GetPlayerSecuryInfoCollectorComponent();// 0x3860d6c
	FString GetPlayerNameSafety();// 0x3860ca4
	Vector GetPlayerMovementDir();// 0x3860c54
	FString GetPlayerDetailInfo();// 0x3860b94
	STExtraPlayerController* GetPlayerControllerSafety();// 0x3860b64
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x3860b3c
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x3860a14
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x386098c
	PlayerAnimList GetPlayerAnimation();// 0x3860880
	PickupManagerComponent* GetPickupManager();// 0x3860858
	Vector GetOwnerShootStartLocation();// 0x3860808
	Vector GetOverrideCirclePainPos();// 0x38607c0
	enum GetNetRelevantStatus(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x38606a4
	int GetNearTeamPlayerNum();// 0x386067c
	Vector GetMoveInputLocalDir();// 0x3860634
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x3860604
	int GetMeshAnimLOD();// 0x38605dc
	bool GetMEnsure();// 0x38605ac
	FString GetLatestInviter();// 0x38604ec
	STExtraPlayerState* GetLastInviterPlayerState();// 0x38604c4
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x3860494
	float GetKdValue();// 0x386046c
	bool GetIsPlayingEmote();// 0x386044c
	bool GetIsFPPOnVehicle();// 0x386041c
	bool GetIsFPP();// 0x38603ec
	bool GetIsChangeWearing();// 0x38603cc
	float GetInjuryFreeRate(int BodyPart);// 0x3860344
	enum GetHitBodyTypeByHitPos(out const Vector InImpactVec);// 0x38602b0
	enum GetHitBodyType(out const HitResult _ImpactResult, out const Vector InImpactVec);// 0x3860178
	Vector GetHeadLocation(bool bUseHeadBone);// 0x38600e0
	int GetHandFolderRatio();// 0x38600b0
	Vector GetGunOwnerHeadLocation();// 0x3860060
	int GetGrenadeKillBindGunIDByPC(STExtraPlayerController* KillerPC, int GrenadeID);// 0x385ff94
	int GetGrenadeKillBindGunID(int CurWeaponID, int GrenadeID);// 0x385fec8
	enum GetGender();// 0x385feac
	bool GetFuzzyPosition(out Vector FuzzyPostion);// 0x385fe20
	BaseFPPComponent* GetFPPComp();// 0x385fdf8
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x385fd68
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x385fcd8
	STExtraAnimInstanceBase* GetExtraAnimInstanceBase(bool bisFPP);// 0x385fc50
	bool GetEnsure();// 0x385fc20
	float GetEmoteStartPosition(int CharacterPlayerKey);// 0x385fba0
	float GetEmotePlayRate();// 0x385fb78
	FString GetEmoteHandlePath(int ItemId);// 0x49216cc
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x49216cc
	FString GetEmote(int ItemDefineID);// 0x49216cc
	Vector GetCustomMoveInput(Vector InputDir, bool bUseCache);// 0x385fa90
	Rotator GetCustomMoveControlRotation(Rotator InputRot);// 0x385f9f4
	STExtraWeapon* GetCurrentWeapon();// 0x385f9cc
	int GetCurrentVehicleAnimVehicleType();// 0x385f9a4
	STExtraVehicleBase* GetCurrentVehicle();// 0x385f974
	uint64 GetCurrentStatesInterface();// 0x385f944
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x385f91c
	STExtraWeapon* GetCurrentShieldWeapon();// 0x385f8f4
	InteractiveActorMoveComponent* GetCurrentInteractiveMoveComponent();// 0x385f8cc
	int GetCurrentFloorType();// 0x385f8a4
	int GetCurrentEmoteId();// 0x385f87c
	AnimMontage* GetCurPlayingEmote();// 0x385f854
	float GetCrouchHalfHeight();// 0x385f834
	FString GetCorpName();// 0x385f774
	Controller* GetControllerSafety();// 0x385f744
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x385f71c
	float GetCharacterXYPlaneVelocity();// 0x385f6f4
	enum GetCharacterSubType();// 0x385f6cc
	class AnimInstance GetCharacterSkillAnimBP(int SkillID);// 0x385f64c
	CharacterPlayEmoteComponent* GetCharacterPlayEmoteComponent();// 0x385f624
	enum GetCharacterMainType();// 0x385f5fc
	CharacterFormationComponent* GetCharacterFormationComponent();// 0x385f5d4
	CharacterEnergyData GetCharacterEnergy();// 0x385f3ec
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x385f3bc
	UAEChaCustomAnimListComponent* GetChaCustomAnimComponent();// 0x385f394
	STCharacterCarryBackComp* GetCarryBackComp();// 0x385f36c
	STExtraBaseCharacter* GetCarryBackCharacter();// 0x385f344
	CapsuleComponent* GetCapsuleComponentInterface();// 0x385f314
	Rotator GetCachedControlRotation();// 0x385f2cc
	STExtraBaseCharacter* GetBeCarriedBackCharacter();// 0x385f2a4
	CharacterAvatarComponent2* getAvatarComponent2();// 0x385f27c
	AnimParamsComponent* GetAnimParamsComponent();// 0x385f25c
	bool GetAnimParamAlwaysLandLight();// 0x385f234
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x385f1b4
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos);// 0x385f0f0
	PickUpItemData[] GetAdditionalTombBoxItemBP(int InstanceIDCnt);// 0x385f03c
	SpringArmComponent* GetActiveSpringArm();// 0x385f00c
	void GeneratePlayerBackpackWrappersToGround();// 0x385eff0
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x385ed24
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x385eae0
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x385ea60
	bool ForceUseLodZeroAnim();// 0x385ea30
	void ForceSyncMovementState();// 0x385ea14
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x385e948
	void ForceRepFPPChange(bool bSetSelf);// 0x385e8c0
	void ForcePlayerUpdateAnimation();// 0x385e8ac
	void ForceDestroyWeaponInventoryAndClearData();// 0x385e898
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x385e7a8
	void FollowTeammate(FString Name);// 0x385e650
	EmotePlayer FindNearPlayingEmote();// 0x385e5fc
	enum FindBuffRelatedPawnStateByID(int BuffID);// 0x385e57c
	bool FindActorLocationSafetyWithParams(out Vector FindLoc, Vector NewLocation, out const ResolvePenetrationParams ResolveParams);// 0x385e35c
	bool FindActorLocationSafety(out Vector FindLoc, Vector NewLocation);// 0x385e284
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x385e0a8
	bool FillGasWeaponFilter();// 0x385e080
	void FaceRotation(Rotator NewControlRotation, float DeltaTime);// 0x385dfbc
	void ExitClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x385df44
	void EquipZoomScope(int WeaponId, int ScopeID);// 0x385de88
	void EquipWeaponFinish();// 0x34f4004
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x385ddc4
	bool EnterState(enum State);// 0x385dd3c
	void EnterServerState(enum State);// 0x385dc88
	void EnterFire();// 0x385dc6c
	void EnterClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x385dbf4
	void EnterBattleState();// 0x385dbe0
	void EnterAssistantOnTrackVehicle(bool bEnter);// 0x385db60
	bool EnergyBuffConditionOK();// 0x385db38
	void EnableStanbyAnim(bool bIsEnable);// 0x385dab8
	bool EmoteAnimFinishedSuccessfully();// 0x385da90
	void DSSetCharacterIntPropertyForReplay(FString KeyName, int InValue);// 0x385d988
	void DoDetectPaintDecalTarget(bool bStart);// 0x385d908
	void DoAutoDropWeapon(STExtraShootWeapon* ShootWeapon);// 0x385d890
	void DisappearOnDeath();// 0x385d87c
	void DettachWeapon();// 0x34f4004
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x385d7b0
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x385d6dc
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x385d6c8
	void DelayResetStandState();// 0x385d6b4
	void DelayMoveEnd();// 0x385d6a0
	void DelayMove(float Time);// 0x385d628
	void DelayHidden();// 0x385d60c
	void DelayCustomDepth(float Time);// 0x385d594
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x385d444
	float CustomCalculateBodyhurtDamage(float Damage, int DamageTypeId, int AvatarDamagePosition, Actor* DamageCauser, STExtraBaseCharacter* AttackerBaseCharacter);// 0x385d2a4
	void CurrentMeleeReleased();// 0x385d290
	void CurrentMelee(bool IsForCE);// 0x385d210
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x385d188
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x385d108
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x385d088
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x385d008
	bool ConsumeVehicleEnterMontageTag();// 0x385cfe0
	void CollectPlayerTombBoxIDCard(out PickUpItemData[] OutItemDataList, out int InstanceIDCnt);// 0x385ced4
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x385cd58
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x385cc0c
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x385cb04
	void ClientShowVeteranRecruitParachuteTeamTip(const int TipsID, FString Param1, FString Param2);// 0x385c978
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully, FString LeaderName);// 0x385c864
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x385c7ec
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x385c728
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x385c65c
	void ClientResponseFeedback(enum res);// 0x385c5dc
	void ClientPlayVehicleOverlapCameraShake();// 0x385c580
	void ClientPlayInteractEmote(int EmoteId);// 0x385c500
	void ClientOnPossessBy(Controller* NewController);// 0x385c44c
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool bHeadShotDamage);// 0x385c21c
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool bHeadShotDamage);// 0x385bfa4
	void ClientFeedbackVehiclePointDamage(float Damage, const STPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool bHeadShot);// 0x385bd74
	void ClientChangeCharacterMesh(int MeshID);// 0x385bcf4
	void ClientBulletLineTrace(Vector_NetQuantize BornPos, Vector_NetQuantize EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x385bb90
	void ClientAttackerHandleShootDamageTips(const ShootDamageTipsStr ShootDamageTipsStr);// 0x385bad4
	void ClientAIHotValueDebugInfo(const float[] Info);// 0x385ba10
	void ClearOnDeath(Controller* EventInstigator, Actor* DamageCauser);// 0x385b94c
	void ClearHPUI();// 0x385b930
	void ClearEmotePlayer();// 0x385b91c
	void ClearClientJump();// 0x385b908
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x385b880
	void CheckStateChangedInterruptEmoteState();// 0x385b86c
	void CheckPoseCollisionRight();// 0x385b858
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x385b7c0
	bool CheckPickWeaponCanAutoUse();// 0x385b790
	bool CheckOnMoveablePlatform();// 0x385ae40
	bool CheckNeedReportAttr();// 0x385b760
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x385b69c
	bool CheckNeedRecordEmoteState(int EmoteId);// 0x385b614
	void CheckNeedPlayReliableEmote();// 0x385b600
	void CheckNeedClearEmotePlayer();// 0x385b5ec
	void CheckNearPlayingEmote();// 0x385b5d8
	void CheckNearPlayingCoopEmote();// 0x385b5c4
	bool CheckLowSpeedException();// 0x385b594
	bool CheckIsWearingThoseClothes(out const int[] InClothIDList);// 0x385b4c0
	bool CheckIsWearingThisCloth(int InClothID);// 0x385b440
	bool CheckIsValidXSuitBornIslandAction(int EmoteIndex);// 0x385b3b8
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x385b330
	bool CheckInPhotoGrapherMode();// 0x357bff0
	bool CheckEmoteNeedUseReliableRPC(int EmoteIndex);// 0x385b2a8
	void CheckEmoteFollow(float DeltaTime);// 0x385b230
	bool CheckEmoteCollision(int EmoteId);// 0x385b1b0
	void CheckCharacterDelayHide();// 0x385b19c
	bool CheckCanStand();// 0x385b174
	bool CheckCanShowFollowPlayEmote(EmotePlayer EmotePlayer);// 0x385b0a8
	bool CheckCanShovelInSpringState();// 0x385b078
	bool CheckCanFollowPlayEmote(const int EmoteId);// 0x385aff0
	bool CheckCanBeginPlayCoopEmote();// 0x385afc8
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x385af40
	bool CheckBuffTarget(STBuff* Buff);// 0x385aeb8
	bool CheckBaseIsSmallMoveable();// 0x385ae90
	bool CheckBaseIsMoving();// 0x385ae68
	bool CheckBaseIsMoveable();// 0x385ae40
	void CheckAutonomousNeedFollowEmote(int EmoteId);// 0x357d6d0
	void CharacterStateReset();// 0x385ae2c
	void CharacterProcessAnimLanded();// 0x385ae10
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x385ad98
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x385ac8c
	void CharacterHideInGameLogic();// 0x385ac70
	bool ChangeWearingAnimFinishedSuccessfully();// 0x385ac48
	void ChangeVehWeaponCameraData(bool Enable, out const VHSeatCharacterCameraOffsetData InCharacterCameraOffset);// 0x385ab38
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x385aa30
	bool CanSwitchWeaponWhenEnterFight();// 0x385aa00
	bool CanSelfRescue();// 0x385a9d8
	bool CanRegisterToPickUpList(Actor* Actor);// 0x385a950
	bool CanPlayHitAnim();// 0x385a920
	bool CanPaintDecal(int DecalId);// 0x385a8a0
	bool CanHearWeaponLockSound();// 0x385a870
	bool CanEnterWaterArea(enum[] disallowedState);// 0x385a710
	bool CanEnterState(enum NewState);// 0x385a690
	bool CanDrawWeaponCrossHair();// 0x385a660
	void CancelFollow();// 0x385a64c
	bool CanAutoUseWeaopon(int WeaponId);// 0x385a5c4
	void CalculateUseBuffFlow(int InBuffID);// 0x385a54c
	void CalculateTakeItemFlow(int SpesificID, int Count);// 0x385a490
	float CalculateTakeDamageFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x385a31c
	void CalculateShootPlayerHeadNum(int AddShootTimes, bool IsAI);// 0x385a250
	void CalculatePickUpItemFlowInstance(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam, uint64 InstanceID);// 0x385a06c
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x3859ed8
	void CalculateHeathRecoverVal(float RecoverVal, int Reason);// 0x3859e14
	void CalculateHeathRecoverTimes();// 0x3859df8
	void CalculateBuildingEnterFlow(int InBuildingID, int InCount);// 0x3859d3c
	void CalculateBornLandThrowGrenade(int ID);// 0x3859cc4
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x3859c00
	void CalculateAreaUseItemFlow(int SpesificID, int Count);// 0x3859b44
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x3859a6c
	void CalcKillDataDeferred(out const DamageCauserRecordData Record);// 0x38599c4
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x3859878
	void BulletChange();// 0x385981c
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x385957c
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadshot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x38592c8
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* Victim, const ClientFatalDamageRecordData Data, uint32 CauserKey, uint32 VictimKey);// 0x3859098
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3858d6c
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3858a90
	void BroadcastClientsSimulateSTRadialDamage(float BaseDamage, const STRadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3858828
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3858480
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3858128
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3857dfc
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3857b20
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x38577f4
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3857518
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x38571a4
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3856e80
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3856b54
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3856878
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x385654c
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3856270
	void BroadcastClientsSimulateDotDamageDie(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3855f40
	void BroadcastClientsSimulateDotDamage(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3855c60
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x38558f4
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x38555d8
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3855230
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3854ed8
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3854d5c
	void BPResetCharacter();// 0x49216cc
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x49216cc
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x49216cc
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x49216cc
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser, byte DamageEventType);// 0x49216cc
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x49216cc
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x49216cc
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3854be8
	float BPCalFinalDamage(Controller* Killer, float FinalDamage, bool bHeadShoot, bool bBreathing);// 0x3854a7c
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x49216cc
	void BP_ResetDataOnRespawn();// 0x3854a60
	int BP_GetWeaponSyncTicket();// 0x3854a30
	enum BP_CheckWeaponSyncTicket(int InTicket);// 0x38549a8
	void AutoScopeWhenPeek();// 0x3854994
	void AttachWeapon();// 0x34f4004
	void AttachCurrentWeaponMeshToHand(out const FName WeaponSocketName);// 0x3854908
	void AsyncLoadPlayerVehAnimationByAnimType(const STExtraVehicleBase* InVehicle, const byte InAnimType, const int InSeatId);// 0x3854808
	void AsyncAnimOpenDoorCallback(AnimationAsset* RetAsset);// 0x3854790
	void AsyncAnimListOpenDoorCallback(AnimationAsset*[] RetAssetList);// 0x3854638
	void ApplyLeaveVehicleVelocity(Vector InLeaveVelocity);// 0x38545c8
	bool AllowState(enum State, bool withLog);// 0x38544f4
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x38543a0
	void AddPlayerLastDamageTime(STExtraPlayerState* Player, int Time);// 0x38542e4
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadshot, Actor* DamageCauser, float Damage);// 0x38540dc
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x3853fdc
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3853e28
	void AddClientLeaveStateCheck(enum State, float Duration);// 0x3853d6c
	void ActivateParachuteFreeFallingShake(float FreeFallingShakeTime);// 0x3853cf4

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnEditorKeyPressedDelegate;//[Offset: 0x8e8, Size: 12]
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f4, Size: 1]
	delegate CharacterAnimEventDelegate;//[Offset: 0x8f8, Size: 12]
	delegate CharacterCommonEventDelegate;//[Offset: 0x904, Size: 12]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0x938, Size: 12]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0x944, Size: 12]
	delegate OnPreTakeDamageDynamicDelegate;//[Offset: 0x950, Size: 12]
	delegate OnAttackerPreTakeDamageDelegate;//[Offset: 0x95c, Size: 12]
	delegate OnVictimPreTakeDamageDelegate;//[Offset: 0x968, Size: 12]
	delegate OnClientPushDamageEvent;//[Offset: 0x974, Size: 12]
	delegate OnAttrChangeEventDelegate;//[Offset: 0x9f8, Size: 12]
	float Health;//[Offset: 0xa04, Size: 4]
	float HealthMax;//[Offset: 0xa08, Size: 4]
	int[] TypeIds;//[Offset: 0xa0c, Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0xa18, Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1c, Size: 1]
	bool bAIIgnore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1d, Size: 1]
	float threatenValue;//[Offset: 0xa20, Size: 4]
	float HurtParticleOffset;//[Offset: 0xa24, Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0xa30, Size: 12]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xa3c, Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0xa40, Size: 8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0xa48, Size: 8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0xa50, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xa54, Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	FString CharacterStateType;//[Offset: 0xa60, Size: 12]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 1]
	FString BehaviorServiceDebugInfo;//[Offset: 0xaac, Size: 12]
	FString ServiceDebugInfoForShow;//[Offset: 0xab8, Size: 12]
	int DebugInfoDetailLv;//[Offset: 0xac4, Size: 4]
	delegate OnHandleSkillStartDelegate;//[Offset: 0xac8, Size: 12]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xad4, Size: 12]
	float SkillPromptStartTime;//[Offset: 0xae0, Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xae8, Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xaec, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xaf0, Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xaf4, Size: 4]
	delegate StateEnterHandler;//[Offset: 0xaf8, Size: 12]
	delegate StateLeaveHandler;//[Offset: 0xb04, Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0xb1c, Size: 12]
	delegate OnSimulateCharacterStatesChange;//[Offset: 0xb28, Size: 12]
	uint64 CurrentStates;//[Offset: 0xb48, Size: 8]
	uint64 DisabledStates;//[Offset: 0xb50, Size: 8]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xb58, Size: 12]
	enum[] AllowStates;//[Offset: 0xb64, Size: 12]
	float RencentStatesValidRange;//[Offset: 0xb70, Size: 4]
	<float,uint64> RencentStatesMap;//[Offset: 0xb74, Size: 60]
	delegate OnPawnStateDisabled;//[Offset: 0xbb0, Size: 12]
	delegate OnPawnStateEnabled;//[Offset: 0xbbc, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xbc8, Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0xbd4, Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd9, Size: 1]
	TurnAroundViewComponent* TurnAroundViewComp;//[Offset: 0xbe0, Size: 4]
	byte TeamNum;//[Offset: 0xbe8, Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0xbec, Size: 4]
	float SpeedScale;//[Offset: 0xbf8, Size: 4]
	float SpeedValue;//[Offset: 0xbfc, Size: 4]
	float Temperature;//[Offset: 0xc00, Size: 4]
	float TemperatureMax;//[Offset: 0xc04, Size: 4]
	float TemperatureMin;//[Offset: 0xc08, Size: 4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc19, Size: 1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0xc20, Size: 4]
	float VehicleDetailedTraceDist;//[Offset: 0xc24, Size: 4]
	float SpringArmTraceDist;//[Offset: 0xc28, Size: 4]
	<byte,CharacterHasGunBodyOffsetList> BodyRelativeOffsetConfig;//[Offset: 0xc2c, Size: 60]
	ActivitySyncData ActicitySyncData;//[Offset: 0xc68, Size: 28]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc90, Size: 1]
	void StopCurrentLevelSequence();// 0x49216cc
	void ShotVoice(bool bBegin);// 0x38ae09c
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x38adfd8
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x38adf14
	void SetMEnsure(bool bMValue);// 0x38710a8
	void SetEnsure(bool bValue);// 0x3870980
	void SetAllowPawnState(enum PawnState, bool bAllow);// 0x38ade50
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x38add8c
	void RPC_Client_SetServiceDebugInfo(FString Info);// 0x38adcc8
	void RPC_Client_SetIsMLAI(bool InIsMLAI);// 0x38adc40
	void RPC_Client_ChangeToMLAI(const uint64 DisplayUID, FString Name);// 0x38adb2c
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x38adaac
	void ResetPawnStateDisabled(enum State);// 0x38ada34
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x38ad924
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x38ad7cc
	void PlayLevelSequenceByPathAndBindingInfo(FString SequenceActorPath, FString LevelSequencePath, out const <FString,FString> TrackBindingInfo, float TimeOffset);// 0x49216cc
	void PlayLevelSequenceByPath(FString SequenceActorPath, FString LevelSequencePath, float TimeOffset);// 0x49216cc
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x38ad66c
	void OnRep_UnmannedVehicleSyncData();// 0x38664d8
	void OnRep_Temperature(float LastValue);// 0x38663e0
	void OnRep_HealthMax();// 0x386609c
	void OnRep_Health(float PrevHealth);// 0x34f690c
	void OnRep_DisabledStates(uint64 prevStates);// 0x38ad5e8
	void OnRep_CurrentStates(uint64 prevStates);// 0x3865f50
	void OnRep_AllowStates();// 0x38ad5cc
	void OnRep_ActivitySyncData();// 0x38ad5b8
	void OnLeaveStateForBp(enum State);// 0x49216cc
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x49216cc
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x49216cc
	void OnEnterStateForBp(enum State);// 0x49216cc
	void LeaveState(enum State);// 0x3863898
	bool IsPawnStateDisabledByWeapon(STExtraWeapon* Weapon, enum State);// 0x38ad4ec
	bool IsPawnStateDisabled(enum State);// 0x38ad46c
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x38ad3c8
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x38ad324
	bool IsAllowPawnState(enum State);// 0x38ad2a4
	bool IsAlive();// 0x38628e8
	bool HasState(enum State);// 0x3862414
	bool HasRencentState(enum State);// 0x38ad21c
	bool HasBuffID(int BuffID);// 0x38ad194
	STExtraVehicleBase* GetUnmannedVehicle();// 0x38ad178
	UTSkillManagerComponent* GetSkillManager();// 0x38ad148
	float GetScaledSpeed();// 0x38ad118
	FString GetPlayerNameSafety();// 0x3860ca4
	STExtraPlayerController* GetPlayerControllerSafety();// 0x3860b64
	enum GetObserverType();// 0x38ad0e8
	bool GetMEnsure();// 0x38605ac
	bool GetEnsure();// 0x385fc20
	enum[] GetDamageableGameObjectType();// 0x38ad020
	STExtraVehicleBase* GetCurrentVehicle();// 0x385f974
	bool GetCharacterMEnsure();// 0x38acff0
	bool GetCharacterEnsure();// 0x38acfc0
	float GetBuffDuration(int InstID, int CauseSkillID);// 0x38acef4
	UAEBlackboard* GetBuffBlackboard(int BuffID);// 0x38ace74
	void FillBuffBlackboard(int BuffID, UAEBlackboardParameter[] ParamList);// 0x38accec
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamagetType);// 0x38acbac
	int ExtractDamageAdditionType(out const DamageEvent DamageEvent, Actor* DamagetCauser);// 0x38acac0
	bool EnterState(enum State);// 0x385dd3c
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x38aca40
	void DelayHidden();// 0x385d60c
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x38ac97c
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x38ac7a8
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x38ac65c
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x38ac510
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x38ac32c
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x38ac100
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x38abf5c
	void ClearBuff();// 0x38abf40
	bool ChangeBuffDuration(int InstID, float Duration);// 0x38abe74
	bool CanBeAttackedByWeapon(int WeaponId);// 0x38abdec
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser, byte DamageEventType);// 0x49216cc
	void BPOnRespawned();// 0x49216cc
	void BPOnRecycled();// 0x49216cc
	FString BlueprintSetServiceDebugInfo(FString Info);// 0x49216cc
	bool AllowState(enum State, bool withLog);// 0x38544f4
	void AddEntryEventTokenByID(int SkillID);// 0x38abd74
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer, int Level);// 0x38abc1c
	int AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID, int Level);// 0x38aba7c

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x668, Size: 4]
	FName RepPropertyCategory;//[Offset: 0x670, Size: 8]
	FName PlayerType;//[Offset: 0x678, Size: 8]
	FString PlayerName;//[Offset: 0x680, Size: 12]
	FString Nation;//[Offset: 0x68c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x698, Size: 4]
	FString PlayerUID;//[Offset: 0x69c, Size: 12]
	FString MLAIPlayerUID;//[Offset: 0x6a8, Size: 12]
	int TeamID;//[Offset: 0x6b4, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	int CampID;//[Offset: 0x6bc, Size: 4]
	int resID;//[Offset: 0x6c0, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x6c4, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x6c8, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x6d4, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x704, Size: 28]
	int planeAvatarId;//[Offset: 0x720, Size: 4]
	int DyeDebugFlag;//[Offset: 0x724, Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x728, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x736, Size: 1]
	bool bAINeedCheckBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x737, Size: 1]
	float DestinyValue;//[Offset: 0x738, Size: 4]
	float RatingScore;//[Offset: 0x748, Size: 4]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 1]
	bool bEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74d, Size: 1]
	bool bMEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74e, Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74f, Size: 1]
	FString LuaFilePath;//[Offset: 0x75c, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x768, Size: 60]
	void SetNetCullDistanceSquared(float fNetCullDistanceSquared);// 0x34cfc44
	void SetMEnsure(bool bMValue);// 0x38710a8
	void SetEnsure(bool bValue);// 0x3870980
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x408c8fc
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x408c7c0
	void OnRep_UseWholeModel();// 0x408c7ac
	void OnRep_TeamID();// 0x408c798
	void OnRep_PlayerUID();// 0x408c784
	void OnRep_PlayerKey();// 0x3587b74
	void OnRep_MLAIPlayerUID();// 0x408c770
	void OnRep_CampID();// 0x408c75c
	bool IsDefaultCharType();// 0x37bc07c
	int GetTeamId();// 0x408c740
	FString GetPlayerKey();// 0x408c680
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x408c5b8
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x408c4f0
	ActorComponent*[] GetNonSimulatedComponents();// 0x408c428
	ActorComponent*[] GetNonDedicatedComponents();// 0x408c360
	PrimitiveComponent* GetMovementBaseComponent();// 0x408c338
	bool GetMEnsure();// 0x38605ac
	bool GetEnsure();// 0x385fc20
	int GetCampId();// 0x408c310
	void ClientAcknowledgeReconnection(uint32 Token);// 0x3589610

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x44c, Size: 4]
	class AnimInstance[] CharacterInVehicleAnimBPs;//[Offset: 0x450, Size: 12]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 1]
	enum VehicleType;//[Offset: 0x45e, Size: 1]
	enum VehicleShapeType;//[Offset: 0x45f, Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x460, Size: 24]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x478, Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x490, Size: 4]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x498, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x4c0, Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x4c4, Size: 60]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x500, Size: 60]
	Texture2D* VehicleIcon;//[Offset: 0x53c, Size: 4]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x544, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x548, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x550, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	bool bCanHandBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x555, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x556, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x557, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x558, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x560, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 1]
	int MainMaterialIndex;//[Offset: 0x568, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x56c, Size: 12]
	bool ShowVehicleEnterButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool bStopAnimWhenDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 1]
	Vector AirDropVelocity;//[Offset: 0x57c, Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x588, Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x590, Size: 8]
	float AirdropOvertime;//[Offset: 0x598, Size: 4]
	delegate OnVehicleStartAirdrop;//[Offset: 0x59c, Size: 12]
	delegate OnVehicleEndAirdrop;//[Offset: 0x5a8, Size: 12]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool bHasBeenCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 1]
	bool bEnableBuffComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6, Size: 1]
	bool bEnableAttrModifyComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b7, Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	float BackpackCapacity;//[Offset: 0x5bc, Size: 4]
	FName BackpackName;//[Offset: 0x5c0, Size: 8]
	int[] marr_MidIndexes;//[Offset: 0x5c8, Size: 12]
	float EnterVehicleCameraBlendTime;//[Offset: 0x5d4, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x5d8, Size: 4]
	bool bEnableVehicleSteeringCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x5e0, Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 1]
	float StaticForceFixInterval;//[Offset: 0x5e8, Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	int[] SwitchSeatWithItemTypeList;//[Offset: 0x5f8, Size: 12]
	Vector[] RouteList;//[Offset: 0x604, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x610, Size: 12]
	int AutoDrive_CurrentTargetWaypointIdx;//[Offset: 0x61c, Size: 4]
	Vector AutoDriverTargetPosition;//[Offset: 0x620, Size: 12]
	Vector AutoDriverStartPosition;//[Offset: 0x62c, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x638, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x644, Size: 12]
	delegate OnSeatChange;//[Offset: 0x650, Size: 12]
	delegate OnStartResolveStuck;//[Offset: 0x65c, Size: 12]
	delegate OnEndResolveStuck;//[Offset: 0x668, Size: 12]
	RepMovementKeyLoc RepMovementKeyLoc;//[Offset: 0x674, Size: 36]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	FString LuaFilePath;//[Offset: 0x6a0, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x6ac, Size: 60]
	bool bEnableVoiceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	float voiceCheckCD;//[Offset: 0x6ec, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x6f0, Size: 4]
	float voiceCheckDis;//[Offset: 0x6f4, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x6f8, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x6fc, Size: 4]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x715, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x718, Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	bool CanPushUpCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 1]
	bool CanSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71e, Size: 1]
	uint16 ReplicatedFuelRatio;//[Offset: 0x720, Size: 2]
	ParticleSystem* ParticleExplosion;//[Offset: 0x758, Size: 4]
	enum VehicleHealthState;//[Offset: 0x75c, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75d, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75e, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75f, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x764, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x770, Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x774, Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x778, Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x77c, Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x780, Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x784, Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x788, Size: 4]
	VehicleComponent*[] TickedComponents;//[Offset: 0x78c, Size: 12]
	VehicleComponent*[] WeakTickedComponents;//[Offset: 0x798, Size: 12]
	bool bClearComponentTickWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	float EnActiveTimeThreshold;//[Offset: 0x7ac, Size: 4]
	float FreezeVehicleThreshold;//[Offset: 0x7b0, Size: 4]
	bool bFreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 1]
	float VehicleHitThreshold;//[Offset: 0x7cc, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x7d0, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x7e0, Size: 4]
	int EnableTickEffectsDevciveLevel;//[Offset: 0x7e4, Size: 4]
	float EffectUpdateInterval;//[Offset: 0x7ec, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x7f0, Size: 12]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fd, Size: 1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fe, Size: 1]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ff, Size: 1]
	float lastForwardSpeed;//[Offset: 0x800, Size: 4]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x804, Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x810, Size: 12]
	delegate OnClientChangeVehicleSeatEvent;//[Offset: 0x81c, Size: 12]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	bool bEnableEnterDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82a, Size: 1]
	float VehicleEnterDistance;//[Offset: 0x82c, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x830, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x834, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x842, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x844, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x848, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x854, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x858, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x85c, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x868, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x874, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x878, Size: 4]
	float PeneTerrainProtectionInterval;//[Offset: 0x884, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x888, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x88c, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x8d0, Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x8d4, Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x8d8, Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x8dc, Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x8e0, Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x8e4, Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x8e8, Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x8ec, Size: 4]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x8f0, Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x8f4, Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x8f8, Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x8fc, Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x900, Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x904, Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x908, Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x90c, Size: 4]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0x910, Size: 4]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x914, Size: 4]
	float EngineSfxEndDelayTime;//[Offset: 0x918, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91c, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0x920, Size: 92]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0x97c, Size: 92]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0x9d8, Size: 92]
	AkComponent* SoundComponent;//[Offset: 0xa34, Size: 4]
	float RPMSfxScale;//[Offset: 0xa6c, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0xa70, Size: 4]
	enum VehicleSyncTag;//[Offset: 0xa89, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xa8c, Size: 4]
	delegate OnVehiclePossessed;//[Offset: 0xa90, Size: 12]
	delegate OnVehicleUnPossessed;//[Offset: 0xa9c, Size: 12]
	VehicleSimViewData SimulateViewData;//[Offset: 0xab8, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xabc, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xac0, Size: 4]
	VehiclePickableComponent* VehiclePickupComp;//[Offset: 0xac4, Size: 4]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xb00, Size: 12]
	delegate OnVehicleHealthDestroy;//[Offset: 0xb0c, Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xb1c, Size: 4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2d, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xb30, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xb34, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 1]
	float StuckMinImpulse;//[Offset: 0xb60, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xb64, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xb68, Size: 4]
	float StuckResovingTime;//[Offset: 0xb6c, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xb74, Size: 4]
	float StuckResovingTimer;//[Offset: 0xb78, Size: 4]
	float PenePercent;//[Offset: 0xb7c, Size: 4]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xbc4, Size: 4]
	float RespawnTickInterval;//[Offset: 0xbc8, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcc, Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xc5c, Size: 12]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xc68, Size: 12]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xc74, Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb0, Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8, Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xcd0, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xcd4, Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xcd8, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xd00, Size: 4]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda0, Size: 1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda1, Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda2, Size: 1]
	Vector SeekLockOffset;//[Offset: 0xda4, Size: 12]
	FName SeekLockSocket;//[Offset: 0xdb0, Size: 8]
	float ProduceSoundInterval;//[Offset: 0xdb8, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xdc0, Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xdcc, Size: 4]
	delegate OnEnterVehicle;//[Offset: 0xdd0, Size: 12]
	float OverlapCameraShakeInterval;//[Offset: 0xde4, Size: 4]
	float OverlapDamageRate;//[Offset: 0xdec, Size: 4]
	float OverlapImpulseRate;//[Offset: 0xdf0, Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xdf4, Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xdf8, Size: 4]
	float MinOverlapSpeed;//[Offset: 0xdfc, Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xe00, Size: 4]
	Vector OverrideOverlapSimpleCharBoxExtent;//[Offset: 0xe04, Size: 12]
	float OverlapVehicleDamageRate;//[Offset: 0xe14, Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xe18, Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xe20, Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xe30, Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xe38, Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xe3c, Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4d, Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0xe50, Size: 4]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0xe54, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xe58, Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xe5c, Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xe60, Size: 12]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xe6c, Size: 12]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xe78, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xe7c, Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe80, Size: 1]
	delegate OnAdvanceAvatarChanged;//[Offset: 0xe84, Size: 12]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe90, Size: 1]
	int CandidateAvatarID;//[Offset: 0xe94, Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea0, Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0xea4, Size: 4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea8, Size: 1]
	float MaxLinearVelocity;//[Offset: 0xeac, Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	int TeamID;//[Offset: 0xeb4, Size: 4]
	int CampID;//[Offset: 0xeb8, Size: 4]
	float VehicleGoStraight;//[Offset: 0xebc, Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0xec4, Size: 4]
	float ExchangeVehicleSeatInterval;//[Offset: 0xec8, Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0xed0, Size: 12]
	delegate OnControlRotationInit;//[Offset: 0xedc, Size: 12]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xee8, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xeec, Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef1, Size: 1]
	int WeaponReconnectIdx;//[Offset: 0xef4, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xef8, Size: 4]
	enum UAVOperateState;//[Offset: 0xf00, Size: 1]
	float SingleMoveRate;//[Offset: 0xf04, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xf08, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xf20, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0xf38, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xf48, Size: 12]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xf54, Size: 12]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xf68, Size: 8]
	float TombBoxTraceLength;//[Offset: 0xf70, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0xf74, Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf78, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf79, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7a, Size: 1]
	float SleepVehicleTolerance;//[Offset: 0xf7c, Size: 4]
	float StaticFixAngel;//[Offset: 0xf80, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0xf84, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0xf88, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0xf90, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0xf94, Size: 4]
	bool CharacterFollowVehicleViewLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9d, Size: 1]
	int CannotEnterTips;//[Offset: 0xfa0, Size: 4]
	bool CanLeaveVehicleVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa4, Size: 1]
	float LeaveVehicleVelocity;//[Offset: 0xfa8, Size: 4]
	int CannotLeaveTips_HighSpeed;//[Offset: 0xfac, Size: 4]
	int CannotDriveTips;//[Offset: 0xfb0, Size: 4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0xfb8, Size: 12]
	Vector AttachedRelLoc;//[Offset: 0xfc4, Size: 12]
	Actor* AttachedActor;//[Offset: 0xfd0, Size: 4]
	int HasAttachedActorTips;//[Offset: 0xfd4, Size: 4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe0, Size: 1]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0xfe4, Size: 4]
	float LandTraceMaxHeight;//[Offset: 0xfe8, Size: 4]
	bool bNeedPlayVehicleEnterMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfec, Size: 1]
	delegate VehicleSkillCDChanged;//[Offset: 0xff0, Size: 12]
	delegate VehicleSkillDurationChanged;//[Offset: 0xffc, Size: 12]
	delegate VehicleSkillStateChanged;//[Offset: 0x1008, Size: 12]
	bool bDrawMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1015, Size: 1]
	FName ChassisBoneName;//[Offset: 0x1078, Size: 8]
	Actor*[] VehicleIgnoreActors;//[Offset: 0x1080, Size: 12]
	delegate OnVehicleStateChanged;//[Offset: 0x108c, Size: 12]
	TrailerRepMovement TrailerMovement;//[Offset: 0x1098, Size: 24]
	byte CameraDataType;//[Offset: 0x10b8, Size: 1]
	bool bBlockForwardInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b9, Size: 1]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ba, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x10bc, Size: 4]
	bool bVehicleSimualetdPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 1]
	FName DecalSocketName;//[Offset: 0x10e8, Size: 8]
	IdeaDecalActor*[] DecalActors;//[Offset: 0x10f0, Size: 12]
	float Timer_HitEffect;//[Offset: 0x10fc, Size: 4]
	bool bMinimalTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1108, Size: 1]
	bool bRepPhysicsSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1109, Size: 1]
	void WeakTick(float DeltaTime);// 0x3991994
	void VehicleStateChanged__DelegateSignature();// 0x49216cc
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x399191c
	void UpdateHeightToLand();// 0x3991908
	void UnregisterComponentWeakTick(VehicleComponent* InComponent);// 0x3991890
	void UnregisterComponentTick(VehicleComponent* InComponent);// 0x3991818
	void TogglePrintBoneLocation();// 0x3991804
	void TickVehicleHealthState();// 0x39917e8
	void TickEnableAvatarOutline();// 0x39917d4
	void StopEngine();// 0x39917b8
	void StopAutoDriving();// 0x39917a4
	void StartFireSimple(byte ShootMode);// 0x399172c
	void StartEngine();// 0x3991710
	void StartAirDrop();// 0x39916f4
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x3991648
	void ShowInteractiveButton(bool bShow);// 0x39915c8
	void ShowBoostingEffect(bool bShow);// 0x49216cc
	bool ShouldUseSpecialHitEffect();// 0x3991598
	bool ShouldShowVehicleEnterUI();// 0x38603ec
	enum ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x39914b0
	void ShakePassengersCameraResponseHitSimpleCharacter();// 0x3991494
	void SetWeaponReconnectIdx(int ReconnectOpIndex);// 0x3991414
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x3991308
	void SetVehicleReplicatedFuelRatio(float InFuel);// 0x3991290
	void SetVehicleMusicPlayState(bool bEnabled);// 0x49216cc
	void SetVehicleHealthState(enum InVehicleHealthState);// 0x399121c
	void SetUsingHorn(bool bUse);// 0x399119c
	void SetUAVOperateState(enum NewState);// 0x3991124
	void SetSpawnedInReady(bool bFlag);// 0x39910a8
	void SetSimulatePhysics(bool bSimulate);// 0x3991020
	void SetRegionBasedNetConsideration(bool bUseRegion);// 0x3990fa0
	void SetPhysActive(bool bActive, float Delay);// 0x3990ed8
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x3990e68
	void SetInputControlEnabled(bool bEnable);// 0x3990dec
	void SetHandBrake(float rate);// 0x38db2d8
	void SetDrawMovement(bool bDraw);// 0x3990d6c
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x3990ca8
	bool SetBoosting(bool bEnabled);// 0x38db248
	void SetAllowDifferentTeam(bool bAllow);// 0x3990c2c
	void SetAirControlF(float rate);// 0x3990bac
	void SetAirControlB(float rate);// 0x3990b2c
	void ServerSetUsingHorn(bool bUse);// 0x3990a64
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x399099c
	void ServerSetBoosting(bool bEnalbed);// 0x39908d4
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x399085c
	void ServerSetAirControlF(float rate);// 0x39907a8
	void ServerSetAirControlB(float rate);// 0x39906f4
	void ServerResetToPosition(Vector NewLocation, Rotator NewRotation);// 0x399062c
	void ServerDetachEveryoneFromSeat(bool bMustExit, bool bApplyVehicleVelocity);// 0x399055c
	void SendVehicleInAirChangedTimeToServer();// 0x3990500
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x399044c
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x3990398
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x35791c8
	void SafeSleepVehicle();// 0x3990384
	void RestartAntiCheat();// 0x3990370
	void ResetJoystickMove();// 0x399035c
	void RequestChangeVehicleAvatar();// 0x3990300
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x39901f0
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x3990098
	void RemoveAntiStuckBox();// 0x3990084
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x399000c
	void RegisterComponentWeakTick(VehicleComponent* InComponent);// 0x398ff94
	void RegisterComponentTick(VehicleComponent* InComponent);// 0x398ff1c
	void RecordValidTransform();// 0x398ff08
	void RecordInAirTime();// 0x398fef4
	void ProcessAvatarOutline();// 0x398fed8
	void PrintStats();// 0x3587c00
	bool PreChangeVehicleFPPAvatar();// 0x398feb0
	bool PreChangeVehicleBrokenAvatar();// 0x398fe88
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x398fdc4
	void PostLoadFPPMesh();// 0x398fda8
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x398fd30
	bool PawnHasState(enum PawnState);// 0x3900140
	bool OverlapTest(out const Transform Transform, PrimitiveComponent* PrimComp, out const Transform PrimCompTransform, bool UseOBB);// 0x398fb30
	void OnUserSwitchWeapon(STExtraBaseCharacter* InUser, byte Slot);// 0x398fa6c
	void OnUpdateEffects();// 0x49216cc
	void OnStopFire();// 0x49216cc
	void OnSkeletalMeshSleep(PrimitiveComponent* SleepingComponent, FName BoneName);// 0x398f9a8
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x398f8e4
	void OnSetTailLightValue(float LightValue);// 0x49216cc
	void OnServerReconnectPossess();// 0x398f8c8
	void OnServerPlayerChangeVehicleSeat(enum LastSeatType, enum NewSeatType);// 0x49216cc
	void OnRep_VehicleSyncFlag();// 0x398f8b4
	void OnRep_VehicleSimulatedPhysics();// 0x398f8a0
	void OnRep_VehicleHealthState();// 0x398f884
	void OnRep_TrailerMovement();// 0x398f870
	void OnRep_TeamID();// 0x357cf04
	void OnRep_SimulateViewData();// 0x398f85c
	void OnRep_SimulateFreeCameraViewData();// 0x398f848
	void OnRep_ServerLastReplicatedServer();// 0x398f834
	void OnRep_ReplicatedFuelRatio();// 0x398f820
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x398f80c
	void OnRep_IsForbidNightVehicle();// 0x398f7f8
	void OnRep_IsEngineStarted();// 0x398f7e4
	void OnRep_IsBoosting();// 0x398f7d0
	void OnRep_IsAirdroppingVehicle();// 0x398f7bc
	void OnRep_FrozenStatic();// 0x398f7a8
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x398f730
	void OnRep_CandidateAvatar();// 0x49216cc
	void OnRep_CampID();// 0x34f4004
	void OnRep_AttachedRelLoc();// 0x398f71c
	void OnRep_AttachedActor();// 0x398f708
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x398f688
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character, bool bSuccess);// 0x49216cc
	void OnPlayerEnterVehicle(bool IsSuccess, enum SeatType);// 0x49216cc
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x398f51c
	void OnFireBeginOverlapEvent(Actor* OtherActor);// 0x398f4a4
	void OnEngineStop();// 0x49216cc
	void OnEngineStart();// 0x49216cc
	void OnBoostingChanged();// 0x49216cc
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x398f3b8
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x398f2b8
	void LoadFPPVehicleModel();// 0x398f2a4
	bool IsVehicleWarVehicle();// 0x3589550
	bool IsVehicleBlockFromExplosion();// 0x398f274
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm);// 0x398f1a8
	bool IsUsingFPPModel();// 0x398f180
	bool IsUnusable();// 0x398f150
	bool IsUCAV();// 0x398f128
	bool IsUAV();// 0x398f0f8
	bool IsTrailer();// 0x398f0d0
	bool IsSpawnedInReady();// 0x398f0b4
	bool IsSimulatePhysics();// 0x398f08c
	bool IsNotInWater();// 0x398f05c
	bool IsMotorbike();// 0x398f034
	bool IsLocallyControlled();// 0x398f004
	bool IsInMidAir();// 0x398efd4
	bool IsInBuffSpeedState();// 0x398efb8
	bool IsHelicopter();// 0x398ef90
	bool IsFloatingOnWater();// 0x398ef68
	bool IsEntirelyUnderWater();// 0x398ef40
	bool IsElectronic_Failure();// 0x398ef18
	bool IsDestroyed();// 0x398eef0
	bool IsClient_WeaponOwner();// 0x398eec0
	bool IsCharacterPlayingSeatAnim(STExtraPlayerCharacter* Character);// 0x398ee40
	bool IsBoosting();// 0x398ee10
	bool IsAutoDriving();// 0x398ede8
	bool IsArmedVehicle();// 0x398edc0
	bool IsAmphibiousVehicle();// 0x398ed98
	bool IsAlive();// 0x398ed68
	bool IsAirVehicle();// 0x38d05dc
	bool IsAirdroppingVehicle();// 0x398ed4c
	bool IsActiveEffect(FName EffectName);// 0x398eccc
	bool IsAcceptInputControl();// 0x398ecb0
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x398eb94
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x398ead0
	bool HasTrailer();// 0x398eaa8
	bool HasSkillID(int SkillID);// 0x398ea28
	bool HasBuffID(int BuffID);// 0x398e9a0
	bool HasAutoDriveTarget();// 0x398e978
	void HandleVehicleHealthDestroy();// 0x38316bc
	void HandlePlayerAttachedToVehcicle(STExtraBaseCharacter* Player);// 0x398e8f8
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x38f018c
	void HandleOnVehicleAvatarDataCopied();// 0x398e8e4
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x398e7dc
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x398e644
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x398e53c
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x397fe98
	void HandleMoveAntiShootVerifyMiss();// 0x39705b0
	void HandleMeshLodChange(int LODLevel);// 0x398e4c4
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x398e444
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x398e3c4
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x398e34c
	Actor* GetWeaponUserConst();// 0x398e31c
	Actor* GetWeaponUser();// 0x398e2ec
	int GetWeaponReconnectIdx();// 0x398e2bc
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x398e28c
	uint32 GetWeaponOwnerPlayerKey();// 0x398e25c
	float GetWeaponOwnerPawnHealth();// 0x398e22c
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x398e1fc
	WeaponManagerComponent* GetWeaponManager();// 0x398e1cc
	Rotator GetViewRotation();// 0x38616d4
	SkeletalMeshComponent* GetVehicleWheelMesh();// 0x398e1a4
	VehicleShootWeapon* GetVehicleWeapon(int SeatID, int WeaponListID);// 0x398e0e0
	VehicleSyncComponent* GetVehicleSync();// 0x398e0c4
	VehicleSpringArmComponent* GetVehicleSpringArm();// 0x398e09c
	int GetVehicleSkinItemID();// 0x398e074
	VehicleSeatComponent* GetVehicleSeats();// 0x398e058
	float GetVehicleReplicatedFuelRatio();// 0x398e030
	float GetVehicleOriginToLand();// 0x398e000
	enum GetVehicleHealthState();// 0x398dfe4
	VehicleDamageComponent* GetVehicleDamage();// 0x38cfbb4
	VehicleCommonComponent* GetVehicleCommon();// 0x35ec33c
	Vector GetVehicleCenter();// 0x398df94
	VehicleAvatarComponent* GetVehicleAvatar();// 0x398df6c
	VehicleAIComponent* GetVehicleAIComponent();// 0x398df50
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x398df28
	bool GetUsingHorn();// 0x398df00
	VehicleTrailerComponent* GetTrailerComponent();// 0x398ded8
	int GetTeamId();// 0x398deb0
	MaterialInstanceDynamic* GetTailLightDIM();// 0x398de88
	AkComponent* GetSoundComponent();// 0x398de60
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x35f1688
	Vector GetRotationInputDir();// 0x38394e0
	float GetReloadAllWeaponTime();// 0x398de38
	Actor*[] GetQueryIgnoreActors();// 0x398dd70
	VehiclePickableComponent* GetPickUpComponent();// 0x398dd48
	Rotator GetPhysicsBoundsRotation(bool IsOBB);// 0x398dcb0
	Vector GetPhysicsBoundsExtent(bool IsOBB);// 0x398dc18
	Vector GetPhysicsBoundsCenter(bool IsOBB);// 0x398db80
	float GetMoveRightRate();// 0x398db64
	float GetMoveForwardRate();// 0x398db48
	SkeletalMeshComponent* GetMesh();// 0x398db2c
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x398dafc
	BattleItemHandleBase* GetItemHandle();// 0x398dae0
	bool GetIsPhysSleep();// 0x398dab0
	bool GetIsOpenVertify();// 0x398da94
	float GetHandBrakeRate();// 0x398da78
	Vector GetGunOwnerHeadLocation();// 0x398da28
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x398da00
	float GetForwardSpeed();// 0x371155c
	STExtraPlayerCharacter* GetFirstPassenger();// 0x398d9d8
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x398d9b0
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x398d980
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x398d964
	STExtraPlayerCharacter* GetDriver();// 0x398d93c
	bool GetDrawMovement();// 0x398d91c
	int GetDiedBoxAvatarID();// 0x398d8ec
	uint64 GetCurrentStatesInterface();// 0x398d8bc
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x398d7f0
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x398d664
	Vector2D GetCharacterViewLimit(STExtraBaseCharacter* Character);// 0x398d5dc
	bool GetCharacterMEnsure();// 0x398d5ac
	class AnimInstance GetCharacterInVehicleAnimBP(int SeatID);// 0x398d52c
	bool GetCharacterEnsure();// 0x398d4fc
	int GetCampId();// 0x398d4d4
	BuoyancyForceComponent* GetBuoyancyForce();// 0x35ec320
	Vector GetBoxExtent();// 0x398d48c
	int GetAvatarId();// 0x398d464
	STExtraVehicleBase* GetAttachedVehicle();// 0x398d434
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x398d368
	void GetAllSkeletalMeshList(out SkeletalMeshComponent*[] OutList);// 0x398d29c
	void ExitFPPVehicle();// 0x398d288
	void EnterFPPVehicle();// 0x398d26c
	void EnablePlayMusic(bool InEnable);// 0x398d1f0
	void EnableAvatarOutline(enum OutlineType);// 0x398d178
	void DestroyAndRespawnSelf();// 0x398d164
	void DeactiveEffect(FName EffectName);// 0x398d0ec
	void CreateAntiStuckBox();// 0x398d0d8
	void CorrectControlRotation(Rotator NewRotation);// 0x398d060
	bool ComponentTickRegistered(const VehicleComponent* InComponent);// 0x398cfe0
	void ClientPlayVehicleCameraShake();// 0x398cf84
	void ClientFeedbackPointDamage(Actor* DamageCauser, float Damage);// 0x398ce88
	void ClearInputs();// 0x398ce6c
	void ClearDecals();// 0x398ce58
	void ClearBuff();// 0x3826cd0
	void ClearAllInputState();// 0x398ce3c
	void ClearAllComponentWeakTick();// 0x398ce28
	void ClearAllComponentTick();// 0x398ce14
	bool CheckHaveSpecialAttachActor();// 0x39791e8
	void CheckEnableAvatarOutline();// 0x49216cc
	bool CheckAllWeaponIsReadyForFire();// 0x398cdec
	void ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x398cd6c
	void ChangeAssetBy(BackpackVehicleAvatarHandle* InAvatarHandle);// 0x398ccf4
	bool CanVehicleJump();// 0x398cccc
	bool CanVehicleBePickup();// 0x398cca4
	bool CanPushUpCharacterWhenPenetrating();// 0x398cc88
	bool CanLeaveVehicle();// 0x38469dc
	bool CanDrive(STExtraPlayerCharacter* Character);// 0x398cc00
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x398cb78
	bool CanAutoDrivingNoDriver();// 0x398cb50
	bool CanAutoDriving();// 0x398cb28
	bool CanActiveEffect(FName EffectName);// 0x398caa0
	void CalcPhysicsBounds(out Vector OutLocation, out Rotator OutRotation, out const Transform NewVehicleTM, bool IsOBB);// 0x398c8d0
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x398c800
	void BroadcastClientVehicleExplosionEffect();// 0x398c7e4
	void BPPostLoadFPPMesh();// 0x49216cc
	void BPPlayOverlapDamageCameraShake();// 0x49216cc
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x398c764
	bool BPCanCharacterEnter(STExtraPlayerCharacter* InCharacter, enum SeatType);// 0x398c698
	void AutoLoadEffect();// 0x398c684
	void ApplyVehicleImpulse(out const Vector ApplyImpulse, bool bVelocityChange);// 0x398c5a8
	bool ApplyAnimation();// 0x398c580
	void AfterBeginPlay();// 0x49216cc
	void AddHealthSafety(float AddVal);// 0x398c500
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer, int Level);// 0x398c3a8
	int AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID, int Level);// 0x398c208
	void ActiveEffectAsync(FName EffectName);// 0x398c190
	void ActiveEffect(FName EffectName);// 0x398c118

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ValidDeviceLevel;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 4]

--------------------------------
Class: RepMovementKeyLoc
	enum LocationQuantizationLevel;//[Offset: 0x1c, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	float VaildExitVehicleHeight;//[Offset: 0x14c, Size: 4]
	float PassengerHeightOffset;//[Offset: 0x150, Size: 4]
	STExtraVehicleSeat[] Seats;//[Offset: 0x154, Size: 12]
	VHSeatCharacterCameraOffsetData[] SeatsCameraConfigs;//[Offset: 0x160, Size: 12]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x16c, Size: 12]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x178, Size: 12]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x184, Size: 12]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x190, Size: 12]
	delegate OnSeatOccupiersChanged;//[Offset: 0x19c, Size: 12]
	delegate OnSeatSocketChanged;//[Offset: 0x1a8, Size: 12]
	delegate OnVehicleWeaponRep;//[Offset: 0x1b4, Size: 12]
	delegate OnClientDriverChange;//[Offset: 0x1c0, Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x1cc, Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x1d8, Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0x1e4, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool bCheckLeaveLocationSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 1]
	float LeaveLocationSpaceInflation;//[Offset: 0x1ec, Size: 4]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bHidenCharacterOnSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	bool bCanChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 1]
	enum[] SeatGUITypes;//[Offset: 0x1fc, Size: 12]
	delegate OnPlayEnterVehicleAnim;//[Offset: 0x208, Size: 12]
	delegate OnPlayExitVehicleAnim;//[Offset: 0x214, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x220, Size: 12]
	delegate OnSeatDetachedBefore;//[Offset: 0x22c, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x238, Size: 12]
	delegate OnSeatChanged;//[Offset: 0x244, Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x250, Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x25c, Size: 12]
	delegate OnDriverChange;//[Offset: 0x268, Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x274, Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x284, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x28c, Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x294, Size: 4]
	delegate BeginEnterVehicleEvent;//[Offset: 0x298, Size: 12]
	delegate EndEnterVehicleEvent;//[Offset: 0x2a4, Size: 12]
	delegate BeginExitVehicleEvent;//[Offset: 0x2b0, Size: 12]
	delegate EndExitVehicleEvent;//[Offset: 0x2bc, Size: 12]
	bool bShowSeatUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bLeaveFailedTipsNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	void VehicleWeaponRepDelegate__DelegateSignature();// 0x49216cc
	void TestReleaseSeatAnim();// 0x3a68dcc
	void SeatOccupiersChangedDelegate__DelegateSignature();// 0x49216cc
	void ReAttachAllCharacters();// 0x3a68db8
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x3a68cfc
	void OnSeatSocketChanged__DelegateSignature();// 0x49216cc
	void OnRep_VehicleWeapons();// 0x3a68ce8
	void OnRep_Occupiers(out const STExtraPlayerCharacter*[] LastOccupiers);// 0x3a68c1c
	void OnRep_Attachments();// 0x3a68c08
	void OnDeleyReleaseWeapon(STExtraPlayerCharacter* Character, int SeatIdx);// 0x3a68b4c
	bool IsSeatIndexAvailable(int SeatIndex);// 0x3a68ac4
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x3a68a44
	bool IsSeatAvailable(enum SeatType);// 0x3a689c4
	bool IsDriver(STExtraBaseCharacter* InCharacter);// 0x3a68944
	bool IsCharacterControlWeapon(STExtraPlayerCharacter* InCharacter);// 0x3a688c4
	bool HasCharacter(const STExtraBaseCharacter* Character);// 0x3a68844
	int GetTotalSeatsNum();// 0x350d314
	int GetSeatNum();// 0x3a68828
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x3a68620
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x3a68598
	int GetInUseSeatNum();// 0x3a68570
	STExtraBaseCharacter* GetFirstSeatCharacterBySeatType(enum SeatType);// 0x3a684f0
	STExtraPlayerCharacter* GetFirstPassenger();// 0x3a684c8
	int GetDriverSeatIndex();// 0x3a684a0
	STExtraPlayerCharacter* GetDriver();// 0x3a68478
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x3a683f8
	int GetAvailableSeatIndex(enum SeatType);// 0x3a68370
	void EndExitVehicle__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, bool Success);// 0x49216cc
	void EndEnterVehicle__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, bool Success);// 0x49216cc
	void DetachEveryoneSafely();// 0x34f4004
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x3a68274
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x3a681b0
	void ClientDriverChangeDelegate__DelegateSignature(STExtraBaseCharacter* LastDriver, STExtraBaseCharacter* NewDriver);// 0x49216cc
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x3a6806c
	void ChangeCharacterSeatSocket(out const FName[] InSeatSockets);// 0x3a67fa0
	bool CanChangeSeat(const STExtraBaseCharacter* InCharacter, int NewSeatIndex, out int FailedTips);// 0x3a67ea4
	void BeginExitVehicle__DelegateSignature(STExtraPlayerCharacter* Character);// 0x49216cc
	void BeginEnterVehicle__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType);// 0x49216cc

--------------------------------
Class: VehicleComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	bool bHasUpPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bHasDownPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	byte OccupyMovementMode;//[Offset: 0x22, Size: 1]
	enum HoldWeaponType;//[Offset: 0x23, Size: 1]
	enum SeatSpecialType;//[Offset: 0x24, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x28, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x2c, Size: 4]
	Vector2D ViewPitchLimit;//[Offset: 0x30, Size: 8]
	Rotator CharRotVsVehiRot;//[Offset: 0x38, Size: 12]
	enum SeatSideType;//[Offset: 0x44, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x48, Size: 12]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x58, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float Radius;//[Offset: 0x64, Size: 4]
	float HalfHeight;//[Offset: 0x68, Size: 4]
	Transform CollisionOffset;//[Offset: 0x70, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float OnSeatCameraSpringArmLength;//[Offset: 0xa4, Size: 4]
	Vector2D CharacterPitchLimit;//[Offset: 0xa8, Size: 8]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 4]
	Vector2D ViewYawLimit;//[Offset: 0xc, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x14, Size: 8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float MuzzleDirTor;//[Offset: 0x20, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x28, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x30, Size: 28]
	float DistTorSquared;//[Offset: 0x4c, Size: 4]
	bool UseByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int VehicleWeaponParentIndex;//[Offset: 0x54, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	delegate OnVehWeaponUseStateChange;//[Offset: 0xfa0, Size: 12]
	float RotateSpeedOnVehicle;//[Offset: 0xfac, Size: 4]
	bool bDoWeaponYawOnComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb0, Size: 1]
	bool bDoWeaponRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb1, Size: 1]
	float WeaponRotationLagYawThreshold;//[Offset: 0xfb4, Size: 4]
	float WeaponRotationLagPitchThreshold;//[Offset: 0xfb8, Size: 4]
	bool bUseWeaponRotationLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbc, Size: 1]
	bool bEquipOnDriversSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbd, Size: 1]
	float WeaponRotationLagMaxTimeStep;//[Offset: 0xfc0, Size: 4]
	float WeaponRotationLagSpeed;//[Offset: 0xfc4, Size: 4]
	float WeaponRotationScopingScale;//[Offset: 0xfc8, Size: 4]
	float WeaponRotationYawScopingScale;//[Offset: 0xfcc, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	bool bWeaponStateNotifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd1, Size: 1]
	byte FireMode;//[Offset: 0xfd2, Size: 1]
	enum CameraSpace;//[Offset: 0xfd3, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd4, Size: 1]
	bool bUseOwnerActorView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd5, Size: 1]
	bool bIgnorePawnControlView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd6, Size: 1]
	bool bDebugCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd7, Size: 1]
	FName CameraParentComponentTag;//[Offset: 0xfd8, Size: 8]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe0, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0xfe8, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0xff0, Size: 44]
	bool bUseAnimRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101c, Size: 1]
	float AnimRotationLimitOffset;//[Offset: 0x1020, Size: 4]
	CameraOffsetData OwnerActorViewCameraData;//[Offset: 0x1024, Size: 44]
	Vector2D PitchRange;//[Offset: 0x1050, Size: 8]
	Vector2D YawRange;//[Offset: 0x1058, Size: 8]
	bool bUseSeatLimitCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1060, Size: 1]
	bool bShowCrosshairUsedByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1061, Size: 1]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1062, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0x1068, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0x1070, Size: 4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0x1074, Size: 4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0x1078, Size: 4]
	float VehicleWeaponReloadRate;//[Offset: 0x107c, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x1080, Size: 4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0x1088, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0x1090, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1098, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1099, Size: 1]
	bool bVehicleWeaponUseParentRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109a, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109b, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109c, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109d, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ac, Size: 1]
	bool bSyncVehicleSimulateBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ad, Size: 1]
	bool bEnableSyncShootInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ae, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10af, Size: 1]
	bool bEnableMoveCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 1]
	float UnEquipTime;//[Offset: 0x10b4, Size: 4]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ba, Size: 1]
	FName CharacterSocket;//[Offset: 0x10c0, Size: 8]
	float TimeDelayAttachCharacter;//[Offset: 0x10c8, Size: 4]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cc, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cd, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ce, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cf, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0x10d4, Size: 4]
	FName GrenadePredictLineSocket;//[Offset: 0x10d8, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0x10e0, Size: 4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 1]
	float FuelConsumptionRate;//[Offset: 0x10e8, Size: 4]
	Rotator MuzzleShootDirection;//[Offset: 0x10f0, Size: 12]
	float LastUseTimeStamp;//[Offset: 0x10fc, Size: 4]
	Vector MuzzleShootTarget;//[Offset: 0x1100, Size: 12]
	Vector2D MuzzleShootTargetOnScreenLoc;//[Offset: 0x110c, Size: 8]
	Vector4 Limit;//[Offset: 0x1120, Size: 16]
	Vector2D UIOffset;//[Offset: 0x1130, Size: 8]
	float StartReloadDelayTime;//[Offset: 0x1148, Size: 4]
	float EndReloadDelayTime;//[Offset: 0x1158, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0x115c, Size: 4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1160, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1164, Size: 4]
	WeaponSyncData VehicleWeaponSyncData;//[Offset: 0x1168, Size: 8]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x1170, Size: 4]
	WeaponOverHeatingComponent* WeaponOverHeatingComp;//[Offset: 0x1190, Size: 4]
	int BulletTypeTipMsgID;//[Offset: 0x1194, Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0x1198, Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0x119c, Size: 4]
	void StartReloadAnim();// 0x3a6dcc4
	void SetVehWeaponTickEnabled(bool bEnabled);// 0x3a6dc44
	void SetVehicleWeaponSkin(MaterialInterface* InMaterial);// 0x3a6dbcc
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x3a6dab8
	void SetCameraSpace(enum InCameraSpace);// 0x3a6da40
	void OnVehicleExplode();// 0x3a6da24
	void OnRep_VehicleWeaponSyncData();// 0x3a6da10
	void OnRep_OwnerActorBP();// 0x49216cc
	void OnRep_OwnerActor();// 0x3a6d9fc
	void OnClientVehWeaponUseStateChange__DelegateSignature(STExtraPlayerCharacter* uCharacter, bool bUse);// 0x49216cc
	void NetMulticastReturnBullets();// 0x3a6d9a0
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x3a6d844
	void K2_SetSpecialMeshHide(bool isHide);// 0x49216cc
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x49216cc
	void K2_OnReturnBullets();// 0x49216cc
	MeshComponent* K2_GetWeaponMeshComp();// 0x49216cc
	void HnadleScopeInAfterReload();// 0x3a6d830
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x3a6d774
	void HandleWeaponStartReload();// 0x3a6d760
	void HandleWeaponEndReload();// 0x3a6d74c
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x3a6d6cc
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x3a6d648
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x3a6d620
	STExtraVehicleBase* GetOwnerVehicle();// 0x3a6d5f8
	Rotator GetOwnerCameraRotator();// 0x3a6d5b0
	Vector2D GetMuzzleShootTargetOnScreen();// 0x3a6d570
	Transform GetCharacterSocketTransform();// 0x3a6d510
	void DoVehicleWeaponEquipActionBP(bool bEquip);// 0x49216cc
	void DoUsedOrNotBP(STExtraPlayerCharacter* Character, bool bUsed);// 0x49216cc
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x3a6d498
	bool CheckIsAutonomousOrObTarget();// 0x3a6d470
	void ChangeScopingRotateSpeed(bool IsScoping);// 0x3a6d3f0
	void AfterReloadEnd();// 0x3a6d3dc

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x930, Size: 1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x931, Size: 1]
	float voiceCheckCD;//[Offset: 0x934, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x938, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 1]
	byte[] CanAutoTryingToFireStateList;//[Offset: 0x940, Size: 12]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x964, Size: 64]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a5, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x9a8, Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x9b4, Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x9c0, Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x9cc, Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x9d8, Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x9e4, Size: 12]
	delegate OnServerWeaponShootDelegate;//[Offset: 0x9f0, Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x9fc, Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xa08, Size: 12]
	delegate OnWeaponReloadReplayDelegate;//[Offset: 0xa14, Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xa20, Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0xa2c, Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xa38, Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0xa44, Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0xa50, Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0xa5c, Size: 12]
	delegate OnReloadScuccessDelegate;//[Offset: 0xa68, Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0xa74, Size: 12]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0xa80, Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0xa98, Size: 12]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0xaa4, Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0xab0, Size: 12]
	delegate OnShootWeaponAutoDrop;//[Offset: 0xabc, Size: 12]
	delegate OnWeaponDropStart;//[Offset: 0xac8, Size: 12]
	delegate OnWeaponDropFinished;//[Offset: 0xad4, Size: 12]
	delegate OnBulletLaunch;//[Offset: 0xae0, Size: 12]
	delegate OnBulletImpact;//[Offset: 0xaec, Size: 12]
	delegate OnBulletImpactFX;//[Offset: 0xaf8, Size: 12]
	delegate OnSpawnBulletImpactFX;//[Offset: 0xb04, Size: 12]
	delegate OnChangeShootType;//[Offset: 0xb10, Size: 12]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xb1c, Size: 4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xb20, Size: 4]
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xb24, Size: 4]
	delegate OnScopeIn;//[Offset: 0xb28, Size: 12]
	delegate OnScopeOut;//[Offset: 0xb34, Size: 12]
	delegate OnScopeInContinue;//[Offset: 0xb40, Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xb4c, Size: 4]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0xb50, Size: 4]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0xb54, Size: 4]
	EnergyAccumulateShootComponent* EnergyAccumulateShootComponent;//[Offset: 0xb58, Size: 4]
	FillGasComponent* FillGasComponent;//[Offset: 0xb5c, Size: 4]
	int CurBulletNumInClip;//[Offset: 0xb60, Size: 4]
	BulletInClip CurBulletInClip;//[Offset: 0xb64, Size: 16]
	int CurMaxBulletNumInOneClip;//[Offset: 0xb74, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0xb78, Size: 4]
	int DynamicReloadType;//[Offset: 0xb7c, Size: 4]
	byte ShootMode;//[Offset: 0xb80, Size: 1]
	byte CurShootType;//[Offset: 0xb81, Size: 1]
	byte LastShootType;//[Offset: 0xb82, Size: 1]
	int CurShootTotalType;//[Offset: 0xb84, Size: 4]
	byte SpecialFixShootType;//[Offset: 0xb88, Size: 1]
	float voiceCheckDis;//[Offset: 0xb8c, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0xb90, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0xb94, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0xb98, Size: 12]
	int AngledSightID;//[Offset: 0xbb0, Size: 4]
	byte TraceChannel;//[Offset: 0xbb4, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0xbb8, Size: 12]
	float LastImpactEffectTime;//[Offset: 0xbc4, Size: 4]
	int CurBurstShootIndex;//[Offset: 0xbcc, Size: 4]
	Transform BoltActionTransform;//[Offset: 0xbd0, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 1]
	int ClientShootTimes;//[Offset: 0xc04, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xc08, Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xc0c, Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xc10, Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0xc14, Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xc18, Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0xc1c, Size: 4]
	Vector BulletDecalScale;//[Offset: 0xc20, Size: 12]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xc2c, Size: 16]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3d, Size: 1]
	float DropDuration;//[Offset: 0xc40, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xc44, Size: 4]
	float AIShootLoudness;//[Offset: 0xc48, Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0xc4c, Size: 4]
	float AIShootMaxDis;//[Offset: 0xc50, Size: 4]
	float AISilenceShootLoudness;//[Offset: 0xc54, Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xc58, Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0xc5c, Size: 4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	FireWeaponState* _FireWeaponState;//[Offset: 0xc64, Size: 4]
	byte CurShootWeaponState;//[Offset: 0xc69, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xc78, Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xc7c, Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0xc80, Size: 4]
	enum CurShootIntervalMode;//[Offset: 0xc84, Size: 1]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc85, Size: 1]
	bool IsEquipACCore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc86, Size: 1]
	bool IsEquipBezel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc87, Size: 1]
	bool IsTacticalAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc89, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8a, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xc8c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xc98, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xca4, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xcb0, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xcbc, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xcc8, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xcd4, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0xce0, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xcec, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xcf8, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xd04, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xd10, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd1c, Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0xd28, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34, Size: 1]
	bool bBezelUnFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd35, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xd40, Size: 12]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xd4c, Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xd50, Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0xd5c, Size: 12]
	<int64,int> AttachedAttachmentInstanceID;//[Offset: 0xd68, Size: 60]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xda4, Size: 12]
	uint32 ShootID;//[Offset: 0xdb0, Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xdb4, Size: 4]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0xdb8, Size: 12]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc9, Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe70, Size: 1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 1]
	bool bPostFireReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb9, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeba, Size: 1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0xebc, Size: 12]
	float WeaponDurability;//[Offset: 0xec8, Size: 4]
	int8 CurRearSightIndex;//[Offset: 0xecc, Size: 1]
	bool bEquipmentModifierOnlyRepOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed4, Size: 1]
	int UpgradeInfoID;//[Offset: 0xed8, Size: 4]
	uint32[] UpgradeBModifyIdArray;//[Offset: 0xedc, Size: 12]
	bool bUseNewUploadData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 1]
	bool bUseHitDataFlowOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee9, Size: 1]
	ReplayStartFireInfo ReplayStartFireInfo;//[Offset: 0xeec, Size: 44]
	BulletHitInfoUploadDataInReplay[] RepRelpayHitDataArray;//[Offset: 0xf58, Size: 12]
	NextFireMinShootDataInReplay[] NextFireMinShootData;//[Offset: 0xf64, Size: 12]
	NextFireMinShootDataInReplay[] RepNextFireMinShootData;//[Offset: 0xf70, Size: 12]
	SACData[] SACDataArray;//[Offset: 0xf94, Size: 12]
	void WeaponPartsRender(int WeaponSlotID);// 0x395ffa8
	bool VerifyCostOneBullet();// 0x395ff78
	void UpdateComponentTick();// 0x395ff64
	void TimerNetMulticastShootBug();// 0x34f4004
	void SuccessReload();// 0x395ff48
	bool StopFireFilter();// 0x37bc07c
	void StopFire(byte ToState);// 0x395fec8
	void StopFillGas();// 0x395feb4
	int StartReload();// 0x395fe84
	bool StartFireFilter();// 0x395fe54
	void StartFire();// 0x395fe38
	void StartFillGas();// 0x395fe24
	void StartDoPreBarrel(float HandledTime);// 0x395fda4
	void StartDoBarrel();// 0x395fd88
	void ShowDefaultScope(bool bShow);// 0x395fd08
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x395fc44
	void ShootIDIsNotValid();// 0x38d09b4
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable, bool ClientSimulate);// 0x395faec
	void SetUpgradeInfoID(int ID);// 0x395fa74
	void SetSpecialFixShootTypeOnServer(byte InSpecialFixShootType);// 0x395f9fc
	void SetReloadWithNoCostFromEntity(bool bReloadWithNoCost);// 0x395f97c
	void SetReloadTypeOnServer(byte ReloadType);// 0x395f904
	void SetRearSightIndex(int Index);// 0x395f88c
	void SetLastFireTime(float Time);// 0x395f814
	void SetCurShootType(byte ShootType);// 0x395f79c
	void SetCurrentBulletNumInClipOnServer(BulletInClip InBulletInClip);// 0x395f638
	void SetCurrentBulletNumInClipOnClient(BulletInClip InBulletInClip);// 0x395f4d4
	void SetCurReloadMethod(byte method);// 0x395f45c
	void SetBulletInClip(out BulletInWeapon[] InCurBulletList, int Count);// 0x395f348
	void SetBaseImpactDamageEntity(float Damage);// 0x36b3b78
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x395f23c
	bool ScopeOut();// 0x38603ec
	void ScopeInContinue();// 0x395f228
	bool ScopeIn();// 0x395f1f8
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x394ebc0
	void RPC_ServerStopReload(int InterruptState);// 0x395f144
	void RPC_ServerSetMaxBulletNum();// 0x395f0e8
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x395f034
	void RPC_Server_SetRearSightIndex(int Index);// 0x395ef80
	void RPC_ClientSetCurShootType(byte ShootType);// 0x395eecc
	void RPC_ClientSetCurReloadMethod(byte method);// 0x395ee18
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainReloadTimes);// 0x395ed98
	void RPC_ClientChangeFreshWeaponState_WithParams(byte State, byte Parameter);// 0x395ec9c
	void RPC_Client_SetBulletNumInClip(BulletInClip InBulletInClip, int DSFireID);// 0x395ea0c
	void RPC_Client_DebugShootOtherBlock(Actor* BlockAct, PrimitiveComponent* BlockComp, Vector BlockActWorldVec, Vector BlockCompWorldVec);// 0x395e858
	void RotateCrossHair(Rotator Rot);// 0x395e7e8
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x395e768
	void ResetCurBulletNumInBarrel();// 0x395e754
	void ReSetBulletInClip(BulletInClip NewBulletInClip);// 0x395e5f0
	void RemoveGrenadeLaunchBullet(int RemoveNum);// 0x395e578
	void RemoveBulletInClip(int RemoveNum, bool IsRevert);// 0x395e4ac
	void RefreshCurClip();// 0x395e498
	void RefreshBulletInClip(int Count);// 0x395e420
	void ReduceWeaponDurability(float ReduceAmount);// 0x395e3a8
	void PushSACData(out const SACData SACData);// 0x395e2c8
	void PreSetBulletListInClip(BulletInClip NewBulletInClip);// 0x395e164
	byte PopNextSpecialBulletID();// 0x35894c0
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x49216cc
	void OnWeaponShootDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x49216cc
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponReloadReplayDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x49216cc
	void OnWeaponEquipDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponDurabilityChangeDelegate__DelegateSignature();// 0x49216cc
	void OnStopFireDelegate__DelegateSignature();// 0x49216cc
	void OnStartFireDelegate__DelegateSignature();// 0x49216cc
	void OnSpawnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x49216cc
	void OnShootWeaponDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x49216cc
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x49216cc
	void OnShootWeaponAutoDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x49216cc
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0x49216cc
	void OnSetRearSightIndexDelegate__DelegateSignature(int PrevIndex, int PostIndex);// 0x49216cc
	void OnScopeInContinue__DelegateSignature();// 0x49216cc
	void OnRep_WeaponDurability();// 0x395e150
	void OnRep_UpgradeInfoID();// 0x395e13c
	void OnRep_SpecialFixShootType(byte OldSpecialFixShootType);// 0x395e0c4
	void OnRep_SimulateHitDataArray();// 0x395e0b0
	void OnRep_RelpayNextFireMinShootData();// 0x395e09c
	void OnRep_RelpayHitDataArray();// 0x395e088
	void OnRep_IsEquipBezel();// 0x395e074
	void OnRep_IsEquipACCore();// 0x395e060
	void OnRep_DynamicReloadType(int OldVal);// 0x395dfe8
	void OnRep_CurRearSightIndex(int8 PrevIndex);// 0x395df70
	void OnRep_CurMaxBulletNumChange();// 0x395df5c
	void OnRep_CurCurShootIntervalMode();// 0x395df48
	void OnRep_CurBulletInClipOnSimulatedClients();// 0x395df34
	void OnReloadScuccess__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x49216cc
	void OnMaxBulletChange__DelegateSignature();// 0x49216cc
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x49216cc
	void OnCurBulletChange__DelegateSignature();// 0x49216cc
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x49216cc
	void OnChangeShootType__DelegateSignature(STExtraShootWeapon* ShootWeapon, byte ShootType);// 0x49216cc
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x49216cc
	void OnBulletLaunch__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x49216cc
	void OnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x49216cc
	void OnBulletImpact__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x49216cc
	void NotifyServerNoneShootAction();// 0x395ded8
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainReloadTimes);// 0x395de60
	void NotifyClientNoneShootAction();// 0x395de04
	void LocalSetBulletNumInClip(BulletInClip InBulletInClip);// 0x395dca0
	bool IsWeaponDurabilityLoss();// 0x395dc78
	bool IsWeaponAttachmentFullEquiped();// 0x395dc50
	bool IsVehicleWeapon();// 0x395dc28
	bool IsUsingGrenadeLaunch();// 0x395dc00
	bool IsUseNewUploadData();// 0x395dbd8
	bool IsSwallowBulletTarget(Actor* TargetActor);// 0x395db50
	bool IsSupportBolt();// 0x395db20
	bool IsSupportAutoAim();// 0x395daf8
	bool IsSpecialBulletIDValid(byte SpecialBulletID, int CurShootID);// 0x395da2c
	bool IsShowDisableCrossIcon();// 0x395d9fc
	bool IsPostFireReloading();// 0x395d9e0
	bool IsOwnerInGunADS();// 0x395d9b8
	bool IsInPreFire();// 0x395d990
	static bool IsGHasInfiniteBullets();// 0x395d968
	bool IsForbidShootTarget(Actor* TargetActor);// 0x395d8e0
	bool IsEnableReloadADS();// 0x395d8c4
	bool IsEnableDropBullet();// 0x395d89c
	bool IsDriverVehicleWeapon();// 0x395d874
	bool IsAutoDrop();// 0x395d84c
	void InitWeaponDurability(int NewVal);// 0x395d7d4
	bool HasUpgrade();// 0x395d7ac
	bool HasMultiBullet();// 0x395d784
	void HandleWeaponScopeUnEquiped(enum Type);// 0x395d70c
	void HandleWeaponScopeEquiped(enum Type);// 0x395d694
	void HandleWeaponAvatarPutOnSlot(int SlotID);// 0x36b3b78
	void HandleWeaponAvatarLoaded(int SlotID, ItemDefineID DefineID);// 0x395d5c4
	void HandleWeaponAvatarClearSlot(int SlotID);// 0x36b3b78
	void HandleScopeOut(bool bIsBegin);// 0x395d544
	void HandleScopeIn(bool bIsBegin);// 0x395d4c4
	void HandlePartsEquipped(int WeaponSlotID, bool IsEquipped);// 0x395d400
	void HandleAllWeaponAvatarLoaded();// 0x395d3ec
	byte GetWeaponReloadType();// 0x395d3c4
	int GetWeaponIDFromEntity();// 0x395d39c
	int GetWeaponID();// 0x38da8f8
	int GetWeaponDurability();// 0x395d374
	float GetWeaponBodyLength();// 0x395d34c
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x395d1b4
	ParticleSystem* GetVisualBulletTrackFX();// 0x395d18c
	bool GetVisualBulletTrackEnabled();// 0x395d164
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x395d124
	FName GetVerifyScopeSocketNameFromEntity();// 0x395d0e4
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x395d0bc
	int GetUpgradeInfoID();// 0x395d094
	float GetTraceDistanceFromEntity();// 0x395d06c
	FName GetSilencerSocketNameFromEntity();// 0x395d02c
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x395d004
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x395cfdc
	byte GetShootTypeFromEntity();// 0x395cfb4
	float GetShootReduceDurabilityAmount();// 0x395cf8c
	int GetShootIntervalShowNumberFromEntity();// 0x395cf64
	float GetShootIntervalFromEntity(int BulletIndex);// 0x395cedc
	FName GetShellDropSocketNameFromEntity();// 0x395ce9c
	MeshComponent* GetScopeMeshByType(FName SocketName, enum Type, int SocketIndex);// 0x395cd8c
	int GetScopeID(bool bIsAngledOpticalSight);// 0x395ccfc
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x395cbd8
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x395cac0
	int GetRemainReloadTimes();// 0x395ca98
	bool GetReloadWithNoCostFromEntity();// 0x395ca70
	float GetReloadTimeMagOutFromEntity();// 0x395ca48
	float GetReloadTimeMagInFromEntity();// 0x395ca20
	float GetReloadTimeFromEntity();// 0x395c9f8
	FString GetReloadTIDPostfixByReloadType(byte ReloadType, bool IsTactical);// 0x395c8a4
	FName GetReloadTIDNameNew(byte method);// 0x395c81c
	FName GetReloadTIDName(byte method);// 0x395c78c
	float GetReloadTacticalTimeFromEntity();// 0x395c764
	int GetReloadSpecificBulletNumFromEntity();// 0x395c73c
	float GetReloadRateFromEntity();// 0x395c714
	float GetReloadDurationStartFromEntity();// 0x395c6ec
	float GetReloadDurationLoopFromEntity();// 0x395c6c4
	float GetReloadDurationEndFromEntity();// 0x395c69c
	Transform GetRelativeMuzzleTransform();// 0x395c634
	float GetReferenceDistance();// 0x395c60c
	FName GetRearSightSocket(int Index);// 0x395c584
	Rotator GetRearSightRot();// 0x395c53c
	int GetRearSightIndex();// 0x395c514
	Rotator GetRearSightHandRotOffset();// 0x395c4cc
	float GetRangeModifier();// 0x395c4a4
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x395c3e4
	float GetPreFireTimeFromEntity();// 0x395c3bc
	float GetPreFireAnimScaleFromEntity();// 0x395c394
	float GetPostReloadTimeFromEntity();// 0x395c36c
	float GetPostFireTimeFromEntity();// 0x395c344
	float GetPostFillGasTime();// 0x395c31c
	FName GetOverrideScopeAimSocketName();// 0x395c2dc
	int GetOnceReloadBulletNumOverride();// 0x395c2ac
	byte GetNextSpecialBulletID();// 0x395c27c
	bool GetNeedMagAnimationWhenReload();// 0x395c254
	Transform GetMuzzleTransform();// 0x395c1ec
	FName GetMuzzleSocketNameFromEntity();// 0x395c1a4
	float GetMinShootIntervalFromEntity();// 0x395c174
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x395c14c
	float GetMaxValidHitTimeFromEntity();// 0x395c124
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x395c0fc
	int GetMaxBulletNumInOneClipFromEntity();// 0x395c0d4
	int GetMaxBulletNumInBarrelFromEntity();// 0x395c0ac
	bool GetIsNeedOffsetVelocityFromEntity();// 0x395c084
	bool GetIsEnableScopeInFromEntity();// 0x395c05c
	float GetImpactEffectSkipDistanceFromEntity();// 0x395c034
	float GetIgnoreRangeAttenuatDis();// 0x395c00c
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim, bool IsGunADS);// 0x395bf24
	AkAudioEvent* GetGrenadeLaunchShootSound();// 0x395befc
	WeaponCrossHairPerformData[] GetGrenadeLaunchCrossHairData();// 0x395bda0
	float GetGasAddDamageRate();// 0x395bd78
	float GetGameDeviationFactor();// 0x395bd50
	FName GetFiringSuppressorSocketNameFromEntity();// 0x395bd10
	float GetFireSensitiveYawRate();// 0x395bce8
	float GetFireSensitivePitchRate();// 0x395bcc0
	int GetExtraShootIntervalShowNumberFromEntity();// 0x395bc98
	float GetExtraShootIntervalFromEntity();// 0x395bc70
	<int,bool> GetEquipAttachSlotMap();// 0x395baa0
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x395ba14
	byte GetCurSightVisionType();// 0x395b9ec
	byte GetCurSightType();// 0x395b9bc
	enum GetCurShootIntervalMode();// 0x395b9a0
	int GetCurrentBulletNumInClip();// 0x395b984
	float GetCurReloadTime();// 0x395b95c
	byte GetCurReloadMethod();// 0x395b934
	float GetCurGasRate();// 0x395b90c
	float GetCurGasAngle();// 0x395b8e4
	int GetCurBulletNumInClipForUI();// 0x395b8b4
	int GetCurBulletNumInClip();// 0x395b88c
	float GetCrossHairInitSize();// 0x395b864
	float GetCrossHairBurstSpeed();// 0x395b83c
	float GetCrossHairBurstIncreaseSpeed();// 0x395b814
	byte GetControllerRole();// 0x3637570
	int GetConstantWeaponDurabilityFromEntity();// 0x395b7ec
	bool GetClipHasInfiniteBulletsFromEntity();// 0x395b7c4
	MeshComponent* GetChildMeshComp(FName compTag);// 0x395b744
	bool GetCanRecordHitDetailFromEntity();// 0x395b71c
	float GetBurstShootIntervalFromEntity();// 0x395b6ec
	float GetBurstShootCDFromEntity();// 0x395b6c4
	int GetBurstShootBulletsNumFromEntity();// 0x395b69c
	ItemDefineID GetBulletTypeFromEntity();// 0x395b650
	BulletTrackComponent* GetBulletTrackComponent();// 0x395b628
	float GetBulletRangeEntity();// 0x395b600
	int GetBulletNumSingleShotFromEntity();// 0x395b5d8
	int GetBulletNumSingleShotAtFire(bool IsGunADS);// 0x395b548
	int GetBulletNumByBulletID(out const BulletInClip BulletInClip, int BulletID);// 0x395b42c
	float GetBulletMomentumFromEntity();// 0x395b404
	float GetBulletFireSpeedFromEntity();// 0x395b3d4
	float GetBaseReloadTime(bool bTactical);// 0x395b34c
	float GetBaseImpactDamageEntity();// 0x395b324
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x395b20c
	float GetAutoShootCDFromEntity();// 0x395b1dc
	bool GetAutoReloadFromEntity();// 0x395b1b4
	float GetAnimForegripParam();// 0x395b18c
	bool GetADSManualStop();// 0x395b164
	float GetAccessoriesVRecoilFactor();// 0x395b13c
	float GetAccessoriesRecoveryFactor();// 0x395b114
	float GetAccessoriesHRecoilFactor();// 0x395b0ec
	float GetAccessoriesDeviationFactor();// 0x395b0c4
	void ForceSyncAllClientsBulletsNumOnServer();// 0x395b0b0
	void FixBulletNumWithValideData();// 0x395b09c
	bool EnablePlayBoltAnimation();// 0x395b074
	void EnableInfiniteBullets(bool bEnableInfiniteBullets);// 0x395aff4
	void DoGrenadeLaunchStartReload();// 0x395afe0
	void CostGasByOneShoot();// 0x395afcc
	void ConsumeCacheSACDataArray();// 0x395afb8
	bool ConditionForbidShootTarget();// 0x38605ac
	void ConditionDrawRelpayHitData(out const BulletHitInfoUploadDataInReplay HitData);// 0x395ae64
	void ConditionAddTickPrerequisite();// 0x395ae50
	void ClearWeaponAttrModifier();// 0x395ae3c
	void ClampBulletInClip(int MinCount, int MaxCount);// 0x395ad80
	bool CheckShootInterval();// 0x395ad58
	void CheckReloadAttr();// 0x395ad44
	bool CheckNeedClientSetMaxBulletNum();// 0x395ad1c
	bool CheckClientBulletInClipIsValid(out const BulletInClip ClientBulletInClip);// 0x395ac40
	bool CanVehicleShoot();// 0x395ac10
	bool CanSwitchToGrenade();// 0x395abf4
	float CalcReloadAnimRate(AnimMontage* ReloadMontage, byte WeaponReloadMethod);// 0x395ab30
	void BP_OnSyncSimulatedClientsCurBullets();// 0x49216cc
	bool AutoFireCheck();// 0x35895b0
	void AttrRemovedCB(out const AttrAffected[] AffectedAttrS);// 0x395a9fc
	void AttrModifiedCB(out const AttrAffected[] AffectedAttrS);// 0x395a9fc
	void AddWeaponDurability(int AddAmount);// 0x395a984
	bool AddWeaponAttrModifierConfig(FString ConfigId, out const WeaponAttrModifyData[] AttrModifiers, int UnquieID);// 0x395a77c
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x395a6f8
	void AddFillGas(float AddTime);// 0x395a680
	void AddBulletInClip(BulletInWeapon[] InCurBulletList, int Count);// 0x395a4e4

--------------------------------
Class: STExtraWeapon.LuaActor.Actor.Object
	int iRegionWeapon;//[Offset: 0x3e4, Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x3e8, Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef, Size: 1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x3f4, Size: 16]
	Transform WeaponAttachMeshOffset;//[Offset: 0x410, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x440, Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x470, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x4a0, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x4d0, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x500, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x530, Size: 48]
	int CrossHairType;//[Offset: 0x560, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x564, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x568, Size: 4]
	PredictLineComponent* PredictLine;//[Offset: 0x56c, Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x570, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x578, Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x57c, Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x588, Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x594, Size: 12]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x5a0, Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x5ac, Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x5b8, Size: 12]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x5c4, Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x5d0, Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x5dc, Size: 12]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x5e8, Size: 12]
	delegate OnWeaponBaseEquipDelegate;//[Offset: 0x5f4, Size: 12]
	delegate OnWeaponBaseUnEquipDelegate;//[Offset: 0x600, Size: 12]
	delegate OnEquipOrUnEuipAttachmentDelegate;//[Offset: 0x60c, Size: 12]
	delegate OnPressingWeaponFuncBtnDelegate;//[Offset: 0x618, Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x624, Size: 4]
	WeaponSpecificHandler* WeaponSpecHandler;//[Offset: 0x628, Size: 4]
	byte CurFreshWeaponState;//[Offset: 0x62c, Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x630, Size: 12]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x63c, Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x640, Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649, Size: 1]
	float StartReconnectTime;//[Offset: 0x64c, Size: 4]
	int ReconnectOpIndex;//[Offset: 0x650, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x658, Size: 104]
	enum WeaponAttachState;//[Offset: 0x6c8, Size: 1]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x6cc, Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x6e0, Size: 88]
	float ServerStartCreateWeaponTime;//[Offset: 0x738, Size: 4]
	float ServerFinishCreateWeaponTime;//[Offset: 0x73c, Size: 4]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x744, Size: 4]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x74c, Size: 4]
	byte CurWeaponState;//[Offset: 0x750, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x754, Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x758, Size: 4]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x760, Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x7a8, Size: 4]
	MeshSynData[] synData;//[Offset: 0x7b0, Size: 12]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x7c0, Size: 4]
	float WaitMeshInitTime;//[Offset: 0x7c4, Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x7cc, Size: 12]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x7e4, Size: 4]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e9, Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x7ec, Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 1]
	bool bNeedHiddenWhenOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x7fc, Size: 12]
	byte WeaponUIType;//[Offset: 0x808, Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x810, Size: 48]
	Rotator RotForSimulate;//[Offset: 0x840, Size: 12]
	int FuncFlag;//[Offset: 0x84c, Size: 4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	byte AppActiveWeaponAction;//[Offset: 0x855, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> WeaponCompOutOfVisionOptimizationDataMap;//[Offset: 0x858, Size: 60]
	FString[] ComponentTickWhiteList;//[Offset: 0x894, Size: 12]
	<ActorComponent*,bool> CompTickStateMap;//[Offset: 0x8a0, Size: 60]
	bool bIsInValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	bool bForceDisableHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 1]
	bool bSkipPostReloadAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8de, Size: 1]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x49216cc
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x49216cc
	void UpdateWeaponAvatar(float DeltaTime);// 0x49216cc
	void TriggerWeaponEvent(enum Event);// 0x39a08c8
	bool StartScopeFilter();// 0x38b7dac
	void SpecialResetForWeaponCrosshair();// 0x49216cc
	void SetCharacterAttrModifiers(out const FString[] ModifierNames, bool bNewEnable);// 0x39a073c
	void SetCharacterAttrModifier(FString ModifierName, bool IsEnable);// 0x39a062c
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x39a0578
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x39a04c4
	void RespawnData();// 0x49216cc
	void ResetData();// 0x49216cc
	void ReceivedUseWeapon();// 0x49216cc
	void ReceivedDisuseWeapon();// 0x49216cc
	void PlayLocalShellDropFX();// 0x49216cc
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x49216cc
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x49216cc
	void OnWeaponBaseUnEquipDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponBaseEquipDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x49216cc
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x49216cc
	void OnRepReplayData();// 0x39a04b0
	void OnRep_WeaponReconnectReplicateData();// 0x39a049c
	void OnRep_WeaponAttachSocketName();// 0x39a0488
	void OnRep_SimulatedOwnerPawn();// 0x39a0474
	void OnRep_OwnerClientCreateWeaponData();// 0x39a0460
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x39a044c
	void OnRep_AvatarMeshChanged();// 0x39a0438
	void OnRep_AttachmentReplication();// 0x372292c
	void OnReleaseTrigger();// 0x39a041c
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x49216cc
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x49216cc
	void OnPushTrigger();// 0x35a6d2c
	void OnPressingWeaponFuncBtnDelegate__DelegateSignature();// 0x49216cc
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x49216cc
	void OnEquipOrUnEuipAttachmentDelegate__DelegateSignature(bool IsEquip, BackpackWeaponAttachHandle* AttachHandle);// 0x49216cc
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x49216cc
	void NotifyServerChangeState(byte State);// 0x39a03a4
	void NewInitWeapon();// 0x39a0390
	bool NeedCreateAttachHandTimer();// 0x39a0360
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x39a02e0
	bool IsValidToCheckAttach();// 0x39a02b0
	bool IsValidSwitchWeaponOPCondition(enum InTriggerType);// 0x39a0228
	bool IsUseAttrModify();// 0x39a01f8
	bool IsSimulated();// 0x39a01d0
	bool IsLocalOrSpectorPlayer();// 0x39a01a8
	bool IsForceNeedIK();// 0x39a0178
	bool IsForceDisableHandIK();// 0x39a0150
	bool IsAutonomous();// 0x39a0128
	void InitWeapon();// 0x39a0114
	void InitProxyBP(Actor* OwnerTarget);// 0x49216cc
	bool HasComponentSlot(byte Slot);// 0x39a0094
	void HandleReconnectNew(Actor* WeaponOwner);// 0x39a001c
	enum GetWeaponWantsMode();// 0x399ffec
	byte GetWeaponTypeNew();// 0x399ffc4
	byte GetWeaponType();// 0x399ff9c
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x399ff74
	byte GetWeaponStateType();// 0x399ff4c
	byte GetWeaponSlot();// 0x399ff24
	int GetWeaponSkillID();// 0x399fefc
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x399fed4
	enum GetWeaponOwnerObserverType();// 0x399feac
	FString GetWeaponName();// 0x399fdec
	SceneComponent* GetWeaponMuzzleEffectAttachComp();// 0x3721c08
	MeshComponent* GetWeaponMeshComponent();// 0x399fdbc
	int GetWeaponMainAvatarID();// 0x399fd94
	int GetWeaponID();// 0x38da8f8
	byte GetWeaponHoldType();// 0x399fd6c
	byte GetWeaponFireMode();// 0x398f004
	WeaponEntity* GetWeaponEntityComponent();// 0x399fd44
	FString GetWeaponDetailInfo();// 0x399fc84
	Transform GetWeaponAttachToBackRelativeTransformByBagLevel(int Level, int SideType);// 0x399fb98
	FName GetWeaponAttachSocket();// 0x399fb50
	WeaponSpecificHandler* GetSpecificHandler();// 0x399fb28
	float GetSpecialScopeFov();// 0x399faf8
	int GetScopeID(bool bIsAngledOpticalSight);// 0x395ccfc
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x395cbd8
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x395cac0
	byte GetOwnerRoleSafety(bool RemoteFlag);// 0x399fa70
	FString GetOwnerPlayerName();// 0x399f9b0
	PlayerController* GetOwnerPlayerController();// 0x399f980
	Pawn* GetOwnerPawn();// 0x399f958
	FString GetOwnerName();// 0x399f898
	Controller* GetOwnerController();// 0x37cc664
	Actor* GetOwnerActor();// 0x399f868
	ItemDefineID GetItemDefineID();// 0x399f81c
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x399f7f4
	byte GetCurSightType();// 0x395b9bc
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x399f6b0
	LinearColor GetColorByTeamID(int TeamID);// 0x49216cc
	ItemHandleBase* GetBackpackItemHandle();// 0x399f688
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x49216cc
	void ExeAttachHandTimer();// 0x399f674
	void DelayHandleAvatarMeshChanged();// 0x399f660
	void CreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x399f594
	void ConditionDestroyAttachHandTimer(bool ExecuteTimer);// 0x399f514
	bool ConditionCreateAttachHandTimer();// 0x399f4ec
	void ClientLoadDefaultMesh();// 0x399f4d8
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x399f460
	bool CheckHasFuncByInt(int Func);// 0x399f3e0
	bool CheckHasFunc(enum Func);// 0x399f3e0
	void CheckCurrentMeshInHand(out const FName InAttachSocketName);// 0x399f34c
	void ChangeSequenceStateInner(byte StateType);// 0x399f2cc
	bool ChangeSequenceState(byte StateType);// 0x399f244
	void CallForceHideWeaponWidgetDel();// 0x399f230
	void AttachToCharacter(SceneComponent* Parent, FName SocketName);// 0x399f16c
	void AttachSelfToCharacterHand(SkeletalMeshComponent* InParentMesh, out const FName InWeaponAttachSocket);// 0x399f09c
	bool AttachHandTimerIsValid();// 0x399f074

--------------------------------
Class: LuaActor.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x34c, Size: 60]
	FString LuaFilePath;//[Offset: 0x388, Size: 12]
	void UnRegistLuaTick();// 0x76d6634
	void RegistLuaTick(float TickInterval);// 0x76d65bc

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	int[] SkillIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
	bool SetAutonomousLoadRes();// 0x350decc
	void SelectWeaponGunOnePart(int WeaponGunPart);// 0x3aa3a88
	void EnableDIYPatternMirro(bool bMirro, bool bLeftToRight);// 0x3aa39b8

--------------------------------
Class: WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x490, Size: 4]
	bool EnablePhotoShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	delegate OnScopeEquipDelegate;//[Offset: 0x498, Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x4a4, Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x4b0, Size: 12]
	delegate OnWeaponAvatarLoaded2;//[Offset: 0x4bc, Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x4c8, Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x4d4, Size: 12]
	delegate OnWeaponAvatarPutOnSlot;//[Offset: 0x4e0, Size: 12]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x4f0, Size: 12]
	delegate OnWeaponPartsRender;//[Offset: 0x4fc, Size: 12]
	delegate OnWeaponEffectParticleCreate;//[Offset: 0x508, Size: 12]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x52c, Size: 60]
	<int,HandleMeshPack> DefaultAttachmentMeshOverride;//[Offset: 0x568, Size: 60]
	MeshSynData[] DefaultSynData;//[Offset: 0x5a4, Size: 12]
	FString OwnerPlayerUID;//[Offset: 0x5b4, Size: 12]
	WeaponDIYData WeaponDIYData;//[Offset: 0x5c4, Size: 60]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x608, Size: 12]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	ItemDefineID WeaponDefineID;//[Offset: 0x618, Size: 24]
	bool ShouldDisplayByQuality(int SlotID);// 0x3aa6358
	void SetPendantSocketType(enum SocketType);// 0x3aa62e0
	bool SetAutonomousLoadRes();// 0x350decc
	void ResponWeaponDIYData(FString InPlayerUID, int WeaponAvatarID);// 0x3aa6144
	void ResetAttachmentSocket();// 0x3aa6130
	void ResetAttachmentParent();// 0x3aa611c
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x3aa5fd8
	void RequestDIYPlan(int WeaponAvatarID, int InDIYPlanID);// 0x49216cc
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x350b46c
	void ReportAvatarInfo(out const int[] RequestItemIDS);// 0x3aa5f0c
	void RemoveDefaultAttachmentOverride(int SlotID);// 0x3aa5e94
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* InHandle);// 0x3aa5e14
	void RefreshAvatarStateChanged();// 0x350db34
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x3aa5d9c
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* WeaponHandle);// 0x3aa5d1c
	void PutOnEquipmentDIYData(int WeaponAvatarID, int InDIYPlanID);// 0x3aa5c60
	bool PutOnEquipmentByResID(int resID);// 0x3aa5bd8
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle);// 0x3aa5b58
	bool PutOffEquimentByResID(int resID);// 0x3aa5ad0
	void ProcessWeaponDIYDataAction(out const WeaponDIYData InWeaponDIYData);// 0x3aa5a0c
	void ProcessLoadAllMesh();// 0x350db18
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData OutSyncData);// 0x3aa5930
	void OnWeaponPartsRenderEvent__DelegateSignature(int WeaponSlotID);// 0x49216cc
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x49216cc
	void OnWeaponAvatarPutOnSlot__DelegateSignature(int SlotID);// 0x49216cc
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x49216cc
	void OnWeaponAvatarLoaded2__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x49216cc
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x49216cc
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x49216cc
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x49216cc
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x49216cc
	void OnRespawned();// 0x34b6cb4
	void OnRep_NetAvatarDataChanged(out const MeshSynData[] InSyncData);// 0x3aa5864
	void OnRecycled();// 0x350b450
	void OnEffectParticleCreate__DelegateSignature();// 0x49216cc
	void OnAsyncLoadBattleHandlesDone(int AsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x3aa56b4
	void NetSyncData(int InSlotID, enum InOperationType, BattleItemHandleBase* InHandle);// 0x350d788
	bool LoadMeshListAsync(out BattleItemHandleBase*[] InHandleList, bool bNeedDirectLoad);// 0x3aa5588
	bool IsTeammate();// 0x350b420
	bool IsSelf();// 0x350b3c8
	void InitMasterComponent();// 0x3aa5574
	void InitialAvatarParam();// 0x3aa5560
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x3aa54e8
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x3aa5470
	void InitDefaultAttachment(BattleItemHandleBase* WeaponHandle);// 0x3aa53f8
	int GetWeaponParentID(int InSlotID, out const ItemDefineID InItemDefineID);// 0x3aa531c
	Controller* GetWeaponController();// 0x3aa52f4
	STExtraWeapon* GetOwnerWeapon();// 0x34d2180
	STExtraBaseCharacter* GetOwnerCharacter();// 0x3aa52cc
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x3aa5238
	BattleItemHandleBase* GetEquippedHandle(int InSlotID);// 0x3aa51b8
	bool GetEquipmentMeshBySlot(int InSlotID, out MeshData OutMeshPack);// 0x3aa50c0
	AvatarDIYEntityFactory* GetEntityFactory();// 0x350d314
	MeshComponent* GetAttachmentSocketTransform(int InSlotID);// 0x3aa5040
	AnimationAsset* GetAttachmentAnim(enum InSlotType, int AnimIdx);// 0x3aa4f7c
	WeaponAvatarDIYEntity* FindAvatarEntityByMesh(MeshComponent* InMeshComp);// 0x3aa4efc
	void DestroyWeapon();// 0x3aa4ee8
	void ClearMeshBySlot(int SlotID, bool putDefault, bool bClearMesh);// 0x3aa4dcc
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x3aa4d4c
	bool CheckSlotIsEquipped(int InSlotID, bool bIncludingDefault);// 0x3aa4c80
	bool CheckIsAlreadyEquipped(ItemDefineID InDefineID);// 0x3aa4bf0
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs);// 0x3aa4b24
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x350afb0
	void ApplyAttachmentOverride(BattleItemHandleBase* InAttachHandle);// 0x3aa4aac
	void ApplyAttachment(BattleItemHandleBase* InAttachHandle);// 0x3aa4a34
	void AddUnlockWeaponAttachmentAvatarList(int WeaponBPID, out <int,int> OutAttachmentSkinIDList);// 0x3aa48e4
	void AddDefaultAttachmentOverride(int AttchmentID);// 0x3aa486c
	int AddAction_SampleCurveToMPC(int SlotID, CurveFloat* Curve, MaterialParameterCollection* MPC);// 0x3aa4764
	int AddAction_ParticleByName(int SlotID, out const FName ParticleName);// 0x3aa468c
	int AddAction_MatParamModify2(int SlotID, WeaponEffect_TickMatParam* InCfg);// 0x3aa45c8
	int AddAction_MatParamModify(int SlotID, int CfgIndex);// 0x3aa4504

--------------------------------
Class: AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x22c, Size: 12]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x238, Size: 60]
	int[] PendingDeleteSlotID;//[Offset: 0x274, Size: 12]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x280, Size: 4]
	<int,FName> SlotToSocket;//[Offset: 0x284, Size: 60]
	int StepCount;//[Offset: 0x2c0, Size: 4]
	delegate AsyncLoadAvatarAllMeshDone;//[Offset: 0x2c4, Size: 12]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x2d0, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x378, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x37c, Size: 4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	enum DisplayQuality;//[Offset: 0x391, Size: 1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x394, Size: 60]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	<int,bool> OutlineEnableList;//[Offset: 0x3f8, Size: 60]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x438, Size: 60]
	int CurrentDecalBakingRequestID;//[Offset: 0x474, Size: 4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x478, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x484, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x350e270
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x350e19c
	bool SetMeshVisibleByID(int InSlotID, bool bIsVisible, bool bForceShow);// 0x350e078
	void SetMaster(MeshComponent* InComponent, FName InName, enum InType);// 0x350df70
	void SetDisplayQuality(enum Quality);// 0x350defc
	bool SetAutonomousLoadRes();// 0x350decc
	void RequestSyncLoadMeshes();// 0x350deb8
	void RequestSyncLoadHandles();// 0x350dea4
	void RequestAsyncLoadMeshes();// 0x350de88
	void RequestAsyncLoadHandles();// 0x350de6c
	void RemoveDIYRTCacheInBattle(int InSlotID);// 0x350ddf4
	void RemoveAllDIYRTCacheInBattle();// 0x350dde0
	void RemoveActionByType(int SlotID, enum InActionType, bool bDelayClear);// 0x350dcd8
	void RemoveAction(int SlotID, int ActionInstanceID, bool bDelayClear);// 0x350dbd0
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x350db50
	void RefreshAvatarStateChanged();// 0x350db34
	void ProcessLoadAllMesh();// 0x350db18
	void PreProcessBeforeLoadMesh();// 0x350dafc
	void PostProcessAfterLoadMesh();// 0x350dae0
	void OnRespawned();// 0x34b6cb4
	void OnRecycled();// 0x350b450
	void OnEngineDecalBakingFinished(out const DecalBakingRequest InRequestStruct);// 0x350da00
	void OnAvatarDIYDecalBakingFinished__DelegateSignature(int RequestID, TextureRenderTarget2D* RenderTarget);// 0x49216cc
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x49216cc
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x350d980
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x350d8ac
	void OnAllAvatarHandleLoadedDone();// 0x350d890
	void NetSyncData(int SlotID, enum OperationType, BattleItemHandleBase* Handle);// 0x350d788
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x350d6bc
	bool IsAutonomousAvatar();// 0x350d694
	AvatarDIYEntity* GetOrCreateAvatarEntity(int SlotID, int SubSlotID);// 0x350d5d0
	<int,MeshComponent*> GetMeshComponentList();// 0x350d440
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x350d3b4
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x350d344
	AvatarDIYEntityFactory* GetEntityFactory();// 0x350d314
	TextureRenderTarget2D* GetDIYRTCacheInLobby(int InSlotID);// 0x350d294
	enum GetDisplayQuality();// 0x350d278
	void GetCurMeshComponents(out MeshComponent*[] OutMeshComponets);// 0x350d1a4
	AvatarDIYEntity* GetAvatarEntity(int SlotID, int SubSlotID);// 0x350d0e0
	void EnableSyncLoadDIYDecal(bool bInSyncDIYDecal, int InMaxDecalProcessPreFrame);// 0x350d018
	void EnableSyncLoadAvatar(bool bInSyncAvatar);// 0x350cf98
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x350cec8
	AvatarDIYEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x350ce04
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x350cd30
	void AsyncLoadAvatarAllMeshDone__DelegateSignature(AvatarDIYComponent* AvatarDIYComponent);// 0x49216cc
	void AddDIYRTCacheInBattle(int InSlotID, TextureRenderTarget2D* InTexture2D);// 0x350cc74
	int AddAction_Modle(int SlotID, int ModleID);// 0x350cbb0
	int AddAction_Material(int SlotID, int MaterialID);// 0x350caec
	int AddAction_DIYSlotMatParam(out const int[] InSlotMatParam);// 0x350ca18
	int AddAction_DIYPattern(int SlotID, out const DIYMergedTexData[] InDIYMergeData);// 0x350c898
	int AddAction_DIYMirroParam(int SlotID, out const int[] InMirroParam);// 0x350c780
	int AddAction_DIYMatParam(int SlotID, out const int[] InMatIDList);// 0x350c668
	int AddAction(int SlotID, out const AvatarActionBase InActionBase);// 0x350c574

--------------------------------
Class: AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x1b0, Size: 4]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b6, Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7, Size: 1]
	FName LightVectorName;//[Offset: 0x1b8, Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x1c0, Size: 4]
	delegate OnItemDownloadDelegate;//[Offset: 0x1c8, Size: 16]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x1d8, Size: 16]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x1e8, Size: 60]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	enum AvatarEnum;//[Offset: 0x225, Size: 1]
	void RequestDownloadItemInBattle(int InItemID);// 0x350b540
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x350b46c
	void OnRespawned();// 0x34b6cb4
	void OnRecycled();// 0x350b450
	bool IsTeammate();// 0x350b420
	bool IsServerMode();// 0x350b3f8
	bool IsSelf();// 0x350b3c8
	bool IsLogicRunningMode();// 0x350b3a0
	bool IsLobbyAvatar();// 0x350b384
	bool IsLobbyActor();// 0x350b368
	bool IsForceClientMode();// 0x350b34c
	uint32 GetPlayerKey();// 0x350b31c
	GameInstance* GetGameInstance();// 0x350b2ec
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x350b228
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x350afb0

--------------------------------
Class: AvatarDIYEntity.Object
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x1c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x20, Size: 4]
	MeshGroup MeshGroup;//[Offset: 0x24, Size: 36]
	ItemDefineID ParentDefineID;//[Offset: 0x48, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x60, Size: 60]
	int SlotID;//[Offset: 0xb4, Size: 4]
	int SubSlotID;//[Offset: 0xb8, Size: 4]
	FName SocketName;//[Offset: 0xc0, Size: 8]
	enum meshType;//[Offset: 0xc8, Size: 1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0xcc, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0xd0, Size: 4]
	MeshData EntityMeshData;//[Offset: 0xd8, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x138, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b, Size: 1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x1a0, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x1b0, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x1c8, Size: 60]
	void UpdateVisibility();// 0x351026c
	void UnRegisterTick();// 0x3510250
	void TickEntity(float DeltaTime);// 0x35101d0
	void SetSocketName(FName InName);// 0x3510150
	void SetParentDefineID(ItemDefineID ParentID);// 0x35100c4
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x3510044
	void SetAvatarVisibility(bool bIsVisible, bool bForce);// 0x350ff6c
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x350fee4
	void RevertEntityMeshData();// 0x350fed0
	void RenderEntity();// 0x350feb4
	void RegisterTick();// 0x350fe98
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x350fe10
	void PutOnDefaultEquipment(int InSlotID);// 0x350fd90
	void PrepareEntity();// 0x350fd74
	void OnPreRender();// 0x350fd58
	void OnPostRender();// 0x350fd3c
	void MaskActionDirty(bool bFlag);// 0x350fcbc
	bool IsEntityAvailable(enum VisibilityType);// 0x350fc34
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x350fb68
	void Init(int InSlotID, int InSubSlotID, AvatarDIYComponent* InAvatarComponent);// 0x350fa60
	bool HasSomeAction(enum InActionType);// 0x350f9e0
	bool HasMainAction();// 0x350f9b8
	FName GetSocketName();// 0x350f970
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x350f8e8
	ItemDefineID GetParentDefineID();// 0x350f894
	MeshData GetMeshData();// 0x350f830
	BattleItemHandleBase* GetLoadedHandle();// 0x350f808
	ItemDefineID GetDefineID();// 0x350f7b4
	void EnterRenderPipeline();// 0x34ce768
	void EnterLogicPipeline();// 0x350f798
	void DrawOutline(bool bEnable);// 0x350f710
	bool CreateAndApplyResource();// 0x350f6e0
	void ClearRenderEntity();// 0x350f6c4
	void ClearEquipmentRenderData(int CurrSlotID, bool bPutDefault);// 0x350f5f8
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x350f520
	void ClearEntity(bool ForceClear);// 0x350f498

--------------------------------
Class: MeshGroup
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 12]
	Object*[] MeshObjectList;//[Offset: 0xc, Size: 12]
	MeshComponent*[] MeshCompList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MeshAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 40]
	FName AttachSocket;//[Offset: 0x80, Size: 8]
	enum meshType;//[Offset: 0x88, Size: 1]
	bool bKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	class AnimInstance* animBP;//[Offset: 0x8c, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x90, Size: 40]
	bool bAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bUpdateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	FString LuaFilePath;//[Offset: 0xc8, Size: 12]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	enum ItemStoreArea;//[Offset: 0xd5, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0xd8, Size: 12]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	float UnitWeight;//[Offset: 0xe8, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	int ItemAttrsFlag;//[Offset: 0xf0, Size: 4]
	void UpdateAttributeModify(bool bEnable);// 0x35cb02c
	bool UnEquip();// 0x3bacb9c
	bool HanldePickupAssociationData(out const BattleItemAdditionalData[] PickupAdditionalData);// 0x3baca58
	bool HanldeDropAssociationData();// 0x3baca28
	bool HanldeCleared();// 0x36f14c0
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x352ded0
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x352dab0
	bool HandleEnable(bool bEnable);// 0x352d598
	bool HandleDrop(int InCount, enum Reason);// 0x352d4cc
	bool HandleDisuse(enum Reason);// 0x3515f60
	bool HandleChangeItemStoreArea(enum InItemStoreArea);// 0x3bac9a0
	bool HandleBindToTargetItem();// 0x36665d4
	World* GetWorldInternal();// 0x3bac970
	World* GetCurrentWorld();// 0x3bac948
	BattleItemData ExtractItemData();// 0x35368f0
	void ClearAdditionalData();// 0x3bac934
	bool CheckCanUse(out const interface classNone ItemContainer, BattleItemUseTarget Target, enum Reason);// 0x3bac7e0

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x1c, Size: 4]
	int MaxCount;//[Offset: 0x20, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	<int,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68, Size: 24]
	void SetAssociation(int AssociationType, ItemAssociation Association);// 0x3bb4b1c
	void RemoveAssociation(int AssociationType);// 0x3bb4aa4
	void Init(ItemDefineID InDefineID);// 0x3bb4a14
	ItemDefineID GetDefineID();// 0x3bb49d0
	<int,ItemAssociation> GetAssociationMap();// 0x3bb4850
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x3bb4740
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x3bb4694
	ItemAssociation GetAssociation(int AssociationType);// 0x3bb45f8
	void Constuct(out const ItemDefineID InDefineID);// 0x3bb4560
	void AddAssociation(int AssociationType, ItemAssociation Association);// 0x3bb446c

--------------------------------
Class: BattleItemAdditionalData
	enum EDataType;//[Offset: 0x0, Size: 1]
	int IntData;//[Offset: 0x4, Size: 4]
	FString StringData;//[Offset: 0x8, Size: 12]
	float FloatData;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ItemAssociation
	int AssociationType;//[Offset: 0x0, Size: 4]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	int TargetAssociationType;//[Offset: 0x18, Size: 4]
	Actor* TargetActor;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 32]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x48, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50, Size: 12]
	int Durability;//[Offset: 0x5c, Size: 4]
	enum ItemStoreArea;//[Offset: 0x60, Size: 1]
	BattleItemFeatureData FeatureData;//[Offset: 0x64, Size: 44]
	ItemAssociation[] Associations;//[Offset: 0x90, Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 24]
	FString Name;//[Offset: 0x20, Size: 12]
	FString Desc;//[Offset: 0x2c, Size: 12]
	FString Icon;//[Offset: 0x38, Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44, Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	int CountLimit;//[Offset: 0x8, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemAttrsFlag;//[Offset: 0x14, Size: 4]
	int SortingPriority;//[Offset: 0x18, Size: 4]
	int Worth;//[Offset: 0x1c, Size: 4]
	int ItemCapacity;//[Offset: 0x20, Size: 4]
	int ItemDurability;//[Offset: 0x24, Size: 4]
	int itemType;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4, Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8, Size: 4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc, Size: 12]
	enum meshType;//[Offset: 0x18, Size: 1]
	int[] hiddenSlots;//[Offset: 0x1c, Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28, Size: 12]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34, Size: 12]
	ItemDefineID definedID;//[Offset: 0x40, Size: 24]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x77c, Size: 4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x780, Size: 4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x784, Size: 4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x788, Size: 4]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x35ec360
	Actor* GetBindOwner();// 0x35ec33c
	MeshComponent* GetAttachedMeshComponent();// 0x35ec320
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x35ec170
	void BindOwner(Actor* Owner);// 0x35ec0f8
	void BindEvent(bool bShowWidget);// 0x35ec070

--------------------------------
Class: AvatarDIYEntityFactory.Object
	AvatarDIYEntity* CreateEntity(int SlotID, int SubSlotID);// 0x3510e24

--------------------------------
Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x4, Size: 4]
	DecalParameter[] DecalParams;//[Offset: 0xc, Size: 12]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DecalParameter
	Texture2D* DecalTexture;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AvatarActionBase

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 4]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 328]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 40]
	FName MeshMatSlotName;//[Offset: 0xc8, Size: 8]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xd0, Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0x100, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x128, Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x134, Size: 12]
	enum meshType;//[Offset: 0x140, Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector2D DrawSize;//[Offset: 0x40, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	int AdditionalItemID;//[Offset: 0x20, Size: 4]
	int DIYPlanID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: DIYEnableLevel
	int DeviceLevel;//[Offset: 0x0, Size: 4]
	int EnableLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponAvatarDIYEntity.AvatarDIYEntity.Object
	void SetWeaponEntityVisibility(bool visibie);// 0x3aa9b00
	void SetSocketName(FName InName);// 0x3510150
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x3510044
	void RenderEntity();// 0x350feb4
	void RemoveParticleEffect();// 0x3aa9ae4
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x350fe10
	void PrepareEntity();// 0x350fd74
	void OnPreRender();// 0x350fd58
	void OnPostRender();// 0x350fd3c
	bool IsForceEnableAnim();// 0x3aa9ab4
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x350f8e8
	ItemDefineID GetDefineID();// 0x350f7b4
	void EnterLogicPipeline();// 0x350f798
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x350f520
	void BroadcastWeaponRenderEvent();// 0x3aa9aa0
	void BroadcastWeaponEquipEvent(bool IsEquipped);// 0x3aa9a20
	void ApplyParticleEffect();// 0x3aa9a04
	void AddWeaponHandleAction();// 0x3aa99f0

--------------------------------
Class: WeaponEffect_TickMatParam.WeaponEffectCfgBase.Object
	MatParamModifyCfg ParamCfg;//[Offset: 0x48, Size: 184]
	void RemoveEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x3519384
	bool ApplyEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x35b1434

--------------------------------
Class: WeaponEffectCfgBase.Object
	enum TriggerCondition;//[Offset: 0x1c, Size: 1]
	int ConditionTriggerNum;//[Offset: 0x20, Size: 4]
	int MaxApplyCount;//[Offset: 0x24, Size: 4]
	enum ValidScene;//[Offset: 0x28, Size: 1]
	bool EnableAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	float LoopInterval;//[Offset: 0x2c, Size: 4]
	float ApplyTime;//[Offset: 0x30, Size: 4]
	bool EnableLowDeviceOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	void RemoveEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x3519384
	bool ReachedMaxTriggerTime();// 0x35b2414
	void Init();// 0x35b23f8
	bool ApplyEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x35b1434

--------------------------------
Class: MatParamModifyCfg
	SoftObjectPath CurveAsset;//[Offset: 0x0, Size: 24]
	FName ParamName;//[Offset: 0x18, Size: 8]
	FName ParticleTag;//[Offset: 0x20, Size: 8]
	float FxWaitTime;//[Offset: 0x28, Size: 4]
	int[] RelatedSlots;//[Offset: 0x2c, Size: 12]
	CurveFloat* CachedCurve;//[Offset: 0x38, Size: 4]
	FName ReplaceMatSlotName;//[Offset: 0x40, Size: 8]
	SoftObjectPath NormalMat;//[Offset: 0x48, Size: 24]
	SoftObjectPath ReplaceMat;//[Offset: 0x60, Size: 24]
	<FName,CurveFloat*> AdditionalParams;//[Offset: 0x78, Size: 60]

--------------------------------
Class: PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bCharacterComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 1]
	class Actor* PredictActorTemplate;//[Offset: 0x770, Size: 4]
	StaticMesh* MeshTemplate;//[Offset: 0x778, Size: 40]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x7a0, Size: 40]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x7c8, Size: 40]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x7f0, Size: 112]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x860, Size: 12]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x870, Size: 16]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x880, Size: 16]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x890, Size: 16]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0x8a0, Size: 16]
	LinearColor PredictLineColor;//[Offset: 0x8b0, Size: 16]
	PredictLineConfigParams PredictLineConfigParams;//[Offset: 0x8c0, Size: 12]
	PredictProjectilePathResult PredictResult;//[Offset: 0x8d8, Size: 184]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0x990, Size: 4]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0x994, Size: 4]
	StaticMesh* SplineMeshTemplate;//[Offset: 0x998, Size: 4]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0x9a0, Size: 12]
	int RedrawCounter;//[Offset: 0x9ac, Size: 4]
	FString LuaFilePath;//[Offset: 0x9b0, Size: 12]
	void SetPredictParams(out const Vector InStartPoint, out const Vector InVelocity, out const Vector InAcceleration);// 0x3758488
	void SetPredictLineColor(out const LinearColor NewColor);// 0x3758404
	void SetPredictActorTemplate(class Actor InActorTemplate);// 0x375838c
	void LoadPredictDefaultRes();// 0x3758378
	Actor* GetBindPredictLineTarget();// 0x35bf72c
	void EnableRedrawPredictLine();// 0x3758364
	void BindPredictLineTarget(Actor* InCachedTarget);// 0x35bf6ac

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x660, Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x6b0, Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x6c4, Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x6d8, Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x6ec, Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x704, Size: 4]
	float Duration;//[Offset: 0x708, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70e, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70f, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x711, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x712, Size: 1]
	float LoopPosition;//[Offset: 0x714, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x718, Size: 12]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	void UpdateSpline();// 0x661fe08
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x661fd34
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x661fbd4
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x65e91cc
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x661fa20
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x661f8c0
	void SetSplineWorldPoints(out const Vector[] Points);// 0x661f7ec
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x661f6e4
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x661f584
	void SetSplineLocalPoints(out const Vector[] Points);// 0x661f4b0
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x65e91cc
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x661f350
	void SetDrawDebug(bool bShow);// 0x661f2d0
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x661f204
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x661f0f0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x661f020
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x661ef5c
	bool IsClosedLoop();// 0x661ef34
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x661eea0
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x661edbc
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x661ed28
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x661ec44
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x661ebb0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x661eb1c
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x661ea38
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x661e9a4
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x661e880
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x661e7ac
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x661e6d8
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x661e54c
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x661e410
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x661e2d4
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x661e1b0
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x661cfb4
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x661e0dc
	byte GetSplinePointType(int PointIndex);// 0x661e05c
	float GetSplineLength();// 0x661e034
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x661df58
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x661dec8
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x661de38
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x661dd14
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x661dc40
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x661db6c
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x661da5c
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x661d998
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x661d8d4
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x661d7b0
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x661d6dc
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x661d608
	int GetNumberOfSplinePoints();// 0x661d5e0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x661d4bc
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x661d3e8
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x661d314
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x661d1ac
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x661d088
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x661cfb4
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x661cf34
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x661ceb4
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x661ce34
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x661cd10
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x661cc3c
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x661cb68
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x661cad8
	float GetCurvatureAtSplinePoint(int PointIndex);// 0x661ca58
	float GetCurvatureAtDistance(float Distance);// 0x661c9d8
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x661c904
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x661c820
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x661c6d4
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x661c5f0
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x661c554
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x661c470
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x661c39c
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x661c2b8
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x661c1d4
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x661c148
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x661c064
	void ClearSplinePoints(bool bUpdateSpline);// 0x661bfe4
	void AddSplineWorldPoint(out const Vector Position);// 0x661bf58
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x661bdf8
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x661bce0
	void AddSplineLocalPoint(out const Vector Position);// 0x661bc54
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x661bb38
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x661ba30

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 20]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 12]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 12]
	Vector LaunchAcceleration;//[Offset: 0x18, Size: 12]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float ProjectileRadius;//[Offset: 0x28, Size: 4]
	float MaxSimTime;//[Offset: 0x2c, Size: 4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	byte TraceChannel;//[Offset: 0x31, Size: 1]
	byte[] ObjectTypes;//[Offset: 0x34, Size: 12]
	Actor*[] ActorsToIgnore;//[Offset: 0x40, Size: 12]
	float SimFrequency;//[Offset: 0x4c, Size: 4]
	float OverrideGravityZ;//[Offset: 0x50, Size: 4]
	float GravityScale;//[Offset: 0x54, Size: 4]
	float IgnoreGravityDis;//[Offset: 0x58, Size: 4]
	byte DrawDebugType;//[Offset: 0x5c, Size: 1]
	float DrawDebugTime;//[Offset: 0x60, Size: 4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: PredictLineMaterialParams
	MaterialParameterCollection* MaterialParamCollection;//[Offset: 0x0, Size: 4]
	FName ParamName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PredictLineConfigParams
	bool bShowEndPointEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ShowSplineCount;//[Offset: 0x4, Size: 4]
	float ShowSplineCountPercent;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 12]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0xc, Size: 28]
	HitResult HitResult;//[Offset: 0x28, Size: 144]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector Velocity;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x794, Size: 88]
	Vector SplineUpDir;//[Offset: 0x7ec, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f8, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7f8, Size: 1]
	byte ForwardAxis;//[Offset: 0x7f9, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x7fc, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x800, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x804, Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x808, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 1]
	void UpdateMesh();// 0x6624afc
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x6624a38
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x6624978
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x66248b4
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x66247f0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x6624730
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x6624590
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x66244bc
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x66243f8
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x6624334
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x6624274
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x66241b0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x66240ec
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x662402c
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x6623f68
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x6623ea4
	Vector GetStartTangent();// 0x6623e5c
	Vector2D GetStartScale();// 0x6623e1c
	float GetStartRoll();// 0x6623df4
	Vector GetStartPosition();// 0x6623dac
	Vector2D GetStartOffset();// 0x6623d6c
	Vector GetSplineUpDir();// 0x6623d24
	byte GetForwardAxis();// 0x6623cfc
	Vector GetEndTangent();// 0x6623cb4
	Vector2D GetEndScale();// 0x6623c74
	float GetEndRoll();// 0x6623c4c
	Vector GetEndPosition();// 0x6623c04
	Vector2D GetEndOffset();// 0x6623bc4
	float GetBoundaryMin();// 0x6623b9c
	float GetBoundaryMax();// 0x38314e4

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28, Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x2c, Size: 4]
	Controller* OwnerController;//[Offset: 0x30, Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34, Size: 4]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x49216cc
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x3abc110
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x3abc054
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x3abc02c
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x3abc004
	PlayerController* GetOwnerPlayerController();// 0x3abbfdc
	Pawn* GetOwnerPawn();// 0x3abbfb4
	Controller* GetOwnerController();// 0x3abbf8c
	Actor* GetOwnerActor();// 0x3abbf70

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponId;//[Offset: 0x100, Size: 4]
	int SkillID;//[Offset: 0x104, Size: 4]
	byte WeaponType;//[Offset: 0x108, Size: 1]
	byte weaponTypeNew;//[Offset: 0x109, Size: 1]
	byte WeaponHoldType;//[Offset: 0x10a, Size: 1]
	byte WeaponSingleHandType;//[Offset: 0x10b, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0x110, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x120, Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x12c, Size: 4]
	float LaunchGravityScale;//[Offset: 0x130, Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bUseAnimWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	bool bForceFinishPreviousSwitchWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x138, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f, Size: 1]
	bool bEnableVaultHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool bPendingKillAttrModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x144, Size: 4]
	int UnableVehicleHoldingTipID;//[Offset: 0x148, Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	int UnablePeekTipID;//[Offset: 0x150, Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x158, Size: 60]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x194, Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x1d0, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x1d4, Size: 4]
	float BackToIdleAttachMeshTimePer;//[Offset: 0x1d8, Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x1dc, Size: 12]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x1e8, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x1ec, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x1f0, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x220, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x250, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x280, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x2b0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2e0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x310, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x340, Size: 48]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x370, Size: 60]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x3ac, Size: 60]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x3e8, Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	float StandbyAnimTimeInterval;//[Offset: 0x3f0, Size: 4]
	byte[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x3f4, Size: 12]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xf4, Size: 4]
	STExtraPlayerController* GlobalController;//[Offset: 0xfc, Size: 4]
	void UpdateComponentTick();// 0x35da56c
	STExtraWeapon* TryGetOwnerWeapon();// 0x3aaeb7c
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x3aaeb54
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x3aaea90
	bool IsWeaponOwnerOBTarget();// 0x3aaea68
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x3aae9e8
	bool IsWeaponLogicComponentTickEnabled();// 0x3aae9c0
	bool IsLocalOrSpectorPlayer();// 0x3aae998
	FString GetWeaponDetailInfo();// 0x3aae8d8
	byte GetOwnerPawnRole();// 0x3aae8b0

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 352]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x160, Size: 24]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10, Size: 152]
	SlateBrush LargerProfileImage;//[Offset: 0xa8, Size: 152]
	FString Name;//[Offset: 0x140, Size: 12]
	FString Description;//[Offset: 0x14c, Size: 12]
	int DisplayPriority;//[Offset: 0x158, Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4, Size: 4]
	int PickUpSoundID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc, Size: 4]
	byte Type;//[Offset: 0x10, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0x100, Size: 24]
	FName LogicSocket;//[Offset: 0x118, Size: 8]
	FName AttachSocket;//[Offset: 0x120, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0x128, Size: 1]
	float AIMinAttackDist;//[Offset: 0x12c, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x130, Size: 4]
	float AIAttackDist;//[Offset: 0x134, Size: 4]
	ItemHandleBase* GetBackpackItemHandle();// 0x3abd534
	int GetAvailableBulletsNumInBackpack();// 0x3abd50c

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4, Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc, Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18, Size: 8]
	BulletInClip WeaponBulletInClip;//[Offset: 0x20, Size: 16]
	uint32 WeaponShootID;//[Offset: 0x30, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x34, Size: 4]
	byte CurWeaponState;//[Offset: 0x38, Size: 1]
	byte CurShootType;//[Offset: 0x39, Size: 1]
	int CurShootTotalType;//[Offset: 0x3c, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x40, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x58, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int OperationIndex;//[Offset: 0x60, Size: 4]

--------------------------------
Class: BulletInClip
	int CurBulletNumInClip;//[Offset: 0x0, Size: 4]
	BulletInWeapon[] CurBulletIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BulletInWeapon
	int BulletID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x3c, Size: 4]
	FString OwnerCharacterName;//[Offset: 0x40, Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int SyncTicket;//[Offset: 0x50, Size: 4]
	bool bHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x3821010
	static int GetWeaponSkillID(STExtraWeapon* Weapon);// 0x3abeff8

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x3821010
	void ProcessTriggerEvent(enum Event);// 0x37ae984

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]
	bool bVerifyRpgShootInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bVerifyRpgShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0x100, Size: 60]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x13c, Size: 12]
	LinearColor MainTargetColor;//[Offset: 0x148, Size: 16]
	LinearColor SecondaryTargetColor;//[Offset: 0x158, Size: 16]
	LinearColor WeaponSightLockColor;//[Offset: 0x168, Size: 16]
	LinearColor WeaponSightLockHDRColor;//[Offset: 0x178, Size: 16]
	<int,int> SightTypeToIndex;//[Offset: 0x188, Size: 60]
	<byte,SightMaterialModify> SightMaterialModifyMap;//[Offset: 0x1c4, Size: 60]
	WeaponCrossHairPerformData[] CrossHairDataOverride;//[Offset: 0x200, Size: 12]
	float PistolCenterDownDis;//[Offset: 0x20c, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x214, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x21c, Size: 4]
	bool bForceHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	float RotateAngle;//[Offset: 0x224, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x228, Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x230, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x234, Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x238, Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x23c, Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x240, Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x244, Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x248, Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x24c, Size: 4]
	bool bInitAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	void UpdateComponentTick();// 0x35da56c
	void SetPureCrossHairColor(bool Enable);// 0x35da4ec
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x35da428
	void DrawSpreadEnd();// 0x35da414
	void DrawDebugPointEnd();// 0x35da400

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 12]
	enum SpreadType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 20]
	float Offset;//[Offset: 0x14, Size: 4]
	Vector2D IconOffset;//[Offset: 0x18, Size: 8]
	float Alpha;//[Offset: 0x20, Size: 4]
	float Scale;//[Offset: 0x24, Size: 4]
	float IconRotate;//[Offset: 0x28, Size: 4]
	float LogicRotate;//[Offset: 0x2c, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x34, Size: 4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SightMaterialModify
	SightMaterialModifyItem[] AimMaterialModify;//[Offset: 0x0, Size: 12]
	SightMaterialModifyItem[] NoAimMaterialModify;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SightMaterialModifyItem
	int MaterialID;//[Offset: 0x0, Size: 4]
	FName ParameterName;//[Offset: 0x8, Size: 8]
	LinearColor Value;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x404, Size: 4]
	float BulletFireSpeed;//[Offset: 0x408, Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x414, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x418, Size: 4]
	int ExtraBulletNumInOneClip;//[Offset: 0x41c, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x420, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x424, Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x428, Size: 12]
	float ShootInterval;//[Offset: 0x434, Size: 4]
	int ShootIntervalShowNumber;//[Offset: 0x438, Size: 4]
	float ExtraShootInterval;//[Offset: 0x43c, Size: 4]
	int ExtraShootIntervalShowNumber;//[Offset: 0x440, Size: 4]
	<int,float> VolatileShootIntervalMap;//[Offset: 0x444, Size: 60]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x483, Size: 1]
	bool bIsReasonable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x488, Size: 4]
	FName[] ExtraAvailableMuzzleSocketNameList;//[Offset: 0x48c, Size: 12]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0x49c, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0x4a0, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x4a4, Size: 12]
	float BurstShootInterval;//[Offset: 0x4b0, Size: 4]
	float BurstShootCD;//[Offset: 0x4b4, Size: 4]
	int BulletNumSingleShot;//[Offset: 0x4b8, Size: 4]
	FName MuzzleSocketName;//[Offset: 0x4c0, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x4c8, Size: 8]
	FName SilencerSocketName;//[Offset: 0x4d0, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x4d8, Size: 8]
	FName ShellDropSocketName;//[Offset: 0x4e0, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x4e8, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x4f0, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x4f4, Size: 4]
	byte ShootType;//[Offset: 0x4f8, Size: 1]
	int ShootTotalType;//[Offset: 0x4fc, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x504, Size: 4]
	bool ClientShootIntervalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool ClientPreVerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x50c, Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x520, Size: 20]
	float BaseImpactDamage;//[Offset: 0x534, Size: 4]
	float VehicleDamageScale;//[Offset: 0x538, Size: 4]
	float BulletMomentum;//[Offset: 0x53c, Size: 4]
	float MomentumAdditionScale;//[Offset: 0x540, Size: 4]
	float MomentumAdditionFixed;//[Offset: 0x544, Size: 4]
	float BulletRange;//[Offset: 0x548, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x54c, Size: 4]
	byte ImpactDirType;//[Offset: 0x550, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x554, Size: 12]
	float RangeModifier;//[Offset: 0x560, Size: 4]
	float ReferenceDistance;//[Offset: 0x564, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x568, Size: 4]
	class DamageType* DamageType;//[Offset: 0x56c, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x570, Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x588, Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	int InitBulletInClip;//[Offset: 0x5a4, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	float TraceDistance;//[Offset: 0x5ac, Size: 4]
	float MaxValidHitTime;//[Offset: 0x5b0, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x5b4, Size: 60]
	FName SpesificWeaponBulletCanBreakThroughTargetTag;//[Offset: 0x5f0, Size: 8]
	float MaxDamageRate;//[Offset: 0x5f8, Size: 4]
	<byte,int> BreakThroughMaxNumConfig;//[Offset: 0x5fc, Size: 60]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x63c, Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x640, Size: 88]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x698, Size: 8]
	Vector2D LocalSimulateBulletLaunchRangeFromMuzzle;//[Offset: 0x6a0, Size: 8]
	float BulletTrackDistanceFix;//[Offset: 0x6a8, Size: 4]
	float DamageImpulse;//[Offset: 0x6ac, Size: 4]
	byte ReloadType;//[Offset: 0x6b0, Size: 1]
	float PreFireTime;//[Offset: 0x6b4, Size: 4]
	float PreFireAnimScale;//[Offset: 0x6b8, Size: 4]
	float PostFireTime;//[Offset: 0x6bc, Size: 4]
	float PostReloadTime;//[Offset: 0x6c0, Size: 4]
	bool bNeedMagAnimationWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	float ReloadDurationStart;//[Offset: 0x6c8, Size: 4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x6cc, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x6d0, Size: 4]
	float ReloadDurationEnd;//[Offset: 0x6d4, Size: 4]
	float ReloadTime;//[Offset: 0x6d8, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x6dc, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x6e0, Size: 4]
	float ReloadTimeMagOutTactical;//[Offset: 0x6e4, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x6e8, Size: 4]
	float ReloadTimeMagInTactical;//[Offset: 0x6ec, Size: 4]
	float ReloadRate;//[Offset: 0x6f0, Size: 4]
	<byte,WeaponReloadCfg> SpecialReloadCfgData;//[Offset: 0x6f4, Size: 60]
	FName ReloadAllTIDName;//[Offset: 0x730, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x738, Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x744, Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x749, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74a, Size: 1]
	bool bAutoSwitchWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74b, Size: 1]
	float DropDuration;//[Offset: 0x74c, Size: 4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x754, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x758, Size: 252]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0x854, Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x864, Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x8c8, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x8cc, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x8d0, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x8e0, Size: 68]
	float ShotGunCenterPerc;//[Offset: 0x924, Size: 4]
	float ShotGunVerticalSpread;//[Offset: 0x928, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x92c, Size: 4]
	float GameDeviationFactor;//[Offset: 0x930, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x934, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x938, Size: 4]
	byte CrossHairType;//[Offset: 0x93c, Size: 1]
	float CrossHairInitialSize;//[Offset: 0x940, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x944, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x948, Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x94c, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x958, Size: 8]
	FName DefaultGripSocket;//[Offset: 0x960, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x968, Size: 8]
	FName DefaultMagSocket;//[Offset: 0x970, Size: 8]
	float WeaponBodyLength;//[Offset: 0x978, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x97c, Size: 12]
	float WeaponAimFOV;//[Offset: 0x98c, Size: 4]
	float WeaponAimInTime;//[Offset: 0x990, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x994, Size: 4]
	float WeaponAimYawRate;//[Offset: 0x998, Size: 4]
	float GameMotionYawRate;//[Offset: 0x99c, Size: 4]
	float GameMotionPitchRate;//[Offset: 0x9a0, Size: 4]
	float ForegripParam;//[Offset: 0x9a4, Size: 4]
	float MagParam;//[Offset: 0x9a8, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x9b0, Size: 4]
	byte SightType;//[Offset: 0x9b4, Size: 1]
	float SensitiveFirePitchRate;//[Offset: 0x9b8, Size: 4]
	byte SightVisionType;//[Offset: 0x9bc, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x9c0, Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x9d8, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x9dc, Size: 4]
	float RecoilKickADS;//[Offset: 0x9e0, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x9e4, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x9e8, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec, Size: 1]
	enum ReleaseFireType;//[Offset: 0x9ed, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ee, Size: 1]
	bool bEnableShoulderScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ef, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x9f4, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x9f8, Size: 4]
	float AnimationKick;//[Offset: 0x9fc, Size: 4]
	int ReloadAnimSlot;//[Offset: 0xa00, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa04, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa05, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0xa08, Size: 4]
	float SwitchAimAnimTime;//[Offset: 0xa0c, Size: 4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 1]
	int ConstantWeaponDurability;//[Offset: 0xa14, Size: 4]
	float ShootReduceDurabilityAmount;//[Offset: 0xa18, Size: 4]
	Rotator[] RearSightRotConfig;//[Offset: 0xa1c, Size: 12]
	FName[] RearSightSocketConfig;//[Offset: 0xa28, Size: 12]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xa34, Size: 12]
	int RearSightRotIndex;//[Offset: 0xa40, Size: 4]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa44, Size: 1]
	int MaxFireNumPerFrame;//[Offset: 0xa48, Size: 4]
	OpenCollisionLODAngle[] ShootCollisionDistSqAngles;//[Offset: 0xa4c, Size: 12]
	bool bCachedDefaultConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	byte[] CoronaEffectCfg;//[Offset: 0xe04, Size: 12]
	ItemDefineID GetBulletType();// 0x37af314

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x340, Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool bUseSimulateOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x348, Size: 4]
	float LaunchGravityScale;//[Offset: 0x34c, Size: 4]
	int PunctureTimes;//[Offset: 0x350, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x354, Size: 4]
	class DamageType* DamageType;//[Offset: 0x358, Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x35c, Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x364, Size: 4]
	Vector RootScale;//[Offset: 0x368, Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	Vector ShootDir;//[Offset: 0x378, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	float ShowBulletEffectMinDistance;//[Offset: 0x388, Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x480, Size: 4]
	delegate OnRecycleBullet;//[Offset: 0x484, Size: 12]
	delegate OnResetBullet;//[Offset: 0x490, Size: 12]
	delegate OnBulletImpact;//[Offset: 0x49c, Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x4a8, Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x4b4, Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x4b8, Size: 4]
	float WeaponFloorHeight;//[Offset: 0x56c, Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x570, Size: 12]
	byte CachedOwnerRole;//[Offset: 0x57c, Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x580, Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	int MaxTraceTimes;//[Offset: 0x588, Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 1]
	bool VerityBlock(out const Vector StartPos, out const Vector EndPos, STExtraShootWeapon* Weapon, Actor* ImpactActor, out HitResult OutHit);// 0x39675f8
	void ResetBulletDelegate__DelegateSignature();// 0x49216cc
	void ReloadNoEncodeAttr();// 0x34d0ac8
	void OnShowBulletEffect();// 0x49216cc
	void OnRecycleBulletDelegate__DelegateSignature();// 0x49216cc
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x3586940
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x49216cc
	void OnImpact(out const HitResult _ImpactResult);// 0x3586860
	bool NeedCheckBulletFlySound();// 0x35efa08
	void LaunchBulletDelegate__DelegateSignature();// 0x49216cc
	void LaunchBP(float Speed, out Transform InTrans, Actor* InOwningWeapon, Actor* InInstigator, out Transform OutTrans);// 0x49216cc
	int GetShootID();// 0x38fec8c
	float GetMaxNoGravityRange();// 0x39675c8
	float GetMaxBulletFlySpeed();// 0x36173e0
	float GetLaunchGravityScale();// 0x34daf78
	Controller* GetInstigatorControllerSafe();// 0x39675a0
	STExtraBaseCharacter* GetInstigatorCharacter();// 0x3967578
	bool ConditionalDestroyBullet(out const HitResult _ImpactResult);// 0x3967498
	bool ClientVerifyBlock(out const Vector MuzzlePos, out const Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x3967328

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x15c, Size: 4]
	void ResumeMoveAfterImpactWithNoLost();// 0x3597478
	void ResetTickDelay();// 0x359745c
	void IgnoreBounceReflectOnce();// 0x3597440
	void ForceStop();// 0x359742c

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4, Size: 4]
	float MaxSpeed;//[Offset: 0xf8, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 1]
	float PreviousHitTime;//[Offset: 0x100, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x104, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x110, Size: 4]
	float Buoyancy;//[Offset: 0x114, Size: 4]
	float Bounciness;//[Offset: 0x118, Size: 4]
	float Friction;//[Offset: 0x11c, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x124, Size: 12]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x13c, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x140, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x148, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x14c, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x150, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x65f0420
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x65f03a8
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x49216cc
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x49216cc
	Vector LimitVelocity(Vector NewVelocity);// 0x65f0314

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x308, Size: 60]
	ParticleSystem* DefaultFX;//[Offset: 0x344, Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x348, Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x34c, Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x350, Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x354, Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x358, Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x35c, Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x360, Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x364, Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x368, Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x36c, Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x370, Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x374, Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x378, Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x37c, Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x380, Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x384, Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x388, Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x38c, Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x390, Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x394, Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x398, Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x39c, Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x3a0, Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x3a4, Size: 4]
	ParticleSystem* BallCarFX;//[Offset: 0x3a8, Size: 4]
	ParticleSystem* FleshFXNormal;//[Offset: 0x3ac, Size: 4]
	ParticleSystem* FleshFXExpand;//[Offset: 0x3b0, Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x3b8, Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x3bc, Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x3c0, Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x3c4, Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x3c8, Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x3cc, Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x3d0, Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x3d4, Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x3d8, Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x3dc, Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x3e0, Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x3e4, Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x3e8, Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x3ec, Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x3f0, Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x3f4, Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x3f8, Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x3fc, Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x400, Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x404, Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x408, Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x40c, Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x410, Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x414, Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x418, Size: 4]
	AkAudioEvent* WindBreakSound;//[Offset: 0x41c, Size: 4]
	AkAudioEvent* BallCarSound;//[Offset: 0x420, Size: 4]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x424, Size: 4]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x428, Size: 4]
	DecalData DefaultDecal;//[Offset: 0x42c, Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x448, Size: 28]
	DecalData DirtDecal;//[Offset: 0x464, Size: 28]
	DecalData WaterDecal;//[Offset: 0x480, Size: 28]
	DecalData MetalDecal;//[Offset: 0x49c, Size: 28]
	DecalData WoodDecal;//[Offset: 0x4b8, Size: 28]
	DecalData GrassDecal;//[Offset: 0x4d4, Size: 28]
	DecalData GlassDecal;//[Offset: 0x4f0, Size: 28]
	DecalData FleshDecal;//[Offset: 0x50c, Size: 28]
	DecalData SteelDecal;//[Offset: 0x528, Size: 28]
	DecalData SandbagDecal;//[Offset: 0x544, Size: 28]
	DecalData SandDecal;//[Offset: 0x560, Size: 28]
	DecalData ClothDecal;//[Offset: 0x57c, Size: 28]
	DecalData PlasticDecal;//[Offset: 0x598, Size: 28]
	DecalData LeatherDecal;//[Offset: 0x5b4, Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x5d0, Size: 28]
	DecalData PaperDecal;//[Offset: 0x5ec, Size: 28]
	DecalData StoneDecal;//[Offset: 0x608, Size: 28]
	DecalData SnowDecal;//[Offset: 0x624, Size: 28]
	DecalData PopCanDecal;//[Offset: 0x640, Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x65c, Size: 28]
	DecalData LeafDecal;//[Offset: 0x678, Size: 28]
	DecalData CarDecal;//[Offset: 0x694, Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x6b0, Size: 28]
	DecalData IceDecal;//[Offset: 0x6cc, Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x6e8, Size: 216]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c2, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x7c4, Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x7c8, Size: 4]
	Vector DecalScale;//[Offset: 0x7d0, Size: 12]
	SceneComponent* TargetImpactComp;//[Offset: 0x7f0, Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x86c, Size: 4]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0x870, Size: 60]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 1]
	void TimerHideDecal();// 0x3833ba8
	void OnLoadImpactFxAsyncCallBack(SoftObjectPath ImpactFxPath, float DistanceScaler, byte HitSurfaceType);// 0x38339b4
	void OnHandleImpactFx(ParticleSystem* ImpactFX, float DistanceScaler, byte HitSurfaceType);// 0x38338b4
	SoftObjectPath GetDirectionImpactFXPath(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x38336c8
	bool GetDirectionImpactFXAsync(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x383352c

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize VictimLocation;//[Offset: 0x24, Size: 12]
	Vector_NetQuantize BulletPos;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x3c, Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	uint32 ShootID;//[Offset: 0x54, Size: 4]
	int BulletTypeSpecialID;//[Offset: 0x58, Size: 4]
	uint16 CompensationTime;//[Offset: 0x5c, Size: 2]
	Actor* Actor;//[Offset: 0x60, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x68, Size: 8]
	int TimeStamp;//[Offset: 0x70, Size: 4]
	int ClientShootTime;//[Offset: 0x74, Size: 4]
	byte SpecialBulletID;//[Offset: 0x78, Size: 1]
	byte HitBodyType;//[Offset: 0x79, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x7c, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x80, Size: 4]
	Vector_NetQuantize WeaponOwnerHeadPos;//[Offset: 0x84, Size: 12]
	float DamageRate;//[Offset: 0x90, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	Vector_NetQuantize GunTailPos;//[Offset: 0x98, Size: 12]
	FName BoneName;//[Offset: 0xa8, Size: 8]
	byte ImpactEffectMask;//[Offset: 0xb0, Size: 1]
	byte DataSub;//[Offset: 0xb1, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2b0, Size: 4]
	int SortOrder;//[Offset: 0x2b4, Size: 4]
	float FadeScreenSize;//[Offset: 0x2b8, Size: 4]
	float FadeStartDelay;//[Offset: 0x2bc, Size: 4]
	float FadeDuration;//[Offset: 0x2c0, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	Vector DecalSize;//[Offset: 0x2c8, Size: 12]
	void SetSortOrder(int Value);// 0x64c97c8
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x64c9750
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x64c9648
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x64c95d0
	float GetFadeStartDelay();// 0x64c95a8
	float GetFadeDuration();// 0x64c9580
	MaterialInterface* GetDecalMaterial();// 0x64c9558
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x64c9528

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletCameraModeConfig ReplayPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x48, Size: 8]
	WeaponVisualBulletItemConfig ReplayDefaultSetting;//[Offset: 0x50, Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8, Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponReloadCfg
	float Time;//[Offset: 0x0, Size: 4]
	float TimeMagOut;//[Offset: 0x4, Size: 4]
	float TimeMagIn;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 76]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c, Size: 76]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98, Size: 76]
	float followTimeMax;//[Offset: 0xe4, Size: 4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	CurveFloat* SpeedCurve;//[Offset: 0xec, Size: 4]
	CurveFloat* DistanceSpeedCurve;//[Offset: 0xf0, Size: 4]
	CurveFloat* SensitiveSpeedCurve;//[Offset: 0xf4, Size: 4]
	float MaxAngle;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 4]
	float CenterSpeedRate;//[Offset: 0x4, Size: 4]
	float RangeRate;//[Offset: 0x8, Size: 4]
	float SpeedRate;//[Offset: 0xc, Size: 4]
	float RangeRateSight;//[Offset: 0x10, Size: 4]
	float SpeedRateSight;//[Offset: 0x14, Size: 4]
	float CrouchRate;//[Offset: 0x18, Size: 4]
	float ProneRate;//[Offset: 0x1c, Size: 4]
	float DyingRate;//[Offset: 0x20, Size: 4]
	float DriveVehicleRate;//[Offset: 0x24, Size: 4]
	float InVehicleRate;//[Offset: 0x28, Size: 4]
	float FreeFallRate;//[Offset: 0x2c, Size: 4]
	float OpeningRate;//[Offset: 0x30, Size: 4]
	float LandingRate;//[Offset: 0x34, Size: 4]
	float adsorbMaxRange;//[Offset: 0x38, Size: 4]
	float adsorbMinRange;//[Offset: 0x3c, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x44, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x48, Size: 4]

--------------------------------
Class: AutoAimingConfigByGameMode
	class GameStateBase* GameStateClass;//[Offset: 0x0, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x4, Size: 252]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24, Size: 4]
	int BulletPerSwitch;//[Offset: 0x28, Size: 4]
	float TimePerSwitch;//[Offset: 0x2c, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilValueClimb;//[Offset: 0x40, Size: 4]
	float RecoilValueFail;//[Offset: 0x44, Size: 4]
	float RecoilModifierStand;//[Offset: 0x48, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c, Size: 4]
	float RecoilModifierProne;//[Offset: 0x50, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60, Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x40, Size: 4]

--------------------------------
Class: OpenCollisionLODAngle
	float DistSq;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x104, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x108, Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x178, Size: 100]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x1dc, Size: 68]
	void SetUseTss(bool bUse);// 0x3597804
	void OnWeaponStopFire();// 0x35977f0
	void OnWeaponStartFire();// 0x35977dc
	void OnWeaponShoot();// 0x35977c8
	void GetDataFromWeaponEntity();// 0x35977b4
	Vector GetCurRecoilInfo();// 0x359776c
	float GetCurDeviation();// 0x359773c
	void CheckComponentTick();// 0x3597728

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c, Size: 4]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	Vector2D Size;//[Offset: 0x28, Size: 8]
	Vector2D Origin;//[Offset: 0x30, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x38, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float Opacity;//[Offset: 0x44, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c, Size: 4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50, Size: 4]
	Pawn* CharacterOwner;//[Offset: 0x54, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float LastRenderTime;//[Offset: 0x5c, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x60, Size: 8]
	Vector2D RenderSize;//[Offset: 0x68, Size: 8]
	float RenderScale;//[Offset: 0x70, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x74, Size: 8]
	Canvas* Canvas;//[Offset: 0x7c, Size: 4]
	float AspectScale;//[Offset: 0x80, Size: 4]
	Vector2D CanvasClip;//[Offset: 0x84, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0x8c, Size: 12]
	bool ShouldDraw(bool bShowScores);// 0x36806f4
	void SetHidden(bool bIsHidden);// 0x368066c
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x36803fc
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x3680268
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x3680114
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x3680008
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x367fb7c
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x367f410
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x367efe4
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x367ef28
	void Draw(float DeltaTime);// 0x364147c
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x367ee8c

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	FString LuaFilePath;//[Offset: 0x3f0, Size: 12]
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 1]
	Vector MarkerPosition;//[Offset: 0x400, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 1]
	bool OBShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x410, Size: 120]
	bool bDrawHitIconEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 1]
	Texture2D* HUDMainTexture;//[Offset: 0x48c, Size: 4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x490, Size: 4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x494, Size: 4]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x49c, Size: 12]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x4a8, Size: 12]
	SimpleCrossHairData[] PriorCrossHairList;//[Offset: 0x4b4, Size: 12]
	Texture2D* HUDPlayerTexture;//[Offset: 0x4cc, Size: 4]
	CanvasIcon Crosshair;//[Offset: 0x4d0, Size: 20]
	CanvasIcon ProgreesBar;//[Offset: 0x534, Size: 20]
	CanvasIcon BKProgreesBar;//[Offset: 0x548, Size: 20]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x55c, Size: 20]
	CanvasIcon Marker;//[Offset: 0x584, Size: 20]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x598, Size: 4]
	CanvasIcon WORLDMAP;//[Offset: 0x59c, Size: 20]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x5b0, Size: 4]
	float DateDrawOffsetX;//[Offset: 0x5e0, Size: 4]
	void SetShowDebugInfo(bool bNewDebugShow);// 0x39b5af4
	void SetHitPerformColor(byte Type, out const LinearColor Color);// 0x39b5a2c
	void SetDrawDisableIcon(bool IsDrawDisableIcon);// 0x39b59a4
	void OnAsyncLoadingFinished();// 0x39b5990
	bool IsValidDamageNumber(const Actor* DamageCauser, int DamageTypeId);// 0x39b58c4
	bool IsHitPerformDependDamageType(int DamageTypeId, Actor* HitActor);// 0x39b57f8
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x39b5764
	AkAudioEvent* GetHitSound(float Damage, bool IsHeadshot);// 0x39b5690
	FString GetDateString();// 0x39b55d0
	LinearColor GetColorByTeamID(int TeamID);// 0x39b553c
	FString[] GetCharacterAnimInfo(Character* InCharacter);// 0x39b5398
	void EnableCrosshair(bool bEnable);// 0x39b531c
	void DrawScreenString(FText Text, float X, float Y);// 0x39b4fec
	void DrawPickupInfo(float X, float Y);// 0x35bdb94
	void DrawCircleUFunction(Vector2D Center, float Radius, LinearColor Color);// 0x39b4ee0
	void AddHitDamageNumberWithConfig(float Damage, const Actor* HitTarget, const STExtraPlayerController* PC, int ConfigIndex, bool bIsHeadshot, bool bIsDeadlyShot, bool bIsCareTeam);// 0x39b4cb0
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadshot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x39b4ad4
	void AddHitDamage(float Damage, bool IsHeadshot, out const DamageEvent DamageEvent, Actor* HitActor, bool bIgnoreDamageType);// 0x39b490c

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 12]
	float DefaultSpread;//[Offset: 0xc, Size: 4]
	float SpreadMax;//[Offset: 0x10, Size: 4]
	float HeadExtraScale;//[Offset: 0x14, Size: 4]
	float AddSpreadScale;//[Offset: 0x18, Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x1c, Size: 4]
	float DefaultOffset;//[Offset: 0x20, Size: 4]
	float DefaultAlpha;//[Offset: 0x24, Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x28, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x30, Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x40, Size: 16]
	LinearColor HitToDeathDrawColor;//[Offset: 0x50, Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x60, Size: 4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x64, Size: 4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x68, Size: 4]
	float CurCrosshairSpread;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: SimpleCrossHairData
	FString Tag;//[Offset: 0x0, Size: 12]
	Texture2D* CrossHairTexture;//[Offset: 0xc, Size: 4]
	float Scale;//[Offset: 0x10, Size: 4]
	int Priority;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30, Size: 4]
	TextureUVs UVs;//[Offset: 0x34, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48, Size: 12]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x58, Size: 8]
	float Rotation;//[Offset: 0x60, Size: 4]
	Vector2D RotPivot;//[Offset: 0x64, Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float RenderPriority;//[Offset: 0x8, Size: 4]
	Vector2D Position;//[Offset: 0xc, Size: 8]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	LinearColor RenderColor;//[Offset: 0x1c, Size: 16]
	float RenderOpacity;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 4]
	float V;//[Offset: 0x4, Size: 4]
	float UL;//[Offset: 0x8, Size: 4]
	float VL;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float TextScale;//[Offset: 0x48, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x50, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x58, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x6c, Size: 16]
	byte HorzPosition;//[Offset: 0x7c, Size: 1]
	byte VertPosition;//[Offset: 0x7d, Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0x100, Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107, Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x10c, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x168, Size: 4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	void HandleOnWeaponStopFire();// 0x34f4004
	void HandleOnWeaponStartFire();// 0x359643c
	bool CheckCloseDSTick();// 0x3596414

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float LastCalcShootTime;//[Offset: 0x104, Size: 4]
	HitResult CalcShootHitRet;//[Offset: 0x108, Size: 144]
	bool bShootIDNotMatchReportKillflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x19c, Size: 4]
	<byte,ShootWeaponCustomDamageList> CustomBulletDamage;//[Offset: 0x1a0, Size: 60]
	FName NormalBulletsTrackCompTag;//[Offset: 0x1e0, Size: 8]
	bool bJumpInitClipIDAndShootID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool bUseMuzzleRotWhenHandFolder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 1]
	bool bChangeShootStartWhenReversedDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea, Size: 1]
	float UseCameraRotReverBlockDistance;//[Offset: 0x1ec, Size: 4]
	bool bSkipVerifyShootIDValidity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bSkipVerifyStartFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x1f4, Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x1f8, Size: 4]
	delegate OnShoot;//[Offset: 0x1fc, Size: 12]
	delegate OnBulletHitConstRefDelegate;//[Offset: 0x208, Size: 12]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x708, Size: 12]
	AIActingComponent* CacheAIActingComp;//[Offset: 0x730, Size: 4]
	int LastFireID;//[Offset: 0x740, Size: 4]
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x396869c
	void ShootDelegate__DelegateSignature();// 0x49216cc
	void OnWeaponClipMaxBulletChanged();// 0x3968688
	void OnWeaponBulletChanged();// 0x3968674
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x49216cc
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x49216cc
	void OnBulletHitConstRefDelegate__DelegateSignature(out const BulletHitInfoUploadData Data, STExtraShootWeapon* Weapon);// 0x49216cc
	bool IsBulletHasShotFlag(int ShootID, enum ShotFlag);// 0x39685b0
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity, bool bRefreshCollison);// 0x3968488
	HitResult ConditionPreCalcShootHitRet(bool WithDeviation, float ToleranceTime);// 0x3968314

--------------------------------
Class: ShootWeaponCustomDamageList
	<enum,ShootWeaponCustomDamage> Data;//[Offset: 0x0, Size: 60]
	float RangeModifier;//[Offset: 0x3c, Size: 4]
	float ReferenceDistance;//[Offset: 0x40, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x44, Size: 4]
	float BaseImpactDamage;//[Offset: 0x48, Size: 4]
	class STExtraShootWeaponBulletBase* BulletClass;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: ShootWeaponCustomDamage
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 40]
	float DamageRate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AIActingComponent.LuaInstancedActorComponent.ActorComponent.Object
	FString AIActingLuaConfig;//[Offset: 0x114, Size: 12]
	FString DefaultLuaFilePath;//[Offset: 0x120, Size: 12]
	int WillKilledBotNum;//[Offset: 0x12c, Size: 4]
	int PlayersOnSquare;//[Offset: 0x130, Size: 4]
	int OriginalTotalAINum;//[Offset: 0x134, Size: 4]
	int OriginalTotalCandidateAINum;//[Offset: 0x138, Size: 4]
	int OriginalTotalCandidateMLAINum;//[Offset: 0x13c, Size: 4]
	bool bSimulateKillConsiderMLAINum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int[] SimulateKillNums;//[Offset: 0x144, Size: 12]
	int OriginalDeliveryMLAINum;//[Offset: 0x150, Size: 4]
	int OriginalFakePlayerMLAINum;//[Offset: 0x154, Size: 4]
	AIWayPointActor*[] WayPointActorList;//[Offset: 0x160, Size: 12]
	bool bUseCacheWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0x170, Size: 12]
	AIActingCandidateData[] CandidateMLDeliveryList;//[Offset: 0x17c, Size: 12]
	bool bCheckTeleportLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	float AverageRating;//[Offset: 0x220, Size: 4]
	bool bUseMlAICondCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float MlAIHpCheckValue;//[Offset: 0x228, Size: 4]
	float AIDeliveryWaveInterval;//[Offset: 0x22c, Size: 4]
	bool bNewPrepareBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool bSimulateKilledByServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	int MaxActiveAI;//[Offset: 0x234, Size: 4]
	int ActiveAI_n;//[Offset: 0x238, Size: 4]
	int ActiveAI_m;//[Offset: 0x23c, Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x240, Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x244, Size: 4]
	float SelectActionPeriod;//[Offset: 0x248, Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x24c, Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x250, Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x254, Size: 12]
	int SimulateKillMinIntervalNum;//[Offset: 0x2a0, Size: 4]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x2a4, Size: 12]
	float MinKilledFreqScale;//[Offset: 0x2b0, Size: 4]
	float MaxKilledFreqScale;//[Offset: 0x2b4, Size: 4]
	bool bEnableClassicDeliveryAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	bool bEnableHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	int FullFeedLimit;//[Offset: 0x2bc, Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x2c0, Size: 12]
	float DeliveryBeginTime;//[Offset: 0x2cc, Size: 4]
	float DeliveryFreq;//[Offset: 0x2d0, Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x2d4, Size: 4]
	float MinimumWarmScore;//[Offset: 0x2d8, Size: 4]
	float SpecialAIHpCondition;//[Offset: 0x2dc, Size: 4]
	float SpecialAICircleDistanceScale;//[Offset: 0x2e0, Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x2e4, Size: 12]
	DeliveryCondition[] DeliveryChecks;//[Offset: 0x2f0, Size: 12]
	float TeammateDistanceThresholdSqr;//[Offset: 0x2fc, Size: 4]
	float EnemyDistanceThresholdSqr;//[Offset: 0x300, Size: 4]
	float DeliveryCoolDown;//[Offset: 0x304, Size: 4]
	SpecialAIDeliveryNumContainer[] SpAINumWitmTeammateCfg;//[Offset: 0x308, Size: 12]
	FString HotValuePrefix;//[Offset: 0x314, Size: 12]
	HotValueAttenuation HotValueAttenuation;//[Offset: 0x320, Size: 12]
	HotValueScale HotValueScale;//[Offset: 0x32c, Size: 12]
	float DeliveryHotValueThreshold;//[Offset: 0x338, Size: 4]
	float HotValueUpdateBeginTime;//[Offset: 0x33c, Size: 4]
	float HotValueUpdateDeltaTime;//[Offset: 0x340, Size: 4]
	bool bDebugHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	Vector2D HotValueLocationOffset;//[Offset: 0x350, Size: 8]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x370, Size: 12]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x37c, Size: 12]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x388, Size: 12]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x394, Size: 12]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x3a0, Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x3a4, Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x3a8, Size: 4]
	int CommonAIDeliverInWave;//[Offset: 0x3ac, Size: 4]
	float DeliveryWaveCD;//[Offset: 0x3b0, Size: 4]
	<enum,int> StrategyLimit;//[Offset: 0x3b4, Size: 60]
	<enum,int> StrategyNums;//[Offset: 0x3f0, Size: 60]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x42c, Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x430, Size: 4]
	STExtraPlayerCharacter*[] CachedCandidatePlayers;//[Offset: 0x434, Size: 12]
	FakePlayerAIController*[] CachedCandidateAICs;//[Offset: 0x494, Size: 12]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x4d8, Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x4dc, Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	bool bCheckTargetLocationDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 1]
	float TargetLocationDistanceThreshold;//[Offset: 0x4fc, Size: 4]
	float MaxAILocationTraceHeightZ;//[Offset: 0x500, Size: 4]
	AIActingBPAssit* m_BPAssit;//[Offset: 0x510, Size: 4]
	FString AIActingBPAssitClassPath;//[Offset: 0x514, Size: 12]
	Actor*[] WaterSwimActors;//[Offset: 0x520, Size: 12]
	bool bEnableAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 1]
	delegate CustomDeliveryActDelegate;//[Offset: 0x530, Size: 12]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x57c, Size: 12]
	void UpdateCachedCandidates();// 0x34bbd78
	void UpdateCachedCandidatePlayers();// 0x34bbd64
	void UpdateCachedCandidateAICs();// 0x34bbd50
	void TickClassicDeliver(float DeltaTime);// 0x34bbcd8
	void StrategyChange(const enum StrategyType, const bool bAdd);// 0x34bbc14
	void SimulateKilledFakeAI(out const AIActingCandidateData Killer, out const AIActingCandidateData Killed, int WeapID, out int InWillKilled, byte SpecialDamageType);// 0x34bb924
	void SimulateKillAllFakeAI();// 0x34bb910
	bool SetAIRatingLevel(FakePlayerAIController* AIC, int Level);// 0x34bb84c
	void SetAIControllerDeleverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x34bb790
	void RemoveCandidateAI(int PlayerKey, bool bMLAI);// 0x34bb6cc
	void OnSetDeliverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x49216cc
	void OnNotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x34bb5b0
	void OnDeliverWaveBegin(int CurWave);// 0x49216cc
	void InitBornLandStrategyNum();// 0x34b6cb4
	void GMOnBehaviorTreeLoaded(AIController* InAIController);// 0x34bb538
	void GMModidyAIEquipSpawnGroupData(out AIEquipSpawnGroupDataBase[] OutGroupData);// 0x34bb48c
	int GetWaveCD();// 0x34bb46c
	STExtraPlayerCharacter* GetOneDeliveryTarget();// 0x34bb444
	float GetNoWhiteCirclesRadius();// 0x34bb428
	void GetNotLimitStrategy(out enum[] NotLimitStrategy);// 0x34bb35c
	int GetNonInstancedAICNum();// 0x34bb338
	float GetHotValueByRowCol(const int InRow, const int InCol);// 0x34bb274
	float GetHotValue(const Vector InLocation);// 0x34bb1fc
	int GetCurrentActing();// 0x34bb1d4
	STExtraBaseCharacter*[] GetAllPlayerPawns();// 0x34bb114
	STExtraBaseCharacter*[] GetAllAIPawnNoParam();// 0x34bb054
	STExtraBaseCharacter*[] GetAllAIPawn(bool bMLAI, bool bDelivery);// 0x34baef4
	STExtraBaseCharacter* CreateCharacter(AIActingCandidateData SpawnCandidateAI, Vector InLocation);// 0x34bad20
	void CollectAndReportAIStrategyInfo();// 0x34bad0c
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponId, FString KillerNation, FString KilledNation);// 0x34ba81c
	bool AdjustAIAttackAnimalRatingDamage(BasicAIController* AIC);// 0x34ba79c

--------------------------------
Class: LuaInstancedActorComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x104, Size: 12]
	void UnRegistLuaTick();// 0x76d6634
	void RegistLuaTick(float TickInterval);// 0x76d7280

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x308, Size: 4]
	bool bOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x310, Size: 12]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x31c, Size: 4]
	BillboardComponent* ShowSprite;//[Offset: 0x320, Size: 4]
	Vector GetNextWayPointLocation(int TeamID, int ExcludeID);// 0x34d9ad8

--------------------------------
Class: TeamWayPointLink
	int TeamID;//[Offset: 0x0, Size: 4]
	WayPointLink[] Links;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIActingCandidateData
	int TeamID;//[Offset: 0x0, Size: 4]
	uint32 AIPlayerKey;//[Offset: 0x4, Size: 4]
	FString AIPlayerName;//[Offset: 0x8, Size: 12]
	FString AIPlayerNation;//[Offset: 0x14, Size: 12]
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x20, Size: 4]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0xc10, Size: 4]
	delegate OnEnterJumping;//[Offset: 0xc14, Size: 12]
	delegate OnFakePlayerRespawn;//[Offset: 0xc20, Size: 12]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0xc4c, Size: 4]
	int PlayerTeamId;//[Offset: 0xc50, Size: 4]
	uint32 PlayerKey;//[Offset: 0xc54, Size: 4]
	FString PlayerName;//[Offset: 0xc58, Size: 12]
	byte AIType;//[Offset: 0xc64, Size: 1]
	int resID;//[Offset: 0xc68, Size: 4]
	bool bForceRecordKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 1]
	float TeleportRandomAngle;//[Offset: 0xc70, Size: 4]
	bool bUnPossessStopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 1]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc75, Size: 1]
	FString DropItemCfgTableName;//[Offset: 0xc78, Size: 12]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0xc84, Size: 4]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc89, Size: 1]
	GameModePlayerItem[] OverrideInitialItemList;//[Offset: 0xc8c, Size: 12]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0xc98, Size: 4]
	int CurWeaponSchemeIndex;//[Offset: 0xc9c, Size: 4]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0xca0, Size: 12]
	void SetPlane(Actor* InPlane);// 0x363b9f0
	void SetLiveState(enum InLiveState);// 0x363b978
	void SetDeliveryActingTarget(STExtraBaseCharacter* DeliveryActingTarget);// 0x363b900
	void SetDeliverTarget(STExtraPlayerCharacter* DeliverTargetPlayer);// 0x363b888
	void SetCanJump(bool CanJump);// 0x363b808
	bool IsInPlane();// 0x363b7e0
	bool IsDeliver();// 0x363b7b8
	int GetResId();// 0x363b79c
	Actor* GetPlane();// 0x363b774
	STExtraPlayerCharacter* GetDeliverTarget();// 0x363b74c
	PlayerSecurityInfoCollector* GetAIPlayerSecurityInfoCollector();// 0x363b730
	void ForceDropItems(int itemType);// 0x363b6b8
	void ExitPlane();// 0x363b6a4
	void EnterPlane();// 0x363b690
	void DebugBlackboardKey(out const FName KeyName, bool bShouldShow);// 0x363b5b4
	void ClearDeliver();// 0x363b5a0
	bool ChecCanChangeWeaponScheme();// 0x363b578
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x363b4f8
	void ChangeToNewPrepareBehaviorTree();// 0x363b4e4
	void ChangeToFightingBehaviorTree();// 0x363b4d0
	void ChangeBehaviorTree(int Index, const bool bUseNewTree);// 0x363b40c

--------------------------------
Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	delegate OnCustomSpawnItemDelegate;//[Offset: 0x5b0, Size: 16]
	float CheckPeriod;//[Offset: 0x5c0, Size: 4]
	float RandomDeviation;//[Offset: 0x5c4, Size: 4]
	float ProtectCountdownTime;//[Offset: 0x5c8, Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x5cc, Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x5d0, Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x5d4, Size: 8]
	float TurnVelocity;//[Offset: 0x5dc, Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x5e0, Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x5e8, Size: 60]
	bool bSyncViewRotationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 1]
	bool bAimOffsetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 1]
	GameModeAIPlayerParams AIParams;//[Offset: 0x630, Size: 816]
	byte AIActionType;//[Offset: 0x99c, Size: 1]
	byte FakePlayerBornType;//[Offset: 0x99d, Size: 1]
	bool IsVaultBreakWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99e, Size: 1]
	float ValidPlayerControllerDist;//[Offset: 0x9a0, Size: 4]
	float DelayAIVaultBreakWindowTime;//[Offset: 0x9a4, Size: 4]
	int AIParachuteStyle;//[Offset: 0x9a8, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x9ac, Size: 4]
	SpectatorComponent* SpectatorComponent;//[Offset: 0x9b0, Size: 4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x9b4, Size: 56]
	AIShootMissInfo AIShootMissInfo;//[Offset: 0x9ec, Size: 24]
	AIConditionHearingComponent* AIConditionHearingComponent;//[Offset: 0xa04, Size: 4]
	AIParachuteJumpComponent* AIParachuteComp;//[Offset: 0xa08, Size: 4]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0xa4c, Size: 4]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0xa50, Size: 4]
	bool IsRespawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5d, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0xa60, Size: 12]
	Actor* Plane;//[Offset: 0xa6c, Size: 4]
	int FlightNo;//[Offset: 0xa70, Size: 4]
	int DefaultAIFeatureConfigID;//[Offset: 0xa74, Size: 4]
	AIFeatureInfo AIFeatureInfo;//[Offset: 0xa78, Size: 316]
	bool IsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 1]
	STExtraBaseCharacter* RescuedByWho;//[Offset: 0xbf4, Size: 8]
	uint32 CurAILevel;//[Offset: 0xc00, Size: 4]
	int MLAIStyle;//[Offset: 0xc04, Size: 4]
	bool bSkipCreateBackpackEveryTimePossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc08, Size: 1]
	bool bFullyRandomEveryTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc09, Size: 1]
	bool bConsiderBlueCircleWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0a, Size: 1]
	bool bConsiderWaterWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0b, Size: 1]
	bool bSkipUpdateRotationDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c, Size: 1]
	void UpdateAIMissShootInfo(float CurrentTime, Vector2D MissRange, float MissOnPurposeCD);// 0x3570f00
	void StopBehaviorTreeAndSetNull();// 0x3570eec
	void SetRatingDamageScale(float InRating);// 0x3570e78
	void SetPlayerStatePlayerId(int InPlayerId);// 0x3570e00
	void SetMLAIType(int Type);// 0x3570d88
	void SetIsMLAI(bool InIsMLAI);// 0x3570d00
	void SetGlobalAverageRating(float RatingValue);// 0x3570c88
	void SetAILevel(uint32 NewAILevel);// 0x3570c10
	void Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x3570ae0
	void Respawn();// 0x3570ab8
	bool IsMLAIPlayerParam();// 0x3570a9c
	bool IsInWater();// 0x3570a80
	bool IsDead();// 0x3570a58
	bool IsAvailableBackpacItemType(ItemDefineID DefineID);// 0x35709c0
	void InitSpectatorComponentWithParams(out const GameModeAIPlayerParams Params);// 0x3570900
	void InitAIFeatureInfo(int InID);// 0x3570880
	bool InitAI(int InFeatureID);// 0x35707f8
	float GetRatingDamageScale(STExtraPlayerController* PlayerController);// 0x3570778
	float GetRatingDamageFiringAccuRadius(STExtraPlayerController* PlayerController);// 0x35706f8
	Pawn* GetPossessedBaseCharacter();// 0x35706d0
	uint32 GetMLBotTypeParam();// 0x35706b4
	uint32 GetInitAILevelParam();// 0x3570698
	float GetGlobalAverageRating();// 0x3570670
	<float,float> GetEnemyHpDamageRateMap(STExtraBaseCharacter* InEnemy);// 0x35704a0
	Pawn* GetCurEnemy();// 0x3570470
	GameModeAIPlayerParams GetAIParams();// 0x3570430
	uint32 GetAILevel();// 0x3570414
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x3570348
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x357027c
	void CustomSpawnItemDelegate__DelegateSignature(BaseAIController* AIController);// 0x49216cc
	void ClearAIControllerCachedData();// 0x3570268
	void CheckOverConstructing(Actor* InActor, int TotoalAmountAllowed, int InBuildingID);// 0x3570168
	void ChangeAIActionType(byte InAIActionType);// 0x35700e8
	void AutoSpawnItem();// 0x35700d4
	void AddItemForAIWithFullCheck(AIEquipSpawnItem[] DataSet, AIEquipSpawnItem[] AIMustPickUpItemList);// 0x356fe54
	void AddItemForAI(int ItemId, int Count, bool bDropOnDead, bool bRollOnDead);// 0x356fcf0

--------------------------------
Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x400, Size: 4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x404, Size: 4]
	SpawnerBase* TeamZoneSpawner;//[Offset: 0x408, Size: 4]
	SpawnerBase* CurSpawner;//[Offset: 0x40c, Size: 4]
	uint32 OwnedSpawnerID;//[Offset: 0x410, Size: 4]
	bool bAsyncLoadBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	enum AIAttackType;//[Offset: 0x415, Size: 1]
	bool IsAdvancedAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x418, Size: 12]
	BehaviorTree*[] NewBehaviorTreePath;//[Offset: 0x424, Size: 12]
	BehaviorTree*[] AdvancedBehaviorTreePath;//[Offset: 0x430, Size: 12]
	int BehaviorTreeIndexRunWhenPossess;//[Offset: 0x43c, Size: 4]
	float ActorLocationTetherDistance;//[Offset: 0x440, Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x444, Size: 4]
	FString AIFeatureInfoTableName;//[Offset: 0x448, Size: 12]
	FString AIWeaponRangeTableName;//[Offset: 0x454, Size: 12]
	int HitRateConfigNum;//[Offset: 0x460, Size: 4]
	int AIFeatureID;//[Offset: 0x464, Size: 4]
	AITargetInViewOffset AITargetInViewOffset;//[Offset: 0x468, Size: 44]
	delegate OnBehaviorTreeLoaded;//[Offset: 0x4e0, Size: 12]
	AIShootingPoseOffsetInfo shootingPoseOffsetInfo;//[Offset: 0x4ec, Size: 84]
	delegate OnCollectionHearSoundDelegate;//[Offset: 0x540, Size: 12]
	bool InterpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	enum AICharacterRotateInterpType;//[Offset: 0x54d, Size: 1]
	float RotationSpeedOfInterpControlRotation;//[Offset: 0x550, Size: 4]
	FString LuaFilePath;//[Offset: 0x55c, Size: 12]
	bool UseAIFeatureInfo();// 0x3579618
	void SetCurShootingPose(enum InAIShootingPose);// 0x35795a0
	void OnAIEnterDarkArea(bool bInEnter, Actor* DarkArea, bool bAtLeastInOne);// 0x3579484
	void InitAIFeatureInfo(int InID);// 0x3570880
	bool InitAI(int InFeatureID);// 0x35707f8
	Pawn*[] GetTeammates();// 0x35793c4
	int GetTeammateCount();// 0x357939c
	int GetCurrentOrder();// 0x3579374
	Pawn* GetCurEnemy();// 0x3570470
	BlackboardComponent* GetBlackboardComponent();// 0x3579358
	BehaviorTree*[] GetBehaviorTreePath();// 0x3579200
	enum GetAIAttackType();// 0x35791e4
	void ClearCurEnemy();// 0x35791c8

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x378, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x378, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x378, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x378, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x37c, Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x380, Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x384, Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x388, Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x38c, Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x390, Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x394, Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x398, Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x3a8, Size: 12]
	bool bEnableActiveRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x59f6b04
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x59f6a8c
	void SetMoveBlockDetection(bool bEnable);// 0x59f6a0c
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x59f6984
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x49216cc
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x49216cc
	void OnPossess(Pawn* PossessedPawn);// 0x49216cc
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x59f68c0
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x59f6618
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x59f63d0
	void K2_SetFocus(Actor* NewFocus);// 0x59f6358
	void K2_SetFocalPoint(Vector FP);// 0x59f62e8
	void K2_ClearFocus();// 0x59f62d4
	bool HasPartialPath();// 0x59f62ac
	PathFollowingComponent* GetPathFollowingComponent();// 0x59f6290
	byte GetMoveStatus();// 0x59f6268
	Vector GetImmediateMoveDestination();// 0x59f6220
	Actor* GetFocusActor();// 0x59f61f8
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x59f6160
	Vector GetFocalPoint();// 0x59f6118
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x59f60fc
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x59f6084

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf0, Size: 4]
	NavigationData* MyNavData;//[Offset: 0xfc, Size: 4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x5a1cde8
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x5a1cc3c
	Vector GetPathDestination();// 0x5a1cbf4
	byte GetPathActionType();// 0x5a1cbcc

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bPathDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bUpdatePathOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	float maxCheckDis;//[Offset: 0x270, Size: 4]
	float maxCheckDisTime;//[Offset: 0x274, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x280, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x284, Size: 4]
	float MaxTransferDis;//[Offset: 0x288, Size: 4]

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0, Size: 4]
	AIController* AIOwner;//[Offset: 0xc4, Size: 4]
	void StopLogic(FString Reason);// 0x5a04cec
	void RestartLogic();// 0x34b6cb4
	bool IsRunning();// 0x5a04cbc
	bool IsPaused();// 0x3739b88

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xbc, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xdc, Size: 12]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x5a031c4
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x5a03008
	void SetValueAsRotator(out const FName KeyName, Rotator RotatorValue);// 0x5a02f2c
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x5a02e50
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x5a02d74
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x5a02c98
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x5a02bbc
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x5a02ae0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x5a02a04
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x5a02920
	bool IsVectorValueSet(out const FName KeyName);// 0x5a0288c
	Vector GetValueAsVector(out const FName KeyName);// 0x5a027e8
	FString GetValueAsString(out const FName KeyName);// 0x5a026cc
	Rotator GetValueAsRotator(out const FName KeyName);// 0x5a02628
	Object* GetValueAsObject(out const FName KeyName);// 0x5a02594
	FName GetValueAsName(out const FName KeyName);// 0x5a024f8
	int GetValueAsInt(out const FName KeyName);// 0x5a02464
	float GetValueAsFloat(out const FName KeyName);// 0x5a023d0
	byte GetValueAsEnum(out const FName KeyName);// 0x5a0233c
	class Object GetValueAsClass(out const FName KeyName);// 0x5a022a8
	bool GetValueAsBool(out const FName KeyName);// 0x5a02214
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x5a0212c
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x5a02044
	void ClearValue(out const FName KeyName);// 0x5a01fb8

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x110, Size: 12]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x5a0161c
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x5a0159c
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x5a01488

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 12]
	BTService*[] Services;//[Offset: 0x48, Size: 12]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c, Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float interval;//[Offset: 0x3c, Size: 4]
	float RandomDeviation;//[Offset: 0x40, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SpawnerBase.Actor.Object
	UnitTransformGenerator* TransformGenerator;//[Offset: 0x34c, Size: 4]
	UnitSpeciesGenerator* SpeciesGenerator;//[Offset: 0x350, Size: 4]
	FString LuaFilePath;//[Offset: 0x354, Size: 12]
	Pawn*[] AliveBots;//[Offset: 0x360, Size: 12]
	SpawnerInfo SpawnerInfo;//[Offset: 0x36c, Size: 52]
	void Stop();// 0x34d78b8
	Actor* SpawnUnit();// 0x34daf78
	void Run();// 0x34ee148
	void RemoveAliveBot(Pawn* BotPawn);// 0x37ddb08
	GameLevelManagerComponent* GetGameLevelManager();// 0x37ddae0
	Pawn*[] GetAliveBots();// 0x37dda20
	void AddAliveBot(Pawn* BotPawn);// 0x37dd9a8

--------------------------------
Class: UnitTransformGenerator.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	SpawnerBase* GetSpawner();// 0x3a2c654
	Transform Generate();// 0x3a2cad4

--------------------------------
Class: UnitSpeciesGenerator.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	FString SpeciesConfigLuaPath;//[Offset: 0x70, Size: 12]
	void PostConfig(Actor* Actor);// 0x364147c
	SpawnerBase* GetSpawner();// 0x3a2c654

--------------------------------
Class: SpawnerInfo
	Guid SpawnerID;//[Offset: 0x0, Size: 16]
	int ConfigId;//[Offset: 0x10, Size: 4]
	FString State;//[Offset: 0x14, Size: 12]
	bool bAutoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	FString OwnerZone;//[Offset: 0x28, Size: 12]

--------------------------------
Class: GameLevelManagerComponent.ActorComponent.Object
	delegate OnAppendEliteGroup;//[Offset: 0xbc, Size: 12]
	delegate OnRemoveEliteGroup;//[Offset: 0xc8, Size: 12]
	int EliteWarningItemIconID;//[Offset: 0xd4, Size: 4]
	<int,int> EliteWarningItemInstanceIDMap;//[Offset: 0xd8, Size: 60]
	GameLevelDesc[] CurActiveGameLevelList;//[Offset: 0x114, Size: 12]
	LevelData[] CurActiveGameLevelDataList;//[Offset: 0x120, Size: 12]
	int TotalAliveMonsterNum;//[Offset: 0x12c, Size: 4]
	int BornLevelMonsterNum;//[Offset: 0x130, Size: 4]
	int BornShitMonsterNum;//[Offset: 0x134, Size: 4]
	<FString,SingleLevelObjArray> LevelObjs;//[Offset: 0x138, Size: 60]
	AliveMonsterNum[] AliveMonsterNumList;//[Offset: 0x174, Size: 12]
	GameLevelDesc CurCompletedGameLevel;//[Offset: 0x180, Size: 20]
	float LevelBeginTime;//[Offset: 0x194, Size: 4]
	float LevelEndTime;//[Offset: 0x198, Size: 4]
	int GM_Diffcult;//[Offset: 0x19c, Size: 4]
	bool GM_UnLoadLevelData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool GM_UnLoadDynamicLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	float NavTickInterval;//[Offset: 0x1a4, Size: 4]
	LevelData[] LevelDataList;//[Offset: 0x1a8, Size: 12]
	LevelRelifePointInfo[] LevelRelifePointList;//[Offset: 0x1b8, Size: 12]
	FString MonsterTableName;//[Offset: 0x1c4, Size: 12]
	FString MonsterBPTableName;//[Offset: 0x1d0, Size: 12]
	FString MonsterSpecialStateTableName;//[Offset: 0x1dc, Size: 12]
	FString DecoratorTableName;//[Offset: 0x1e8, Size: 12]
	FString MonsterDropTableName;//[Offset: 0x1f4, Size: 12]
	int RelifePosOffsetZ;//[Offset: 0x200, Size: 4]
	Actor* SpawnPickup(int ID, out const Transform Transform, const int ContentNum);// 0x3649840
	Actor* SpawnMonster(int ID, out const Transform Transform, out const MonsterParams Params);// 0x3649650
	void RemoveRelifePoint(out GameLevelDesc LevelDesc);// 0x3649574
	void RegisterGameEvent();// 0x3649560
	void OnRep_CurGameLevelChanged();// 0x34f4004
	void OnMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x3649440
	void OnGameStart();// 0x364942c
	void OnGameEnd();// 0x3649418
	void OnBotDied(Actor* Actor, Actor* Killer);// 0x364935c
	void OnBotBorn(Actor* Actor);// 0x36492e4
	void OnActorUniqueIdRemove(uint32 SId);// 0x364926c
	void OnActorUniqueIdAdd(Actor* Actor, uint32 SId);// 0x36491b0
	void OnActorSpawn(Actor* Actor);// 0x3649138
	void OnActorDespawn(Actor* Actor);// 0x36490c0
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);// 0x3648ff4
	bool KillUnitBySelf(Actor* TActor);// 0x3648f74
	bool KillUnit(byte BotCat, int BotType, bool ForbidenReborn);// 0x3648e64
	bool KillCategoryUnit(byte BotCat, bool ForbidenReborn);// 0x3648d98
	void InitUnit(Actor* TActor, byte Category);// 0x3648cdc
	void InitRelifePoint(out GameLevelDesc LevelDesc, RelifePoint[] PVERelifePoints);// 0x3648a9c
	void InitLuaLevelActors();// 0x3648a88
	void InitLevelAddObjs(out LevelData LevelData);// 0x3648980
	void Init();// 0x364896c
	void HandleGameLevelEnd(out GameLevelDesc LevelDesc);// 0x3648894
	void HandleEnterLevel(out GameLevelDesc InLevelDesc, Actor* OffsetActor);// 0x3648774
	Actor* GetUnit(byte Category, int TypeId);// 0x36486b0
	bool GetRelifeTrans(out const Vector NearVector, out Transform RelifeTrans);// 0x3648580
	LevelData[] GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, Vector NearPos);// 0x364834c
	bool GetNearPosLevel(Vector NearPos, int ChapterType, LevelData[] AvoidLevelList, out LevelData OutLevelData);// 0x3647fe4
	LevelData GetLoadedLevelData(out GameLevelDesc LevelDesc);// 0x3647ee0
	int GetAliveMonsterNum(byte SourceType);// 0x3647e60
	LevelData GetActiveLevelDataByLevelDesc(out GameLevelDesc LevelDesc);// 0x3647d5c
	void EndLevelAddObjs(out LevelData LevelData);// 0x3647c54
	void ChangeAliveMonsterNumList(byte SourceType, int Addition);// 0x3647b98
	void BroadRemoveEliteGroup(int LevelID, Vector Pos);// 0x3647ad4
	void BroadAppendEliteGroup(int LevelID, Vector Pos);// 0x3647a10
	void AdjustPosByOffsetActor(out LevelData LevelData, Transform OffsetTrans);// 0x3647850
	void ActiveRelifePoint(out GameLevelDesc LevelDesc, int ID, bool ActivePoint);// 0x36476dc

--------------------------------
Class: GameLevelDesc
	int ChapterID;//[Offset: 0x0, Size: 4]
	int LevelID;//[Offset: 0x4, Size: 4]
	FString Desc;//[Offset: 0x8, Size: 12]

--------------------------------
Class: LevelData
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	FString[] TargetClassPaths;//[Offset: 0x14, Size: 12]
	FString LeveDirectorFilePath;//[Offset: 0x20, Size: 12]
	byte EndCondType;//[Offset: 0x2c, Size: 1]
	FString EndCondPar;//[Offset: 0x30, Size: 12]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int DiffcultPerc;//[Offset: 0x40, Size: 4]
	Vector[] TaskPointLocations;//[Offset: 0x44, Size: 12]
	RelifePoint[] PVERelifePointsInfo;//[Offset: 0x50, Size: 12]
	PVECircle[] PVECircleInfo;//[Offset: 0x5c, Size: 12]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x68, Size: 12]
	Vector Pos;//[Offset: 0x74, Size: 12]
	LevelObjets[] LevelAddObjs;//[Offset: 0x80, Size: 12]

--------------------------------
Class: RelifePoint
	int ID;//[Offset: 0x0, Size: 4]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: PVECircle
	int CircleID;//[Offset: 0x0, Size: 4]
	Vector2D targetPos;//[Offset: 0x4, Size: 8]
	float Radius;//[Offset: 0xc, Size: 4]
	float MoveTime;//[Offset: 0x10, Size: 4]
	float Pain;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MonsterWave
	float WaveDelayTime;//[Offset: 0x0, Size: 4]
	MonsterGroup[] MonsterGroupList;//[Offset: 0x4, Size: 12]
	FString Desc;//[Offset: 0x10, Size: 12]
	byte EndCondType;//[Offset: 0x1c, Size: 1]
	int EndCondPar;//[Offset: 0x20, Size: 4]
	int ID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MonsterGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	byte ChooseGroupSpotType;//[Offset: 0xc, Size: 1]
	int NearPlayTeamIdx;//[Offset: 0x10, Size: 4]
	ZMonsterSpotGroup*[] SpotGroupChooseList;//[Offset: 0x14, Size: 12]
	MonsterSpotGroup[] MonsterSpotGroupChooseList;//[Offset: 0x20, Size: 12]
	MonsterGeneratePlan[] PlanList;//[Offset: 0x2c, Size: 12]
	int ID;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ZMonsterSpotGroup.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x2b0, Size: 12]
	ZMonsterSpot*[] SpotList;//[Offset: 0x2bc, Size: 12]

--------------------------------
Class: ZMonsterSpot.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x2b0, Size: 12]
	byte MonsterSpotType;//[Offset: 0x2bc, Size: 1]
	ZMonsterRoadPoint*[] RoadPointList;//[Offset: 0x2c0, Size: 12]
	byte SpotRadius;//[Offset: 0x2cc, Size: 1]

--------------------------------
Class: ZSpotSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ZMonsterRoadPoint.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x2b0, Size: 4]
	int Radius;//[Offset: 0x2b4, Size: 4]

--------------------------------
Class: MonsterSpotGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	Vector Pos;//[Offset: 0xc, Size: 12]
	MonsterSpot[] SpotList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MonsterSpot
	FString Desc;//[Offset: 0x0, Size: 12]
	byte MonsterSpotType;//[Offset: 0xc, Size: 1]
	Vector Pos;//[Offset: 0x10, Size: 12]
	RoadPointInfo[] RoadPointList;//[Offset: 0x1c, Size: 12]
	byte SpotRadius;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RoadPointInfo
	int ID;//[Offset: 0x0, Size: 4]
	int Radius;//[Offset: 0x4, Size: 4]
	Vector Pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: MonsterGeneratePlan
	FString Desc;//[Offset: 0x0, Size: 12]
	int PlanWeight;//[Offset: 0xc, Size: 4]
	MonsterGenerateCfg[] PlanDetail;//[Offset: 0x10, Size: 12]
	int ID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MonsterGenerateCfg
	int MonsterID;//[Offset: 0x0, Size: 4]
	FString Desc;//[Offset: 0x4, Size: 12]
	byte SpotType;//[Offset: 0x10, Size: 1]
	int MonsterNum;//[Offset: 0x14, Size: 4]
	float RandomGenerateDelayTime;//[Offset: 0x18, Size: 4]
	int ReBornTimes;//[Offset: 0x1c, Size: 4]
	int ReBornDelay;//[Offset: 0x20, Size: 4]
	float GenerateDelayTime;//[Offset: 0x24, Size: 4]
	int ID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: LevelObjets
	class Object* Objects;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: SingleLevelObjArray
	Actor*[] LevelObjs;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AliveMonsterNum
	int Num;//[Offset: 0x0, Size: 4]
	byte SourceType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LevelRelifePointInfo
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	RelifePointInfo[] RelifePointList;//[Offset: 0x14, Size: 12]

--------------------------------
Class: RelifePointInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform RelifeTrans;//[Offset: 0x10, Size: 48]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: MonsterParams
	int MonsterID;//[Offset: 0x0, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int ProduceID;//[Offset: 0x54, Size: 4]

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0xbc, Size: 60]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0xf8, Size: 12]

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0xbc, Size: 1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xbc, Size: 12]
	class AISense* DominantSense;//[Offset: 0xc8, Size: 4]
	AIController* AIOwner;//[Offset: 0xe0, Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x140, Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x14c, Size: 12]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x59f8960
	void RequestStimuliListenerUpdate();// 0x59f894c
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x59f8890
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x59f87c4
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x59f86b4
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x59f85a4
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x59f8494
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x59f836c

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c, Size: 4]
	float MaxAge;//[Offset: 0x20, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 4]
	enum NotifyType;//[Offset: 0x20, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c, Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x59f9918
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x59f98a0
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x59f97a0
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x59f96e4
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x59f9510

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x28, Size: 8]
	int iExtraData;//[Offset: 0x40, Size: 4]
	int iExtraData;//[Offset: 0x44, Size: 4]
	int iExtraData;//[Offset: 0x48, Size: 4]
	float fExtraData;//[Offset: 0x4c, Size: 4]
	float fExtraData;//[Offset: 0x50, Size: 4]
	float fExtraData;//[Offset: 0x54, Size: 4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 12]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xbc, Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0, Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xcc, Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x5a1e5e8
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x5a1e4e0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x5a1e460
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x5a1e3e0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 4]
	Object* Instigator;//[Offset: 0x28, Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 1]
	byte GetActionPriority();// 0x5a1d4c4
	void Finish(byte WithResult);// 0x5a1d43c
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x5a1d380

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 12]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xcc, Size: 12]
	GameplayTask*[] TickingTasks;//[Offset: 0xe4, Size: 12]
	GameplayTask*[] KnownTasks;//[Offset: 0xf0, Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x100, Size: 12]
	void OnRep_SimulatedTasks();// 0x5946074
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x5945d00

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 4]
	void ReadyForActivation();// 0x5944380
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x49216cc
	void EndTask();// 0x594436c

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]

--------------------------------
Class: PlayerSecurityInfoCollector.ActorComponent.Object
	int[] EnergyItemIDList;//[Offset: 0xbc, Size: 12]
	int[] EnergySpeedUpPhaseIndexList;//[Offset: 0xc8, Size: 12]
	bool bEnableDetailFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool bEnableDetailHurtFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	ClientCircleFlow CurCircleFlow;//[Offset: 0xd8, Size: 304]
	ClientCircleFlow CollectCircleFlow;//[Offset: 0x208, Size: 304]
	DSCircleFlow CurDSCircleFlow;//[Offset: 0x338, Size: 40]
	DSCircleFlow CollectDSCircleFlow;//[Offset: 0x360, Size: 40]
	HurtFlow CurHurtFlow;//[Offset: 0x388, Size: 256]
	ClientJumpFlow JumpFlow;//[Offset: 0x488, Size: 168]
	ClientSecPlayerKillFlow SecPlayerKillFlow;//[Offset: 0x530, Size: 136]
	InexistentAvatarFlow InexistentAvatarFlow;//[Offset: 0xea8, Size: 360]
	void StartOnPlane();// 0x3743868
	void ReportDSPlayerDieCircleFlow();// 0x3743854
	void RecordAirDropCount();// 0x3743840
	void PlayerCanJump();// 0x374382c
	void HandleSyncCircleInfo(int Index);// 0x37437b4
	void HandleDSCharacterWin();// 0x37437a0
	void HandleCharacterSafeZoneTips(float SafeZoneTime);// 0x3743728
	void HandleCharacterDSCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x3743620
	void HandleCharacterCircleWaveOver(int Index);// 0x37435a8
	void HandleCharacterCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x37434a0
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);// 0x3743428
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);// 0x37433b0
	void HandleCharacterAttrChangedWithDetail(Actor* nowActor, FString AttrName, float ValueDelta, float ResultValue);// 0x3743224
	void ExitParachute();// 0x3743210
	void EnterParachute();// 0x37431fc
	void EnterJumping();// 0x37431e8
	void DSStartOnPlane();// 0x37431d4
	void CalculatePlayerMoveData();// 0x37431c0
	void AddRecoveryItemFlow(uint32 ItemId);// 0x3743148

--------------------------------
Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString PicUrl;//[Offset: 0x14, Size: 12]
	uint32 GameStartTime;//[Offset: 0x20, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x24, Size: 4]
	int NewCirclePositionX;//[Offset: 0x28, Size: 4]
	int NewCirclePositionY;//[Offset: 0x2c, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x30, Size: 4]
	int NewCircleCount;//[Offset: 0x34, Size: 4]
	int PlayerPositionX;//[Offset: 0x38, Size: 4]
	int PlayerPositionY;//[Offset: 0x3c, Size: 4]
	int PlayerPositionZ;//[Offset: 0x40, Size: 4]
	int PlayerHP;//[Offset: 0x44, Size: 4]
	uint32 OldCircleMoveTime;//[Offset: 0x48, Size: 4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x4c, Size: 4]
	uint32 PlayerOutTime;//[Offset: 0x50, Size: 4]
	int CirclePoisonCount;//[Offset: 0x54, Size: 4]
	int CirclePoisonMin;//[Offset: 0x58, Size: 4]
	int CirclePoisonMax;//[Offset: 0x5c, Size: 4]
	int CirclePoisonAvg;//[Offset: 0x60, Size: 4]
	int CirclePoisonTotal;//[Offset: 0x64, Size: 4]
	int CirclePoisonDrop;//[Offset: 0x68, Size: 4]
	int CirclePoisonDead;//[Offset: 0x6c, Size: 4]
	int RecoveryCount;//[Offset: 0x70, Size: 4]
	int RecoveryMin;//[Offset: 0x74, Size: 4]
	int RecoveryMax;//[Offset: 0x78, Size: 4]
	int RecoveryTotal;//[Offset: 0x7c, Size: 4]
	int EnergyRecoveryCount;//[Offset: 0x80, Size: 4]
	RecoveryItemCount[] RecoveryItemCounts;//[Offset: 0x84, Size: 12]
	int EnergyRecoveryMin;//[Offset: 0x90, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x94, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x98, Size: 4]
	int EnergyStartLv;//[Offset: 0x9c, Size: 4]
	int EnergyStartTime;//[Offset: 0xa0, Size: 4]
	FString EnergyItemUse;//[Offset: 0xa4, Size: 12]
	int EnergyLvTimeInfo;//[Offset: 0xb0, Size: 4]
	FString EnergyRunFastTime;//[Offset: 0xb4, Size: 12]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xc0, Size: 12]
	int EnergyEndLv;//[Offset: 0xcc, Size: 4]
	int EnergyEndTime;//[Offset: 0xd0, Size: 4]
	int PlayerMoveDis;//[Offset: 0xd4, Size: 4]
	int PlayerSpeedMax;//[Offset: 0xd8, Size: 4]
	int PlayerSpeedAvg;//[Offset: 0xdc, Size: 4]
	int PlayerCarSpeedMax;//[Offset: 0xe0, Size: 4]
	int PlayerCarSpeedAvg;//[Offset: 0xe4, Size: 4]
	int PlayerSquatMoveDis;//[Offset: 0xe8, Size: 4]
	int PlayerSquatMoveTime;//[Offset: 0xec, Size: 4]
	int PlayerCreepMoveDis;//[Offset: 0xf0, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0xf4, Size: 4]
	int PlayerRunMoveDis;//[Offset: 0xf8, Size: 4]
	int PlayerRunMoveTime;//[Offset: 0xfc, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0x100, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0x104, Size: 4]
	int PlayerCar;//[Offset: 0x108, Size: 4]
	int PlayerCameraDistanceMax;//[Offset: 0x10c, Size: 4]
	uint32 SecCircleFlowID;//[Offset: 0x110, Size: 4]
	int RecordType;//[Offset: 0x114, Size: 4]
	byte AutoAimType;//[Offset: 0x118, Size: 1]
	int AutoAimTime;//[Offset: 0x11c, Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0x120, Size: 12]

--------------------------------
Class: RecoveryItemCount
	uint32 ItemId;//[Offset: 0x0, Size: 4]
	uint32 Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DSCircleFlow
	uint32 GameStartTime;//[Offset: 0x0, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x4, Size: 4]
	int NewCircleCount;//[Offset: 0x8, Size: 4]
	int RecoveryTotal;//[Offset: 0xc, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x10, Size: 4]
	int PlayerMoveDis;//[Offset: 0x14, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0x18, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0x1c, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0x20, Size: 4]
	int RecordType;//[Offset: 0x24, Size: 4]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString EnemyOpenID;//[Offset: 0x7c, Size: 12]
	FString EnemyUserName;//[Offset: 0x88, Size: 12]
	uint64 EnemyRoleID;//[Offset: 0x98, Size: 8]
	int EnemyRoleType;//[Offset: 0xa0, Size: 4]
	uint32 HurtTime;//[Offset: 0xa4, Size: 4]
	int HurtType;//[Offset: 0xa8, Size: 4]
	int HitType;//[Offset: 0xac, Size: 4]
	int DamageStart;//[Offset: 0xb0, Size: 4]
	int DamageReduce;//[Offset: 0xb4, Size: 4]
	int ArmorDef;//[Offset: 0xb8, Size: 4]
	int HPstart;//[Offset: 0xbc, Size: 4]
	int HPEnd;//[Offset: 0xc0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xc4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xc8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xcc, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xd0, Size: 4]
	int CarHPStart;//[Offset: 0xd4, Size: 4]
	int CarHPEnd;//[Offset: 0xd8, Size: 4]
	int FallHeight;//[Offset: 0xdc, Size: 4]
	int HypoxiaTime;//[Offset: 0xe0, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0xe4, Size: 4]
	int PlayerKilled;//[Offset: 0xe8, Size: 4]
	int ArmorKill;//[Offset: 0xec, Size: 4]
	int CarKill;//[Offset: 0xf0, Size: 4]
	int IfIsAI;//[Offset: 0xf4, Size: 4]
	int CircleIndex;//[Offset: 0xf8, Size: 4]
	uint32 HurtFlowID;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherId;//[Offset: 0x20, Size: 1]
	int64 GameStartTime;//[Offset: 0x28, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x30, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x34, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x38, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x40, Size: 4]
	FString FollowPlayerUID;//[Offset: 0x44, Size: 12]
	uint32 ExitFollowTime;//[Offset: 0x50, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x54, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x58, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x5c, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x60, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x64, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x68, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x6c, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x70, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x74, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x78, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x7c, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x80, Size: 4]
	FString AntsVoiceTeamID;//[Offset: 0x84, Size: 12]
	FString AntsVoiceRoomID;//[Offset: 0x90, Size: 12]
	int AntsVoiceTeamMemberID;//[Offset: 0x9c, Size: 4]
	int AntsVoiceRoomMemberID;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]
	int LocationX;//[Offset: 0x4c, Size: 4]
	int LocationY;//[Offset: 0x50, Size: 4]
	int LocationZ;//[Offset: 0x54, Size: 4]
	int KilledLocationX;//[Offset: 0x58, Size: 4]
	int KilledLocationY;//[Offset: 0x5c, Size: 4]
	int KilledLocationZ;//[Offset: 0x60, Size: 4]
	int KilledTeamID;//[Offset: 0x64, Size: 4]
	int TeamID;//[Offset: 0x68, Size: 4]
	FString GameModeID;//[Offset: 0x6c, Size: 12]
	uint64 PawnState;//[Offset: 0x78, Size: 8]
	uint64 KilledPawnState;//[Offset: 0x80, Size: 8]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]

--------------------------------
Class: InexistentAvatarFlow

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AITargetInViewOffset
	Vector[] Offset;//[Offset: 0x0, Size: 12]
	Vector[] CrouchOffset;//[Offset: 0xc, Size: 12]
	Vector TargetLoc;//[Offset: 0x18, Size: 12]
	int CurrentOffsetIndex;//[Offset: 0x24, Size: 4]
	bool bTargetInViewDueToOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum TargetPawnState;//[Offset: 0x29, Size: 1]

--------------------------------
Class: AIShootingPoseOffsetInfo
	AIShootingPoseOffsetDetailInfo[] ShootingPoseShootPointOffsetArray;//[Offset: 0x0, Size: 12]
	float CrouchToStandHeightOffset;//[Offset: 0xc, Size: 4]
	float ProneToStandHeightOffset;//[Offset: 0x10, Size: 4]
	<enum,Vector> ShootingPoseShootPointOffsetMap;//[Offset: 0x18, Size: 60]

--------------------------------
Class: AIShootingPoseOffsetDetailInfo
	enum shootingPose;//[Offset: 0x0, Size: 1]
	Vector offsetInfo;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BackpackComponent.LuaActorComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0x154, Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x160, Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0x16c, Size: 12]
	delegate BatchItemUpdateDelegate;//[Offset: 0x178, Size: 12]
	delegate BatchItemDeleteDelegate;//[Offset: 0x184, Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0x190, Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0x19c, Size: 12]
	delegate ItemOperationInfoDelegate;//[Offset: 0x1a8, Size: 12]
	delegate AssociationOperationDelegate;//[Offset: 0x1b4, Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x1c0, Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x1cc, Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x1d8, Size: 12]
	delegate ItemHandleAddDelegate;//[Offset: 0x1e4, Size: 12]
	<int,int> PickupLimitSetting;//[Offset: 0x1f0, Size: 60]
	delegate ItemUpdatedDelegate;//[Offset: 0x22c, Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x238, Size: 12]
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0x244, Size: 12]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x250, Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x25c, Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x274, Size: 24]
	IncNetArray ItemListNetCache;//[Offset: 0x28c, Size: 24]
	<int,BattleItemData> CacheBattleItemMap;//[Offset: 0x2a4, Size: 60]
	ItemDefineID[] BroadcastInsertItemList;//[Offset: 0x2e0, Size: 12]
	ItemDefineID[] BroadcastUpdateItemList;//[Offset: 0x2ec, Size: 12]
	ItemDefineID[] BroadcastDeleteItemList;//[Offset: 0x2f8, Size: 12]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x308, Size: 12]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x314, Size: 60]
	int CapacityThreshold;//[Offset: 0x350, Size: 4]
	float Capacity;//[Offset: 0x354, Size: 4]
	float OccupiedCapacity;//[Offset: 0x358, Size: 4]
	float SafetyBoxCapacity;//[Offset: 0x35c, Size: 4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x360, Size: 4]
	int virtualitemid;//[Offset: 0x374, Size: 4]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	int[] NeedToShowTypeList;//[Offset: 0x384, Size: 12]
	bool bVerifyWeaponPackageData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x394, Size: 12]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x404bcfc
	float UpdateStoreAreaOccupiedCapacity(out float StoreAreaOccupiedCapacity, enum InItemStoreArea);// 0x404bc1c
	void UpdateOccupiedCapacity();// 0x35cddd4
	float UpdateCapacity();// 0x404bbec
	void UnlockUpdateItemListReceive();// 0x404bbd8
	void TryMergeItemHandles(out const ItemDefineID DefineID, enum InItemStoreArea);// 0x404bb04
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x404b9e0
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x404b8f4
	void ServerSetShowBounty(bool bInShowBounty);// 0x404b82c
	void ServerSetCustomAccessories(int WeaponItemID, int Index, int ItemId);// 0x404b6e8
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x404b5b8
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x404b494
	bool RemoveItemHandle(out const ItemDefineID DefineID);// 0x404b3f4
	void ReceiveItemList();// 0x35cbe78
	void ReceiveCapacity();// 0x3603c6c
	int PreCheckCanPickupBagAvatar(BattleItemHandleBase* NewHandle, BattleItemHandleBase* OldHandle, enum reson);// 0x404b2e4
	void PostItemHandleEquippingState(out const ItemDefineID DefineID, bool bEquipping);// 0x404b208
	bool PickupItemFromWrapperDetail(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x404af5c
	bool PickUpItem_Default(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason);// 0x404acf8
	bool PickupItem(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x404aa4c
	void PickupBattleItemOnPlane();// 0x404aa38
	bool PickItem_IntoSafetyBox(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason);// 0x404a7d4
	bool PickItem_IntoBackpack(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason);// 0x404a570
	void OnRep_specialCountLimit();// 0x404a55c
	void OnRep_ItemListNet();// 0x404a548
	void OnRep_Capacity();// 0x404a534
	void NotifyItemUpdated(out const ItemDefineID DefineID);// 0x404a49c
	void NotifyItemRemoved(out const ItemDefineID DefineID);// 0x404a404
	void NotifyItemListUpdated();// 0x3a3ec14
	void NotifyCapacityUpdated();// 0x404a3e8
	BattleItemHandleBase* NewItemHandle(out const ItemDefineID DefineID);// 0x404a348
	ItemDefineID NewItemDefineID(out const ItemDefineID DefineID);// 0x404a294
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x404a1d0
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x404a114
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x404a060
	void ModifyAimNotAutoUse(bool bAdd);// 0x4049f98
	void LockUpdateItemListReceive();// 0x4049f84
	BattleItemData ItemNet2Data(out const NetArrayUnit NetItem);// 0x4049dc8
	bool IsNeedToShowInBackpack(int TypeDefineID);// 0x4049d48
	bool IsItemListUpdatedHasSomeItemTypes(out const int[] ItemTypes);// 0x4049c74
	bool IsItemListUpdatedHasSomeItemSubTypes(out const int[] ItemSubTypes);// 0x4049ba0
	bool IsItemListUpdatedHasSomeItems(out const int[] ItemTypeSpecificIDs);// 0x4049acc
	bool IsItemListUpdatedHasOneItemType(int itemType);// 0x4049a4c
	bool IsItemListUpdatedHasOneItemSubType(int ItemSubType);// 0x40499cc
	bool IsItemListUpdatedHasOneItem(int ItemTypeSpecificID);// 0x404994c
	bool IsItemExist(out const ItemDefineID DefineID);// 0x40498ac
	bool IsEnableWeaponAttachmentBindToWeapon();// 0x404987c
	bool IsEnableBackpackRepActor();// 0x4049854
	bool IsCustomIgnoreAccessories(int WeaponId, int Index);// 0x4049790
	bool IsCustomAccessories(int WeaponId, int ItemId);// 0x40496cc
	bool IsBackPackContainItemId(int ItemId);// 0x404964c
	bool IsAutoUse(int ItemId);// 0x49216cc
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x4049588
	bool HasTagSub(int ItemId, out const FName TagName);// 0x49216cc
	bool HasItemBySubType(int SubType);// 0x4049508
	bool HasItemByDefineID(out const ItemDefineID DefineID);// 0x4049470
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x40493ac
	void HandleDropInDisuse(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle, enum Reason, float OccupiedCapacityBeforeDisuse);// 0x4049244
	World* GetWorld_BP();// 0x404921c
	int GetUnEquipItemNumByItemId(int ItemId);// 0x404919c
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x40490fc
	SpecialPickInfo GetSpecialItemBefore(int ItemResId);// 0x404906c
	float GetSafetyBoxCapacity();// 0x359773c
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, enum AdditionalDataNameType);// 0x4048f6c
	int GetItemSubType(int ItemId);// 0x49216cc
	BattleItemData[] GetItemListByDefineID(out const ItemDefineID DefineID);// 0x4048dfc
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x4048dc4
	ItemHandleBase*[] GetItemHandleList();// 0x4048d54
	int GetItemCountByType(int InItemType);// 0x4048cd4
	int GetItemCountByItemSpecialID(int InItemSpecialID);// 0x4048c54
	BattleItemData GetItemByDefineID(out const ItemDefineID DefineID);// 0x4048b90
	float GetItemAssociateWeights(out const BattleItemData InItemData);// 0x4048ad8
	BattleItemData GetFirstItemBySubType(int SubType);// 0x4048a2c
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(out const ItemDefineID DefineID);// 0x4048968
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x40488a4
	BattleItemData[] GetAllItemList(enum InItemStoreArea);// 0x404874c
	enum GetAIPickupType(int ItemId);// 0x35bbfd4
	void ForceNetUpdate();// 0x3721bbc
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x404862c
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x4048550
	BattleItemHandleBase* CreateItemHandleInternal(out const ItemDefineID DefineID);// 0x40484b0
	ItemHandleBase* CreateItemHandle(out const ItemDefineID DefineID);// 0x4048410
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x404833c
	void ClientBroadcastItemOperationFailedDelegate(const ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x4048234
	void ClientBroadcastItemOperationDelegate(const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x404812c
	int CheckSpecialMaxCountForItem(out const ItemDefineID DefineID, int Count);// 0x4048050
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x4047f70
	bool CheckPickUpItemDefaultSuccess(out const ItemDefineID DefineID, bool bPickupSucc, bool bAutoEquip);// 0x4047e34
	int CheckLeftLimitCountForItem(int InItemID, int InCount);// 0x4047d68
	void CheckItemEmptyInBackpack(int InItemID);// 0x4047cf0
	int CheckCapacityForItem(out const ItemDefineID DefineID, int Count, enum InItemStoreArea);// 0x4047bc8
	bool ChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x4047aa8
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x4047a10
	bool CacheItemAssociationBeforeDisuse(ItemDefineID DefineID, enum Reason);// 0x4047934
	void BroadcastItemOperCountDelegate(out const ItemDefineID DefineID, enum OperationType, int Count);// 0x404781c
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x4047780
	void BroadcastItemOperationFailedDelegate(out const ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x4047668
	void BroadcastItemOperationDelegate(out const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x4047550
	bool AlternativePickupItem(out ItemDefineID DefineID);// 0x40474b0
	bool AddItemHandle(out const ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x40473cc
	void AddBattleItemPickupOnPlane(out ItemDefineID DefineID, out BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x4047130

--------------------------------
Class: CustomAccessoriesData
	int WeaponId;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int ItemId;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleItemPickupAfterLand
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	BattleItemPickupInfo PickupInfo;//[Offset: 0x18, Size: 64]
	enum Reason;//[Offset: 0x58, Size: 1]
	enum BattleItemClientPickupType;//[Offset: 0x59, Size: 1]

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] IncArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 64]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	enum ItemStoreArea;//[Offset: 0x1d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x2c, Size: 12]
	int Durability;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 1]
	byte Reason;//[Offset: 0x19, Size: 1]
	int Count;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SpectatorComponent.LuaActorComponent.ActorComponent.Object
	bool bCheckNetSaturate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	float CheckNetSaturateInterval;//[Offset: 0x14c, Size: 4]
	float ReportNetSaturateInterval;//[Offset: 0x150, Size: 4]
	delegate OnServerSpectatorChange;//[Offset: 0x17c, Size: 12]
	int MinExtraLocDeviceLevel;//[Offset: 0x188, Size: 4]
	uint32 MinTotalMemInGB;//[Offset: 0x18c, Size: 4]
	float ExtraRadius;//[Offset: 0x190, Size: 4]
	float MinDisFromMyLoc;//[Offset: 0x194, Size: 4]
	float MinDisFromExtraLoc;//[Offset: 0x198, Size: 4]
	float SpectatorMaxDeltaLength;//[Offset: 0x1f8, Size: 4]
	float SpectatorMinDeltaLength;//[Offset: 0x1fc, Size: 4]
	Vector FreeCamVehicleRelativeLocation;//[Offset: 0x200, Size: 12]
	Vector FreeCamCharacterRelativeLocation;//[Offset: 0x20c, Size: 12]
	void SpectatorExitFreeView();// 0x37de770
	void SpectatorEnterFreeView();// 0x37de75c
	void NotifyObserversSetViewTarget(Actor* NewViewTarget);// 0x37de6e4
	bool IsOwnerBeSpectated();// 0x37de6bc
	FString GetOwnerPlayerName();// 0x37de5fc
	STExtraPlayerController*[] GetOwnerObservers();// 0x37de594
	enum GetObserverType();// 0x37de56c
	void AddSpectatorFreeCamArmLength(float DefaultLength);// 0x37de4f4

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 4]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool TargetIsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	STExtraPlayerController* CacheNearPlayerController;//[Offset: 0x2c, Size: 4]
	STExtraBaseCharacter* CacheDeliveryActingTarget;//[Offset: 0x30, Size: 4]

--------------------------------
Class: AIShootMissInfo
	float MissMaxRangeTime;//[Offset: 0x0, Size: 4]
	float MissMinRangeTime;//[Offset: 0x4, Size: 4]
	float MissCDTime;//[Offset: 0x8, Size: 4]
	float MissResetTime;//[Offset: 0xc, Size: 4]
	float MissResetConfig;//[Offset: 0x10, Size: 4]
	bool bCanMissShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: AIConditionHearingComponent.ActorComponent.Object
	SoundShieldForAI* CurrentSoundShield;//[Offset: 0xbc, Size: 8]
	bool CanHearingInBox(Actor* TargetActor, Actor* SourceActor);// 0x34c15cc

--------------------------------
Class: SoundShieldForAI.Actor.Object
	Actor*[] PlayerPawns;//[Offset: 0x308, Size: 12]
	Actor*[] AIPawns;//[Offset: 0x314, Size: 12]
	int MaxCacheNum;//[Offset: 0x320, Size: 4]
	void OnPlayerPawnsOverlap(Actor* InActor, bool bEnter);// 0x37dd49c
	void OnAIPawnsOverlap(Actor* InActor, bool bEnter);// 0x37dd3d8
	bool InSameSoundShield(Actor* InAIPawn, Actor* InPlayerPawn);// 0x37dd30c

--------------------------------
Class: AIParachuteJumpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	Vector FocusTargetPos;//[Offset: 0xc4, Size: 12]
	enum JumpStrategy;//[Offset: 0xd0, Size: 1]
	float JumpTime;//[Offset: 0xd4, Size: 4]
	bool bUseSpecificInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bOpenParachuteNotClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bLandingPhaseSetControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bOpenDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	float TargetDistanceThresholdForInput;//[Offset: 0xdc, Size: 4]
	float MoveForwardInputValue;//[Offset: 0xe0, Size: 4]
	float MoveRightInputValue;//[Offset: 0xe4, Size: 4]
	float ClearFocusHeight;//[Offset: 0xe8, Size: 4]
	float OpenParachuteHeight;//[Offset: 0xec, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0xf0, Size: 4]
	FString TargetCityName;//[Offset: 0xf4, Size: 12]
	float TargetDistance2Route;//[Offset: 0x100, Size: 4]
	int CityLevel;//[Offset: 0x104, Size: 4]
	float Deviation;//[Offset: 0x108, Size: 4]
	int[] Groups;//[Offset: 0x10c, Size: 12]
	int AIStyle;//[Offset: 0x118, Size: 4]
	float ChangeTargetHeight;//[Offset: 0x120, Size: 4]
	Vector ChangeTargetPos;//[Offset: 0x124, Size: 12]
	bool bTargetPosChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int PlayerNumThresholdForChangeTarget;//[Offset: 0x134, Size: 4]
	float AroundPlayerRange;//[Offset: 0x138, Size: 4]
	int CheckChangeTargetRemainTimes;//[Offset: 0x13c, Size: 4]
	float TickShowDebugInfoDeltaTime;//[Offset: 0x140, Size: 4]
	float CurTickShowDebugInfoTime;//[Offset: 0x144, Size: 4]
	Color DebugLineColor;//[Offset: 0x148, Size: 4]
	float JumpTimePassed;//[Offset: 0x14c, Size: 4]
	STExtraPlayerCharacter* FollowTarget;//[Offset: 0x150, Size: 4]
	float FollowDelayTime;//[Offset: 0x154, Size: 4]
	float ForwardDelayTime;//[Offset: 0x158, Size: 4]
	bool IsSmoothFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	float TurnVelocity;//[Offset: 0x160, Size: 4]
	bool JumpFromFixedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	Vector JumpPoint;//[Offset: 0x168, Size: 12]

--------------------------------
Class: AIAbilityComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x2d08, Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x2d14, Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x2d20, Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x2d2c, Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x2d38, Size: 12]
	delegate OnNewWeaponDelegate;//[Offset: 0x2d44, Size: 12]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x2d50, Size: 12]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x2d5c, Size: 12]
	delegate OnParachuteStateChanged;//[Offset: 0x2d68, Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x2d74, Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x2d78, Size: 4]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x2d7c, Size: 12]
	BoxComponent* BoxEar;//[Offset: 0x2d88, Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x2d8c, Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x2d90, Size: 4]
	float IndoorCheckDistance;//[Offset: 0x2d94, Size: 4]
	float IndoorCheckTime;//[Offset: 0x2d98, Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x2d9c, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x2da0, Size: 4]
	class CameraShake* VehicleHitSimpleCharacterShaker;//[Offset: 0x2da4, Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da8, Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x2dac, Size: 4]
	float fTickDuration;//[Offset: 0x2db0, Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x2db8, Size: 24]
	class PlayerGunCollosionComp* PlayerGunCollisionComponentClass;//[Offset: 0x2dd0, Size: 4]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd4, Size: 1]
	bool IgnoreGliderOneTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd5, Size: 1]
	enum ParachuteState;//[Offset: 0x2de4, Size: 1]
	bool bClientParachuteLandedFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e04, Size: 1]
	float LandDistanceCanAjustWhenParachuteLanded;//[Offset: 0x2e08, Size: 4]
	float CheckCanLandMaxSeconds;//[Offset: 0x2e2c, Size: 4]
	byte MoveUploadTimeout;//[Offset: 0x2e34, Size: 1]
	float DSParachuteLandedFinishTimeMax;//[Offset: 0x2e40, Size: 4]
	bool bIsPendingCaptived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e44, Size: 1]
	enum LastParachuteState;//[Offset: 0x2e45, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x2e48, Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4c, Size: 1]
	float SwimZDir;//[Offset: 0x2e50, Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e54, Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e55, Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x2e58, Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x2e5c, Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x2e60, Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x2e64, Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x2e68, Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x2e6c, Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x2e70, Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x2e74, Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x2e78, Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x2e7c, Size: 4]
	AkAudioEvent* AK_ParachuteLocalOverride;//[Offset: 0x2e80, Size: 4]
	AkAudioEvent* AK_ParachuteRemoteOverride;//[Offset: 0x2e84, Size: 4]
	AkAudioEvent* AK_LandingLocalOverride;//[Offset: 0x2e88, Size: 4]
	AkAudioEvent* AK_LandingRemotelOverride;//[Offset: 0x2e8c, Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x2e90, Size: 80]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x2ee0, Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x2f30, Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x2f80, Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x2fe8, Size: 4]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fec, Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fed, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x2ff0, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x2ff4, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff8, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x3004, Size: 4]
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x3010, Size: 1392]
	float CameraInfoAdditiveWeight;//[Offset: 0x3580, Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x35d8, Size: 4]
	bool bUsingVehicleParachuteProp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f3, Size: 1]
	bool bNoAttenuationGlobalVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f4, Size: 1]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f5, Size: 1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f6, Size: 1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x35f8, Size: 4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35fc, Size: 1]
	enum GoldenSuitSlot;//[Offset: 0x35fd, Size: 1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x3600, Size: 4]
	float GoldenSuitCheckDelta;//[Offset: 0x3604, Size: 4]
	float GoldenSuitTestFistDamage;//[Offset: 0x3608, Size: 4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x360c, Size: 72]
	FName FeatureActorName;//[Offset: 0x3670, Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3678, Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3679, Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x367a, Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x367c, Size: 4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x3688, Size: 4]
	InteractiveComponentBase*[] InteractiveComponentList;//[Offset: 0x3690, Size: 12]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369c, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369d, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x369e, Size: 2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x36a0, Size: 4]
	int TrySightCorrectionTime;//[Offset: 0x36ac, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x36b0, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b4, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b5, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x36b8, Size: 4]
	bool ForceSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c4, Size: 1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36cc, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x36d0, Size: 12]
	int CurrentActivityID;//[Offset: 0x36dc, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x36e0, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x36e4, Size: 4]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e8, Size: 1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x36f0, Size: 16]
	int[] InjuryFreeData;//[Offset: 0x3700, Size: 12]
	float RecentlyGunADSOrProneTimeThresholdInSeconds;//[Offset: 0x3764, Size: 4]
	void UseCameraParamForVehicleParachute(bool InEnable);// 0x3908564
	void UpdateRecentAutonomousAttackTime();// 0x3908550
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x3908484
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x390840c
	void UpdateIndoorState(bool IsInDoor);// 0x3908344
	void UpdateEnableGoldenSuitCheck();// 0x3908328
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x3908260
	void TriggerParachuteLandVoice();// 0x3908244
	void TriggerAutoAimCheck(float DeltaTime);// 0x39081cc
	void TouchCancelSkillLock();// 0x39081b8
	void SyncLatestPlayerStatus(enum LatestParachuteState);// 0x3908104
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x3873e00
	void SwitchSightAngledServer(byte InAngledSightType, bool IsOnlyTurn);// 0x3907ff4
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x3907f28
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x3907e64
	void SwitchCameraToParachuteOpening();// 0x3907e48
	void SwitchCameraToParachuteFalling();// 0x3907e2c
	void SwitchCameraToNormal();// 0x3907e10
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x3907d98
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x49216cc
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x3907d84
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x49216cc
	void StopCamShake();// 0x3907d68
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x3907cf0
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x3907c78
	void StartCamShake();// 0x3907c5c
	void ShowNightVisionFrame();// 0x3871d04
	void ShowConfirmDialogOfMisKill();// 0x3871c70
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x3907bbc
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x3907b44
	void SetSpecifiedItemConsumed(int ItemId);// 0x49216cc
	void SetSelfAndVehicleShadow(bool IsShow);// 0x3907ac4
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x3907a08
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x39078fc
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x3907838
	void SetParachuteState(enum State);// 0x39077b8
	void SetInjuryFreeRateData(out const int[] InInjuryFreeData);// 0x39076ec
	void SetIgnoreGliderOneTime(bool bFlag);// 0x3907664
	void SetFPPDeafultFov(float InFov);// 0x39075ec
	void SetFovInTPPSpringArm(float FieldOfView);// 0x3907574
	void SetEnableStandalonePickUpTick(bool bEnableTick);// 0x39074f4
	void SetBodyIndoor(bool IsInDoor);// 0x3907474
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x39071c4
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd);// 0x3906f98
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x3906e3c
	void ServerRPCOnClickInteractiveButton(InteractiveComponentBase* pComponent, int Flag);// 0x3906d40
	void ServerOnApplicationactivated(bool bAppActive);// 0x3906c78
	void ResetCharacter();// 0x3869fdc
	void RequestLoadParachuteAnim(bool bHasNewChildComponent);// 0x3906bf0
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x3906b28
	void RemoveParachuteAnim();// 0x3906b14
	void ReleaseTrigger(enum Hand);// 0x3906a94
	void ReinitAbilitySystemComponentAvatar();// 0x3906a80
	void RefreshParachuteAnim();// 0x3906a64
	void RefreshBearerFramingTick();// 0x3906a50
	void PushTrigger(enum Hand);// 0x39069d0
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x390687c
	void PostPawnClientRestart();// 0x3906860
	void PlayVehicleHitSimpleCharacterCameraShake();// 0x3906844
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x49216cc
	void OnTakeDamage(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Causer, out const ExtraDamageInfo ExtraDamageInfo);// 0x3906668
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x49216cc
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x49216cc
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x49216cc
	void OnRepParachuteStateDelegate__DelegateSignature();// 0x49216cc
	void OnRep_STPlayerController();// 0x3906654
	void OnRep_ParachuteState(enum State);// 0x39065cc
	void OnRep_MoveUploadTimeout();// 0x39065b8
	void OnRep_InteractiveComponentList();// 0x34f4004
	void OnRep_InjuryFreeData();// 0x39065a4
	void OnRep_IgnoreGliderOneTime();// 0x3906588
	void OnRep_CurrentActivityID();// 0x3906574
	void OnRep_bIsPendingCaptived();// 0x3906560
	void OnRep_AngleSightStateChanged();// 0x390654c
	void OnRep_ActivityAnimationRepData();// 0x3906538
	void OnRank(int Kills, int Rank);// 0x390647c
	void OnPlayerCurrentWeaponChange(byte CurSlot);// 0x3906404
	void OnParachuteStateChangedDelegate__DelegateSignature(enum LastParachuteState, enum NewParachuteState);// 0x49216cc
	void OnNewWeaponDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x49216cc
	void OnMiniTreeTriggerServerLogicCPP();// 0x39063e8
	void OnLockUpdateAroundPickupEnd();// 0x39063d4
	void OnLoadParachuteAnimCompleted();// 0x39063c0
	void OnIndoorStateChangeDelegate__DelegateSignature();// 0x49216cc
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x49216cc
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x49216cc
	void OnBPStateCheckIn();// 0x49216cc
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x39062b4
	void OnAllAvatarEquippedSucc();// 0x39062a0
	void NotifyClientParachuteLanded(bool bOK);// 0x39061d8
	bool NeedResetFlyDeviceParachuteAnim();// 0x39061a8
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x3906120
	void MiniTreeTriggerServerLogic();// 0x39060c4
	bool IsSwitchCoolingDownFinish();// 0x3906090
	bool IsSpecifiedItemInCD(int ItemId);// 0x3906008
	bool IsLandedWithClientPos();// 0x3905fe0
	bool IsInLaunchSeat();// 0x3905fb0
	bool IsGrenadeEmpty();// 0x3905f88
	bool IsBodyIndoorFuc();// 0x3905f68
	bool IsBodyIndoorCheck();// 0x3905f40
	bool IsAllowSyncControllerRotationInActived();// 0x365435c
	bool IsAllowPickupActor();// 0x37179ec
	void InitAirAttackLocatorComponent();// 0x3905f2c
	void HideNightVisionFrame();// 0x38624ec
	bool HasParachuteAnimLoaded();// 0x3905f04
	void HandleParachuteStateChanged(enum NewState);// 0x3905e84
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x3905c6c
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x3905a54
	SpringArmComponent* GetThirdPersonSpringArm();// 0x49216cc
	CameraComponent* GetThirdPersonCamera();// 0x49216cc
	float GetSwimRotateX_Ex();// 0x3905a2c
	int GetSkillIndexByActivityID();// 0x49216cc
	SpringArmComponent* GetScopeSpringArm();// 0x49216cc
	CameraComponent* GetScopeCamera();// 0x49216cc
	bool GetPlayerVisibile();// 0x3905a04
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x3905984
	STExtraPlayerController* GetPlayerControllerSafety();// 0x3860b64
	void GetOnVehicleDelegate__DelegateSignature();// 0x49216cc
	SceneComponent* GetMoveableComp();// 0x390595c
	bool GetIsInDoor();// 0x390592c
	bool GetIsGunADS();// 0x39058fc
	InteractiveComponentBase*[] GetInteractiveComponentList();// 0x390588c
	float GetInjuryFreeRate(int BodyPart);// 0x3860344
	SpringArmComponent* GetFPPSpringArm();// 0x49216cc
	float GetFPPDeafultFov();// 0x3905864
	CameraComponent* GetFPPCamera();// 0x49216cc
	SpringArmComponent* GetFirstPersonSpringArm();// 0x49216cc
	CameraComponent* GetFirstPersonCamera();// 0x49216cc
	enum[] GetDisallowedStates(int ActivityID);// 0x49216cc
	int GetBuildingAvatarID(int BuildingID);// 0x49216cc
	Vector GetBonePos(FName BoneName, Vector OffsetPos);// 0x390578c
	void FreeFallShakeCam();// 0x3905778
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x3905700
	void EnableRegionBaseNetConsideration();// 0x39056ec
	void EnablePet(bool Enable);// 0x3905664
	void DynamicCreateComponents();// 0x3905650
	void DisableSimulateAnimUpdateRateOptimization(bool bDisable, float LessThanDistanceSquareCanDisable);// 0x3905588
	void DelayStopLandState();// 0x3905574
	void DelayRemoveParachuteAnim();// 0x3905560
	void ClientUserMoveCmdAck(int Sequence);// 0x39054e0
	void ClientRPCOnOverlapInteractiveComponent(InteractiveComponentBase* pComponent, bool isBeginOverlap);// 0x3905414
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x3905310
	void ClientInitParachuteLaunchStatus(Vector Vel);// 0x3905298
	void ClientCheckCancleFollow(enum InLastState, enum InNewState);// 0x39051dc
	void ClientAckGoodMove(float TimeStamp);// 0x390515c
	void ClearHPUI();// 0x385b930
	bool CheckServerCanLanded();// 0x3905134
	void CheckAttachedOrDetachedVehicle();// 0x3905120
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x39050a0
	void CallRefreshBPStateCheckIn();// 0x390508c
	void AsyncLoadGunCollisionFinish(SoftClassPath GunCollisionPath);// 0x3904f20
	void AnimInstanceCacheParachuteAnimVars(bool bForceRefreshAnim);// 0x3904ea0
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x3904e18
	void AdjustServerParachuteLanded(float ClientTimeStamp, int RespawnCount, const Vector Position, const Rotator Rotation);// 0x3904c98
	void AdjustClientParachuteTime(float NeedAdjustTimeconst, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x3904b20

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xc8, Size: 32]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xe8, Size: 32]
	Vector2D AimTargetScreenPos;//[Offset: 0x108, Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	STExtraPlayerController* ExtraPlayerController;//[Offset: 0x114, Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x118, Size: 4]
	float LastSelectAimEnemyTime;//[Offset: 0x11c, Size: 4]
	float LastFindAimEnemyTime;//[Offset: 0x120, Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x124, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x128, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x12c, Size: 4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x130, Size: 4]
	float OPEN_COLLISION_TIME;//[Offset: 0x134, Size: 4]
	float AIM_CROSSHAIR_CHECK_DELTA;//[Offset: 0x138, Size: 4]
	float LOCK_TARGET_TOLERANCE;//[Offset: 0x13c, Size: 4]
	float RANGE_SCALE;//[Offset: 0x140, Size: 4]
	float RANGE_SCALE_MAX;//[Offset: 0x144, Size: 4]
	float AC_AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x164, Size: 4]
	float AC_AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x168, Size: 4]
	float AC_DEFAULT_CD_TIME;//[Offset: 0x16c, Size: 4]
	float AC_SCOPE_AUTO_AIM_TIME;//[Offset: 0x170, Size: 4]
	float AC_RANGE_SCALE;//[Offset: 0x174, Size: 4]
	float AC_RANGE_SCALE_MAX;//[Offset: 0x178, Size: 4]
	float AC_AutoAimBreakThroughRatio;//[Offset: 0x17c, Size: 4]
	FName[] AC_Bones;//[Offset: 0x180, Size: 12]
	FName[] Bones;//[Offset: 0x18c, Size: 12]
	<FName,Vector> BonesOffset;//[Offset: 0x198, Size: 60]
	float TargetScreenWidth;//[Offset: 0x1d4, Size: 4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	float AutoAimSensitiveScreenRatio;//[Offset: 0x1dc, Size: 4]
	bool bEnableAimSensitiveOnlyInGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	float AutoAimSensitiveAngle;//[Offset: 0x1e4, Size: 4]
	float AutoAimBreakThroughAngle;//[Offset: 0x1e8, Size: 4]
	float AutoAimBreakThroughRatio;//[Offset: 0x1ec, Size: 4]
	float AutoAimBreakThroughStart;//[Offset: 0x1f0, Size: 4]
	float AutoAimBreakThroughSensitiveScale;//[Offset: 0x1f4, Size: 4]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool bModifyCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	WeaponCrossHairPerformData[] CrossHairDataRifle;//[Offset: 0x3c0, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataPistol;//[Offset: 0x3cc, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataShotGun;//[Offset: 0x3d8, Size: 12]
	void OnUnEquipWeapon();// 0x3aa3280
	void OnShoot(STExtraWeapon* Weapon);// 0x3aa3208
	void OnEquipWeapon();// 0x3aa31f4
	void OnCharacterLeaveState(enum ChangedState);// 0x3aa317c
	void OnCharacterEnterState(enum ChangedState);// 0x3aa3104
	bool IsTriggerBeforeFire();// 0x3aa30dc
	bool IsCurrentWeaponSupportAutoAim();// 0x3aa30b4
	void Init(Controller* Controller);// 0x3aa303c
	bool HasEnemyInAutoAimRange(float DeltaTime);// 0x3aa2fbc
	void GetDataFromWeaponEntity();// 0x3aa2fa8
	AutoAimEnemyInfo FindEnemyNearScreenCenter(out const Vector RayStart, float Radius, out const FName BoneName, float CollisionTime, bool HitMatchBone);// 0x3aa2dcc
	bool CheckSmoke(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x3aa2c40
	bool CheckInAngle(STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x34c15cc
	bool CheckBuffStun();// 0x3aa2c18
	bool CanEnemeyRaycastReach(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x3aa2a8c
	bool CanAsynCalcuAimRange();// 0x3aa2a64
	void BPDrawDebugInfo(out const float[] AutoAimParams);// 0x3aa2990

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xf4, Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0xf8, Size: 12]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x104, Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x108, Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x114, Size: 12]
	FName ScreenPlane;//[Offset: 0x120, Size: 8]
	bool FollwCameraManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x12c, Size: 12]
	delegate OnPlayScreenAppearance;//[Offset: 0x138, Size: 12]
	delegate OnStopScreenAppearance;//[Offset: 0x144, Size: 12]
	delegate OnPlayScreenParticle;//[Offset: 0x150, Size: 12]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x15c, Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x168, Size: 4]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x178, Size: 12]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x39b09b4
	void StopScreenParticleEffectByName(FString ScreenParticleName);// 0x39b08f8
	void StopScreenParticleEffect(byte EffectType);// 0x39b0880
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x39b0778
	void StopAllScreenParticleEffect();// 0x39b0764
	void StopAllScreenAppearance();// 0x39b0750
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* Tex);// 0x39b060c
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x39b0550
	bool SetScalarParam(FString AppearanceName, FName ParamName, float ParamValue);// 0x39b03fc
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x39b02d0
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x39b0200
	void SetAllAppearanceMeshHiddenInGame(bool bNewHid);// 0x39b0180
	void PlayScreenParticleWhenCharacterHideInGame(ParticleSystem* PS, out const Transform RelativeTransform, float LifeSeconds);// 0x39b0020
	void PlayScreenParticleEffectByName(FString ScreenParticleName, float InEffectValue);// 0x39aff18
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x39afe5c
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x39afcfc
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x39afb1c
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x39af8f4
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI, FName InMatInstParamName, CurveFloat* InParamCurve);// 0x39af6c4
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x39af64c
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x39af588
	void HandleEffectLoadFinishByName(FString ScreenParticleName);// 0x39af430
	void HandleEffectLoadFinish(byte EffectType);// 0x39af3b8
	bool GetScalarParam(FString AppearanceName, FName ParamName, out float ParamValue);// 0x39af254

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	float LifeSpan;//[Offset: 0xc, Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44, Size: 4]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x50, Size: 48]
	FName MatInstParamName;//[Offset: 0x80, Size: 8]
	CurveFloat* ParamCurve;//[Offset: 0x88, Size: 4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 1]
	FString ScreenParticleEffectName;//[Offset: 0x4, Size: 12]
	ParticleSystem* ParticleEffect;//[Offset: 0x10, Size: 40]
	FName ParticleParamName;//[Offset: 0x38, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x40, Size: 12]
	Vector ScreenParticleEffectLoc;//[Offset: 0x4c, Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x58, Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bNeedReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	float CurrentParamValue;//[Offset: 0x60, Size: 4]
	byte DisableDeviceLevel;//[Offset: 0x64, Size: 1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	FName AppearanceTag;//[Offset: 0x10, Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 4]
	float MatialAlpha;//[Offset: 0x54, Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58, Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c, Size: 4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	float GradualFrag;//[Offset: 0x64, Size: 4]
	float DelayTime;//[Offset: 0x68, Size: 4]

--------------------------------
Class: MultiAppearanceMeshData
	StaticMeshComponent* MultiAppearanceMesh;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x670, Size: 12]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x64a9dec
	Vector GetUnscaledBoxExtent();// 0x64a9dc4
	Vector GetScaledBoxExtent();// 0x64a9d70

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x790, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x7c0, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x7f0, Size: 48]
	void SetActivate(bool _IsActivate);// 0x36fc808

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xbc, Size: 4]
	int DetectThreshold;//[Offset: 0xc0, Size: 4]
	float FoldFactor;//[Offset: 0xc4, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xc8, Size: 4]
	Vector BoxHalfSize;//[Offset: 0xd4, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe0, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xec, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0xf8, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x104, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x110, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x114, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x120, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x12c, Size: 12]
	int FoldFactorDelt;//[Offset: 0x138, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x13c, Size: 4]
	int TraceDis;//[Offset: 0x140, Size: 4]
	float TickDeltTime;//[Offset: 0x144, Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x150, Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x3734610
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x37344d8

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x8b4, Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x35e5a58

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 4]
	FName ParentSocketName;//[Offset: 0x10, Size: 8]
	float TargetArmALength;//[Offset: 0x18, Size: 4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 12]
	Vector TargetOffset;//[Offset: 0x28, Size: 12]
	Vector RelativeLocation;//[Offset: 0x34, Size: 12]
	float ProbeSize;//[Offset: 0x40, Size: 4]
	byte ProbeChannel;//[Offset: 0x44, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0, Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xbc, Size: 4]
	float AALOpenSensibility;//[Offset: 0xc0, Size: 4]
	float OpenAALFOV;//[Offset: 0xc4, Size: 4]
	int MaxDist;//[Offset: 0xc8, Size: 4]
	int minDist;//[Offset: 0xcc, Size: 4]
	int DangerDist;//[Offset: 0xd0, Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xd8, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x100, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x128, Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x12c, Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x130, Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x138, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x13c, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x140, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x144, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x148, Size: 4]
	float ShortDis;//[Offset: 0x14c, Size: 4]
	byte ChannelType;//[Offset: 0x150, Size: 1]
	Vector TargetLocation;//[Offset: 0x154, Size: 12]
	void SetItemExsist(bool bExsist);// 0x34cd730
	void SetFinalLocation();// 0x34cd71c
	void SetAALFov(bool bOpen);// 0x34cd69c
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x34cd584
	void OnFreeArrowLoadFinsh();// 0x34cd570
	void OnCalledActorLoadFinsh(Vector Location);// 0x34cd500
	float GetTargetDistance();// 0x34cd4d8
	bool GetAALAvaliable();// 0x34cd4b0

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x34c, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x350, Size: 4]
	int SkillID;//[Offset: 0x354, Size: 4]
	int IconID;//[Offset: 0x358, Size: 4]
	float AttackAreaRadius;//[Offset: 0x35c, Size: 4]

--------------------------------
Class: FanPickerConfigData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float CapsuleRadius;//[Offset: 0x8, Size: 4]
	Vector Offset;//[Offset: 0xc, Size: 12]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsHeadJudgeWithoutOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 12]
	bool bForwardHitAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	enum PickerType;//[Offset: 0x2d, Size: 1]
	enum PickerTargetType;//[Offset: 0x2e, Size: 1]
	int PickerMaxCount;//[Offset: 0x30, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Actor*[] IgnoreTargets;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 4]

--------------------------------
Class: InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnAllowToInteract;//[Offset: 0x150, Size: 16]
	delegate OnAllowToClickButton;//[Offset: 0x160, Size: 16]
	delegate OnInteractionEffective;//[Offset: 0x170, Size: 16]
	delegate OnClientShowInteractiveUI;//[Offset: 0x180, Size: 12]
	delegate OnServerAddOrDeleteComponent;//[Offset: 0x18c, Size: 12]
	delegate OnServerClickInteractiveButton;//[Offset: 0x198, Size: 12]
	delegate OnServerRPCSetOccupied;//[Offset: 0x1a4, Size: 12]
	delegate OnStartCoolDown;//[Offset: 0x1b0, Size: 12]
	delegate OnRepOccupied;//[Offset: 0x1bc, Size: 12]
	delegate OnRepCoolDown;//[Offset: 0x1c8, Size: 12]
	delegate OnRepCurrentCharacter;//[Offset: 0x1d4, Size: 12]
	delegate OnRepCurrentCharacterArray;//[Offset: 0x1e0, Size: 12]
	delegate OnRepEnabled;//[Offset: 0x1ec, Size: 12]
	delegate OnResetSkillAction;//[Offset: 0x1f8, Size: 12]
	delegate OnStartedSkillAction;//[Offset: 0x204, Size: 12]
	delegate OnFinishedSkillAction;//[Offset: 0x210, Size: 12]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x21c, Size: 4]
	PrimitiveComponent*[] PrimitiveComponentArray;//[Offset: 0x220, Size: 12]
	Character* OccupyingCharacter;//[Offset: 0x22c, Size: 8]
	Character*[] OccupyingCharacterArray;//[Offset: 0x234, Size: 12]
	bool bIsCooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	int CoolDownLeftTimeForShow;//[Offset: 0x244, Size: 4]
	bool bOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	FName PrimitiveComponentTag;//[Offset: 0x250, Size: 8]
	int CollisionsNum;//[Offset: 0x258, Size: 4]
	bool bCanInteractMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool bShowedMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	bool bOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	bool bCheckBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 1]
	int CheckBlockCharacterIncrement;//[Offset: 0x260, Size: 4]
	int CheckBlockActorIncrement;//[Offset: 0x264, Size: 4]
	bool bCanInteractInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bCanInteractWhenNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bCanInteractInCarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool bCanInteractInBeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	bool bCanAIInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bAllowWhenCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	int TipsIdWhenClickedInCoolDown;//[Offset: 0x270, Size: 4]
	float CoolDownTime;//[Offset: 0x274, Size: 4]
	float MaxOccupyingTime;//[Offset: 0x278, Size: 4]
	int MaxOccupyingCharacterNum;//[Offset: 0x27c, Size: 4]
	int TLogKey;//[Offset: 0x280, Size: 4]
	bool bTLogCountReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	Volume* CustomTriggerVolume;//[Offset: 0x288, Size: 4]
	int DebugParameter;//[Offset: 0x28c, Size: 4]
	int SkillID;//[Offset: 0x290, Size: 4]
	bool bResetSkillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	float LoadingDuration;//[Offset: 0x298, Size: 4]
	SoftObjectPath LoadingIcon;//[Offset: 0x2a0, Size: 24]
	AnimMontage* FPS_AnimMontage_Stand;//[Offset: 0x2b8, Size: 40]
	AnimMontage* FPS_AnimMontage_Crouch;//[Offset: 0x2e0, Size: 40]
	AnimMontage* FPS_AnimMontage_Prone;//[Offset: 0x308, Size: 40]
	AnimMontage* FPS_AnimMontage_Vehicle;//[Offset: 0x330, Size: 40]
	AnimMontage* TPS_AnimMontage_Stand;//[Offset: 0x358, Size: 40]
	AnimMontage* TPS_AnimMontage_Crouch;//[Offset: 0x380, Size: 40]
	AnimMontage* TPS_AnimMontage_Prone;//[Offset: 0x3a8, Size: 40]
	AnimMontage* TPS_AnimMontage_Vehicle;//[Offset: 0x3d0, Size: 40]
	void StartCoolDown();// 0x368c238
	void SetOccupied(Character* Character, bool bOccupied);// 0x368c174
	void SetEnable(bool bIsEnable);// 0x368c0f4
	void ServerAddOrDeleteInteractiveComponent(Character* Character, bool bAdd);// 0x368c030
	void RegisterCollisionsEvent();// 0x368c01c
	void OnRep_Occupied();// 0x368c008
	void OnRep_Enabled();// 0x368bff4
	void OnRep_CurrentCharacterArray();// 0x368bfe0
	void OnRep_CurrentCharacter();// 0x368bfcc
	void OnRep_CoolDown();// 0x368bfb8
	void OnEndOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex);// 0x368be70
	void OnBeginOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x368bc38
	bool IsOverlappingByCharacter(Character* Character);// 0x368bbb8
	bool IsOccupied();// 0x368bb90
	bool IsInteractionEffective(Character* Character, out enum Reason);// 0x368babc
	bool IsEnabled();// 0x368ba94
	bool IsCoolingDown();// 0x368ba6c
	int GetInteractiveCharacterNum();// 0x368ba44
	void GetCurrentOccupyingCharacterArray(out Character*[] OutActors);// 0x368b978
	Character* GetCurrentOccupyingCharacter();// 0x368b950
	int GetCoolDownLeftTimeForShow();// 0x368b928
	void GetAllInteractiveCharacters(out Character*[] OutActors);// 0x368b85c
	bool AllowToInteract(Character* Character, out enum Reason);// 0x368b788
	bool AllowToClickButton(Character* Character, out enum Reason);// 0x368b6b4

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 12]
	int ActivityID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.LuaActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x3ec, Size: 12]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x3f8, Size: 12]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x404, Size: 12]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x414, Size: 12]
	float CurrentScale;//[Offset: 0x420, Size: 4]
	int CurActTime;//[Offset: 0x424, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x428, Size: 12]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	FName SocketBaseTags;//[Offset: 0x438, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x440, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x444, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x448, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x44c, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x450, Size: 12]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x45c, Size: 12]
	int AttachedNumber;//[Offset: 0x46c, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x470, Size: 60]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x4ac, Size: 12]
	Vector[] DropOffLocations;//[Offset: 0x4c4, Size: 12]
	enum DropOffLocationType;//[Offset: 0x4d0, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x4d4, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x4d8, Size: 12]
	byte IsDayTime;//[Offset: 0x4e4, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x4e8, Size: 12]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x4f5, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x4f8, Size: 12]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool UseDropFixedPosition();// 0x398f004
	void StopDancing_Multicast(const Actor*[] Players);// 0x3a9b7fc
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x3a9b6c0
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x3a9b60c
	static void SetupMinimapDisplay(UAEPlayerController* PController, out const LoveTreeData[] treeData);// 0x3a9b504
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x3a9b48c
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x49216cc
	void ResetPCByTime(PlayerController* PlayerController, float cdTime);// 0x3a9b3d0
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x3a9b32c
	void OnStopDancing(out const Actor*[] Players);// 0x3a9b258
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x3a9b140
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x3a9b0c0
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x49216cc
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x49216cc
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x3a9b024
	void OnRep_SkeletalAnimationSyncData();// 0x3a9b010
	void OnRep_ShowRabbitAnim();// 0x34d0a90
	void OnRep_PawnDoneList();// 0x34d0ac8
	void OnRep_IsDayTime();// 0x34d0ae4
	void OnRep_CurrentScaleCPP();// 0x3a9affc
	void OnRep_CurrentScaleBP();// 0x49216cc
	void OnRep_CurrentInteractingPlayerCount();// 0x3a9afa8
	void OnRep_CurActTimeCPP();// 0x3a9af54
	void OnRep_CurActTimeBP();// 0x49216cc
	void OnRep_AttachedNumber();// 0x3a9aef4
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x3a9ad94
	void OnPlayerNumberChanged(int Number);// 0x49216cc
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x49216cc
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x49216cc
	void OnPCCDCleared(PlayerController* PlayerController);// 0x49216cc
	void OnClientCurrentInteractingPlayerCountChanged();// 0x49216cc
	bool IsDropFixedRelativePositionSetUp();// 0x3a9ad64
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x3a9ace4
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x3a9ac4c
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x3a9aac8
	bool CanTriggertEvent(Pawn* CurPawn);// 0x49216cc
	int CacheAssociatedSkillIndex();// 0x49216cc

--------------------------------
Class: UAERegionActor.LuaActor.Actor.Object
	byte AutoDormancyType;//[Offset: 0x39c, Size: 1]
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	enum RegionSize;//[Offset: 0x39e, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	void ReceivedPlayerActiveRegionsChanged(bool bEnter);// 0x49216cc

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 4]
	Actor* AttachedPlayer;//[Offset: 0xc, Size: 4]
	Vector OffsetLoc;//[Offset: 0x10, Size: 12]
	Rotator OffsetRot;//[Offset: 0x1c, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x28, Size: 4]

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 4]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 4]
	Vector Loc;//[Offset: 0x4, Size: 12]
	float minRate;//[Offset: 0x10, Size: 4]
	float maxRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerTombBox.LuaActor.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x3d8, Size: 12]
	FName TombName;//[Offset: 0x3e8, Size: 8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x3f4, Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x3f8, Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x400, Size: 24]
	int DeadTime;//[Offset: 0x418, Size: 4]
	int BoxLifeSpan;//[Offset: 0x41c, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x424, Size: 12]
	byte AttackRules;//[Offset: 0x430, Size: 1]
	Actor* AttachedActor;//[Offset: 0x434, Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	enum BoxType;//[Offset: 0x439, Size: 1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x43c, Size: 12]
	uint32 OwnerUniqueID;//[Offset: 0x448, Size: 4]
	int TargetPlayerKey;//[Offset: 0x44c, Size: 4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x454, Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	bool bAirDropWrapperDynamicRegionNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 1]
	int AvatarID;//[Offset: 0x45c, Size: 4]
	Character* BoxOwner;//[Offset: 0x460, Size: 4]
	ProjectileMovementComponent* CacheComp;//[Offset: 0x464, Size: 4]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x468, Size: 8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x470, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x47c, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	int DropGroupID;//[Offset: 0x484, Size: 4]
	Vector DropStartLocation;//[Offset: 0x488, Size: 12]
	void SwitchToDeadTombBox();// 0x34d0aac
	void SetVisible(bool IsVisible);// 0x37460c0
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x3745f58
	void RegisterToPlayerPickUpList();// 0x3745f44
	void RegisterToCurveAnimComponent();// 0x35d6390
	void OpenListenUIEvent(bool bOpen);// 0x49216cc
	void OnRep_VisibilityChange();// 0x3745f30
	void OnRep_ItemEffectBoxPickupWrapperActor();// 0x3745f1c
	void OnRep_ChangeBoxMesh();// 0x34f4004
	void OnRep_BoxLifeSpan();// 0x3745f08
	void OnRep_AvatarId();// 0x35882cc
	void OnRep_AttachmentReplication();// 0x372292c
	void OnRep_AttachedActor();// 0x3745ef4
	void OnRefreshItemEffect();// 0x3745ee0
	void HideDeadTombApparence();// 0x34cfeec
	int GetUniqueInstanceID();// 0x3745eb8
	int GetTombboxLifespan();// 0x3745e90
	PickUpListWrapperActor* GetPickupWrapperActor();// 0x3745e74
	void GetDropItemListFromPlayer(out PickUpItemData[] ItemDataList);// 0x3745dc8
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x3745d98
	int GetAvatarId();// 0x3745d70
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x3745c54
	void GeneratePlayerBackpackWrappers();// 0x3745c40
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x3745aa8
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x37459ac
	void GenerateBoxWrappersByItemDataList(out const PickUpItemData[] DataList, FName BoxName, bool IsInAirDropBox);// 0x3745864
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxId);// 0x3745704
	int DellGeneratePlayerBackpackWrappers(PickUpListWrapperActor* Wrapper, int MaxItemQuality);// 0x3745638
	bool CanPickByPawn(Pawn* Pawn);// 0x37455b0
	void AddToAIList(PickUpListWrapperActor* Wrapper);// 0x3745538

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 4]
	<int> ItemSpecificIDArray;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x6a0, Size: 12]
	enum BoxType;//[Offset: 0x6b8, Size: 1]
	delegate OnSomeonePickItem;//[Offset: 0x6d4, Size: 12]
	float PickUpListDataRelevancyDistanceSqrt;//[Offset: 0x6e4, Size: 4]
	PickUpDataComponent* PickUpDataComponent;//[Offset: 0x6e8, Size: 4]
	void SetPickUpDataList(out PickUpItemData[] PickUpItemDatas);// 0x371dde0
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x371dce4
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x371dc10
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x49216cc
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey, int TypeSpecificID);// 0x49216cc
	void OnRep_PickUpDataList();// 0x371dbfc
	void OnRep_PickUpDataComponent();// 0x34f4004
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x49216cc
	void OnBoxEmptyDelegate__DelegateSignature(int BoxId);// 0x49216cc
	PickUpItemData[] GetPickUpDataList();// 0x371dbcc
	PickUpItemData[] GetDataList();// 0x371db60
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x371da10

--------------------------------
Class: PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x3e8, Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x3f0, Size: 24]
	int Count;//[Offset: 0x408, Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool bAlwaysPickAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x410, Size: 12]
	bool bForceDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 1]
	FName OwnerName;//[Offset: 0x420, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x428, Size: 4]
	float OwnerTime;//[Offset: 0x42c, Size: 4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x434, Size: 12]
	Actor* AttachedActor;//[Offset: 0x440, Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x444, Size: 12]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x454, Size: 4]
	float PickUpColdCountDown;//[Offset: 0x458, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x480, Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x488, Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x48c, Size: 4]
	FString ItemValue;//[Offset: 0x490, Size: 12]
	FString ItemCategory;//[Offset: 0x49c, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	int OverridePickupRule;//[Offset: 0x4ac, Size: 4]
	delegate OnWrapperPickedUp;//[Offset: 0x4b4, Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x4c4, Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x4c8, Size: 4]
	int ObjectPoolSize;//[Offset: 0x4cc, Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 1]
	int InBoxEffectDurationTime;//[Offset: 0x4d4, Size: 4]
	FString EffectPath;//[Offset: 0x4d8, Size: 12]
	FString DurationTime;//[Offset: 0x4e4, Size: 12]
	int ItemId;//[Offset: 0x4f0, Size: 4]
	Color DefaultColor;//[Offset: 0x4f4, Size: 4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x500, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x580, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x600, Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x640, Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x650, Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x668, Size: 4]
	int SpotDataIndex;//[Offset: 0x678, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	int DropGroupID;//[Offset: 0x688, Size: 4]
	Vector DropStartLocation;//[Offset: 0x68c, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x37230e0
	FString ToDetailString();// 0x3723018
	void ShowMesh(bool bShow);// 0x3722f98
	void ShowActor();// 0x3722f84
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x3722e1c
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x3722d8c
	void SetDefineID(out const ItemDefineID DID);// 0x3722cfc
	void SetCountOnServerAfterSpawn(int _Count);// 0x3722c84
	void SetActorToGround(Actor* IgnoreActor);// 0x3722bd0
	void ServerResetShowActor();// 0x3722bbc
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x3722a60
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x37229ac
	void RegisterToCurveAnimComponent();// 0x3722998
	void PickUpWrapperShow__DelegateSignature();// 0x49216cc
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x49216cc
	void OnWrapperPickedDelegate__DelegateSignature();// 0x49216cc
	void OnSpawned();// 0x35d1618
	void OnRespawnedEvent();// 0x34d0a90
	void OnRep_PickUpColdCountDown();// 0x3722984
	void OnRep_OwnerUniqueID();// 0x3722970
	void OnRep_Owner();// 0x3716624
	void OnRep_DropGroundEffectInfo();// 0x372295c
	void OnRep_DefindID();// 0x3722948
	void OnRep_Count();// 0x34d0ac8
	void OnRep_AttachmentReplication();// 0x372292c
	void OnRep_AttachedActor();// 0x3722918
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x3722700
	void OnHideActor(bool bHide);// 0x372266c
	void OnDestroyed();// 0x3621580
	void OnActorDestroyed();// 0x3617410
	int MoveWrapperContainsAttachment(enum AttachmentAdditionalDataType);// 0x37225e4
	void ModifyData(int _Count);// 0x372256c
	void MarkPlayerPlayerInfoByDropped(STExtraBaseCharacter* InDroppedPlayer);// 0x37224f4
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x372242c
	bool LoadDynamicMeshInst(StaticMesh* InStaticMesh);// 0x37223ac
	bool LoadDynamicMesh(FString MeshPath);// 0x37222e8
	bool LoadDynamicMaterialInst(MaterialInstance* InMaterialInst);// 0x3722268
	bool LoadDynamicMaterial(FString MaterialPath);// 0x37221a4
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x37220c0
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x3721d68
	int HasWrapperContainsAttachment(enum AttachmentAdditionalDataType);// 0x3721ce0
	StaticMeshComponent* GetPickupMesh();// 0x3721cb8
	int GetNetGUIDOffsetValue();// 0x3721c90
	int GetItemType();// 0x3721c60
	uint64 GetItemInstanceId();// 0x3721c38
	int GetItemId();// 0x3721c08
	bool GetHasBeenPickedUp();// 0x3721bd8
	PickUpItemData[] GetDataList();// 0x371db60
	void ForceNetUpdate();// 0x3721bbc
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x371da10
	void ColdTimeCountDown();// 0x3721ba8
	void ClientResetShowActor();// 0x3721b94
	bool CheckPickUpDataIsWeapon();// 0x3721b6c
	bool CanBePickedUp(STExtraBaseCharacter* InTryPickUpPlayer);// 0x3721ae4
	void BroadcastResetShowActor();// 0x3721a88
	void BroadcastDataToAllClients(int Count_New);// 0x37219d4
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x3721954
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x3721740

--------------------------------
Class: UAENetActor.LuaActor.Actor.Object
	int iRegionActor;//[Offset: 0x39c, Size: 4]
	bool bStaticAddNetworkActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	byte AutoDormancyType;//[Offset: 0x3a3, Size: 1]
	void ReceivedPlayerActiveRegionsChanged(bool bEnter);// 0x49216cc

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c, Size: 12]
	int InstanceID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: PickUpDataComponent.ActorComponent.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0xc0, Size: 12]
	void OnRep_PickUpDataList();// 0x371cfc0

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 12]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x524, Size: 4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a4, Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a4, Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x4a8, Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x4b8, Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x4bc, Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x4c0, Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x4c4, Size: 4]
	float RecreateSocketCooldownTime;//[Offset: 0x514, Size: 4]
	float RecreateSocketMaxTryCount;//[Offset: 0x518, Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ExtraDamageInfo
	int DamageTypeId;//[Offset: 0x0, Size: 4]
	int DamageItemID;//[Offset: 0x4, Size: 4]
	enum DamagePosition;//[Offset: 0x8, Size: 1]
	bool DamageToDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool DamageToDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x2b0, Size: 4]
	Vector SocketOffset;//[Offset: 0x2b4, Size: 12]
	Vector TargetOffset;//[Offset: 0x2c0, Size: 12]
	float ProbeSize;//[Offset: 0x2cc, Size: 4]
	byte ProbeChannel;//[Offset: 0x2d0, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d1, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d1, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d1, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d1, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d1, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d1, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d1, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d1, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d2, Size: 1]
	float CameraLagSpeed;//[Offset: 0x2d4, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x2d8, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x2dc, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x2e0, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x64787dc
	Rotator GetTargetRotation();// 0x397ace4

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x910, Size: 1088]
	bool CanDumpThisAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	bool bEnableInitializeRecacheCustomAnimAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd53, Size: 1]
	Rotator OwnerAimRotation;//[Offset: 0xd54, Size: 12]
	Rotator C_SightAngledRotOffset;//[Offset: 0xd60, Size: 12]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6c, Size: 1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6d, Size: 1]
	bool C_SkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6e, Size: 1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6f, Size: 1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd70, Size: 1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd71, Size: 1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd72, Size: 1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd73, Size: 1]
	Rotator SwimRotate;//[Offset: 0xd74, Size: 12]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 1]
	float C_HandIKBlendOutParams;//[Offset: 0xd84, Size: 4]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd89, Size: 1]
	float C_SwimSpeed;//[Offset: 0xd8c, Size: 4]
	float C_ProneHandleAlpha;//[Offset: 0xd90, Size: 4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd94, Size: 1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0xd98, Size: 4]
	float LeftHandIKAlpha;//[Offset: 0xd9c, Size: 4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda0, Size: 1]
	bool C_IsCrouchingOrMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda1, Size: 1]
	bool bAllowRotWithCurStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda2, Size: 1]
	enum C_SeatSpecialType;//[Offset: 0xda3, Size: 1]
	enum C_EWeaponBoltStatus;//[Offset: 0xda4, Size: 1]
	int WeaponReloadSlotIndex;//[Offset: 0xda8, Size: 4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdac, Size: 1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdad, Size: 1]
	bool C_IsMeleeAttacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdae, Size: 1]
	float NeckTurnUILeftAngle;//[Offset: 0xdb0, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0xdb4, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0xdb8, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0xdbc, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0xdc0, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0xdc4, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0xdc8, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0xdcc, Size: 4]
	float NeckMapAngleRight;//[Offset: 0xdd0, Size: 4]
	float NeckMapAngleUp;//[Offset: 0xdd4, Size: 4]
	float NeckMapAngleDown;//[Offset: 0xdd8, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xddc, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xde0, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0xde4, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0xde8, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0xdec, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0xdf0, Size: 4]
	float NeckTurnSpeed;//[Offset: 0xdf4, Size: 4]
	enum C_ParachuteState;//[Offset: 0xdf8, Size: 1]
	Rotator C_HeadRotOffset;//[Offset: 0xdfc, Size: 12]
	Rotator DeltaViewOffset;//[Offset: 0xe08, Size: 12]
	float EnableWeaponModifyAlpha;//[Offset: 0xe14, Size: 4]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe19, Size: 1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1a, Size: 1]
	bool C_IsObstructedAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1b, Size: 1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1c, Size: 1]
	float C_AimOffsetAdditiveAlpha;//[Offset: 0xe20, Size: 4]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0xe28, Size: 4]
	float C_HoldingShieldAdditive;//[Offset: 0xe2c, Size: 4]
	int[] DisableHandIKAndObstructedSkillID;//[Offset: 0xe30, Size: 12]
	AnimSequence* Anim_DefaultDriveVehiclePose;//[Offset: 0xe3c, Size: 4]
	bool bDefaultDriveVehiclePoseValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 1]
	BlendSpace* C_ObstructedAnim;//[Offset: 0xe44, Size: 4]
	AnimSequence* C_ShieldAddtive;//[Offset: 0xe48, Size: 4]
	AnimMontage* C_RevivalMontage;//[Offset: 0xe4c, Size: 4]
	BlendSpace* C_BSFreeFalling;//[Offset: 0xe50, Size: 4]
	BlendSpace* C_BSFreeFalling_Turn;//[Offset: 0xe54, Size: 4]
	AnimSequence* C_FreeFalling_Shake;//[Offset: 0xe58, Size: 4]
	BlendSpace* C_BSParachute;//[Offset: 0xe5c, Size: 4]
	AnimSequence* C_ParachuteEnter;//[Offset: 0xe60, Size: 4]
	AnimSequence* C_ParachuteLand;//[Offset: 0xe64, Size: 4]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0xe68, Size: 4]
	BlendSpace* SwimAnim;//[Offset: 0xe6c, Size: 4]
	BlendSpace* SwimUpAnim;//[Offset: 0xe70, Size: 4]
	BlendSpace* SwimDownAnim;//[Offset: 0xe74, Size: 4]
	BlendSpace* NearDeathSwimUpAnim;//[Offset: 0xe78, Size: 4]
	BlendSpace* NearDeathSwimDownAnim;//[Offset: 0xe7c, Size: 4]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe81, Size: 1]
	Vector C_MoveDirExt;//[Offset: 0xe84, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0xe90, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xe9c, Size: 12]
	Rotator r_C_ComponentRotationRelToControlRotation;//[Offset: 0xea8, Size: 12]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb4, Size: 1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb5, Size: 1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb6, Size: 1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb7, Size: 1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb9, Size: 1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeba, Size: 1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebb, Size: 1]
	bool b_C_ParachuteState_FreeFallShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebc, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebd, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebe, Size: 1]
	bool b_C_OverrideJumpSM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebf, Size: 1]
	float DefaultLandCDTime;//[Offset: 0xec0, Size: 4]
	float f_Bolt_Aplha;//[Offset: 0xec8, Size: 4]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecc, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecd, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling_OR_HoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xece, Size: 1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xed0, Size: 4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xed4, Size: 4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 1]
	bool b_C_MoveVelocity_SightSlow_High;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed9, Size: 1]
	bool b_C_MoveVelocity_SightSlow_Low;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeda, Size: 1]
	bool b_C_DoingPickup_Or_DoingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedb, Size: 1]
	bool b_C_IsInFlyDeviceAnimType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedc, Size: 1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0xee0, Size: 12]
	float C_LeanOut_AimAngle;//[Offset: 0xef0, Size: 4]
	AssetPlayerSyncNode* FreeFallSyncNode;//[Offset: 0xef4, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xefc, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xf00, Size: 4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf04, Size: 1]
	bool bAlwaysLandLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf05, Size: 1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1c, Size: 1]
	bool bEnableStanbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1e, Size: 1]
	bool bEnableArmedStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1f, Size: 1]
	float EnableArmedStandbyAnimPitchMin;//[Offset: 0xf20, Size: 4]
	float EnableArmedStandbyAnimPitchMax;//[Offset: 0xf24, Size: 4]
	float StandbyAnimTimeInterval;//[Offset: 0xf28, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0xf2c, Size: 12]
	int[] ColdGameModeIDList;//[Offset: 0xf38, Size: 12]
	enum[] StandbyGameModeType;//[Offset: 0xf44, Size: 12]
	bool bIsPlayRandomAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 1]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0xf60, Size: 4]
	STExtraBaseCharacter* C_AttachParentCharacter;//[Offset: 0xf64, Size: 4]
	Vector C_AttachParentPawnMoveVelocity;//[Offset: 0xf68, Size: 12]
	bool b_C_CarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 1]
	bool b_C_BeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf75, Size: 1]
	float f_C_CarryBackBSTimeAccumulator;//[Offset: 0xf78, Size: 4]
	float f_C_ParachuteNearDeathBSTimeAccumulator;//[Offset: 0xf7c, Size: 4]
	AnimInstanceContainer* FeatureMoveAnimContainer;//[Offset: 0xf80, Size: 4]
	AnimInstanceContainer* FeatureNearDeathAnimContainer;//[Offset: 0xf84, Size: 4]
	AnimInstanceContainer* FeatureHitAnimContainer;//[Offset: 0xf88, Size: 4]
	bool bEnableAnimMoveContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8c, Size: 1]
	bool bEnableAnimHitContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8d, Size: 1]
	bool bEnableAnimNearDeathContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8e, Size: 1]
	bool bNeedDellFeatureAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8f, Size: 1]
	class AnimInstance* ParachuteAnimDefaultABP;//[Offset: 0xf90, Size: 4]
	AnimInstanceContainer* ParachuteAnimContainer;//[Offset: 0xf94, Size: 4]
	bool bSetEnableAnimParachuteContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf98, Size: 1]
	bool bFinalEnableAnimParachuteContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf99, Size: 1]
	float RootAimYaw;//[Offset: 0xf9c, Size: 4]
	float SpineTurnLAngleMax;//[Offset: 0xfa4, Size: 4]
	float SpineTurnRAngleMax;//[Offset: 0xfa8, Size: 4]
	void TryToFireFlareGun();// 0x383b11c
	void TryPlayStandbyAnim();// 0x383b108
	bool ShouldDestoryParachuteAnimAsset();// 0x383b0e0
	void SetVelocityZFactor(float NewFactor);// 0x383b068
	void SetFreeFallSyncNode(AssetPlayerSyncNode* BlendSpaceSyncNode);// 0x383aff0
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x383af2c
	void PostCacheParamList(float DeltaSeconds);// 0x49216cc
	void PlayStandbyAnimAnyWay();// 0x383af10
	void PendingKillParachuteAnim(Object* InObject);// 0x383ae98
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x383addc
	bool IsCastingAnyDisableHandIKAndObstructedSkill();// 0x383adb4
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x383ad3c
	void HandlePlayerPickUp();// 0x383ad20
	void HandlePerspectiveChanged(bool IsFPP);// 0x383aca0
	FString[] GetAnimUngroupsEntry();// 0x383ab44
	FString[] GetAnimSyncGroupsEntry();// 0x383a9e8
	void DumpAllProperties();// 0x383a9d4
	void DumpAllAnimInstancesInThisWorld();// 0x34f4004
	void ClearStandbyAnimState();// 0x383a9b8
	void ClearParachuteAnimVars();// 0x383a9a4
	AnimParamList CacheParamList(float DeltaSeconds);// 0x383a87c
	void CacheParachuteAnimVars(bool bForceRefresh);// 0x383a7fc
	Object* CacheParachuteAnimVar_Internal(int ParachuteAnimType, class Object TargetClass);// 0x383a738
	PlayerAnimList CacheAnimVarList();// 0x383a624
	void AsyncAnimStandbyCallback(AnimationAsset* RetAsset);// 0x383a5ac

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	delegate OnMontageStoppedEvent;//[Offset: 0x37c, Size: 12]
	bool bIsFPPAnimInstace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool bLowerArmBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool C_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool bDisableTurnPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool C_IsSplineMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a7, Size: 1]
	bool b_WeaponState_NEQ_LeftHandSwitchWeaponWhenStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ae, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3af, Size: 1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b3, Size: 1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 1]
	bool b_C_WithoutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b7, Size: 1]
	bool b_C_ChangeMovementAndNotSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool b_C_EmptyToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	bool b_C_EmptyToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 1]
	bool b_C_EmptyToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 1]
	bool b_C_StandToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool b_C_StandToCrouchNotMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool b_C_StandToProneProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool b_C_StandToCrouchOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	bool b_C_StandTo_StandToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool b_C_StandTo_StandToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	bool b_C_CrouchToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	bool b_C_CrouchToStandNotMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	bool b_C_CrouchToStandOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	bool b_C_CrouchTo_CrouchToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	bool b_C_CrouchTo_CrouchToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c6, Size: 1]
	bool b_C_ProneToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c7, Size: 1]
	bool b_C_ProneToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool b_C_ProneTo_ProneToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	bool b_C_ProneTo_ProneToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	bool b_C_ProneToStand_ToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb, Size: 1]
	bool b_C_StandToProne_ToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool b_C_CrouchToProne_ToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	bool b_C_ProneToCrouch_ToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ce, Size: 1]
	Rotator r_C_ShovelRotator;//[Offset: 0x3d0, Size: 12]
	bool b_C_MoveTurnNoScopeNoPickupNoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool b_C_ShovelScopeAndAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	Vector r_C_AimOffsetTranslation;//[Offset: 0x3e0, Size: 12]
	Rotator r_C_AimOffsetRotator;//[Offset: 0x3ec, Size: 12]
	bool b_C_NearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool b_C_NearDeathOnFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	bool b_C_NearDeathInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 1]
	bool b_C_FreeFallViewOffet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 1]
	bool b_C_FreeFallControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool b_C_FreefallingToParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	bool b_C_FreefallingToParachuteEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 1]
	bool b_C_State1_To_NeathDeath_Parchute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ff, Size: 1]
	bool b_C_State1_To_NeathDeath_Enter_Parchute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool b_C_NeathDeath_Parchute_To_State1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	byte C_LODLevel;//[Offset: 0x402, Size: 1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x404, Size: 4]
	float C_SightSlowBlendStandBaseAlpha;//[Offset: 0x408, Size: 4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x410, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0x41c, Size: 4]
	byte C_PoseType;//[Offset: 0x420, Size: 1]
	byte C_LastMovementMode;//[Offset: 0x421, Size: 1]
	byte C_CustomMovementMode;//[Offset: 0x422, Size: 1]
	byte C_WeaponType;//[Offset: 0x423, Size: 1]
	byte C_WeaponHoldType;//[Offset: 0x424, Size: 1]
	byte C_WeaponState;//[Offset: 0x425, Size: 1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x426, Size: 1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x428, Size: 4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	bool b_C_WeaponState_EQ_PreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e, Size: 1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42f, Size: 1]
	enum C_VehicleType;//[Offset: 0x430, Size: 1]
	bool C_IsShoudlerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x434, Size: 4]
	float C_ReloadAnimAdditiveSpeed;//[Offset: 0x438, Size: 4]
	float C_CharacterYawRotateRate;//[Offset: 0x43c, Size: 4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x440, Size: 4]
	float C_MaxFallingSpeed;//[Offset: 0x444, Size: 4]
	float C_FireAlpha;//[Offset: 0x448, Size: 4]
	float b_WalkAdditiveAlpha;//[Offset: 0x44c, Size: 4]
	float f_FallingVelocityZFactor;//[Offset: 0x450, Size: 4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x454, Size: 4]
	float PeekFrameRate;//[Offset: 0x458, Size: 4]
	float PeekSpeed;//[Offset: 0x45c, Size: 4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x460, Size: 4]
	float C_ForegripAnimParam;//[Offset: 0x464, Size: 4]
	float C_HandleFolderFactor;//[Offset: 0x468, Size: 4]
	float C_HandleFolderAlphaLerp;//[Offset: 0x46c, Size: 4]
	float C_HandleFolderAlphaTarget;//[Offset: 0x470, Size: 4]
	float C_HandleFolderAlphaSpeed;//[Offset: 0x474, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x478, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x47c, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x480, Size: 4]
	Vector C_MoveVelocity;//[Offset: 0x488, Size: 12]
	Vector C_MoveInputVelocity;//[Offset: 0x494, Size: 12]
	Vector C_MoveInputVelocityUnit;//[Offset: 0x4a0, Size: 12]
	Vector C_MoveDir;//[Offset: 0x4ac, Size: 12]
	Vector C_HurtDir;//[Offset: 0x4b8, Size: 12]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x4c4, Size: 12]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x4d0, Size: 12]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x4dc, Size: 12]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x4e8, Size: 12]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x4f4, Size: 12]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x500, Size: 12]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x50c, Size: 12]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x518, Size: 12]
	Rotator C_OwnerRotation;//[Offset: 0x524, Size: 12]
	Rotator C_ControlRotation;//[Offset: 0x530, Size: 12]
	Rotator C_LastControlRotation;//[Offset: 0x53c, Size: 12]
	Rotator C_ViewRotation;//[Offset: 0x548, Size: 12]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x554, Size: 12]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x560, Size: 12]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x56c, Size: 12]
	Rotator RecoilADSRotation_CP;//[Offset: 0x578, Size: 12]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x584, Size: 12]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x590, Size: 12]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x59c, Size: 12]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x5a8, Size: 12]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x5b4, Size: 4]
	Rotator OwnerRotation;//[Offset: 0x5b8, Size: 12]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 1]
	Rotator ShovelingRotation;//[Offset: 0x5c8, Size: 12]
	float ShovelingRotationoffset;//[Offset: 0x5d4, Size: 4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x5d8, Size: 12]
	Rotator FloorRotation;//[Offset: 0x5e4, Size: 12]
	float FloorRotationPitchSpeed;//[Offset: 0x5f0, Size: 4]
	byte Role;//[Offset: 0x5f4, Size: 1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f6, Size: 1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f7, Size: 1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	bool C_ClimbAnimSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 1]
	float C_ClimbAnimTransTime;//[Offset: 0x5fc, Size: 4]
	float C_ClimbAnimTime_A;//[Offset: 0x600, Size: 4]
	float C_ClimbAnimTime_B;//[Offset: 0x604, Size: 4]
	AnimParam_Accumulate WeaponAccumulateParam;//[Offset: 0x608, Size: 60]
	float Switch_AimBlendSpace_Time;//[Offset: 0x644, Size: 4]
	float Switch_AimBlendSpace_Counter;//[Offset: 0x648, Size: 4]
	bool bAimBlendSpaceChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 1]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x650, Size: 4]
	AimOffsetBlendSpace* bs_AimBlendSpace_Dest;//[Offset: 0x654, Size: 4]
	AimOffsetBlendSpace* bs_AimBlendSpace_DestLast;//[Offset: 0x658, Size: 4]
	BlendSpace* C_MovementBSCache_Stand;//[Offset: 0x65c, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch;//[Offset: 0x660, Size: 4]
	BlendSpace* C_MovementBSCache_Prone;//[Offset: 0x664, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Crouch;//[Offset: 0x668, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone;//[Offset: 0x66c, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand;//[Offset: 0x670, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone;//[Offset: 0x674, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand;//[Offset: 0x678, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch;//[Offset: 0x67c, Size: 4]
	BlendSpace* C_MovementBSCache_Stand_Dest;//[Offset: 0x680, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch_Dest;//[Offset: 0x684, Size: 4]
	BlendSpace* C_MovementBSCache_Prone_Dest;//[Offset: 0x688, Size: 4]
	<FName,float> C_MovementBS_Stand_SourceTransTime;//[Offset: 0x68c, Size: 60]
	<FName,float> C_MovementBS_Stand_SourceTransBackTime;//[Offset: 0x6c8, Size: 60]
	<FName,float> C_MovementBS_Stand_DestTransTime;//[Offset: 0x704, Size: 60]
	<byte,float> C_CustomMovementBlendTimeMap;//[Offset: 0x740, Size: 60]
	AnimSequence* C_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0x77c, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0x780, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0x784, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0x788, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0x78c, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0x790, Size: 4]
	float StandSwitchToPronePoseAnimDuration;//[Offset: 0x794, Size: 4]
	float StandSwitchFromPronePoseAnimDuration;//[Offset: 0x798, Size: 4]
	float CrouchSwitchToPronePoseAnimDuration;//[Offset: 0x79c, Size: 4]
	float CrouchSwitchFromPronePoseAnimDuration;//[Offset: 0x7a0, Size: 4]
	float StandSwitchToPronePoseAnimDelay;//[Offset: 0x7a4, Size: 4]
	float StandSwitchFromPronePoseAnimDelay;//[Offset: 0x7a8, Size: 4]
	float CrouchSwitchToPronePoseAnimDelay;//[Offset: 0x7ac, Size: 4]
	float CrouchSwitchFromPronePoseAnimDelay;//[Offset: 0x7b0, Size: 4]
	float SwitchingPoseTimer;//[Offset: 0x7b4, Size: 4]
	float SwitchingPoseTimerInternal;//[Offset: 0x7b8, Size: 4]
	float SwitchPoseAnimStartPosition;//[Offset: 0x7bc, Size: 4]
	float C_CustomMovementBlendTime;//[Offset: 0x7c0, Size: 4]
	byte C_InterruptCachePose;//[Offset: 0x7c4, Size: 1]
	bool C_UseInterruptPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c5, Size: 1]
	float InterruptPoseInternal;//[Offset: 0x7c8, Size: 4]
	bool C_IsSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 1]
	byte C_RecoverCharPose;//[Offset: 0x7cd, Size: 1]
	float SwitchPoseTransTime;//[Offset: 0x7d8, Size: 4]
	float SwitchPoseTransBackTime;//[Offset: 0x7dc, Size: 4]
	bool C_IsPlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	bool C_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e1, Size: 1]
	bool b_C_MoveVelocity_Turning_NotScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	AnimSequence* C_IdleAddtive;//[Offset: 0x7f4, Size: 4]
	AnimSequence* C_ShoulderIdleAddtive;//[Offset: 0x7f8, Size: 4]
	BlendSpace1D* C_FallingBS;//[Offset: 0x7fc, Size: 4]
	AnimSequence* C_JumpStart;//[Offset: 0x800, Size: 4]
	AnimSequence* C_LandLight;//[Offset: 0x804, Size: 4]
	AnimSequence* C_LandHeavy;//[Offset: 0x808, Size: 4]
	AnimSequence* GrenadeJumpHigh;//[Offset: 0x80c, Size: 4]
	AnimSequence* GrenadeJumpLow;//[Offset: 0x810, Size: 4]
	AnimSequence* GrenadeFallHigh;//[Offset: 0x814, Size: 4]
	AnimSequence* GrenadeFallLow;//[Offset: 0x818, Size: 4]
	BlendSpace1D* MovementUpBodyOverride;//[Offset: 0x81c, Size: 4]
	BlendSpace* MovementLowerBodyOverride;//[Offset: 0x820, Size: 4]
	AnimSequence* C_TurnAnim;//[Offset: 0x824, Size: 4]
	AnimSequence* C_StandScopeBlendAnim;//[Offset: 0x828, Size: 4]
	AnimSequence* C_CrouchScopeBlendAnim;//[Offset: 0x82c, Size: 4]
	AnimSequence* C_ProneScopeBlendAnim;//[Offset: 0x830, Size: 4]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x834, Size: 4]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x838, Size: 4]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x83c, Size: 4]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x840, Size: 4]
	AnimMontage* C_MontageRescue;//[Offset: 0x844, Size: 4]
	AnimMontage* C_MontageRescueSelf;//[Offset: 0x848, Size: 4]
	AnimMontage* C_MontageDead;//[Offset: 0x84c, Size: 4]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x850, Size: 4]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x854, Size: 4]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x858, Size: 4]
	AnimSequence* C_ShovelPhaseEnter;//[Offset: 0x85c, Size: 4]
	AnimSequence* C_ShovePhaseShoveling;//[Offset: 0x860, Size: 4]
	AnimSequence* C_ShovelPhaseLeave;//[Offset: 0x864, Size: 4]
	AnimSequence* C_Climb_FrameAnim_A;//[Offset: 0x868, Size: 4]
	AnimSequence* C_Climb_FrameAnim_B;//[Offset: 0x86c, Size: 4]
	BlendSpace* C_FireBalloonDriverBS;//[Offset: 0x870, Size: 4]
	Vector C_FireBalloonMoveVelocity;//[Offset: 0x874, Size: 12]
	bool bInMovableEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	float MovableEmoteSpeed;//[Offset: 0x884, Size: 4]
	enum AnimInstanceType;//[Offset: 0x888, Size: 1]
	bool MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 1]
	bool bUseMotionLowerBodyOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88a, Size: 1]
	enum CharMotionBlendType;//[Offset: 0x88b, Size: 1]
	float MovementUpBodyBlentWeight;//[Offset: 0x88c, Size: 4]
	bool MovementLowerBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	float MovementLowerBodyBlentWeight;//[Offset: 0x894, Size: 4]
	bool C_bSkeletonMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 1]
	bool C_IsQuickBow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x899, Size: 1]
	class AnimInstance* LocomotionAnimDefaultABP;//[Offset: 0x89c, Size: 4]
	AnimInstanceContainer* LocomotionAnimContainer;//[Offset: 0x8a0, Size: 4]
	bool bEnableLocomotionAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	class AnimInstance* VehicleAnimDefaultABP;//[Offset: 0x8a8, Size: 4]
	AnimInstanceContainer* VehicleAnimContainer;//[Offset: 0x8ac, Size: 4]
	bool bEnableVehicleAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	byte LastPoseTypeCache;//[Offset: 0x8b1, Size: 1]
	int ForceLODLevel;//[Offset: 0x8c0, Size: 4]
	float LeaveStateTimerInternal;//[Offset: 0x8e0, Size: 4]
	bool bEnableSkillAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	AnimInstanceContainer* SkillAnimContainer;//[Offset: 0x8e8, Size: 4]
	bool bShouldUseSkillContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec, Size: 1]
	bool bEnableSplineMoveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ed, Size: 1]
	static FName Util_GetAnimMontageSlotName(AnimMontage* Montage, int Index);// 0x3840a34
	void UpdateSkillAnimContainer();// 0x3840a20
	bool UpdateLocomotionContainer();// 0x38409f8
	void UnbindSkillStuffDelegate();// 0x38409e4
	void SwitchingPoseFinishCallback();// 0x38409d0
	void SetInterruptPose(bool bUseInterrupPose, byte InterruptPose);// 0x3840908
	void SetClimbAnimation(AnimSequence* AnimSequence, bool bFlag);// 0x3840844
	void ResetSkillAnimContainer();// 0x3840828
	void RefreshPeekState();// 0x3840814
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x3840794
	void PlayPostReloadWeaponAnimationOld();// 0x3840780
	void PlayPostReloadWeaponAnimation(int RemainReloadTimes);// 0x3840708
	void PlayPostFillGasWeaponAnimation();// 0x38406f4
	void PlayPlayerDeadAnimation();// 0x34e2974
	void PlayAnimationByEventType(byte Type, float SpeedScale);// 0x3840638
	void OnRespawned_BP();// 0x384061c
	void OnRecycled_BP();// 0x3840600
	void OnHandleSkillStarted(Character* OwnerCharacter, int SkillID);// 0x384053c
	void OnHandleSkillEnd(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x3840434
	void LeaveStateCallback();// 0x3840420
	bool IsAssetSkeletonMatch(AnimationAsset* CheckAnimAsset, SkeletalMeshComponent* MeshComp);// 0x384035c
	void HandleStateLeave(enum LeaveState);// 0x38402e4
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x3840264
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x38401a0
	void HandlePlayerPickUp();// 0x383ad20
	void HandlePlayerEnterRescueState(bool bBeginRescueing, bool bSelfRescue);// 0x38400c8
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x49216cc
	void HandlePlayerAnimMontagePlayExtraDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos, bool bOnlyJumpToSectionWhilePlaying, FName IgnoreStopSection);// 0x383fe7c
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x383fcd4
	void HandleOwnerAnimEvent(FName EventMsg);// 0x383fc54
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime, const byte InLoopCount, const float InStartPos, const float LoopStartPos);// 0x383f9d0
	byte GetRole();// 0x383f9a8
	FName[] GetPlayingMontageSlot();// 0x383f8e8
	FName GetPlayingMontageSection();// 0x383f8a8
	AnimMontage* GetPlayingMontage();// 0x383f880
	void ForceTriggerNotifyEndEvent();// 0x383f86c
	void FillShovelAnimation(out const PlayerAnimList AnimList);// 0x383f690
	void EnableAnimFlag(enum PlayFlag);// 0x383f618
	void DisableAnimFlag(enum PlayFlag);// 0x383f5a0
	void DelayLeavaSplineMoveAnim();// 0x383f58c
	void ClearStandbyAnimState();// 0x383a9b8
	bool CanUseSkillContainer();// 0x383f564
	void BindSkillStuffDelegate();// 0x383f550

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x36c, Size: 4]
	FString LuaFilePath;//[Offset: 0x370, Size: 12]
	void OnNotifyMontagePlayingEvent_BluePrint(FName NotifyName);// 0x49216cc
	void OnNotifyMontagePlayingEvent(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointPayload);// 0x39aaa78
	void HandlePlayerAnimMontagePlayExtraDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos, bool bOnlyJumpToSectionWhilePlaying, FName IgnoreStopSection);// 0x383fe7c
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x383fcd4
	void HandleOwnerAnimEvent(FName EventMsg);// 0x383fc54
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime, const byte InLoopCount, const float InStartPos, const float LoopStartPos);// 0x383f9d0

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: AnimParam_Accumulate
	AnimSequence* AccumulateAnimSeq;//[Offset: 0x0, Size: 4]
	AnimSequence* AccumulateAnimSeqNew;//[Offset: 0x4, Size: 4]
	bool bAccumulateAnimSeqChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float AccumulateAnimSeqChangeTimer;//[Offset: 0xc, Size: 4]
	float AccumulateAnimSeqChangeTimerCounter;//[Offset: 0x10, Size: 4]
	float AccumulateRealtime;//[Offset: 0x14, Size: 4]
	bool bAccumulateRealTimeMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float AccumulateRate;//[Offset: 0x1c, Size: 4]
	bool bAccumulateRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAccumulateRateMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bHasAccumulateRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	float BlendInSpeed;//[Offset: 0x24, Size: 4]
	float BlendOutSpeed;//[Offset: 0x28, Size: 4]
	float BlendOutRealSpeed;//[Offset: 0x2c, Size: 4]
	float BlendOutDelayTime;//[Offset: 0x30, Size: 4]
	float BlendOutDelayTime_Counter;//[Offset: 0x34, Size: 4]
	float CacheAccumulateRate;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf9, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float AnimLength;//[Offset: 0x64, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0x84, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88, Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94, Size: 4]
	BlendSample[] SampleData;//[Offset: 0x98, Size: 12]
	EditorElement[] GridSamples;//[Offset: 0xa4, Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0, Size: 24]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 4]
	Vector SampleValue;//[Offset: 0x4, Size: 12]
	float RateScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 12]
	float Min;//[Offset: 0xc, Size: 4]
	float Max;//[Offset: 0x10, Size: 4]
	int GridNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]

--------------------------------
Class: AnimInstanceContainer.Object
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x1c, Size: 4]
	<class AnimInstance,AnimInstance*> CacheAnimInstanceMap;//[Offset: 0x20, Size: 60]
	class AnimInstance* TargetClass;//[Offset: 0x5c, Size: 4]
	AnimInstance* TargetAnimInstance;//[Offset: 0x60, Size: 4]
	AnimInstance* SetTargetAnimInstance(class AnimInstance InstanceClass);// 0x64857e0
	bool RemoveCacheAnimInstance(class AnimInstance InstanceClass);// 0x6485760
	bool IsRunningTargetAnimInstance(out class AnimInstance InstanceClass);// 0x64856d0
	bool IsReceiveInPoseNode();// 0x64856a8
	AnimInstance* GetTargetInstance(bool bCheckPendingKill);// 0x6485620
	void ClearCacheAnimInstance();// 0x648560c
	bool AddCacheAnimInstance(class AnimInstance InstanceClass);// 0x648558c

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4, Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc, Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14, Size: 8]
	PlayerAnimData FillGasAnim;//[Offset: 0x1c, Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x24, Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x2c, Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x34, Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x3c, Size: 8]
	PlayerAnimData FireAccAnim;//[Offset: 0x44, Size: 8]
	PlayerAnimData PostFireAnim;//[Offset: 0x4c, Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x54, Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x5c, Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x64, Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x6c, Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x74, Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x7c, Size: 8]
	PlayerAnimData ShoudlerWeaponIdle;//[Offset: 0x84, Size: 8]
	PlayerAnimData BeCarriedBackMoveAnim;//[Offset: 0x8c, Size: 8]
	PlayerAnimData BeCarriedBackPickUpAnim;//[Offset: 0x94, Size: 8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x9c, Size: 12]
	PlayerAnimData[] ShovelAnimList;//[Offset: 0xa8, Size: 12]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0xb4, Size: 12]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 4]
	float rate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x420, Size: 4]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x424, Size: 4]

--------------------------------
Class: AnimInstanceProxy
	AnimInstance*[] SubAnimInstances;//[Offset: 0x414, Size: 12]

--------------------------------
Class: AssetPlayerSyncNode.Object
	<FName,float> SyncGroupInternalTimerMap;//[Offset: 0x1c, Size: 60]
	bool MapInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void SetGroupTimeAccumulate(FName GroupName, float InternalTime);// 0x34f458c
	float GetOrSetGroupTimeAccumulate_AnyThread(bool bIsLeader, FName GroupName, float InternalTime);// 0x34f4470
	float GetGroupTimeAccumulate(FName GroupName);// 0x34f43f0

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	Vector Velocity;//[Offset: 0x4, Size: 12]
	Vector movedir;//[Offset: 0x10, Size: 12]
	byte MovementMode;//[Offset: 0x1c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x1d, Size: 1]
	byte PoseType;//[Offset: 0x1e, Size: 1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 12]
	byte WeaponType;//[Offset: 0x38, Size: 1]
	byte WeaponHoldType;//[Offset: 0x39, Size: 1]
	byte WeaponState;//[Offset: 0x3a, Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	byte SightType;//[Offset: 0x3d, Size: 1]
	float RecoilKickADS;//[Offset: 0x40, Size: 4]
	float ForegripParam;//[Offset: 0x44, Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	Vector HurtDir;//[Offset: 0xe4, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	byte JumpType;//[Offset: 0xf2, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	float HandleFolderFactor;//[Offset: 0xf8, Size: 4]
	float CharacterYawRotateRate;//[Offset: 0xfc, Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bCarryBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	bool bParachuteNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 1]
	float CarryBlendTimeAccumulator;//[Offset: 0x104, Size: 4]
	float ParachuteNearDeathBlendTimeAccumulator;//[Offset: 0x108, Size: 4]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bAlwaysLandLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]

--------------------------------
Class: AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0xfc, Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x100, Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x104, Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x108, Size: 4]

--------------------------------
Class: AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	<int,int> CanBuildActorNums;//[Offset: 0xe4, Size: 60]
	float TotalCD;//[Offset: 0x120, Size: 4]
	float SoloCD;//[Offset: 0x124, Size: 4]

--------------------------------
Class: AIFeatureInfo
	float HP;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]
	float TakeDamageScale;//[Offset: 0x8, Size: 4]
	int DropID;//[Offset: 0xc, Size: 4]
	float[] HitRates;//[Offset: 0x10, Size: 12]
	<int,float> ThrownUsingProbability;//[Offset: 0x1c, Size: 60]
	<float,float> EnemyHpHitRateMap;//[Offset: 0x58, Size: 60]
	<float,float> EnemyHpDamageRateMap;//[Offset: 0x94, Size: 60]
	<float,float> ReviveEnemyHpDamageRateMap;//[Offset: 0xd0, Size: 60]
	bool bNeedNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bHasDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	Vector2D MissOnPurposeTimeRange;//[Offset: 0x110, Size: 8]
	Vector2D OutViewMissOnPurposeTimeRange;//[Offset: 0x118, Size: 8]
	float MissOnPurposeCD;//[Offset: 0x120, Size: 4]
	float MissOnPurposeResetTime;//[Offset: 0x124, Size: 4]
	float MissOnPurposeHitRate;//[Offset: 0x128, Size: 4]
	float NearDeathTargetStopFireTime;//[Offset: 0x12c, Size: 4]
	float NearDeathTargetFixedHitRate;//[Offset: 0x130, Size: 4]
	bool bDoMissOnPurposeWhenNearDeathToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	float NearDeathTargetFixedDamageRate;//[Offset: 0x138, Size: 4]

--------------------------------
Class: AIEquipSpawnItem
	enum itemType;//[Offset: 0x0, Size: 1]
	int ItemSpecificID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int MaxCount;//[Offset: 0xc, Size: 4]
	Vector2D ExtraConfigValue;//[Offset: 0x10, Size: 8]

--------------------------------
Class: AIActingItem
	float StartSeconds;//[Offset: 0x0, Size: 4]
	float EndSeconds;//[Offset: 0x4, Size: 4]
	float DeadPercent;//[Offset: 0x8, Size: 4]
	int PlayerNumScale;//[Offset: 0xc, Size: 4]
	bool IsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int[] WeaponIdList;//[Offset: 0x14, Size: 12]
	int FinalRestBotNum;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DeliveryCondition
	DeliveryConditionCheck* CheckCnd;//[Offset: 0x0, Size: 4]

--------------------------------
Class: DeliveryConditionCheck.Object
	STExtraBaseCharacter* TargetPawn;//[Offset: 0x1c, Size: 4]
	bool CheckDeliveryForBP(STExtraBaseCharacter* InTargerPawn);// 0x34d10b8
	bool CheckDelivery(STExtraBaseCharacter* InTargetPawn);// 0x35b1434

--------------------------------
Class: SpecialAIDeliveryNumContainer
	int TeammateNum;//[Offset: 0x0, Size: 4]
	SpecialAIDeliveryNum[] DeliverNumCfg;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpecialAIDeliveryNum
	int DeliveryNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: HotValueAttenuation
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HotValueScale
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float SpecialRatingDamageScale;//[Offset: 0x4, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x8, Size: 4]
	float SpecialFiringAccuracyRadius;//[Offset: 0xc, Size: 4]
	int AIFeedLimit;//[Offset: 0x10, Size: 4]
	float SectionRightValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 12]
	float RightRatingSection;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DeliveryItem
	int percent;//[Offset: 0x0, Size: 4]
	int DeliveryNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIAttackAnimalRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x308, Size: 4]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bFixMayBeInOcean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	FName AvoidObjectTag;//[Offset: 0x310, Size: 8]
	Vector2D PointInsidePolygon;//[Offset: 0x318, Size: 8]
	Vector2D[] PolygonPointArray;//[Offset: 0x320, Size: 12]
	bool IsInWater(Vector Position);// 0x35cf728
	Vector GetRandomPointInArea(Vector Origin, float Radius, bool bTry);// 0x35cf5fc

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x148, Size: 12]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 1]
	bool bUseDIYCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 1]
	int CustomBeginIndex;//[Offset: 0x158, Size: 4]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x160, Size: 12]
	float DestinyThreshold;//[Offset: 0x16c, Size: 4]
	int RoundNum;//[Offset: 0x170, Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 1]
	Vector2D LowProbCenter;//[Offset: 0x178, Size: 8]
	float LowProbCenterRadius;//[Offset: 0x180, Size: 4]
	float LowProbRatio;//[Offset: 0x184, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	class Actor* InnerCircleClass;//[Offset: 0x18c, Size: 4]
	float TimeForForbidMakePain;//[Offset: 0x190, Size: 4]
	Actor* InnerCircle;//[Offset: 0x194, Size: 4]
	Vector InnerCircleInfo;//[Offset: 0x198, Size: 12]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	Vector BlueCircle;//[Offset: 0x1cc, Size: 12]
	Vector WhiteCircle;//[Offset: 0x1d8, Size: 12]
	int CurrentIndex;//[Offset: 0x1e4, Size: 4]
	Actor* ContainActor;//[Offset: 0x1e8, Size: 4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	CirCleCfg[] TempCircleConfigs;//[Offset: 0x25c, Size: 12]
	delegate OnCircleBegin;//[Offset: 0x2ac, Size: 12]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x2b8, Size: 12]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x2c4, Size: 12]
	delegate OnCircleInfoChanged;//[Offset: 0x2d0, Size: 12]
	delegate OnWaveEnded;//[Offset: 0x2dc, Size: 12]
	delegate OnCircleEnded;//[Offset: 0x2e8, Size: 12]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x2f4, Size: 4]
	bool bPreCalculateFirstWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	delegate OnFinishedPreCalculateFirstWhiteCircle;//[Offset: 0x2fc, Size: 12]
	bool WhitCircleIsOutOfBlueCircle();// 0x35ce6c4
	void StartCircleFromBegin();// 0x35ce6b0
	void SetGMCicleTime(float cdTime, float LastTime);// 0x35ce5b4
	void SetContainActor(Actor* InContainActor);// 0x35ce53c
	void RetriveGetCircleInfo(out GetCircleInfo CurInfo);// 0x35ce474
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x35ce394
	void PreCalculateCircle(int CircleIndex);// 0x35ce31c
	void OverrideDestinyChanceByIndex(bool bOverride, float InChance, int CircleIndex);// 0x35ce210
	void OverrideDestinyChance(bool bOverride, float InChance);// 0x35ce148
	void MakePain(Actor* _actor, float _desireDamage);// 0x35ce08c
	void MakeDesiredCircle(Vector circleInfo, int CircleType);// 0x35cdfd4
	bool MakeCurrentWhiteCircle(int InCircleIndex);// 0x35bc330
	bool IsUseCustomWhiteCircle();// 0x35cdfac
	bool IsPositionInBlueCircle(out const Vector Position);// 0x35cdf20
	bool IsInWhiteCircle(out const Vector Location);// 0x35cde70
	bool IsInBlueCircle(Actor* _actor);// 0x35cddf0
	void InitCircleTimer();// 0x35cddd4
	bool HasDoubleCircleEnabled();// 0x35cddb8
	void GMBeginCircleWithCustomParam(int CurIndex, float PosX, float PosY, float PosZ, float DelayTime, float LastTime, float SafeZoneTime, float BlueCircleRadius);// 0x35cdb50
	void GMBeginCircle(int CurIndex, float PosX, float PosY, float PosZ, bool bUseSamePoint);// 0x35cd9b8
	Vector GetWhiteCircle(int InCircleIndex);// 0x35cd928
	Vector[] GetPlayerPositionByDestiny(int CircleIndex);// 0x35cd818
	Vector GetOverrideVictimPos(Actor* Victim);// 0x35cd788
	float GetNeedTotalTimeToCircleIndex(int CircleIndex);// 0x35cd708
	Vector GetInnerCircleInfo();// 0x35cd6e4
	Vector GetFirstWhiteCircle();// 0x35cd69c
	Vector GetCustomWhiteCircleConfigByIndex(int CircleIndex, int RandomIndex);// 0x35cd5c8
	Vector GetCustomBlueCircleConfigByIndex(int CircleIndex);// 0x35cd538
	Vector GetCurrentWhiteCircle();// 0x35cd514
	int GetCurrentCircleIndex();// 0x35cd4ec
	Vector GetCurrentBlueCircle();// 0x35cd4c8
	int GetCircleIndexByTime(float TimeSeconds);// 0x35cd448
	bool CalculateWhiteCircleByDestiny(int CircleIndex, bool bInDestiny, out Vector[] Positions);// 0x35cd2d8
	float BlueToWhiteLeftTime(bool bConsiderSafeZoneAppeartime);// 0x35cd250
	void ApplyCircleOffset(Vector InOffset);// 0x35cd1e0

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xc0, Size: 12]
	FString TimerName;//[Offset: 0xcc, Size: 12]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0, Size: 4]
	float DelayTime;//[Offset: 0x4, Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 4]
	bool bIsCircleWarningUseFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float[] BlueCirclePreWarning;//[Offset: 0x14, Size: 12]
	CircleWarningConfig[] BlueCirclePreWarningWithFilter;//[Offset: 0x20, Size: 12]
	float LastTime;//[Offset: 0x2c, Size: 4]
	float Pain;//[Offset: 0x30, Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector2D bluepoint;//[Offset: 0x38, Size: 8]
	float blueradius;//[Offset: 0x40, Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bUseCustomWhiteStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	Vector[] Whitepoints;//[Offset: 0x48, Size: 12]
	float whiteradius;//[Offset: 0x54, Size: 4]
	float Alpha;//[Offset: 0x58, Size: 4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float DestinyChance;//[Offset: 0x60, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x68, Size: 4]
	float ExtraRadius;//[Offset: 0x6c, Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float DamageMagnifierRange;//[Offset: 0x74, Size: 4]
	float DamageMagnifier;//[Offset: 0x78, Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x7c, Size: 4]
	Vector[] AvoidPoints;//[Offset: 0x80, Size: 12]
	float EdgeDistance;//[Offset: 0x8c, Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]

--------------------------------
Class: CircleWarningConfig
	float WarningTime;//[Offset: 0x0, Size: 4]
	enum WarningState;//[Offset: 0x4, Size: 1]

--------------------------------
Class: RegisterTimer
	int waveIndex;//[Offset: 0x0, Size: 4]
	float[] Times;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GetCircleInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	int CurrentCircleIndex;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	enum AirAttackStatus;//[Offset: 0x44, Size: 1]
	Vector AirAttackArea;//[Offset: 0x48, Size: 12]
	int AirAttackWave;//[Offset: 0x54, Size: 4]
	int BossCountDown;//[Offset: 0x58, Size: 4]
	Vector BossBornPos;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: AIActingBPAssit.Object
	bool IsSmokeGrenadeActive(Actor* pSmokeGrenade);// 0x49216cc
	bool IsGrenadeHasBeenThrowedOut(Actor* pGrenade);// 0x49216cc
	float GetRealTimeSeconds();// 0x34b9094

--------------------------------
Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0, Size: 4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x4, Size: 12]
	AIEquipSpawnItem[] AIMustPickUpItemList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
	int FirstAddBulletID;//[Offset: 0x100, Size: 4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0x104, Size: 12]
	delegate OnFirstBulletChangeDelegate;//[Offset: 0x110, Size: 12]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0x120, Size: 24]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x138, Size: 4]
	void SetFirstAddBullet(int BulletID);// 0x36e5eb0
	void SetBulletIDListInClip(out BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x36e5d08
	void SetBulletAttr(int ReloadBulletID, float Damage);// 0x36e5c4c
	void RemoveBulletIDListInClip(int RemoveNum, out BulletInClip CurBulletInClip, bool IsRevert);// 0x36e5aec
	void RefreshBulletIDListInClip(int Count, out BulletInClip CurBulletInClip);// 0x36e59dc
	void PreSetBulletIDListInClip(out BulletInClip NewBulletInClip, out BulletInClip CurBulletInClip);// 0x36e5878
	void OnRep_FirstAddBulletID();// 0x36e585c
	void OnFirstBulletChangeDelegate__DelegateSignature();// 0x49216cc
	bool HasMultiBullet();// 0x36e5834
	int GetShootBulletType();// 0x36e580c
	int GetNextCostBulletIDFromBackpack(BackpackComponent* InBackPack);// 0x36e578c
	int GetNextBulletID();// 0x36e5764
	BackpackComponent* GetBackpackComponent();// 0x36e573c
	float GetAdjustBulletMomentum();// 0x36e5714
	float GetAdjustBulletDamage();// 0x36e56ec
	int CostBulletFromBackpack(BackpackComponent* BackPack, int WantReloadNum, out BulletInWeapon[] CostBulletList);// 0x36e5590
	void AddBulletIDListInClip(BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x36e535c

--------------------------------
Class: SupportUpBullet
	int UpBulletID;//[Offset: 0x0, Size: 4]
	int DefaultPriority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x100, Size: 4]
	float BulletSpeed;//[Offset: 0x104, Size: 4]
	int CurBulletNum;//[Offset: 0x108, Size: 4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	int MaxBulletNumInClip;//[Offset: 0x110, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x118, Size: 24]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x134, Size: 12]
	class CameraShake* ShootCameraShake;//[Offset: 0x140, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x144, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x148, Size: 4]
	float CameraShakFalloff;//[Offset: 0x14c, Size: 4]
	AkAudioEvent* ShootSound;//[Offset: 0x150, Size: 4]
	float ReloadTime;//[Offset: 0x154, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x158, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x15c, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x160, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x164, Size: 4]
	BackpackComponent* OwnerBackPack;//[Offset: 0x168, Size: 4]
	void ShootGrenadeBullet(Vector StartLoc, Rotator StartRot, uint32 ShootID);// 0x3670084
	void SetUseGreanadeLaunch(bool bIsUse);// 0x3670004
	void RemoveBullet(int RemoveNum);// 0x366ff8c
	int ReloadGrenadeLaunch();// 0x366ff64
	void OnRep_UseGrenadeLaunchState();// 0x366ff50
	void OnRep_CurBulletNum();// 0x366ff3c
	void OnRep_CanUseGrenadeLaunch();// 0x366ff28
	void LaunchGrenadeBullet(Transform Trans, out const ShootTimeData ShootTimeData);// 0x366fdb0
	bool JudgeMustReload();// 0x366fd7c
	bool IsUseGreanadeLaunch();// 0x366fd54
	void HandleGrenadeLaunchEquip(bool bIsEquip);// 0x366fcd4
	BackpackComponent* GetBackpackComp();// 0x366fcac
	void DoGrenadeLaunchStartReload();// 0x366fc98
	bool CheckCanReload();// 0x366fc70

--------------------------------
Class: ShootTimeData
	Vector_NetQuantize ShootPos;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	float SkeletonLength;//[Offset: 0x34, Size: 4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 64]
	uint32 UserCmdSequence;//[Offset: 0x80, Size: 4]
	byte ShootTimeConDelta;//[Offset: 0x84, Size: 1]
	float ShootLevelTime;//[Offset: 0x88, Size: 4]
	Vector_NetQuantize GunTailPos;//[Offset: 0x8c, Size: 12]
	byte ShotFlags;//[Offset: 0x98, Size: 1]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: EnergyAccumulateShootComponent.NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float StartAccMinThreshold;//[Offset: 0x860, Size: 4]
	float ReachMaxAccTime;//[Offset: 0x864, Size: 4]
	int BulletNumPerShoot;//[Offset: 0x868, Size: 4]
	int BulletImpactDamageEnergy;//[Offset: 0x86c, Size: 4]
	float MaxOffsetShootDegree;//[Offset: 0x870, Size: 4]
	int BulletNumPerShootMaxEnergy;//[Offset: 0x874, Size: 4]
	int ComsumeBulletNumPerShootMaxEnergy;//[Offset: 0x878, Size: 4]
	int BulletImpactDamageMaxEnergy;//[Offset: 0x87c, Size: 4]
	class STExtraShootWeaponBulletBase* EnergyBulletTemplate;//[Offset: 0x880, Size: 4]
	class STExtraShootWeaponBulletBase* MaxEnergyBulletTemplate;//[Offset: 0x884, Size: 4]
	byte PreShootWeaponStateToChange;//[Offset: 0x888, Size: 1]
	bool bSpawnBulletOnSimulateClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 1]
	float CurAccEnergyPercent;//[Offset: 0x88c, Size: 4]
	Actor*[] NormalBulletCacheList;//[Offset: 0x8cc, Size: 12]
	Actor*[] EnergyBulletCacheList;//[Offset: 0x8d8, Size: 12]
	Actor*[] MaxEnergyBulletCacheList;//[Offset: 0x8e4, Size: 12]
	void RPC_Multicast_ClientShootEnergyAccBullets(const ShootMultiBulletsParam[] LaunchParams, float InCurAccEnergyPercent);// 0x362b340
	void RemoveBullet(STExtraShootWeaponBulletBase* Bullet);// 0x362b2c8
	bool IsMaxEnergy();// 0x362b290
	float GetEnergyPercentByShootId(int ShootID);// 0x362b210
	float GetAccEnergyPercentForAnim();// 0x362b1e0

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x750, Size: 4]
	bool bUseBulletCachePool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 1]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x758, Size: 56]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x790, Size: 12]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	float CurShootLockInterval;//[Offset: 0x7a4, Size: 4]
	float ShooterSpeedPrediction;//[Offset: 0x7a8, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x36fddc0
	void ShootNormalProjectileInner(Vector StartLoc, Rotator StartRot, int ShootID);// 0x36fdcb4
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x49216cc

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x744, Size: 12]
	void ShootBulletInner(Vector StartLoc, Rotator StartRot, int ShootID);// 0x383696c

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bVerifyImpactPointDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	float VerifyWeaponFireInfoTimeTorelate;//[Offset: 0x24, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x2c, Size: 4]
	bool bVerifyMuzzleBlockTail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bVerifyBulletPosReverseDirBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	float VerifyTailExtend;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ShootMultiBulletsParam
	Vector LaunchBulletPos;//[Offset: 0x0, Size: 12]
	Rotator LaunchBulletRot;//[Offset: 0xc, Size: 12]
	uint32 ShootID;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UpGasSpeed;//[Offset: 0x100, Size: 4]
	float DownGasSpeed;//[Offset: 0x104, Size: 4]
	float CostGasOneShoot;//[Offset: 0x108, Size: 4]
	float MaxGas;//[Offset: 0x10c, Size: 4]
	float GasAddDamageRate;//[Offset: 0x110, Size: 4]
	float MaxGasAngle;//[Offset: 0x114, Size: 4]
	float PostFillGasTime;//[Offset: 0x118, Size: 4]
	float GasUpdateInterval;//[Offset: 0x11c, Size: 4]
	int CurGas;//[Offset: 0x120, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x124, Size: 4]
	void OnRep_CurGas();// 0x34f4004
	void CostGassByShoot();// 0x3641d70
	void CheckNeedRep();// 0x3641d5c
	void AddFillGass(float AddFillGasTime);// 0x3641ce4

--------------------------------
Class: FireWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x12c, Size: 4]
	Pawn* WeaponOwner;//[Offset: 0x150, Size: 4]
	bool OpenPressBtnStay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0x100, Size: 12]
	delegate OnEndState;//[Offset: 0x10c, Size: 12]
	bool bCanEnterAnyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	byte FreshWeaponStateType;//[Offset: 0x11a, Size: 1]
	byte[] ConditionGateMap;//[Offset: 0x11c, Size: 12]
	byte SpesificTargetState;//[Offset: 0x128, Size: 1]
	bool bSyncSpesificStateToServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool TryChangeToSpesificTargetState();// 0x350b420

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x150, Size: 60]
	AkAudioEvent* GunAdsShootSound;//[Offset: 0x18c, Size: 4]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x190, Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x194, Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x198, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x19c, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x1a0, Size: 4]
	float CameraShakFalloff;//[Offset: 0x1a4, Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa, Size: 1]
	bool bFixedMuzzleFXScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ab, Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x1ac, Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x1b0, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x1bc, Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x1c0, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x1cc, Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x1d0, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x1dc, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x1ec, Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x1f0, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x1fc, Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x200, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x20c, Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x210, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x21c, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x22c, Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x230, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x23c, Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x240, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x24c, Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x250, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x25c, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x26c, Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x270, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x27c, Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x280, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x28c, Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x290, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x2a0, Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x2a4, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x2b0, Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x2b4, Size: 12]
	float ShootLightCD;//[Offset: 0x2c0, Size: 4]
	float LastShootLightTime;//[Offset: 0x2c4, Size: 4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x2c8, Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x2cc, Size: 4]
	float MaxFlyAngel;//[Offset: 0x2d0, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x2d4, Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x2d8, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2dc, Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x2e0, Size: 4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x2e4, Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x2f0, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x2fc, Size: 4]
	float LastMuzzleEffectTime;//[Offset: 0x300, Size: 4]
	float MuzzleEffectTimeInterval;//[Offset: 0x304, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x318, Size: 12]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	Rotator ShellDropRot;//[Offset: 0x328, Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x338, Size: 8]
	bool bSimulateBulletOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	float bSimulateBulletMaxDistance;//[Offset: 0x344, Size: 4]
	float SnipperStayDistance;//[Offset: 0x348, Size: 4]
	float bSimulateBulletRadius;//[Offset: 0x34c, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	void ReloadAttr(int WeaponId);// 0x37aeaa4
	void OnWeaponUnEquiped();// 0x37aea90
	void OnWeaponLoadAvatarAllMeshDone(AvatarDIYComponent* AvatarDIYComponent);// 0x37aea18
	void OnWeaponEuiped();// 0x37aea04
	void HandleWeaponAction(byte Action);// 0x37ae984
	STExtraShootWeapon* GetOwnerShootWeapon();// 0x37ae95c
	OBEffectBullet* GetOBEffectBullet();// 0x37ae934
	int GetAvailableOBEffectBulletNum();// 0x37ae90c
	void CheckOptimizeMuzzleFX();// 0x35cddd4
	void ChangeShellDropFx();// 0x37ae8f8
	void ActiveSoundByWeaponAction(byte Action);// 0x37ae880
	void ActiveShootLight();// 0x37ae86c
	void ActiveLocalShellDropFX();// 0x37ae858

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x100, Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0x13c, Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x140, Size: 4]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x144, Size: 4]
	AkAudioEvent* ScopeSound;//[Offset: 0x148, Size: 4]
	AkAudioEvent* ScopeOutSound;//[Offset: 0x14c, Size: 4]
	void HandleWeaponAction(byte Action);// 0x37ae984

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x308, Size: 4]
	bool bIgnoreEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x310, Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x320, Size: 4]
	float CurMovingTime;//[Offset: 0x34c, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x350, Size: 4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	int ConfigAutoAddAttId;//[Offset: 0x170, Size: 4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x1f0, Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0x1fc, Size: 4]
	RepAttributeModify DynamicModifierRep;//[Offset: 0x258, Size: 16]
	RepAttributeModify DynamicModifierRepOnlyOwner;//[Offset: 0x268, Size: 16]
	delegate OnAttrModified;//[Offset: 0x28c, Size: 12]
	delegate OnAttrRemoved;//[Offset: 0x298, Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x2a4, Size: 124]
	AttributeExpand[] AttributeExpands;//[Offset: 0x35c, Size: 12]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x368, Size: 60]
	enum ActorAttrType;//[Offset: 0x3a4, Size: 1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x46c, Size: 12]
	delegate OnNeedSetSpeedOverLimit;//[Offset: 0x540, Size: 12]
	AttrModifyRecordItem[] ExceptionAttrModifyRecords_DS;//[Offset: 0x60c, Size: 12]
	AttrModifyRecordItem[] ExceptionAttrModifyRecords_Client;//[Offset: 0x618, Size: 12]
	void StartTimerToSyncRecordAttrValue(float Time);// 0x3ba88e8
	void SetValueToAttributeSafety(FString AttrName, float Value, int ModifyRecordType);// 0x3ba87a4
	void SetOrignalValueToAttribute(FString AttrName, float Value);// 0x3ba86a4
	void SetAttrModifyStateValue(int Index, bool Value);// 0x3ba85e0
	void SetAttributeMaxValue(FString AttrName, float MaxValue);// 0x3ba84e0
	void ServerSendExceptionType(FString AttrName, int ExceptionType);// 0x3ba83a4
	void ServerRequestRecordAttrValue(FString AttrName);// 0x3ba82b0
	void ResponeAttrValue(FString AttrName, float FinalValue);// 0x3ba8174
	void RequestAttrValue(FString AttrName);// 0x3ba8080
	bool RemoveModifyItemFromCache(uint32 ModifyUID);// 0x3ba8000
	void RemoveAttrListener(FString AttrName, SluaBPVar Listener);// 0x3ba7eac
	void RemoveAllDynamicModifier(bool bForce);// 0x3ba7e2c
	bool RegisterModifyAbleAttr(out AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x3ba7ca0
	void RegistAttrModifyRecordList(FString AttrName, int RecordLen);// 0x3ba7ba0
	void PushAttrModifyRecordItem(FString AttrName, float PreValue, float CurValue, int ModifyRecordType, FString ModifyDesc);// 0x3ba7990
	void OnRep_ModSimulateSyncList();// 0x3ba797c
	void OnRep_ExceptionAttrModifyRecords();// 0x34f4004
	void OnRep_DynamicModifier();// 0x3ba7968
	void OnRep_AttrModifyStateList();// 0x3ba7954
	void OnNeedSetSpeedOverLimit__DelegateSignature();// 0x49216cc
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x49216cc
	void LuaSetValueToAttributeSafety(FString AttrName, float Value);// 0x3ba7854
	bool IsAttrModifyStateValidIndex(int Index);// 0x3ba77d4
	bool HasDynamicModifier(FString AttrModifyId);// 0x3ba7710
	void HandleExceptionAttrModify(FString AttrName, int ExceptionType);// 0x3ba7610
	AttrModifyModDataSubsystem* GetSubsystem();// 0x3ba75e8
	FString GetMaxAttrName(FString AttrName);// 0x3ba74a4
	bool GetAttrModifyStateValue(int Index);// 0x3ba7424
	int GetAttrModifyStateNum();// 0x3ba7408
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x3ba712c
	float GetAttributeValue(FString AttrName);// 0x3ba7064
	float GetAttributeOrignalValue(FString AttrName);// 0x3ba6f9c
	bool EnableAttrModifierByIndex(int ModifyConfigIndex);// 0x3ba6f1c
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x3ba6dbc
	bool DisableAttrModifierByIndex(int ModifyConfigIndex);// 0x3ba6d3c
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x3ba6bdc
	bool DisableAllAttrModifier(bool bForce);// 0x3ba6b54
	void ConditionSyncRecordAttrValue();// 0x3ba6b40
	void ClientSyncRecordAttrValue(const AttrDesc[] AttrDescs);// 0x3ba69e4
	void ClientSendRecordData(const AttrModifyRecordItem RecordItem, int ExceptionType);// 0x3ba6874
	void ClearAllAttrModify();// 0x3ba6860
	void AddValueToAttribute(FString AttrName, float Value);// 0x3ba6760
	uint32 AddModifyItemAndCache(FString AttrName, enum CModifyType, float CValue, bool bEnable, Object* Causer, bool oldModify);// 0x3ba6530
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem, bool RepOnlyOwner);// 0x3ba638c
	uint32 AddBModifyAndCacheWithCParam(FString AttrName, enum CModifyType, float CValue);// 0x3ba6240
	uint32 AddBModifyAndCache(FString AttrName, enum ModifyType, float Value);// 0x3ba60f4
	void AddAttrListener(FString AttrName, SluaBPVar Listener);// 0x3ba5fa0

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 12]
	FString AttrModifyItemName;//[Offset: 0xc, Size: 12]
	FString AttrName;//[Offset: 0x18, Size: 12]
	int AttrId;//[Offset: 0x24, Size: 4]
	int CompareId;//[Offset: 0x28, Size: 4]
	enum ModifierOp;//[Offset: 0x2c, Size: 1]
	float ModifierValue;//[Offset: 0x30, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	float FinalAddValue;//[Offset: 0x8, Size: 4]
	uint32 CModifyUid;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RepAttributeModify

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 60]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c, Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AttrDynamicModifyTarget
	AttrDynamicModifyItem[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AttrDynamicModifyItem
	Object* Causer;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	FString AttrName;//[Offset: 0x4, Size: 12]
	FString LimitAttrName;//[Offset: 0x10, Size: 12]
	FString MaxAttrName;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0, Size: 12]
	FString AttrDesc;//[Offset: 0xc, Size: 12]
	int RelateTypeId;//[Offset: 0x18, Size: 4]
	FString RelateGroup;//[Offset: 0x1c, Size: 12]
	float Value;//[Offset: 0x28, Size: 4]
	int nValue;//[Offset: 0x2c, Size: 4]
	byte bValue;//[Offset: 0x30, Size: 1]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ModAttrSimulateSyncItem
	int AttrId;//[Offset: 0x0, Size: 4]
	float FinalValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttrModifyRecordItem
	AttrDesc AttrDesc;//[Offset: 0x0, Size: 20]
	AttrModifyRecordDetails[] DetailsArray;//[Offset: 0x14, Size: 12]

--------------------------------
Class: AttrDesc
	FString AttrName;//[Offset: 0x0, Size: 12]
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float CurValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AttrModifyRecordDetails
	FString ModifyDesc;//[Offset: 0x0, Size: 12]
	int NextIndex;//[Offset: 0xc, Size: 4]
	AttrModifyRecordDetail[] Data;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AttrModifyRecordDetail
	float PreModifyValue;//[Offset: 0x0, Size: 4]
	float AfterModifyValue;//[Offset: 0x4, Size: 4]
	float WorldTime;//[Offset: 0x8, Size: 4]
	int ModifyType;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SluaBPVar

--------------------------------
Class: AttrRegisterItem
	int AttrId;//[Offset: 0x0, Size: 4]
	FString AttrName;//[Offset: 0x4, Size: 12]
	enum AttrVariableType;//[Offset: 0x10, Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 12]
	Actor* AffectedActor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AttrModifyModDataSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: WeaponAttrModifyConfig
	int ID;//[Offset: 0x0, Size: 4]
	FString ModifyConfigID;//[Offset: 0x4, Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 8]
	float ShootRateCheckInterval;//[Offset: 0x120, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x128, Size: 4]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x12c, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x170, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x174, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x178, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x17c, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x180, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x184, Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x188, Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x18c, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x194, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x198, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x19c, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x1a4, Size: 4]
	float TolerateFlyTime;//[Offset: 0x1a8, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1ac, Size: 4]
	float DeCon6SpanTime;//[Offset: 0x26c, Size: 4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x3aa207c

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xad, Size: 1]
	float DamageImpulse;//[Offset: 0xc8, Size: 4]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemId;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x8, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0xc, Size: 12]
	HitResult HitInfo;//[Offset: 0x18, Size: 144]

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 12]
	int AutoAimSpeed;//[Offset: 0x64, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x68, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x70, Size: 4]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector_NetQuantize10 ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize10 ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	Actor* Actor;//[Offset: 0x34, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x3c, Size: 8]
	byte HitBodyType;//[Offset: 0x44, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x45, Size: 1]

--------------------------------
Class: ReplayStartFireInfo
	StartFireInfo ClientStartFire;//[Offset: 0x0, Size: 24]
	enum DsLastRequestFireRet;//[Offset: 0x18, Size: 1]
	uint32 DsNextFireMiniShootID;//[Offset: 0x1c, Size: 4]
	uint32 DsCurClipID;//[Offset: 0x20, Size: 4]
	int DsCurClipNum;//[Offset: 0x24, Size: 4]
	int ClientRequestClipNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	byte ShootMode;//[Offset: 0xc, Size: 1]
	byte ShootType;//[Offset: 0xd, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	int StartFireID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BulletHitInfoUploadDataInReplay
	enum VertifyRes;//[Offset: 0x0, Size: 1]
	enum VertifySubType;//[Offset: 0x1, Size: 1]
	BulletHitInfoUploadData UploadData;//[Offset: 0x8, Size: 216]
	CharacterHistoryData VictimHistoryData;//[Offset: 0xe0, Size: 160]
	ShootTimeData ShootTimeData;//[Offset: 0x180, Size: 160]
	uint32 CurrentUserCmdSequence;//[Offset: 0x220, Size: 4]
	uint32 UniqueId;//[Offset: 0x224, Size: 4]
	enum[] StatData;//[Offset: 0x228, Size: 12]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	Rotator VehicleRotation;//[Offset: 0x60, Size: 12]
	Vector VehicleRotVelocity;//[Offset: 0x6c, Size: 12]
	bool VehicleIsCorrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	Vector Velocity;//[Offset: 0x7c, Size: 12]
	uint32 UserCmdSequenceNew;//[Offset: 0x88, Size: 4]
	uint32 UserCmdSequenceOld;//[Offset: 0x8c, Size: 4]
	uint32 LastAckBadMoveSequence;//[Offset: 0x90, Size: 4]
	float MoveServerTimeNew;//[Offset: 0x94, Size: 4]
	float MoveServerTimeOld;//[Offset: 0x98, Size: 4]
	byte PoseStateNew;//[Offset: 0x9c, Size: 1]
	byte PoseStateOld;//[Offset: 0x9d, Size: 1]
	enum MoveBaseState;//[Offset: 0x9e, Size: 1]

--------------------------------
Class: NextFireMinShootDataInReplay
	uint32 NextFireMinShootID;//[Offset: 0x0, Size: 4]
	BulletHitInfoUploadData UploadData;//[Offset: 0x8, Size: 216]

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 12]
	BulletHitInfoUploadBinaray[] HitBinarayArray;//[Offset: 0xc, Size: 12]
	BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray;//[Offset: 0x18, Size: 12]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0x24, Size: 12]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x30, Size: 12]
	byte[] CopmpressBinarayData;//[Offset: 0x3c, Size: 12]
	uint32[] CopmpressBinaraySectionLen;//[Offset: 0x48, Size: 12]
	int ShootTimes;//[Offset: 0x54, Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x58, Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0x64, Size: 4]
	int NetworkStatus;//[Offset: 0x68, Size: 4]
	int Sequence;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: BulletHitInfoUploadBinaray
	byte[] Data;//[Offset: 0x0, Size: 12]
	uint16 CompensationTime;//[Offset: 0xc, Size: 2]
	Actor* Actor;//[Offset: 0x10, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x18, Size: 8]

--------------------------------
Class: BulletHitInfoWithoutDamage
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	uint32 ShootID;//[Offset: 0x34, Size: 4]
	Actor* Actor;//[Offset: 0x38, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x40, Size: 8]
	byte HitBodyType;//[Offset: 0x48, Size: 1]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x4a, Size: 1]

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0, Size: 12]
	Vector TargetOffset;//[Offset: 0xc, Size: 12]
	float SpringArmLength;//[Offset: 0x18, Size: 4]
	float AdditiveOffsetFov;//[Offset: 0x1c, Size: 4]
	float FixedFov;//[Offset: 0x20, Size: 4]
	float BeginInterpSpeed;//[Offset: 0x24, Size: 4]
	float EndInterpSpeed;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x308, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x314, Size: 12]
	byte ThrowMode;//[Offset: 0x320, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x324, Size: 4]
	float MaxSimTime;//[Offset: 0x328, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x32c, Size: 40]
	float GrenadeRadius;//[Offset: 0x354, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x358, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x364, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x370, Size: 12]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 12]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector HitActorLocation;//[Offset: 0x10, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponOverHeatingComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float MaxTemperature;//[Offset: 0x100, Size: 4]
	float MinShootInterval;//[Offset: 0x104, Size: 4]
	float CoolDownSpeed;//[Offset: 0x108, Size: 4]
	float HeatingSpeedPerBullet;//[Offset: 0x10c, Size: 4]
	float CoolDownDelay;//[Offset: 0x110, Size: 4]
	float CurrentTemperature;//[Offset: 0x114, Size: 4]
	CurveFloat* ShootIntervalScaleCurve;//[Offset: 0x118, Size: 4]
	FName MuzzleEffectParam;//[Offset: 0x120, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128, Size: 4]
	void HandleWeaponOnShoot();// 0x3ab639c

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0x100, Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0x104, Size: 4]
	<byte,WeaponStateBase*> StateMap;//[Offset: 0x108, Size: 60]
	WeaponStateBase* GetWeaponState(byte Type);// 0x3abdcc8
	WeaponStateBase* GetCurrentState();// 0x3abdca0
	byte GetCurrentFreshWeaponStateType();// 0x3abdc78

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x3ac, Size: 12]
	void PreChangeGrenadeAvatar(int InItemID);// 0x366f810
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x35d7b8c
	FString GetItemAvatarHandlePath(int ItemId);// 0x49216cc
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x49216cc
	int GetDefaultAvatarID(int InAvatarID);// 0x49216cc
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x366f6d4

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x228, Size: 12]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x238, Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x254, Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x258, Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x314, Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x318, Size: 4]
	int itemType;//[Offset: 0x31c, Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x320, Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x348, Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x370, Size: 60]
	void VehicleEquipedDefaultAvatar__DelegateSignature(int AvatarID, int DefaultAvatarID);// 0x49216cc
	void SyncChangeItemAvatar(int InItemID);// 0x35f7c98
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x3692b48
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x3692a40
	void ResetItemAvatar();// 0x3692a2c
	void RequestDownloadItemInBattle(int InItemID);// 0x350b540
	void ReportAvatarInfo(int InItemID);// 0x36929b4
	void PreChangeItemAvatar(int InItemID);// 0x35f7c04
	void OnRep_ItemAvatarChanged();// 0x3692998
	bool IsValidAvatar();// 0x3692970
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x3692940
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x35f1688
	MeshComponent* GetItemBodyMesh();// 0x3692924
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance, MaterialInterface* MatBase);// 0x35858c0
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x350b228
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x35f7a8c
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x3692858
	void AsyncChangeItemAvatar(int InItemID);// 0x35f79e4
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x35f7810
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x35f7710
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x366f6d4

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0xf4, Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0x100, Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0x128, Size: 40]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x150, Size: 40]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x352ded0
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x352dab0
	bool HandleDrop(int InCount, enum Reason);// 0x352d4cc
	bool HandleDisuse(enum Reason);// 0x3515f60
	BackpackComponent* GetBackpackComponent();// 0x3530d08
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x3530c44

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]
	MaterialInterface* LobbyMatInstance;//[Offset: 0x30, Size: 40]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<enum,FName> SlotTypeToSocket;//[Offset: 0x718, Size: 60]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x754, Size: 60]
	int gender;//[Offset: 0x790, Size: 4]
	delegate OnAvatarEquipped;//[Offset: 0x794, Size: 12]
	delegate OnAvatarVisibleChanged;//[Offset: 0x7a0, Size: 12]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0x7ac, Size: 120]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0x824, Size: 60]
	int HeadAvatarID;//[Offset: 0x870, Size: 4]
	int PreHeadAvatarID;//[Offset: 0x874, Size: 4]
	SoftObjectPath HeadMeshSoftPath;//[Offset: 0x878, Size: 24]
	class AnimInstance* HeadAniminstanceClass;//[Offset: 0x890, Size: 4]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x895, Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a5, Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0x8a8, Size: 60]
	enum[] OpenResetHideBone;//[Offset: 0x8e4, Size: 12]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x8f0, Size: 60]
	int[] ignoreSlots;//[Offset: 0x92c, Size: 12]
	int WholeBodyModelID;//[Offset: 0x938, Size: 4]
	int CurrentClothID;//[Offset: 0x93c, Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0x940, Size: 12]
	<enum,int> AvatarRectifyData;//[Offset: 0x94c, Size: 60]
	delegate OnAvatarRectifyDataChange;//[Offset: 0x988, Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x998, Size: 60]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x9d4, Size: 60]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0xa10, Size: 60]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0xa4c, Size: 60]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0xa88, Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0xac4, Size: 12]
	delegate OnClothParticleEquipped;//[Offset: 0xad0, Size: 12]
	delegate OnClothPlaneCutChanged;//[Offset: 0xadc, Size: 12]
	delegate OnEnableEffectTickChanged;//[Offset: 0xae8, Size: 12]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0xaf4, Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0xb30, Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xb34, Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xb38, Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xb3c, Size: 12]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xb48, Size: 12]
	float ConfigBoundScale;//[Offset: 0xb54, Size: 4]
	int EnableEquipAvatarPendant;//[Offset: 0xb58, Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5d, Size: 1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xb60, Size: 60]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xba0, Size: 56]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xbd8, Size: 40]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 1]
	bool bEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc03, Size: 1]
	bool HasVehicleAjustHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04, Size: 1]
	int BodySlotStateChangeCount;//[Offset: 0xc08, Size: 4]
	float CutPlaneW;//[Offset: 0xc0c, Size: 4]
	bool EnableClothPlaneCut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 1]
	SkinnedMeshComponent* ClothSkinMeshTobeCut;//[Offset: 0xc30, Size: 4]
	bool bEnableAvatarReAttachFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc34, Size: 1]
	bool bVisibleChangeRefreshAvatarReAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc35, Size: 1]
	enum[] AlwaysResetReAttachSlotList;//[Offset: 0xc38, Size: 12]
	<enum,AvatarReAttachConfigCollection> PendingAvatarReAttachCollectionMap;//[Offset: 0xc44, Size: 60]
	<enum,ReAttachConfig> FinalWorkingAvatarReAttachMap;//[Offset: 0xc80, Size: 60]
	int BackAircraftType;//[Offset: 0xcbc, Size: 4]
	int BackSkateType;//[Offset: 0xcc0, Size: 4]
	bool EnableEffectTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc4, Size: 1]
	int TypeToInt(enum InSlotType);// 0x35a9cdc
	void TemporarySetHidedBonesVisibility(bool Visible);// 0x35a9c5c
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x35a9b20
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x35a9a4c
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x35a9978
	bool SetSkinMaterial(int SlotID, out const ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x35a9858
	void SetPlane();// 0x35a9844
	void SetNormalMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x35a96cc
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x35a9554
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x35a94dc
	void SetForceMeshLodWithVehicle(const int InSlot, const bool bInEnterVehicle);// 0x35a9418
	void SetClothParticleVisibility(int SlotID, bool Visible, bool IsForCE);// 0x35a9304
	void SetCastPhotonShadow(bool Enable);// 0x35a9284
	bool SetBodySuitsMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, BackpackAvatarHandle* InAvatarHandle);// 0x35a9148
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x35a9034
	void SetAvatarGender(int AGender);// 0x35a6cb4
	void SetAvatarForceLOD(enum SlotType, int LODLevel);// 0x35a8f78
	void SetAllMeshCharMode(bool bMainChar);// 0x35a8ef8
	void ResetBackpackPendant(int InSlotID, BackpackAvatarHandle* AvatarHandle);// 0x35a8e3c
	void ResetAnimDynamicsByMeshComp(MeshComponent* MeshComp);// 0x35a8dbc
	void ResetAllAnimDynamics();// 0x35a8da0
	void RequestSyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x35a8cd4
	void ReportAvatarInfo(out <int,int> AvatarInfo);// 0x35a8bc8
	void RemoveForceReplaceOnVehicle(int SlotID);// 0x35a8b50
	void RemoveClothParticleEffect(int SlotID);// 0x35a8ad8
	void RemoveAvatarReAttach(const enum InTriggerSlot);// 0x35a8a60
	void RemoveAttachMesh(int SlotID);// 0x35a89e8
	void RefreshAvatarReAttachForAssociatedSlot(const enum InScaledSlot, const enum InAssociatedSlot);// 0x35a892c
	void RefreshAvatarReAttach();// 0x35a8918
	void ProcessUnDownloadHead();// 0x35a88fc
	void ProcessClothSuits();// 0x35a88e0
	void ProcessChangedVehicleSeat();// 0x49216cc
	void ProcessAvatarRectify();// 0x35a88c4
	void PreProcessBeforeLoadMesh();// 0x35a88a8
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x49216cc
	void PostProcessAfterLoadMesh();// 0x35a888c
	void OnSyncLoadBattleHandlesDone(out const BattleItemHandleBase*[] AvatarHandles);// 0x35a87c0
	void OnRespawned();// 0x34b6cb4
	void OnRep_VehicleForceReplace();// 0x350de88
	void OnRep_EnableClothPlaneCut();// 0x35a87ac
	void OnRep_BodySlotStateChangedInternal();// 0x35a8798
	void OnRep_BodySlotStateChanged();// 0x35a877c
	void OnRecycled();// 0x350b450
	void OnPlayerLeaveVehicle(STExtraVehicleBase* InVehicle);// 0x35a8704
	void OnPlayerLeaveState(enum State);// 0x35a868c
	void OnPlayerEnterVehicle(STExtraVehicleBase* InVehicle);// 0x35a8614
	void OnPlayerEnterState(enum State);// 0x35a859c
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x35a84c8
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x35a83f4
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x35a8344
	void OnEnterOrLeaveVehicle();// 0x49216cc
	void OnEnableEffectTickChanged__DelegateSignature(bool IsEnable);// 0x49216cc
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x35a8224
	void OnClothPlaneCutChanged__DelegateSignature(bool IsEnable);// 0x49216cc
	void OnClothParticleEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x49216cc
	void OnAvatarVisibleChanged__DelegateSignature(enum SlotType, bool bIsVisibile);// 0x49216cc
	void OnAvatarRectifyDataChange__DelegateSignature();// 0x49216cc
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x35a80b0
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x35a7fd4
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x35a7e9c
	void OnAvatarEquippedCall(enum SlotType, bool bEquipped, int ItemId);// 0x35a7d90
	void OnAvatarEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x49216cc
	void OnAvatarAttachEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x49216cc
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x35a7d10
	void OnAsyncLoadBattleHandlesDone_Download(int InAsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x35a7b60
	void OnAsyncLoadBattleHandlesDone(int InBodySlotStateChangeCount, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x35a79b0
	bool NeedVehicleForceReplate(int ItemId);// 0x49216cc
	bool NeedHideParachuteEquipemtInFreeState();// 0x35a7980
	void ModifySlotFakeID(enum Slot, int FakeID);// 0x35a78c4
	void ModifyLogicSlotDescID(enum Slot, int ItemId);// 0x35a7808
	void MarkAvatarBoneRetargetLODFeature(const enum InAvatarSlot, const bool InIsUseEnable);// 0x35a773c
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x35a7614
	bool IsWearingAvatarNeedParachuteWind();// 0x49216cc
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x35a74ec
	bool IsTeammate();// 0x350b420
	bool IsSelf();// 0x350b3c8
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x35a73f0
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x35a72f4
	bool IsPendantExistAndBackpackHided(int SlotType);// 0x35a7274
	bool IsNeedModifyVehicle(int TemplateID);// 0x35a71f4
	bool IsMeshComponentVisible(enum SlotType);// 0x35a7174
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x35a70a8
	bool IsItemClothSlotBlueprintExist(out const ItemDefineID InItemID, bool bWithLog);// 0x35a6fc4
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x35a6e94
	bool IsInVehicleTemplateConfig(int VehicleID, int TemplateID);// 0x35a6dd0
	bool IsCutPlaneOnVehicleOpen();// 0x49216cc
	enum IntToType(int InSlotID);// 0x35a6d5c
	void InitMasterComponent();// 0x35a6d48
	void Initialize();// 0x35a6d2c
	void InitialAvatarParam(int AGender);// 0x35a6cb4
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x35a6c3c
	void InitDefaultAvatarByResID(int AGender, int Head, int hair);// 0x35a6b3c
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x35a6a58
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh);// 0x49216cc
	bool HaveSubTypeMesh(enum SlotType, int SubType);// 0x35a6994
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x35a68fc
	bool HandleUnEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x35a6820
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x35a67a8
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x35a6730
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x35a6654
	bool HandleEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x35a6578
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x35a64c4
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x35a63b4
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x35a6300
	int GetRepalceIDOnVehicle(int OriginID);// 0x49216cc
	enum GetPendantSlotType();// 0x35a62d0
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x35a6248
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x35a6184
	MaterialInstance* GetMaterial(out const MeshPackage MeshPack);// 0x35a60d0
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x35a6050
	int GetEquipmentSkinItemID(int InItemID);// 0x35a5fc8
	bool GetEquimentMeshBySlot(int Slot, out MeshData MeshPack);// 0x35a5ed0
	int[] GetDefaultBodyItemIDList();// 0x35a5e10
	FName GetClothMaterialSkinName(enum SlotType, bool bSuit);// 0x35a5d3c
	FName GetClothMaterialColorName(enum SlotType, bool bSuit);// 0x35a5c68
	MaterialInterface* GetCharSkinMaterial(MeshComponent* MasterMesh, enum SlotType, BackpackAvatarHandle* InAvatarHandle);// 0x35a5b60
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle);// 0x49216cc
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x35a5a58
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x35a5994
	int GetAvatarIDBySlotID(int SlotID);// 0x35a5914
	enum GetAttachPartSlotType();// 0x35a58e4
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x35a585c
	bool GetAttachMeshResRef(out const AvatarAttachMeshData MeshPack, out SoftObjectPath OutAssetRef);// 0x35a56d8
	void GetAllEquipItemsWithoutFake(out int[] EquipItems);// 0x35a560c
	void GetAllEquipItems(out int[] EquipItems);// 0x35a5540
	void GenerateVehicleTemplateConfig();// 0x49216cc
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x49216cc
	void ForceReplaceAvatarOnVehicle(int SlotID);// 0x35a54c8
	void FillVehicleTemplateConfig(int TemplateID, int VehicleID);// 0x35a540c
	bool EnableEquipAvatarPendantFeature();// 0x35a53e4
	bool DeleteAvatarMeshData(int InSlotID, out const ItemDefineID InOldItemDefineID, bool bDestroyComp);// 0x35a52b4
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x49216cc
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x49216cc
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x35a51d0
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x35a5138
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x35a50b0
	bool CheckIsHiddenByOther(int InItemResID);// 0x35a5030
	bool CheckClothSuitsAllSlotIsExist(out const ItemDefineID InItemID, out const int[] AllSlotItemIDs);// 0x35a4f00
	void CheckAvatarReAttachForSlotAssociation(const enum InSlot);// 0x35a4e88
	void CheckAvatarReAttachForSlot(const enum InScaledSlot);// 0x35a4e10
	void CheckAvatarReAttachCancelForSlotAssociation(const enum InScaledSlot);// 0x35a4d98
	void CancelAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x35a4ba0
	void BPOnRemoveAvatarReAttach();// 0x49216cc
	void BPOnDeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x49216cc
	bool BPIsNeedModifyVehicle(int VehicleID, int TemplateID, int SeatIdx);// 0x49216cc
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x35a4ae4
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x35a4a28
	void ApplyMeshCompCollision(int SlotID);// 0x35a49b0
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x35a48e4
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x35a4828
	void ApplyAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x35a4630
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x35a44dc
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x35a4420
	void ApplyAnimListOverride(ItemHandleBase* InItemHandle, bool IsPutOn);// 0x35a4354
	void AddAvatarReAttach(const enum InTriggerSlot, out const AvatarReAttachConfigCollection InAvatarReAttachCollection);// 0x35a4264
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x35a41e4
	void ActivateLimitEffect(FName ComponentTag, bool bActivate);// 0x35a4110

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<int,FName> SlotToSocket;//[Offset: 0x430, Size: 60]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x46c, Size: 60]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x4a8, Size: 60]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x4e4, Size: 60]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x520, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x52c, Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x538, Size: 12]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x544, Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool IsLoadMeshProcessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x554, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x5fc, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x600, Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x61c, Size: 12]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x628, Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x664, Size: 4]
	delegate OnRegisterEntityTick;//[Offset: 0x668, Size: 12]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	enum[] LoadWithBatchBodyFilterTypes;//[Offset: 0x678, Size: 12]
	int[] LoadWithBatchBodyFilterTemplateIDs;//[Offset: 0x684, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x35a9b20
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x35a9a4c
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x35a9978
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x35a9554
	void SetLoadMeshWithBatchBody(bool bFlag);// 0x37cda70
	void ResetSlotSyncData();// 0x37cda54
	void RequestSyncLoadMeshesWithPath(out const SoftObjectPath[] AssetPathList);// 0x37cd920
	void RequestSyncLoadMeshes();// 0x37cd90c
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x350b46c
	void RequestAsyncLoadMeshes();// 0x37cd8f8
	void RequestAsyncLoadHandles();// 0x37cd8e4
	void RemoveEquippedAvatar(int InSlotID);// 0x37cd864
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x37cd7dc
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x37cd6cc
	void ReloadAllLogicAvatar(enum ReloadType);// 0x37cd64c
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x37cd5cc
	void RegisterEntityTick(AvatarEntity* Entity, bool isRegister);// 0x37cd508
	bool PutOnEquipmentByResID(int resID);// 0x37cd480
	bool PutOffEquimentByResID(int resID);// 0x37cd3f8
	void PreProcessBeforeLoadMesh();// 0x35a88a8
	void PostProcessAfterLoadMesh();// 0x35a888c
	void OnSyncLoadMeshesDone();// 0x37cd3e4
	void OnRespawned();// 0x34b6cb4
	void OnRep_BodySlotStateChanged();// 0x35a877c
	void OnRegisterEntityTick__DelegateSignature();// 0x49216cc
	void OnRecycled();// 0x350b450
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x35a83f4
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x35a8344
	void OnAvatarMeshMaterialApplyed__DelegateSignature(MeshComponent* MeshComponent);// 0x49216cc
	void OnAvatarMeshEquippedEventBP(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x37cd270
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x35a80b0
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemId);// 0x49216cc
	void OnAvatarBeginLoadMesh__DelegateSignature();// 0x49216cc
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x49216cc
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x35a7d10
	void OnAsyncLoadHandlesDone_Download(out const ItemHandleBase*[] AvatarHandles);// 0x37cd19c
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x37cd0c8
	void OnAllAvatarHandleLoadedDoneSync();// 0x37cd0b4
	void OnAllAvatarHandleLoadedDone();// 0x37cd0a0
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x37c9f28
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x35a7614
	bool IsValidStateToRequestDownload();// 0x37cd078
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x37ccfac
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x35a70a8
	bool IsItemHasEquipped(int InItemID);// 0x37c94b4
	bool IsForceRecreateMeshBoneRetargetAdaptSlot(const enum InTestSlot);// 0x37ccf24
	bool IsEnableItemDownload(int ItemId);// 0x49216cc
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x37c937c
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x37cce9c
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x37cce14
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x37ccd50
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x35a63b4
	enum GetMeshTypeBySlot(int InSlotID);// 0x37cccd0
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x37ccc50
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x35a6248
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x37ccbe0
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x37ccad0
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x37cc9c0
	AvatarEntityFactory* GetEntityFactory();// 0x37cc990
	SoftObjectPath GetBatchDefaultBodyPath();// 0x49216cc
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x37cc8ac
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x37cc7a4
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x35a585c
	MeshComponent*[] GetAllMeshComponents(bool CheckVisible);// 0x37cc694
	int GetAdvanceVehicleInsideSlotID();// 0x37cc664
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x49216cc
	bool DeleteAvatarMeshData(int InSlotID, out const ItemDefineID InOldItemDefineID, bool bDestroyComp);// 0x35a52b4
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x35a51d0
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x37cc5a0
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x37cc3b8
	bool CanLoadItemWithBatchBody(out const ItemDefineID InItemID);// 0x37cc320
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x37cc24c
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs, out ItemDefineID[] OutRequestItemList);// 0x37cc0e0
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x37cbfd0
	void BPCreateAvatarCustomHandle(int SlotID, int ItemId, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x49216cc
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x350afb0

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x228, Size: 60]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x264, Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x2a0, Size: 24]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x2b8, Size: 12]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x2c4, Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x2d0, Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x2dc, Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x2e8, Size: 12]
	int itemType;//[Offset: 0x2f4, Size: 4]
	enum CustomType;//[Offset: 0x2f8, Size: 1]
	<int,ForceEquipSlotInfo> ForceEquipItemLogic;//[Offset: 0x2fc, Size: 60]
	bool VehicleForceReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 1]
	int SubSlotStartNum;//[Offset: 0x344, Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x348, Size: 4]
	<int,enum> SlotHideStateMap;//[Offset: 0x34c, Size: 60]
	<int,TempAvatarSlotDesc> TempRunningSlotDesc;//[Offset: 0x388, Size: 60]
	int[] AlawysHideResetOperation;//[Offset: 0x40c, Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x41c, Size: 12]
	void SetForceHideState(int InSlotID, enum InForceHideState);// 0x37ca230
	void ServerProcessData();// 0x350d890
	void RemoveTempRunningSlotDesc(int SlotID, int Index);// 0x37ca174
	void RemoveForceEquipItem(int SlotID);// 0x37ca0fc
	void RemoveAllEquippedItem();// 0x37ca0e8
	void OnRespawned();// 0x34b6cb4
	void OnRep_VehicleForceReplace();// 0x350de88
	void OnRep_BodySlotStateChanged();// 0x35a877c
	void OnRecycled();// 0x350b450
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x35a84c8
	void OnHandleUnequipSlot(int InSlotID);// 0x37ca070
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x37c9fc8
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x35a8344
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x35a8224
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x49216cc
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x35a7fd4
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x35a7e9c
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x49216cc
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x49216cc
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x49216cc
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x37c9f28
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x37c9e18
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x37c9d08
	bool ModifyViewDataByForceHide(int InSlotID, bool bHide);// 0x37c9c3c
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x37c9b2c
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x37c9a1c
	bool ModifySyncDataByForceHide(int InSlotID, enum HideState);// 0x37c9958
	int MakeStateInfo(out const int[] InSlotDesc);// 0x37c9884
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x37c97b8
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x35a73f0
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x37c96d4
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x35a6e94
	bool IsInHideWhiteTable(int SlotID1, int SlotID2);// 0x37c9608
	bool IsEquippedThoseItemList(out const int[] InItemListID);// 0x37c9534
	bool IsEquippedItemID(int InItemID);// 0x37c94b4
	bool IsEquippedItemDefineID(out const ItemDefineID InItemID);// 0x37c941c
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x37c937c
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x37c92e4
	bool HandleUnequipSlot(int InSlotID);// 0x37c9264
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x37c91cc
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x37c8fec
	void HandleItemResetOrderDesc();// 0x37c8fd8
	void HandleItemResetOperation();// 0x37c8fc4
	void HandleItemReplaceRelation();// 0x37c8fb0
	void HandleItemHideRelation();// 0x37c8f9c
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x37c8ea0
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x37c8cf8
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x37c8b50
	bool GetViewDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x37c8a74
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x37c895c
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x37c87b4
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x37c860c
	bool GetSyncDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x37c8530
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x37c843c
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x37c83a4
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x37c8304
	enum GetForceHideState(int InSlotID, int ItemId);// 0x37c8238
	ItemDefineID GetEquippedItemDefineID3(int InSlotID);// 0x37c81a4
	void GetEquippedItemDefineID2(int InSlotID, out ItemDefineID ItemDefineID, out ItemDefineID RealShowItemDefineID);// 0x37c8074
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x37c7fe0
	int GetAvatarSlotID(int InSubSlotID);// 0x37c7f60
	void ClientPostProcessViewDataMiddle();// 0x358386c
	void ClientPostProcessViewDataBefore();// 0x350c1b8
	void ClientPostProcessViewDataAfter();// 0x35838a4
	void ClientBuildAvatarRelationData();// 0x37c7f4c
	void ClientBodySlotStateChanged();// 0x37c7f38
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x37c7df0
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x37c7c10
	void BPHandleTempRunningSlotDesc();// 0x350db34
	bool BPClientPostProcessViewDataMiddle();// 0x37c7be0
	bool BPClientPostProcessViewDataBefore();// 0x37c7bb0
	bool BPClientPostProcessViewDataAfter();// 0x37c7b80
	void AddTempRunningSlotDesc(int SlotID, int InItemType, int Template, bool bForcHideState);// 0x37c7a30
	void AddForceEquipItem(int SlotID, int ItemId, enum HideState);// 0x37c7930

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 24]
	int gender;//[Offset: 0x38, Size: 4]
	int HideState;//[Offset: 0x3c, Size: 4]
	int ReplaceState;//[Offset: 0x40, Size: 4]
	bool IsExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x48, Size: 20]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	enum SlotDescDiff;//[Offset: 0x5d, Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 24]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0, Size: 1]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int NumID;//[Offset: 0xc, Size: 4]
	int ParticleID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 12]
	int gender;//[Offset: 0xc, Size: 4]
	int BaseID;//[Offset: 0x10, Size: 4]
	int UpdateFlag;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AvatarSyncData
	int ItemId;//[Offset: 0x0, Size: 4]
	int AdditionalItemID;//[Offset: 0x4, Size: 4]
	int SlotID;//[Offset: 0x8, Size: 4]
	int SubSlotID;//[Offset: 0xc, Size: 4]
	int HideState;//[Offset: 0x10, Size: 4]
	int ReplaceState;//[Offset: 0x14, Size: 4]
	int FakeItemID;//[Offset: 0x18, Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 1]
	enum OperationType;//[Offset: 0x1d, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 20]
	enum ForceHideState;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ForceEquipSlotInfo

--------------------------------
Class: TempAvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	AvatarTableData RelationData;//[Offset: 0x4, Size: 124]
	int[] ReplaceDesc;//[Offset: 0x80, Size: 12]
	int[] HideDesc;//[Offset: 0x8c, Size: 12]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: AvatarTableData
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	int[] HideFlags;//[Offset: 0x8, Size: 12]
	int[] ReplaceFlags;//[Offset: 0x14, Size: 12]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x20, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x2c, Size: 12]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x38, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x44, Size: 12]
	int[] ConflictConfig;//[Offset: 0x50, Size: 12]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x5c, Size: 12]
	int HideBoneSlotID;//[Offset: 0x68, Size: 4]
	int HideBoneType;//[Offset: 0x6c, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x70, Size: 12]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	MeshComponent* MeshComp;//[Offset: 0x4, Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0xc, Size: 36]

--------------------------------
Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 12]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0xc, Size: 12]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x68, Size: 12]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bAutoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]
	bool EnableCullDist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 1]
	float CullDist;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0xc, Size: 12]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18, Size: 24]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x30, Size: 12]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x35dd5bc
	void AsyncLoadCustomAssetDone();// 0x35dd5a8
	bool ApplyCustomInfo();// 0x35dc0b8

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20, Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28, Size: 8]
	void SetCustomID(int InCustomID);// 0x35dd230
	MeshComponent* GetOwnerMeshComp();// 0x35dd208
	ActorComponent* GetOwnerComp();// 0x35dd1e0
	bool ClearCustomInfo();// 0x35dc0fc
	bool ApplyCustomInfo();// 0x35dc0b8

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0, Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 12]
	CustomMatColor[] ColorConfig;//[Offset: 0x14, Size: 12]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	float Scalar;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	LinearColor Color;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	Texture* Textrue;//[Offset: 0x10, Size: 40]
	FString TextruePath;//[Offset: 0x38, Size: 12]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c, Size: 4]
	int SubSlotID;//[Offset: 0x20, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28, Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 1]
	FName SocketName;//[Offset: 0x100, Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x108, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x148, Size: 60]
	void UpdateVisibility();// 0x3516310
	void UnRegisterTick();// 0x35162f4
	void TickEntity();// 0x350fe98
	void SetSocketName();// 0x350f6c4
	void SetParentDefineID(ItemDefineID ParentID);// 0x3516268
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x3516190
	void RevertEntityMeshData();// 0x351617c
	void RenderEntity(out SoftObjectPath SoftPath);// 0x35160a0
	void RegisterTick();// 0x3516084
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x3512854
	void PutOnDefaultEquipment(enum SlotType);// 0x3516004
	void OnPostRender();// 0x3515fe8
	bool IsEntityAvailable(enum VisibilityType);// 0x3515f60
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x3515e94
	void Init(int SlotID, int SubSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x3515d8c
	enum GetMeshType();// 0x3515d5c
	MeshData GetMeshData();// 0x3515cf8
	BattleItemHandleBase* GetLoadedHandle();// 0x3515cd0
	ItemDefineID GetDefineID();// 0x3515c7c
	void EnterRenderPipeline();// 0x3515c60
	void EnterLogicPipeline();// 0x3515c44
	void DrawOutline(bool bEnable);// 0x3515bbc
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x3515ad8
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x3515a0c
	void ClearEquipmentLogic(bool putDefault);// 0x3515984
	void ClearEntity(bool ForceClear);// 0x35158fc
	void ApplyAnimation();// 0x35158e0
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x3515860

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0xf4, Size: 1]
	enum SubSlot;//[Offset: 0xf5, Size: 1]
	enum specialType;//[Offset: 0xf6, Size: 1]
	enum ForceMeshType;//[Offset: 0xf7, Size: 1]
	enum ForceLODMeshType;//[Offset: 0xf8, Size: 1]
	<enum,int> SuitConfig;//[Offset: 0xfc, Size: 60]
	MeshPackage MeshPack;//[Offset: 0x138, Size: 568]
	MeshPackage replacedMeshPack;//[Offset: 0x370, Size: 568]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x5a8, Size: 12]
	enum[] hiddenFlags;//[Offset: 0x5b4, Size: 12]
	enum[] subHiddenFlags;//[Offset: 0x5c0, Size: 12]
	enum[] ReplaceFlags;//[Offset: 0x5cc, Size: 12]
	enum[] ignoreFlags;//[Offset: 0x5d8, Size: 12]
	AvatarPostOperation[] postOperation;//[Offset: 0x5e4, Size: 12]
	BackpackComponent* pBackpackComp;//[Offset: 0x5f0, Size: 4]
	int ItemCapacity;//[Offset: 0x5f4, Size: 4]
	int Durability;//[Offset: 0x5f8, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x604, Size: 36]
	enum hideBoneSlot;//[Offset: 0x628, Size: 1]
	FName hideBoneName;//[Offset: 0x630, Size: 8]
	FName[] hideBoneNameArray;//[Offset: 0x638, Size: 12]
	enum HideBoneType;//[Offset: 0x644, Size: 1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x648, Size: 60]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x684, Size: 12]
	int PendantConfigIndex;//[Offset: 0x690, Size: 4]
	float PendantScale;//[Offset: 0x694, Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x698, Size: 4]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x69c, Size: 12]
	byte CharacterAnimOverrideType;//[Offset: 0x6a8, Size: 1]
	AvatarAnimOverrideData[] CharacterAnimListAdditiveOverrideList;//[Offset: 0x6ac, Size: 12]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x6b8, Size: 64]
	BattleItemAdditionalData[] ArmorAttachmentAdditionalDataList;//[Offset: 0x6f8, Size: 12]
	ArmorAttachItemUnit[] CachedArmorAttachmentListBeforeDrop;//[Offset: 0x704, Size: 12]
	AvatarReAttachConfigCollection AvatarReAttachCollection;//[Offset: 0x710, Size: 12]
	bool bForceUseClothAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	CharacterEffectCfgBase*[] SkinEffectCfgs;//[Offset: 0x720, Size: 12]
	bool bEnableSelfForceLODInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	int ForceLODLevelInVehicle;//[Offset: 0x730, Size: 4]
	int RecoverDefaultLODOutVehicle;//[Offset: 0x734, Size: 4]
	void SetItemDurability(int InDurability);// 0x352e230
	void SetItemCapacity(int InCapacity);// 0x352e1b8
	void PreLocalHandleDisuse();// 0x352e1a4
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x352e018
	bool IsSwimConfig();// 0x49216cc
	bool HasRibbon();// 0x352dff0
	bool HasCustomInfo();// 0x352dfc8
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x352ded0
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x352ddb8
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x352dab0
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x352d96c
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x352d86c
	bool HandleMeshpackPostProcess(out const MeshPackage InMeshPack, out MeshPackage OutMeshPack, Object* Outer);// 0x352d6f4
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x352d628
	bool HandleEnable(bool bEnable);// 0x352d598
	bool HandleDrop(int InCount, enum Reason);// 0x352d4cc
	bool HandleDisuse(enum Reason);// 0x3515f60
	BackpackComponent* GetBackpackComponent();// 0x352d4a4
	bool CheckOverrideAvatarAnimList(CharacterAvatarComponent2* InAvatarComp, bool bIsPutOn);// 0x352d3d0
	bool CheckOverrideAvatarAdditiveAnimList(CharacterAvatarComponent2* InAvatarComp, bool bIsPutOn);// 0x352d2fc
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity, enum Reason, enum DisuseReason);// 0x352d1a4
	bool BPOnCharacterAttrChangedWithDetailEvent(float resultVal);// 0x352d11c
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason);// 0x352d094
	void AutoEquipChips();// 0x352d078

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* maleLODStMesh;//[Offset: 0x58, Size: 40]
	StaticMesh* femaleLODStMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0xd0, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xf8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0x120, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0x148, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x170, Size: 40]
	MaterialSet[] additionalMaleMats;//[Offset: 0x198, Size: 12]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1a4, Size: 12]
	MaterialInterface* baseMat;//[Offset: 0x1b0, Size: 4]
	class AnimInstance* animBP;//[Offset: 0x1b4, Size: 4]
	AnimSequence* LobbyIdleAnim;//[Offset: 0x1b8, Size: 40]
	bool bForceUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	enum EffectCreateType;//[Offset: 0x1e2, Size: 1]
	AvatarEffectData[] EffectDataList;//[Offset: 0x1e4, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x1f0, Size: 12]
	class AnimInstance* animBPClass;//[Offset: 0x200, Size: 40]

--------------------------------
Class: AssetPackage

--------------------------------
Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0, Size: 40]
	enum targetSlot;//[Offset: 0x28, Size: 1]
	MaterialInterface* targetBaseMat;//[Offset: 0x30, Size: 40]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	enum ValidMethod;//[Offset: 0x68, Size: 1]
	enum ValidDevice;//[Offset: 0x69, Size: 1]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool bIsActivateWithMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 1]
	bool IsLobbyActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x70, Size: 12]
	ParticleSystem* ParticleSystem_F;//[Offset: 0x80, Size: 40]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName AttachSocket;//[Offset: 0x40, Size: 8]
	FName SlotName;//[Offset: 0x48, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]

--------------------------------
Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0, Size: 1]
	enum operationWhenReplaced;//[Offset: 0x1, Size: 1]
	enum operationWhenHidden;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 12]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc, Size: 12]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 12]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x4, Size: 4]
	UAECharAnimListCompBase* AnimListCompInstance;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x174, Size: 12]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x10c, Size: 60]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x148, Size: 12]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x4, Size: 12]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x10, Size: 72]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 12]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0xc, Size: 60]

--------------------------------
Class: ArmorAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum SlotAdditionalType;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AvatarReAttachConfigCollection
	ReAttachConfig[] AvatarReAttachList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ReAttachConfig
	enum ReAttachSlot;//[Offset: 0x0, Size: 1]
	enum TriggerSlot;//[Offset: 0x1, Size: 1]
	int Priority;//[Offset: 0x4, Size: 4]
	bool bForceRecreateAdaptSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum SlotAdaptSpace;//[Offset: 0x9, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	bool bForceRecreateAdaptAssociatedSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	enum AssociatedSlotAdaptSpace;//[Offset: 0x41, Size: 1]
	Transform AssociatedSlotAdaptTransform;//[Offset: 0x50, Size: 48]
	enum[] AssociatedSlotList;//[Offset: 0x80, Size: 12]
	<FName,Transform> WingClothScaleTransformMap;//[Offset: 0x8c, Size: 60]

--------------------------------
Class: CharacterEffectCfgBase.Object
	enum TriggerCondition;//[Offset: 0x1c, Size: 1]
	int MaxApplyCount;//[Offset: 0x20, Size: 4]
	int IntParam1;//[Offset: 0x24, Size: 4]
	enum ValidScene;//[Offset: 0x28, Size: 1]
	bool OnlyValidInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool EnableLowDeviceOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	void RemoveEffect(CharacterAvatarComponent2* InAvatarComp);// 0x3519384
	bool ReachedMaxTriggerTime();// 0x35b2414
	void Init();// 0x35b23f8
	bool ApplyEffect(CharacterAvatarComponent2* InAvatarComp);// 0x35b1434

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x3510e24

--------------------------------
Class: AvatarSlotNameConfig
	<enum,FString> MaleSlotName;//[Offset: 0x0, Size: 60]
	<enum,FString> FemaleSlotName;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24, Size: 12]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x352fb74
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x352fab8
	void ModifySlotMatColorArray(int ArrayIndex, out const SlotToMatColor InSlotToMatColor);// 0x352f940
	void ModifyMaskGrayTexture(int ArrayIndex, Texture* InTexture);// 0x352f778
	void ModifyMaskColor(int ArrayIndex, out const LinearColor[] InColorArray);// 0x352f668
	void ModifyGrayScale(int ArrayIndex, float InGrayScale);// 0x352f5ac

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c, Size: 8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x352ef98
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x352ee90
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x352ed7c
	CharacterAvatarComponent2* GetOwnerComponent();// 0x352ed54

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0, Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x4, Size: 12]
	float GrayScale;//[Offset: 0x10, Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x18, Size: 40]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24, Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30, Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48, Size: 24]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x35304f8
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x353043c
	bool IsPatternNumMode();// 0x3530414
	void InitPatternNumID(int InNumID);// 0x35303a0
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x49216cc

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0, Size: 1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 40]
	float IconScale;//[Offset: 0x30, Size: 4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 40]
	float IconScale;//[Offset: 0x60, Size: 4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 16]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 12]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int LODLevel;//[Offset: 0x0, Size: 4]
	int SkipFrame;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AdditonalAvatarStruct
	int ItemId;//[Offset: 0x0, Size: 4]
	int[] SlotIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: FakeHeadInfo
	bool bEnableFakeHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SkeletalMesh* SoftFakeHeadMesh;//[Offset: 0x8, Size: 40]
	class AnimInstance* FakeHeadAnimBPClass;//[Offset: 0x30, Size: 4]

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 24]
	int UpdateFlag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0, Size: 8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8, Size: 24]
	SoftObjectPath MatBasePath;//[Offset: 0x20, Size: 24]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0x100, Size: 512]
	class AnimInstance* animBP;//[Offset: 0x300, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x308, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x330, Size: 12]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x33c, Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x348, Size: 4]
	delegate OnEquipOrUnEquipToWeaponDelegate;//[Offset: 0x34c, Size: 12]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x3565840
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x3565824
	void OnEquipOrUnEquipToWeaponDelegate__DelegateSignature(STExtraWeapon* Weapon, bool bIsEquip);// 0x49216cc
	bool IsVirtualAvatarHandle();// 0x35657f4
	void HandleEquipOrUnEquipToWeaponDelegate(STExtraWeapon* Weapon, bool bIsEquip);// 0x3565728
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x35656b0
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x35655dc
	int GetSubSlotID();// 0x35655ac
	int GetSlotID();// 0x34ce854
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x3565540
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x3565378
	WeaponAttachmentConfig GetAttachmentConfig();// 0x356530c
	class Object GetAnimationBP();// 0x35652dc
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x35651c8

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc, Size: 1]
	enum SubSlot;//[Offset: 0xd, Size: 1]
	enum SightType;//[Offset: 0xe, Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x14, Size: 12]
	WeaponAttachmentAttrListModifyWrapper[] SpecialWeaponAttachmentAttrModifys;//[Offset: 0x20, Size: 12]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x2c, Size: 12]
	<int,FName> socketTypeToName;//[Offset: 0x38, Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x78, Size: 328]
	WeaponMeshCfg[] ExtMeshList;//[Offset: 0x1c0, Size: 12]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1cc, Size: 12]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x1d8, Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1e8, Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 40]

--------------------------------
Class: WeaponAttachmentAttrListModifyWrapper
	int WeaponId;//[Offset: 0x0, Size: 4]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 12]
	FText DescValue;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 12]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 328]
	WeaponMeshCfg[] ExtReplacedAttachmentCfgList;//[Offset: 0x158, Size: 12]
	int replacedAttachmentMatIndex;//[Offset: 0x164, Size: 4]
	AnimationAsset*[] replacedAttachmentAnimList;//[Offset: 0x168, Size: 12]

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 1]
	int PendantIndex;//[Offset: 0x4, Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 96]

--------------------------------
Class: WeaponPendantMap
	int WeaponId;//[Offset: 0x0, Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VHSeatCharacterCameraOffsetData
	bool bAttachAtRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector SocketOffset;//[Offset: 0x4, Size: 12]
	Vector TargetOffset;//[Offset: 0x10, Size: 12]
	float SpringArmLength;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 12]
	int[] BorrowedSeat;//[Offset: 0xc, Size: 12]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	float HitSelfModifier;//[Offset: 0x31c, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x320, Size: 4]
	float HitOthersModifier;//[Offset: 0x324, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x328, Size: 4]
	float HitCharacterModifier;//[Offset: 0x32c, Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x14c, Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x150, Size: 4]
	float ImpactModifier;//[Offset: 0x154, Size: 4]
	float ImpactAbsorption;//[Offset: 0x158, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0x15c, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0x160, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x164, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x168, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x16c, Size: 4]
	class Actor[] HitIgnoreClasses;//[Offset: 0x170, Size: 12]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x180, Size: 4]
	float PushCharacterRightVectorStrength;//[Offset: 0x184, Size: 4]
	float PushCharacterTopVectorStrength;//[Offset: 0x188, Size: 4]
	float ApplyImpluseSpeed;//[Offset: 0x18c, Size: 4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x190, Size: 60]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x1cc, Size: 4]
	float DamageCharacterCD;//[Offset: 0x1d0, Size: 4]
	float PassengerProtectTime;//[Offset: 0x1d4, Size: 4]
	float DamageSelfCD;//[Offset: 0x1dc, Size: 4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	float HitDamageSelfMaxFactor;//[Offset: 0x1e8, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x1ec, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x1f4, Size: 4]
	float DamageReduce;//[Offset: 0x1f8, Size: 4]
	float fHitEventInterval;//[Offset: 0x1fc, Size: 4]
	delegate OnVehicleHitOthers;//[Offset: 0x204, Size: 12]
	bool bEnableVehicleExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool bShouldPlayExplosionEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	float ExplosionBaseDamage;//[Offset: 0x214, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x218, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x21c, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x220, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x224, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x228, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x22c, Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x234, Size: 4]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x238, Size: 60]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x278, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x280, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x290, Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x2d4, Size: 4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x2d8, Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x2e0, Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x2e8, Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x2ec, Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x2f0, Size: 4]
	float DotProductRearThreshold;//[Offset: 0x2f4, Size: 4]
	float ImpactModifierFront;//[Offset: 0x2f8, Size: 4]
	float ImpactModifierRear;//[Offset: 0x2fc, Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x300, Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x304, Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x308, Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x310, Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x314, Size: 4]
	bool bDebugVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x31c, Size: 60]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	float CustomImpulseCooldownTime;//[Offset: 0x35c, Size: 4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x360, Size: 60]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x39c, Size: 32]
	float OverlapPushSimpleCharacterMinSpeed;//[Offset: 0x3bc, Size: 4]
	float OverlapHitSimpleCharacterMinSpeed;//[Offset: 0x3c0, Size: 4]
	float ServerValidateDistance;//[Offset: 0x3c4, Size: 4]
	Vector DefaultVehicleHitBoxExtent;//[Offset: 0x3c8, Size: 12]
	<enum,Vector> VehicleHitBoxExtents;//[Offset: 0x3d4, Size: 60]
	float ResponseSimpleCharacterRate;//[Offset: 0x410, Size: 4]
	float ResponseSimpleCharacterAccumulate;//[Offset: 0x414, Size: 4]
	void TickHandleSimpleCharacterOverlap(float DeltaSeconds);// 0x3a56448
	void ServerHandleOnVehicleResponseSimpleCharacter(STExtraSimpleCharacter* OtherActor, Vector NormalImpulse, float HitSpeed, bool bChangeState);// 0x3a56294
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x3a56150
	bool ScriptShouldCauseDamage(float InDamage, PrimitiveComponent* InPrimComp, STExtraBaseCharacter* InCharacter);// 0x49216cc
	void OnVehicleOverlapSimpleCharacter(STExtraSimpleCharacter* OverlappedTarget);// 0x3a560cc
	void OnVehicleHitSimpleCharacter(STExtraSimpleCharacter* OtherActor, PrimitiveComponent* PrimVehicle, PrimitiveComponent* PrimOther, Vector NormalImpulse, out const HitResult Hit);// 0x3a55ee4
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3a55cec
	void HandleOnVehicleResponseSimpleCharacter(STExtraSimpleCharacter* OtherActor, Vector NormalImpulse, float HitSpeed, bool bChangeState);// 0x3a55b94
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3a559f0
	bool GetOverlappedSimpleCharacter(out STExtraSimpleCharacter*[] OverlappedSimpleCharacter);// 0x3a5591c

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 12]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0xc, Size: 12]
	class DamageType* DamageType;//[Offset: 0x18, Size: 4]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]

--------------------------------
Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 4]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0x8, Size: 4]
	float MaxImpulseDamage;//[Offset: 0xc, Size: 4]
	float ImpulseStrength;//[Offset: 0x10, Size: 4]
	float RadialImpulseStrength;//[Offset: 0x14, Size: 4]
	float ImpulseRadius;//[Offset: 0x18, Size: 4]
	byte ImpulseFalloffType;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0xd88, Size: 4]
	int ForceLifePeriodTime;//[Offset: 0xd8c, Size: 4]
	bool bClientRegionForceClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 1]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd91, Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd92, Size: 1]
	delegate OnDeath;//[Offset: 0xd94, Size: 12]
	float DelayHideDuration;//[Offset: 0xda0, Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0xda4, Size: 4]
	bool bForcePlayDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 1]
	float DelayHideDurationByHeadShoot;//[Offset: 0xdac, Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0xdb0, Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0xdb4, Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0xdb8, Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0xdbc, Size: 4]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0xdc0, Size: 4]
	class PlayerTombBox* DropTomb;//[Offset: 0xdc4, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc8, Size: 1]
	int MonsterSpawnTime;//[Offset: 0xdcc, Size: 4]
	int MonsterDeathTime;//[Offset: 0xdd0, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0xdd4, Size: 4]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 1]
	float AnimBornLifeSpan;//[Offset: 0xddc, Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	float MaxBehaveRange;//[Offset: 0xde4, Size: 4]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0xde8, Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0xdec, Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0xdf0, Size: 4]
	float AnimActiveLifeSpan;//[Offset: 0xdf4, Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0xe0c, Size: 88]
	bool bForceUseBPSenseConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe64, Size: 1]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xe68, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xe6c, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xe70, Size: 4]
	float SensedRadius;//[Offset: 0xe74, Size: 4]
	float SensedAngle;//[Offset: 0xe78, Size: 4]
	bool SenseEnemyWithLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe7c, Size: 1]
	float MinTimeLockHeardEnemy;//[Offset: 0xe80, Size: 4]
	float HeardRadius;//[Offset: 0xe84, Size: 4]
	float EnableAnimOnDSDistanceSq;//[Offset: 0xe88, Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xe8c, Size: 4]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0xe90, Size: 4]
	MobPerceptionController* MobPerceptionController;//[Offset: 0xe94, Size: 4]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0xe98, Size: 4]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0xe9c, Size: 4]
	CircleMgrComponent* CircleMgr;//[Offset: 0xeac, Size: 4]
	int SyncAIState;//[Offset: 0xeb0, Size: 4]
	float HitBoxRadius;//[Offset: 0xeb8, Size: 4]
	int AIState;//[Offset: 0xebc, Size: 4]
	float StunDuration;//[Offset: 0xec8, Size: 4]
	float HurtAnimTime;//[Offset: 0xecc, Size: 4]
	float BackAnimPerc;//[Offset: 0xed0, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0xed4, Size: 4]
	delegate OnEnterAIState;//[Offset: 0xee4, Size: 12]
	delegate OnLeaveAIState;//[Offset: 0xef0, Size: 12]
	delegate OnBPEnterAIState;//[Offset: 0xefc, Size: 12]
	delegate OnBPLeaveAIState;//[Offset: 0xf08, Size: 12]
	delegate OnChangeAnimParam;//[Offset: 0xf14, Size: 12]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0xf20, Size: 12]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0xf2c, Size: 12]
	delegate OnCharacterHitPointDelgate;//[Offset: 0xf4c, Size: 12]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 1]
	int FlowId;//[Offset: 0xf5c, Size: 4]
	FString MonsterName;//[Offset: 0xf60, Size: 12]
	FString MonsterNameID;//[Offset: 0xf6c, Size: 12]
	int MonsterSyncID;//[Offset: 0xf78, Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7c, Size: 1]
	int Gold;//[Offset: 0xf80, Size: 4]
	int SuperGold;//[Offset: 0xf84, Size: 4]
	int[] BornSkill;//[Offset: 0xf88, Size: 12]
	int[] AloneSkillIdList;//[Offset: 0xf94, Size: 12]
	int HealthBarCount;//[Offset: 0xfa0, Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa4, Size: 1]
	int NeedSendAttackFlow;//[Offset: 0xfa8, Size: 4]
	float TakeDamageScale;//[Offset: 0xfac, Size: 4]
	float DamageScale;//[Offset: 0xfb0, Size: 4]
	Actor* AttackTarget;//[Offset: 0xfb4, Size: 8]
	bool bMobSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbc, Size: 1]
	int[] DecalIndexArray;//[Offset: 0xfc0, Size: 12]
	<byte,ParticleSystem*> ImpactFXMap;//[Offset: 0xfcc, Size: 60]
	<byte,AkAudioEvent*> ImpactSoundMap;//[Offset: 0x1008, Size: 60]
	byte HitPartJudgment;//[Offset: 0x1044, Size: 1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1048, Size: 60]
	BodyTypeDef StandBodyDef;//[Offset: 0x1084, Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0x108c, Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0x1090, Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0x1094, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0x1098, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0x109c, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0x10a0, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0x10a4, Size: 4]
	bool bMobIgnoreCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10a8, Size: 1]
	float[] CircleDamageRate;//[Offset: 0x10ac, Size: 12]
	int ObjectPoolSize;//[Offset: 0x10b8, Size: 4]
	int LifePeriodTime;//[Offset: 0x10bc, Size: 4]
	float KilledDisCircleEdge;//[Offset: 0x10c0, Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0x10c4, Size: 4]
	enum CustomMobRegionSize;//[Offset: 0x10c8, Size: 1]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c9, Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0x10cc, Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d8, Size: 1]
	Vector MobSvrBornLocation;//[Offset: 0x10e0, Size: 12]
	int RageLevel;//[Offset: 0x1100, Size: 4]
	float AloneRageTimerRate;//[Offset: 0x110c, Size: 4]
	float ImpluseScale;//[Offset: 0x1110, Size: 4]
	float ImpluseZScale;//[Offset: 0x1114, Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1118, Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1119, Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0x111c, Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0x1120, Size: 4]
	float MinDamageInterval;//[Offset: 0x1124, Size: 4]
	bool bImpulseBySidesWhenOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1128, Size: 1]
	float MovementTickInterval;//[Offset: 0x112c, Size: 4]
	float DsActorTickInterval;//[Offset: 0x1130, Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1134, Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0x113c, Size: 4]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0x1140, Size: 4]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0x1144, Size: 4]
	AkAudioEvent* MonsterRunSound;//[Offset: 0x1148, Size: 4]
	float NoPathToTargetTimer;//[Offset: 0x114c, Size: 4]
	enum AnimGroupMask;//[Offset: 0x1150, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1151, Size: 1]
	bool bEnableDSTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1152, Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1158, Size: 1]
	int ExplodeSkillID;//[Offset: 0x115c, Size: 4]
	float ExplodeSkillDuration;//[Offset: 0x1160, Size: 4]
	bool bDieAfterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1164, Size: 1]
	bool CloseCollisionForMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1165, Size: 1]
	AkComponent* SoundComp;//[Offset: 0x1168, Size: 4]
	float LagCompensationRecordInterval;//[Offset: 0x1238, Size: 4]
	float HearRadius;//[Offset: 0x1240, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0x1244, Size: 4]
	bool bIgnoreNetRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124c, Size: 1]
	bool bSimulateMovementByCharacterMovementComponentOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124d, Size: 1]
	bool bEnableSimulateSyncSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124e, Size: 1]
	bool bNotifyLuaDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124f, Size: 1]
	UAEMonsterAnimListComponentBase* MonsterAnimListComp;//[Offset: 0x1250, Size: 4]
	bool bUseBlockHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1270, Size: 1]
	float DefaultVehicleHitDamage;//[Offset: 0x1274, Size: 4]
	CurveFloat* VehicleSpeedDamageCurve;//[Offset: 0x1278, Size: 4]
	float VehicleHitDamageScale;//[Offset: 0x127c, Size: 4]
	float VehicleHitLaunchVelocityScale;//[Offset: 0x1280, Size: 4]
	float VehicleHitLaunchVelocityZOffset;//[Offset: 0x1284, Size: 4]
	float VehicleHitMinLaunchVelocity;//[Offset: 0x1288, Size: 4]
	float VehicleHitMaxLaunchVelocity;//[Offset: 0x128c, Size: 4]
	float VehicleHitInterval;//[Offset: 0x1290, Size: 4]
	float VehicleHitAccumulate;//[Offset: 0x1294, Size: 4]
	bool bEnableExtraMeleeHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 1]
	float MeleeAttackRecoverDuration;//[Offset: 0x129c, Size: 4]
	bool bDisableCollisionWhenDisappear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a0, Size: 1]
	<class DamageType,MeleeAttackSetting> MeleeAttackHitSetting;//[Offset: 0x12a4, Size: 60]
	int[] MeleeAttackInterruptSkillID;//[Offset: 0x12e0, Size: 12]
	TimerHandle LeaveLaunchAirGroundHandle;//[Offset: 0x12f0, Size: 8]
	TimerHandle LeaveLaunchAirRiseUpHandle;//[Offset: 0x12f8, Size: 8]
	bool bShouldFaceDirectionWhileLaunched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1300, Size: 1]
	byte[] IgnoreChannelOnLaunched;//[Offset: 0x1304, Size: 12]
	float MinLaunchAirGroundTime;//[Offset: 0x1310, Size: 4]
	float MaxLaunchAirGroundTime;//[Offset: 0x1314, Size: 4]
	float DelayCheckLaunchAirState;//[Offset: 0x1318, Size: 4]
	TimerHandle CheckLaunchAirStateTimerHandle;//[Offset: 0x1320, Size: 8]
	MonsterIdleIndex MonsterIdleIndex;//[Offset: 0x1328, Size: 8]
	delegate OnMonsterSetPlayedIdleIndex;//[Offset: 0x1330, Size: 12]
	delegate OnMonsterHurting;//[Offset: 0x133c, Size: 12]
	bool bCharAnimParamHasInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1348, Size: 1]
	MonsterAnimListComponent* MonsterAnimListComponent;//[Offset: 0x134c, Size: 4]
	FName DeadMontageSlotName;//[Offset: 0x1350, Size: 8]
	enum[] PauseLogicAIState;//[Offset: 0x1358, Size: 12]
	delegate OnMonsterSpawned;//[Offset: 0x1364, Size: 12]
	delegate OnMonsterRecycled;//[Offset: 0x1370, Size: 12]
	float ChangeCapsuleSize;//[Offset: 0x137c, Size: 4]
	bool TestPathSyncToLocation(Vector Location);// 0x3970668
	bool TestPathSyncToActor(Actor* Actor);// 0x39705e8
	void StopMovementMode();// 0x39705cc
	void StartMovementMode();// 0x39705b0
	void ShowHeadShootDeadEffect();// 0x397059c
	void SetReplicateAliveSeconds(bool bReplicate);// 0x397051c
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x39704a4
	bool ResumeAILogic();// 0x397047c
	void ResetCharAnimParam();// 0x3970468
	bool PauseAILogic();// 0x3970440
	void OnTakeMeleeAttackDamage(out const MeleeDamageEvent AttackEvent, Pawn* DamageCauser);// 0x397029c
	void OnSmoothComponentSnapshotPreReplicate();// 0x3970288
	void OnRep_SyncAIState();// 0x3970274
	void OnRep_ReplicatedMovement();// 0x3605848
	void OnRep_RageLevel();// 0x3970260
	void OnRep_MonsterSyncID();// 0x397024c
	void OnRep_MonsterNameID();// 0x3970238
	void OnRep_MonsterIdleIndex();// 0x3970224
	void OnRep_IsLeftRightMove();// 0x3970208
	void OnRep_IdleBlendSpaceValue();// 0x39701f4
	void OnRep_ChangeCapsuleSize();// 0x386958c
	void OnLeaveLaunchAirFlyState();// 0x39701d8
	void OnEnterLaunchAirFlyState();// 0x39701bc
	void NotifyInitial();// 0x39701a8
	void MulticastPlayerSoundByID(int SoundID);// 0x39700f4
	void LeaveLaunchAirRiseUp();// 0x39700e0
	void LeaveLaunchAirGround();// 0x39700cc
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x3970008
	void LaunchCharacterWithParam(Vector LaunchVelocity, bool bChangeState);// 0x396ff44
	void K2_ClientHandleVehicleResponse(STExtraVehicleBase* OtherVehicle, Vector HitImpulseDirection, float HitSpeed);// 0x396fe38
	bool IsSameTeam(Pawn* Other);// 0x3863398
	bool IsPlayingDeadMontage();// 0x396fe10
	bool IsInActiveState();// 0x396fde8
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x396fcfc
	bool IsCanCopyBone();// 0x396fcd4
	bool IsBoss();// 0x396fcac
	bool IsBigBoss();// 0x396fc84
	bool IsBehemoth();// 0x396fc5c
	void InterruptAttackSkill();// 0x396fc48
	void InitVehicleHitStuff();// 0x396fc2c
	void InitCharAnimParam();// 0x396fc18
	bool HasAnyAIState(out const enum[] AIStates);// 0x396fb44
	bool HasAIState(enum NewState);// 0x396fac4
	bool HandleVehicleHit(STExtraVehicleBase* OtherVehicle, Vector HitImpulseDirection, float HitSpeed, bool bChangeState);// 0x396f960
	void HandleRagDollState(Controller* Killer, Actor* DamageCauser, out const HitResult HitInfo, out const Vector HitImpulseDir, out const DamageEvent DamageEvent);// 0x396f73c
	void HandleOnLaunchAirState(byte PrevMovementMode, byte PreviousCustomMode);// 0x396f680
	void HandleHitByBullet(Actor* Causer);// 0x396f608
	void GotoEarthAndDie();// 0x385ac70
	Vector GetVelocity();// 0x396f5b8
	AkComponent* GetSoundComponent();// 0x396f590
	Vector GetServerHeadLocation();// 0x396f548
	STExtraPlayerController* GetPlayerControllerSafety();// 0x3860b64
	int GetMonsterType();// 0x396f52c
	FString GetMonsterName();// 0x396f464
	MonsterAnimListComponent* GetMonsterAnimListComponent();// 0x396f43c
	float GetHitBoxRadius();// 0x396f420
	ExFootIKComponent* GetExFootIKComponent();// 0x396f3f0
	class PlayerTombBox GetDropTomb();// 0x396f3c0
	int GetDeactiveMonsterCount();// 0x396f398
	byte GetCurHitPartJugementType();// 0x396f370
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x396f348
	SimpleCharAnimParamList GetAnimParam();// 0x396f2bc
	int GetAliveTimeSeconds();// 0x396f2a0
	int GetActiveMonsterCount();// 0x396f278
	void FaceAttackerWithTimeline(Rotator TargetRotation);// 0x396f200
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x396ee50
	void EnterAIState(enum NewState, bool bIsNotify);// 0x396ed8c
	void EnableDSAnim(bool bEnable);// 0x396ed0c
	void DoHurting(byte HurtType, Vector HurtDir, float CauseDamage, int CauseSkillID);// 0x396ebb8
	void DisappearOnDeath();// 0x396eba4
	void DieAfterExplode();// 0x396eb90
	void DelayHidden();// 0x385d60c
	void ClearOnDeath(Controller* EventInstigator, out const DamageEvent DamageEvent);// 0x396eab0
	bool CheckPlayerNeedUpdateAnimation();// 0x396ea88
	void CheckLaunchAirState();// 0x396ea74
	bool CheckCanResponseVehicle();// 0x396ea4c
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x396e940
	void ChangeSourceType(byte NewSourceType);// 0x396e8c8
	float CalcVehicleHitDamage(STExtraVehicleBase* OtherVehicle, Vector HitImpulseDirection, float HitSpeed);// 0x396e7b4
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x396e6a4
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x396e594
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396e2b8
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396df60
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396dc84
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396d9a8
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396d684
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396d3a8
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396d0cc
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396cdf0
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396cad4
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x396c77c
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x396c5e8
	void BroadcastClientsDebugSpeed(float Speed);// 0x396c534
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x396c480
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x49216cc
	void BPPreRespawned();// 0x3847608
	void BpOnTakeMeleeAttackDamage(Pawn* Attacker, class DamageType DamageType);// 0x396c3bc
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x49216cc
	void BPNotifyInitial();// 0x49216cc
	void BPNotifyDisappearOnDeath();// 0x49216cc
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x49216cc
	void BPMonsterInitTableDone();// 0x49216cc
	bool BpHasAnyAIState(out const enum[] AIStates);// 0x396c2e8
	byte BPGetReplicatedMovementMode();// 0x396c2cc
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x396c158
	enum BpAIState2AIState(enum InState);// 0x396c0d8
	bool BP_HasAIState(enum NewState);// 0x396c058
	RoadPointInfo[] BleCallGetRoadPoints();// 0x396bf90
	bool AllowAIState(enum NewState);// 0x396bf10
	enum AIState2BpAIState(enum InState);// 0x396be90
	void AddWeaponDamageAddition(byte WeaponType);// 0x396be18

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0, Size: 12]
	Vector movedir;//[Offset: 0xc, Size: 12]
	byte MovementMode;//[Offset: 0x18, Size: 1]
	Rotator ViewRotation;//[Offset: 0x1c, Size: 12]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector HurtDir;//[Offset: 0x2c, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int RandomAnimID;//[Offset: 0x40, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0x44, Size: 4]
	float AdditiveYaw;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xbc, Size: 56]
	RepSnapshot Snapshot;//[Offset: 0xf4, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x12c, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x130, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x134, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x138, Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x13c, Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x140, Size: 4]
	float FindFloorUpOffset;//[Offset: 0x144, Size: 4]
	float FindFloorDownOffset;//[Offset: 0x148, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x14c, Size: 4]
	bool bUseFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	int CurrentDeviceLevel;//[Offset: 0x154, Size: 4]
	int FindFloorDeviceLevel;//[Offset: 0x158, Size: 4]
	bool bForceRepSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	delegate OnSnapshotPreReplicate;//[Offset: 0x160, Size: 12]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x170, Size: 220]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	bool bOnlyUpdateLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 1]
	bool bOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool bSimulatedProxyOnlyUpdateLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	bool bSimulatedProxyOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 1]
	bool bAutonomousProxyEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 1]
	bool bIsReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x258, Size: 12]
	bool bEnableTurnAnimationNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 1]
	float MoveMaxSpeedWhenTuring;//[Offset: 0x268, Size: 4]
	bool bAutoUpdateVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	float TurnThreshold;//[Offset: 0x294, Size: 4]
	CurveFloat* TurnTimeCurve;//[Offset: 0x298, Size: 4]
	float TurnSpeed;//[Offset: 0x29c, Size: 4]
	void TeleportNextSync();// 0x37b6cd8
	void StopPredict();// 0x37b6cc4
	void SetVelocity(out const Vector Velocity);// 0x37b6c40
	void SetEnable(bool bInEnable, bool bForceReinit);// 0x37b6b70
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x37b6a70
	void OnRep_Snapshot();// 0x37b6a5c
	Vector GetVelocity();// 0x37b6a14
	bool GetEnable();// 0x37b69f8
	Vector FindFloor(const Vector InLocation);// 0x37b6964

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 12]
	Rotator_NetQuantize Rotation;//[Offset: 0x10, Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c, Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28, Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: Rotator_NetQuantize.Rotator

--------------------------------
Class: SimulateSyncSmooth
	float LocErrorTolerance;//[Offset: 0x0, Size: 4]
	float RotErrorTolerance;//[Offset: 0x4, Size: 4]
	float MaxPredictMoveTime;//[Offset: 0x8, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0xc, Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x10, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0xbc, Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0xc0, Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0xc4, Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0xc8, Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0xcc, Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0xd0, Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0xd4, Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0xd8, Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0xdc, Size: 4]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0xe0, Size: 4]
	float WallJump_JumpSpeed;//[Offset: 0xe4, Size: 4]
	float WallJump_JumpAngle;//[Offset: 0xe8, Size: 4]
	float WallJump_ZVelocity;//[Offset: 0xec, Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0xf0, Size: 4]
	float Stride_Duration;//[Offset: 0xf4, Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0xf8, Size: 4]
	float Stride_HeightOffset;//[Offset: 0xfc, Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x100, Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x104, Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x108, Size: 4]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x10c, Size: 4]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	int iWallClimbState;//[Offset: 0x114, Size: 4]
	int iWallJumpState;//[Offset: 0x118, Size: 4]
	int iStrideState;//[Offset: 0x11c, Size: 4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x36c6d10
	void WallJump(Vector DstLocation);// 0x36c6ca0
	void WallClimbExit();// 0x36c6c8c
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x36c6b84
	void TickWallJump_Turn(float DeltaTime);// 0x36c6b0c
	void TickWallJump(float DeltaTime);// 0x36c6a94
	void TickWallClimb_Turn(float DeltaTime);// 0x36c6a1c
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x36c69a4
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x36c692c
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x36c68b4
	void TickWallClimb(float DeltaTime);// 0x36c683c
	void TickStride_Turn(float DeltaTime);// 0x36c67c4
	void TickStride_Stride(float DeltaTime);// 0x36c674c
	void TickStride_MoveToWall(float DeltaTime);// 0x36c66d4
	void TickStride(float DeltaTime);// 0x36c665c
	void StrideJump();// 0x36c6648
	void StrideExit();// 0x36c6634
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x36c655c
	void OnMobDie();// 0x36c6548
	void NotifyClientsWallClimbSyncState(Vector Pos, Rotator Rotator, int nowWallClimbState);// 0x36c643c
	void NotifyClientsWallClimbStartClimbToStand(Vector Pos, Rotator Rotator, int nowWallClimbState);// 0x36c6330
	void NotifyClientsStrideState(Vector Pos, Rotator Rotator, int nowStrideState);// 0x36c6224
	void NotifyClientsStartStride(Vector Pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x36c5fd0
	bool IsInAdvancedMovement();// 0x36c5fa8
	int GetWallJumpState();// 0x36c5f80
	int GetWallClimbState();// 0x36c5f58
	int GetStrideState();// 0x36c5f30
	void BPWallJump(Vector DstLocation);// 0x36c5eb8
	void BPWallClimb(Vector DstLocation);// 0x36c5e40

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0xbc, Size: 4]
	enum[] AcceptableNoiseType;//[Offset: 0xc0, Size: 12]
	enum NoiseAttenuationModel;//[Offset: 0xcc, Size: 1]
	int NoisePoolSize;//[Offset: 0xd0, Size: 4]
	float NoiseRememberTime;//[Offset: 0xd4, Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0xd8, Size: 4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x36c8f60
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x36c8e50
	void OnMobDie();// 0x36c8e3c
	void ClearNoisePool();// 0x36c8e3c
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x36c8c9c
	float Attenuation(out AIStimulus Stimulus);// 0x36c8b04
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x36c88e8

--------------------------------
Class: NoiseInfo
	enum NoiseType;//[Offset: 0x0, Size: 1]
	Actor* Instigator;//[Offset: 0x4, Size: 8]
	Vector NoiseLocation;//[Offset: 0xc, Size: 12]
	float LoudnessAtStart;//[Offset: 0x18, Size: 4]
	float LoudnessHeard;//[Offset: 0x1c, Size: 4]
	float HeardTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum NoiseType;//[Offset: 0x1, Size: 1]
	float LoudnessHeard;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0xbc, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0xc0, Size: 4]
	float StepHeight;//[Offset: 0xc4, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0xc8, Size: 4]
	float VehicleImpluseScale;//[Offset: 0xcc, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0xd0, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xd4, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x114, Size: 4]
	bool StopSkillSimulate();// 0x3978700
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x3978634
	void SetVelocity(Vector InVelocity);// 0x39785c4
	void SetSimulatePhysics(bool bInEnabled);// 0x3978548
	void SetEnabled(bool InEnabled);// 0x39784cc
	void SetCharacterMovementActive(bool _bIsActive);// 0x397844c
	bool IsOnGround();// 0x3978424
	Vector GetVelocity();// 0x39783dc
	bool FindGround();// 0x39783b4
	void AddVelocity(Vector InVelocity);// 0x3978344
	void ActivatePhysics();// 0x3978330

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0xbc, Size: 1]
	byte Type;//[Offset: 0xbd, Size: 1]
	int TypeId;//[Offset: 0xc0, Size: 4]
	void SetActorVisible(bool bEnable);// 0x3573d54

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool bAutoAdaptShootingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28d8, Size: 1]
	float ShootingBoxScaleFactor;//[Offset: 0x28dc, Size: 4]
	Vector2D MovementProtectFactorXY;//[Offset: 0x28e0, Size: 8]
	Vector2D MovementProtectFactorZ;//[Offset: 0x28e8, Size: 8]
	float SimulatedCharacterServerTime();// 0x359773c
	enum ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* Shooter, out const BulletHitInfoUploadData ShootData);// 0x3771260
	void AutoAdaptShootingBox();// 0x377124c

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float KeepStillMinTime;//[Offset: 0x364, Size: 4]
	float StillMaxSpeed;//[Offset: 0x368, Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x36c, Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x378, Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x384, Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x390, Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x39c, Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x3a8, Size: 12]
	float WeaponOffsetStillScale;//[Offset: 0x3b4, Size: 4]
	float StandStilDynamicScale;//[Offset: 0x3b8, Size: 4]
	Vector StandStillBoundBoxExtentPicth;//[Offset: 0x3bc, Size: 12]
	Vector StandStillHeadBoundBoxExtentPicth;//[Offset: 0x3c8, Size: 12]
	Vector CrouchStillBoundBoxExtentPicth;//[Offset: 0x3d4, Size: 12]
	Vector CrouchStillHeadBoundBoxExtentPicth;//[Offset: 0x3e0, Size: 12]
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x3ec, Size: 44]
	static void RecordShootVerifyStatType(STExtraCharacter* Shooter, STExtraShootWeapon* Weapon, byte StatType);// 0x369d08c
	static void RecordShootVerifyFailed(STExtraCharacter* Shooter, byte FailedReason);// 0x369cfd8
	void PostServerMoveDelegate();// 0x369cfc4

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	bool GM_VerifyProjectileBulletPosBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 1]
	float TolDistanceBulletPosNoBlock;//[Offset: 0xc0, Size: 4]
	float TolDistanceBulletPosBlock;//[Offset: 0xc4, Size: 4]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	bool bVerifyMuzzleImpactDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bVerifyShootPosInHistory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bVerifyMuzzleLocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bVerifyShooterHead2PosIsBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	int TolerateMuzzleAndCharacterDisSquare;//[Offset: 0xdc, Size: 4]
	int TolerateMuzzleAndVehicleDisSquare;//[Offset: 0xe0, Size: 4]
	float TolerateShootPointDistanceSqured;//[Offset: 0xe4, Size: 4]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0xe8, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xec, Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0xf4, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0xf8, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0xfc, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x100, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x104, Size: 4]
	float MaxGunPosLength;//[Offset: 0x108, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x10c, Size: 4]
	float TolerateOwnerAndBulletDist;//[Offset: 0x110, Size: 4]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x114, Size: 16]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x124, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x12c, Size: 4]
	float TolerateShootRange;//[Offset: 0x130, Size: 4]
	float TolerateHitDataDelayTime;//[Offset: 0x134, Size: 4]
	float TolerateHitDataDelayTimeShootCorner;//[Offset: 0x138, Size: 4]
	PingDifVerifyStr[] PingDifVerifyData;//[Offset: 0x13c, Size: 12]
	PingDifVerifyStr[] PingDifVerifyDataAI;//[Offset: 0x148, Size: 12]
	VictimPingVerifyStr[] VictimPingVerifyData;//[Offset: 0x154, Size: 12]
	VictimPingVerifyStr[] VictimPingVerifyDataAI;//[Offset: 0x160, Size: 12]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	float BonePointTorelate;//[Offset: 0x170, Size: 4]
	float VerifyMuzImpDirIgnoreDis;//[Offset: 0x174, Size: 4]
	float TolMuzImpDir2BulletDir;//[Offset: 0x178, Size: 4]
	float TolMuzImpDir2ControlRot;//[Offset: 0x17c, Size: 4]
	int VerifyMuzImpDirRecordTime;//[Offset: 0x180, Size: 4]
	float TolShootPos2History;//[Offset: 0x184, Size: 4]
	float TolShootPos2History2;//[Offset: 0x188, Size: 4]
	int VerifyShootPosInHistoryRecordTime;//[Offset: 0x18c, Size: 4]
	bool VerifyMuzzleLocusIgnoreFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool VerifyMuzzleLocusIgnoreShotGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	float VerifyMuzzleLocusIgnoreDis;//[Offset: 0x194, Size: 4]
	float TolMuzLocusXMin;//[Offset: 0x198, Size: 4]
	float TolMuzLocusXMax;//[Offset: 0x19c, Size: 4]
	float TolMuzLocusYMin;//[Offset: 0x1a0, Size: 4]
	float TolMuzLocusYMax;//[Offset: 0x1a4, Size: 4]
	float TolMuzLocusZMin;//[Offset: 0x1a8, Size: 4]
	float TolMuzLocusZMax;//[Offset: 0x1ac, Size: 4]
	float TolMuzLocusLengthMax;//[Offset: 0x1b0, Size: 4]
	float TolHead2ShootPosLength3;//[Offset: 0x1b4, Size: 4]
	float TolHead2ShootPosLength4;//[Offset: 0x1b8, Size: 4]
	float TolGun2ShootPosLength1;//[Offset: 0x1bc, Size: 4]
	float TolGun2ShootPosLength2;//[Offset: 0x1c0, Size: 4]
	float VerifyRecentMovementTorelateTime;//[Offset: 0x1c4, Size: 4]
	int VerifyRecentMovementTorelateNum1;//[Offset: 0x1c8, Size: 4]
	int VerifyRecentMovementTorelateNum2;//[Offset: 0x1cc, Size: 4]
	float ShootCornerMinLagTime;//[Offset: 0x1d0, Size: 4]
	float ShootCornerMaxDotValue;//[Offset: 0x1d4, Size: 4]
	float ShootCornerMinPingDiff;//[Offset: 0x1d8, Size: 4]
	float ShootCornerMinDisDiff;//[Offset: 0x1dc, Size: 4]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x1e4, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1e8, Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x1ec, Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x1f0, Size: 4]
	float TolerateVehicleDis;//[Offset: 0x1f4, Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x1f8, Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x1fc, Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x200, Size: 4]
	float TolerateCharacterDis;//[Offset: 0x204, Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x208, Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x20c, Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x210, Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x214, Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x218, Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x21c, Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x220, Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x224, Size: 4]
	float TolerateNetDelay;//[Offset: 0x228, Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x22c, Size: 4]
	float GrayWeaponAndShootAngle;//[Offset: 0x230, Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x234, Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x238, Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x23c, Size: 4]
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x240, Size: 12]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0x24c, Size: 12]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x258, Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x25c, Size: 4]
	float fShootBoxMaxScaleInShootCorner;//[Offset: 0x260, Size: 4]
	Character* CharacterOwner;//[Offset: 0x264, Size: 4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x268, Size: 24]
	Vector LastImpactPoint;//[Offset: 0x280, Size: 12]
	bool CacheIsShooterPosBlockVictimPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	bool CacheIsShootPosBlockImpactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool CacheIsShootCornerSituation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	float CacheShootPingDiff;//[Offset: 0x29c, Size: 4]
	float ShooterNetDelayMinSeconds;//[Offset: 0x2a4, Size: 4]
	float ShooterNetDelayMaxSeconds;//[Offset: 0x2a8, Size: 4]
	<enum,IndefiniteVerifyCfg> IndefiniteVerifyCfg;//[Offset: 0x2ac, Size: 60]
	<enum,int> IndefiniteVerifyPassCount;//[Offset: 0x2e8, Size: 60]
	<enum,int> IndefiniteVerifyFailCount;//[Offset: 0x324, Size: 60]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	static float Stat_SimulatedCharacterServerTime(const Character* InChara);// 0x369e9d8
	float SimulatedCharacterServerTime();// 0x359773c
	void SetIndefiniteVerifyCfg(enum Type, int InCountThreshold, float InPercentThreshold);// 0x369e8d8
	float ServerLatestTransformUpdateTimeStamp();// 0x35891cc
	float ServerLatestTimeStamp();// 0x350b31c
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x369e7f4
	void OnCharacterStartInit();// 0x369e7e0
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x369e708
	bool GetVictimPingVerifyData(float PingDif, out VictimPingVerifyStr OutData, bool IsAI);// 0x369e5e8
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x369e524
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x369e460
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x369e3e0
	bool GetPingDifVerifyData(float PingDif, out PingDifVerifyStr OutData, bool IsAI);// 0x369e2c0
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x369e1fc
	int GetIndefiniteVerifyCount(enum VerifyType, bool IsPass);// 0x369e130
	static float GetCharacterPredictionSeconds(const Character* InChara);// 0x369e0b8
	enum ConditionChanggeIndefiniteVerify(out const ShootVerifyParameter VerifyData, enum VerifyType);// 0x369dfd8
	bool CheckIsShootCorner(out const ShootVerifyParameter VerifyData);// 0x369df40
	int ChangeIndefiniteVerifyCount(enum VerifyType, bool IsPass, int Var);// 0x369de2c
	float AuthorityCharacterServerTime();// 0x369de04
	void AddVictimPingVerifyData(float MinPing, float MaxPing, float TorLagTime, float ShootCornerBoxScale, bool IsAI);// 0x369dc6c
	void AddPingDifVerifyData(float MinPing, float MaxPing, float TorLagTime, float ShootCornerBoxScale, bool IsAI);// 0x369dad4

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0, Size: 4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PingDifVerifyStr
	float MinPingDif;//[Offset: 0x0, Size: 4]
	float MaxPingDif;//[Offset: 0x4, Size: 4]
	float TolLagTime;//[Offset: 0x8, Size: 4]
	float ShootCornerBoxScale;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VictimPingVerifyStr
	float MinPingDif;//[Offset: 0x0, Size: 4]
	float MaxPingDif;//[Offset: 0x4, Size: 4]
	float TolLagTime;//[Offset: 0x8, Size: 4]
	float ShootCornerBoxScale;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 2]
	uint16 NetDelay;//[Offset: 0xc, Size: 2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IndefiniteVerifyCfg
	int CountThreshold;//[Offset: 0x0, Size: 4]
	float PercentThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShootVerifyParameter
	STExtraShootWeapon* Weapon;//[Offset: 0x0, Size: 4]
	STExtraCharacter* Shooter;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UAEMonsterAnimListComponentBase.UAEAnimListComponentBase.ActorComponent.Object
	bool bCacheAnimAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 1]
	MonsterAnimPhaseData[] MonsterAnimDatas;//[Offset: 0x174, Size: 12]
	<byte,AnimationAsset*> MonsterAnimDatasMap;//[Offset: 0x180, Size: 60]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom1;//[Offset: 0x1bc, Size: 12]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom2;//[Offset: 0x1c8, Size: 12]
	delegate OnAnimLoadedFinished;//[Offset: 0x1d4, Size: 12]
	int RandomAnimID;//[Offset: 0x1e0, Size: 4]
	void OnAsyncLoadingFinished(MonsterAsyncloadAnimParams loadAnimParams);// 0x39db2e0
	MonsterAnimPhaseData GetMonsterAnimPhaseDataByType(byte PoseType);// 0x39db1f4
	AnimationAsset* GetMonsterAnimByType(byte PoseType);// 0x39db174

--------------------------------
Class: MonsterAnimPhaseData
	byte PosType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: MonsterAsyncloadAnimParams
	byte PosType;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MeleeAttackSetting
	float ImpulseLaunchScale;//[Offset: 0x0, Size: 4]
	float ImpulseLaunchZOffset;//[Offset: 0x4, Size: 4]
	bool bConsiderAttackerVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float MinAttackerVelocity;//[Offset: 0xc, Size: 4]
	float MaxAttackerVelocity;//[Offset: 0x10, Size: 4]
	float MaxVelocityInfluenceScale;//[Offset: 0x14, Size: 4]
	bool bShouldAffectZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: MonsterIdleIndex
	int PlayedIdleIndex;//[Offset: 0x0, Size: 4]
	int ForceReplicateTag;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MonsterAnimListComponent.CachedAnimListComponentBase.LuaActorComponent.ActorComponent.Object
	bool bEnableAutoCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 1]
	MonsterAnimData* MonsterAnimDataAsset;//[Offset: 0x14c, Size: 4]
	<FName,MonsterAnimCache> CachedAsset;//[Offset: 0x150, Size: 60]
	bool bIsLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	bool bHasLoadingFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 1]
	void OnMonsterOwnerRespawned(STExtraSimpleCharacter* Monster);// 0x36cffd4
	bool GetIsLoadingAnimAssets();// 0x36cffb8
	void AutoCacheInstanceAnimVars(AnimInstance* Instance);// 0x36cff40

--------------------------------
Class: CachedAnimListComponentBase.LuaActorComponent.ActorComponent.Object
	bool bLoadAnimAssetsBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	bool bLoadAnimAssetsOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 1]
	void RequestLoadAnimAssets(FString Reason);// 0x359a3e8
	void OnAnimAssetsLoadingFinished(const FString Reason);// 0x359a288
	BlendSpace1D* GetBlendSpace1D(FString AnimAssetName);// 0x359a1c4
	BlendSpace* GetBlendSpace(FString AnimAssetName);// 0x359a100
	AnimSequence* GetAnimSequence(FString AnimAssetName);// 0x359a03c
	AnimMontage* GetAnimMontage(FString AnimAssetName);// 0x3599f78
	AnimationAsset* GetAnimAsset(out const FName AnimAssetName, FString Reason);// 0x3599e50
	void ClearCachedAssets();// 0x3599e34
	void CacheAnimInstanceAnimAssetVars(FString Reason);// 0x3599d70

--------------------------------
Class: MonsterAnimData.DataAsset.Object
	MonsterAnimVarName[] AnimVarNames;//[Offset: 0x24, Size: 12]
	MonsterAnimAsset[] AnimAssets;//[Offset: 0x30, Size: 12]

--------------------------------
Class: MonsterAnimVarName
	FName AnimVarName;//[Offset: 0x0, Size: 8]
	FString Description;//[Offset: 0x8, Size: 12]

--------------------------------
Class: MonsterAnimAsset
	UAEBlackboardKeySelector AnimVarName;//[Offset: 0x0, Size: 8]
	AnimationAsset*[] AnimSoftPtr;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: MonsterAnimCache
	int LoadedIndex;//[Offset: 0x0, Size: 4]
	AnimationAsset* Asset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ExFootIKComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 1]
	float UpwardDetectionDistance;//[Offset: 0x664, Size: 4]
	float DownwardDetectionDistance;//[Offset: 0x668, Size: 4]
	float DetectionSphereRadius;//[Offset: 0x66c, Size: 4]
	byte DetectionCollisionChannel;//[Offset: 0x670, Size: 1]
	float InterpSpeed;//[Offset: 0x674, Size: 4]
	bool bEnableIKEffectorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	bool bEnableKEffectorOffsetMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 1]
	float ScaleOfPawn;//[Offset: 0x67c, Size: 4]
	<FName,ExFootIKInfo> FootIKInfos;//[Offset: 0x680, Size: 60]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	float TickFrequencyPerSecond;//[Offset: 0x6c0, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	Vector IKEffectorOffsetMinValue;//[Offset: 0x6c8, Size: 12]
	void GetIKEffectorRotation(out Rotator OutIKEffectorRotation, out bool bOutIsValid, out const FName InFootIKName);// 0x362f6ac
	Vector GetIKEffectorOffsetMinValue();// 0x362f680
	void GetIKEffectorOffset(out Vector OutIKEffectorOffset, out bool bOutIsValid, out const FName InFootIKName);// 0x362f4a0

--------------------------------
Class: ExFootIKInfo
	FName IKBoneOrSocketName;//[Offset: 0x0, Size: 8]
	FName FixedBoneOrSocketName;//[Offset: 0x8, Size: 8]
	Vector IKBoneOrSocketOffset;//[Offset: 0x10, Size: 12]
	Vector IKEffectorOffset;//[Offset: 0x1c, Size: 12]
	Rotator IKEffectorRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x8, Size: 20]
	Vector Origin;//[Offset: 0x1c, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x28, Size: 12]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 4]
	float MinimumDamage;//[Offset: 0x4, Size: 4]
	float InnerRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	float DamageFalloff;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x14c, Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x158, Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x164, Size: 12]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x170, Size: 12]
	delegate OnHPPreChange;//[Offset: 0x17c, Size: 12]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x188, Size: 12]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x194, Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	<int,float> DamageFactor;//[Offset: 0x1a4, Size: 60]
	float HPMax;//[Offset: 0x1e0, Size: 4]
	float HP;//[Offset: 0x1e4, Size: 4]
	<enum,float> DamageScaleMap;//[Offset: 0x1e8, Size: 60]
	bool ShowHealthUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	int UGCHUDStatus;//[Offset: 0x228, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x22c, Size: 12]
	bool CanMaintained;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	bool CanGasCan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 1]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 1]
	float FuelMax;//[Offset: 0x23c, Size: 4]
	float Fuel;//[Offset: 0x240, Size: 4]
	bool bCanOilInStation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool ShowFuelUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	int FuelIntervalCount;//[Offset: 0x248, Size: 4]
	float DelayDestroySeconds;//[Offset: 0x250, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x254, Size: 4]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x258, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x268, Size: 12]
	VehicleDamageRecord[] DamageRecords;//[Offset: 0x274, Size: 12]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3a51e5c
	void TranslateFuelToReplicatedRatio();// 0x3a51e48
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3a51c3c
	void TakeDamageByBoneNameInner(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3a51a20
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3a51804
	void SetUGCHUDStatus(int Status);// 0x3a5178c
	void SetHPMax(float InHPmax, bool bChangeHP);// 0x3a516c8
	void SetHPFuel(float InHP, float InFuel);// 0x3a5160c
	void SetHP(float InHP);// 0x3a51598
	void SetFuelMax(float InFuelmax, bool bChangeFuel);// 0x3a514d4
	void SetFuel(float InFuel);// 0x3a5145c
	void SetDelayDestroySeconds(float InSeconds);// 0x3a513e4
	void RPC_Multicast_VehicleTakeDamage(float Damage, int LeftHP, int DamageType, Actor* DamageCauser);// 0x3a51294
	void RefreshWheelState();// 0x3a51280
	void OnRep_WheelsCurrentHP();// 0x3a5126c
	void OnRep_HP();// 0x3a51258
	void OnRep_Fuel();// 0x3a51244
	bool NoFuel();// 0x3a5121c
	void Maintenance(float addpercenthp, bool fixtire);// 0x3a51158
	bool IsDontDamage();// 0x3a5113c
	bool IsDontConsumeFuel();// 0x3a51120
	bool IsDestroyed();// 0x3a510f8
	int GetWheelsHPNum();// 0x3a510d0
	float GetWheelHPMax(int WheelIdx);// 0x3a51050
	float GetWheelHP(int WheelIdx);// 0x3a50fd0
	float GetVehicleHPMax();// 0x3a50fa8
	float GetVehicleHP();// 0x35cd4ec
	int GetUGCHUDStatus();// 0x3a50f80
	float GetFuelMax();// 0x3a50f58
	float GetFuelConsumeFactor();// 0x3a50f30
	float GetFuel();// 0x3a50f08
	float GetDelayDestroySeconds();// 0x3a50ee0
	bool CanVehicleBeMaintence();// 0x3a50ec4
	bool CanVehicleBeGasCan();// 0x3a50ea8
	void CalculateDestroyVehicleWheelFlow(Controller* Instigator);// 0x3a50e30

--------------------------------
Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleDamageRecord
	Controller* Instigator;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int DamageType;//[Offset: 0xc, Size: 4]
	int AdditionalParam;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	delegate OnContactWater;//[Offset: 0x2b0, Size: 12]
	delegate OnEnterWater;//[Offset: 0x2bc, Size: 12]
	bool bUseBuoyancyEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	OceanManager* OceanManager;//[Offset: 0x2cc, Size: 4]
	float MeshDensity;//[Offset: 0x2d0, Size: 4]
	float FluidDensity;//[Offset: 0x2d4, Size: 4]
	float FluidLinearDamping;//[Offset: 0x2d8, Size: 4]
	float FluidAngularDamping;//[Offset: 0x2dc, Size: 4]
	Vector VelocityDamper;//[Offset: 0x2e0, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x2f0, Size: 4]
	float TestPointRadius;//[Offset: 0x2f4, Size: 4]
	Vector[] TestPoints;//[Offset: 0x2f8, Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 1]
	bool SnapToSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x308, Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x314, Size: 12]
	bool bEnableZOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 1]
	float StayUprightStiffness;//[Offset: 0x324, Size: 4]
	float StayUprightDamping;//[Offset: 0x328, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x32c, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x33c, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x340, Size: 4]
	byte TickGroup;//[Offset: 0x344, Size: 1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x348, Size: 12]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x354, Size: 12]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x500, Size: 4]
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x72cf710
	void OnEnterWaterDelegate__DelegateSignature(bool IsUnderWater);// 0x49216cc
	void OnContactWaterDelegate__DelegateSignature(bool IsContactingWater);// 0x49216cc
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x72cf690
	bool IsFloatingOnWater();// 0x72cf668
	bool IsEntirelyUnderWater();// 0x72cf630
	bool IsContactedWater();// 0x72cf608
	void EndableUprightConstraint(bool bEnable);// 0x72cf588
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x72cf4bc

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	Vector GlobalWaveDirection;//[Offset: 0x30c, Size: 12]
	float GlobalWaveSpeed;//[Offset: 0x318, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x31c, Size: 4]
	float DistanceCheckAbove;//[Offset: 0x320, Size: 4]
	float DistanceCheckBelow;//[Offset: 0x324, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x328, Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x334, Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x340, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	float ModulationStartHeight;//[Offset: 0x348, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x34c, Size: 4]
	float ModulationPower;//[Offset: 0x350, Size: 4]
	Landscape* Landscape;//[Offset: 0x354, Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x358, Size: 4]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x380, Size: 12]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x394, Size: 12]
	Vector[] WaterBoxExtends;//[Offset: 0x3a0, Size: 12]
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x72d0aec
	LinearColor GetHeightmapPixel(float U, float V);// 0x72d0a1c

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x328, Size: 4]
	Guid LandscapeGuid;//[Offset: 0x32c, Size: 16]
	Guid BoundingGuid;//[Offset: 0x33c, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x34c, Size: 8]
	int MaxLODLevel;//[Offset: 0x354, Size: 4]
	float LODDistanceFactor;//[Offset: 0x358, Size: 4]
	byte LODFalloff;//[Offset: 0x35c, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x360, Size: 4]
	float LODDistributionSetting;//[Offset: 0x364, Size: 4]
	byte NearMaxLOD_Baked;//[Offset: 0x368, Size: 1]
	float NearFactor_Baked;//[Offset: 0x36c, Size: 4]
	float NearExtent_Baked;//[Offset: 0x370, Size: 4]
	float FarFactor_Baked;//[Offset: 0x374, Size: 4]
	float LandscapeRoughness;//[Offset: 0x378, Size: 4]
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	float[] ImproveLODValues;//[Offset: 0x380, Size: 12]
	byte NearMaxLOD;//[Offset: 0x38c, Size: 1]
	float NearFactor;//[Offset: 0x390, Size: 4]
	float NearExtent;//[Offset: 0x394, Size: 4]
	float FarFactor;//[Offset: 0x398, Size: 4]
	int StaticLightingLOD;//[Offset: 0x39c, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x3a0, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x3a4, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x3ac, Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x3b0, Size: 4]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x3b4, Size: 60]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x3f4, Size: 12]
	float MinGrassWeightThreshold;//[Offset: 0x400, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x404, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x408, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x40c, Size: 4]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x410, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x418, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x420, Size: 12]
	LandscapeAOTextureDataAsset* LandscapeAOTextureDataAsset;//[Offset: 0x42c, Size: 4]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x430, Size: 12]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x43c, Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	float StaticLightingResolution;//[Offset: 0x494, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x498, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x498, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x498, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x499, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49a, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49a, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x49c, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4a0, Size: 24]
	int CollisionMipLevel;//[Offset: 0x4b8, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x4bc, Size: 4]
	float CollisionThickness;//[Offset: 0x4c0, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x4c8, Size: 320]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x608, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x608, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x60c, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x610, Size: 4]
	int NumSubsections;//[Offset: 0x614, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x618, Size: 1]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x618, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x619, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 1]
	Texture2D* MaskTextureUsedByGrassClear;//[Offset: 0x61c, Size: 4]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x55dd3b4
	void ChangeLODDistributionSettingConsoleVariable();// 0x3585a04
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x363dc98
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x34f5ff4
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x37e28a8

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x660, Size: 12]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x66c, Size: 12]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x678, Size: 12]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	float Width;//[Offset: 0x34, Size: 4]
	float SideFalloff;//[Offset: 0x38, Size: 4]
	float EndFalloff;//[Offset: 0x3c, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40, Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c, Size: 12]
	Box Bounds;//[Offset: 0x58, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74, Size: 4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20, Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40, Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54, Size: 12]
	Box Bounds;//[Offset: 0x60, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 4]
	float TangentLen;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x1c, Size: 12]
	StaticMesh* GrassMesh;//[Offset: 0x28, Size: 4]
	float GrassDensity;//[Offset: 0x2c, Size: 4]
	float PlacementJitter;//[Offset: 0x30, Size: 4]
	int StartCullDistance;//[Offset: 0x34, Size: 4]
	int EndCullDistance;//[Offset: 0x38, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 4]
	float GrassDensity;//[Offset: 0x4, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float PlacementJitter;//[Offset: 0xc, Size: 4]
	int StartCullDistance;//[Offset: 0x10, Size: 4]
	int EndCullDistance;//[Offset: 0x14, Size: 4]
	int MinLOD;//[Offset: 0x18, Size: 4]
	enum Scaling;//[Offset: 0x1c, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x20, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x28, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x30, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3b, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x660, Size: 4]
	int SectionBaseY;//[Offset: 0x664, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x668, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x66c, Size: 4]
	int NumSubsections;//[Offset: 0x670, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x674, Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x678, Size: 4]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x67c, Size: 60]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x6b8, Size: 24]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d0, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x6d4, Size: 12]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x6e0, Size: 12]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x6ec, Size: 60]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x728, Size: 12]
	Texture2D*[] WeightmapTextures;//[Offset: 0x734, Size: 12]
	int VisibilityLayerChannel;//[Offset: 0x740, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x744, Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x750, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x760, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x770, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x780, Size: 4]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x784, Size: 60]
	FString VisibleVisibilityLayer;//[Offset: 0x7c0, Size: 12]
	Box CachedLocalBox;//[Offset: 0x7cc, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x7e8, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x804, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x814, Size: 12]
	int CollisionMipLevel;//[Offset: 0x820, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x824, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x828, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x82c, Size: 4]
	float StaticLightingResolution;//[Offset: 0x830, Size: 4]
	int ForcedLOD;//[Offset: 0x834, Size: 4]
	int LODBias;//[Offset: 0x838, Size: 4]
	int MobileVertexHoleMaxLOD;//[Offset: 0x83c, Size: 4]
	float[] LODDeltaVertex;//[Offset: 0x84c, Size: 12]
	float MaxDeltaVertex;//[Offset: 0x858, Size: 4]
	Guid stateID;//[Offset: 0x85c, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x86c, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x87c, Size: 4]
	StaticMesh* OccluderMesh;//[Offset: 0x880, Size: 4]
	byte MobileBlendableLayerMask;//[Offset: 0x884, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x888, Size: 4]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x88c, Size: 60]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x8c8, Size: 12]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x8d4, Size: 4]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d8, Size: 1]
	uint16[] CachedHeightData;//[Offset: 0x8dc, Size: 12]
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x930, Size: 1]
	FName UsedOtherMaterialName;//[Offset: 0x940, Size: 8]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 12]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 4]
	byte WeightmapTextureIndex;//[Offset: 0x4, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x5, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28, Size: 4]
	float Hardness;//[Offset: 0x2c, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x660, Size: 12]
	int SectionBaseX;//[Offset: 0x66c, Size: 4]
	int SectionBaseY;//[Offset: 0x670, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x674, Size: 4]
	float CollisionScale;//[Offset: 0x678, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x67c, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x680, Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x68c, Size: 16]
	Box CachedLocalBox;//[Offset: 0x69c, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x6b8, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x6e0, Size: 12]

--------------------------------
Class: LandscapeAOTextureDataAsset.DataAsset.Object
	uint32 DataSize;//[Offset: 0x20, Size: 4]
	byte[] LandscapeAOPlatformData;//[Offset: 0x24, Size: 12]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x884, Size: 12]
	int NumBuiltInstances;//[Offset: 0x890, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x898, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x8b4, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x8d0, Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x8dc, Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e8, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x908, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x90c, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92d, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x930, Size: 4]
	bool ShowInstances(out const int[] InstanceIndices, out const Transform[] InstanceTransforms);// 0x6501bbc
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x6501ae0

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x790, Size: 12]
	int InstancingRandomSeed;//[Offset: 0x79c, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x7a0, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x7a4, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x7a8, Size: 12]
	int[] RemovedInstances;//[Offset: 0x7b4, Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x820, Size: 4]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x824, Size: 60]
	int NumPendingLightmaps;//[Offset: 0x864, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x868, Size: 12]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x650dc50
	bool ShowInstances(out const int[] InstanceIndices, out const Transform[] InstanceTransforms);// 0x6501bbc
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x650db90
	int[] ReplaceAllInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0x650d9e4
	bool RemoveInstances(out const int[] InstanceIndices);// 0x6501ae0
	bool RemoveInstance(int InstanceIndex);// 0x650d95c
	bool HideInstance(out const int[] InstanceIndices);// 0x650d880
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x650d710
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x650d550
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x650d3b8
	int GetInstanceCount();// 0x650d390
	void ClearInstances();// 0x38316bc
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x650d2b0
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices, bool bMarkRenderStateDirty);// 0x650d0b0
	int AddInstance(out const Transform InstanceTransform);// 0x650cfc0

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x67c, Size: 4]
	Vector Direction;//[Offset: 0x680, Size: 12]
	float SpeedValue;//[Offset: 0x68c, Size: 4]
	float WaveForceMultiplier;//[Offset: 0x690, Size: 4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x694, Size: 12]
	float TimeScaleOffset;//[Offset: 0x6a0, Size: 4]
	float Offset;//[Offset: 0x6a4, Size: 4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	float SpeedAttenuationFromSpline;//[Offset: 0x6ac, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	float ZOffset;//[Offset: 0x6b4, Size: 4]
	float CellSizeX;//[Offset: 0x6b8, Size: 4]
	float CellSizeY;//[Offset: 0x6bc, Size: 4]
	<float,WaterBoxCell> Cells;//[Offset: 0x6c0, Size: 60]
	int KeyFactor;//[Offset: 0x6fc, Size: 4]

--------------------------------
Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 20]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 20]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 20]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 12]
	float WaveZ;//[Offset: 0xc, Size: 4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 12]
	float Speed;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x2b0, Size: 4]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2b8, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x2c0, Size: 4]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2c8, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x2e0, Size: 4]
	delegate OnConstraintBroken;//[Offset: 0x2e4, Size: 12]
	ConstraintInstance ConstraintInstance;//[Offset: 0x2f0, Size: 416]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x65cb068
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x65cafe8
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x65caf2c
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x65cae70
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x65cadb4
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x65cad30
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x65cac10
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x65cab8c
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x65caa6c
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x65ca96c
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x65ca8a4
	void SetDisableCollision(bool bDisableCollision);// 0x65ca824
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x65ca75c
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x65ca640
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x65ca520
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x65ca3c4
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x65ca340
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x65ca270
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x65ca1f0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x65ca120
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x65ca064
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x65c9fa8
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x65c9eec
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x65c9e68
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x65c9d98
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x65c9c98
	void SetAngularDriveMode(byte DriveMode);// 0x65c9c20
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x65c9b58
	bool IsBroken();// 0x65c9b30
	float GetCurrentTwist();// 0x65c9b08
	float GetCurrentSwing2();// 0x65c9ae0
	float GetCurrentSwing1();// 0x65c9ab8
	Transform GetConstraintWorldTransform(byte Frame);// 0x65c9a10
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x65c9938
	void BreakConstraint();// 0x65c9924

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x14c, Size: 12]
	delegate OnActorHitFromClient;//[Offset: 0x158, Size: 12]
	float MinCorrectionInterval;//[Offset: 0x164, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x168, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x16c, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x170, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0x174, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0x178, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x17c, Size: 4]
	float AllowMaxLandDiffSqAtServer;//[Offset: 0x180, Size: 4]
	float AllowMaxLinearSpeedRatio;//[Offset: 0x184, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x188, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x18c, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x190, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x194, Size: 4]
	float MinCorrectionDistanceSqAtClientLessDrag;//[Offset: 0x198, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x19c, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x1a0, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x1a4, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x1a8, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	float StaticFixLocation;//[Offset: 0x1b0, Size: 4]
	float StaticFixAngel;//[Offset: 0x1b4, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x1b8, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x1bc, Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c3, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x1c4, Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x1c8, Size: 4]
	float MaxAllowJumpHeight;//[Offset: 0x1cc, Size: 4]
	float MaxSyncSpeedZDelta;//[Offset: 0x1d0, Size: 4]
	float MaxSyncSpeedZDeltaStep1;//[Offset: 0x1d4, Size: 4]
	ClientSmoothCorrection ClientSmoothData;//[Offset: 0x1d8, Size: 52]
	STExtraVehicleBase* VehicleOwner;//[Offset: 0x22c, Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x36c, Size: 60]
	VehicleHitRewindThreshold VehicleHitRewindThreshold;//[Offset: 0x3e8, Size: 24]
	bool bEnableValidateVelNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	float VelZThreshold_ValidateGround;//[Offset: 0x404, Size: 4]
	float GroundSinTolerance;//[Offset: 0x408, Size: 4]
	VehicleStuntComponent* VehicleStunt;//[Offset: 0x500, Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x3a75194
	void ServerMoveWorldGravityReliably(float ClientGravity);// 0x3a750e0
	void ServerMoveUnreliably_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetMovement4W Movement);// 0x3a74f04
	void ServerMoveReliably_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetMovement4W Movement);// 0x3a74d28
	void ServerHit_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetHit4W Movement);// 0x3a74b94
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x3a749d0
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x3a747d8
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x3a745e0
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x3a74384
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x3a74178
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x3a73f68
	void SendClientHitPointToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, PrimitiveComponent* HitActorComponent, const Vector_NetQuantize100 NormalImpulse, const Vector_NetQuantize100 HitPoint);// 0x3a73c44
	void SendClientHitCharacterToServerReliably(float ServerTimeStamp, const Vector_NetQuantize100 VehicleLocation, const Vector_NetQuantizeNormal VehicleRotator, float VehicleVelocitySize, const Vector_NetQuantize100 AngularVelocity, STExtraBaseCharacter* HitCharacter, float HitTimeStamp, const Vector_NetQuantize100 HitLocation);// 0x3a73998
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3a737f4
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3a73650
	void OnDriverRide();// 0x3a7363c
	void HandleProtectionEnable(bool InEnable);// 0x3a735bc
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3a734b4
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x3a7331c
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3a73214
	void HandleOnDSOptimGrayPublishFlagsChanged();// 0x3a73200
	Actor*[] GetRiders();// 0x3a73140
	bool GetPrimitiveCompRigidBodyState(PrimitiveComponent* PrimitiveComp, out RigidBodyState OutState, FName BoneName);// 0x3a72fd0
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x3a72f44
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x3a72e64
	void DragUnderGround();// 0x3a72e50
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x3a72d30
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x3a72bc0
	bool CheckAndLoadLandscape(float DeltaTime);// 0x396bf10
	Vector ApplyRigidBodyState(out RigidBodyState NewState);// 0x3a72ad0
	void AdjustWorldGravityReliably(bool bSimulatePhysics, float ServerWorldGravity);// 0x3a729c0
	bool AdjustFloorPosition(out const Vector ClientLocation, out const Actor*[] Riders, out Vector OutLocation);// 0x3a72844

--------------------------------
Class: ClientSmoothCorrection
	float ConfigSmoothSeconds;//[Offset: 0x4, Size: 4]
	float ConfigSmoothMinDistanceSq;//[Offset: 0x8, Size: 4]
	float ConfigSmoothMaxDistanceSq;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: VehicleHitRewindThreshold
	float ValidDeltaSeconds;//[Offset: 0x0, Size: 4]
	float VehicleRewindDistance;//[Offset: 0x4, Size: 4]
	float VehicleRewindAngle;//[Offset: 0x8, Size: 4]
	float VelocitySize;//[Offset: 0xc, Size: 4]
	float AngularVelocityInDegreesSize;//[Offset: 0x10, Size: 4]
	float HitCharacterDistance;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleStuntComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	bool bIsHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool bEnableJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	delegate OnVehicleJump;//[Offset: 0x158, Size: 12]
	int[] DisabledWheelsWhenJump;//[Offset: 0x164, Size: 12]
	float DelayToEnableWheelsAfterJump;//[Offset: 0x170, Size: 4]
	int[] LandedWheelsWhenJump;//[Offset: 0x174, Size: 12]
	CurveFloat* JumpSpeedCurve;//[Offset: 0x180, Size: 4]
	CurveFloat* PitchCurveWhenJump;//[Offset: 0x184, Size: 4]
	float MaxJumpDuration;//[Offset: 0x188, Size: 4]
	bool bEnableSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	float SprintDuration;//[Offset: 0x1ac, Size: 4]
	VehicleSprintProxyBase* SprintProxy;//[Offset: 0x1b0, Size: 4]
	float ServerSprintFactor;//[Offset: 0x1b4, Size: 4]
	void VehicleJumpDelegate__DelegateSignature(float HoldingTime);// 0x49216cc
	void Sprint(bool InEnable);// 0x3a71458
	void ServerSprint(bool InEnable, float InSprintFactor);// 0x3a71348
	void ServerJump_Vehicle4W(int CorrectionId, float TimeStamp, const VehicleNetMovement4W Movement4W, float HoldingTime);// 0x3a7111c
	void ServerJump(int CorrectionId, float TimeStamp, Vector_NetQuantize100 ClientLocation, Vector_NetQuantizeNormal ClientRotation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantize100 ClientAngularVelocity, float InHoldingTime);// 0x3a70df8
	void ServerHold(bool bEnable);// 0x3a70d30
	void OnRep_ServerSprintFactor();// 0x34f4004
	void Jump(float InHoldingTime);// 0x3a70cb8
	bool IsInSprint();// 0x3a70c90
	bool IsInJumping();// 0x3a70c74
	void Hold(bool bEnable);// 0x3a70bf4
	void HandleSeatOccupiersChanged();// 0x3a70be0
	void HandleSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIndex);// 0x3a70ae0
	void HandleSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIndex);// 0x3a709e0
	void HandleHealthStateChanged(enum InHealthState);// 0x3a70968
	float GetSprintFactor();// 0x3a70940
	float GetSprintDuration();// 0x3a70924
	float GetJumpMaxHoldingTime();// 0x3a708fc
	void EnableWheelsAfterJump();// 0x3a708e8
	void ClearJump();// 0x3a708d4

--------------------------------
Class: VehicleSprintProxyBase.Object
	float GetFactor(float InDuration);// 0x3a6f8ac
	bool CheckFactor(float InSprintFactor);// 0x35b1434

--------------------------------
Class: VehicleNetMovement4W
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	RigidVehicleMovement Movement;//[Offset: 0x4, Size: 48]
	RigidVehicleMovement LandMovement;//[Offset: 0x34, Size: 48]

--------------------------------
Class: RigidVehicleMovement
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Vector LinVel;//[Offset: 0x18, Size: 12]
	Vector AngVel;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleNetHit4W
	Actor* OtherActor;//[Offset: 0x0, Size: 4]
	Vector Impulse;//[Offset: 0x4, Size: 12]
	Vector ImpactPoint;//[Offset: 0x10, Size: 12]
	RigidVehicleMovement Movement;//[Offset: 0x1c, Size: 48]

--------------------------------
Class: VehBackpackItem
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0, Size: 4]
	<uint32,float> MapRTPC;//[Offset: 0x4, Size: 60]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 1]
	byte ViewYaw;//[Offset: 0x1, Size: 1]
	byte ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x368, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x36c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x370, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool bMeshRootVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	float ArmOriginProbeSize;//[Offset: 0x378, Size: 4]
	Rotator RelativeToOwnerRotator;//[Offset: 0x37c, Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x388, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	float MinPitch;//[Offset: 0x3a0, Size: 4]
	float MinSmartPitch;//[Offset: 0x3a4, Size: 4]
	float MaxPitch;//[Offset: 0x3a8, Size: 4]
	float SmartPitchInputFactor;//[Offset: 0x3ac, Size: 4]
	float SmartYawInputFactor;//[Offset: 0x3b0, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x3b8, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x3dc, Size: 4]
	bool bKeepCameraLagWhenSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool bNoFixCameraLagWhenSpecator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	float ResultMinPitch;//[Offset: 0x404, Size: 4]
	float ResultMaxPitch;//[Offset: 0x408, Size: 4]
	Vector ArmOriginOffset;//[Offset: 0x40c, Size: 12]
	bool bIsAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	float SocketOffsetInterpSpeed;//[Offset: 0x43c, Size: 4]
	float CurAdditiveOffsetFov;//[Offset: 0x440, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x444, Size: 4]
	float LeaveMaxDistance;//[Offset: 0x448, Size: 4]
	float LeaveMaxTime;//[Offset: 0x44c, Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x458, Size: 4]
	float ApproachTime;//[Offset: 0x460, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x470, Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x474, Size: 4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	void UseBackupCameraData(bool bUse);// 0x3a6f18c
	void SetSteerCameraYaw(float InSteerCameraYaw, bool bRelativeToStartYaw);// 0x3a6f0c8
	void SetSmartCameraInput(float Yaw, float Pitch);// 0x3a6f00c
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x3a6ef8c
	void SetFreeCameraInput(Rotator deltaRot);// 0x3a6ef1c
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x3a6ee9c
	void SetBackupCameraData(out const CameraOffsetData CameraData);// 0x3a6edd0
	void ResetSmartCamera();// 0x3a6edbc
	float GetSteerCameraYaw(bool bRelativeToStartYaw);// 0x3a6ed34
	Rotator GetLookRotation();// 0x3a6ecec
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x35eaf28
	void EnableCameraProcess(bool Enable, Vector FSocketOffsetModifier, float fFOVModifier);// 0x3a6ebd8
	void DelayRotationLagEnabledEnd();// 0x34f4004
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x3a6eacc
	bool BackupCameraDataUsed();// 0x3a6ea9c
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x3a6e9e0

--------------------------------
Class: VehiclePickableComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	class PickUpWrapperActor* PickupWrapperClass;//[Offset: 0x14c, Size: 4]
	bool bEnablePickupInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	PickUpWrapperActor* PickupVehicle;//[Offset: 0x154, Size: 4]
	void PickupBy(STExtraPlayerCharacter* InCharacter);// 0x49216cc
	void OnRep_PickupVehicle();// 0x3a65914
	bool CanBePickedUp();// 0x35bc7ec

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum NoiseType;//[Offset: 0x0, Size: 1]
	float Loudness;//[Offset: 0x4, Size: 4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 4]
	float MaxRange;//[Offset: 0xc, Size: 4]

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	float RPCSyncInterval;//[Offset: 0xc0, Size: 4]
	delegate OnClientAddBuffEvent;//[Offset: 0xc4, Size: 12]
	delegate OnClientRemoveBuffEvent;//[Offset: 0xd0, Size: 12]
	delegate OnClientUpdateBuffEvent;//[Offset: 0xdc, Size: 12]
	delegate OnAddBuffEvent;//[Offset: 0xe8, Size: 12]
	<int,UAEBlackboard*> BuffBlackboardMap;//[Offset: 0xf4, Size: 60]
	BuffIncNetArray SyncBriefs;//[Offset: 0x130, Size: 24]
	BuffIncNetArray SyncRefBriefs;//[Offset: 0x148, Size: 24]
	BuffIncNetArray OwnerSyncBriefs;//[Offset: 0x160, Size: 24]
	BuffIncNetArray OwnerSyncRefBriefs;//[Offset: 0x178, Size: 24]
	<int> BriefRemoveInstIds;//[Offset: 0x190, Size: 60]
	void UpdateClientBuff(ClientSyncBrief Brief);// 0x3bc7568
	void RemoveClientBuff(int InstID);// 0x3bc74f0
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x3bc73a8
	void RemoveAllBuffs();// 0x3bc7394
	void OnRep_SyncBriefs();// 0x3bc7380
	void OnRep_OwnerSyncBriefs();// 0x3bc736c
	void OnClientUpdateBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x49216cc
	void OnClientRemoveBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x49216cc
	void OnClientAddBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x49216cc
	void OnAddBuffEvent__DelegateSignature(int BuffID, int SkillID, bool IsExist, Actor* Causer);// 0x49216cc
	bool HasSkillID(int SkillID);// 0x3bc72ec
	bool HasBuff(int BuffID);// 0x3bc726c
	BuffConfigSubsystem* GetSubsystem();// 0x3bc7244
	STBuff* GetSTBuffByBuffID(int BuffID);// 0x3bc71c4
	byte GetRealOwnerRoleSafety();// 0x37376f0
	int GetBuffLayerCount(int InstID, int CauseSkillID);// 0x3bc7100
	BuffInstInfo[] GetBuffInfoByBuffID(int BuffID);// 0x3bc6ff8
	bool GetBuffInfo(int InstID, out BuffInstInfo OutBuff);// 0x3bc6f18
	float GetBuffDuration(int InstID, int CauseSkillID);// 0x3bc6e54
	float GetBuffDSEndTime(int InstID, int CauseSkillID);// 0x3bc6d90
	BuffInstInfo[] GetAllBuffInfo();// 0x3bc6cd0
	void ClearBuffs(bool bClearAll, bool bImmediately);// 0x3bc6c00
	bool ChangeDuration(int InstID, float Duration);// 0x3bc6b3c
	int AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID, int Level);// 0x3bc69a8

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x1c, Size: 720]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x7f162b8
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x7f161e4
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x7f16030
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x7f15f5c
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x7f15e88
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x7f15db4
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x7f15ce0
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x7f15c0c
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x7f15b38
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x7f15a64
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x7f15988
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x7f158f4
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x7f15860
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x7f157cc
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x7f15738
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x7f156a4
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x7f15610
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x7f1557c
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x7f154e8
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x7f15454
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x7f153c0
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x7f1532c
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x7f15298
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x7f151b4
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x7f15110
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x7f14ff4
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x7f14f50
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x7f14ebc
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x7f14e20
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x7f14d8c
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x7f14cf8
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x7f14c64
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x7f14bd0
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x7f14b3c
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x7f14a58
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x7f148ac

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x3c, Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x78, Size: 60]
	<FName,byte> EnumParamMap;//[Offset: 0xb4, Size: 60]
	<FName,int> IntParamMap;//[Offset: 0xf0, Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x12c, Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x168, Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1a4, Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1e0, Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x21c, Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x258, Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x294, Size: 60]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	byte DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 12]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: BuffIncNetArray
	BuffNetArrayUnit[] IncArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BuffNetArrayUnit
	ClientSyncBrief Unit;//[Offset: 0x0, Size: 32]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0, Size: 4]
	byte LayerCount;//[Offset: 0x4, Size: 1]
	byte Level;//[Offset: 0x5, Size: 1]
	int BuffID;//[Offset: 0x8, Size: 4]
	int CauseSkillID;//[Offset: 0xc, Size: 4]
	Actor* CauseActor;//[Offset: 0x10, Size: 4]
	float SyncTime;//[Offset: 0x14, Size: 4]
	float Duration;//[Offset: 0x18, Size: 4]
	float EndTime;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BuffConfigSubsystem.GameInstanceSubsystem.Subsystem.Object
	<int,BuffTableRow> Table;//[Offset: 0x44, Size: 60]
	<FString,class Object> BuffClassMap;//[Offset: 0x80, Size: 60]

--------------------------------
Class: BuffTableRow
	int BuffID;//[Offset: 0x0, Size: 4]
	int MaxLayer;//[Offset: 0x4, Size: 4]
	float Duration;//[Offset: 0x8, Size: 4]
	FString BuffType;//[Offset: 0xc, Size: 12]
	FString Name;//[Offset: 0x18, Size: 12]
	FString IconPath;//[Offset: 0x24, Size: 12]
	FString BPPath;//[Offset: 0x30, Size: 12]
	FString Desc;//[Offset: 0x3c, Size: 12]
	<FString> MutexBuffTypes;//[Offset: 0x48, Size: 60]
	<FString> ExcludeBuffTypes;//[Offset: 0x84, Size: 60]
	enum RefreshType;//[Offset: 0xc0, Size: 1]
	enum ReActionType;//[Offset: 0xc1, Size: 1]
	enum TargetType;//[Offset: 0xc2, Size: 1]
	enum MultiCauserHanleType;//[Offset: 0xc3, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0xc4, Size: 1]
	enum ClientSyncType;//[Offset: 0xc5, Size: 1]
	float ClientSyncInterval;//[Offset: 0xc8, Size: 4]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool IsOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool bNeedShowInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	int LocalizeDescID;//[Offset: 0xd0, Size: 4]
	int TipsOnAddBuff;//[Offset: 0xd4, Size: 4]
	int ModeOpen;//[Offset: 0xd8, Size: 4]
	FString ModeStrings;//[Offset: 0xdc, Size: 12]

--------------------------------
Class: STBuff.Object
	int BuffID;//[Offset: 0x2c, Size: 4]
	FString BuffName;//[Offset: 0x30, Size: 12]
	FString Desc;//[Offset: 0x3c, Size: 12]
	int LayerMax;//[Offset: 0x48, Size: 4]
	float Duration;//[Offset: 0x4c, Size: 4]
	float ClientSyncInterval;//[Offset: 0x50, Size: 4]
	enum ClientSyncType;//[Offset: 0x54, Size: 1]
	enum TargetType;//[Offset: 0x55, Size: 1]
	enum RefreshType;//[Offset: 0x56, Size: 1]
	enum ReActionType;//[Offset: 0x57, Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x58, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x59, Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	bool RemoveAllLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 1]
	STBuffAction*[] Actions;//[Offset: 0x5c, Size: 12]
	bool bNeedShowBuffInBuffList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	int LocalizeDescID;//[Offset: 0x6c, Size: 4]
	FString IconPath;//[Offset: 0x70, Size: 12]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	int TipsOnAddBuff;//[Offset: 0x80, Size: 4]
	FString TimeFormula;//[Offset: 0x84, Size: 12]
	DataProviderBase*[] DataProviders;//[Offset: 0x90, Size: 12]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x9c, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0xd8, Size: 4]
	void TryGetParams(int CauseSkillID);// 0x3bc3648
	void Tick(ActorComponent* BuffSystemComponent, int InstID, float DetalTime, float TimeSeconds);// 0x3bc3500
	void ResetActionExecute(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc3444
	void Initialize(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc3388
	void End(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc32cc
	void Destroy(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc3210
	bool CopyActions();// 0x3bc31e8
	void ChangeNotify(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc312c

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x2c, Size: 4]
	int ArrayIndex;//[Offset: 0x30, Size: 4]
	bool AutoEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	STBuff* OwnerBuff;//[Offset: 0x38, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x40, Size: 4]
	int CurInstID;//[Offset: 0x44, Size: 4]
	void Tick(ActorComponent* BuffSystemComponent, int InstID, float DetalTime);// 0x3bc4138
	void SetEnabled(ActorComponent* BuffSystemComponent, int InstID, bool Enabled);// 0x3bc4030
	void ResetExecute(ActorComponent* BuffSystemComponent, int InstID, bool IgnoreEnd);// 0x3bc3f28
	void OnTick(float DetalTime);// 0x37ecd5c
	void OnResetExecute(bool IgnoreEnd);// 0x37eed60
	void OnInitialize();// 0x3516084
	void OnExecute();// 0x35162f4
	void OnEnd();// 0x350f798
	void OnDestroy();// 0x35158e0
	void OnCheckLinkActionEnabled();// 0x355f1c4
	void OnChangeNotify();// 0x3515c60
	void Initialize(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc3e6c
	byte GetRealOwnerRole();// 0x3bc3e3c
	Actor* GetOwner();// 0x37f34c0
	Actor* GetCauser();// 0x3bc3e14
	void End(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc3d58
	void Destroy(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc3c9c
	void CheckLinkActionEnabled(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc3be0
	void ChangeNotify(ActorComponent* BuffSystemComponent, int InstID);// 0x3bc3b24

--------------------------------
Class: DataProviderBase.Object

--------------------------------
Class: BuffInstInfo
	int BuffID;//[Offset: 0x0, Size: 4]
	int InstID;//[Offset: 0x4, Size: 4]
	int CauseSkillID;//[Offset: 0x8, Size: 4]
	byte LayerCount;//[Offset: 0xc, Size: 1]
	float EndTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x3f0, Size: 12]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x3fc, Size: 12]
	delegate OnEndChangeItemAvatar;//[Offset: 0x408, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x414, Size: 12]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	ParticleGroup AppliedParticlesGroup;//[Offset: 0x424, Size: 36]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool CanChangeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x44c, Size: 12]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x45c, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x468, Size: 8]
	FName TailMatSlotName;//[Offset: 0x470, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x478, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x480, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x484, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x488, Size: 4]
	BackpackVehicleAvatarHandle* VehicleAvatarHandle;//[Offset: 0x48c, Size: 4]
	BackpackVehicleAvatarHandle* DefaultVehicleAvatarHandle;//[Offset: 0x490, Size: 4]
	NetHighTireStruct NetHighTireStruct;//[Offset: 0x494, Size: 8]
	VehicleAvatarPropretyHandle* DefaultPropertyHandle;//[Offset: 0x49c, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x4a0, Size: 4]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	bool ForceLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	WheeledVehicleMovementComponent* VehicleMovementComponent;//[Offset: 0x4d0, Size: 4]
	bool NeedTickModifyMatParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 1]
	float DownDetectLength;//[Offset: 0x4d8, Size: 4]
	float LerpForwardSpeed;//[Offset: 0x4dc, Size: 4]
	PlayerController* LocalPC;//[Offset: 0x4e0, Size: 8]
	bool HasWelComeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	void WakeUpVehicle();// 0x3a3c6d0
	void VehicleAvatarPreChangeDelegate__DelegateSignature(int AvatarID);// 0x49216cc
	bool TriggerSelectRandomAvatar();// 0x3a45d94
	void PreChangeVehicleBrokenAvatar();// 0x3583888
	void PreChangeVehicleAvatar(int InItemID);// 0x366f810
	void PreChangeAvatarFPP();// 0x3a45d80
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x35d7b8c
	void OverrideVehiclePhysX();// 0x3a45d6c
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x49216cc
	void OnRep_NetHighTireChanged();// 0x49216cc
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x3a45ce8
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x3a45c64
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x3a45c00
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x3a45b94
	BackpackVehicleAvatarHandle* GetVehicleAvatarHandle();// 0x3a45b78
	FName GetReflectionCubeName_Lobby();// 0x49216cc
	FName GetReflectionCubeName();// 0x3a45b38
	SoftObjectPath GetItemDefaultSkeletalMeshPath();// 0x3a45aac
	FString GetItemAvatarHandlePath(int ItemId);// 0x49216cc
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x49216cc
	int GetDefaultAvatarID();// 0x3a45a84
	BackpackVehicleAvatarHandle* GetDefaultAvatarHandle();// 0x3a45a5c
	int GetCurrentAvatarID();// 0x3a45a34
	void ExitFPPVehicle();// 0x3a45a20
	void EnterFPPVehicle(bool InEnterFPPInVehicle);// 0x3a459a0
	void EndChangeItemAvatarDelegate__DelegateSignature();// 0x49216cc
	void DestroyWelcomeLight();// 0x3a4598c
	void CreateWelcomeLight();// 0x3a45978
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x35f7a8c
	void ClearVehicleLightEffect();// 0x49216cc
	void CheckWelcomeLightConditionIsSatisfy(float DeltaTime);// 0x3a45900
	bool CheckIsNeedEnterFPPVehicle();// 0x3a458d8
	bool CheckBrokenMesh();// 0x3a458b0
	bool CheckAvatarChanged();// 0x3a45888
	void CheckAndOpenWelcomeLight();// 0x3a45874
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x3692858
	bool CanPlayerSee();// 0x3a4584c
	void BP_PostChangeItemAvatar();// 0x49216cc
	void BP_ChangeItemAvatar(int InItemID);// 0x49216cc
	void AsyncLoadPropertyHandle();// 0x3a45838
	void ApplyReflectionCubemap(MeshComponent* MeshComp);// 0x3a457c0
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x35f7710

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0x17c, Size: 12]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x188, Size: 12]
	SkeletalMesh* SkeletalMeshBroken;//[Offset: 0x198, Size: 40]
	StaticMesh* StaticMeshBroken;//[Offset: 0x1c0, Size: 40]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x1e8, Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x210, Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x238, Size: 12]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x244, Size: 60]
	ParticleAsset[] ShowParticles;//[Offset: 0x280, Size: 12]
	ParticleSystem* ExplosionParticle;//[Offset: 0x290, Size: 40]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x2b8, Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x2e0, Size: 40]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x308, Size: 60]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	VehCharAnimDataWrapper[] VehCharAnimData;//[Offset: 0x348, Size: 12]
	<FName,AnimationData*> VehCharAnimDataNew;//[Offset: 0x354, Size: 60]
	class AnimInstance* VehicleAnim;//[Offset: 0x390, Size: 40]
	VehicleMatParamModifyCfg[] MatModifyByVelocityCfg;//[Offset: 0x3b8, Size: 12]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	VehDecalCfg DecalCfg;//[Offset: 0x3c8, Size: 120]
	bool bNeedHideExhaustWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]

--------------------------------
Class: VehCharAnimDataWrapper
	FName AnimCompTag;//[Offset: 0x0, Size: 8]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AnimationData.DataAsset.Object
	AnimVarName[] AnimAssetsName;//[Offset: 0x24, Size: 12]
	EditAnimAsset[] EditAnimAssets;//[Offset: 0x30, Size: 12]
	RuntimeAnimAsset[] RuntimeAnimAssets;//[Offset: 0x3c, Size: 12]
	RuntimeAnimAsset[] GetAnimAssets();// 0x34e1e70

--------------------------------
Class: AnimVarName
	FName Description;//[Offset: 0x0, Size: 8]
	FName AnimVarName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: EditAnimAsset
	UAEBlackboardKeySelector AnimAssetDescription;//[Offset: 0x0, Size: 8]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: RuntimeAnimAsset
	FName AnimVarName;//[Offset: 0x0, Size: 8]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: VehicleMatParamModifyCfg
	FName ParamName;//[Offset: 0x0, Size: 8]
	enum ParamType;//[Offset: 0x8, Size: 1]
	enum Usage;//[Offset: 0x9, Size: 1]
	RuntimeFloatCurve ParamModifyCurve;//[Offset: 0xc, Size: 88]
	enum TargetType;//[Offset: 0x64, Size: 1]
	CurveVector* VectorCurve;//[Offset: 0x68, Size: 4]
	float MaxLerpSpeed;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: VehDecalCfg
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float NeedParkTime;//[Offset: 0x4, Size: 4]
	MaterialInterface* DecalMaterial;//[Offset: 0x8, Size: 40]
	Texture* DecalTexture;//[Offset: 0x30, Size: 40]
	Vector2D UVScale;//[Offset: 0x58, Size: 8]
	Vector2D UVOffset;//[Offset: 0x60, Size: 8]
	Vector DecalSize;//[Offset: 0x68, Size: 12]

--------------------------------
Class: NetHighTireStruct
	int ItemId;//[Offset: 0x0, Size: 4]
	bool bEnableHighTire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: VehicleAvatarPropretyHandle.Object
	int AvatarID;//[Offset: 0x20, Size: 4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x28, Size: 264]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0x130, Size: 40]

--------------------------------
Class: VehicleAvatarProperty
	SkeletalMesh* TPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* FPPMesh;//[Offset: 0x28, Size: 40]
	WheelSetup[] WheelSetups;//[Offset: 0x50, Size: 12]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x5c, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x68, Size: 12]
	VehicleTransmissionData GearSetup;//[Offset: 0x74, Size: 40]
	Vector CenterOfMassOffset;//[Offset: 0x9c, Size: 12]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0xa8, Size: 96]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c, Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	Vector Offset;//[Offset: 0x24, Size: 12]
	float ShapeRadius;//[Offset: 0x30, Size: 4]
	float ShapeWidth;//[Offset: 0x34, Size: 4]
	float Mass;//[Offset: 0x38, Size: 4]
	float DampingRate;//[Offset: 0x3c, Size: 4]
	float SteerAngle;//[Offset: 0x40, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	TireType* TireType;//[Offset: 0x48, Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c, Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50, Size: 4]
	float LatStiffValue;//[Offset: 0x54, Size: 4]
	float LongStiffValue;//[Offset: 0x58, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c, Size: 4]
	byte SweepType;//[Offset: 0x70, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c, Size: 4]
	int WheelIndex;//[Offset: 0x80, Size: 4]
	float DebugLongSlip;//[Offset: 0x84, Size: 4]
	float DebugLatSlip;//[Offset: 0x88, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c, Size: 4]
	float DebugWheelTorque;//[Offset: 0x94, Size: 4]
	float DebugLongForce;//[Offset: 0x98, Size: 4]
	float DebugLatForce;//[Offset: 0x9c, Size: 4]
	Vector Location;//[Offset: 0xa0, Size: 12]
	Vector OldLocation;//[Offset: 0xac, Size: 12]
	Vector Velocity;//[Offset: 0xb8, Size: 12]
	bool IsInAir();// 0x77f01fc
	float GetSuspensionOffset();// 0x77f01d4
	float GetSteerAngle();// 0x77f01ac
	float GetRotationAngle();// 0x77f0184

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24, Size: 12]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x12c, Size: 12]
	float Mass;//[Offset: 0x138, Size: 4]
	float DragCoefficient;//[Offset: 0x13c, Size: 4]
	float ChassisWidth;//[Offset: 0x140, Size: 4]
	float ChassisHeight;//[Offset: 0x144, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	bool bClientSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	bool bServerSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 1]
	float DragArea;//[Offset: 0x14c, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x150, Size: 4]
	float MaxEngineRPM;//[Offset: 0x154, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x158, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x15c, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x168, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x16c, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x170, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x174, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x178, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x17c, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x180, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x184, Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1a0, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1a4, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a8, Size: 4]
	float RVOSteeringStep;//[Offset: 0x1ac, Size: 4]
	float RVOThrottleStep;//[Offset: 0x1b0, Size: 4]
	int AvoidanceUID;//[Offset: 0x1b4, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1b8, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1bc, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c0, Size: 4]
	float AvoidanceWeight;//[Offset: 0x1c4, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1c8, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1e0, Size: 20]
	float RawSteeringInput;//[Offset: 0x1f8, Size: 4]
	float RawThrottleInput;//[Offset: 0x1fc, Size: 4]
	float RawBrakeInput;//[Offset: 0x200, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 1]
	float SteeringInput;//[Offset: 0x208, Size: 4]
	float ThrottleInput;//[Offset: 0x20c, Size: 4]
	float BrakeInput;//[Offset: 0x210, Size: 4]
	float HandbrakeInput;//[Offset: 0x214, Size: 4]
	float IdleBrakeInput;//[Offset: 0x218, Size: 4]
	float StopThreshold;//[Offset: 0x21c, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x220, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x224, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x22c, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x234, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x23c, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x77f15ec
	void SetThrottleInput(float Throttle);// 0x77f156c
	void SetTargetGear(int GearNum, bool bImmediate);// 0x77f14a8
	void SetSteeringInput(float Steering);// 0x77f1428
	void SetPhysActive(bool bActive);// 0x37cd7dc
	void SetHandbrakeInput(bool bNewHandbrake);// 0x77f13a0
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x77f131c
	void SetGroupsToIgnore(int GroupFlags);// 0x77f12a4
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x77f1220
	void SetGroupsToAvoid(int GroupFlags);// 0x77f11a8
	void SetGearUp(bool bNewGearUp);// 0x77f1128
	void SetGearDown(bool bNewGearDown);// 0x77f10a8
	void SetBrakeInput(float Brake);// 0x77f1028
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x77f0fa4
	void SetAvoidanceGroup(int GroupFlags);// 0x77f0f2c
	void SetAvoidanceEnabled(bool bEnable);// 0x77f0eac
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x77f0cc8
	bool IsSuspensionSweep();// 0x679b388
	void GetWheelShapeIndices(out int[] OutWheelShapeIndices);// 0x77f0bb8
	bool GetUseAutoGears();// 0x77f0b90
	int GetTargetGear();// 0x77f0b68
	float GetForwardSpeed();// 0x77f0b40
	float GetEngineRotationSpeed();// 0x77f0b18
	float GetEngineMaxRotationSpeed();// 0x77f0af0
	int GetCurrentGear();// 0x77f0ac8
	void EnableVehicleWheel(int WheelIndex, bool InEnable);// 0x77f0a04
	void EnableVehicleSimulation(bool InEnable);// 0x77f0984

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandbrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName TireBoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20, Size: 4]
	float ClutchStrength;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleNeutralThrottleConfig
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum DifferentialType;//[Offset: 0x1, Size: 1]
	float CanNeutralThrottleMinSpeed;//[Offset: 0x4, Size: 4]
	float NeutralThrottleToMaxRPMSeconds;//[Offset: 0x8, Size: 4]
	float NeutralThrottleDecelSeconds;//[Offset: 0xc, Size: 4]
	float WheelRPMOverEngineRPMRate;//[Offset: 0x10, Size: 4]
	AkAudioEvent* FrictionAudio;//[Offset: 0x18, Size: 40]
	Vector CameraOffset;//[Offset: 0x40, Size: 12]
	float AccelCameraOffsetSeconds;//[Offset: 0x4c, Size: 4]
	float DecelCameraOffsetSeconds;//[Offset: 0x50, Size: 4]
	class CameraShake* CameraShake;//[Offset: 0x54, Size: 4]
	float CameraShakeDelay;//[Offset: 0x58, Size: 4]
	STVehicleWheelSlipDustConfig* DustConfig;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: STVehicleWheelSlipDustConfig.DataAsset.Object
	STVehicleSlipWheelDust[] SlipWheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleSlipWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	STVehicleSingleWheelFx[] WheelFx;//[Offset: 0x4, Size: 12]

--------------------------------
Class: STVehicleSingleWheelFx
	enum Wheel;//[Offset: 0x0, Size: 1]
	ParticleSystem* WheelFx;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 1]
	int MasterCompLODLevel;//[Offset: 0x6d4, Size: 4]
	int VehicleSkinID;//[Offset: 0x6d8, Size: 4]
	delegate OnNetAvatarDataChanged;//[Offset: 0x6dc, Size: 12]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x6f0, Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x718, Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x740, Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x74c, Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x758, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x764, Size: 12]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x770, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x780, Size: 8]
	FName TailMatSlotName;//[Offset: 0x788, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x790, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x798, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x79c, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x7a0, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x7a4, Size: 4]
	void WakeUpVehicle();// 0x3a3c6d0
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x3a3c658
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x35a9b20
	void SetVehicleAvatarNormalMode();// 0x3a3c644
	void SetVehicleAvatarFPPMode();// 0x3a3c630
	void SetVehicleAvatarBroken();// 0x3a3c61c
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x35a9554
	void SetMasterBaseMeshPath(FString InPath);// 0x3a3c560
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x3a3c4a4
	void ResetAdvanceVehicleSkinID();// 0x3a3c488
	void RemoveAllEquippedStyle();// 0x3a3c474
	bool ProcessHandleUnequip(enum InSlotType);// 0x3a3c3f4
	bool ProcessHandleEquip(enum InSlotType);// 0x3a3c374
	void PreProcessBeforeLoadMesh();// 0x35a88a8
	void PostProcessAfterLoadMesh();// 0x35a888c
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x3a3c2fc
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x3a3c284
	void OverrideVehiclePhysX();// 0x3a3c270
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x49216cc
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x49216cc
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x49216cc
	void OnRep_BodySlotStateChanged();// 0x35a877c
	void OnNetAvatarDataChanged__DelegateSignature();// 0x49216cc
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x49216cc
	bool IsValidAvatar();// 0x3a3c248
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x3a3c16c
	bool IsAvatarFPPMode();// 0x3a3c144
	bool IsAvatarBroken();// 0x3a3c11c
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x37cce9c
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x37cce14
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x3a3c094
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x3a3c00c
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x3a3bf00
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x3a3bda8
	void InitMasterComponent();// 0x3a3bd94
	void Initialize();// 0x35a6d2c
	void InitialAvatarParam();// 0x34f4004
	int HasStyleEquipped(int InStyleID);// 0x3a3bd14
	int HasEquippedSameStyle(int InStyleID);// 0x3a3bc94
	bool HandleUnequipStyle(int InStyleID);// 0x3a3bc14
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x37ccd50
	bool HandleEquipStyle(int InStyleID);// 0x3a3bb94
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x3a3bb6c
	MeshComponent* GetVehicleBodyMeshComp();// 0x3a3bb44
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x35a63b4
	FName GetReflectionCubeName_Lobby();// 0x49216cc
	FName GetReflectionCubeName();// 0x3a3bb04
	bool CanBeMeshMerge(int SlotID);// 0x3a3ba84
	void ApplyReflectionCubemap(MeshComponent* MeshComp, ItemHandleBase* InItemHandle);// 0x3a3b9c8

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0, Size: 1]
	int StyleValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x474, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x480, Size: 12]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x48c, Size: 12]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x3aafee4
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x3aafe6c
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x3aafde4
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x3aafd28
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponId, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x3aafae8
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x3aaf8d4
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x3aaf84c
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x3aaf7cc
	void OnRep_CurrentWeaponReplicated();// 0x38214bc
	void OnReconnectOnServer();// 0x350db18
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x3aaf754
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x3aaf608
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x3aaf590
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x3aaf4e0
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x3aaf424
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x3aaf3ac
	void DelayFire(float DelayTime, byte ShootMode);// 0x3aaf2e8

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xf4, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x130, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x138, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x140, Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x17c, Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x1b8, Size: 4]
	bool ShowMainWeaponModelOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	FName CurUseWeaponLogicSocket;//[Offset: 0x1c0, Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x1c8, Size: 8]
	FName NextUseWeaponLogicSocket;//[Offset: 0x1d0, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x1e0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x1e8, Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 1]
	float ResyncTimeBias;//[Offset: 0x1f4, Size: 4]
	float NextResyncTimestamp;//[Offset: 0x1f8, Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x200, Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x20c, Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x218, Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x224, Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x230, Size: 12]
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x23c, Size: 12]
	delegate WeaponSystemAttachDataChangedDelegate;//[Offset: 0x248, Size: 12]
	delegate NextUseWeaponChangedDelegate;//[Offset: 0x260, Size: 12]
	delegate EquipVehicleShootWeaponDelegate;//[Offset: 0x26c, Size: 12]
	byte SwitchSlotAfterFinishCreatingWeapon;//[Offset: 0x278, Size: 1]
	bool bSwitchSlotAfterCreatIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x27c, Size: 60]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x2b8, Size: 12]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x2c8, Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x2d4, Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x2e0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x318, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x350, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x388, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x3c0, Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x3fc, Size: 4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x400, Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x404, Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x408, Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x40c, Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x43c, Size: 4]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x49216cc
	void WeaponSystemAttachDataChangedDelegate__DelegateSignature();// 0x49216cc
	void UpdateOwnerClientCreateWeapon();// 0x3ab4c14
	void TickHideWeapon();// 0x3ab4c00
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x3ab4b3c
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x3ab4b28
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x49216cc
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x3aaf8d4
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x49216cc
	void SetSwitchSlotAfterFinishCreatingWeapon(byte Slot, bool ignoreState);// 0x3ab4a64
	void SetNextUseWeaponSlot(byte Slot);// 0x3ab49ec
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x3ab4928
	void RemoveWeaponInInventory(STExtraWeapon* Weapon);// 0x3ab48b0
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x3ab4838
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param);// 0x3ab4750
	int OverrideShootWeaponInitClip__DelegateSignature(int nWeaponSlot, int nSpecificID);// 0x49216cc
	void OnRepReplayData();// 0x34f4004
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x3ab473c
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x3ab4728
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x3ab4714
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x3ab4700
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x3ab46ec
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x3ab4674
	void OnRep_NextUseWeaponLogicSocket();// 0x3ab4660
	void OnRep_LastUseNoneGrenadeLogicSlotOnSimulateClient();// 0x3ab464c
	void OnRep_CurrentWeaponReplicated();// 0x38214bc
	void OnRep_CurrentWeaponLogicSocket();// 0x3ab464c
	void OnRep_CurrentShieldWeaponReplicated();// 0x3ab4638
	void OnReconnectOnServer();// 0x350db18
	void OnReconnectOnClient();// 0x350dafc
	void NextUseWeaponChangedDelegate__DelegateSignature();// 0x49216cc
	void LogInventoryDataInfo();// 0x3ab4624
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x3ab4514
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x3aaf4e0
	void LocalForceFinishSwitchWeapon();// 0x3ab4500
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x49216cc
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x3ab44ec
	bool LocalDestroyWeapon(FName SocketName, bool bEnableBroadcast);// 0x3ab4410
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x3ab43fc
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x49216cc
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x3ab43d4
	bool IsValidSlotForWeapon(out const ItemDefineID DefineID, byte Slot);// 0x3ab42f0
	bool IsCreatingWeaponOnServer();// 0x3ab42bc
	bool IsCreatingWeaponOnClient();// 0x3ab4294
	void HideAllWeapon(bool Hidden, byte HideMask, STExtraWeapon* IgnoreWeapon);// 0x3ab4188
	bool HasReconnectWeapon();// 0x3ab4160
	void HandleGetWeaponFinished(byte Slot);// 0x379c698
	byte GetWeaponSlotInInventory(STExtraWeapon* Weapon);// 0x3ab40e0
	FName GetWeaponAttachSocketFromLogicSocket(FName LogicSocket, STExtraWeapon* BackupWeapon);// 0x3ab400c
	byte GetSlotOfMatchState(byte State);// 0x3ab3f8c
	int GetShowBagLevel();// 0x35891cc
	FName GetShieldWeaponSlot();// 0x3ab3f4c
	STExtraWeapon* GetShieldWeapon();// 0x3ab3f24
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x3ab3ea4
	byte GetNextUseWeaponSlot();// 0x3ab3e7c
	FName GetLogicSocketSlotByLogicSocketAssociationType(int LogicSocketAssociationType);// 0x3ab3df4
	FName GetLogicSocketBySlot(byte Slot);// 0x3ab3d6c
	int GetLogicSocketAssociationTypeLogicSocket(FName LogicSocket);// 0x3ab3cec
	STExtraWeapon* GetLastUsedWeapon();// 0x3ab3cbc
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x3ab3c3c
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x3ab3bbc
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x3ab3b3c
	STExtraWeapon* GetInventoryWeaponByItemID(int ItemId);// 0x3ab3abc
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x3ab3a2c
	STExtraWeapon* GetCurrentUsingWeapon();// 0x3ab3a04
	byte GetCurrentUsingPropSlot();// 0x3ab39dc
	FName GetCurrentUsingLogicSocketOnServer();// 0x3ab399c
	FName GetCurrentUsingLogicSocket();// 0x3ab399c
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x3604ec4
	int GetBagLevel();// 0x359773c
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x3ab388c
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x3ab377c
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x3ab3768
	void EquipVehicleShootWeaponDelegate__DelegateSignature(bool bEquip);// 0x49216cc
	void EnableAllBroadcast(bool bEnable);// 0x3ab36ec
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x3ab3628
	void DoWeapnAttachToBack(STExtraWeapon* Weapon, FName LogicSocket);// 0x3ab356c
	void DebugReconnectToClientOnServer();// 0x3ab3558
	void DebugDisconnetToServerOnClient();// 0x3ab3544
	void ConditionClearSwitchHandle();// 0x3ab3530
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x49216cc
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x49216cc
	bool CanSwapWeaponByPropSlot(byte Slot1, byte Slot2);// 0x3ab346c
	void AttachCurrentWeaponMeshToBack();// 0x3ab3458

--------------------------------
Class: WeaponCreateInstance
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int SyncTicket;//[Offset: 0x18, Size: 4]
	int CreateFrameCount;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	int BagLevel;//[Offset: 0x34, Size: 4]

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 4]
	enum TargetEvent;//[Offset: 0x4, Size: 1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 24]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum[] ForceExitPawnStateList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 104]
	STExtraWeapon* Weapon;//[Offset: 0x68, Size: 4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 4]
	FName WeaponSocket;//[Offset: 0x8, Size: 8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 4]
	int WeaponTypeID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: EffectComponent.ActorComponent.Object
	delegate EffectGraphChangeDelegate;//[Offset: 0x13c, Size: 12]
	bool NeedWaitStartFireRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x361552c
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x3615308
	void S2A_EndEffectGraph(int UID);// 0x34b6cd0
	int GetGraphsNum();// 0x36152e4
	void C2S_SyncWeaponBulletNum(Actor* WeaponActor, int ClientLastFireID, uint32 ClipID, BulletInClip InCurBulletInClip);// 0x3614fa4
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x3614d38

--------------------------------
Class: VehicleAIComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x14c, Size: 12]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x158, Size: 12]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x198, Size: 4]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x19c, Size: 4]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x1a0, Size: 44]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x1d0, Size: 4]
	float CheckAllowableDistanceInter;//[Offset: 0x1d4, Size: 4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x1d8, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x1e4, Size: 12]
	void StopMoveByHandrake();// 0x3a3da30
	void StopAutoDriving();// 0x3a3da1c
	bool StartAutoDriving();// 0x3a3d9f4
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x3a3d948
	void OnRep_AutoDriver_AINavStateData();// 0x3a3d934
	bool IsReachDest();// 0x3a3d90c
	bool IsAutoDriving();// 0x3a3d8e4
	bool HasAutoDriveTarget();// 0x3a3d8bc
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x3a3d894
	STExtraVehicleAIController* GetVehicleAIController();// 0x3a3d86c
	int GetCurrentTargetWaypointIdx();// 0x3a3d844
	Vector GetAutoDriveTarget();// 0x3a3d7fc
	void EndAutoDriving();// 0x3a3d7e8
	void ClearAutoDriveTarget();// 0x3a3d7d4
	bool CanAutoDrivingNoDriver();// 0x3a3d7ac
	bool CanAutoDriving();// 0x3a3d784
	bool AllowableDistanceAutoDriving(bool CheckDriveTarget);// 0x3a3d6fc

--------------------------------
Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x3b8, Size: 8]
	FName AIPawnTag;//[Offset: 0x3c0, Size: 8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x3c8, Size: 4]
	VehicleAIComponent* VehicleAIComp;//[Offset: 0x3cc, Size: 4]
	void StandaloneSetBTRun(bool runBT);// 0x3984f68
	void StandaloneRePosses(STExtraWheeledVehicle* Vehicle, bool restartBT);// 0x3984ea4
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x3984e2c
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x3984e04
	VehicleAIComponent* GetVehicleAIComp();// 0x3984ddc

--------------------------------
Class: STExtraVehicleAIManager.Actor.Object
	delegate OnPostVehicleBehaviorInit;//[Offset: 0x308, Size: 12]
	bool bOnlySpawnInSafetyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bQueueSpawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	DataTable* VehicleSpawnDataTable;//[Offset: 0x318, Size: 40]
	FName AIPawnTag;//[Offset: 0x340, Size: 8]
	int MaxConcurrentVehicles;//[Offset: 0x348, Size: 4]
	int MaxVehiclesPerGame;//[Offset: 0x34c, Size: 4]
	float SpawnPointCooldown;//[Offset: 0x354, Size: 4]
	FName CurrentPathKeyName;//[Offset: 0x358, Size: 8]
	FName CurrentPathInputKeyKeyName;//[Offset: 0x360, Size: 8]
	FName PreviousPathInputKeyKeyName;//[Offset: 0x368, Size: 8]
	FName IsPathingInReverseKeyName;//[Offset: 0x370, Size: 8]
	FName IsStoppedKeyName;//[Offset: 0x378, Size: 8]
	FName IsDebugForceStoppedKeyName;//[Offset: 0x380, Size: 8]
	enum AvoidanceMode;//[Offset: 0x388, Size: 1]
	float InitRetryDelay;//[Offset: 0x38c, Size: 4]
	int MaxInitRetries;//[Offset: 0x390, Size: 4]
	QueuedVehicleSpawn[] QueuedVehicleSpawns;//[Offset: 0x3a0, Size: 12]
	STExtraVehicleAISpawner*[] VehicleSpawns;//[Offset: 0x3ac, Size: 12]
	STExtraAIWaypointSegment*[] VehiclePaths;//[Offset: 0x3b8, Size: 12]
	<PathPoint,bool> PathPointPlayZoneStatus;//[Offset: 0x3c4, Size: 60]
	<PathPoint,PathInputPlayZoneDistanceQuery> PathPointPlayZoneDistances;//[Offset: 0x400, Size: 60]
	<STExtraVehicleAISpawner*,float> LastVehicleSpawnTimes;//[Offset: 0x43c, Size: 60]
	<FString,float> AllVehiclesDestroyedTimeMap;//[Offset: 0x478, Size: 60]
	float PreviousMatchTime;//[Offset: 0x4b4, Size: 4]
	<FName,Object*> CacheUObjectMap;//[Offset: 0x4b8, Size: 60]
	<FString,ActiveVehicleList> ActiveVehiclesMap;//[Offset: 0x500, Size: 60]
	AutoDriveAIDataRow[] AutoDriveAIADataSet;//[Offset: 0x74c, Size: 12]
	STExtraAIWaypointSegment* SegmentStart;//[Offset: 0x758, Size: 4]
	int SegmentPointIdxStart;//[Offset: 0x75c, Size: 4]
	STExtraAIWaypointSegment* SegmentEnd;//[Offset: 0x760, Size: 4]
	int SegmentPointIdxEnd;//[Offset: 0x764, Size: 4]
	bool bVehicleAIForcecNoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	bool bVehicleAIShowIconInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 1]
	float fVehicleHPScaleForTowTeam;//[Offset: 0x76c, Size: 4]
	float fVehicleHPScaleForFourTeam;//[Offset: 0x770, Size: 4]
	bool bSyncBuildPathGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 1]
	bool bDebugAllWayPointKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x775, Size: 1]
	bool bDebugAllLinkPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x776, Size: 1]
	bool bDebugFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x777, Size: 1]
	int DSSwitchId_SemiTruck;//[Offset: 0x778, Size: 4]
	int DSSwitchId_ModelY;//[Offset: 0x77c, Size: 4]
	void ProcessPathPlayZoneStatus();// 0x3985d38
	void OnPostVehicleBehaviorInit__DelegateSignature(STExtraVehicleAIController* AIController, Pawn* VehiclePawn);// 0x49216cc
	void MulticastDrawPathPointDebug(Vector PointLocation, int ForwardPlayZoneDistance, int ReversePlayZoneDistance);// 0x3985c2c

--------------------------------
Class: QueuedVehicleSpawn
	Guid ID;//[Offset: 0x0, Size: 16]
	FString SpawnId;//[Offset: 0x10, Size: 12]
	class Pawn* VehicleClass;//[Offset: 0x1c, Size: 4]
	BehaviorTree* BehaviorTree;//[Offset: 0x20, Size: 4]
	BlackboardData* BlackboardData;//[Offset: 0x24, Size: 4]
	SpawnFilter SpawnSettings;//[Offset: 0x28, Size: 28]

--------------------------------
Class: SpawnFilter
	bool bLimitSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName[] ValidSpawnPoints;//[Offset: 0x4, Size: 12]
	FName[] InvalidSpawnPoints;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STExtraVehicleAISpawner.Actor.Object
	Guid ID;//[Offset: 0x308, Size: 16]
	FString SpawnTag;//[Offset: 0x318, Size: 12]
	bool bIsSingleUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	SceneComponent* SpawnPoint;//[Offset: 0x328, Size: 4]
	WaypointNetworkConnection StartingPath;//[Offset: 0x32c, Size: 12]
	float InitializeVehicleBehaviorDelay;//[Offset: 0x338, Size: 4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	PathPoint[] spawnWayPaths;//[Offset: 0x340, Size: 12]
	bool bStartEngineWhenSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x350, Size: 4]
	void PostSpawnAI(Pawn* SpawnedVehicle);// 0x34ee164
	void OnSpawnAI(Pawn* SpawnedVehicle);// 0x34d78d4

--------------------------------
Class: WaypointNetworkConnection
	STExtraAIWaypointSegment* ConnectedSegment;//[Offset: 0x0, Size: 4]
	int WaypointIndex;//[Offset: 0x4, Size: 4]
	bool bPathSegmentInReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: STExtraAIWaypointSegment.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bAlwaysDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	SplineComponent* WaypointsSpline;//[Offset: 0x30c, Size: 4]
	<int,WaypointNetworkConnectionList> ConnectedSegments;//[Offset: 0x310, Size: 60]
	<int,NodeTargetSpeedOverrides> TargetSpeedOverridesMap;//[Offset: 0x34c, Size: 60]
	Pawn*[] PawnsOnForwardPath;//[Offset: 0x388, Size: 12]
	Pawn*[] PawnsOnReversePath;//[Offset: 0x394, Size: 12]
	void DrawDebug(float DrawTime);// 0x36b3b78

--------------------------------
Class: WaypointNetworkConnectionList
	WaypointNetworkConnection[] Connections;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NodeTargetSpeedOverrides
	float ForwardTargetSpeedOverride;//[Offset: 0x0, Size: 4]
	float ForwardMaxSpeedOverride;//[Offset: 0x4, Size: 4]
	float ReverseTargetSpeedOverride;//[Offset: 0x8, Size: 4]
	float ReverseMaxSpeedOverride;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PathPoint
	STExtraAIWaypointSegment* Path;//[Offset: 0x0, Size: 4]
	int InputKey;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PathInputPlayZoneDistanceQuery
	int ForwardDistance;//[Offset: 0x0, Size: 4]
	bool bForwardQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int ReverseDistance;//[Offset: 0x8, Size: 4]
	bool bReverseQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ActiveVehicleList
	Pawn*[] Vehicles;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AutoDriveAIDataRow
	class Pawn* VehicleClass;//[Offset: 0x0, Size: 40]
	BehaviorTree* BehaviorTreeAsset;//[Offset: 0x28, Size: 40]
	BlackboardData* BlackboardDataAsset;//[Offset: 0x50, Size: 40]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0x1110, Size: 4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0x1114, Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0x1120, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0x1148, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0x1150, Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0x1158, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0x115c, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1160, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0x1164, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0x1168, Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0x1174, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0x1178, Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0x118c, Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x1190, Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x1194, Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0x1198, Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x119c, Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x11a0, Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x11a4, Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x11a8, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x11ac, Size: 4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x11b0, Size: 92]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x120c, Size: 76]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1258, Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1270, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x1274, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x129c, Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0x12a4, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x12b4, Size: 4]
	FString LoopSmokeCmpName;//[Offset: 0x12b8, Size: 12]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x12c4, Size: 12]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 1]
	float ExtraBoostFactor;//[Offset: 0x12d4, Size: 4]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x1328, Size: 8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x1330, Size: 8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x1338, Size: 8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x1340, Size: 8]
	delegate OnVehicleInputMoveDelegate;//[Offset: 0x134c, Size: 12]
	WheeledNeutralThrottleComponent* NeutralThrottleComp;//[Offset: 0x1358, Size: 4]
	enum RepNeutralThrottleStatus;//[Offset: 0x135c, Size: 1]
	STExtraPlayerCharacter* NeutralThrottleCharacter;//[Offset: 0x1360, Size: 4]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x39a5fe8
	void ServerSetNeutralThrottleStatus(enum NewStatus);// 0x39a5f34
	void PostLoadFPPMesh();// 0x398fda8
	void PlayerControllerLost();// 0x39a5f20
	void OnWheelsLanded();// 0x39a5f0c
	void OnRep_ReplicatedState();// 0x34f4004
	void OnRep_NeutralThrottleStatus(enum PreStatus);// 0x39a5e94
	void OnGearChanged(bool bIsUp);// 0x39a5e14
	void MulticastDrawNavigationDebug(float DeltaSeconds, Vector TargetLocation, Vector PathingLocation, Vector PathInputLocation);// 0x39a5cbc
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x39a5b28
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x39a5994
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x39a5740
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x39a54ec
	bool IsVehicleInputMove(float InputTolerance);// 0x39a546c
	float GetVehicleSpeed();// 0x39a5444
	float GetVehicleSlip();// 0x39a5414
	Vector GetRotationInputDir();// 0x38394e0
	float GetBoostFactor();// 0x396f3f0
	void BroadcastClientVehicleWheelDestroyEffect();// 0x3847608

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x4, Size: 4]
	ParticleSystem* SlipFx;//[Offset: 0x8, Size: 4]
	ParticleSystem* HubFx;//[Offset: 0xc, Size: 4]
	float minSpeed;//[Offset: 0x10, Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x308, Size: 4]
	float MaxQuadLength;//[Offset: 0x30c, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x310, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x314, Size: 4]
	float DefaultTrailWidth;//[Offset: 0x318, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	float DefaultTrailLength;//[Offset: 0x320, Size: 4]
	float TextureLength;//[Offset: 0x324, Size: 4]
	int USegmentNum;//[Offset: 0x328, Size: 4]
	int CoordU;//[Offset: 0x32c, Size: 4]
	int SlippingCoordU;//[Offset: 0x330, Size: 4]
	int BrokenCoordU;//[Offset: 0x334, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x33c, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x340, Size: 4]
	int AdditionalCoordU;//[Offset: 0x344, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x348, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x34c, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x354, Size: 4]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x39ce5a8
	void StopUpdate();// 0x39ce594
	bool IsUpdating();// 0x39ce56c

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x684, Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x692, Size: 1]
	enum CollisionMode;//[Offset: 0x693, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x694, Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x6b8, Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x6c4, Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x6d0, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x6ec, Size: 60]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x728, Size: 12]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x7e439b8
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x7e43858
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x7e43794
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x7e436d0
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x7e4360c
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x7e43464
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x49216cc
	bool IsMeshSectionVisible(int SectionIndex);// 0x7e433e4
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x7e43364
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x7e432e4
	int GetNumSections();// 0x7e432bc
	int GetLastSectionIndex();// 0x7e43294
	int FirstAvailableMeshSectionIndex();// 0x7e4326c
	void EndBatchUpdates();// 0x7e43258
	bool DoesSectionExist(int SectionIndex);// 0x7e431d8
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x7e42be8
	void CookCollisionNow();// 0x7e42bd4
	void ClearMeshSection(int SectionIndex);// 0x7e42b5c
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x7e42ae4
	void ClearCollisionConvexMeshes();// 0x7e42ad0
	void ClearAllMeshSections();// 0x7e42abc
	void ClearAllMeshCollisionSections();// 0x7e42aa8
	bool ChangeRuntimeMeshSectionUVs(int SectionIndex, int Index, <int,Vector2D> UVs);// 0x7e42864
	void BeginBatchUpdates();// 0x7e42848
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x7e426ec

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	int[] IndexBuffer;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	Box BoundingBox;//[Offset: 0xc, Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector Normal;//[Offset: 0x40, Size: 12]
	enum Type;//[Offset: 0x4c, Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x37c, Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x388, Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x3a4, Size: 4]
	float AntiRollStiffness;//[Offset: 0x3a8, Size: 4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x3ac, Size: 12]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x3c0, Size: 4]
	<uint32,CachedWheelData> mapCachedWheelData;//[Offset: 0x3fc, Size: 60]
	float MaxRPMLimit;//[Offset: 0x524, Size: 4]
	float TorqueRate;//[Offset: 0x528, Size: 4]
	byte[] SpecialModifyCollisionList;//[Offset: 0x52c, Size: 12]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x538, Size: 12]
	FName RootBodyName;//[Offset: 0x548, Size: 8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool IsInAir_bServerCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool IsInAir_bClientCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	int IsInAir_ShapeIndexToQuery;//[Offset: 0x554, Size: 4]
	float IsInAir_QueryInterval;//[Offset: 0x558, Size: 4]
	float IsInAir_QueryLength;//[Offset: 0x55c, Size: 4]
	delegate OnIsInAirChange;//[Offset: 0x560, Size: 12]
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool DynamicChangeDragCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	float DragCoefficientInAir;//[Offset: 0x578, Size: 4]
	float SmallSpeedIntervalThreshold;//[Offset: 0x588, Size: 4]
	float SmallSpeedThreshold;//[Offset: 0x58c, Size: 4]
	void SetVehicleToRestState();// 0x399a790
	void SetTransmissionSetup(out const VehicleTransmissionData NewTransmissionSetup);// 0x399a6c4
	void SetSuspensionIgnoreMask(int InIgnoreMask);// 0x399a64c
	void SetEngineSetup(out const VehicleEngineData NewEngineSetup);// 0x399a4e4
	void SetDragCoefficient(float InDragCoefficient);// 0x399a464
	void SetDifferentialSetup(out const VehicleDifferential4WData NewDifferentialSetup);// 0x399a3e0
	void SetBoosting(float rate);// 0x399a360
	void RefreshBodyCollision();// 0x399a34c
	void OnExpoldeStopWheel();// 0x399a338
	void MoveWheelShapeHeight(float Height);// 0x399a2c0
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x399a1c0
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x399a034
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3999f34
	int GetSuspensionIgnoreMask();// 0x3999f0c
	int GetNumWheelsNotInAir();// 0x3999ee4
	Vector GetLinearVelocity();// 0x3999e9c
	Transform GetCMassLocalPose();// 0x3999e3c
	void ForceWheelsRotate(float DriveTorque);// 0x3999dc4
	void ClearDestroyedWheel();// 0x3999db0
	void ChangeDragCoefficientInInAir();// 0x3999d9c

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x270, Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2dc, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x2f8, Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x320, Size: 88]
	float AckermannAccuracy;//[Offset: 0x378, Size: 4]

--------------------------------
Class: CachedWheelData
	bool WheelsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float WheelSuspensionOffset;//[Offset: 0x4, Size: 4]
	PhysicalMaterial* WheelContactMaterial;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 88]
	float MaxRPM;//[Offset: 0x58, Size: 4]
	float MOI;//[Offset: 0x5c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68, Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20, Size: 12]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 4]
	AkAudioEvent* EventStart;//[Offset: 0x4, Size: 4]
	AkAudioEvent* EventStop;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44, Size: 4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]
	int Flag;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WheeledNeutralThrottleComponent.VehicleEffectComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate NeutralThrottleInit;//[Offset: 0x15c, Size: 12]
	delegate OnNeutralThrottle;//[Offset: 0x168, Size: 12]
	STExtraVehicleSfxLoop NT_WheelFrictionGroundLoop;//[Offset: 0x184, Size: 92]
	STExtraWheeledVehicle* WheeledVehicle;//[Offset: 0x1e0, Size: 4]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0x1e8, Size: 96]
	enum NeutralThrottleStatus;//[Offset: 0x248, Size: 1]
	AkAudioEvent* NT_FrictionAudio;//[Offset: 0x270, Size: 4]
	void StartNeutralThrottle(enum NewStatus);// 0x3ac0958
	void NeutralThrottleRelease();// 0x3ac0944
	bool IsStartNeutralThrottle();// 0x3ac091c
	void HandleVehicleWheelDestory();// 0x3ac0908
	void HandleVehicleMove(bool bMove);// 0x3ac0888
	void HandleSeatOccupiersChanged();// 0x3ac0874
	void HandleOnDSSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3ac0774
	float GetSimulateRPM();// 0x3ac074c
	bool CanNeutralThrottle();// 0x3ac0724
	void CameraShakeInternal();// 0x3ac0710

--------------------------------
Class: VehicleEffectComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	void HandleAvatarEquiped();// 0x3599e34
	void CreateDynamicMaterialInstance();// 0x35b3440

--------------------------------
Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 4]
	Vector TargetPosition;//[Offset: 0x4, Size: 12]
	Vector StartPosition;//[Offset: 0x10, Size: 12]
	int[] PathWayPoints;//[Offset: 0x1c, Size: 12]
	int PathWayPointNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TrailerRepMovement
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x308, Size: 4]
	int DecalId;//[Offset: 0x30c, Size: 4]
	int TeamID;//[Offset: 0x310, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x320, Size: 176]
	STExtraPlayerState* OwnerPS;//[Offset: 0x3d0, Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x3d4, Size: 8]
	AkComponent* AkComponent;//[Offset: 0x3dc, Size: 4]
	int PostEventID;//[Offset: 0x3e0, Size: 4]
	void RemoveSelfByParent();// 0x36853a0
	void OnRep_DecalInfo();// 0x368538c
	void OnDamageableActorDestroyed(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x36852c8

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	int TranslucentSortPriority;//[Offset: 0x60, Size: 4]
	int ClipPlaneNum;//[Offset: 0x64, Size: 4]
	float DynamicDeepScale;//[Offset: 0x68, Size: 4]
	FName SocketName;//[Offset: 0x70, Size: 8]
	enum ParentType;//[Offset: 0x78, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x7c, Size: 8]
	FName CollisionProfileName;//[Offset: 0x90, Size: 8]
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	FName DecalTag;//[Offset: 0xa0, Size: 8]

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0xec8, Size: 4]
	enum LiveState;//[Offset: 0xecc, Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xed0, Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xed8, Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0xedc, Size: 4]
	STExtraPetSpectatorCharacter* PetSpectatingCharacterOwner;//[Offset: 0xee0, Size: 4]
	bool bIsRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee4, Size: 1]
	float PlayerHealth;//[Offset: 0xee8, Size: 4]
	float PlayerHealthMax;//[Offset: 0xeec, Size: 4]
	float PlayerTemperature;//[Offset: 0xef0, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xef4, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xef8, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xf10, Size: 24]
	enum EUAVUseType;//[Offset: 0xf28, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf29, Size: 1]
	enum eCurVehicleType;//[Offset: 0xf2a, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xf2b, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xf2c, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xf38, Size: 12]
	Vector MapMark;//[Offset: 0xf44, Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 1]
	Vector RestartLocation;//[Offset: 0xf54, Size: 12]
	Rotator RestartRotate;//[Offset: 0xf60, Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0xf6c, Size: 60]
	<int,int> UseWheelMsgMap;//[Offset: 0xfa8, Size: 60]
	byte PlayerUseQuickSight;//[Offset: 0xfe4, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0xfe5, Size: 1]
	byte ShowMsgCnt;//[Offset: 0xfe6, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xfe7, Size: 1]
	byte UserCancelCnt;//[Offset: 0xfe8, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xfe9, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xfec, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xff0, Size: 4]
	RescueTime RescueTime;//[Offset: 0xff4, Size: 12]
	int AirDropBoxFirstPickUpNum;//[Offset: 0x1018, Size: 4]
	SyncTeamMatePlayerState[] TeamMatePlayerStateList;//[Offset: 0x101c, Size: 12]
	byte InTeamIndex;//[Offset: 0x1028, Size: 1]
	HistoricalTeammateInfo[] HistoricalTeammateInfoArray;//[Offset: 0x102c, Size: 12]
	HistoricalTeammateInfo[] CurrentNotInTeamHistoricalTeammateInfoArray;//[Offset: 0x1038, Size: 12]
	int PlayerLayerID;//[Offset: 0x1080, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0x1084, Size: 16]
	int Breath;//[Offset: 0x1094, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0x1098, Size: 12]
	float EnegyBuffStage1;//[Offset: 0x10a4, Size: 4]
	float EnegyBuffStage2;//[Offset: 0x10a8, Size: 4]
	float EnegyBuffStage3;//[Offset: 0x10ac, Size: 4]
	float EnegyBuffStage4;//[Offset: 0x10b0, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x10b4, Size: 4]
	float CurEnegyBuff;//[Offset: 0x10b8, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x10bc, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x10c0, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x10c4, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x10c8, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x10cc, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x10d0, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x10d4, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x10d8, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x10dc, Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x10e8, Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f5, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1114, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1115, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0x1118, Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1124, Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1125, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1126, Size: 1]
	uint32 LastInstigatorEnemyKey;//[Offset: 0x112c, Size: 4]
	int PlayersCountOnPlane;//[Offset: 0x1130, Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0x1134, Size: 12]
	float SingleRoundTotalDamage;//[Offset: 0x1140, Size: 4]
	int ContinuousKillsNum;//[Offset: 0x1144, Size: 4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0x1148, Size: 12]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0x1154, Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0x1160, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x1164, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0x1168, Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116c, Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0x1170, Size: 12]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0x117c, Size: 12]
	int MaxDecalCount;//[Offset: 0x11a0, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0x11a4, Size: 12]
	float LeanOutL_AimAngle;//[Offset: 0x1204, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0x1208, Size: 4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0x120c, Size: 12]
	int RemainingRevivalTime;//[Offset: 0x1218, Size: 4]
	int RemainingRevivalCount;//[Offset: 0x121c, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1220, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1221, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1222, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1223, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1224, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0x1228, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122c, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0x1230, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0x1238, Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0x1244, Size: 12]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x1250, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x125c, Size: 12]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0x1268, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0x1274, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x1280, Size: 12]
	<int> LastMarkInstanceID;//[Offset: 0x128c, Size: 60]
	<int> CurrentMarkInstanceID;//[Offset: 0x12c8, Size: 60]
	<int,MarkSyncData> CurrentMarkInstanceIDMap;//[Offset: 0x1304, Size: 60]
	<int,MarkSyncData> LastMarkInstanceIDMap;//[Offset: 0x1340, Size: 60]
	float KdValue;//[Offset: 0x137c, Size: 4]
	Vector LastVehicleLocation;//[Offset: 0x1394, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0x13a8, Size: 12]
	delegate OnPlayerUnderAttack;//[Offset: 0x13b4, Size: 12]
	delegate OnSetPlane;//[Offset: 0x13c0, Size: 12]
	Vector[] MapMultiMark;//[Offset: 0x13cc, Size: 12]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1414, Size: 1]
	Vector AirplaneStartLoc;//[Offset: 0x1418, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x1424, Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x1430, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x143c, Size: 12]
	Vector LastValidAirplaneCanJumpLoc;//[Offset: 0x1448, Size: 12]
	Vector LastValidAirplaneForceJumpLoc;//[Offset: 0x1454, Size: 12]
	Actor* Plane;//[Offset: 0x1460, Size: 4]
	int FlightNo;//[Offset: 0x1464, Size: 4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1468, Size: 1]
	FName[] CurMapTags;//[Offset: 0x146c, Size: 12]
	FName[] ShowingMapTags;//[Offset: 0x1478, Size: 12]
	delegate OnMapTagsChangedDelegate;//[Offset: 0x1484, Size: 12]
	int TeammateDisappearReportCount;//[Offset: 0x1490, Size: 4]
	float TeammateDisappearReportDistance;//[Offset: 0x1498, Size: 4]
	TeamMateDisappearInfo SelfDisappearInfo;//[Offset: 0x149c, Size: 68]
	<uint64> TeammateKillUIDSet;//[Offset: 0x14e0, Size: 60]
	uint64 LastKnockOutPlayerUID;//[Offset: 0x1520, Size: 8]
	void UpdateSelfHealthDataOnServer();// 0x3952608
	void UpdateDeliveryData(uint32 InDeliverPlayerKey, byte DeliveryAIType);// 0x3952544
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x39523f4
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x395229c
	void SetPlayerGiveUp(bool InGiveUp);// 0x395221c
	void SetLastValidAirplaneInfo();// 0x3952208
	void SetInTeamIndex(int Index);// 0x3952190
	void SetForceSyncTeammateData(bool IsForCE);// 0x3952110
	void SetCurMapTags(const FName[] mapTags);// 0x395201c
	void SetCharacterIntProperty_Replay(uint32 InPlayerKey, FString KeyName, int InValue);// 0x3951ed0
	void SetAirplaneStopLoc(Vector StopLoc);// 0x3951e50
	void SetAirplaneStartLoc(Vector StarLoc);// 0x3951dd0
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x3951d50
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x3951cd0
	void SaveBuffData();// 0x38e25ec
	void RPC_RspTeammateDisappearInfo(STExtraPlayerState* InPlayerState, enum RelevantStatus, Vector ServerLoc, uint32 PawnNetGUID, STExtraBaseCharacter* ReportCharacter);// 0x3951ad8
	void RPC_ReqTeammateDisappearInfo(uint32 nPlayerKey);// 0x3951a24
	void RPC_OnPlayerUnderAttack();// 0x3951a08
	void RestoreBuffData();// 0x39519ec
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x3951848
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x3951740
	void RespondToPawnCanCarryOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x3951638
	void RespondToPawnCanCaptivateOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool bIsBegged);// 0x3951530
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* Param2);// 0x3951430
	void RemovePaintDecal(IdeaDecalActor* DecalActor);// 0x39513b8
	void RefreshRevivalState();// 0x39513a4
	void RefreshFollowMark();// 0x3951390
	void RefreshAirplaneRoute();// 0x395137c
	void QuickSignClientReceiveMsgForReplay(const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey);// 0x39511d4
	void QuickSignClientDelMsgForReplay(FString MsgID);// 0x3951110
	void PlayerStateSetPlane__DelegateSignature(Actor* Plane);// 0x49216cc
	int PlayersCountOnMyPlane();// 0x39510e8
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x49216cc
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x49216cc
	void OnRep_VisualFieldInfo();// 0x39510d4
	void OnRep_UpdateKillMonsterNum();// 0x39510b8
	void OnRep_UID();// 0x35a8da0
	void OnRep_TeamMatePlayerStateList();// 0x39510a4
	void OnRep_SingleRoundTotalDamage();// 0x3951090
	void OnRep_RescueTime();// 0x395107c
	void OnRep_RemainingRevivalTime();// 0x3951068
	void OnRep_RemainingRevivalCount();// 0x49216cc
	void OnRep_RankNotify();// 0x3951054
	void OnRep_PlayerTemperatureChanged();// 0x3951040
	void OnRep_PlayersCountOnPlane();// 0x395102c
	void OnRep_PlayerReconnectEvent();// 0x3951018
	void OnRep_PlayerName();// 0x34d78b8
	void OnRep_PlayerLostConnectionEvent();// 0x3951004
	void OnRep_PlayerLiveStateInternal();// 0x3950ff0
	void OnRep_PlayerLiveState();// 0x3950fd4
	void OnRep_PlayerKillsChange();// 0x3950fb8
	void OnRep_PlayerIsFollowing();// 0x3950fa4
	void OnRep_PlayerGiveUp();// 0x3950f88
	void OnRep_PlayerGameOver();// 0x3950f74
	void OnRep_PlayerExitGameEvent();// 0x3950f60
	void OnRep_PlayerAliasShowInfoList();// 0x3950f4c
	void OnRep_Plane();// 0x3950f38
	void OnRep_PetSpectatingCharacterOwner();// 0x3950f24
	void OnRep_MarkSyncData();// 0x3950f10
	void OnRep_MarkSelfSyncData();// 0x3950efc
	void OnRep_MapMarkNotify();// 0x3950ee8
	void OnRep_LastVehicleLocation();// 0x3950ed4
	void OnRep_IsIDCardCaptured();// 0x3950ec0
	void OnRep_InTeamIndex();// 0x3950eac
	void OnRep_HPChanged();// 0x34f4004
	void OnRep_HasRevivalSign();// 0x3950e90
	void OnRep_HasEscaped();// 0x3950e7c
	void OnRep_CurMapTags();// 0x3950e68
	void OnRep_ChangeRevivalState();// 0x3950e4c
	void OnRep_ChangeInRevivingState();// 0x3950e38
	void OnRep_BreathChanged();// 0x3950e24
	void OnRep_BPS();// 0x3950e10
	void OnRep_AirplaneStopLoc();// 0x3950dfc
	void OnRep_AirplaneStartLoc();// 0x3950de8
	void OnRep_AirplaneForceJumpLoc();// 0x3950dd4
	void OnRep_AirplaneCanJumpLoc();// 0x3950dc0
	void OnPlayerUnderAttack__DelegateSignature(FString PUID);// 0x49216cc
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x49216cc
	void OnNewRound();// 0x3770284
	void OnMapTagsChangedDelegate__DelegateSignature(STExtraPlayerState* CurPlayerState);// 0x49216cc
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x49216cc
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x49216cc
	void OnClientVeteranRecruitIndexUpdated();// 0x3950da4
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x377017c
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x3770074
	void LuaReceiveBeginPlay();// 0x3950d88
	void LocalNotifyRescueStateChanged(bool bRescued);// 0x3950d08
	void Kill(int ScoreNum, Character* VictimPawn);// 0x3950c44
	bool IsTeamMateListContainsPlayer(STExtraPlayerState* InPlayState);// 0x3950bc4
	bool IsSinglePlayer();// 0x3950b9c
	bool IsLocalPlayerState();// 0x3950b74
	bool IsInGame();// 0x3950b44
	bool IsInBetrayState();// 0x35895b0
	bool IsAlive();// 0x3950b1c
	void HandleSetCharacterIntProperty(FString StrPlayerKey, FString KeyName, int InValue);// 0x3950990
	void HandleRescueStateChanged();// 0x3950974
	uint32 GetUserIDByMemberID(int memberID);// 0x39508ec
	void GetTeamMatePlayerUIDList(out FString[] OutList, bool bIsExcludeMyself);// 0x3950760
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x395063c
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x39505bc
	STExtraPlayerState* GetTeammatePlayerState(int TeammateIndex);// 0x39501fc
	int GetTeamMateIndexByName(FString TeammateName);// 0x39504f8
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x3950478
	int GetTeammateCount();// 0x3950450
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x395038c
	FString GetStringPlayerKey();// 0x39502cc
	float GetPlayerTemperature();// 0x39502a4
	int GetPlayerTeamIndex();// 0x395027c
	STExtraPlayerState* GetPlayerStateByInTeamIndex(const int Index);// 0x39501fc
	float GetPlayerMaxTemperature();// 0x39501d4
	float GetPlayerMaxHealth();// 0x39501ac
	byte GetPlayerInTeamIndexByPlayerState(STExtraPlayerState* TeammatePlayerState);// 0x395012c
	byte GetPlayerInTeamIndex();// 0x3950104
	int GetPlayerIndexInTeam();// 0x39500dc
	float GetPlayerHealthPercent();// 0x39500b4
	float GetPlayerHealth();// 0x395008c
	Vector GetPlayerCurLoc();// 0x3950044
	STExtraBaseCharacter* GetPlayerCharacter();// 0x395001c
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x394ff70
	STExtraPetSpectatorCharacter* GetPetSpectatingPawn();// 0x394ff48
	float GetMaxEnegyBuff();// 0x394fef4
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x394fd98
	Vector GetMapMark3DLocation();// 0x394fd50
	Vector GetLastValidAirplaneForceJumpLoc();// 0x394fd20
	Vector GetLastValidAirplaneCanJumpLoc();// 0x394fcf0
	int GetHelpRevivalCount();// 0x394fcc0
	Vector GetForceJumpLoc();// 0x394fc90
	Vector GetCanJumpLoc();// 0x394fc60
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x394fb44
	float GetBreathPercentage();// 0x394fb1c
	int GetBountyGold();// 0x49216cc
	Vector2D GetAutoParachuteJumpPlaneLoc();// 0x394fadc
	MarkSyncData[] GetAllSelfMarkData();// 0x394fa78
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x394f9ac
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x394f888
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x394f7dc
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x394f608
	Vector GetAirplaneStopLoc();// 0x394f5d8
	Vector GetAirplaneStartLoc();// 0x394f5a8
	Vector2D GetAirplaneForward2D();// 0x394f568
	void ForceNotifyAlertUpdate();// 0x394f554
	bool FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x394f3f4
	void FadeTeammatesMapMark();// 0x394f3e0
	void DispatchPlayerExitEvent();// 0x394f3c4
	Vector Convert2DMarkTo3D(Vector MarkLoc2D);// 0x394f330
	Vector2D ConverMapMarkTo2D(out const Vector MapMark3D);// 0x394f29c
	void ClientSyncRoute(Vector StartLoc, Vector StopLoc);// 0x394f1d4
	void ClientReportTeammateDisappearInfo();// 0x49216cc
	void ClientDisplayGameTipWithMsgID(int ID, FString Param1, FString Param2);// 0x394f010
	void ChangeFadeMapMarkDist(float NewDist);// 0x394ef90
	bool CanSelfRevive();// 0x394ef60
	bool CanRevivalTeammate();// 0x394ef38
	bool CanBeRevival();// 0x394ef08
	byte CalculateEnegyStage();// 0x394eee0
	void BroadcastFatalDamageToClientWithStructForReplay(const FatalDamageParameter FatalDamageParameter);// 0x394ed90
	void BPKill(Character* VictimPawn);// 0x394ed0c
	void AppendTeamMatePlayerStateList(out STExtraPlayerState*[] InTeamMatePlayerStateList);// 0x394ec40
	void AddOneAssist(int VictimKey);// 0x394ebc0
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x394eafc
	void AddEnegySafety(float AddVal);// 0x394ea84
	void AddDamager(STExtraBaseCharacter* Damager, int DamageType);// 0x394e9c0
	void AddDamageAmount(Character* VictimPawn, float FinalDamage, bool bHitHead);// 0x394e8b0

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraPetSpectatorCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnMovementBaseChanged;//[Offset: 0xcc0, Size: 12]
	PetLevelInfo PetLevelInfo;//[Offset: 0xccc, Size: 8]
	delegate PetSpectatorStateChangeDelegate;//[Offset: 0xcec, Size: 12]
	SpectatorPetStateInfo CurrentStateInfo;//[Offset: 0xcf8, Size: 8]
	FName FeatureActorName;//[Offset: 0xd00, Size: 8]
	float BornMaxHight;//[Offset: 0xd08, Size: 4]
	float BornMinHight;//[Offset: 0xd0c, Size: 4]
	float BornCamerHight;//[Offset: 0xd10, Size: 4]
	float BornMaxForwardDis;//[Offset: 0xd14, Size: 4]
	float BornMinForwardDis;//[Offset: 0xd18, Size: 4]
	float WarterBornMoreHight;//[Offset: 0xd1c, Size: 4]
	PlayerPetMovementComponent* PetMovementComponent;//[Offset: 0xd20, Size: 4]
	float MaxSpecDistance;//[Offset: 0xd24, Size: 4]
	STExtraPetSpectatorAnimInstance* PetAnimInstance;//[Offset: 0xd2c, Size: 4]
	delegate OnSwimStateChange;//[Offset: 0xd30, Size: 12]
	bool TeleportToPointSafety(Vector Location, Rotator Rotation);// 0x39001c8
	bool SpectatorPetLeaveState(enum State);// 0x3900140
	bool SpectatorPetHasState(enum State);// 0x39000b8
	bool SpectatorPetEnterState(enum State, int Params);// 0x38fffec
	bool SpectatorPetBornRightPostion(STExtraPlayerCharacter* SpectatorPawn, out const ResolvePenetrationParams ResolveParams, out Vector backLocation);// 0x38ffdc8
	void ServerHandleSpectatorPetStateMsg(enum MsgType, int Params);// 0x38ffccc
	void OnRep_PetLevelInfo();// 0x38ffcb0
	void OnRep_CurrentStateInfo();// 0x38ffc94
	bool LocalHandleSpectatorPetStateMsg(enum MsgType, int Params);// 0x49216cc
	void ClientOnPossessedBy();// 0x38ffc78
	void BPOnRespawned();// 0x49216cc
	void BPOnRecycled();// 0x49216cc

--------------------------------
Class: PetLevelInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpectatorPetStateInfo
	enum CurrentState;//[Offset: 0x0, Size: 1]
	int Param;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerPetMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float ClearIgnoredActorsTime;//[Offset: 0x670, Size: 4]
	STExtraPetSpectatorCharacter* PetOwner;//[Offset: 0x678, Size: 4]
	bool bFollowMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	bool bEnableSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 1]
	float TraceWaterHalfHeight;//[Offset: 0x680, Size: 4]
	float TraceWaterMaxHalfHeight;//[Offset: 0x684, Size: 4]
	bool bEnableServerAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	float SecurityAllowedMoveSpeedRatio;//[Offset: 0x68c, Size: 4]
	float SecurityAllowedJumpHeightRatio;//[Offset: 0x690, Size: 4]
	bool ShouldRecordPosition();// 0x373f850
	STExtraPetSpectatorCharacter* GetPetOwner();// 0x373f828

--------------------------------
Class: STExtraPetSpectatorAnimInstance.AnimInstance.Object
	STExtraPetSpectatorCharacter* C_PetCharacter;//[Offset: 0x2f0, Size: 4]
	int C_DeviceLevel;//[Offset: 0x2f4, Size: 4]
	bool bIsPetAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	Vector Velocity;//[Offset: 0x2fc, Size: 12]
	float PetMoveSpeed;//[Offset: 0x308, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 1]
	float SwimmingAnimRate;//[Offset: 0x310, Size: 4]
	AnimSequenceBase* C_AppearAnim;//[Offset: 0x314, Size: 4]
	AnimSequenceBase* C_DisppearAnim;//[Offset: 0x318, Size: 4]
	AnimSequenceBase* C_IdleAnim;//[Offset: 0x31c, Size: 4]
	AnimSequenceBase* C_FreeFallAnim;//[Offset: 0x320, Size: 4]
	AnimSequenceBase* C_FastFreeFallAnim;//[Offset: 0x324, Size: 4]
	AnimSequenceBase* C_FollowAnim;//[Offset: 0x328, Size: 4]
	AnimSequenceBase* C_FlyAroundAnim;//[Offset: 0x32c, Size: 4]
	AnimSequenceBase* C_SwimmingAnim;//[Offset: 0x330, Size: 4]
	BlendSpaceBase* C_SwimmingBS;//[Offset: 0x334, Size: 4]
	BlendSpaceBase* C_MovementBS;//[Offset: 0x338, Size: 4]
	AnimSequence* C_JumpAnim;//[Offset: 0x33c, Size: 4]
	AnimSequence* C_InAirAnim;//[Offset: 0x340, Size: 4]
	AnimSequence* C_LandingAnim;//[Offset: 0x344, Size: 4]
	void ResetJump();// 0x38ff468
	void OnPetSpectatorStateChange(enum State, FString Param);// 0x38ff360
	void OnPetMontageStarted(AnimMontage* InMontage);// 0x3515860
	void OnPetMontageEnded(AnimMontage* InMontage, bool bInterrupted);// 0x38fcb4c
	void OnJumped();// 0x38ff34c
	void DestroySubAnimations();// 0x38fc970

--------------------------------
Class: ResolvePenetrationParams
	bool bLineTracePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bBackDirAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int IterationRounds;//[Offset: 0x4, Size: 4]
	int IterationDirections;//[Offset: 0x8, Size: 4]
	float AdjustRadius;//[Offset: 0xc, Size: 4]
	float AdjustMaxHeight;//[Offset: 0x10, Size: 4]
	FName IgnoreTag;//[Offset: 0x18, Size: 8]
	FName PushupTag;//[Offset: 0x20, Size: 8]
	float OverlapShapeInflation;//[Offset: 0x28, Size: 4]
	float PassWallShapeInflation;//[Offset: 0x2c, Size: 4]
	World* InWorld;//[Offset: 0x30, Size: 4]
	Actor*[] OverlapIgnoreActors;//[Offset: 0x34, Size: 12]
	Actor*[] PassWallIgnoreActors;//[Offset: 0x40, Size: 12]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RescueTime
	bool bBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float RescueStartTime;//[Offset: 0x4, Size: 4]
	float RescueExpectedEndTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SyncTeamMatePlayerState
	STExtraPlayerState* TeammatePlayerState;//[Offset: 0x0, Size: 8]
	byte PlayerInTeamIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HistoricalTeammateInfo
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bIsDeliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	uint64 OriginalUID;//[Offset: 0x28, Size: 8]
	int InTeamIndex;//[Offset: 0x30, Size: 4]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 52]
	FString PlayerName;//[Offset: 0x34, Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterBuffRecord
	int BuffID;//[Offset: 0x0, Size: 4]
	int CauseSkillID;//[Offset: 0x4, Size: 4]
	int LayerCount;//[Offset: 0x8, Size: 4]
	Actor* Causer;//[Offset: 0xc, Size: 8]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 1]
	enum MapAdded;//[Offset: 0x1, Size: 1]
	byte InstanceID;//[Offset: 0x2, Size: 1]
	int TypeId;//[Offset: 0x4, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x8, Size: 24]
	Vector_NetQuantize Location;//[Offset: 0x20, Size: 12]
	Actor* Actor;//[Offset: 0x2c, Size: 8]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CustomMarkEventData
	enum InWhichMap;//[Offset: 0x0, Size: 1]
	float CreateTime;//[Offset: 0x4, Size: 4]
	int CustomState;//[Offset: 0x8, Size: 4]
	FString CustomString;//[Offset: 0xc, Size: 12]

--------------------------------
Class: TeamMateDisappearInfo
	bool bHasPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bCanGetPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bMovementCompTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bMovementActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAvatarHeadVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	enum SerializeStatus;//[Offset: 0x6, Size: 1]
	enum NetRelevantStatus;//[Offset: 0x7, Size: 1]
	float PawnCreateTime;//[Offset: 0x8, Size: 4]
	float PawnDestroyTime;//[Offset: 0xc, Size: 4]
	float ReportTime;//[Offset: 0x10, Size: 4]
	Vector Location;//[Offset: 0x14, Size: 12]
	Vector MeshLocation;//[Offset: 0x20, Size: 12]
	Vector ServerLocation;//[Offset: 0x2c, Size: 12]
	FString PlayerUID;//[Offset: 0x38, Size: 12]

--------------------------------
Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString PlayerName;//[Offset: 0xc, Size: 12]
	Vector HitPos;//[Offset: 0x18, Size: 12]
	FString ConfigKey;//[Offset: 0x24, Size: 12]
	int audioID;//[Offset: 0x30, Size: 4]
	FString ParamString;//[Offset: 0x34, Size: 12]
	int BindActorGUID;//[Offset: 0x40, Size: 4]
	int RelationID;//[Offset: 0x44, Size: 4]
	uint32 PlayerKey;//[Offset: 0x48, Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x4c, Size: 4]
	enum MsgType;//[Offset: 0x50, Size: 1]

--------------------------------
Class: FatalDamageParameter
	FatalDamageStringParameter String;//[Offset: 0x0, Size: 84]
	int DamageType;//[Offset: 0x54, Size: 4]
	int AdditionalParam;//[Offset: 0x58, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int ResultHealthStatus;//[Offset: 0x60, Size: 4]
	int Relationship;//[Offset: 0x64, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x68, Size: 4]
	int realKillerNewKillNum;//[Offset: 0x6c, Size: 4]
	uint32 CauserKey;//[Offset: 0x70, Size: 4]
	uint32 VictimKey;//[Offset: 0x74, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x78, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x7c, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x80, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x84, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x88, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x8c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x90, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x94, Size: 4]
	int CauserType;//[Offset: 0x98, Size: 4]
	int VictimType;//[Offset: 0x9c, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0xa0, Size: 12]
	int AssistNum;//[Offset: 0xac, Size: 4]
	bool isCausedByDevliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]

--------------------------------
Class: FatalDamageStringParameter
	FString CauserName;//[Offset: 0x0, Size: 12]
	FString VictimName;//[Offset: 0xc, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x18, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x24, Size: 12]
	FString RealKillerName;//[Offset: 0x30, Size: 12]
	FString CauserNation;//[Offset: 0x3c, Size: 12]
	FString VictimNation;//[Offset: 0x48, Size: 12]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x2b0, Size: 4]
	float TriggerInterval;//[Offset: 0x2b4, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x2b8, Size: 4]
	void OnTriggered();// 0x49216cc

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector ImpactNormal;//[Offset: 0xc, Size: 12]
	Vector ImpactVelocity;//[Offset: 0x18, Size: 12]
	Actor* HitActor;//[Offset: 0x24, Size: 8]
	PrimitiveComponent* HitComponent;//[Offset: 0x2c, Size: 8]
	float BulletHitTime;//[Offset: 0x34, Size: 4]
	float BulletLaunchTime;//[Offset: 0x38, Size: 4]
	float BulletMovedDistance;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	bool bUseBulletLocReplaceImpactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e2, Size: 1]
	bool bUseCachePool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e3, Size: 1]
	Vector ServerShootPos;//[Offset: 0x5e4, Size: 12]
	Vector ImpactVelocity;//[Offset: 0x5f0, Size: 12]
	float bFixDistanceToShooter;//[Offset: 0x5fc, Size: 4]
	float ServerShootTime;//[Offset: 0x600, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x610, Size: 80]
	float VerifyBlockTolDis;//[Offset: 0x660, Size: 4]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x684, Size: 4]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x3586a20
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x375e048
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x375df30
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x3586940
	void OnImpact(out const HitResult _ImpactResult);// 0x3586860
	bool IsValidRoleToImpact();// 0x3602290
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x375dcf4

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 4]
	Actor* Instigator;//[Offset: 0x44, Size: 4]
	uint32 ShootID;//[Offset: 0x48, Size: 4]

--------------------------------
Class: VehicleTrailerComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnLinkStateChange;//[Offset: 0x14c, Size: 12]
	delegate OnTrailerLinkStateChange;//[Offset: 0x158, Size: 12]
	int MaxTrailerNum;//[Offset: 0x174, Size: 4]
	<enum,int> LinkFailedTips;//[Offset: 0x178, Size: 60]
	float Timer_TrailerPoll;//[Offset: 0x1b4, Size: 4]
	Vector LinkerPoint;//[Offset: 0x1b8, Size: 12]
	float ExtentTimes4Distance;//[Offset: 0x1c4, Size: 4]
	float RepDistanceErrorSq;//[Offset: 0x1c8, Size: 4]
	float LowSpeedRepDistanceErrorSq;//[Offset: 0x1cc, Size: 4]
	float LowSpeed4RepDistanceError;//[Offset: 0x1d0, Size: 4]
	RepTrailerLinkState ReplicatedLinkState;//[Offset: 0x1d4, Size: 8]
	VehicleTrailerComponent* CandidatePrev;//[Offset: 0x1dc, Size: 4]
	CameraOffsetData CameraDta;//[Offset: 0x208, Size: 44]
	void TryUnlink();// 0x3a7a398
	void TryLink();// 0x3a7a384
	void TrailerPoll();// 0x3a7a370
	void TrailerLinkStateChangeDelegate__DelegateSignature(VehicleTrailerComponent* Trailer, enum LinkState);// 0x49216cc
	void ServerUnlink();// 0x3a7a314
	void ServerLink();// 0x3a7a2b8
	void ServerForceLinkTo(VehicleTrailerComponent* PrevTrailer);// 0x3a7a240
	void OnRep_LinkState(out const RepTrailerLinkState LastLinkState);// 0x3a7a1b4
	void OnMeshPhysicsCreated();// 0x3a7a1a0
	void OnLinkConstraintBroken(int ConstraintIndex);// 0x3a7a128
	void OnHealthStateChanged(enum HealthState);// 0x3a7a0b0
	void OnDriverChanged(STExtraPlayerCharacter* OldDriver, STExtraPlayerCharacter* NewDriver);// 0x3a79ff4
	void LinkStateChangeDelegate__DelegateSignature(enum LinkState);// 0x49216cc
	bool IsTrailer();// 0x3a79fc8
	bool HasTrailer();// 0x3a79f9c
	int GetTrailerNum();// 0x3a79f74
	VehicleTrailerComponent* GetPrev();// 0x3a79f48
	VehicleTrailerComponent* GetNext();// 0x3a79f1c
	enum GetLinkState();// 0x3a79f00
	VehicleTrailerComponent* GetHead();// 0x3a79ed8

--------------------------------
Class: RepTrailerLinkState
	enum LinkState;//[Offset: 0x0, Size: 1]
	VehicleTrailerComponent* Prev;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0x100, Size: 12]
	float SeekAreaPixelSize;//[Offset: 0x10c, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0x110, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0x118, Size: 8]
	float ScopeInDelayTime;//[Offset: 0x120, Size: 4]
	float InitialLockFrameLength;//[Offset: 0x124, Size: 4]
	float FinalLockFrameLength;//[Offset: 0x128, Size: 4]
	float MaxSeekDeistance;//[Offset: 0x12c, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x130, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x134, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x138, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x13c, Size: 4]
	float TraceTargetInterval;//[Offset: 0x140, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x144, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x148, Size: 60]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x184, Size: 60]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x1c0, Size: 60]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x1fc, Size: 4]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x200, Size: 4]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x204, Size: 4]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x208, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x20c, Size: 4]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x214, Size: 12]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x220, Size: 12]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x22c, Size: 12]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x248, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x24c, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x250, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	bool bSeekAndLockAlwaysValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	bool bSeekAndLockWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 1]
	bool bSeekAndLockToVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 1]
	bool bSeekAndLockToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	Actor* LastLockSoundTaget;//[Offset: 0x2bc, Size: 8]
	void ShowEnemyLaunchRocketTips();// 0x36e585c
	void SetCurrentLockTarget(Actor* InTarget);// 0x37a8b20
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x37a8a24
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x37a8970
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x37a8874
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x37a87c0
	void RemoveTargetList(Actor*[] TargetList);// 0x37a8668
	void RemoveTarget(Actor* Target);// 0x37a85f0
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x49216cc
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x49216cc
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x49216cc
	void InitComplete();// 0x34f4004
	void HandleTargetOutOfSeekArea();// 0x37a85dc
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x36a4a68
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x37a855c
	enum GetCurrentSeekAndLockStage();// 0x37a852c
	Actor* GetCurrentLockTarget();// 0x37a8504
	bool CheckTargetIsVisible(Actor* Target);// 0x36a489c
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x37a8484
	void AddTarget(Actor* Target);// 0x37a840c

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 1]
	float TolerateDistanceFractor;//[Offset: 0xc0, Size: 4]
	float MaxPacketLossRate;//[Offset: 0xc4, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xc8, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xcc, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xd0, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xd4, Size: 4]
	float SecondsSinceLastTeleport2SkipCheckDSAverageSpeed;//[Offset: 0xd8, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xe0, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xe4, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xe8, Size: 4]
	int MaxLocusFailTime;//[Offset: 0xec, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xf0, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0xf4, Size: 4]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0xf8, Size: 32]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x184, Size: 140]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x210, Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x288, Size: 60]
	ClientMoveSpeedCheck ClientMoveSpeedCheck;//[Offset: 0x2c8, Size: 40]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x2f0, Size: 36]
	float MaxJumpHeight;//[Offset: 0x318, Size: 4]
	Character* CharacterOwner;//[Offset: 0x31c, Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	void SetJumpLimitorJumpDistanceScale(const float InValue);// 0x36b3b78
	void SetJumpLimitorCheckLowSpeedThreshold(const float SpeedThreshold);// 0x36b3b78
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x36e4ac8
	void RefreshRealMaxJumpHeight();// 0x34f4004
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x36e493c
	void Ping2Client(float ServerTime);// 0x35a0fd4
	void OnPreReconnectOnServer();// 0x36e4928
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x36e4680
	void DebugDrawLine(const Vector Start, const Vector End);// 0x36e45d4
	void ClearJumpLimit();// 0x36e45c0

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x4, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bRecordOnlyIfReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	int VerifyFailedCnt;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	uint32 bIgnoreCheck;//[Offset: 0x4, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x8, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0xc, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x10, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x14, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x18, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x1c, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x20, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x24, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x28, Size: 4]
	float MaxClientSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74, Size: 4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ClientMoveSpeedCheck
	float ThresholdScale;//[Offset: 0x20, Size: 4]

--------------------------------
Class: RealtimeMoveSpeedCheck

--------------------------------
Class: ShovelInfo

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xbc, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc0, Size: 4]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x3571fbc

--------------------------------
Class: CharacterParachuteComponent.LuaInstancedActorComponent.ActorComponent.Object
	float CurrentFallSpeed;//[Offset: 0x14c, Size: 4]
	float CurrentDiveRate;//[Offset: 0x158, Size: 4]
	float FreeFall_InputForwardTriggerThreshold;//[Offset: 0x16c, Size: 4]
	float FreeFall_InputRightTriggerThreshold;//[Offset: 0x170, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x174, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x178, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x17c, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x180, Size: 4]
	float FreeFall_MinForwardSpeed;//[Offset: 0x184, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x188, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x18c, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x190, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x194, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x198, Size: 4]
	float FreeFall_MinPitchForwardAngle;//[Offset: 0x19c, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x1a0, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x1a4, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x1a8, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x1ac, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x1b0, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x1b4, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x1b8, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	float Opened_AcceFall;//[Offset: 0x1c0, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x1c4, Size: 4]
	float Opened_AcceForward;//[Offset: 0x1c8, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x1cc, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x1d0, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x1d4, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x1d8, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x1dc, Size: 4]
	float Opened_AcceRight;//[Offset: 0x1e0, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x1e4, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x1e8, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x1ec, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x1f0, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x1f4, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x1f8, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x1fc, Size: 4]
	float ReliableRPCInterval;//[Offset: 0x200, Size: 4]
	float UseNewVerifyHeightInParachuteOpen;//[Offset: 0x204, Size: 4]
	float OpenRealMoveAndWallCheckHight;//[Offset: 0x208, Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x21c, Size: 12]
	float Launch_Time;//[Offset: 0x228, Size: 4]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x22c, Size: 12]
	Vector Launch_Accel;//[Offset: 0x238, Size: 12]
	bool Launch_AutoExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	float Launch_YawRandomDelta;//[Offset: 0x248, Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x24c, Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x250, Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x254, Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x258, Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x25c, Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x260, Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x264, Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x268, Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x26c, Size: 4]
	delegate OnInitLaunch;//[Offset: 0x270, Size: 12]
	delegate OnResetLaunch;//[Offset: 0x27c, Size: 12]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x288, Size: 12]
	delegate OnLanded;//[Offset: 0x294, Size: 12]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x2a0, Size: 4]
	float AllowMaxDistanceSqInParachuteOpen;//[Offset: 0x2a4, Size: 4]
	float AllowMaxVelocitySqAtServer;//[Offset: 0x2a8, Size: 4]
	float MaxZAllowDistance;//[Offset: 0x2ac, Size: 4]
	float MaxZAllowDistanceNew;//[Offset: 0x2b0, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	float FollowerDist;//[Offset: 0x2d8, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x2dc, Size: 4]
	bool bLuaSetCheckClientPosVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bGmSetUseServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	bool bGmSetUseMaxForwardInputValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 1]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x358, Size: 40]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x380, Size: 4]
	float DistanceToJumpPlaneLoc;//[Offset: 0x388, Size: 4]
	float AutoParachuteStopMoveForwardDistance;//[Offset: 0x38c, Size: 4]
	float AutoParachuteMoveForwardRate;//[Offset: 0x390, Size: 4]
	float AutoParachuteOpenMoveForwardRate;//[Offset: 0x394, Size: 4]
	float AutoParachutePitchOffset;//[Offset: 0x398, Size: 4]
	float ParachuteContinuTime;//[Offset: 0x3c8, Size: 4]
	float ParachuteContinuTimeDsMore;//[Offset: 0x3cc, Size: 4]
	float ParachuteContinuStartTime;//[Offset: 0x3d0, Size: 4]
	bool ParachuteStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	float CanbeMoreOpened_MaxForwardSpeed;//[Offset: 0x3d8, Size: 4]
	int ParachuteMoveListLength;//[Offset: 0x3dc, Size: 4]
	float AdjustParachuteTimeGap;//[Offset: 0x3e0, Size: 4]
	int ErrorMoveTimeSendMaxTime;//[Offset: 0x3e4, Size: 4]
	ParachuteMoveState[] ParachuteMoveList;//[Offset: 0x3ec, Size: 12]
	bool VerifyClientTimeStamp(float TimeStamp, out const Vector Position, out const Vector Velocity);// 0x35b7bb0
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x35b7a14
	void UpdateRadiouBlurState(float DeltaTime, float ThrottleInput, float SteerInput, enum State);// 0x35b78cc
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x35b7730
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x35b7630
	void UpdateLaunchRotation(float InputForward, float InputRight, float DeltaTime);// 0x35b7530
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x35b73e4
	void TriggerInputUtil(float InputForward, float InputRight, out int InputForwardTriggered, out int InputRightTriggered);// 0x35b7278
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x35b7124
	void StopParachute();// 0x35b7110
	void StartParachute();// 0x35b70fc
	void SetParachuteVelocity(out const Vector NewVelocity);// 0x35b7078
	void SetAutoParachuteLocation(out const Vector Location);// 0x35b6ff4
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x35b6f74
	void SendServerMoveAckToClientInternal(float TimeStamp, bool bAckGoodMove, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x35b6db0
	void SendClientMoveToServerAccurateInternal(float TimeStamp, float ThrottleInput, float SteerInput, float GlidingSpeed, enum State, Rotator CameraRotation, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x35b6adc
	void ResetVelocity();// 0x35b6ac8
	void RemoveRadiouBlur();// 0x35b6ab4
	void PostNetReceiveNewState();// 0x35b6aa0
	Vector ParachuteMoveAfterVelocity(STExtraBaseCharacter* Character, float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation, out const Rotator CurrentRotation, out const Vector CurrentVelocity, out const Vector CurrentPosition, float GlidingSpeed, out Vector OutCurrentVelocity, out float OutCurrentGlidingSpeed);// 0x35b66b0
	Rotator ParachuteMoveAfterRotation(STExtraBaseCharacter* Character, float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation, out const Rotator CurrentRotation, out const Vector CurrentVelocity);// 0x35b6408
	Vector ParachuteMoveAfterPosition(STExtraBaseCharacter* Character, float DeltaTime, out const Vector CurrentVelocity, out const Vector CurrentPosition);// 0x35b628c
	Vector ParachuteGetAfterPosition(STExtraBaseCharacter* Character, float DeltaTime, out const Vector CurrentVelocity, out const Vector CurrentPosition);// 0x35b6110
	void OnPreReconnectOnServer();// 0x35b60fc
	void OnAsyncLoadRadiouBlurDone();// 0x35b60e8
	static bool IsParachuteWindEnable();// 0x35b60c0
	bool IsAutoParachutePathPlanningEnable();// 0x35b6098
	bool IsAutoParachuteEnable();// 0x35b6070
	void InvalidateAdjustFollowerLocation();// 0x35b605c
	void InitRadiouBlurMat();// 0x35b6048
	void InitParachuteContinuStart();// 0x35b6034
	void GMParachuteAddServerPos(float X, float Y, float Z);// 0x35b5f34
	float GetReplicatedRightInput();// 0x35b5f0c
	float GetReplicatedForwardInput();// 0x35b5ee4
	Vector GetParachuteVelocity();// 0x35b5e9c
	Vector GetLaunchInitVelocity();// 0x35b5e4c
	Vector GetCurVelocity();// 0x35b5e04
	float GetAutoParachuteMoveForwardRate();// 0x35b5ddc
	Vector GetAutoParachuteLocation();// 0x35b5d94
	void EnableAutoParachutePathPlanning(bool bEnable);// 0x35b5d14
	void EnableAutoParachute(bool bEnable);// 0x35b5c94
	void DebugParachuteDetail(FString Caller, out const Vector OldLocation, out const Rotator OldRotation, float DeltaSeconds);// 0x35b5ae8
	void ClearParachuteStatusCache();// 0x35b5ad4
	void CharacterSetParachuteState(enum State);// 0x34f8754
	Vector CalWingUpVelocityUtil(Vector InCurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x35b58c8
	Vector CalWingUpVelocity(float InputForward, float InputRight, float DeltaTime);// 0x35b57a4
	Vector CalParachuteOpenedVelocityUtil(STExtraBaseCharacter* Character, Vector InCurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, float GlidingSpeed, out Vector OutCurrentVelocity, out float OutCurrentGlidingSpeed);// 0x35b54b8
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x35b539c
	Vector CalLaunchVelocityUtil(Vector InCurVelocity, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x35b51dc
	Vector CalLaunchVelocity(float InputForward, float InputRight, float DeltaTime);// 0x35b50b8
	Vector CalFreeFallVelocityUtil(Vector InCurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x35b4eac
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x35b4d90
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x35b4c40
	void AdjustFollowerLocation();// 0x35b4c2c
	void AdjustClientParachuteTime(float NeedAdjustTimeconst, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x35b4ab0
	void AddRadiouBlur(float InWeight);// 0x35b4a38

--------------------------------
Class: ParachuteMoveState
	float TimeStamp;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float SteerInput;//[Offset: 0x8, Size: 4]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]
	Vector Position;//[Offset: 0x18, Size: 12]
	Vector Velocity;//[Offset: 0x24, Size: 12]
	Rotator Rotation;//[Offset: 0x30, Size: 12]
	enum State;//[Offset: 0x3c, Size: 1]
	float GlidingSpeed;//[Offset: 0x40, Size: 4]

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xbc, Size: 4]
	float TileRemovalRadius;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0x18c, Size: 4]
	bool bEnableSkillCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool bEnableSkillBlackboradIDSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 1]
	bool bEnableSkillEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1ac, Size: 4]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x1b4, Size: 60]
	<int,UAEBlackboard*> SkillIDBlackboardMap;//[Offset: 0x1f0, Size: 60]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x22c, Size: 60]
	delegate ChangeActorBlackboard;//[Offset: 0x268, Size: 12]
	<int,UTSkillCreateData> SkillBaseDataMaps;//[Offset: 0x274, Size: 60]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x2b0, Size: 12]
	delegate OnSkillCast;//[Offset: 0x2bc, Size: 12]
	<int,int> IDToSyncSkillActiveStateData;//[Offset: 0x2c8, Size: 60]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x304, Size: 12]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x310, Size: 60]
	<int,int> ButtonSlotToSkillID;//[Offset: 0x34c, Size: 60]
	TeammateSkillCDRepData TeammateSkillCDRepData;//[Offset: 0x388, Size: 16]
	SkillDynamicRepData SyncDynamicRepData;//[Offset: 0x398, Size: 12]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x3a4, Size: 12]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x410, Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x438, Size: 40]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x460, Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x470, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x474, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x47c, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x480, Size: 60]
	SkillParamater[] SkillParamaters;//[Offset: 0x4c8, Size: 12]
	delegate OnSkillInitSignature;//[Offset: 0x4d4, Size: 12]
	delegate SkillStartEvent;//[Offset: 0x4e0, Size: 12]
	delegate SkillStopEvent;//[Offset: 0x4ec, Size: 12]
	delegate SkillLevelChangeEvent;//[Offset: 0x4f8, Size: 12]
	int[] PendingRemoveSkillID;//[Offset: 0x504, Size: 12]
	<int,byte> CurSkillLevels;//[Offset: 0x510, Size: 60]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x54c, Size: 12]
	<int,SkillDisableKeySet> DisableSkillTagsMap;//[Offset: 0x558, Size: 60]
	MutilSkillSynData NewSkillSynData;//[Offset: 0x594, Size: 36]
	SkillSinglePhaseData NewSkillSinglePhaseData;//[Offset: 0x5b8, Size: 36]
	<uint64,UTSkillSimulateData> SkillSimulateDataMap;//[Offset: 0x5dc, Size: 60]
	<uint64> AsyncLoadingSkillInst;//[Offset: 0x618, Size: 60]
	UTSkillExecQueue SkillExecQueue;//[Offset: 0x654, Size: 132]
	uint64 NetClientSimulateInstID;//[Offset: 0x6d8, Size: 8]
	void UpdateSyncSkillCDData(int SkillID);// 0x679d9bc
	void UpdateSyncSkillActiveState(int SkillID);// 0x679d944
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x679d8cc
	void TryDeleteOneSkill(int SkillID, bool IsImmediately);// 0x679d808
	void TryAddOneSkill(int SkillID, bool bActive, int ButtonSlot);// 0x679d6fc
	void TriggerEvent(int SkillID, byte EventType);// 0x39d7f84
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x679d540
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestID);// 0x679d428
	void StopSkillSpecific(UTSkill* Skill, enum StopReason);// 0x679d36c
	void StopSkillAll(enum StopReason);// 0x37cd5cc
	void StopSkill_WithID(int SkillID, enum StopReason);// 0x679d2a8
	void StopSkill(int SkillID, enum StopReason);// 0x679d1e4
	bool SetupOwnerAndSystem();// 0x679d1bc
	void SetSkillTagsDisable(int[] SkillTags, bool bDisable, out FString TriggerKey);// 0x679cf7c
	void SetSkillTagDisable(int SkillTag, bool bDisable, out FString TriggerKey);// 0x679ce1c
	void SetSkillState(out const UTSkillStateSyncData[] InSyncStateDatas);// 0x679cd70
	void SetSkillOwner(Actor* tempActor);// 0x368b048
	void SetSkillLevel(int SkillID, int SkillLevel);// 0x679ccb4
	bool SetSkillActive(int SkillID, bool bActive, bool bForceSet, int ButtonSlot);// 0x679cb44
	void SetAutoSkillID(int InSkillID);// 0x679cacc
	void ServerTriggerEvent_WithParamsAndTssData(int SkillID, byte EventType, uint64 InstID, const byte[] Content, const byte[] TssData);// 0x679c860
	void ServerTriggerEvent_WithParams(int SkillID, byte EventType, uint64 InstID, const byte[] Content);// 0x679c680
	void ServerTriggerEvent_WithIDAndTssData(int SkillID, byte EventType, uint64 InstID, const byte[] TssData);// 0x679c4a0
	void ServerTriggerEvent_WithID(int SkillID, byte EventType, uint64 InstID);// 0x679c348
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x679c24c
	void ServerStopAllSkill(enum Reason);// 0x679c198
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x679c0c4
	void ServerNotifyRandomSeed(int Seed);// 0x679c010
	void ResetTeammateSkillCDData();// 0x679bffc
	void ResetSkillCoolDown(int SkillID, int CDIndex);// 0x679bf38
	void ResetAllSkillCoolDown();// 0x679bf1c
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState);// 0x679bdf8
	void RepSkillHitInfo();// 0x679bde4
	void RepLastCastTime();// 0x34f4004
	void ReplaceSkill(int OldSkillID, int NewSkillID);// 0x679bd28
	void RemoveReplacedSkill(int OldSkillID);// 0x679bcb0
	void RemoveAllSkillUIWidget();// 0x679bc9c
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x679bbe0
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x679baa8
	UTSkill* QuerySkill(int SkillID, bool bOnlyQuery);// 0x679b9d4
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x679b820
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x679b75c
	void OnRespawned();// 0x34d0a90
	void OnRep_SkillHitInfo();// 0x37e3780
	void OnRep_SkillCDDatas();// 0x679b748
	void OnRep_SkillActiveState();// 0x679b734
	void OnRep_ReplaceSkill();// 0x34f4004
	void OnRep_NewSkillSynData();// 0x679b720
	void OnRep_NewSkillSinglePhaseData();// 0x679b70c
	void OnRep_NetClientSimulateInstID();// 0x679b6f8
	void OnRep_EnableSkillEncrypt();// 0x34f4004
	void OnRep_DynamicRepData();// 0x679b6e4
	void OnRecycled();// 0x34d0ae4
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x679b620
	void NewUAEBlackboard(int SkillID);// 0x679b5a8
	void LocalTriggerNewSkillFail(UTSkill* InNewSkill, uint64 InstID);// 0x679b4e8
	bool IsSkillTagDisable(int InSkillID);// 0x678d8ac
	bool IsSkillCanUse();// 0x679b4c0
	bool IsSkillActived(int SkillID);// 0x679b440
	bool IsReadyToCastSkill(int SkillID);// 0x679b3b8
	bool IsEnableSkillCoolDown();// 0x679b388
	bool IsCurrentUseSkillID(int InSkillID);// 0x679b308
	bool IsCastingSkillID(int InSkillID);// 0x679b280
	bool IsCastingSkill();// 0x679b250
	void HandleTriggerParamsEventSuccess(int SkillID, byte EventType);// 0x49216cc
	void HandleTriggerParamsEventFail(int SkillID, byte EventType);// 0x49216cc
	bool HandleTriggerParamsEvent(int SkillID, byte EventType);// 0x49216cc
	void HandleSkillStop(int SkillID, enum StopReason);// 0x3a10cdc
	void HandleSkillStart(int SkillID);// 0x34cff1c
	UAEBlackboard* GetUAEBlackboardBySkillID(int SkillID);// 0x679b1c8
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x679b148
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x3a10c54
	UTSkillStateSyncData[] GetSkillState();// 0x679b0e4
	int GetSkillSlotBySkillID(int SkillID);// 0x679b064
	int GetSkillSlotBySkill(UTSkill* Skill);// 0x679afe4
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x679aed0
	int GetSkillLevel(int SkillID);// 0x679ae50
	int GetSkillIDByClass(class Object SkillClass);// 0x679adc8
	FString[] GetSkillExecString();// 0x679ac6c
	int GetSkillCurPhase(UTSkill* Skill);// 0x679abec
	UTSkill* GetSkillByName(FString SkillName);// 0x679aa84
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x679a91c
	int GetSkillButtonSlot(int SkillID);// 0x679a89c
	UTSkillCreateData GetSkillBaseData(int SkillID);// 0x679a814
	UTSkill* GetSkill(int SkillID);// 0x679a78c
	int GetReplacedSkill(int OldSkillID);// 0x679a70c
	byte GetRealOwnerRoleSafety();// 0x3a10a1c
	byte GetMutexRelation(int TempSkillID, int InSkillID, bool bShouldMonopolize);// 0x679a5f4
	float GetLastCastTime(int SkillID);// 0x679a574
	float GetLastCastFinishTime(int SkillID);// 0x679a4f4
	UTSkill*[] GetCurSkills();// 0x679a434
	UTSkillPhase* GetCurSkillPhase(int InSkillSlot);// 0x679a3b4
	int GetCurSkillID(UTSkill* Skill);// 0x679a334
	UTSkill* GetCurSkill(int InSkillSlot);// 0x679a2b4
	int[] GetCurMonopolizeSkills();// 0x679a1f4
	int[] GetCurAllSkillIDs();// 0x679a138
	float GetCoolDownTime(int SkillID, int CoolDownIndex);// 0x679a074
	int GetButtonSlotSkillID(int ButtonSlot);// 0x6799ff4
	void DynamicRemoveSkill(int InSkillID);// 0x37a855c
	void DynamicAddSkill(int InSkillID);// 0x3a1063c
	void ClientStopPreActionSkill(int SkillID, uint64 InstID);// 0x6799f2c
	void ClientStopOneSkill(uint64 InstID, bool bSinglePhaseRep);// 0x6799e5c
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x6799d90
	void ClientSimulateOneSkill(uint64 InstID, int SkillID, int PhaseIndex, bool bSinglePhaseRep);// 0x6799c34
	void ClearSkill(bool bStopAllSkill, bool bDeactivateAllSkill, bool bResetSkillCD);// 0x6799b0c
	void ClearRepParams();// 0x34d0ac8
	void ClearInitParams();// 0x34d0aac
	void CacheSkillWidget(int SkillID, UTSkillWidget* Widget);// 0x3a10470

--------------------------------
Class: UTSkill.LuaActor.Actor.Object
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	FString SkillName;//[Offset: 0x3b0, Size: 12]
	FName SkillGroup;//[Offset: 0x3c0, Size: 8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	enum SkillCastType;//[Offset: 0x3c9, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb, Size: 1]
	int SkillID;//[Offset: 0x3cc, Size: 4]
	int SkillTemplateID;//[Offset: 0x3d0, Size: 4]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bMoveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d6, Size: 1]
	bool bNeedCheckSimulateCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d7, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x3dc, Size: 72]
	bool bCoolDownWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	int CoolDownWhenStopIndex;//[Offset: 0x428, Size: 4]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	UTSkillBlackboardParameter[] SkillBlackboardParamList;//[Offset: 0x430, Size: 12]
	bool bSetBlackboardDefaultData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 1]
	bool bRecycleWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43e, Size: 1]
	bool bHasBlackboradSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43f, Size: 1]
	FString SkillTimeScaleAttrName;//[Offset: 0x440, Size: 12]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x44c, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x488, Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x48c, Size: 12]
	int CurComponentNameIndex;//[Offset: 0x498, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x4dc, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x4e4, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x39dc47c
	void ResetSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x678d9bc
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x39d72c0
	bool JumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x39b57f8
	bool IsEnableSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x678d934
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x678d8ac
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x678d884
	UAEBlackboard* GetSpecificBlackboard();// 0x678d85c
	UTSkillPhase* GetSkillPhaseByName(FString PhaseName);// 0x678d790
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x678d708
	UTSkillBaseWidget* GetSkillEffectByPhaseName(FString PhaseName, FString EffectName);// 0x678d5b8
	UTSkillBaseWidget* GetSkillEffectByPhaseIndex(int PhaseIndex, FString EffectName);// 0x678d4a8
	float GetSkillDurationScale(UTSkillManagerComponent* SkillManagerComponent);// 0x39dc3f4
	UTSkillPhase* GetCurSkillPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x678d420
	float GetCoolDownTime(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x678d354
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x39dc330
	enum CanBePlayed(UTSkillManagerComponent* SkillManagerComponent);// 0x64eacfc

--------------------------------
Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int SkillButtonSlot;//[Offset: 0x4, Size: 4]
	float interval;//[Offset: 0x8, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0xc, Size: 4]
	FString CoolDownMessage;//[Offset: 0x10, Size: 12]
	int CoolDownMessageID;//[Offset: 0x1c, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x20, Size: 12]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x2c, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: UTSkillPhase.Object
	FString PhaseName;//[Offset: 0x2c, Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0x3c, Size: 8]
	int PhaseIndex;//[Offset: 0x44, Size: 4]
	int ActionsTopHalfCount;//[Offset: 0x4c, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x50, Size: 100]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0xb4, Size: 4]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x67a5d40
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x67a5cc0
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x3a13024
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x424e2cc
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x67a5bf4
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x67a5b28
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x424e090
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x67a5a5c
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x67a5990
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x67a5910
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x3a12f9c
	bool ClearAttachments();// 0x37179ec
	void AfterStartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x424df4c

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x4, Size: 12]
	float AltPhaseDuration;//[Offset: 0x10, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	int CoolDownIndex;//[Offset: 0x18, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x1c, Size: 12]
	UTSkillPicker* Picker;//[Offset: 0x28, Size: 4]
	UTSkillEffect*[] Actions;//[Offset: 0x2c, Size: 12]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x38, Size: 12]
	enum PhaseType;//[Offset: 0x44, Size: 1]
	int JumpPhaseIndex;//[Offset: 0x48, Size: 4]
	UAEBlackboardKeySelector[] SyncBBKArray;//[Offset: 0x4c, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x58, Size: 12]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.Object
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x5944fa8
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x6793684
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x3565840
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x67935b8
	bool IsOK_Internal();// 0x6793588
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x6793500
	UTSkill* GetOwnerSkill();// 0x67934b8

--------------------------------
Class: UTSkillBaseWidget.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	FString EffectName;//[Offset: 0x34, Size: 12]
	Actor* BuffTargetActor;//[Offset: 0x40, Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0x44, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x4c, Size: 4]
	UAEBlackboard* GetUAEBlackboard();// 0x6795e98
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x6795e68
	Actor* GetOwnerPawn();// 0x64fe78c

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x50, Size: 32]
	class Object[] FilterTemplates;//[Offset: 0x70, Size: 12]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x88, Size: 12]
	UTSkillPickerFilter*[] Filters;//[Offset: 0x94, Size: 12]
	bool PickTargetsInner(Vector OriginPoint);// 0x67a6cdc
	bool PickTargets(Vector OriginPoint);// 0x67a6c64

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	enum PickerTargetRole;//[Offset: 0x11, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	float HitAngleCos;//[Offset: 0x2c, Size: 4]
	byte HitPhysMatType;//[Offset: 0x30, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: UTSkillPickerFilter.Object
	void HandleFilterArray(out UTSkillPickedTarget[] inArray, Actor* Owner);// 0x67a68b0

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.Object
	float fADScale;//[Offset: 0x50, Size: 4]
	float fAPScale;//[Offset: 0x54, Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0x58, Size: 12]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x355d300
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x37f9af4
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x67963e8
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x39e99ac
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x39d952c
	void OnAsyncLoadSoftPathDone();// 0x67963d4
	UTSkill* GetOwnerSkill();// 0x67963ac
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x6793684
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x363a2dc

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte SkillEventType;//[Offset: 0x50, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0x54, Size: 12]
	FName PreEventActionTag;//[Offset: 0x60, Size: 8]
	UTSkillEffect* SkillEffect;//[Offset: 0x68, Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0x6c, Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x78, Size: 12]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UTSkillCDBase.LuaObject.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x70, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x78, Size: 8]
	byte[] SyncContent;//[Offset: 0x80, Size: 12]
	bool bIgnoreCastSkillCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	enum CDRole;//[Offset: 0x8d, Size: 1]
	void BindLua(FString luaPath);// 0x6792bb4

--------------------------------
Class: LuaObject.Object
	FString LuaFilePath;//[Offset: 0x64, Size: 12]

--------------------------------
Class: UTSkillBlackboardParameter.UAEBlackboardParameter
	enum[] ResetRuleArray;//[Offset: 0x98, Size: 12]

--------------------------------
Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0, Size: 4]
	float LastCastTime;//[Offset: 0x4, Size: 4]
	float LastCastFinishTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkillActiveRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	int SkillLevel;//[Offset: 0x4, Size: 4]
	int SkillButtonSlot;//[Offset: 0x8, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TeammateSkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	float CDStartTime;//[Offset: 0x4, Size: 4]
	float CDEndTime;//[Offset: 0x8, Size: 4]
	int UseCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SkillDynamicRepData
	SkillDynamicState[] SkillData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkillDynamicState
	int SkillID;//[Offset: 0x0, Size: 4]
	bool bAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: SkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillSyncData_CD
	int SkillCDIndex;//[Offset: 0x0, Size: 4]
	byte[] SkillSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	byte HitSurfaceType;//[Offset: 0x18, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: UTReplaceSkillData
	int OldSkillID;//[Offset: 0x0, Size: 4]
	int NewSkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SkillDisableKeySet
	<FString> DisableKeySet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: MutilSkillSynData
	UTMutilSkillSynData[] DataList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UTMutilSkillSynData
	bool bEnableRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	uint64 CurInstanceID;//[Offset: 0x8, Size: 8]
	int CurSkillID;//[Offset: 0x10, Size: 4]
	int PhaseIndexes;//[Offset: 0x14, Size: 4]
	byte[] PhaseIndexArray;//[Offset: 0x18, Size: 12]
	byte[] BlackboardContent;//[Offset: 0x24, Size: 12]

--------------------------------
Class: SkillSinglePhaseData
	UTSkillSynSinglePhaseData[] DataList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UTSkillSynSinglePhaseData
	uint64 CurInstanceID;//[Offset: 0x0, Size: 8]
	int CurSkillID;//[Offset: 0x8, Size: 4]
	int CurSkillPhase;//[Offset: 0xc, Size: 4]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte[] BlackboardContent;//[Offset: 0x14, Size: 12]

--------------------------------
Class: UTSkillSimulateData
	uint64 InstanceID;//[Offset: 0x0, Size: 8]
	int SkillID;//[Offset: 0x8, Size: 4]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStopSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	int[] SimlatePhaseIndexs;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UTSkillExecQueue

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam SyncParam;//[Offset: 0x0, Size: 2]
	int SkillID;//[Offset: 0x4, Size: 4]
	int SkillButtonSlot;//[Offset: 0x8, Size: 4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: UTSkillWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x3a8, Size: 4]
	int SkillID;//[Offset: 0x3ac, Size: 4]
	float TickInterval;//[Offset: 0x3b0, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	void SetSkillManager(UTSkillManagerComponent* Manager);// 0x67a7db8
	void SetSkillID(int InSkillID);// 0x67a7d40
	void RemoveSelf();// 0x67a7d2c
	UTSkillManagerComponent* GetSkillManager();// 0x67a7d10
	int GetSkillID();// 0x67a7ce8
	UTSkillCDBase*[] GetSkillCDBases();// 0x67a7c80
	UTSkill* GetSkill();// 0x67a7c58
	PlayerController* GetLocalPlayerController();// 0x67a7c30
	void BindLua(FString luaPath);// 0x67a7ad8

--------------------------------
Class: LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x398, Size: 12]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 4]
	FString SwitchGroupName;//[Offset: 0x4, Size: 12]
	FString SwitchValue;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	bool bHasFallInWaterFully;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf1, Size: 1]
	float BreathMax;//[Offset: 0x104, Size: 4]
	float AssistAccountableDuration;//[Offset: 0x108, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x10c, Size: 4]
	bool bNearDeathOnSinglePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x114, Size: 4]
	int MaxDeathTimes;//[Offset: 0x118, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int NDStatusEnterTimes;//[Offset: 0x120, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x124, Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0x128, Size: 4]
	float Breath;//[Offset: 0x12c, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x130, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x134, Size: 4]
	float NDDecreaseRate;//[Offset: 0x138, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x140, Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x144, Size: 4]
	DamageEvent DamageEventRecorded;//[Offset: 0x148, Size: 8]
	delegate OnPreEnterNearDeath;//[Offset: 0x154, Size: 12]
	delegate OnEnterNearDeathState;//[Offset: 0x160, Size: 12]
	delegate OnLeaveNearDeathState;//[Offset: 0x16c, Size: 12]
	float BeCarriedReduceRate;//[Offset: 0x178, Size: 4]
	float BeEnemyCarriedReduceRate;//[Offset: 0x17c, Size: 4]
	bool bEnableSwimWhileDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool bIsBeingRemotelyRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	float SetHealthSafety(float AddVal);// 0x382e574
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x382e460
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x382e34c
	void ResetDataOnRespawn();// 0x382e338
	void RescueFinishSuccessfully();// 0x382e324
	void OnRep_BreathChanged();// 0x382df48
	bool IsNearDeathInvincible();// 0x382e2fc
	bool IsHealthAlive();// 0x382e2d4
	bool IsHaveLastBreathStatus();// 0x382e2ac
	bool IsFinishedLastBreathStatus();// 0x382e284
	void InitializeOwner(Pawn* TempPawn);// 0x382e20c
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadshot);// 0x382e044
	Controller* GetRecordedEventInstigator();// 0x382e028
	float GetBreathMax();// 0x382e00c
	float GetBreath();// 0x382dff0
	void EnterSwimWhileDying();// 0x382dfdc
	void EnableDirectlyDie(bool bEnable);// 0x382df5c
	void DoFinishLastBreath();// 0x382df48
	void DidFinishLastBreath();// 0x382df34
	void ClearNearDeathTeammate();// 0x382df20
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x382de54
	void AddDeadBuff();// 0x382de40

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xf4, Size: 4]
	int SelfRescueWanderingRadius;//[Offset: 0xf8, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0xfc, Size: 4]
	anPickerData FanData;//[Offset: 0x100, Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x130, Size: 4]
	STExtraBaseCharacter* CarryWho;//[Offset: 0x134, Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x138, Size: 4]
	float RestoringDuration;//[Offset: 0x154, Size: 4]
	float SelfRestoringDuration;//[Offset: 0x158, Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x15c, Size: 12]
	FString SelfDurationAttrModifyRef;//[Offset: 0x168, Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x174, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x17c, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x382f590
	void WaitingConfirmState_ActOnUnsatisfied();// 0x382f57c
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x36b3b78
	bool WaitingConfirmCarryState_IsConditionSatisfied();// 0x382f554
	void WaitingConfirmCarryState_ActOnUnsatisfied();// 0x382f540
	void WaitingConfirmCarryState_ActOnSatisfied(float DeltaTime);// 0x36b3b78
	void TickAsHelper(float DeltaTime);// 0x382f4c8
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x382f414
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x382f39c
	void SelectedCarryEnemyTargetChangeNotifyHUD(Pawn* previousTarget);// 0x382f324
	bool RescueingState_IsConditionSatisfied();// 0x382f2fc
	void RescueingState_ActOnUnsatisfied();// 0x382f2e8
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x36b3b78
	void RescueingProcessFinished();// 0x382f2d4
	void RefreshTargetChangeNotifyHUD();// 0x382f2c0
	bool PlayerConfirmToRescueClientSide();// 0x382f298
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x382f1c4
	void OnRep_IsRescueingOtherStatusChange();// 0x382f1b0
	bool IsInRescueingStatus();// 0x382f188
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x382f0cc
	float GetRestoringDuration();// 0x382f0a4
	void DrawDebugFan();// 0x34f4004
	void ClearTimerWaitingRescueProcessToFinish();// 0x382f090

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xbc, Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc0, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xc8, Size: 4]
	float CanFollowDist;//[Offset: 0xcc, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xd0, Size: 4]
	float QuitFollowDist;//[Offset: 0xd4, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xd8, Size: 4]
	float DistThrehold;//[Offset: 0xdc, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe4, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xec, Size: 4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x124, Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x130, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x38234d0
	void WaitingConfirmState_ActOnUnsatisfied();// 0x38234bc
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x36b3b78
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x3823444
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x38233cc
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x3823354
	bool PlayerStopFollow();// 0x382332c
	bool PlayerConfirmToFollow();// 0x3823304
	void InitializeOwner(Pawn* _TempPawn);// 0x382328c
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x3823214
	bool FollowingState_IsConditionSatisfied();// 0x38231ec
	void FollowingState_ActOnUnsatisfied();// 0x38231d8
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x3823160

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x3716624
	byte Start();// 0x35dc0b8
	bool IsValidate();// 0x36f14c0
	void DebugDraw(Color DebugColor, bool isPersist);// 0x39bcaf4
	void Awake();// 0x3716608

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x7c, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x80, Size: 4]
	byte Update(float DeltaTime);// 0x35b1434
	FString ToString();// 0x39bcbb8
	void TaskRemoved();// 0x3716624
	byte Start();// 0x35dc0b8
	bool IsValidate();// 0x36f14c0
	bool IsReachable();// 0x36665d4
	byte Finish();// 0x3666728
	void DebugDraw(Color DebugColor, bool isPersist);// 0x39bcaf4
	void Awake();// 0x3716608

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x470, Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x474, Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x478, Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x47c, Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ab, Size: 1]
	float ResultMinPitch;//[Offset: 0x4ac, Size: 4]
	float ResultMaxPitch;//[Offset: 0x4b0, Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	bool bCameraTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x4c8, Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x4cc, Size: 44]
	CameraOffsetData ProneCameraData;//[Offset: 0x4f8, Size: 44]
	CameraOffsetData IndoorCameraData;//[Offset: 0x524, Size: 44]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x550, Size: 44]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x57c, Size: 44]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x5a8, Size: 44]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x5d4, Size: 44]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x600, Size: 44]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x62c, Size: 44]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x658, Size: 44]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x684, Size: 44]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x6b0, Size: 44]
	CameraOffsetData VaultCameraData;//[Offset: 0x6dc, Size: 44]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x708, Size: 44]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x734, Size: 44]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x760, Size: 44]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x78c, Size: 44]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x7b8, Size: 44]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x7e4, Size: 44]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x810, Size: 44]
	CameraOffsetData SplineMoveCameraData;//[Offset: 0x83c, Size: 44]
	CameraOffsetData AirBorneStartCameraData;//[Offset: 0x868, Size: 44]
	CameraOffsetData AirBorneFlyingCameraData;//[Offset: 0x894, Size: 44]
	CameraOffsetData AirBorneSuperFlyingCameraData;//[Offset: 0x8c0, Size: 44]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x8ec, Size: 4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x8f0, Size: 4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x8f4, Size: 4]
	CameraOffsetData InsectCameraData;//[Offset: 0x8f8, Size: 44]
	CameraOffsetData SkillCameraData;//[Offset: 0x924, Size: 44]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x954, Size: 44]
	CameraOffsetData CustomCameraData;//[Offset: 0x980, Size: 44]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 1]
	bool bUseFixedTraceTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ad, Size: 1]
	bool bAllwaysDoTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ae, Size: 1]
	bool bTraceRealCameraLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9af, Size: 1]
	Vector TraceTagetLocation;//[Offset: 0x9b0, Size: 12]
	float AdditionalSocketOffetZMax;//[Offset: 0x9c0, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x9c4, Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x9cc, Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x9d0, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x9d4, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 1]
	bool bNoFixCameraLagWhenSpecator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e2, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e3, Size: 1]
	float OffsetCountTime;//[Offset: 0x9e4, Size: 4]
	float OffSetDurTime;//[Offset: 0x9e8, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x9ec, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x9f0, Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0xa00, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0xa30, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0xa40, Size: 16]
	void SetSelfieCameraDefRotation();// 0x35eb43c
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x35eb3bc
	void SetCustomCameraDataValueEnable(CameraOffsetData InCustomCameraData, bool IsEnable);// 0x35eb284
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x35eb16c
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x35eb0a8
	void ResetFreeCamera();// 0x35eb094
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x35eaf28
	void DelayRotationLagEnabledEnd();// 0x35eaf14
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x35eae4c
	void DelayRotationBackLagEnabledEnd();// 0x35eae38
	void DelayRotationBackLagEnabled(bool bEnabled, float Time, out const Rotator InRotation);// 0x35ead20
	void AddAdditiveCameraOffset(out const Transform Transform, float FOV, bool bAdd);// 0x35eabb0

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bForceUseTargetArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float GlobalTargetArmLength;//[Offset: 0x36c, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0x370, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x374, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x378, Size: 4]
	float SpringArmInterpSpeedScale;//[Offset: 0x37c, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x380, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x3cc, Size: 44]
	CameraOffsetData DefaultCameraData;//[Offset: 0x3f8, Size: 44]
	float CurAdditiveOffsetFov;//[Offset: 0x424, Size: 4]
	<byte,bool> CurActiveDataMap;//[Offset: 0x428, Size: 60]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x468, Size: 4]
	void OnRespawned();// 0x3583888
	bool HasActiveCameraOffsetData(byte InDataType);// 0x397ad34
	Rotator GetTargetRotation();// 0x397ace4
	float GetCameraTargetArmLength();// 0x397acb4
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x35eaf28
	void ClearCameraData();// 0x397ac98

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 4]
	Vector AkLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int StatusChangeMargin;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int WeaponId;//[Offset: 0x1c, Size: 4]
	int FloorType;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x6d4, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x6d8, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x6dc, Size: 4]
	bool bUGCServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool bServerMoveCheckPassBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	Box PassBound;//[Offset: 0x6e4, Size: 28]
	bool bAbandonReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	float MaxPrisonmentMove;//[Offset: 0x704, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x709, Size: 1]
	bool bPlatformIgnoreNullBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70a, Size: 1]
	float MaxFollowPlatformDistance;//[Offset: 0x70c, Size: 4]
	bool bFixedMoveByCurveVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	bool bDisableResetWhenSimulateNoReceive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x711, Size: 1]
	float fStopParachuteForbbitClientAdjustSeconds;//[Offset: 0x714, Size: 4]
	bool bAdjustZErrorForLandscapeFirstLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	bool bForbiddenDragOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	bool bUnderGroundForbiddenDragOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x741, Size: 1]
	bool bDragOnHistoryWalkingPosAndRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x742, Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x743, Size: 1]
	bool bNotUseClientMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x744, Size: 1]
	bool bNotUseClientCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x745, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x748, Size: 4]
	float EnterShovelCD;//[Offset: 0x74c, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x750, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x754, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x758, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x75c, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x760, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x764, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x768, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x76c, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x770, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x774, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x778, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x77c, Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x780, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x784, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x78c, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x790, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x794, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x798, Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x79c, Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x7a0, Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x7a4, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x7a8, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x7ac, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x7b0, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x7b4, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x7b8, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x7bc, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x7c0, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x7c4, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x7c8, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x7e0, Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x7e4, Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x7e8, Size: 4]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ec, Size: 1]
	bool bIgnoreClientMovementModeSkillChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ec, Size: 1]
	float nowShovelingSpeed;//[Offset: 0x7f0, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x7f4, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x801, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x803, Size: 1]
	float PreShovelFov;//[Offset: 0x804, Size: 4]
	delegate OnClientAdjustPosition;//[Offset: 0x81c, Size: 12]
	delegate OnPhysicsFlyForwordAdjust;//[Offset: 0x828, Size: 12]
	delegate OnCharacterServerMoveDelegate;//[Offset: 0x834, Size: 12]
	delegate OnShovelStateChangeForBP;//[Offset: 0x840, Size: 12]
	delegate PostServerMoveDelegate;//[Offset: 0x84c, Size: 12]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x860, Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x868, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86d, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86e, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x870, Size: 4]
	bool bIgnoreChangingMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 1]
	bool bIgnoreMovementBaseMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x875, Size: 1]
	bool bEnableAdjustFloorHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x876, Size: 1]
	bool bEnableJumpOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x877, Size: 1]
	float JumpOffVelocityFactor;//[Offset: 0x878, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d, Size: 1]
	bool bUseCacheResolveWhenPenetrationVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87e, Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x880, Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x884, Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x884, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x888, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x88c, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x890, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x894, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x898, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x89c, Size: 4]
	HitResult WalkHit;//[Offset: 0x8a0, Size: 144]
	float WalkSpeedCurveScale;//[Offset: 0x930, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x934, Size: 4]
	float ProneFloorAngle;//[Offset: 0x938, Size: 4]
	float ProneFloorZ;//[Offset: 0x93c, Size: 4]
	float JumpFloorAngle;//[Offset: 0x940, Size: 4]
	float JumpFloorZ;//[Offset: 0x944, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x948, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x94c, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x954, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x958, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x974, Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x975, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x976, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x978, Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 1]
	float AdjustRotationWhenProneFailedThrehold;//[Offset: 0x980, Size: 4]
	bool bUGCDragOnGroundEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08, Size: 1]
	float CurrentEnterShovelCD;//[Offset: 0xa68, Size: 4]
	bool bRejectUnResolveRelativeAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 1]
	float ClientAndDSDiffLocSizeMax;//[Offset: 0xa70, Size: 4]
	float UnResolveRelativeLocSize;//[Offset: 0xa74, Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 1]
	float CheckDistanceAhead;//[Offset: 0xa7c, Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa80, Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0xa84, Size: 4]
	float BaseSolvedWallCheckDistance;//[Offset: 0xa98, Size: 4]
	float BaseSolvedWallTraceDistance;//[Offset: 0xa9c, Size: 4]
	float BaseSolvedWallOutDistance;//[Offset: 0xaa0, Size: 4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0xaa4, Size: 4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 1]
	float fStepDownEdgeToleranceRate;//[Offset: 0xaac, Size: 4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0xab0, Size: 4]
	float MaxBaseStepUpHeight;//[Offset: 0xab4, Size: 4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0xabc, Size: 12]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacc, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0xad4, Size: 12]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0xae0, Size: 4]
	float AIMovementSimulatePredictTime;//[Offset: 0xaf8, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0xb00, Size: 4]
	float SimulateNotReceiveMoveResetSeconds;//[Offset: 0xb14, Size: 4]
	bool bResetSimulateWhenObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 1]
	float ResetSimulateXYDist;//[Offset: 0xb1c, Size: 4]
	float ResetSimulateZDist;//[Offset: 0xb20, Size: 4]
	float SimulateNotReceiveStopPredictionSeconds;//[Offset: 0xb24, Size: 4]
	float MaxFlyAcceleration;//[Offset: 0xb38, Size: 4]
	bool bOverrideAirControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49, Size: 1]
	bool bOverrideGravityScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4a, Size: 1]
	uint32 LastAckBadMoveSequence;//[Offset: 0xb60, Size: 4]
	bool bAdjustAllowablePositionWithSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb64, Size: 1]
	float ResetAllowablePositionMaxSpeedTime;//[Offset: 0xb68, Size: 4]
	float DefaultMaxWalkSpeed;//[Offset: 0xb78, Size: 4]
	SimulateRepData[] CacheSimulateRepMoves;//[Offset: 0xb7c, Size: 12]
	float SimulateInterpolateSmoothAccelerateNum;//[Offset: 0xb90, Size: 4]
	int nMaxSimulateCacheNum;//[Offset: 0xbcc, Size: 4]
	float fServerMoveNetLagScaleSecMin;//[Offset: 0xbd4, Size: 4]
	float fServerMoveNetLagScaleSecMax;//[Offset: 0xbd8, Size: 4]
	float fServerMoveAllowDiscrepancySquare;//[Offset: 0xbdc, Size: 4]
	float fSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xbe0, Size: 4]
	float fNoSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xbe4, Size: 4]
	float fLessThanSkipProxyPredictionOnNetUpdateCosTheta;//[Offset: 0xbe8, Size: 4]
	float fSimulatePredictionNoAttenuationSec;//[Offset: 0xbec, Size: 4]
	float fSimulatePredictionAttenuationSecMax;//[Offset: 0xbf0, Size: 4]
	float fSimulatePredictionAttenuationRate;//[Offset: 0xbf4, Size: 4]
	float fSimulatePredictionAttenuationRateNearlyNoChg;//[Offset: 0xbf8, Size: 4]
	SimulateDragThesholds[] SimulateDragThesholds;//[Offset: 0xc00, Size: 12]
	ServerMoveData[] CacheServerMoves;//[Offset: 0xc10, Size: 12]
	ServerMoveData[] BatchServerMoves;//[Offset: 0xc1c, Size: 12]
	ServerMoveData LastServerMove;//[Offset: 0xc30, Size: 72]
	ServerMoveData ProcessServerMove;//[Offset: 0xc78, Size: 72]
	float ServerBatchMoveDeltaTimeRateMax;//[Offset: 0xcc0, Size: 4]
	float ServerBatchMoveDeltaMax;//[Offset: 0xcc4, Size: 4]
	ServerReceiveMove LastServerReceiveMove;//[Offset: 0xce0, Size: 28]
	float ServerMoveNetErrorInternal;//[Offset: 0xcfc, Size: 4]
	float DSMoveSpeedLimitOverMaxSpeedTimes;//[Offset: 0xd04, Size: 4]
	float DSMoveSpeedLimitDeltaSecondsMax;//[Offset: 0xd08, Size: 4]
	float DSMoveSpeedLimitIsWeakNetPingMSec;//[Offset: 0xd0c, Size: 4]
	float DSMoveSpeedLimitLowFPSRate;//[Offset: 0xd10, Size: 4]
	bool bAllowDSSpeedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	bool bShouldChekckSpeedOverLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd68, Size: 1]
	ResolvePenetrationMoveData ResolvePenetrationData;//[Offset: 0xd70, Size: 136]
	ResolvePenetrationMoveData ResolvePenetrationWalkingData;//[Offset: 0xdf8, Size: 136]
	delegate OnResolvePenetrationDelegate;//[Offset: 0xe80, Size: 12]
	float CacheLastValidMoveDistanceSq;//[Offset: 0xe8c, Size: 4]
	float CacheLastValidMaxDistance;//[Offset: 0xe90, Size: 4]
	float CacheLastValidMaxDistanceWalking;//[Offset: 0xe94, Size: 4]
	ResolvePenetrationParams ResolvePenetrationParams;//[Offset: 0xe98, Size: 80]
	float EngineResolvePenetrationMaxDistanceSq;//[Offset: 0xee8, Size: 4]
	float ResolvePenetrationVehicleMaxDistance;//[Offset: 0xeec, Size: 4]
	float PushAwayForbidSetBaseSeconds;//[Offset: 0xef0, Size: 4]
	int PenetrationUnResolveCount;//[Offset: 0xef4, Size: 4]
	float PenetrationUnResolveDistanceSq;//[Offset: 0xef8, Size: 4]
	bool bResolvePenetrationAdjustClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefc, Size: 1]
	float CheckResolvePenetrationSeconds;//[Offset: 0xf00, Size: 4]
	float ResolvePenetrationSwitchPoseCD;//[Offset: 0xf0c, Size: 4]
	float CheckResolvePenetrationDepth;//[Offset: 0xf18, Size: 4]
	float CheckResolvePenetrationDistance;//[Offset: 0xf1c, Size: 4]
	DirectMoveData DirectMoveData;//[Offset: 0xf34, Size: 56]
	CustomSkillMoveData AirJumpData;//[Offset: 0xf6c, Size: 48]
	PrimitiveComponent* CurrentClientMovementBase;//[Offset: 0xfb0, Size: 4]
	float ComputeFloorConsiderClientPosDiffSizeSqMax;//[Offset: 0xfc0, Size: 4]
	float SkilAirJumpJoystickForceSize;//[Offset: 0xfe0, Size: 4]
	SimulateDragData SimulateDragData;//[Offset: 0xfe4, Size: 40]
	float CanntMoveAdjustFlySpeedSize;//[Offset: 0x1020, Size: 4]
	bool bTrustClientLandingOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1034, Size: 1]
	bool bPassWallCheckOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1035, Size: 1]
	bool bAllowBeBlewUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1036, Size: 1]
	float BlewSpeedRatio;//[Offset: 0x1038, Size: 4]
	float IgnoreAllBlowTime;//[Offset: 0x103c, Size: 4]
	float IgnoreLastBlowTime;//[Offset: 0x1040, Size: 4]
	float BlendingAdjustTime;//[Offset: 0x1044, Size: 4]
	bool bAllowBePushedAway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1048, Size: 1]
	float NearPushBaseDistance;//[Offset: 0x104c, Size: 4]
	float TangentialSpeedRatio;//[Offset: 0x1050, Size: 4]
	float NormalSpeedRatio;//[Offset: 0x1054, Size: 4]
	bool bBlockedByStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1058, Size: 1]
	bool bIgnoreSelfBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1059, Size: 1]
	float MinMoveDeltaTime;//[Offset: 0x1088, Size: 4]
	float MaxServerMoveDistFrame;//[Offset: 0x108c, Size: 4]
	float MaxServerMoveSpanTimeFrame;//[Offset: 0x1090, Size: 4]
	float MaxServerBurstMoveFrameTime;//[Offset: 0x1094, Size: 4]
	float MaxServerBurstMoveInterval;//[Offset: 0x1098, Size: 4]
	float MaxServerBurstMoveStaticsInterval;//[Offset: 0x109c, Size: 4]
	float BurstQueryAroundCharacterRange;//[Offset: 0x10a0, Size: 4]
	bool bUseNewActorMarkTeleportTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dc, Size: 1]
	float SkipMarkTeleportTimeVehicleSpeed;//[Offset: 0x10e0, Size: 4]
	<enum,FString> SpecialMovePaths;//[Offset: 0x10e4, Size: 60]
	<byte,enum> CustomMoveModeToSpecialMoveType;//[Offset: 0x1120, Size: 60]
	<enum,SpecialMoveBaseObj*> SpecialObjes;//[Offset: 0x115c, Size: 60]
	bool UpdatedComponentWithBase(float DeltaSeconds, Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x3828560
	void ToggleUserCmdDelta(bool Val);// 0x38284a8
	void TimeSpeedCheck(bool Val);// 0x38283f0
	void SeverReportSimulateDrag(int OldDragCount, int DragCount, int ShakeCount);// 0x38282ac
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x3828200
	void SetPushBase(PrimitiveComponent* NewBase, const FName BoneName, bool bPushedByBase, bool bNotifyActor);// 0x3828098
	void SetProneFloorZ(float InProneFloorZ);// 0x3828020
	void SetProneFloorAngle(float InProneFloorAngle);// 0x3827fa8
	void SetPassBoundBox(out Vector BoxMin, out Vector BoxMax);// 0x3827ed0
	void SetOpenServerControlPunish(const bool bIsOpen, float RemainingSeconds);// 0x3827e08
	void SetLastTickFrameCounter(uint64 Frame);// 0x3827d8c
	void SetJumpFloorZ(float InJumpFloorZ);// 0x3827d14
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x3827c9c
	void SetImmedSendMoveFrameCounter(uint64 Frame);// 0x3827c20
	void SetClientReceiveServerStateTimestamp(float TimeStamp);// 0x3827ba8
	void SetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x3827a90
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x3827964
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x38276c8
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd);// 0x38274b8
	void ServerStartBlowUpCharacter(float TimeStamp, int BlowID, Vector_NetQuantize10 LaunchVel, Actor* HitActor, PrimitiveComponent* HitComponent);// 0x38272c0
	void SendClientPenetrationToServer();// 0x3827264
	void ResetSimulateMoveCaches(bool bDestroy);// 0x38271e4
	void ReleaseServerMoveCache();// 0x38271d0
	void RefreshCharacterWithBase();// 0x38271bc
	void ProcessCacheSimulateRepMove(float DeltaSeconds, bool bReset);// 0x38270f8
	void Ping2Server(float ServerTime, float ClientTime);// 0x382700c
	void Ping2Client(float ServerTime);// 0x3826f94
	bool PhysMoveByCurve(out const Vector DeltaMove, float DeltaSeconds);// 0x3826ec0
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x3826df8
	bool PhysDeltaMove(out const Vector DeltaMove, float DeltaSeconds);// 0x3826d24
	void OnRespawned();// 0x3826d08
	void OnRecycled();// 0x3826cec
	void OnRecoverOnServer();// 0x3826cd0
	void OnPreReconnectOnServer();// 0x3826cbc
	void OnClientCloseUserCmdDelta();// 0x3826ca8
	void MaybeGotoFalling();// 0x3826c94
	void LocalResolvePenatration();// 0x3826c80
	void K2_SaveBaseLocation();// 0x3826c6c
	float K2_GetProneFloorZ();// 0x3826c44
	float K2_GetProneFloorAngle();// 0x3826c1c
	FString K2_GetMovementName();// 0x3826b54
	float K2_GetJumpFloorZ();// 0x3826b2c
	float K2_GetJumpFloorAngle();// 0x3826b04
	bool IsWalkable(out const HitResult Hit);// 0x3826a1c
	bool IsTargetBase(PrimitiveComponent* Base);// 0x382699c
	bool IsStandingOnBase();// 0x3826974
	bool IsSpecialMoveCanCombine();// 0x382694c
	bool IsSimulateWeakNetworkOptimize();// 0x3826924
	bool IsProning();// 0x38268fc
	bool IsOpenServerControlPunish();// 0x38268e0
	bool IsNearPushBase();// 0x38268b8
	bool IsInImmedSendMoveFrame();// 0x3826890
	bool IsBeingPushed();// 0x3826868
	bool IsBeingBlew();// 0x3826840
	bool IsAutonomousWeakNetworkOptimize();// 0x3826818
	bool IsActorShouldMarkTeleportTime(Actor* PtrActor);// 0x3826798
	uint32 GetUserCmdSequence();// 0x3826770
	STExtraBaseCharacter* GetSTCharacter();// 0x3826748
	enum GetSpecialMoveTypebyCustomMovemode(byte CustomMovmentMode);// 0x38266c8
	SpecialMoveBaseObj* GetSpecialMoveObjBySpecialMoveType(enum specialMoveType);// 0x3826648
	SpecialMoveBaseObj* GetSpecialMoveObjByCustomMovementMode(byte CustomMovmentMode);// 0x38265c8
	Vector GetSpecialMoveInputByCustomMoveMode(byte InCustomMovementMode, Vector OriginalInput, bool bUseCache);// 0x38264a0
	Rotator GetSpecialMoveControlRotationByCustomMoveMode(byte InCustomMovementMode, Rotator OriginalInput);// 0x38263c8
	PrimitiveComponent* GetRealStandingBase();// 0x38263a0
	Vector GetPendingImpulse();// 0x382637c
	float GetMaxBrakingDeceleration();// 0x382634c
	Vector GetLocationOffsetToBase();// 0x3826304
	uint64 GetLastTickFrameCounter();// 0x38262dc
	float GetLastServerMoveTime();// 0x38262b4
	uint32 GetLastAckBadMoveSequence();// 0x382628c
	float GetJogFactor();// 0x3530d08
	bool GetIsOpenShovelingAbility();// 0x3826264
	Vector GetImpartedMovementBaseVelocity();// 0x3826214
	uint64 GetImmedSendMoveFrameCounter();// 0x38261ec
	bool GetHistoryValidLocationAndRotation(out Vector OutLoc, out Rotator OutRot, enum MoveIndex);// 0x38260c4
	float GetHasPredictionSeconds(Vector PredictionDeltaLoc, Vector PredictionVelocity);// 0x3825ffc
	Vector GetComputeFloorDistStartLocation();// 0x3825fb4
	float GetClientCurrentSeconds();// 0x3825f8c
	Vector GetBaseLocation();// 0x3825f44
	AirBorneMoveObj* GetAirBornMoveObj();// 0x3825f1c
	Vector GetAcceleration();// 0x3825ed4
	bool FindResolvePenetrationHistoryMove(out Vector FindLoc, out Rotator FindRot, enum HistoryIndex);// 0x3825dac
	void ExitMultipleMove(float CompensateTime);// 0x3825d2c
	void EnterDirectMove(out const DirectMoveData InDirectMoveData);// 0x3825c44
	void EnterAirJump(out const CustomSkillMoveData InMoveData);// 0x3825b74
	bool DragOnGround(float DeltaTime);// 0x3825af4
	bool DoJump(bool bReplayingMoves);// 0x3825a64
	void DisableSimulateCorrection(bool bDisable);// 0x38259e4
	void DelayCheckResolvePenatration(float DelayTime);// 0x382596c
	void DebugMovementDetail(FString Caller, out const Vector OldLocation, out const Rotator OldRotation, float DeltaSeconds, bool bForceLog);// 0x3825770
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x38254c8
	void ClientUserMoveCmdAck(int Sequence);// 0x3825450
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3825148
	void CheckResolvePenatration(float DeltaTime);// 0x38250d0
	void ChangePhysxShapeFlag();// 0x34f4004
	Vector CalcBlowUpVelocity(Vector HitNormal, Vector HitCompVelocity);// 0x3824ff4
	float CalcAllowablePositionErrorScaleWithSpeed();// 0x3824fcc
	void CacheSimulateRepMove(out const RepMovement RepMove, float ServerTimeStamp);// 0x3824ef8
	void BPSetDefaultMovementMode();// 0x3824ee4
	void ApplyImpulse(Vector ImpulseVelocity);// 0x3824e6c
	void AllowDSSpeedCheck(bool bAllow);// 0x3824dec
	bool AllowClientLocationWithDSPrediction(out const Vector InClientLoc, float NetLagDiffScale);// 0x3824d18

--------------------------------
Class: CharacterDistanceSquareTickInternal
	float DistanceSquare;//[Offset: 0x0, Size: 4]
	float TickInternal;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimulateRepData
	RepMovement RepMovement;//[Offset: 0x18, Size: 72]

--------------------------------
Class: SimulateDragThesholds
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float DragDistanceSq;//[Offset: 0x4, Size: 4]
	float ShakeVelocityDiffSize;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ServerMoveData
	PrimitiveComponent* ClientMovementBase;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ServerReceiveMove

--------------------------------
Class: ResolvePenetrationMoveData
	PrimitiveComponent* PushAwayBase;//[Offset: 0xc, Size: 4]
	ResolvePenetrationHistoryMoveData HistoryMoveData;//[Offset: 0x10, Size: 28]

--------------------------------
Class: ResolvePenetrationHistoryMoveData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector ValidLocation;//[Offset: 0x4, Size: 12]
	Rotator ValidRotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: DirectMoveData.CustomSkillMoveData
	bool bOverrideZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bHandleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	float InertiaRatio;//[Offset: 0x34, Size: 4]

--------------------------------
Class: CustomSkillMoveData
	bool bManualExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Distance;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimulateDragData
	float ReportSimulateDragConfigSeconds;//[Offset: 0x0, Size: 4]
	float ReportSimulateDragSeconds;//[Offset: 0x4, Size: 4]
	float ReportSimulateDragTimer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialMoveBaseObj.LuaObject.Object
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x70, Size: 4]

--------------------------------
Class: AirBorneMoveObj.SpecialMoveBaseObj.LuaObject.Object
	float FlyForwordMaxSpeed;//[Offset: 0x78, Size: 4]
	float FlyRightMaxSpeed;//[Offset: 0x7c, Size: 4]
	float FlyBackMaxSpeed;//[Offset: 0x80, Size: 4]
	float ForwardAccel;//[Offset: 0x84, Size: 4]
	float RightAccel;//[Offset: 0x88, Size: 4]
	float MaxBrakingDeceleration;//[Offset: 0x8c, Size: 4]
	float FlyUpStartSpeed;//[Offset: 0x90, Size: 4]
	float FlyUpStartDecel;//[Offset: 0x94, Size: 4]
	float FlyUpStartTime;//[Offset: 0x98, Size: 4]
	float FlyMaxUpHeight;//[Offset: 0x9c, Size: 4]
	float FlyUpUniformSpeed;//[Offset: 0xa0, Size: 4]
	float FlyDownUniformSpeed;//[Offset: 0xa4, Size: 4]
	float FlyQucikExitSpeed;//[Offset: 0xa8, Size: 4]
	float LandHeight;//[Offset: 0xac, Size: 4]
	float WindFieldDecel;//[Offset: 0xb0, Size: 4]
	float WindFieldDecelDuration;//[Offset: 0xb4, Size: 4]
	float SuperFlyMaxSpeed;//[Offset: 0xb8, Size: 4]
	float SuperFlyMaxAccel;//[Offset: 0xbc, Size: 4]
	float SuperFlyMaxBrakingDeceleration;//[Offset: 0xc0, Size: 4]
	float SuperFlyUpMaxAngle;//[Offset: 0xc4, Size: 4]
	float FlyMaxHight;//[Offset: 0xc8, Size: 4]
	float SuperFlyMaxHight;//[Offset: 0xcc, Size: 4]
	float FlyAbsoluteMaxHight;//[Offset: 0xd0, Size: 4]
	bool bEnableHorVerMut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	float ModGravityScale;//[Offset: 0xd8, Size: 4]
	bool UseModeGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	FString ModFlySpeedScaleAttrName;//[Offset: 0xe0, Size: 12]
	bool bQuickExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bBuff2VelocityXY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	bool bBuff2VelocityZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	delegate OnPreFlyStateChange;//[Offset: 0xf0, Size: 12]
	delegate OnFlyStateChange;//[Offset: 0xfc, Size: 12]
	delegate OnFlyLanded;//[Offset: 0x108, Size: 12]
	delegate OnFlyMoveingStateChange;//[Offset: 0x114, Size: 12]
	delegate OnMoveMentStateChange;//[Offset: 0x120, Size: 12]
	bool CurrentFlyMoveing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	void StopFly();// 0x34ceabc
	void SkillAddImpulse(Vector ImpulseVelocity);// 0x34cea4c
	void SetWindFieldVelocity(Vector InVelocity);// 0x34ce9dc
	void SetState(byte FlyState);// 0x34ce964
	void RealSetState(byte FlyState, bool ForceChange);// 0x34ce898
	void OnCharacterJumped();// 0x34ce884
	float GetRealTimePawnHeiht();// 0x34ce854
	enum GetFlyMoveState();// 0x34ce82c
	byte GetCustomMoveStateByFlyState(byte FlyState);// 0x34ce7ac
	byte GetCurrentFlyState();// 0x34ce784
	void EnterFly();// 0x34ce768
	void DoubleTerminalFlySetState(byte FlyState, bool ForceChange);// 0x34ce69c
	bool BeforeApplyNetworkMovementModeDell(const byte ReceivedMode);// 0x34ce614

--------------------------------
Class: SimLocalViewData
	float ViewPitch;//[Offset: 0x0, Size: 4]
	float ViewYaw;//[Offset: 0x4, Size: 4]
	float ViewRoll;//[Offset: 0x8, Size: 4]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	byte ViewRoll;//[Offset: 0x4, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: InteractiveMoveActor.LuaActor.Actor.Object
	class InteractiveActorMoveComponent* MoveComponent;//[Offset: 0x398, Size: 4]
	byte InteractiveMoveType;//[Offset: 0x39c, Size: 1]
	bool InFPPViewPitchLimitMaxEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	float InFPPViewPitchLimitMin;//[Offset: 0x3a0, Size: 4]
	float InFPPViewPitchLimitMax;//[Offset: 0x3a4, Size: 4]
	float InFPPViewYawLimit;//[Offset: 0x3a8, Size: 4]

--------------------------------
Class: InteractiveActorMoveComponent.MovementComponent.ActorComponent.Object
	InteractiveMoveActor* TargetActor;//[Offset: 0xf4, Size: 4]
	void OnRep_TargetActorNotify(InteractiveMoveActor* IMActor);// 0x368b048
	bool IsTakeOverJump();// 0x368b018
	bool IsInInteractiveState();// 0x368afe8
	void HandleJumpInput();// 0x368afcc
	void HandleEnterInput();// 0x350c1b8

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x100, Size: 12]
	float OnVehicleWaterSufaceOffset;//[Offset: 0x10c, Size: 4]
	float MaxBreathAmount;//[Offset: 0x110, Size: 4]
	float DrowningHurtHight;//[Offset: 0x114, Size: 4]
	float SwimWaterNearHeight;//[Offset: 0x118, Size: 4]
	float SwimWaterBodyOffset;//[Offset: 0x11c, Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0x120, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x124, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x128, Size: 4]
	float BreathDeltaTime;//[Offset: 0x12c, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x130, Size: 4]
	float MinSpeedScale;//[Offset: 0x134, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x138, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x13c, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x140, Size: 4]
	float RollMaxAngle;//[Offset: 0x144, Size: 4]
	float DistoVolume;//[Offset: 0x148, Size: 4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	float DefaultWaterHeight;//[Offset: 0x150, Size: 4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x16c, Size: 4]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	float CheckCharacterInWaterInternal;//[Offset: 0x174, Size: 4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x178, Size: 4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x180, Size: 4]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x184, Size: 4]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x188, Size: 4]
	float DyingSwimSpeedRate;//[Offset: 0x18c, Size: 4]
	bool bDyingSwimChangeCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bAutoSyncSwimSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bAutoStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	void UpdateSwimCollisionHeightCpp();// 0x3744aa0
	void SyncSwimSpeedFromCharacter();// 0x3744a8c
	void PlayerHealthStatusChange();// 0x3744a78
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x3744a00
	void OnPawnExitParachute();// 0x37449ec
	void LeaveWater();// 0x37449d8
	bool IsEnterWaterSuface();// 0x37449b0
	Actor* GetWaterObject();// 0x3744988
	void EnterWater_BluePrint();// 0x49216cc
	void EnterWater(Actor* WaterObject);// 0x3744910
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x49216cc

--------------------------------
Class: WeaponRecordDataForReplay
	int WeaponId;//[Offset: 0x0, Size: 4]
	byte HeadShoot;//[Offset: 0x4, Size: 1]
	byte LimbsShoot;//[Offset: 0x5, Size: 1]
	byte BodyShoot;//[Offset: 0x6, Size: 1]
	byte HandShoot;//[Offset: 0x7, Size: 1]
	byte FootShoot;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xf4, Size: 4]
	float PickUpZLimit;//[Offset: 0xf8, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x100, Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x10c, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0x110, Size: 4]
	float FindPutDownPointZHalfHeightAdjust;//[Offset: 0x114, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x118, Size: 4]
	Vector2D RegionXRange;//[Offset: 0x11c, Size: 8]
	Vector2D RegionYRange;//[Offset: 0x124, Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x130, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x13c, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x140, Size: 4]
	float DrawTime;//[Offset: 0x144, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x14c, Size: 4]
	<SearchedPickUpItemResult,float> RecentAutoPickupMap;//[Offset: 0x150, Size: 60]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x18c, Size: 12]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x198, Size: 12]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x3720284
	void ServerPutDownTarget(Actor* Target);// 0x37201d0
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x372003c
	void ServerPickUpAttachmentTarget(Actor* Target, const PickUpItemData ItemData, enum PickupAttachmentAdditionalDataType, ItemDefineID TargetDefineID);// 0x371fdc4
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x371fd04
	void PutDownTarget(Actor* Target);// 0x371fc8c
	void PickUpTargetAttachment(Actor* Target, out const PickUpItemData ItemData, enum PickupAttachmentAdditionalDataType, ItemDefineID TargetDefineID);// 0x371fa58
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x371f910
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x371f898
	void NotifyMeetPickupAvailableActor(Actor* Target, bool bUpdatePickupManager);// 0x371f7d4
	void MarkRecentAutoPickUp(SearchedPickUpItemResult PickUpResult);// 0x371f570
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x371f4e0
	Vector[] GetNearItemLocationList(out const Vector TargetLoc, float Radius, float IgnoreDist, uint32[] ItemIDs);// 0x371f210
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x371f104
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x371f000
	void ControlClientPutDownTarget(Actor* Target);// 0x371ef4c
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x371ee50
	void ControlClientPickUpAttachmentTarget(Actor* Target, int AdditionalParam, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x371ec9c
	void ClampWorldLocation(out Vector OutVector);// 0x371ec18
	bool CheckRecentAutoPickUp(SearchedPickUpItemResult PickUpResult, float OverTime);// 0x371e968

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 48]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x4b8, Size: 4]
	float AttachCheckDistance;//[Offset: 0x4bc, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x4c0, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x4c4, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4c8, Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4e4, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4f0, Size: 12]
	int LastCreateFailedWeaponID;//[Offset: 0x504, Size: 4]
	ItemDefineID LastClientDestroyWeaponID;//[Offset: 0x508, Size: 24]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x35c14b8
	void UpdateDataWhenBagChangedOnAutonomous();// 0x35c14a4
	void RPC_Server_MarkWeaponDestroy(const ItemDefineID ID);// 0x35c13f0
	void RPC_Client_ResyncWeaponSpawnData(const SpawnAndBackpackWeaponReplicatedData[] SpawnWeaponData);// 0x35c1294
	void OnRecoverOnServer();// 0x35c1278
	void OnReconnectOnServer();// 0x350db18
	void OnReconnectOnClient();// 0x350dafc
	void OnPawnEquipmentsChanged(enum SlotType, bool IsEquipped, int ItemId);// 0x35c116c
	void OnDisconnectToClientOnServer();// 0x35c1158
	int GetShowBagLevel();// 0x35891cc
	int GetBagLevel();// 0x359773c

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4, Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0xc, Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x10, Size: 4]
	AnimationAsset* IdleMotorBikeDirverLeaningAnim;//[Offset: 0x14, Size: 4]
	AnimationAsset* IdleMotorBikeDirverLeaningLowSpeedAnim;//[Offset: 0x18, Size: 4]
	AnimationAsset* MotorBikeDirverLeaningGroundPitchAnim;//[Offset: 0x1c, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOffAnim;//[Offset: 0x20, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOffAnim;//[Offset: 0x24, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOffAnim;//[Offset: 0x28, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOffAnim;//[Offset: 0x2c, Size: 4]
	AnimationAsset* PassengerDriverOffAimAim;//[Offset: 0x30, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleLeaningAnim;//[Offset: 0x34, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOnAnim;//[Offset: 0x38, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOnAnim;//[Offset: 0x3c, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOnAnim;//[Offset: 0x40, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOnAnim;//[Offset: 0x44, Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x48, Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x4c, Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x50, Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x54, Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x58, Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x5c, Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x60, Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x64, Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x68, Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x6c, Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x70, Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x74, Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x78, Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x7c, Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x80, Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x84, Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x88, Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x8c, Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x90, Size: 4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x94, Size: 4]
	AnimationAsset* VehicleWeaponEquipAnim;//[Offset: 0x98, Size: 4]
	AnimationAsset* VehicleWeaponUnEquipAnim;//[Offset: 0x9c, Size: 4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0xa0, Size: 4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0xa4, Size: 4]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0xa8, Size: 4]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0xac, Size: 4]
	AnimationAsset* VehicleDriverForwardAnim;//[Offset: 0xb0, Size: 4]
	AnimationAsset* DyingInVehicleIdleAnim;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	float VacateHight;//[Offset: 0x8, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 12]
	enum SeatWeaponHoldType;//[Offset: 0x28, Size: 1]
	enum SeatSpecialType;//[Offset: 0x29, Size: 1]
	enum VehicleType;//[Offset: 0x2a, Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	float DamageReduceScaleExtra;//[Offset: 0xc, Size: 4]
	float DamageReduceScaleIgnoreDurability;//[Offset: 0x10, Size: 4]
	float BrokenArmorDamageReduceScale;//[Offset: 0x14, Size: 4]
	float DurabilityReduceScale;//[Offset: 0x18, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x1c, Size: 12]
	float MomentumResistance;//[Offset: 0x28, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BackpackReplayData
	float OccupiedCapacity;//[Offset: 0x0, Size: 4]
	float BackpackCapacity;//[Offset: 0x4, Size: 4]
	BackpackReplayItem[] ReplayItems;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BackpackReplayItem
	int ItemId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]
	uint64 ItemState;//[Offset: 0x10, Size: 8]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 12]
	float EnergyMax;//[Offset: 0xc, Size: 4]
	float EnergyCurrent;//[Offset: 0x10, Size: 4]
	float EnergyPredict;//[Offset: 0x14, Size: 4]
	float AttenuationPeriod;//[Offset: 0x18, Size: 4]
	float AttenuationAmount;//[Offset: 0x1c, Size: 4]
	float PassedDeltaTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FString BuffName;//[Offset: 0x4, Size: 12]
	int BuffID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140, Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 12]
	byte ShowType;//[Offset: 0xc, Size: 1]
	float Value;//[Offset: 0x10, Size: 4]
	float LimitValue;//[Offset: 0x14, Size: 4]
	FString MaxAttrName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	GameBaseInfo GameBaseInfo;//[Offset: 0x130, Size: 120]
	UAEGameMode* UAEGM;//[Offset: 0x1a8, Size: 4]
	void ServerSendGameStartFlow(out const ClientGameStartFlow ClientGameStartFlow);// 0x37a009c
	void ServerSendGameEndFlow(out const ClientGameEndFlow ClientGameEndFlow);// 0x379ffec
	void ReportVoiceTeamQuit(const VoiceTeamQuit teamQuit);// 0x379febc
	void ReportVoiceTeamCreate(const VoiceTeamCreate teamCreate);// 0x379fd8c
	void ReportVerifyInfoFlow();// 0x379fd30
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x379fc60
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x379fb70
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x379fa80
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x379f9b0
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x379f8e0
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x379f7dc
	void ReportGameSetting(const GameSetting GameSetting);// 0x379f6ec
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x379f61c
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x379f514
	void ReportDSCircleFlow(out const DSCircleFlow CircleFlow);// 0x379f474
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x379f3a4
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x379f2d4
	void ReportAimFlow(const AimFlow AimFlow);// 0x379f204
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x379f174
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponId, out int BulletID, out int BulletNum);// 0x379efb0
	void CheckSendGameStartFlow();// 0x379ef9c
	void CheckSendGameEndFlow();// 0x379ef88
	FString BuildRecoveryItemCountString(out const RecoveryItemCount[] RecoveryItemCounts);// 0x379ee34

--------------------------------
Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherId;//[Offset: 0x20, Size: 1]
	FString ItemList;//[Offset: 0x24, Size: 12]
	int8 TeamType;//[Offset: 0x30, Size: 1]
	int TeamID;//[Offset: 0x34, Size: 4]
	FString TeamPlayer1;//[Offset: 0x38, Size: 12]
	FString TeamPlayer2;//[Offset: 0x44, Size: 12]
	FString TeamPlayer3;//[Offset: 0x50, Size: 12]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x5c, Size: 4]
	FString AntsVoiceTeamID;//[Offset: 0x60, Size: 12]
	FString AntsVoiceRoomID;//[Offset: 0x6c, Size: 12]
	int AntsVoiceTeamMemberID;//[Offset: 0x78, Size: 4]
	int AntsVoiceRoomMemberID;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString ClientVersion;//[Offset: 0x14, Size: 12]
	uint32 OverTime;//[Offset: 0x20, Size: 4]
	int8 EndType;//[Offset: 0x24, Size: 1]
	byte KillCount;//[Offset: 0x25, Size: 1]
	byte AssistsCount;//[Offset: 0x26, Size: 1]
	byte DropCount;//[Offset: 0x27, Size: 1]
	byte SaveCount;//[Offset: 0x28, Size: 1]
	byte RebornCount;//[Offset: 0x29, Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]
	int GoldGet;//[Offset: 0x2c, Size: 4]
	int DiamondGet;//[Offset: 0x30, Size: 4]
	int ExpGet;//[Offset: 0x34, Size: 4]
	byte WinRank;//[Offset: 0x38, Size: 1]
	byte TotalPlayers;//[Offset: 0x39, Size: 1]
	int PlayerRank;//[Offset: 0x3c, Size: 4]
	int RankEnd;//[Offset: 0x40, Size: 4]
	int TeamID;//[Offset: 0x44, Size: 4]
	FString TeamPlayer1;//[Offset: 0x48, Size: 12]
	FString TeamPlayer2;//[Offset: 0x54, Size: 12]
	FString TeamPlayer3;//[Offset: 0x60, Size: 12]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x6d, Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x6e, Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x6f, Size: 1]
	uint32 GameEndFlowID;//[Offset: 0x70, Size: 4]
	byte RoundCircleCount;//[Offset: 0x74, Size: 1]
	int[] UseQuickMsgIDArray;//[Offset: 0x78, Size: 12]
	int[] UseQuickMsgCountArray;//[Offset: 0x84, Size: 12]
	int[] UseWheelMsgIDArray;//[Offset: 0x90, Size: 12]
	int[] UseWheelMsgCountArray;//[Offset: 0x9c, Size: 12]
	int[] InexistentAvatarStat;//[Offset: 0xa8, Size: 12]
	int[] InexistentAvatarInBornStat;//[Offset: 0xb4, Size: 12]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xc0, Size: 12]
	int[] InexistentVehicleAvatarStat;//[Offset: 0xcc, Size: 12]
	int InexistentPlaneAvatarStat;//[Offset: 0xd8, Size: 4]
	int InexistentEmoteAvatarStat;//[Offset: 0xdc, Size: 4]
	byte ShowMsgCnt;//[Offset: 0xe0, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xe1, Size: 1]
	byte UserCancelCnt;//[Offset: 0xe2, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xe3, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xe4, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xe8, Size: 4]
	float TeammateMicrophoneTime;//[Offset: 0xec, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xf0, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xf4, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xf8, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xfc, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x100, Size: 4]
	byte PlayerUseQuickSight;//[Offset: 0x104, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0x105, Size: 1]
	int PlayerMoveSpeedMax;//[Offset: 0x108, Size: 4]

--------------------------------
Class: VoiceTeamQuit
	FString AntsVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString AntsVoiceRoomID;//[Offset: 0xc, Size: 12]
	int AntsVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int AntsVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UID;//[Offset: 0x20, Size: 8]

--------------------------------
Class: VoiceTeamCreate
	FString AntsVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString AntsVoiceRoomID;//[Offset: 0xc, Size: 12]
	int AntsVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int AntsVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UID;//[Offset: 0x20, Size: 8]

--------------------------------
Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	FString TargetUserName;//[Offset: 0x58, Size: 12]
	FString TargetOpenID;//[Offset: 0x64, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x70, Size: 8]
	FString HitPart;//[Offset: 0x78, Size: 12]
	int GunID;//[Offset: 0x84, Size: 4]
	byte PlayerKill;//[Offset: 0x88, Size: 1]
	uint64 AttackFlowID;//[Offset: 0x90, Size: 8]
	int KillAICnt;//[Offset: 0x98, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x9c, Size: 4]
	int16 BulletDown;//[Offset: 0xa0, Size: 2]

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 44]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x34, Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x3c, Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x44, Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x4c, Size: 136]
	GameSetting_PickUp PickUp;//[Offset: 0xd4, Size: 56]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int LRShootMode;//[Offset: 0x14, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int LeftHandFire;//[Offset: 0x1c, Size: 4]
	int Gyroscope;//[Offset: 0x20, Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool ShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0, Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 4]
	int DrivingViewMode;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 40]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x38, Size: 40]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x60, Size: 40]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 4]
	float ParachuteEye;//[Offset: 0x4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float CamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float CamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float FireCamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float FireCamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 4]
	float GyroscopeShoulderSniper;//[Offset: 0x20, Size: 4]
	float GyroscopeShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4, Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c, Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 4]
	int Bandage;//[Offset: 0x4, Size: 4]
	int PainKiller;//[Offset: 0x8, Size: 4]
	int Adrenaline;//[Offset: 0xc, Size: 4]
	int EnergyDrink;//[Offset: 0x10, Size: 4]
	int FirstAidKit;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 4]
	int ShockBomb;//[Offset: 0x4, Size: 4]
	int SmokeBomb;//[Offset: 0x8, Size: 4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponId;//[Offset: 0x0, Size: 4]
	int BulletCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString TargetOpenID;//[Offset: 0x7c, Size: 12]
	FString TargetUserName;//[Offset: 0x88, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x98, Size: 8]
	int8 TargetRoleType;//[Offset: 0xa0, Size: 1]
	FString GunName;//[Offset: 0xa4, Size: 12]
	FString GunPartsType;//[Offset: 0xb0, Size: 12]
	int8 SightType;//[Offset: 0xbc, Size: 1]
	int BulletSpeed;//[Offset: 0xc0, Size: 4]
	int8 MagazineMax;//[Offset: 0xc4, Size: 1]
	int8 MagazineLeft;//[Offset: 0xc5, Size: 1]
	int ShotFrequency;//[Offset: 0xc8, Size: 4]
	int BulletDamage;//[Offset: 0xcc, Size: 4]
	int16 BulletDown;//[Offset: 0xd0, Size: 2]
	byte BulletDamageReduce;//[Offset: 0xd2, Size: 1]
	int Recoil;//[Offset: 0xd4, Size: 4]
	int ReloadTime;//[Offset: 0xd8, Size: 4]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	byte ShotPose;//[Offset: 0xe8, Size: 1]
	byte FireType;//[Offset: 0xe9, Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 1]
	byte Sideways;//[Offset: 0xeb, Size: 1]
	int ShootingDeviationX;//[Offset: 0xec, Size: 4]
	int ShootingDeviationY;//[Offset: 0xf0, Size: 4]
	uint32 ZeroDistance;//[Offset: 0xf4, Size: 4]
	uint32 ShotTime;//[Offset: 0xf8, Size: 4]
	int HitTime;//[Offset: 0xfc, Size: 4]
	int PlayerPositionX;//[Offset: 0x100, Size: 4]
	int PlayerPositionY;//[Offset: 0x104, Size: 4]
	int PlayerPositionZ;//[Offset: 0x108, Size: 4]
	int GunPositionX;//[Offset: 0x10c, Size: 4]
	int GunPositionY;//[Offset: 0x110, Size: 4]
	int GunPositionZ;//[Offset: 0x114, Size: 4]
	int BulletsBornPositionX;//[Offset: 0x118, Size: 4]
	int BulletsBornPositionY;//[Offset: 0x11c, Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x120, Size: 4]
	uint32 LastHitTime;//[Offset: 0x124, Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x128, Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x12c, Size: 4]
	int HitPositionX;//[Offset: 0x130, Size: 4]
	int HitPositionY;//[Offset: 0x134, Size: 4]
	int HitPositionZ;//[Offset: 0x138, Size: 4]
	byte HitPart;//[Offset: 0x13c, Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 1]
	byte BulletCost;//[Offset: 0x13e, Size: 1]
	int HPstart;//[Offset: 0x140, Size: 4]
	int HPEnd;//[Offset: 0x144, Size: 4]
	int ArmorHPStart;//[Offset: 0x148, Size: 4]
	int ArmorHPEnd;//[Offset: 0x14c, Size: 4]
	int CarHPStart;//[Offset: 0x150, Size: 4]
	int CarHPEnd;//[Offset: 0x154, Size: 4]
	byte PlayerKill;//[Offset: 0x158, Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 1]
	int RecoilMoveX;//[Offset: 0x15c, Size: 4]
	int RecoilMoveY;//[Offset: 0x160, Size: 4]
	int WeaponAimFOV;//[Offset: 0x164, Size: 4]
	int BulletDamageDebuff;//[Offset: 0x168, Size: 4]
	int BulletDamageBuff;//[Offset: 0x16c, Size: 4]
	uint32 AtackFlowID;//[Offset: 0x170, Size: 4]
	int AutoAimSpeed;//[Offset: 0x174, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x178, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x17c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x180, Size: 4]
	int GunID;//[Offset: 0x184, Size: 4]
	int IfIsOnCar;//[Offset: 0x188, Size: 4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	int KillAICnt;//[Offset: 0x190, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x194, Size: 4]
	float CameraRotationX;//[Offset: 0x198, Size: 4]
	float CameraRotationY;//[Offset: 0x19c, Size: 4]
	float CameraRotationZ;//[Offset: 0x1a0, Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	int AimTime;//[Offset: 0x7c, Size: 4]
	FString ShotCDTime;//[Offset: 0x80, Size: 12]
	int ShotCount;//[Offset: 0x8c, Size: 4]
	int ShotHitCount;//[Offset: 0x90, Size: 4]
	int ShotHeadHitCount;//[Offset: 0x94, Size: 4]
	int ShotPersonHitCount;//[Offset: 0x98, Size: 4]
	int ShotPersonKillCount;//[Offset: 0x9c, Size: 4]
	FString HitDistance;//[Offset: 0xa0, Size: 12]
	FString HitEachDistance;//[Offset: 0xac, Size: 12]
	FString HitAngle;//[Offset: 0xb8, Size: 12]
	FString HitEachCdTime;//[Offset: 0xc4, Size: 12]
	FString HitPartInfo;//[Offset: 0xd0, Size: 12]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	int8 SightType;//[Offset: 0xe9, Size: 1]
	uint32 AimFlowID;//[Offset: 0xec, Size: 4]

--------------------------------
Class: RepVehicleAttachment
	STExtraVehicleBase* Vehicle;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	byte SeatIndex;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CharacterPlayEmoteComponent.InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x410, Size: 4]
	CharacterFormationComponent* FormationComponent;//[Offset: 0x414, Size: 4]
	int CurrentPlayEmoteId;//[Offset: 0x41c, Size: 4]
	bool IsHandedWeaponBeforePlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	Vector EmoteColBox;//[Offset: 0x458, Size: 12]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x464, Size: 60]
	int CurrentEmoteIndex;//[Offset: 0x4d0, Size: 4]
	float EmoteAnimLastTime;//[Offset: 0x4d4, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x4d8, Size: 12]
	delegate EmoteReadyToPlayNext;//[Offset: 0x4e4, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x4f0, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x4fc, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x508, Size: 40]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool bStopEmoteLoadCallbackWhenCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x534, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x538, Size: 4]
	bool EnablePlayEmoteAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	float DefaultEmoteFollowCheckTime;//[Offset: 0x540, Size: 4]
	float DefaultEmoteFollowCheckRange;//[Offset: 0x544, Size: 4]
	bool bFollowEmoteNeedRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	TimerHandle UpdateTimerHandle;//[Offset: 0x558, Size: 8]
	float UpdateDeltaTime;//[Offset: 0x560, Size: 4]
	void TryRecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x35bdb94
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x35be184
	bool StartPlayEmoteAnim(int EmoteIndex, uint32 FollowPlayerKey);// 0x35be0c0
	void SimulatedPlayEmote(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x35bdf70
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x35bddcc
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x35bdd18
	void ReqEmotePlayFinished(int EmoteIndex);// 0x35bdc64
	void RefreshEmote();// 0x35bdc50
	void RecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x35bdb94
	STExtraBaseCharacter* QueryNearestPlayingEmoteTeammate(float InRange);// 0x35bdb14
	STExtraBaseCharacter* QueryNearestPlayingEmoteCharacter(float InRange);// 0x35bda94
	void PlayEmoteSoundByEmoteId(int EmoteId);// 0x35bda1c
	bool PlayEmote_Autonomous(int EmoteId);// 0x35bd994
	void OnStateEnter(enum EnteredState);// 0x35bd914
	bool OnPlayFollowEmote(int EmoteId, int FollowPlayerKey, bool bKeepFollowState);// 0x35bd804
	void OnPlayEmoteStop(int EmoteIndex);// 0x35bd78c
	void OnPlayEmoteEnd(int EmoteIndex);// 0x35bd714
	bool OnPlayEmote(int EmoteId);// 0x35bd694
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x35bd594
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x35bd3d8
	void OnLeaveFormationState();// 0x34f4004
	void OnInterruptCurrentEmote();// 0x35bd3c4
	void OnFollowNearPlayerEmote();// 0x35bd3b0
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x35bd2f4
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x35bd0a4
	void MulticastStartPlayEmoteWithRandReliable(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x35bcf00
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x35bcd5c
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x35bcca8
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x35bcbf4
	bool LocalStartPlayEmote(int EmoteIndex, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x35bcae4
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x35bca64
	void LeaveMovableEmoteFormation();// 0x35bca50
	void JoinFollowFormation(uint32 FollowPlayerKey);// 0x35bc9d8
	bool IsPlayingEmotes();// 0x35bc9b0
	bool IsCommonFollowTeam(EmotePlayer EmotePlayer);// 0x35bc8e8
	bool IsCanPlayEmote(int EmoteId, bool ShowTips);// 0x35bc81c
	bool IsCanFollowed();// 0x35bc7ec
	void InterruptAutonomousFollowEmote(int EmoteId);// 0x35bc774
	void InterrupEmoteSoundByEmoteId(int EmoteId);// 0x35bc6fc
	bool HasStateExceptStandOrPlayEmote();// 0x35bc6d4
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x35bc65c
	bool GetIsPlayingEmote();// 0x35bc640
	float GetEmoteStartPosition(int CharacterPlayerKey);// 0x35bc5c0
	float GetEmotePlayRate();// 0x35bc598
	FString GetEmoteHandlePath(int ItemId);// 0x49216cc
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x49216cc
	int GetCurrentEmoteId();// 0x35bc570
	AnimMontage* GetCurPlayingEmote();// 0x35bc548
	bool ForceUseLodZeroAnim();// 0x35bc518
	EmotePlayer FindNearPlayingEmote();// 0x35bc4c4
	bool EmoteAnimFinishedSuccessfully();// 0x35bc49c
	void ClientPlayInteractEmote(int EmoteId);// 0x35bc41c
	void ClearEmotePlayer();// 0x35bc408
	void CheckStateChangedInterruptEmoteState();// 0x35bc3f4
	void CheckNeedPlayReliableEmote();// 0x35bc3e0
	void CheckNeedClearEmotePlayer();// 0x35bc3cc
	void CheckNearPlayingEmote();// 0x35bc3b8
	bool CheckIsValidXSuitBornIslandAction(int EmoteIndex);// 0x35bc330
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x35bc2a8
	bool CheckEmoteNeedUseReliableRPC(int EmoteIndex);// 0x35bc220
	void CheckEmoteFollow(float DeltaTime);// 0x35bc1a8
	bool CheckEmoteCollision(int EmoteId);// 0x35bc128
	bool CheckCanShowFollowPlayEmote(EmotePlayer EmotePlayer);// 0x35bc05c
	bool CheckCanFollowPlayEmote(const int EmoteId);// 0x35bbfd4
	void CheckAutonomousNeedFollowEmote(int EmoteId);// 0x35a0f54

--------------------------------
Class: CharacterFormationComponent.LuaActorComponent.ActorComponent.Object
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x14c, Size: 4]
	STCharacterMovementComponent* MovementComponent;//[Offset: 0x150, Size: 4]
	float RightValueThreshold;//[Offset: 0x164, Size: 4]
	delegate OnCharacterJoinFormation;//[Offset: 0x168, Size: 12]
	delegate OnCharacterLeaveFormation;//[Offset: 0x174, Size: 12]
	float MaxAllowedDistance;//[Offset: 0x180, Size: 4]
	STExtraBaseCharacter*[] Followers;//[Offset: 0x190, Size: 12]
	bool bDisableForwardMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bDisableRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	float MoveInputSampleInterval;//[Offset: 0x1a4, Size: 4]
	int MoveInputCacheNum;//[Offset: 0x1a8, Size: 4]
	CharacterFormationComponent* LeaderFormationComp;//[Offset: 0x1ac, Size: 4]
	FormationInfo FormationInfo;//[Offset: 0x1b0, Size: 32]
	FormationInfo ReplicatedFormationInfo;//[Offset: 0x1d0, Size: 32]
	FormationMoveInput NetSyncMoveInput;//[Offset: 0x1f8, Size: 16]
	bool bFollowLeaderMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	float SmoothUpdateTime;//[Offset: 0x20c, Size: 4]
	bool bStopMovementReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool bStopClientMeshSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	bool bStopClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 1]
	bool bUseRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213, Size: 1]
	float MaxAdjustFormationSpeed;//[Offset: 0x214, Size: 4]
	bool ShouldUpdateRelativePosition();// 0x35b319c
	void ServerLeaveFormation();// 0x35b348c
	void ResetBlockedByObstacle();// 0x35b3478
	void ReceiveOnLeaveFormation();// 0x35b345c
	void ReceiveOnJoinFormation();// 0x35b3440
	void PlayerMoveRight(float rate);// 0x35b33c8
	void PlayerMoveForward(float rate);// 0x35b3350
	void OnRep_MoveInput();// 0x34f4004
	void OnRep_FormationInfo();// 0x35b333c
	bool LeaveFormation(STExtraBaseCharacter* FormationLeader);// 0x35b32bc
	bool JoinFormation(STExtraBaseCharacter* FormationLeader);// 0x35b323c
	bool IsPlayerControlled();// 0x35b3214
	bool IsLeader();// 0x35b31ec
	bool IsFollower();// 0x35b31c4
	bool IsBlockedByObstacle();// 0x35b319c
	bool InMyFormation(STExtraBaseCharacter* InCharacter);// 0x35b311c
	STCharacterMovementComponent* InitMovementComponent();// 0x35b30f4
	STExtraBaseCharacter* InitCharacterOwner();// 0x35b30cc
	void IgnoreLeaderWhenMoving();// 0x35b30b8
	void IgnoreFollowersWhenMoving();// 0x35b30a4
	bool HasAuthority();// 0x35b307c
	void HandleCharacterOnBlocked(STExtraBaseCharacter* Character, out const HitResult InHit);// 0x35b2f60
	Vector GetVelocity();// 0x35b2f18
	Rotator GetRelativeRotation();// 0x35b2ed0
	Vector GetRelativePosition();// 0x35b2e88
	STCharacterMovementComponent* GetLeaderMovement();// 0x35b2e60
	CharacterFormationComponent* GetLeaderFormationComp();// 0x35b2e38
	STExtraBaseCharacter* GetLeader();// 0x35b2e10
	Rotator GetFormationWorldRotation();// 0x35b2dc8
	Vector GetFormationWorldPosition();// 0x35b2d80
	FormationInfo GetFormation();// 0x35b2d34
	void GatherPlayerInput(float DeltaTime);// 0x35b2cbc
	void FormationNotifyLeader(bool bJoin);// 0x35b2c3c
	void FormationLeaveHandler(enum State);// 0x35b2bc4
	void ClearLeaderFormationComp();// 0x35b2bb0
	Rotator CalcRelativeRotation();// 0x35b2b68
	Vector CalcRelativePosition();// 0x35b2b20

--------------------------------
Class: FormationInfo
	bool bIsFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Leader;//[Offset: 0x4, Size: 4]
	Vector RelativeLocation;//[Offset: 0x8, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FormationMoveInput
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector movedir;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xf8, Size: 40]
	byte LoopCount;//[Offset: 0x120, Size: 1]
	float LoopStartTime;//[Offset: 0x124, Size: 4]
	float blendTime;//[Offset: 0x128, Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x130, Size: 12]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x13c, Size: 12]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0x148, Size: 12]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0x154, Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x160, Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x164, Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x16c, Size: 12]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x178, Size: 12]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x352ded0
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x352dab0
	bool HandleDrop(int InCount, enum Reason);// 0x352d4cc
	bool HandleDisuse(enum Reason);// 0x3515f60
	BackpackComponent* GetBackpackComponent();// 0x3530d08
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x3530c44

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]

--------------------------------
Class: EmoteAnimConfig
	FName GenderStr;//[Offset: 0x0, Size: 8]
	class Character* MainCharacter;//[Offset: 0x8, Size: 40]
	AnimationAsset* MainCharacterAnimAsset;//[Offset: 0x30, Size: 40]
	bool CanRotateMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	Transform MainCharacterTransform;//[Offset: 0x60, Size: 48]
	bool RotateBackToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	LevelSequence* EmoteLevelSequence;//[Offset: 0x94, Size: 4]
	EmoteAnimCharacterConfig[] MultiFollowerCharacters;//[Offset: 0x98, Size: 12]
	class Character* FollowerCharacter;//[Offset: 0xa8, Size: 40]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: EmoteAnimCharacterConfig
	class Character* Character;//[Offset: 0x0, Size: 40]
	Transform Transform;//[Offset: 0x30, Size: 48]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: EmoteActionBase.Object
	float PropStartShowTime;//[Offset: 0x1c, Size: 4]
	float PropEndShowTime;//[Offset: 0x20, Size: 4]
	bool bOnlyInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bOnlyOneInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	int[] AssociateEmoteIDs;//[Offset: 0x28, Size: 12]
	bool bOnlyInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	delegate OnActionReady;//[Offset: 0x48, Size: 12]
	void SetExecuteFlag(bool IsExecute);// 0x3627364
	void SetEmotePlayRate(Object* InOuter, BackpackEmoteHandle* InHandle, float OldEmoteRate, float NewEmoteRate);// 0x362721c
	void SetActionDelayTimeHandle(Object* InOuter, BackpackEmoteHandle* InHandle);// 0x3627160
	Object* GetSoftRefObj(out const SoftObjectPath AssetRef);// 0x3627084
	class Object GetSoftRefClass(out const SoftObjectPath AssetRef);// 0x3626fa8
	bool GetIsExecuting();// 0x3626f8c
	float GetFollowerEmotePosition(Object* InOuter, uint32 FollowPlayerKey);// 0x3626ec0
	void Destroy();// 0x359b4c4
	void DelayShow();// 0x35162f4

--------------------------------
Class: EmotePlayer
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	uint32 FollowPlayer;//[Offset: 0x4, Size: 4]
	int EmoteId;//[Offset: 0x8, Size: 4]
	Vector Pos;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x2b0, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x2b8, Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x2c0, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x2f0, Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x2f4, Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2f8, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2fc, Size: 4]
	float HDRUnderWaterFogDensity;//[Offset: 0x300, Size: 4]
	float NormalUnderWaterFogDensity;//[Offset: 0x304, Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x308, Size: 4]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x30c, Size: 12]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x318, Size: 12]
	<ExponentialHeightFogComponent*,bool> SceneFogOriginalStates;//[Offset: 0x324, Size: 60]
	CameraComponent* LastActiveCamComp;//[Offset: 0x360, Size: 4]
	PostProcessVolume* UnderWaterPPV;//[Offset: 0x368, Size: 4]
	void RefreshUnderWaterEffect(bool bUnderWater);// 0x3984974
	void OnToggleUnderWaterPPV(bool bUseCacheUnderWater);// 0x39848f4
	void OnExponentialHeightFogComponentCreate(ExponentialHeightFogComponent* Component);// 0x398487c
	bool IsCameraUnderWater();// 0x3984854
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x39847dc
	void AddSceneFogComponent(ExponentialHeightFog* SceneFogActor);// 0x3984764

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2b0, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x2b4, Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x2c4, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x2c8, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x2cc, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x2dc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x2e0, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x2e4, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x2f4, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x304, Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x308, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x30c, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x31c, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x320, Size: 4]
	float DirectionalInscatteringGapControl;//[Offset: 0x324, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x328, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x32c, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x330, Size: 16]
	float FogHeightFalloff;//[Offset: 0x340, Size: 4]
	float FogMaxOpacity;//[Offset: 0x344, Size: 4]
	float StartDistance;//[Offset: 0x348, Size: 4]
	float FogCutoffDistance;//[Offset: 0x34c, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x354, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x358, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x35c, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x36c, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x370, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x374, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x37c, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x380, Size: 4]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x390, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x64e5f78
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x64e5f00
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x64e5e20
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x64e5da8
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x64e5d30
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x64e5cb4
	void SetVolumetricFogDistance(float NewValue);// 0x64e5c3c
	void SetVolumetricFogAlbedo(Color NewValue);// 0x64e5bcc
	void SetVolumetricFog(bool bNewValue);// 0x64e5b4c
	void SetStartDistance(float Value);// 0x64e5ad4
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x64e5a5c
	void SetInscatteringTextureTint(LinearColor Value);// 0x64e59e0
	void SetInscatteringColorCubemapAngle(float Value);// 0x64e5968
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x64e58f0
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x64e5878
	void SetFogMaxOpacity(float Value);// 0x64e5800
	void SetFogInscatteringColor(LinearColor Value);// 0x64e5784
	void SetFogHeightFalloff(float Value);// 0x64e570c
	void SetFogDensity(float Value);// 0x6497678
	void SetFogCutoffDistance(float Value);// 0x64e5694
	void SetDirectionalInscatteringStartDistance(float Value);// 0x64e561c
	void SetDirectionalInscatteringGapControl(float Value);// 0x64e55a4
	void SetDirectionalInscatteringExponent(float Value);// 0x64e552c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x64e54b0
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x64e53f0
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x64e5334

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x308, Size: 4]
	float interval;//[Offset: 0x30c, Size: 4]
	class DamageType* DamageType;//[Offset: 0x310, Size: 4]
	class Pawn[] DamageFilters;//[Offset: 0x314, Size: 12]
	int[] BuffIDs;//[Offset: 0x320, Size: 12]
	int[] SkillBuffIDs;//[Offset: 0x32c, Size: 12]
	BoxComponent* WaterBoxComp;//[Offset: 0x338, Size: 4]
	bool IsLocationInWater(out const Vector Location);// 0x3a9c690
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x3a9c5a8

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x340, Size: 1312]
	float Priority;//[Offset: 0x860, Size: 4]
	float BlendRadius;//[Offset: 0x864, Size: 4]
	float BlendWeight;//[Offset: 0x868, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 1]
	void RemoveBlendable(interface classNone InBlendableObject);// 0x65e43d4
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x65e42a4

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x308, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	void OnRep_bEnabled();// 0x34d87f0

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 12]
	void UpdateAttribute(int TemplateID);// 0x34b6cd0
	void InitializeFollow();// 0x34b6cb4
	void Initialize(Actor* Actor);// 0x34b6c34

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xbc, Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc0, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	Transform[] StandHitBoxesTransform;//[Offset: 0xc8, Size: 12]
	Transform[] ProneHitBoxesTransform;//[Offset: 0xd4, Size: 12]
	PrimitiveComponent*[] StandHitBoxes;//[Offset: 0xe0, Size: 12]
	PrimitiveComponent*[] ProneHitBoxes;//[Offset: 0xec, Size: 12]
	FString HitBox_Stand_Tag;//[Offset: 0xfc, Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x108, Size: 12]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x118, Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x128, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x12c, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x130, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x134, Size: 4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x13c, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x144, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x14c, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x154, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x15c, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x164, Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x1a0, Size: 4]
	bool bRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x1a8, Size: 4]
	bool bRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x34f8754
	void UpdateAllInstanceBodyTransform(int Type);// 0x370bf28
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x370bea8
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x370be14
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x370bd48
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x370bbd4
	byte GetCurHitPartJudgementType();// 0x370bbac
	void CloseBodyBulletCollision();// 0x34b6cb4
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef BodyDef);// 0x370ba10

--------------------------------
Class: TurnAroundViewComponent.ActorComponent.Object
	FocusTargetItem FocusTurnData;//[Offset: 0x100, Size: 52]
	bool bTurnOnlyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	Character* MyChar;//[Offset: 0x160, Size: 4]
	void OnRep_FocusTurnTargetChange();// 0x39d1fc0

--------------------------------
Class: FocusTargetItem
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	bool IsStartTurnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float TurnTargetVelocity;//[Offset: 0x18, Size: 4]
	Rotator LastActorRotation;//[Offset: 0x1c, Size: 12]
	FString CurveName;//[Offset: 0x28, Size: 12]

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0xbc, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0xc0, Size: 60]
	TickListItem[] NeedTickComponentList;//[Offset: 0xfc, Size: 12]
	byte RoleBits;//[Offset: 0x108, Size: 1]

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 4]
	enum RoleType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CharacterMaterialComponent.ActorComponent.Object

--------------------------------
Class: CharacterHasGunBodyOffsetList
	CharacterPeekBodyOffsetList NormalBodyOffsetList;//[Offset: 0x0, Size: 216]
	CharacterPeekBodyOffsetList HasGunGunBodyOffsetList;//[Offset: 0xd8, Size: 216]

--------------------------------
Class: CharacterPeekBodyOffsetList
	CharacterBodyOffset NormalBodyOffsetList;//[Offset: 0x0, Size: 72]
	CharacterBodyOffset LeftPeekBodyOffsetList;//[Offset: 0x48, Size: 72]
	CharacterBodyOffset RightPeekBodyOffsetList;//[Offset: 0x90, Size: 72]

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector FootOffset;//[Offset: 0xc, Size: 12]
	Vector TPPCameraOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]
	Vector UpperArmL;//[Offset: 0x30, Size: 12]
	Vector UpperArmR;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SlideMoveData
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	Vector LocalVelocity;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x180, Size: 12]
	void ReleaseParachuteAnimAssets();// 0x408bafc
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x38c0af4
	void OnAnimListAsyncLoadingFinished();// 0x408bae8
	bool HasAnimAsyncLoadingFinished();// 0x408bac0
	void HandleAsyncLoadingFinishedEvent();// 0x408baac
	FString GetOwnerName();// 0x408b044
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType, int AnimOverrideType);// 0x408b9e8

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantizeWithDelta Location;//[Offset: 0x0, Size: 20]
	byte Roll;//[Offset: 0x14, Size: 1]
	uint32 View;//[Offset: 0x18, Size: 4]
	Vector_NetQuantizeWithDelta Velocity;//[Offset: 0x1c, Size: 20]

--------------------------------
Class: Vector_NetQuantizeWithDelta.Vector

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0x100, Size: 4]
	FName ScopeAimCameraSocketName;//[Offset: 0x108, Size: 8]
	FName FPPSocketName;//[Offset: 0x110, Size: 8]
	FName BoltActionCurveName;//[Offset: 0x118, Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0x120, Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0x128, Size: 4]
	float BoltActionFov;//[Offset: 0x12c, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0x130, Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x134, Size: 60]
	float ScopeZoomSpeed;//[Offset: 0x170, Size: 4]
	<int,ScopeZoomConfig> ScopeZoomConfigMap;//[Offset: 0x174, Size: 60]
	float ScopeFovMin;//[Offset: 0x1b0, Size: 4]
	float ScopeFovMax;//[Offset: 0x1b4, Size: 4]
	int CurrentPlayAnimIndex;//[Offset: 0x1b8, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x1bc, Size: 12]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x1cc, Size: 60]
	<FName,float> ScopeZoomMap;//[Offset: 0x208, Size: 60]
	float TanHalfFOV;//[Offset: 0x248, Size: 4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool IsRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x250, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x258, Size: 8]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight);// 0x3573f44
	float SwitchSightConfigMaterial();// 0x49216cc
	void SwitchScopeMeshAnim(byte Type);// 0x3573ecc
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x3573e54
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x3573ddc
	void SwitchRearSight(bool IsBegin);// 0x3573d54
	void SwitchCameraMode(byte Mode);// 0x3573cdc
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0x49216cc
	void StopScopeIn();// 0x49216cc
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0x49216cc
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0x49216cc
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x3573c10
	void SetTagCulling(bool IsUse);// 0x49216cc
	void SetNearClipPlane(bool EnableNearClip);// 0x3573b90
	void ScopingChange(bool InValue);// 0x3573b10
	void Scoping(byte NewType);// 0x3573a98
	void ScopeZoomUpdate(float Alpha);// 0x3573a20
	void ScopeZoomTick(float DeltaTime);// 0x35739a8
	void ScopeTimelineUpdate(float Alpha);// 0x3573930
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* Entity);// 0x3573874
	void ScopeOutLogic();// 0x3573860
	void ScopeOutEnd();// 0x49216cc
	void ScopeOut(byte NewType);// 0x35737e8
	void ScopeNotHandFold();// 0x35737d4
	void ScopeInterrupt(byte NewType);// 0x357375c
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* Entity);// 0x35736a0
	void ScopeInLogic();// 0x357368c
	void ScopeInEnd();// 0x49216cc
	void ScopeInContinue();// 0x3573678
	void ScopeInAfterTimeline();// 0x3573664
	void ScopeIn(byte NewType);// 0x35735ec
	void ScopeHandFold();// 0x35735d8
	void PlayScopeInTimeline();// 0x49216cc
	bool IsUseZoomScope();// 0x35735b0
	bool IsRPGScopeIn();// 0x3573588
	bool IsCurWeaponAttachedAngledSight();// 0x3573360
	bool IsAngledSightBySlot(byte Slot);// 0x3573508
	bool IsAngledSight();// 0x35734d8
	void InterruptBoltAction();// 0x35734c4
	void InitScopeZoom(int WeaponId, int ScopeID);// 0x3573408
	bool HaveAngledSightBySlot(byte Slot);// 0x3573388
	bool HaveAngledSight();// 0x3573360
	byte GetSightType();// 0x3573338
	float GetScopeZoomValue(int WeaponId, int ScopeID);// 0x3573274
	FName GetScopeZoomKey(int WeaponId, int ScopeID);// 0x35731a8
	MaterialInstance* GetScopeMaterialOverride(STExtraShootWeapon* Weapon);// 0x49216cc
	float GetScopeFov(STExtraWeapon* Weapon, bool bIsAngled);// 0x49216cc
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x3573118
	FName GetScopeAimCameraSocketName();// 0x35730d8
	ScopeZoomConfig GetCurScopeZoomConfig();// 0x3573090
	STExtraWeapon* GetCurScopeWeapon();// 0x3573068
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov);// 0x3572f88
	byte GetCurrentESTEScopeState();// 0x3572f6c
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x3572e0c
	void BoltAction(float DeltaSeconds);// 0x3572d94
	void AttachToSightKeepTransform();// 0x49216cc
	void AttachToSight();// 0x49216cc
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x3572cb4
	void ActiveComponentTickable();// 0x3572ca0

--------------------------------
Class: ScopeZoomConfig
	int DisplayMaxScale;//[Offset: 0x0, Size: 4]
	int DisplayMinScale;//[Offset: 0x4, Size: 4]
	CurveFloat* FovCurve;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 4]
	float Scale;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x180, Size: 12]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x18c, Size: 12]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x198, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x1a4, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x1b0, Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x1bc, Size: 4]
	CharacterShovelAnimData[] CharacterShovelEditList;//[Offset: 0x1c0, Size: 12]
	CharacterShovelAnimData[] CharacterShovelEditListFPP;//[Offset: 0x1cc, Size: 12]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x1d8, Size: 12]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x1e4, Size: 12]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 1]
	GetAnimUtil GetAnimUtil;//[Offset: 0x1f8, Size: 20]
	void SetAnimListMapValueData(out const AnimationAsset* AnimPtr, out AnimListMapValueData AnimListValue);// 0x4094a94
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x40947ec
	void OnAsyncLoadingFinishedNew2(AsyncLoadCharAnimParams LoadingParam);// 0x4094550
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x40942b4
	void InitAnimListMap(bool IsFPP);// 0x4094234
	PlayerAnimData[] GetCharacterShovelAnim();// 0x4094174
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x409406c
	AnimationAsset* GetAnimationAsset(out const AnimationAsset* AnimPtr);// 0x4093f74

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterShieldAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 1]
	FName JumpTypeName;//[Offset: 0x8, Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeJump;//[Offset: 0x100, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeJump;//[Offset: 0x130, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeFall;//[Offset: 0x160, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeFall;//[Offset: 0x190, Size: 48]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterShovelAnimData
	CharacterShovelPhaseData ShovelPhase_Enter;//[Offset: 0x0, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Shoveling;//[Offset: 0x30, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Leave;//[Offset: 0x60, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Crouch_Leave;//[Offset: 0x90, Size: 48]

--------------------------------
Class: CharacterShovelPhaseData
	enum ShovelPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 1]
	byte AnimType;//[Offset: 0x5, Size: 1]
	byte PoseType;//[Offset: 0x6, Size: 1]
	byte JumpType;//[Offset: 0x7, Size: 1]
	byte JumpPhase;//[Offset: 0x8, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 1]
	int SeatIdx;//[Offset: 0x4, Size: 4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: GetAnimUtil
	SoftObjectPath[] PendingList;//[Offset: 0x0, Size: 12]
	UAECharacterAnimListSubSystem* AnimListSubSystem;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAECharacterAnimListSubSystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: UAEChaCustomAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool bLoadAnimOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	int CharacterAnimOverrideType;//[Offset: 0x188, Size: 4]
	<FString,FName> CharAnimEnumName;//[Offset: 0x18c, Size: 60]
	CharCustomAnimData[] CharCustomAnimDataList;//[Offset: 0x1c8, Size: 12]
	<FString,FName> CharFeatureAnimInstanceEnumName;//[Offset: 0x1d4, Size: 60]
	CharCustomAnimInstacneData[] CharCustomAnimInstanceDataList;//[Offset: 0x210, Size: 12]
	void SetCharacterAnimOverrideType(int AnimOverrideType);// 0x408b148
	void ReleaseCustomAnimAssets();// 0x408b134
	bool HasAnimAsyncLoadingFinished();// 0x408b10c
	FString GetOwnerName();// 0x408b044
	class AnimInstance GetCharacterCustomAnimInstance(FString AnimName);// 0x408af80
	AnimationAsset* GetCharacterCustomAnim(FString AnimName);// 0x408aebc
	BlendSpace1D* GetBlendSpace1D(FString AnimAssetName);// 0x408adf8
	BlendSpace* GetBlendSpace(FString AnimAssetName);// 0x408ad34
	AnimSequence* GetAnimSequence(FString AnimAssetName);// 0x408ac70
	AnimMontage* GetAnimMontage(FString AnimAssetName);// 0x408abac
	AimOffsetBlendSpace* GetAimOffsetBlendSpace(FString AnimAssetName);// 0x408aae8
	void CallRequestLoadAnimAssets();// 0x408aad4

--------------------------------
Class: CharCustomAnimData
	UAEBlackboardKeySelector CustomAnimType;//[Offset: 0x0, Size: 8]
	AnimationAsset* CustomAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* CustomAnim;//[Offset: 0x30, Size: 4]
	FString CustomAnimName;//[Offset: 0x34, Size: 12]

--------------------------------
Class: CharCustomAnimInstacneData
	UAEBlackboardKeySelector CustomAnimInstacneType;//[Offset: 0x0, Size: 8]
	class AnimInstance* CustomAnimInstacneSoftPtr;//[Offset: 0x8, Size: 4]
	FString CustomAnimInstanceName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0, Size: 4]
	int OtherEmoteId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: CharacterHide
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bStopCharacterTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bCloseCharacterCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte nRepFlag;//[Offset: 0x3, Size: 1]
	float fScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerMantleComponent.LuaActorComponent.ActorComponent.Object
	bool bPrintLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bCheckState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool bHoldingVaultButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	float NowBlockDis;//[Offset: 0x1cc, Size: 4]
	float NowBlockHeight;//[Offset: 0x1d0, Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x1d4, Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0x1d8, Size: 4]
	float NowBlockLength;//[Offset: 0x1dc, Size: 4]
	Actor* checkActor;//[Offset: 0x1e0, Size: 4]
	Vector HitPoint;//[Offset: 0x1e4, Size: 12]
	PrimitiveComponent* VaultingComponent;//[Offset: 0x1f0, Size: 4]
	Vector BlockDir;//[Offset: 0x1f4, Size: 12]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	float CapsuleRadius;//[Offset: 0x204, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x208, Size: 4]
	float maxCheckDis;//[Offset: 0x20c, Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0x210, Size: 4]
	float UnActiveMaxAngle;//[Offset: 0x214, Size: 4]
	float MaxCheckHeight;//[Offset: 0x218, Size: 4]
	float MaxJumpLength;//[Offset: 0x21c, Size: 4]
	float heightoffsetcheck;//[Offset: 0x220, Size: 4]
	float HeightForwardCheck;//[Offset: 0x224, Size: 4]
	float minVaultHeight;//[Offset: 0x228, Size: 4]
	float minCheckHeight;//[Offset: 0x22c, Size: 4]
	float JumpValueMinDisToland;//[Offset: 0x230, Size: 4]
	float SpeedDisRatio;//[Offset: 0x234, Size: 4]
	float JumpOverMinHeightDiff;//[Offset: 0x238, Size: 4]
	float MinCrossBlockDis;//[Offset: 0x23c, Size: 4]
	float MinCrossBlockDisForSlide;//[Offset: 0x240, Size: 4]
	float ExtraCheckFallingHeight;//[Offset: 0x244, Size: 4]
	float OppositeExtraOffset;//[Offset: 0x248, Size: 4]
	bool bCrossBlockCheckIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bAllowGrabWhenUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	bool bAllowVaultOnMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	float nowMaxX;//[Offset: 0x250, Size: 4]
	float nowMinFallingY;//[Offset: 0x254, Size: 4]
	float realStartZ;//[Offset: 0x258, Size: 4]
	Vector oppositeHitPoint;//[Offset: 0x25c, Size: 12]
	Vector upHitPoint;//[Offset: 0x268, Size: 12]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x274, Size: 4]
	float blockledgeZ;//[Offset: 0x278, Size: 4]
	float CurHeightToLand;//[Offset: 0x27c, Size: 4]
	Actor*[] VaultingIgnoredActors;//[Offset: 0x280, Size: 12]
	Vector PlayerStartPosition;//[Offset: 0x28c, Size: 12]
	Rotator PlayerRotation;//[Offset: 0x298, Size: 12]
	Vector PlayerStartDir;//[Offset: 0x2a4, Size: 12]
	float LastStandDis;//[Offset: 0x2b0, Size: 4]
	float lastwalkDis;//[Offset: 0x2b4, Size: 4]
	float lastsprintDis;//[Offset: 0x2b8, Size: 4]
	float DeltaTime;//[Offset: 0x2bc, Size: 4]
	float CountTime;//[Offset: 0x2c0, Size: 4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	float realStartTime;//[Offset: 0x2c8, Size: 4]
	bool IsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	float offsetSpeed;//[Offset: 0x2d0, Size: 4]
	float nowAnimSpeed;//[Offset: 0x2d4, Size: 4]
	float animSpeedChangeTime;//[Offset: 0x2d8, Size: 4]
	float animChangeSpeedRate;//[Offset: 0x2dc, Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool waitStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	float stopVaultOppDis;//[Offset: 0x2e4, Size: 4]
	Vector DataStartPos;//[Offset: 0x2e8, Size: 12]
	FString NowVaultKey;//[Offset: 0x2f4, Size: 12]
	bool bClimbMovableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	STExtraPlayerCharacter* PlayerPawn;//[Offset: 0x304, Size: 4]
	byte NowDrawDebugType;//[Offset: 0x308, Size: 1]
	byte gunSlot;//[Offset: 0x309, Size: 1]
	bool IsPreUseSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 1]
	byte PreUseSkillWeaponSlot;//[Offset: 0x30b, Size: 1]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool IsChangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x310, Size: 4]
	float ShouldAdjustHeight;//[Offset: 0x314, Size: 4]
	float MoveSeconds;//[Offset: 0x318, Size: 4]
	Vector StartOffsetToBase;//[Offset: 0x31c, Size: 12]
	float StartZToBase;//[Offset: 0x328, Size: 4]
	<FString,VaultDataParam> VaultDataMap;//[Offset: 0x32c, Size: 60]
	VaultDataParam NowVaultData;//[Offset: 0x368, Size: 88]
	VaultCheckRule[] CheckRuleListCPP;//[Offset: 0x3c0, Size: 12]
	UAEWindowComponent*[] VaultWindows;//[Offset: 0x3cc, Size: 12]
	bool bEnableFaceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bEnableSimulatedFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	float FaceCameraSpeed;//[Offset: 0x3dc, Size: 4]
	bool bEnableNowDisNegative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool bEnableStartPositionSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	float StartPositionSmoothTime;//[Offset: 0x3e4, Size: 4]
	bool bZeroSpeedWhenVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bControlCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	float CameraUpperThanBlock;//[Offset: 0x404, Size: 4]
	bool bEnableAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool bAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	float AutoVaultMaxHeightToLand;//[Offset: 0x414, Size: 4]
	bool bCheckObstacleNotZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	float EndVaultingYaw;//[Offset: 0x43c, Size: 4]
	float EndVaultingTime;//[Offset: 0x440, Size: 4]
	float EndVaultingInterpTime;//[Offset: 0x444, Size: 4]
	bool bJustEndedVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	bool bResetCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44b, Size: 1]
	bool bUseEndPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	float EndPositionTolerance;//[Offset: 0x450, Size: 4]
	bool bEnableVaultOnMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	bool bEnableVaultFollowMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 1]
	float VaultCheckInterval;//[Offset: 0x458, Size: 4]
	delegate OnVaultCheckFlagChange;//[Offset: 0x480, Size: 12]
	delegate OnVaultFailFromDS;//[Offset: 0x48c, Size: 12]
	<byte,VaultAnimDataPath> VaultAnimPathMap;//[Offset: 0x498, Size: 60]
	AnimMontage* VaultMontage;//[Offset: 0x4d4, Size: 4]
	AnimMontage* TeamVaultMontage;//[Offset: 0x4d8, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4e0, Size: 4]
	bool VaultOnBase();// 0x3739c30
	void VaultLeave(enum State);// 0x3739bb8
	bool VaultFromCPP();// 0x3739b88
	bool VaultFollowBase();// 0x3739b60
	void VaultFail();// 0x3739b44
	bool VaultCheckCPP();// 0x3739b1c
	void UpdateVault_BluePrint();// 0x36e585c
	void UpdatePosition();// 0x35b345c
	void UpdateMontageSpeed();// 0x3739b08
	void TpsVaultUpdate();// 0x3739af4
	void StopVaultAndReverse();// 0x3739ae0
	void StartVault();// 0x3739acc
	void StartLoadVaultAnim();// 0x3739ab8
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x3739a38
	void StartAsyncLoadTeamVaultAnimRes();// 0x350dae0
	bool ShouldSmoothStartPosition();// 0x3739a10
	void SetVaultData(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossmaxFalling, float crossmaxDis, Vector InHitPoint, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x37395a8
	void SetPlayerStartPositionInternal(Vector InStartPosition, bool UseInputStart);// 0x37394e4
	void SetLimitPostion(float XValue, float ZValue);// 0x3739428
	void SetEnd();// 0x3739414
	void ServerRPC_VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x3738f28
	void ServerRPC_StopVault();// 0x3738ecc
	void ServerRPC_RequestVault(float dis, float Height, float Length, const int VaultId, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x3738a20
	void ServerCrossingBlockCheck(Vector StartPos, float blockdis, float blockheight, Rotator movedir, out bool Result);// 0x3738880
	void ServerBlockDisCheck(Vector InHitPoint, FString Key, Vector StartPos, float blockdis, float blockheight, float blocklength, Actor* InCheckActor, out bool Result);// 0x37385b8
	void ResetCheck();// 0x37385a4
	void ReceiveStartVault();// 0x35b3440
	void ReceiveEndVault();// 0x3599e34
	void OnRespawned_BlueprintImpl();// 0x49216cc
	void MulticastRPC_VaultFail();// 0x35cddd4
	void MulticastRPC_VaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x37381e4
	void MulticastRPC_StopVault();// 0x36c2ea4
	void MulticastRPC_DoVault(float dis, float Height, float Length, const int VaultId, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x3737e68
	void LeaveAvoidSimulateCharacterShake();// 0x3737e54
	void JumpVaultCheck(out bool Result);// 0x3737dcc
	void jumpFromUI();// 0x3737db8
	void IsValidVault(out bool IsValid);// 0x3737d30
	FString GetVaultKeyByBlockHeight(float Height);// 0x3737c20
	void GetRealStartZHeight(out float ResStartZ);// 0x3737b98
	void GetPlayerStartPositionInternal(bool bRelationLoc, out Vector StartPos);// 0x3737ac4
	void GetNowOppSideDis(out float Result);// 0x3737a3c
	void GetNowData(bool IsInFalling, out bool IsGet);// 0x3737964
	void GetDataStartPosition(out Vector StartPos);// 0x37378e0
	float GetCurHeightToLand();// 0x37378b8
	void GetCrossMaxBlockDisOffset(out bool Result);// 0x3737830
	void GetCrossMaxBlockDisForward(out bool Result);// 0x37377a8
	void GetCrossBlockMaxFallingHeight(out bool Result);// 0x3737720
	byte GetCharacterSubTypeForAnim();// 0x37376f0
	void ForwardTestObjectType(Actor* Actor, ActorComponent* Comp, out bool Result);// 0x37375e0
	void FindWindowGlass(Vector CheckStart, Vector CheckEnd);// 0x3737520
	void EnterAvoidSimulateCharacterShake();// 0x373750c
	void EndVaultCPP();// 0x37374f8
	void EncodeVaultKeyToNumber(FString VaultKey, out int VaultId);// 0x37373e8
	void EnableCulling(bool bEnable);// 0x3737368
	void DoVaultIgnoreStateCPP();// 0x3737354
	void DoVaultCPP();// 0x3737340
	void DecodeNumberToVaultKey(out const int VaultId, out FString VaultKey);// 0x373721c
	void DealBrokenWindows();// 0x3737208
	void CheckVaultingWindow();// 0x37371f4
	void CheckUpLengthBlock(out bool Result);// 0x373716c
	void CheckNowisJumpAnimation(float Height, float thcikLength, out bool Result, out bool ishasAnimation);// 0x3737000
	void CheckIsValidByHeightCheckDis(float nowheight, float checkDis, out bool IsValid);// 0x3736ef0
	void CheckHeight(float Height, out bool IsActive, out Vector Point);// 0x3736dd0
	void CheckForward(out bool IsActive);// 0x3736d48
	void CheckCanVault(out bool IsActive);// 0x3736cb8
	bool CheckCanStandOn();// 0x3736c90
	void CacultLimitData();// 0x3736c7c
	void AutoVaultInternal();// 0x3736c68
	void AutoVault(STExtraBaseCharacter* Char, out const HitResult Impact);// 0x3736b4c
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x3736ad4

--------------------------------
Class: VaultDataParam
	int ID;//[Offset: 0x0, Size: 4]
	FString montageSectionName;//[Offset: 0x4, Size: 12]
	CurveFloat* upCurve;//[Offset: 0x10, Size: 4]
	CurveFloat* forwardCurve;//[Offset: 0x14, Size: 4]
	float blockdis;//[Offset: 0x18, Size: 4]
	float blockheight;//[Offset: 0x1c, Size: 4]
	float blokcThicklength;//[Offset: 0x20, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool forceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	float CountTime;//[Offset: 0x28, Size: 4]
	float playSpeed;//[Offset: 0x2c, Size: 4]
	float speedChangeTime;//[Offset: 0x30, Size: 4]
	float changeSpeedRate;//[Offset: 0x34, Size: 4]
	float StartFaceCameraTime;//[Offset: 0x38, Size: 4]
	bool standState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool walkState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool SprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	bool isPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 1]
	float BreakWindowDelayTime;//[Offset: 0x40, Size: 4]
	bool isCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float MinCancelVTimer;//[Offset: 0x48, Size: 4]
	float MaxCancelVTimer;//[Offset: 0x4c, Size: 4]
	bool fallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	float fallingvaultMinHeight;//[Offset: 0x54, Size: 4]

--------------------------------
Class: VaultCheckRule
	float CheckHeight;//[Offset: 0x0, Size: 4]
	float standCheckDis;//[Offset: 0x4, Size: 4]
	float walkCheckDis;//[Offset: 0x8, Size: 4]
	float sprintCheckDis;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x790, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x794, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x798, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x79c, Size: 4]
	ParticleSystem* BrokenEffect;//[Offset: 0x7a0, Size: 4]
	void NotifyServerBroken(PlayerController* Instigator);// 0x49216cc
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x40b5f18
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x49216cc
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x40b5e48
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x40b5d84
	UAEWindowRepData GetRepData();// 0x40b5c4c

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 48]
	FString PathToLoad;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44, Size: 4]

--------------------------------
Class: VaultAnimDataPath
	FString VaultAnimPath;//[Offset: 0x0, Size: 12]
	FString TeamVaultAnimPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AnimParamsComponent.ActorComponent.Object
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x184, Size: 4]
	AnimInstanceContainer* LocomotionAnimContainer;//[Offset: 0x188, Size: 4]
	AnimInstanceContainer* FeatureMoveAnimContainer;//[Offset: 0x18c, Size: 4]
	AnimInstanceContainer* FeatureNearDeathAnimContainer;//[Offset: 0x190, Size: 4]
	AnimInstanceContainer* FeatureHitAnimContainer;//[Offset: 0x194, Size: 4]
	AnimInstanceContainer* VehicleAnimContainer;//[Offset: 0x198, Size: 4]
	AnimInstanceContainer* SkillAnimContainer;//[Offset: 0x19c, Size: 4]
	AnimInstanceContainer* ParachuteAnimContainer;//[Offset: 0x1a0, Size: 4]
	AnimInstanceContainer* GetVehicleAnimContainer();// 0x34ec7f0
	AnimInstanceContainer* GetSkillAnimContainer();// 0x34ec7c8
	AnimInstanceContainer* GetParachuteAnimContainer();// 0x34ec7a0
	AnimInstanceContainer* GetLocomotionAnimContainer();// 0x34ec778
	AnimInstanceContainer* GetFeatureNearDeathAnimContainer();// 0x34ec750
	AnimInstanceContainer* GetFeatureMoveAnimContainer();// 0x34ec728
	AnimInstanceContainer* GetFeatureHitAnimContainer();// 0x34ec700

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	byte AttachLocationType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: NetCarryBackState
	enum State;//[Offset: 0x0, Size: 1]
	enum DetachMethod;//[Offset: 0x1, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
	FString ActorComponentName;//[Offset: 0x14c, Size: 12]
	int CarryBackSkillID;//[Offset: 0x158, Size: 4]
	int PutDownSkillID;//[Offset: 0x15c, Size: 4]
	int DSSwitchId;//[Offset: 0x160, Size: 4]
	enum State;//[Offset: 0x164, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x168, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x16c, Size: 4]
	enum DetachMethod;//[Offset: 0x170, Size: 1]
	delegate OnEnterCarryBackState;//[Offset: 0x174, Size: 12]
	delegate OnExitCarryBackState;//[Offset: 0x180, Size: 12]
	delegate OnEnterBeCarriedBackState;//[Offset: 0x18c, Size: 12]
	delegate OnExitBeCarriedBackState;//[Offset: 0x198, Size: 12]
	bool bEnableBPInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x1c4, Size: 12]
	float CorrectTickInterval;//[Offset: 0x1d0, Size: 4]
	bool bEnableTranformCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bEnableCollisionCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	float FrontAngleRangeThreshold;//[Offset: 0x1d8, Size: 4]
	float BackAngleRangeThreshold;//[Offset: 0x1dc, Size: 4]
	delegate OnStartCorrectCarryBack;//[Offset: 0x1e4, Size: 12]
	STExtraVehicleBase* CarryToTargetVehicle;//[Offset: 0x1f0, Size: 4]
	void TryPreLoadVehicleCharAnim(const byte InAnimType);// 0x3821cd0
	void StopPutDown();// 0x3820fe8
	void StopCarryBack(enum InDetachMethod);// 0x3821c50
	void StopBePutDown();// 0x34f4004
	void StopBeCarriedBack(enum InDetachMethod);// 0x3821bd0
	void StartPrePutDown();// 0x37839ac
	void StartPrepareCarryToVehicle();// 0x35f1828
	void StartPrepareBeCarriedToVehicle();// 0x35cbe78
	void StartPreCarryBack(STExtraBaseCharacter* InCharacter);// 0x3821b50
	void StartPreBePutDown();// 0x350de6c
	void StartPreBeCarriedBack(STExtraBaseCharacter* InCharacter);// 0x3821ad0
	void StartCorrectBeCarriedState(bool bInEnableTranformCorrect, bool bInEnableCollisionCorrect);// 0x3821a00
	void SetCarryToTargetVehicle(STExtraVehicleBase* InVehicleActor);// 0x35a0ed4
	void SetCarryBackState(enum InState, STExtraBaseCharacter* InCarryBackCharacter, STExtraBaseCharacter* InBeCarriedBackCharacter);// 0x3821900
	void ResetCarryBackState();// 0x38218ec
	void ReplaceCharacterAnimation(bool bReplace);// 0x382186c
	void PutDownSomebody(bool bFront);// 0x38217ec
	void PutDownFailed();// 0x38217d8
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x38216d8
	void LocalPutDownFailed();// 0x37839c8
	void LocalExitCarryToVehicleState(enum InDetachMethod);// 0x3821658
	void LocalExitCarryBackState(enum InDetachMethod);// 0x38215d8
	void LocalExitBeCarriedToVehicle(enum InDetachMethod);// 0x3821558
	void LocalExitBeCarriedBackState(enum InDetachMethod);// 0x38214d8
	void LocalEnterPutDownState();// 0x38214bc
	void LocalEnterCarryToVehicleState();// 0x36bd764
	void LocalEnterCarryBackState();// 0x36a49d4
	void LocalEnterBePutDownState();// 0x350de88
	void LocalEnterBeCarriedToVehicleState();// 0x3603c6c
	void LocalEnterBeCarriedBackState();// 0x350dafc
	void LocalCompleteCarryBackState();// 0x3692998
	void LocalCompleteBeCarriedBackState();// 0x350db18
	void LocalCarryToVehicleFailed();// 0x38214a0
	void LocalCarryBackFailed();// 0x350d890
	bool IsValidToVehicle();// 0x37376f0
	bool IsInCarryBackState();// 0x3821478
	bool IsInBeCarriedBackState();// 0x3821450
	bool IsCarryBackEnable();// 0x3821428
	void HandleCarrySkillEndEvent(enum StopReason, int SkillID);// 0x3821364
	STExtraVehicleBase* GetCarryToTargetVehicle();// 0x3821334
	void ExecuteCarryToVehicle(const enum InDirType);// 0x38212bc
	void ExecuteBeCarriedToVehicle(const enum InDirType);// 0x3821244
	void CompletePutDown(bool bFront);// 0x38211bc
	void CompleteCarryBack();// 0x35a877c
	void CompleteBePutDown(bool bFront);// 0x3821134
	void CompleteBeCarriedBack();// 0x3821118
	bool CheckCanCarryBack(STExtraBaseCharacter* InCharacter);// 0x3821090
	void CarryToVehicleFinished(const enum InDirType);// 0x3821010
	void CarryToVehicleFailed();// 0x3820ffc
	void CarryBackStateDelegate__DelegateSignature();// 0x49216cc
	void CarryBackSomebody();// 0x3820fe8
	void CarryBackFailed();// 0x3820fd4
	bool CanCarryToVehicle(STExtraVehicleBase* InVehicleActor);// 0x35bbfd4
	int CalculateDirOfCarryToVehInternal(Actor* InVehicleActor);// 0x3820f4c
	int CalculateDirOfCarryToVeh();// 0x3820f1c
	void BPOnCarryBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x49216cc
	void BPOnBeCarriedBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x49216cc
	void BePutDownBySomebody(bool bFront);// 0x3597804
	void BeCarriedToVehicleFinished(const enum InDirType);// 0x37ae984
	void BeCarriedBackBySomebody();// 0x34f4004

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x4, Size: 12]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: DynamicOptimizeActorComponents.LuaActorComponent.ActorComponent.Object
	<ActorComponent*,DynamicOptimizeComponentFull> DormantFullComponents;//[Offset: 0x184, Size: 60]
	<ActorComponent*,DynamicOptimizeComponentTick> DormantTickComponents;//[Offset: 0x1c0, Size: 60]
	ActorComponent*[] DormantFullForDebug;//[Offset: 0x1fc, Size: 12]
	ActorComponent*[] DormantTickForDebug;//[Offset: 0x208, Size: 12]
	FName NotDestroy;//[Offset: 0x220, Size: 8]
	void SetComponentTickDirectly(ActorComponent* InComponent, bool bTick);// 0x360d110
	void OnRespawned();// 0x34b6cb4
	bool IsComponentDormant(ActorComponent* InComponent, enum DormantType);// 0x360d04c
	FString[] GetDestoryComponentNames();// 0x360cef0
	FString GetComponentName(ActorComponent* InComponent);// 0x360cde8
	void DormantComponent(ActorComponent* InComponent, enum DormantType, FString Reason);// 0x360cca4
	void DestroyUnuseComponent(ActorComponent* InComponent, FString Reason);// 0x360cba4
	void AwakeComponent(ActorComponent* InComponent, enum DormantType, FString Reason, bool bForceRelateTransform);// 0x360ca10
	void AwakeAllComponents();// 0x360c9fc

--------------------------------
Class: DynamicOptimizeComponentFull
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bSkipUpdateChildTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	byte CollisionType;//[Offset: 0x7, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bReplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bTickEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	FString Reason;//[Offset: 0x14, Size: 12]

--------------------------------
Class: DynamicOptimizeComponentTick
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString Reason;//[Offset: 0x4, Size: 12]
	bool bTickEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x1778, Size: 12]
	delegate OnGameModeExitFlying;//[Offset: 0x1784, Size: 12]
	FString LogicAreaDataPath;//[Offset: 0x1790, Size: 12]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a8, Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b4, Size: 1]
	bool bRandomlyChooseOneWinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b5, Size: 1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b6, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b7, Size: 1]
	bool bOpenMonsterDamageTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b8, Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x17bc, Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c0, Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x17c4, Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x17c8, Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x17cc, Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x17d0, Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d4, Size: 1]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x17ec, Size: 4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f0, Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x17f4, Size: 12]
	float GameModeStateReadyEnterTime;//[Offset: 0x180c, Size: 4]

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed1, Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed2, Size: 1]
	int DefaultRevivalCount;//[Offset: 0xed4, Size: 4]
	bool ReducePlayersNumAfterDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 1]
	int DefaultBuyLifeCount;//[Offset: 0xedc, Size: 4]
	bool EnableTeamMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 1]
	GameModeParms GameModeParms;//[Offset: 0xee4, Size: 216]
	STExtraPlayerStart*[] STEPlayerStartsList;//[Offset: 0xfbc, Size: 12]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0xfc8, Size: 60]
	enum GameModeType;//[Offset: 0x1004, Size: 1]
	enum GameModeSubType;//[Offset: 0x1005, Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0x1008, Size: 4]
	GameStatisComponent* GameStatisComp;//[Offset: 0x100c, Size: 4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0x1010, Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0x1014, Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1018, Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0x101c, Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0x1020, Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0x1024, Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1028, Size: 1]
	FString SubAISuffix;//[Offset: 0x102c, Size: 12]
	int MlAIType;//[Offset: 0x1038, Size: 4]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0x103c, Size: 4]
	class AIController* AIControllerClass;//[Offset: 0x1040, Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0x1044, Size: 4]
	byte WorldLoadedType;//[Offset: 0x1048, Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0x104c, Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0x1050, Size: 4]
	int PlayerNumPerTeam;//[Offset: 0x1054, Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1058, Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1059, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x105c, Size: 12]
	float CircleSpeedMultiplicator;//[Offset: 0x1068, Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106c, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106d, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106e, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106f, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1071, Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1072, Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1073, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1074, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1075, Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1076, Size: 1]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1077, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0x107c, Size: 12]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0x1088, Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 1]
	bool bEnableArmorEquipmentToBeAutoDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108d, Size: 1]
	FString GameModeConfigPath;//[Offset: 0x1090, Size: 12]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109c, Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109d, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109e, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109f, Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a0, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a1, Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0x10a4, Size: 80]
	Vector BornLocation;//[Offset: 0x10f4, Size: 12]
	Vector AIBornLocation;//[Offset: 0x1100, Size: 12]
	float BornRadius;//[Offset: 0x110c, Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0x1110, Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0x1111, Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0x1114, Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0x1118, Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x111c, Size: 4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1120, Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0x1138, Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0x113c, Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1140, Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0x1144, Size: 4]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1148, Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1149, Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0x114c, Size: 4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0x1150, Size: 4]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0x1154, Size: 4]
	float OverrideBackpackCapacity;//[Offset: 0x1158, Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115c, Size: 1]
	FString LuaModPath;//[Offset: 0x1160, Size: 12]
	FString LuaSubMod;//[Offset: 0x116c, Size: 12]
	FString[] CustomWidgets;//[Offset: 0x1178, Size: 12]
	FString CustomUIName;//[Offset: 0x1184, Size: 12]
	GameModeState* CurrentState;//[Offset: 0x1190, Size: 4]
	GameModeState*[] AllGameModeStates;//[Offset: 0x1194, Size: 12]
	GameModeState* GameModeStateActive;//[Offset: 0x11a0, Size: 4]
	GameModeState* GameModeStateReady;//[Offset: 0x11a4, Size: 4]
	GameModeState* GameModeStateFighting;//[Offset: 0x11a8, Size: 4]
	GameModeState* GameModeStateFinished;//[Offset: 0x11ac, Size: 4]
	FName CurGameModeState;//[Offset: 0x11b0, Size: 8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c4, Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x11c8, Size: 4]
	Actor* PlanePawn;//[Offset: 0x11cc, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d0, Size: 1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0x11d4, Size: 12]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0x11e0, Size: 4]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0x11e4, Size: 4]
	float OutBoundDamage;//[Offset: 0x11e8, Size: 4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0x126c, Size: 4]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0x1270, Size: 4]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0x1274, Size: 60]
	PlaneComponent* PlaneComp;//[Offset: 0x12b0, Size: 4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x12b4, Size: 4]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0x12b8, Size: 4]
	ShowVehicleComponent* ShowVehicle;//[Offset: 0x12bc, Size: 4]
	delegate OnVehicleDamageInfo;//[Offset: 0x12c0, Size: 12]
	delegate OnSpawnAISuccessDelegate;//[Offset: 0x12ec, Size: 12]
	delegate OnTerminatorEndGameDelegate;//[Offset: 0x1360, Size: 12]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x136c, Size: 12]
	int MatchGoal;//[Offset: 0x13bc, Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c0, Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x13d8, Size: 56]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0x1410, Size: 12]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141c, Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x1420, Size: 12]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x142c, Size: 4]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x1430, Size: 4]
	FName FeatureDefaultPawnName;//[Offset: 0x1438, Size: 8]
	FName FeaturePlayerControllerName;//[Offset: 0x1440, Size: 8]
	FName FeatureWeaponName;//[Offset: 0x1448, Size: 8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1450, Size: 1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1451, Size: 1]
	int VehicleExplosionLifeSpan;//[Offset: 0x1454, Size: 4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1458, Size: 1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1459, Size: 1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145a, Size: 1]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145b, Size: 1]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145c, Size: 1]
	bool bEnableDSAITickRateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145d, Size: 1]
	DSTickRateOptimize DSTickRateOptimizeConfig;//[Offset: 0x1460, Size: 16]
	float DelaySpawnVehicleTime;//[Offset: 0x1470, Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0x1474, Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x1478, Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147c, Size: 1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0x1480, Size: 60]
	int MaxVehiclesInReady;//[Offset: 0x14bc, Size: 4]
	int MaxVehiclesPerGroupInReady;//[Offset: 0x14c0, Size: 4]
	int MaxWingmanInReady;//[Offset: 0x14c4, Size: 4]
	int MaxWingmanPerGroupInReady;//[Offset: 0x14c8, Size: 4]
	bool EnableSuperCarPreTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14cc, Size: 1]
	int SuperCarNum;//[Offset: 0x14d0, Size: 4]
	int MaxGroups;//[Offset: 0x14d4, Size: 4]
	int MaxPlayersPerGroup;//[Offset: 0x14d8, Size: 4]
	<int,GroupPlayers> PlayersInGroup;//[Offset: 0x14dc, Size: 60]
	PVSNetRelevantHelper* PVSNetRelevantHelper;//[Offset: 0x168c, Size: 4]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1690, Size: 1]
	bool bMLAIAsHuman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1691, Size: 1]
	STExtraPlayerController*[] WaitAddWeaponPlayerList;//[Offset: 0x1694, Size: 12]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x16a0, Size: 12]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ac, Size: 1]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0x16b0, Size: 60]
	bool bNeedBroadcastFatalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ec, Size: 1]
	bool bNeedBroadcastLastBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ed, Size: 1]
	<int,AIControllerList> AIDeathResIDToControllerList;//[Offset: 0x16f0, Size: 60]
	AIPawnPoolItem[] AILivingPawnForPool;//[Offset: 0x172c, Size: 12]
	bool bEnablePacketSimulationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1738, Size: 1]
	int MinPacketSimulationLag;//[Offset: 0x173c, Size: 4]
	float CaculateConnectionsAvgLagTimer;//[Offset: 0x1740, Size: 4]
	int ConnectionsAvgLag;//[Offset: 0x1744, Size: 4]
	float CaculateConnectionsAvgLagTime;//[Offset: 0x1748, Size: 4]
	FString[] ReasonsToSend;//[Offset: 0x174c, Size: 12]
	bool bAIDropBulletInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1758, Size: 1]
	bool bDropAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1759, Size: 1]
	bool bOnlyDropMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175a, Size: 1]
	float DistanceCullFactor;//[Offset: 0x175c, Size: 4]
	float CheckDestoryActorTime;//[Offset: 0x1760, Size: 4]
	bool bReCalcCharacterNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1764, Size: 1]
	bool bInvincibleIgnorePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1765, Size: 1]
	float RemainReadyStateTimeForceSpawnMLAI;//[Offset: 0x1768, Size: 4]
	Vector2D TimerSpawnMLAITime;//[Offset: 0x176c, Size: 8]
	bool IsRegisterDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1774, Size: 1]
	bool bMlAITraining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1775, Size: 1]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x357df68
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x357de08
	void StopAllFakePlayerAIBehaviorTree();// 0x357ddf4
	void StatisticsVehicleDamage(float Damage, int DamageTypeId, Actor* DamageCauser, Controller* InstigatorController, Controller* VictimController, bool bIsFatalHealthCost, Actor* VictimVehicle);// 0x357dbcc
	bool SpawnTeammateAIWithPlayerKey(uint32 PlayerKey);// 0x357db4c
	bool SpawnMLAIWithPlayerKeyRet(uint32 PlayerKey, int TeamID, uint32 Level, bool bDelivery, bool bTeammate);// 0x357d9a4
	void SpawnAllAI();// 0x357d990
	bool SpawnAIAtPosiotn(int TeamID, float PosiX, float PosiY, float PosiZ, int WeaponId);// 0x357d7f8
	void SpawnAI(int Num);// 0x357d780
	bool ShouldDisableRoomCircleConfig();// 0x357d750
	void SetStateLeftTime(int leftTime);// 0x357d6d0
	void SetGameEndReportData();// 0x357d6b4
	void SetCharacterCustomEnd(UAECharacter* Character);// 0x357d63c
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x357d580
	void RevisePlayerTombBoxDropWrapperList(STExtraBaseCharacter* Character, out PickUpItemData[] OutItemDataList, STExtraBaseCharacter* DamageCauser, int InstanceIDCnt);// 0x357d3f8
	void RestartPlayer(Controller* NewPlayer);// 0x357d378
	void ResetGameMode();// 0x357d35c
	void RemoveUnuseComponent(SubSystemConfig InSubSystemConfig);// 0x357d2a8
	void RegisterComponentInternal(enum InSubSystemId, ActorComponent* NewComp, bool bAddToRoot);// 0x357d198
	void RefreshNetworkObject(Actor* Actor, Vector Loction);// 0x357d0d4
	void OnVehicleKill(int DamageTypeId, Actor* DamageCauser);// 0x357d010
	void OnReportNetworkData();// 0x357cff4
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x357cf74
	void OnGameModeStateChange();// 0x357cf58
	void OnGameEnterReady();// 0x357cf3c
	void OnGameEnterFinish();// 0x357cf20
	void OnGameEnterFight();// 0x357cf04
	void OnGameEnterActive();// 0x357cee8
	void OnAirDropBoxDestroy(int BoxId);// 0x357ce70
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x357cd4c
	bool IsVisualFieldFeatureSupported();// 0x357cd24
	bool IsSubAIMode();// 0x357ccfc
	bool IsRevivalGameMode(STExtraPlayerState* PlayerState);// 0x357cc74
	bool IsRestartPlayerUsePawnRotation();// 0x357cc44
	bool IsPlayerCanSelfRevival(STExtraPlayerState* PlayerState);// 0x357cbbc
	bool IsFeatureSupported(enum SubSystemType);// 0x357cb3c
	bool IsCanJump(PlayerController* PC);// 0x357cab4
	void InitlializeRespawnItemConfig();// 0x357caa0
	void InitialGameModeState();// 0x357ca8c
	void HandleGameEnd();// 0x357ca70
	void GotoReadyState();// 0x357ca5c
	void GotoFinishedState();// 0x357ca40
	void GotoFightingState();// 0x357ca24
	void GotoActiveState();// 0x357ca10
	void GMGameModeGotoFightingState();// 0x357c9fc
	void GetPlayerRealtimeVerifyInfo(uint32 PlayerKey, out RealtimeVerifyInfo RealtimeVerifyInfo);// 0x357c8b8
	int GetMonsterCount();// 0x357c890
	class Object GetGlobalOverrideClass(class Object InComponentClass);// 0x357c810
	STExtraBaseCharacter* GetFirstAlivePlayerCharacter();// 0x357c7e0
	byte GetDefaultAIType(uint32 PlayerKey);// 0x357c760
	int GetCurWeatherPhaseIndex();// 0x357c730
	GameModeState* GetCurrentState();// 0x357c708
	GameModeParam GetCurPlaneRouteData();// 0x357c5d0
	FName GetCurGameModeState();// 0x357c5a4
	GameModeState*[] GetAllGameModeStates();// 0x357c4e4
	AIWorldVolume* GetAIWorldVolume();// 0x357c4bc
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x357c494
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x357c3c8
	void GenerateRespawnItemsForAllPlayers();// 0x357c3b4
	PlayerController* FindPlayerControllerByUId(uint64 UID);// 0x357c328
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x357c2a8
	void ExecuteCVarConfig();// 0x357c294
	void DropItemRegisterAIPickupPoint(Actor* PickUpActor);// 0x357c21c
	void CreatePVSNetRelevant();// 0x357c208
	void CreateGameModeComponents();// 0x357c1ec
	STExtraBaseCharacter* CreateBaseCharacter(FakePlayerAIController* InAIController);// 0x357c164
	ActorComponent* CreateAndRegisterComponent(SubSystemConfig InSubSystemConfig);// 0x357c0a8
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x357c020
	bool CheckNoHumanExist();// 0x357bff0
	bool CheckMatchGoalAchieved();// 0x357bfc0
	void CheckInitGameTriggerEnv();// 0x357bfac
	bool CheckGameEnd();// 0x357bf7c
	void ChangeStateGM(FName TargetGameModeState);// 0x357bf04
	bool CanFinishWhenAllNearDeathInSelfRevival(STExtraPlayerState* PlayerState);// 0x357be7c
	bool CanEnterObserve(STExtraPlayerState* PlayerState);// 0x357bdf4
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x357bd30
	void CaculateConnectionsAvgLag(float DeltaTime);// 0x357bcb8
	void BPSpawnAI(int Num);// 0x357bc40

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	bool bUseTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString AIEquipmentTableName;//[Offset: 0x24, Size: 12]
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x30, Size: 12]
	bool bUseSpecificEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int SpecificEquipId;//[Offset: 0x40, Size: 4]
	float RandomStartJumpTime;//[Offset: 0x44, Size: 4]
	float RandomEndJumpTime;//[Offset: 0x48, Size: 4]
	float JumpRadius;//[Offset: 0x4c, Size: 4]
	float JumpHeight;//[Offset: 0x50, Size: 4]
	float RandomAccelerateStart;//[Offset: 0x54, Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x58, Size: 4]
	float OpenParachuteHeight;//[Offset: 0x5c, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x60, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x64, Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x68, Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x6c, Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x70, Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x74, Size: 4]
	float StopdeliverTime;//[Offset: 0x78, Size: 4]
	float NoCirlceRadius;//[Offset: 0x7c, Size: 4]
	float TraceHeight;//[Offset: 0x80, Size: 4]
	float RangeMin;//[Offset: 0x84, Size: 4]
	float RangeMax;//[Offset: 0x88, Size: 4]
	float OriginCheckSquare;//[Offset: 0x8c, Size: 4]
	float DestCheckSquare;//[Offset: 0x90, Size: 4]
	int HouseCheckTimes;//[Offset: 0x94, Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x98, Size: 8]
	float FlyToCircleRadius;//[Offset: 0xa0, Size: 4]
	float FlyToCircleOutRadius;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0xbc, Size: 4]
	float AvoidanceWeight;//[Offset: 0xc0, Size: 4]
	float CohesionWeight;//[Offset: 0xc4, Size: 4]
	float AlignmentWeight;//[Offset: 0xc8, Size: 4]
	float ArriveWeight;//[Offset: 0xcc, Size: 4]
	float PushedWeight;//[Offset: 0xd0, Size: 4]
	float SeparationWeight;//[Offset: 0xd4, Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0xdc, Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0xe0, Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0xe4, Size: 4]
	<Actor*,int> actor2AgentIndex;//[Offset: 0x4fc, Size: 60]
	void SetQueryInterfaceBlueprint(AIWorldVolume* Query);// 0x35db3a8
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x35db330
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x35db220
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float SegmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x35dafb8

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x338, Size: 12]
	FString HousePathFilePath;//[Offset: 0x344, Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	FString LogicAreaFilePath;//[Offset: 0x354, Size: 12]
	bool bTestOccupiedOcclusionPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x39c, Size: 60]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x414, Size: 4]
	<Actor*,STBuffApplifierSpreading*> AllBuffApplifierSpreadings;//[Offset: 0x594, Size: 60]
	void RemoveDamageableActor(DamageableActor* DamageableActor);// 0x34dc178
	Vector GetSpreadingCenter(Actor* InActor);// 0x34dc0e8
	void BreakWall(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x34dc024
	void BreakHouse(Vector LogicAreaLoc);// 0x34dbfb4
	void AddDamageableActor(DamageableActor* DamageableActor);// 0x34dbf3c

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x330, Size: 4]

--------------------------------
Class: STBuffApplifierSpreading.Actor.Object
	Actor* ParentGrenade;//[Offset: 0x308, Size: 4]
	SceneComponent* SceneRoot;//[Offset: 0x318, Size: 4]
	Rotator[] InitialTraceArray;//[Offset: 0x31c, Size: 12]
	int StepsPerTick;//[Offset: 0x328, Size: 4]
	int SpreadDirectionCount;//[Offset: 0x32c, Size: 4]
	int MaxInstanceCount;//[Offset: 0x330, Size: 4]
	int MaxMaterialAdditiveInstanceCount;//[Offset: 0x334, Size: 4]
	float InitialTraceLenClamp;//[Offset: 0x338, Size: 4]
	FName BlockingTag;//[Offset: 0x340, Size: 8]
	float NormalLimitZ;//[Offset: 0x348, Size: 4]
	float GroundTraceNormalScale_Start;//[Offset: 0x34c, Size: 4]
	float InitialGroundTraceHeightZ;//[Offset: 0x350, Size: 4]
	float ConcurrentGroundTraceHeightZ;//[Offset: 0x354, Size: 4]
	float ProcessedHitLenClamp;//[Offset: 0x358, Size: 4]
	float SphereRadius;//[Offset: 0x35c, Size: 4]
	float SpreadXY;//[Offset: 0x360, Size: 4]
	float SpreadZ;//[Offset: 0x364, Size: 4]
	class TslDamageField* DamageFieldClass;//[Offset: 0x368, Size: 4]
	float DamageTickInterval;//[Offset: 0x36c, Size: 4]
	bool bModifyEffectLifetime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	float InitialEffectLifetime;//[Offset: 0x374, Size: 4]
	float MinEffectLifetimeForStart;//[Offset: 0x378, Size: 4]
	float EffectLifetimeVariation;//[Offset: 0x37c, Size: 4]
	byte[] InterestedSurfaceTypes;//[Offset: 0x380, Size: 12]
	float DamageFieldOffGround;//[Offset: 0x38c, Size: 4]
	bool bMergeTwoBurningGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	SphereComponent*[] BlockerArray;//[Offset: 0x3a4, Size: 12]
	SphereComponent*[] MaterialBlockerArray;//[Offset: 0x3b0, Size: 12]
	TslDamageField*[] DamageFieldArray;//[Offset: 0x3bc, Size: 12]
	STExtraBaseCharacter*[] CharacterInEffectArray;//[Offset: 0x3c8, Size: 12]
	float VehicleWarOverlapCheckInternal;//[Offset: 0x44c, Size: 4]
	int VehicleWarInnerSkillID;//[Offset: 0x450, Size: 4]
	int VehicleWarOuterSkillID;//[Offset: 0x454, Size: 4]
	void TickDamageFields();// 0x380d6a0
	void SetParentGrenade(Actor* Val);// 0x380d628
	void SetMaxMaterialAdditiveInstanceCount(int Val);// 0x380d5b4
	void SetLastImpactVelocity(Vector InVelocity);// 0x380d544
	void SetInitialEffectLifetime(float Val);// 0x380d4d0
	Vector GetSpreadingCenter();// 0x380d488
	Actor* GetParentGrenade();// 0x3585004
	int GetMaxMaterialAdditiveInstanceCount();// 0x380d46c
	float GetInitialEffectLifetime();// 0x380d450
	TslDamageField*[] GetDamageFields();// 0x380d390
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x380d1bc
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x380d070
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x380cf24

--------------------------------
Class: TslDamageField.Actor.Object
	Actor* ParentGrenade;//[Offset: 0x30c, Size: 4]
	void SetParentGrenade(Actor* Val);// 0x380cafc
	Actor* GetParentGrenade();// 0x380cae0

--------------------------------
Class: DamageableActor.UAERegionActor.LuaActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x35ed970
	int GetVehicleDamagedSpeed();// 0x49216cc
	int GetVehicleDamagedCoefficient();// 0x49216cc
	<enum,float> GetTargetDamageRateMap();// 0x35ed7f0
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x35ed66c
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x35ed5e4
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x35ed44c
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x35ed3a0
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x35ed318
	enum[] CPP_GetDamageableGameObjectType();// 0x35ed250
	bool CPP_GetCanBePicked();// 0x35ed220
	FName CPP_GetBulletBlockComponentTag();// 0x35ed1d8
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x35ed12c
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x35ed060
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x35ecf6c
	void BroadcastDamageState(int DState);// 0x35eceb8
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x49216cc
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x49216cc
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x49216cc
	float BP_GetMaxHP();// 0x49216cc
	Vector BP_GetHurtApperanceOffset();// 0x49216cc
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x49216cc
	float BP_GetDamageRateByTarget(Actor* Target);// 0x49216cc
	enum[] BP_GetDamageableGameObjectType();// 0x49216cc
	float BP_GetCurrentHP();// 0x49216cc
	bool BP_GetCanBePicked();// 0x49216cc
	FName BP_GetBulletBlockComponentTag();// 0x49216cc
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x49216cc
	void BP_DamageStateChange(int DState);// 0x49216cc
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x49216cc
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x49216cc

--------------------------------
Class: GameModeParms
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0, Size: 24]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x18, Size: 24]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x30, Size: 24]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x48, Size: 24]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0x60, Size: 24]
	SubSystemConfig SSC_VisualField;//[Offset: 0x78, Size: 24]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x90, Size: 24]
	SubSystemConfig SSC_SuperCold;//[Offset: 0xa8, Size: 24]
	SubSystemConfig SSC_ARWeaponManager;//[Offset: 0xc0, Size: 24]

--------------------------------
Class: SubSystemConfig
	enum SubSystemId;//[Offset: 0x0, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum ConstructType;//[Offset: 0x2, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x4, Size: 4]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x8, Size: 8]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x10, Size: 8]

--------------------------------
Class: DynamicCompConfig
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x32c, Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	int PlayerBornPointID;//[Offset: 0x334, Size: 4]
	bool CheckEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	int CampID;//[Offset: 0x33c, Size: 4]
	int TeamID;//[Offset: 0x340, Size: 4]
	bool IsEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool CreativeModeCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	void SetMarkOccupied();// 0x394cbfc
	void ReSetMarkOccupied();// 0x394cbe8
	bool IsMarkOccupied();// 0x394cbc0

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x320, Size: 8]

--------------------------------
Class: BornPlayerStartData
	int BornPointID;//[Offset: 0x0, Size: 4]
	STExtraPlayerStart*[] PlayerStarts;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameStatisComponent.ActorComponent.Object
	bool IsIngameLikeManagerRevenge(uint64 FriendUID, uint64 OpponentUID);// 0x366cfe4
	void InitTLogDamageToPlayerCount();// 0x366cfd0
	void InitPlayerHatredStatis();// 0x3537a60
	void InitIngameTeammateLabelDamageCheck(float DamgeTriggerMin, float DamgeTriggerMax);// 0x366cf14
	void InitCarryBackDamageStatis();// 0x366cf00
	void InitAchievementDamageCount();// 0x366ceec
	int GetTLogDamageToPlayerCount(uint64 UID);// 0x366ce68
	float GetDamageTakenWhenCarrying(uint64 UID);// 0x366cde4
	float GetDamageTakenWhenBeingCarried(uint64 UID);// 0x366cd60
	float GetDamageTakenAchievement(uint64 UID);// 0x366ccdc
	void ClearDamageTakenWhenCarrying(uint64 UID);// 0x366cc60
	void ClearDamageTakenWhenBeingCarried(uint64 UID);// 0x366cbe4

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x20, Size: 4]
	FString TablePath;//[Offset: 0x24, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x30, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x3c, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x48, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] UAVAirDropBoxGroupConfigs;//[Offset: 0x54, Size: 12]
	AirDropBoxGenerateWrapperItemData[] GetUAVAirDropBoxGenerateDataList(int GroupIndex);// 0x369be40
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x369bc60
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x369ba80
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x369b9c0
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x369b900

--------------------------------
Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0, Size: 12]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0, Size: 4]
	FString CategoryFilter;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0, Size: 4]
	float Radius1;//[Offset: 0x4, Size: 4]
	float Radius3;//[Offset: 0x8, Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float Radius2;//[Offset: 0x10, Size: 4]
	Vector2D[] PolygonPoints;//[Offset: 0x14, Size: 12]
	float BlueCircleRadius;//[Offset: 0x20, Size: 4]
	Vector MapCenter;//[Offset: 0x24, Size: 12]
	float PlaneSpeed;//[Offset: 0x30, Size: 4]
	float PlaneHeight;//[Offset: 0x34, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x38, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x3c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x40, Size: 4]
	bool bCrossCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float CrossCenterRadius;//[Offset: 0x48, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x20, Size: 12]
	GameModeParam[] GameModeParams;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0xbc, Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0xc0, Size: 12]
	<int,SpawnTableData> PawnTableData;//[Offset: 0xcc, Size: 60]
	void InitialItemTable();// 0x35b3440

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0, Size: 4]
	int PawnID;//[Offset: 0x4, Size: 4]
	int PawnPercent;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpawnTableData
	int PawnID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0xd0, Size: 60]
	<enum,SoundConfig> MlAISoundConfig;//[Offset: 0x10c, Size: 60]
	enum[] HearSoundCharacterTypes;//[Offset: 0x148, Size: 12]
	FName SoundTypeKey;//[Offset: 0x158, Size: 8]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x160, Size: 8]
	void SetEnableMlAIPlayerHearSound(bool IsEnable);// 0x34dbba8
	void ProduceSoundInPos(enum soundType, out const Vector Pos, Actor* SourceActor);// 0x34dba98
	void OnProjectileExplode(Actor* Projectile, Actor* Instigator);// 0x34db9dc

--------------------------------
Class: SoundConfig
	float TransDist;//[Offset: 0x0, Size: 4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x379bbc0

--------------------------------
Class: StatueBaseParam
	FString MatPath;//[Offset: 0x0, Size: 12]
	FString TeamFlag;//[Offset: 0xc, Size: 12]
	FString TeamName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: GameModeState.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	float StateTime;//[Offset: 0x80, Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x84, Size: 4]
	GameStateBase* OwningGameState;//[Offset: 0x88, Size: 4]
	void SetLeftTime(int InLeftTime);// 0x3662220
	void ReceiveGotoNextState();// 0x49216cc
	void ReceiveEnter();// 0x49216cc
	int64 GetLeftTime();// 0x36621f8
	void DSExitGame(enum Reason);// 0x3662180

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0xbc, Size: 12]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	void ResetVisibleLevels();// 0x3acaa5c
	void OutSetWorldAlwaysVisible(int SetLoadType);// 0x3aca9e4
	void OutSetLevelVisibleInfo(Vector[] Center, float[] VisibleRadius);// 0x3aca770

--------------------------------
Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig[] AnimalGroupRespawnConfig;//[Offset: 0xbc, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0x140, Size: 8]

--------------------------------
Class: AnimalGroupRespawnConfig
	enum AnimalType;//[Offset: 0x0, Size: 1]
	AnimalGroupRespawnNumProbability[] AnimalGroupRespawnNumProbability;//[Offset: 0x4, Size: 12]
	float NoBlueCircleRadius;//[Offset: 0x10, Size: 4]
	float CheckPlayerRadius;//[Offset: 0x14, Size: 4]
	float EndRespawnTime;//[Offset: 0x18, Size: 4]
	int TryFindSpawnLocNum;//[Offset: 0x1c, Size: 4]
	FString[] ValidTraceActorIncludeName;//[Offset: 0x20, Size: 12]
	Vector AnimalGenerateOffset;//[Offset: 0x2c, Size: 12]
	class STAnimalCharacter* AnimalCharacterClass;//[Offset: 0x38, Size: 40]

--------------------------------
Class: AnimalGroupRespawnNumProbability
	uint32 AnimalNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalCharacter.STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	AnimalStateMutual[] AnimalStateMutuals;//[Offset: 0xd74, Size: 12]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xd84, Size: 4]
	InterpMovementComponent* InterpMovement;//[Offset: 0xd88, Size: 4]
	WidgetComponent* AnimalInfoWidget;//[Offset: 0xd8c, Size: 4]
	Vector RelativeLocation;//[Offset: 0xd90, Size: 12]
	class UserWidget* WidgetClass;//[Offset: 0xd9c, Size: 4]
	bool bUseMediumRegionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda0, Size: 1]
	AnimalAnimListComponent* _AnimListComponent;//[Offset: 0xda4, Size: 4]
	STAnimalAnimInstance* _AnimInstance;//[Offset: 0xda8, Size: 4]
	ProduceDropItemComponent* ProduceDropItemComponent;//[Offset: 0xdac, Size: 4]
	int AnimalGroupID;//[Offset: 0xdb0, Size: 4]
	enum AnimalType;//[Offset: 0xdbe, Size: 1]
	<enum,float> AnimalStateSpeeds;//[Offset: 0xdc0, Size: 60]
	float HearRadius;//[Offset: 0xdfc, Size: 4]
	bool bAttackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe00, Size: 1]
	SkeletalMesh*[] RandomMeshs;//[Offset: 0xe04, Size: 12]
	MaterialInterface*[] RandomMaterials;//[Offset: 0xe10, Size: 12]
	delegate CustomObjectEvent;//[Offset: 0xe1c, Size: 12]
	ParticleSystem* FootPrintRes;//[Offset: 0xe28, Size: 4]
	ParticleSystemComponent* FootPrintParticleSys;//[Offset: 0xe2c, Size: 4]
	FName AttachedSocket;//[Offset: 0xe30, Size: 8]
	float MovementTickInterval;//[Offset: 0xe38, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0xe3c, Size: 4]
	delegate OnAnimalChangeAnimParam;//[Offset: 0xe40, Size: 12]
	void ShowFootPrintEffect(bool IsEnabled);// 0x37ea680
	void SetExtendData(FString Key, int Value);// 0x37ea4dc
	void OnRep_IdleBlendSpaceValue();// 0x37ea4c8
	void LeaveState(enum State);// 0x37ea450
	bool HasState(enum State);// 0x37ea3d0
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x37ea300
	WeatherDetailStatus GetCurrentWeatherStatus();// 0x37ea2b8
	bool EnterState(enum State);// 0x37ea238
	void DisappearOnDeath();// 0x37ea21c
	void ClearOnDeath(Controller* EventInstigator, int DamageType);// 0x357bd30
	void BeforeDestroyed();// 0x37ea200

--------------------------------
Class: STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xcc0, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xcc4, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xcc8, Size: 4]
	float SensedRadius;//[Offset: 0xccc, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xcd0, Size: 4]
	float HeardRadius;//[Offset: 0xcd4, Size: 4]
	float DelayHideDuration;//[Offset: 0xcd8, Size: 4]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcdc, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcdd, Size: 1]
	Vector HurtDir;//[Offset: 0xce0, Size: 12]
	float HurtDistance;//[Offset: 0xcec, Size: 4]
	float HurtResetDefaultTime;//[Offset: 0xcf0, Size: 4]
	StateMutual[] StateMutuals;//[Offset: 0xcfc, Size: 12]
	delegate StateEnterEvent;//[Offset: 0xd08, Size: 12]
	delegate StateLeaveEvent;//[Offset: 0xd14, Size: 12]
	delegate OnDeath;//[Offset: 0xd34, Size: 12]
	SimpleDamageRepData SimpleDamageRepData;//[Offset: 0xd40, Size: 24]
	int[] randomIndexes;//[Offset: 0xd58, Size: 12]
	SimpleAnimListBaseComponent* AnimListComponent;//[Offset: 0xd64, Size: 4]
	STExtraSimpleAnimInstanceBase* AnimInstance;//[Offset: 0xd68, Size: 4]
	byte NetRelevantType;//[Offset: 0xd6c, Size: 1]
	void SetNetRelevantType(byte InType);// 0x3977b58
	void OnRep_SimpleDamageData();// 0x3977b44
	void DisappearOnDeath();// 0x37ea21c
	void CurrentStatesRemove(int State);// 0x3869440
	void CurrentStatesAdd(int State);// 0x3977ac4
	void ClearOnDeath(Controller* EventInstigator, int DamageType);// 0x357bd30
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x39777e8
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3977490
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x39771b4
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3976ed8
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3976bb4
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x39768d8
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x39765fc
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x39762e0
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3975f88
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x49216cc
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x49216cc
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3975e14

--------------------------------
Class: AnimalStateMutual
	enum state1;//[Offset: 0x0, Size: 1]
	enum state2;//[Offset: 0x1, Size: 1]

--------------------------------
Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxMoveSpeed;//[Offset: 0x124, Size: 4]
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	float ScalePower;//[Offset: 0x12c, Size: 4]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float AvoidanceWeight;//[Offset: 0x134, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x138, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x13c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x140, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x144, Size: 4]
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x14c, Size: 12]
	Character* CharacterOwner;//[Offset: 0x158, Size: 4]
	int AvoidanceUID;//[Offset: 0x16c, Size: 4]

--------------------------------
Class: StateMutual
	int state1;//[Offset: 0x0, Size: 4]
	int state2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleDamageRepData
	float Damage;//[Offset: 0x0, Size: 4]
	float CurrentHeath;//[Offset: 0x4, Size: 4]
	bool IsFatalHealthCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Pawn* DamageInstigatorPawn;//[Offset: 0xc, Size: 4]
	Pawn* DamageReceiver;//[Offset: 0x10, Size: 4]
	int NetCounter;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x174, Size: 12]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x180, Size: 4]
	<int,float> moveAnimSpeed;//[Offset: 0x184, Size: 60]
	float PlayMoveDeathMinimumDist;//[Offset: 0x1c0, Size: 4]
	delegate OnAnimLoadedFinished;//[Offset: 0x1c4, Size: 12]
	void SortAnimations();// 0x37b3cec
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x34cc880
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x37b3a68
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x37b39a4

--------------------------------
Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AsyncLoadAnimParams

--------------------------------
Class: STExtraSimpleAnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacterBase* OwnerCharacter;//[Offset: 0x2f0, Size: 4]
	FString OwnerClassPath;//[Offset: 0x304, Size: 12]
	bool EnableAdjustFloorNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	Rotator AdjustFloorRot;//[Offset: 0x320, Size: 12]
	float AdjustFloorDelta;//[Offset: 0x32c, Size: 4]
	void ResetAnimState();// 0x37e99a0
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsHeadShotDamage);// 0x37e96fc
	void OnLeaveState(int State);// 0x37e967c
	void OnEnterState(int State);// 0x36cf0f4
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x37e93f0
	void CacheAnimState(float DeltaSeconds);// 0x36cedd4
	void CacheAnimDataList(bool ForceRefreshVar);// 0x37e9368

--------------------------------
Class: AnimalAnimListComponent.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimalAnimData[] AnimalAnimDatas;//[Offset: 0x1e0, Size: 12]
	AnimalMoveAnimSpeed[] AnimalMoveAnimSpeeds;//[Offset: 0x1ec, Size: 12]

--------------------------------
Class: AnimalAnimData
	enum PoseType;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AnimalMoveAnimSpeed
	enum PoseType;//[Offset: 0x0, Size: 4]
	float Speed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalAnimInstance.STExtraSimpleAnimInstanceBase.AnimInstance.Object
	bool b_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	bool b_Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 1]
	bool b_Trot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x336, Size: 1]
	bool b_Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x337, Size: 1]
	float f_MoveRate;//[Offset: 0x338, Size: 4]
	Vector v_HitVector;//[Offset: 0x33c, Size: 12]
	bool b_IsFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	int RandomIdleBlendSpaceIndex;//[Offset: 0x34c, Size: 4]
	AnimSequence* A_Idle;//[Offset: 0x350, Size: 4]
	AnimMontage* A_Idle_Arder;//[Offset: 0x354, Size: 4]
	AnimSequence* A_MoveAnim_Walk;//[Offset: 0x358, Size: 4]
	AnimSequence* A_MoveAnim_Trot;//[Offset: 0x35c, Size: 4]
	AnimSequence* A_MoveAnim_Run;//[Offset: 0x360, Size: 4]
	BlendSpace* A_HitAnim;//[Offset: 0x364, Size: 4]
	AnimMontage* A_DeadAnim;//[Offset: 0x368, Size: 4]
	AnimMontage* A_FearAnim;//[Offset: 0x36c, Size: 4]
	AnimMontage* A_CuteAnim;//[Offset: 0x370, Size: 4]
	BlendSpace1D* A_Random_Idle;//[Offset: 0x374, Size: 4]
	void ResetAnimState();// 0x37e99a0
	void OnUpdateAnimalAnimParam();// 0x37e998c
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsPointDamage);// 0x37e96fc
	void OnLeaveState(int State);// 0x37e967c
	void OnEnterState(int State);// 0x36cf0f4
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x37e93f0
	void CacheAnimState(float DeltaSeconds);// 0x36cedd4
	void CacheAnimDataList(bool ForceRefreshVar);// 0x37e9368

--------------------------------
Class: ProduceDropItemComponent.LuaActorComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0x150, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0x158, Size: 144]
	int ProduceID;//[Offset: 0x1e8, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x1ec, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x1f4, Size: 12]
	int GridStep;//[Offset: 0x200, Size: 4]
	int StartAngle;//[Offset: 0x204, Size: 4]
	int TotalAngle;//[Offset: 0x208, Size: 4]
	bool bFannedDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	float AngleInterval;//[Offset: 0x210, Size: 4]
	int RadiusIncrement;//[Offset: 0x214, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x218, Size: 4]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	int[] DropPlanIDList;//[Offset: 0x220, Size: 12]
	int[] NightDropPlanIDList;//[Offset: 0x22c, Size: 12]
	int[] DayDropPlanIDList;//[Offset: 0x238, Size: 12]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x244, Size: 4]
	float TombBoxLifeTime;//[Offset: 0x258, Size: 4]
	bool bCheckCriticalDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	AkAudioEvent* CriticalDropAudioEvent;//[Offset: 0x260, Size: 4]
	int CriticalDropCheckPercent;//[Offset: 0x264, Size: 4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x268, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x2a0, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x2d0, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	float startHeight;//[Offset: 0x2d8, Size: 4]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x2e0, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x2e8, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x2f4, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x2f8, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x2fc, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x300, Size: 4]
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x308, Size: 12]
	float TraceGroundPointZOffset;//[Offset: 0x314, Size: 4]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool bHideDeadTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	bool bUseProducerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 1]
	int OpenDropGroundEffect;//[Offset: 0x31c, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x320, Size: 4]
	float MaxTraceDist;//[Offset: 0x324, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	delegate OnItemSpawned;//[Offset: 0x32c, Size: 12]
	delegate OnFinalEffectiveDropRulesGenerated;//[Offset: 0x338, Size: 12]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x344, Size: 4]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	void StartDropWithDropDataByLocation(out const DropPropData[] PropData, Vector Location);// 0x375c918
	void StartDropWithDropData(Actor* DeadCharacter, Controller* Killer, out const DropPropData[] PropData);// 0x375c7c4
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x375c678
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x375c5bc
	void SetProduceID(int ProduceID);// 0x375c548
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x375c3e4
	void SetDropPlanIDList(out int[] IDList);// 0x375c318
	void SetDropItemLifeSpan(int ItemTime);// 0x375c2a0
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x375c0b0
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x375be70
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x375bd00
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x375bbd4
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x375bb3c
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x375ba24
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x375b8c8
	int GetCountStrNum(FString CountStr);// 0x36962d0
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x375b774
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x375b620
	void FannedDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x375b4b0
	PlayerTombBox* DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset, bool bIsAutoExpand, bool bFixBoxName);// 0x375b138
	void DropToTombBox(out const PickUpItemData[] PropData, Character* KillerPawn, Character* DeadPawn);// 0x375aff8
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x375aee0
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x375ac30
	void DropToCommonTreasureBox(Actor* Producer);// 0x3730e9c
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, FString BoxName, enum BoxType, CommonTreasureBox* CommonTreasureBox);// 0x375a950
	void DropOutPropsNearActor(out const DropPropData[] PropDataList, Actor* StartActor);// 0x375a82c
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn);// 0x375a6cc
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList, out DropItemConfig[] FinalEffectiveDropRules);// 0x375a4fc
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x375a3e0

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	bool bUseClientSelfLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	Vector2D RangeHigh;//[Offset: 0xc0, Size: 8]
	Vector CustomStartOffset;//[Offset: 0xc8, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0xd8, Size: 4]
	float CustomGravity;//[Offset: 0xdc, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0xe0, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0xe4, Size: 4]
	float ParticleScale;//[Offset: 0xe8, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0xf0, Size: 40]
	ParticleSystem* RareDropTailsParticle;//[Offset: 0x118, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x140, Size: 4]
	ParticleSystem* RareDropTailsParticleSystem;//[Offset: 0x144, Size: 4]
	<int> RareDropItemSet;//[Offset: 0x148, Size: 60]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x188, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x190, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x1b8, Size: 4]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x1bc, Size: 12]
	CurveFloat* AnimCurve;//[Offset: 0x1c8, Size: 4]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID, bool bRare);// 0x3606520
	void OnDropGroundLoadFinsh();// 0x360650c
	void HandleMonsterRecycled(STExtraSimpleCharacter* Monster);// 0x3606494
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x3606344
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x3606240

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 4]
	float GroupTime;//[Offset: 0x4, Size: 4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float DropDuration;//[Offset: 0x4, Size: 4]
	float CurrentTime;//[Offset: 0x8, Size: 4]
	float DropStartSpeed;//[Offset: 0xc, Size: 4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 4]
	float DelayStartTime;//[Offset: 0x14, Size: 4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 4]
	Vector StartPos;//[Offset: 0x1c, Size: 12]
	Vector EndPos;//[Offset: 0x28, Size: 12]
	Actor* TargetActor;//[Offset: 0x34, Size: 8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x3c, Size: 4]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DropPropData
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
	int DropMode;//[Offset: 0x8, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int KeyID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 4]
	int ItemDropRuleID;//[Offset: 0x4, Size: 4]
	int RandomCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CommonTreasureBox.PlayerTombBox.LuaActor.Actor.Object
	void RegisterToCurveAnimComponent();// 0x35d6390

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x308, Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x34c, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x350, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x36c, Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x3a8, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x3c4, Size: 28]
	float ServerElapsedTime;//[Offset: 0x3e0, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3e9, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3ec, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x3f8, Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x414, Size: 4]
	enum UICountDownType;//[Offset: 0x42a, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 1]
	void StartTransition();// 0x360fa2c
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x360f9b4
	void RPCRequireControl();// 0x360f9a0
	void RPCRequire();// 0x360f98c
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x360f90c
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x34d87f0
	void ReinitInDemoReplay();// 0x360f6a0
	void RefreshWeatherPredictionUI();// 0x360f8f8
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x360f86c
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x360f7e0
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x360f754
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x360f6c8
	void OnRep_NextWeatherCountDownTime();// 0x360f68c
	void OnRep_ControllerDataForReplay();// 0x360f6b4
	void OnRep_ControllerData();// 0x360f6a0
	void OnRep_bEnableWeatherPredictionUI();// 0x360f68c
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x49216cc
	void HandleClientHasReactivated();// 0x360f678
	void GotoSpecificWeather(int WeatherIndex);// 0x360f600
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x360f524
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x360f490
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x360f410
	float GetInProgressElapsedTimeSecWithWeather();// 0x360f3e8
	float GetGlobalWeatherSystemTimeOnServer();// 0x360f3c0
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x360f378
	void ForceStopDynamicWeatherChangeOnServer();// 0x360f364
	void ForceStartNextWeatherChangeOnServer();// 0x360f350
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x360f2a0
	void ClientGotoSpecificWeather(int WeatherIndex);// 0x360f228

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24, Size: 12]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30, Size: 12]
	float TimeMultiplier;//[Offset: 0x3c, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xbc, Size: 12]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xc8, Size: 12]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xd4, Size: 12]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xe0, Size: 12]
	delegate WeatherRecover;//[Offset: 0xec, Size: 12]
	enum DynamicWeatherType;//[Offset: 0xf8, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0xfc, Size: 4]
	CurveFloat* LightCurve;//[Offset: 0x100, Size: 4]
	float TargetLightValue;//[Offset: 0x104, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x10c, Size: 4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x110, Size: 4]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x114, Size: 4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x118, Size: 4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x11c, Size: 4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x120, Size: 4]
	float UINotifyTimeBeforeStart;//[Offset: 0x124, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x128, Size: 12]
	int ChangeStartUINotifyID;//[Offset: 0x134, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x138, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x13c, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x140, Size: 4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x144, Size: 4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x148, Size: 4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x150, Size: 28]
	float RuningDirection;//[Offset: 0x16c, Size: 4]
	float RuningTime;//[Offset: 0x170, Size: 4]
	float LerpTotalTime;//[Offset: 0x174, Size: 4]
	FString WeatherName;//[Offset: 0x178, Size: 12]
	DirectionalLight* MainLight;//[Offset: 0x184, Size: 4]
	SkyLight* SkyLight;//[Offset: 0x188, Size: 4]
	ExponentialHeightFog* Fog;//[Offset: 0x18c, Size: 4]
	WeatherObject ObjectValues;//[Offset: 0x190, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x1f8, Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x264, Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x2cc, Size: 12]
	void UINotifyCallbackOnServer();// 0x360e34c
	void OnUserQualitySettingChanged(int renderlevel);// 0x34b6c34

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	AirDropPathData3D AirDropPathData;//[Offset: 0x44c, Size: 60]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 1]
	Vector BlueCircle;//[Offset: 0x48c, Size: 12]
	Vector WhiteCircle;//[Offset: 0x498, Size: 12]
	float CirclePain;//[Offset: 0x4a4, Size: 4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	Vector AirAttackArea;//[Offset: 0x4ac, Size: 12]
	delegate OnPlayerDamageInfo;//[Offset: 0x4b8, Size: 12]
	delegate OnSimpleCharacterDamageInfo;//[Offset: 0x4c4, Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x4d0, Size: 12]
	delegate OnHideCircle;//[Offset: 0x4dc, Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x4e8, Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x4f4, Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x500, Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x50c, Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x518, Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x524, Size: 12]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x530, Size: 12]
	delegate STExtraCharacterDestroyed;//[Offset: 0x53c, Size: 12]
	int PlayerNum;//[Offset: 0x554, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x55c, Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x568, Size: 12]
	delegate OnGameEnd;//[Offset: 0x574, Size: 12]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x583, Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x586, Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x587, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58b, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58e, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58f, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x590, Size: 12]
	int TrainingCountdownTimer;//[Offset: 0x59c, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x5a4, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x5b4, Size: 12]
	uint64 DSOptimGrayPublishFlags;//[Offset: 0x600, Size: 8]
	delegate OnDSOptimGrayPublishFlagsChanged;//[Offset: 0x608, Size: 12]
	delegate OnDSSwitchChanged;//[Offset: 0x614, Size: 12]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x622, Size: 1]
	FString RoomType;//[Offset: 0x624, Size: 12]
	int nSignalGunEffectId;//[Offset: 0x630, Size: 4]
	byte nServerZoneId;//[Offset: 0x634, Size: 1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x676, Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x677, Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x67c, Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x680, Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x684, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x688, Size: 4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68e, Size: 1]
	delegate OnAirAttack;//[Offset: 0x690, Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x69c, Size: 12]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x6a8, Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5, Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b6, Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x6b8, Size: 12]
	FName[] EnableMapLayers;//[Offset: 0x6c4, Size: 12]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x6d0, Size: 4]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x6d4, Size: 4]
	class ModAdapter* ModAdapterClass;//[Offset: 0x6d8, Size: 4]
	ModAdapter* ModAdapter;//[Offset: 0x6dc, Size: 4]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x6e4, Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x6e8, Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x6f0, Size: 48]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x720, Size: 4]
	bool bIsShowCircleWarningTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	int ReadyStateTime;//[Offset: 0x730, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x750, Size: 12]
	delegate RetriveDataAfterReconnectingDelegate;//[Offset: 0x75c, Size: 12]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x76c, Size: 12]
	int CurCircleWave;//[Offset: 0x778, Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77d, Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x780, Size: 4]
	FName GameModeState;//[Offset: 0x798, Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	float timeFromLessen;//[Offset: 0x7a4, Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x7a8, Size: 12]
	Vector CircleLessenTo;//[Offset: 0x7b4, Size: 12]
	float timeForLessen;//[Offset: 0x7c0, Size: 4]
	byte CurCircleStatusInfo;//[Offset: 0x7d0, Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x7d4, Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x7d8, Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x7dc, Size: 4]
	enum CurAirAttackType;//[Offset: 0x7e0, Size: 1]
	int CurAirAttackWave;//[Offset: 0x7e4, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x7ec, Size: 4]
	float ExtraRadius;//[Offset: 0x7f0, Size: 4]
	int AlivePlayerNum;//[Offset: 0x7f4, Size: 4]
	int AliveTeamNum;//[Offset: 0x7f8, Size: 4]
	int NoneAIGameTime;//[Offset: 0x7fc, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x800, Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x80c, Size: 12]
	delegate OnGetPlayerLandAreaList;//[Offset: 0x818, Size: 12]
	delegate OnUICustomBehavior;//[Offset: 0x824, Size: 12]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x830, Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x834, Size: 12]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0x840, Size: 136]
	enum GameModeType;//[Offset: 0xae8, Size: 1]
	enum GameModeConfigType;//[Offset: 0xae9, Size: 1]
	enum GameModeConfigSubType;//[Offset: 0xaea, Size: 1]
	enum GameModeSubType;//[Offset: 0xaeb, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0xaec, Size: 4]
	int MaxPlayersPerGroupInReadyState;//[Offset: 0xaf0, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0xaf4, Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01, Size: 1]
	int WeatherId;//[Offset: 0xb0c, Size: 4]
	FString WeatherLevel;//[Offset: 0xb10, Size: 12]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1c, Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0xb2c, Size: 4]
	float WeatherPhaseIndex;//[Offset: 0xb30, Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0xb34, Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0xb40, Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0xb4c, Size: 12]
	enum CurDynamicWeatherState;//[Offset: 0xb58, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xb5c, Size: 60]
	float InviteCountDownTime;//[Offset: 0xb98, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xb9c, Size: 12]
	Vector[] CircleArray;//[Offset: 0xba8, Size: 12]
	GameDataMining GameDataMining;//[Offset: 0xbb4, Size: 60]
	uint64 GameID;//[Offset: 0xbf0, Size: 8]
	FString GameModeID;//[Offset: 0xbf8, Size: 12]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xc04, Size: 12]
	FString ModLogicSwitchTag;//[Offset: 0xc10, Size: 12]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xc1c, Size: 12]
	Character* CurCastActorMsgOwner;//[Offset: 0xc28, Size: 8]
	float StartFlyTime;//[Offset: 0xc30, Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xc38, Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xc40, Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xc48, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc62, Size: 1]
	int EnableNewStateMachine;//[Offset: 0xc64, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xc6c, Size: 4]
	float BroadcastClientDistance;//[Offset: 0xc70, Size: 4]
	int[] FinalWinTeams;//[Offset: 0xc8c, Size: 12]
	uint32[] FinalWinPlayers;//[Offset: 0xc98, Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xca4, Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca9, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xcac, Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xcb8, Size: 12]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc4, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc5, Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc6, Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc7, Size: 1]
	FString GuideImageName;//[Offset: 0xcc8, Size: 12]
	FString GuideLuaTableName;//[Offset: 0xcd4, Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0xce0, Size: 12]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcec, Size: 1]
	float PlayerNoOperationTime;//[Offset: 0xcf0, Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0xcf4, Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0xcfc, Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd05, Size: 1]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0xd08, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xd0c, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xd18, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xd24, Size: 12]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xd30, Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xd40, Size: 4]
	class Actor* PreloadPoolActorClass;//[Offset: 0xd48, Size: 40]
	class Actor* CommonPreloadPoolActorClass;//[Offset: 0xd70, Size: 40]
	FString CommonPrePoolActorPath;//[Offset: 0xd98, Size: 12]
	<FString,ActorExtraComponents> ActorExtraComponents;//[Offset: 0xda4, Size: 60]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0xde0, Size: 4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0xde4, Size: 4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde8, Size: 1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde9, Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0xdec, Size: 12]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf8, Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0xdfc, Size: 12]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08, Size: 1]
	FString FServerStartTime;//[Offset: 0xe0c, Size: 12]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	uint32 ServerStartTimestamp;//[Offset: 0xe1c, Size: 4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0xe20, Size: 12]
	FString MainWeaponTableName;//[Offset: 0xe2c, Size: 12]
	class Object[] PlaneAvatarClassArray;//[Offset: 0xe38, Size: 12]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0xe58, Size: 60]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0xe94, Size: 60]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0xed0, Size: 4]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0xed4, Size: 4]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed9, Size: 1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeda, Size: 1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedb, Size: 1]
	int PlayerAddonCount;//[Offset: 0xedc, Size: 4]
	STExtraBaseCharacter*[] DyingCharacters;//[Offset: 0xee8, Size: 12]
	bool bEnableCarryAllCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef4, Size: 1]
	MapUIMarkManager* MarkMgr;//[Offset: 0xef8, Size: 4]
	FString RenderTargetMgrClassPath;//[Offset: 0xefc, Size: 12]
	WidgetToRenderTarget* RenderTargetMgr;//[Offset: 0xf08, Size: 4]
	GameStateWeaponRule WeaponRule;//[Offset: 0xf0c, Size: 32]
	bool bHasUnderEarthWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2c, Size: 1]
	<uint32,EmotePlayer> LocalEmotePlayerList;//[Offset: 0xf30, Size: 60]
	ReplayRecordInfo* ReplayRecordInfo;//[Offset: 0xf6c, Size: 4]
	ParallelWorldDebugSummary ParallelWorldDebugSummary;//[Offset: 0xf70, Size: 20]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x49216cc
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x49216cc
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x38d2928
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x38d271c
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x38d2394
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x38d21d0
	STExtraPlayerState* TryGetOneRealPlayerState();// 0x38d21a8
	STExtraBaseCharacter* TryGetCharacterByPlayerKey(FString PlayerKey);// 0x38d2048
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x38d1f64
	void SimulateAirAttackOver(int waveIndex);// 0x38d1eb0
	void ShowGameTips(int PlayerKey, int TipsID, FString Params);// 0x38d1d6c
	void SetTagCulling(bool IsUse);// 0x3597804
	void SetStandAloneIDSwitch(const int SwitchId, const FString bOpen);// 0x38d1bcc
	void SetServerStartTime(uint32 nServerStartTime);// 0x38d1b54
	void SetSendStartFlow(uint32 PlayerKey);// 0x38d1adc
	void SetSendEndFlow(uint32 PlayerKey);// 0x38d1a64
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x38d1968
	static void SetOnGameStateEndPlay(delegate InOnGameStateEndPlay);// 0x38d18cc
	static void SetOnGameStateBeginPlay(delegate InOnGameStateBeginPlay);// 0x38d1830
	void SetIsLowMatch(int nClientType);// 0x38d17b8
	void SetCustomRoute(out const Vector2D StartPoint, out const Vector2D EndPoint);// 0x38d16e0
	void SetCurAirAttackWave(int AirAttackWave);// 0x38d1668
	void SetCurAirAttackType(enum airattacktype);// 0x38d15f0
	void SetCircleLessening(bool IsLessing);// 0x38d1574
	void SetCircleInfo(GetCircleInfo ReConnectInfo);// 0x38d1468
	void SetAvatarDownloadInBattleClientSwitch(bool bOpen);// 0x38d13e8
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x38d1370
	void ServerRemoteDestroyAllActor();// 0x38d135c
	void ServerRemoteDestroyActor(int SingleId);// 0x38d12e4
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x38d1188
	void RPC_Client_RemoteDestroyAllActor();// 0x38d116c
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x38d10ec
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x38d0f58
	void RoomTypeChanged();// 0x38d0f3c
	void PlayPawnActive(FString PlayerKey, Actor* PlayerCharacter);// 0x38d0d98
	void OnSimpleCharacterTakeDamage(STExtraBaseCharacter* Attacker, Actor* DamageCauser, STExtraSimpleCharacter* VictimSimpleCharacter, float Damage, out const DamageEvent DamageEvent, bool bIsFatalHealthCost, bool IsHeadshot);// 0x38d0b40
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x49216cc
	void OnRep_WeatherStateChanged();// 0x38d0b2c
	void OnRep_WeatherLevel();// 0x38d0b18
	void OnRep_WeatherId();// 0x38d0b04
	void OnRep_VisualFieldFeatureParam();// 0x38d0af0
	void OnRep_VeteranRecruitListUpdate();// 0x38d0adc
	void OnRep_UpassInfoList();// 0x38d0ac8
	void OnRep_StartFlyTime();// 0x38d0ab4
	void OnRep_RoomType();// 0x38d0aa0
	void OnRep_ResetWeatherPlaySpeed();// 0x38d0a8c
	void OnRep_ReplicatedWorldTimeSeconds();// 0x3602438
	void OnRep_ReadyStateTime();// 0x376a654
	void OnRep_ReadyStateCountingDown();// 0x34f4004
	void OnRep_PlayerNumChange();// 0x34f4004
	void OnRep_PlayerAddonCount();// 0x38d0a70
	void OnRep_MarkSyncData();// 0x38d0a5c
	void OnRep_IsTrainingMode();// 0x38d0a48
	void OnRep_IsShowDeadBox();// 0x38d0a34
	void OnRep_IsOpenDuelMode();// 0x34f4004
	void OnRep_IsFPPMode();// 0x38d0a20
	void OnRep_IsDark();// 0x38d0a0c
	void OnRep_GameTerminatorPlayerKey();// 0x38d09f8
	void OnRep_GameModeType();// 0x38d09e4
	void OnRep_GameModeSubType();// 0x38d09d0
	void OnRep_GameModeState();// 0x38d09b4
	void OnRep_GameModeFeatureSet();// 0x34f4004
	void OnRep_FinalWinTeams();// 0x34f4004
	void OnRep_FinalWinPlayers();// 0x34f4004
	void OnRep_DynamicWeatherState();// 0x38d09a0
	void OnRep_DSSwitch();// 0x38d098c
	void OnRep_DSOptimGrayPublishFlags();// 0x38d0978
	void OnRep_CircleWaveChanged();// 0x38d095c
	void OnRep_CircleArray();// 0x34f4004
	void OnRep_AliveTeamNum();// 0x38d0948
	void OnRep_AlivePlayerNum();// 0x38d0934
	void OnRep_AirDropPathData();// 0x38d0920
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x376a568
	void OnPlaneAvatarAsyncLoadComplete(out class Object[] ClassArrays);// 0x38d0854
	void OnGameStateEndPlay__DelegateSignature(byte EndPlayReason);// 0x49216cc
	void OnGameStateBeginPlay__DelegateSignature(GameState* GameState);// 0x49216cc
	void OnGameModeDisplayNameChange();// 0x38d0840
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x376a050
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage, out const DamageEvent DamageEvent, float DamageBeforeCalArmor, bool bIsFatalHealthCost, Actor* DamageCauser, bool bIsNearDeathHealthCost);// 0x3769dac
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x38d0784
	bool IsSendStartFlow(uint32 PlayerKey);// 0x38d0704
	bool IsSendEndFlow(uint32 PlayerKey);// 0x38d0684
	bool IsRevivalGame();// 0x38d065c
	bool IsPVEMode();// 0x38d0634
	bool IsNoCircleInfo();// 0x38d060c
	bool IsMapUseTeamPattern();// 0x38d05dc
	bool IsInWhiteCircle(out const Vector Pos);// 0x38d0550
	bool IsInNight();// 0x35894c0
	bool IsInBlueCircleByCircleMgr(Actor* _actor);// 0x38d04d0
	bool IsInBlueCircle(out const Vector Pos);// 0x38d0444
	bool IsFeatureSupported(enum SubSystemType);// 0x38d03bc
	bool IsEnableObjectPool();// 0x38bf670
	bool IsEnableDamageInfo();// 0x37bc07c
	bool IsCreativeEditor();// 0x35894f0
	FString GetWeatherLevelName();// 0x38d02fc
	int GetWeatherID();// 0x38d02d4
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x38d02ac
	int GetServerStartUnixTimestamp();// 0x38d0284
	FString GetServerStartTime();// 0x38d01c4
	float GetRepServerWorldTimeSeconds();// 0x38d019c
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x38d0138
	int GetPVEWeatherPhaseIndex();// 0x38d0110
	STExtraPlayerState* GetPlayerStateByUID(uint64 PlayerUID);// 0x38d008c
	STExtraPlayerState* GetPlayerStateByPlayerName(FString PlayerName);// 0x38cffc8
	STExtraPlayerState* GetPlayerStateByPlayerKey(uint32 PlayerKey);// 0x38cff48
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x38cff20
	bool GetIsReadyStateReport();// 0x38cfef0
	bool GetIsCreative();// 0x38cfec0
	FName GetGameModeState();// 0x38cfe80
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x38cfe58
	FString GetDSSwitchValueFastWithCache(const int InSwitchId);// 0x38cfd50
	FString GetDSSwitchValue(const int InSwitchId);// 0x38cfc48
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x38cfc20
	enum GetCurWeatherState();// 0x38cfbf8
	enum GetCurDynamicWeatherState();// 0x38cfbd0
	int GetCurCircleWave();// 0x38cfbb4
	byte GetCurCircleState();// 0x38cfb74
	int GetCurCircleIndex();// 0x38cfb4c
	GetCircleInfo GetCircleStateInfo();// 0x38cfac0
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x38cfa14
	MarkSyncData[] GetAllMarkLocalData(byte _TYPE);// 0x38cf968
	int GetAlivePlayerNum();// 0x38cf940
	AirDropPathData3D GetAirDropPathData();// 0x38cf7a4
	STExtraBaseCharacter* FindCharacterByPlayerKey(FString PlayerKey);// 0x38cf644
	void ExecuteCVarConfig();// 0x38cf630
	void EnableObjectPool(bool bEnable);// 0x38cf5b0
	void DSSwitchChangeDelegate__DelegateSignature();// 0x49216cc
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x38cf4ec
	void ClearAirDropPathData();// 0x38cf4d8
	bool CheckIsLowMatch();// 0x38cf4b0
	void CheckInitLuaRemoteEvent();// 0x38cf49c
	bool CheckDSSwitchOpen(const int SwitchId);// 0x38cf414
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x37d69a4
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x38cf39c
	void ChangeDynamicWeatherState(enum DayState);// 0x38cf324
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x38cf21c
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x38cf008
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x38cee3c
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x38cec70
	void BroadcastTemporaryMessage(FString Message);// 0x38cebac
	void BroadcastShowGameTips(int TipsID, FString Params);// 0x38ceaa4
	void BroadcastLuaTipsBehaviorWithTime(FString BehaviorTag, int ID, FString Params1, FString Params2, float ControlTime);// 0x38ce848
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x38ce634
	void BroadcastEndCircle();// 0x38ce5d8
	void BroadcastCustomLuaTipsBehavior(FString BehaviorTag, int ID, const byte[] ExpandDataContent);// 0x38ce44c
	void BroadcastCircleWaveOver(int Index);// 0x38ce398
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain, bool IsCustomCircle);// 0x38ce084
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex, enum State);// 0x38cde6c
	void BroadcastAirAttackWarning(const Vector AirAttackAreaSrc, int waveIndex);// 0x38cddb0
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackAreaSrc, int waveIndex);// 0x38cdbdc
	void AsyncLoadResFinishCallback();// 0x38cdbc8
	void AsyncLoadCommonResFinishCallback();// 0x38cdbb4
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x3768758
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x3768694
	void AddPveZombieGrenadeCount(int Value);// 0x38cdb3c
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x38cdac4
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x376838c

--------------------------------
Class: UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x428, Size: 12]
	FString DamageSearchTableName;//[Offset: 0x434, Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x409f3e4
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x409f2a8
	bool CheckDSSwitchOpen(const int SwitchId);// 0x38cf414

--------------------------------
Class: LuaGameState.GameState.GameStateBase.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x39c, Size: 60]
	FString LuaFilePath;//[Offset: 0x3d8, Size: 12]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x338, Size: 8]
	FName PreviousMatchState;//[Offset: 0x340, Size: 8]
	int ElapsedTime;//[Offset: 0x348, Size: 4]
	void OnRep_MatchState();// 0x64eab98
	void OnRep_ElapsedTime();// 0x64eace0

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x1c, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector MapCenter;//[Offset: 0x2c, Size: 12]
	float Radius;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ViewMaskManager.Object
	enum ViewMaskTypeSetting;//[Offset: 0x1c, Size: 1]
	class Actor[] FilterActorClassList;//[Offset: 0x20, Size: 12]
	void SetViewMaskType(enum NewMaskType);// 0x3a90e50
	bool IsPlayerViewMaskValid(STExtraBaseCharacter* BaseCharacter);// 0x3a90dd0
	void Init();// 0x3a90dbc
	int ClearViewMaskForActor(Actor* MaskActor);// 0x3a90d3c
	int ApplyViewMaskForPlayer(STExtraBaseCharacter* BaseCharacter);// 0x3a90cbc
	int ApplyViewMaskForActorWithOwnerPlayer(Actor* MaskActor, STExtraBaseCharacter* BaseCharacter);// 0x3a90bf8

--------------------------------
Class: ModAdapter.Object
	Actor* SpawnPointLightActor(ModAdapterSpawnInfo SpawnInfo);// 0x36c98a0
	Actor* SpawnModActorByClass(class Actor ActorClass, out const Transform SpawnTransform, Pawn* Instigator, Actor* Owner);// 0x36c96f0

--------------------------------
Class: ModAdapterSpawnInfo
	Actor* RelatedActor;//[Offset: 0x0, Size: 4]
	FName LightType;//[Offset: 0x8, Size: 8]
	Transform SpawnTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14, Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x18, Size: 12]
	class Character[] ExcludeCheckCharacterClass;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x50, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x58, Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x94, Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xd0, Size: 8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	int updateTime;//[Offset: 0xc, Size: 4]
	int upassLevel;//[Offset: 0x10, Size: 4]
	int upassScore;//[Offset: 0x14, Size: 4]
	int planeAvatarId;//[Offset: 0x18, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	FString iconUrl;//[Offset: 0x20, Size: 12]
	FString Nation;//[Offset: 0x2c, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38, Size: 52]
	int upassKeepBuy;//[Offset: 0x6c, Size: 4]
	int upassCurValue;//[Offset: 0x70, Size: 4]
	int pass_type;//[Offset: 0x74, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x78, Size: 4]
	FString PlayerUID;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24, Size: 12]
	GameWatchReport[] WatchReport;//[Offset: 0x30, Size: 12]

--------------------------------
Class: GameWatchReport
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	uint64 player_uid;//[Offset: 0x10, Size: 8]
	float total_time;//[Offset: 0x18, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: WatchFlow
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	byte CurrentInstanceCount;//[Offset: 0xf8, Size: 1]
	byte CurrentLocalInstanceCount;//[Offset: 0xf9, Size: 1]
	MarkDispatchAction[] ActionQueue;//[Offset: 0xfc, Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0x108, Size: 12]
	MarkDispatchAction[] FramingDispatchMarkQueue;//[Offset: 0x114, Size: 12]
	int MarkCountProcessed;//[Offset: 0x120, Size: 4]
	int OverflowFrameCount;//[Offset: 0x124, Size: 4]
	void SetMarkCountDown(out MarkDispatchAction Data, float CountDown);// 0x36b9f08
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x36b9e90
	byte GenerateNewLocalInstanceID();// 0x36b9e68
	byte GenerateNewInstanceID();// 0x36b9e44
	void DispatchMarkData(MarkDispatchAction Data);// 0x36b9c8c
	void ClearMarkDataByTypeID(int TypeId, enum MarkTypeIDClearType, STExtraPlayerState* WeakPlayerState);// 0x36b9b8c

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4, Size: 68]
	float DispatchDelayTime;//[Offset: 0x48, Size: 4]
	float RangeRad;//[Offset: 0x4c, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x50, Size: 8]
	float DispatchTime;//[Offset: 0x58, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x60, Size: 16]

--------------------------------
Class: ActorExtraComponents
	class ActorComponent[] BPComponents;//[Offset: 0x0, Size: 12]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0xbc, Size: 60]
	float EventCDTime;//[Offset: 0xf8, Size: 4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x3ad28d0

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c, Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28, Size: 12]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x36414fc
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x364147c
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x36413a8
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x3641330
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x49216cc
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x49216cc

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0xbc, Size: 12]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0xc8, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0xcc, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	enum FieldOfViewNotificationStatus;//[Offset: 0xd8, Size: 1]
	bool IsNotificationWorking();// 0x3640f74
	static int IsGlobalDebugLineTraceDrawn();// 0x3640f48
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x49216cc
	enum GetFieldOfViewNotificationStatus();// 0x3640f20

--------------------------------
Class: GameModeCVarConfigItem
	FString Key;//[Offset: 0x0, Size: 12]
	FString Value;//[Offset: 0xc, Size: 12]

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x320, Size: 12]
	float DamageFieldUpdatePeriod;//[Offset: 0x384, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x388, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x39d17c4
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x39d16b4
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x35bdb94
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* Receiver, bool RebuildSphere);// 0x39d151c

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 4]
	SimpleCollisionSphere Sphere;//[Offset: 0x4, Size: 16]
	float PassedTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	float Radius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: MapUIMarkManager.LuaActorComponent.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0x17c, Size: 12]
	class ScreenMarkManager* ScreenMarkMgrClass;//[Offset: 0x188, Size: 4]
	class ScreenRotationMarkManager* ScreenRotationMarkMgrClass;//[Offset: 0x18c, Size: 4]
	MapUIBase* m_pMiniMap;//[Offset: 0x190, Size: 4]
	MapUIBase* m_pEntireMap;//[Offset: 0x194, Size: 4]
	ScreenMarkManager* m_ScreenMarkManager;//[Offset: 0x198, Size: 4]
	ScreenRotationMarkManager* m_ScreenRotationMarkManager;//[Offset: 0x19c, Size: 4]
	int[] CurMarkInstList;//[Offset: 0x1a0, Size: 12]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x224, Size: 12]
	delegate OnMiniMapPointerException;//[Offset: 0x230, Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x23c, Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0x240, Size: 4]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x270, Size: 12]
	float TickRate_Internal;//[Offset: 0x29c, Size: 4]
	float TickRate_Callback;//[Offset: 0x2a0, Size: 4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x2a4, Size: 60]
	void RemoveExternMiniMapUI(MapUIBase* MiniMapUI);// 0x36bf65c
	void RemoveExternEntireMapUI(MapUIBase* EntireMapUI);// 0x36bf5e4
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x36bf47c
	void OnShowOrHideLegendMarkWidget(FString Tag, bool bIsShow);// 0x36bf2d4
	void OnMiniMapPointerExceptionDelegate__DelegateSignature();// 0x49216cc
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x49216cc
	void AddExternMiniMapUI(MapUIBase* MiniMapUI);// 0x36bf25c
	void AddExternEntireMapUI(MapUIBase* EntireMapUI);// 0x36bf1e4

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 4]
	FString UIBPSoftPtr;//[Offset: 0x4, Size: 12]
	FString UIDescription;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ScreenMarkManager.LuaObject.Object
	<int,ScreenMarkGroupData> ScreenMarkGroupMap;//[Offset: 0x70, Size: 60]
	<FString,ScreenMarkPriorityGroup> ScreenMarkPriorityGroupMap;//[Offset: 0xac, Size: 60]
	bool bDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bUseLuaWorldOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	Vector2D LimitXY;//[Offset: 0xec, Size: 8]
	Vector2D LimitZW;//[Offset: 0xf4, Size: 8]
	Vector2D UIOffset;//[Offset: 0xfc, Size: 8]
	byte[] CheckObjectTypes;//[Offset: 0x104, Size: 12]
	ActorVectorPair[] ActorVectorHeapToBind;//[Offset: 0x238, Size: 12]
	ActorVectorPair[] ActorVectorArrayToUnBind;//[Offset: 0x244, Size: 12]
	void UpdateScreenMarkState(int TypeId, int InstanceID, out const CustomMarkEventData EventData);// 0x3797ee8
	void UpdateBindingWidgetByPanel(int ID);// 0x3797e70
	void UpdateBindingLocationWidget(int ID);// 0x3797df8
	void UpdateBindingActorWidget(int ID);// 0x3797d80
	void ResetGroupQueryTime(out ScreenMarkGroupData GroupData);// 0x3797c60
	void RemoveScreenMark(int TypeId, int InstanceID);// 0x3797ba4
	bool RemoveBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x3797ae0
	void ReleaseGroupByID(int ID);// 0x3797a68
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x37979a4
	bool PushScreenMark(int InstanceID, out const MarkSyncData MarkData);// 0x3797804
	void OnLocationUnbindUI(Widget* BindWidget, int ID);// 0x3797740
	void OnLocationBindUI(Widget* BindWidget, int ID);// 0x362d630
	void OnInitMarkGroupData(int ID);// 0x3519384
	void OnInit();// 0x3797724
	void OnActorUnbindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x379761c
	void OnActorBindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x3797514
	bool IsInBindingRange(out const Vector PlayerToCharacter, int ID);// 0x3797440
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x3797374
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x37972b0
	Widget* FetchUI(int ID);// 0x3797230
	void ClearMarkGroupByTypeID(int ID);// 0x37971b8
	bool CheckShouldShow(Actor* Actor, out const ScreenMarkGroupData GroupData);// 0x379704c
	bool CheckGroupNeedExist(int TypeId);// 0x3796fcc
	bool AddBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x3796f08

--------------------------------
Class: ScreenMarkGroupData
	ScreenMarkGroupConfig Config;//[Offset: 0x0, Size: 120]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x78, Size: 4]
	<int,ScreenMarkInstanceData> MarkInstanceDataMap;//[Offset: 0x7c, Size: 60]
	Widget*[] HidingUIArr;//[Offset: 0xb8, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0xc4, Size: 12]
	<int,Widget*> MarkBindingUIMap;//[Offset: 0xd0, Size: 60]
	UAEUserWidget* ScreenMarkPanel;//[Offset: 0x114, Size: 4]
	CanvasPanel* AddToPanel;//[Offset: 0x118, Size: 4]
	Actor*[] IgnoreBlockArr;//[Offset: 0x11c, Size: 12]

--------------------------------
Class: ScreenMarkGroupConfig
	int MaxWidgetNum;//[Offset: 0x0, Size: 4]
	float MaxShowDistance;//[Offset: 0x4, Size: 4]
	float MinShowDistance;//[Offset: 0x8, Size: 4]
	float UpdateBindingInterval;//[Offset: 0xc, Size: 4]
	float UpdateBindingIntervalMax;//[Offset: 0x10, Size: 4]
	float ReduseBindingVelocityThreshold;//[Offset: 0x14, Size: 4]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bIsUpdatedByPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bBindOutScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bBindBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	int[] ExtraCheckObjectTypes;//[Offset: 0x1c, Size: 12]
	class Actor[] ExtraCheckClasses;//[Offset: 0x28, Size: 12]
	FString UIPathName;//[Offset: 0x34, Size: 12]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	FName SkeletaSocketName;//[Offset: 0x48, Size: 8]
	Vector WorldPositionOffset;//[Offset: 0x50, Size: 12]
	Vector2D UIOffset;//[Offset: 0x5c, Size: 8]
	bool bNeedUpdateState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	FString PriorityGroupTag;//[Offset: 0x68, Size: 12]
	byte Priority;//[Offset: 0x74, Size: 1]
	bool bNeedOBShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bNeedReplayShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: UIDuplicatedItemPool.Object
	delegate OnAsyncFinishedDelegate;//[Offset: 0x38, Size: 12]
	bool bActiveItemListHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	FString[] TagArray;//[Offset: 0x48, Size: 12]
	FString ItemBPClassPath;//[Offset: 0x54, Size: 12]
	class Object* ItemClass;//[Offset: 0x60, Size: 4]
	UserWidget*[] UsedItemList;//[Offset: 0x64, Size: 12]
	UserWidget*[] IdleItemList;//[Offset: 0x70, Size: 12]
	UserWidget*[] IdleItemListHold;//[Offset: 0x7c, Size: 12]
	void RemoveTagFromItemPool(FString TagName);// 0x3a24ee8
	void RemoveAllTagFromItemPool();// 0x3a24ed4
	void RecycleUnusedItem();// 0x3a24ec0
	void RecycleAllItems();// 0x3a24eac
	void OnAsyncLoadWidgetFinished(UserWidget* Widget, int InstID);// 0x3a24df0
	bool ItemPoolHasTag(FString TagName);// 0x3a24d2c
	bool ItemPoolHasOneTagAtLeast(out const FString[] TagNameList);// 0x3a24bf0
	bool ItemPoolHasAllTag(out const FString[] TagNameList);// 0x3a24ab4
	void InitItemPool(FString ClassPath, int DefaultItemCounts, bool bAsync);// 0x3a24968
	UserWidget* GetOneItem();// 0x3a24940
	void GetAllUsedItem(out UserWidget*[] ItemList);// 0x3a24874
	void GetAllTagFromItemPool(out FString[] tagList);// 0x3a24740
	void FreeOneItem(UserWidget* IdleItem);// 0x3a246c8
	void AddTagToItemPool(FString TagName);// 0x3a2460c
	void AddMultiTagToItemPool(out const FString[] TagNameList);// 0x3a244d8

--------------------------------
Class: ScreenMarkInstanceData
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	int CustomInt;//[Offset: 0x14, Size: 4]
	float CustomFloat;//[Offset: 0x18, Size: 4]
	FString CustomString;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x58339a4
	bool GetDontPaintWhenChildEmpty();// 0x583397c
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x58338fc

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	int ZOrder;//[Offset: 0x50, Size: 4]
	void SetZOrder(int InZOrder);// 0x58345f4
	void SetSupportNotch(bool InSupportNotch);// 0x5834574
	void SetSize(Vector2D InSize);// 0x5834504
	void SetPosition(Vector2D InPosition);// 0x5834494
	void SetOffsets(Margin InOffset);// 0x583440c
	void SetMinimum(Vector2D InMinimumAnchors);// 0x583439c
	void SetMaximum(Vector2D InMaximumAnchors);// 0x583432c
	void SetLayout(out const AnchorData InLayoutData);// 0x5834294
	void SetAutoSize(bool InbAutoSize);// 0x5834214
	void SetAnchors(Anchors InAnchors);// 0x583418c
	void SetAlignment(Vector2D InAlignment);// 0x583411c
	int GetZOrder();// 0x58340f4
	Vector2D GetSize();// 0x58340b4
	Vector2D GetPosition();// 0x5834074
	Margin GetOffsets();// 0x5834030
	AnchorData GetLayout();// 0x5833fdc
	bool GetAutoSize();// 0x5833fb4
	Anchors GetAnchors();// 0x5833f70
	Vector2D GetAlignment();// 0x5833f30
	bool GeSupportNotch();// 0x5833f08

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ScreenMarkPriorityGroup
	int MaxShowNum;//[Offset: 0x0, Size: 4]
	int CurShowNum;//[Offset: 0x4, Size: 4]
	int[] GroupTypeArray;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ActorVectorPair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]
	int InstanceID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ScreenRotationMarkManager.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	<int,ScreenRotationMarkGroupData> ScreenRotationMarkGroupMap;//[Offset: 0x6c, Size: 60]
	Vector PlayerLoc;//[Offset: 0xa8, Size: 12]
	Vector PlayerDir;//[Offset: 0xb4, Size: 12]
	class Widget* ImageType;//[Offset: 0x1bc, Size: 4]
	void UpdateBindingLocationWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x3799a88
	void UpdateBindingLocationWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x3799914
	void UpdateBindingActorWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x37997a0
	void UpdateBindingActorWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x379962c
	void UnbindLocation(out const Vector BingdingLoction, int ID);// 0x3799560
	void UnbindActor(Actor* BindingObject, int ID);// 0x37994a4
	void ReleaseGroupByID(int ID);// 0x379942c
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x3799368
	void OnInit();// 0x3799354
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x3799288
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x37991c4
	Widget* FetchUI(int ID, out ScreenRotationMarkGroupData GroupData);// 0x3799048
	enum CheckWidgetDisAndAngleValid(Vector TargetLoc, out ScreenRotationMarkGroupData GroupData, out float Angle, out float Distance);// 0x3798e20
	bool BindToLoc(out const Vector BingdingLoction, int ID);// 0x3798d4c
	bool BindToActor(Actor* BindingObject, int ID);// 0x3798c88

--------------------------------
Class: ScreenRotationMarkGroupData
	ScreenRotationMarkConfig Config;//[Offset: 0x0, Size: 72]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x48, Size: 4]
	Actor*[] WorldObjectArr;//[Offset: 0x4c, Size: 12]
	Vector[] WorldLocationArr;//[Offset: 0x58, Size: 12]
	Widget*[] HidingUIArr;//[Offset: 0x64, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0x70, Size: 12]
	<Actor*,Widget*> BindingActorUIMap;//[Offset: 0x7c, Size: 60]
	<Vector,Widget*> BindingLocationUIMap;//[Offset: 0xb8, Size: 60]
	CanvasPanel* RootPanel;//[Offset: 0xf4, Size: 4]

--------------------------------
Class: ScreenRotationMarkConfig
	ScreenRotationRangeValue DistanceRange;//[Offset: 0x0, Size: 16]
	ScreenRotationRangeValue AngleRange;//[Offset: 0x10, Size: 16]
	Actor* BindActor;//[Offset: 0x20, Size: 8]
	FString UIPathName;//[Offset: 0x28, Size: 12]
	float AngleOffset;//[Offset: 0x34, Size: 4]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float UpdateBindingInterval;//[Offset: 0x3c, Size: 4]
	int DefaultNum;//[Offset: 0x40, Size: 4]
	float Radius;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ScreenRotationRangeValue
	float MaxValue;//[Offset: 0x0, Size: 4]
	bool IsCloseOutMaxValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float MinValue;//[Offset: 0x8, Size: 4]
	bool IsCloseInMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: MapUIBase.Object
	delegate OnSetupUIMarkRoot;//[Offset: 0x1c, Size: 12]
	delegate OnUpdateMark;//[Offset: 0x28, Size: 12]
	delegate OnUpdateMultiMark;//[Offset: 0x34, Size: 12]
	delegate OnRepositionItemOnMap;//[Offset: 0x40, Size: 12]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x4c, Size: 4]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x50, Size: 12]
	<FString,CanvasPanel*> DynamaicCustomPanelMap;//[Offset: 0x5c, Size: 60]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x98, Size: 60]
	<int,MapImageMarkData> AllImageMarks;//[Offset: 0xd4, Size: 60]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bRepositionMarkerAndPinDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	int UpdateMarkFreq;//[Offset: 0x24c, Size: 4]
	Vector LevelLandScapeCenterC;//[Offset: 0x250, Size: 12]
	Vector2D SelfMarkerAligmentC;//[Offset: 0x25c, Size: 8]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x264, Size: 12]
	float TickRate_Internal;//[Offset: 0x278, Size: 4]
	float TickRate_Callback;//[Offset: 0x27c, Size: 4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x280, Size: 60]
	int[] CurMarkInstList;//[Offset: 0x2bc, Size: 12]
	CanvasPanel* CanvasPanel_ShowAirPlaneRoute;//[Offset: 0x304, Size: 4]
	bool bIsShowAirPlaneRouteAfteHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0x30c, Size: 12]
	FakeRadiationCircle* InnerCircle;//[Offset: 0x318, Size: 4]
	float ImageBlueCircleScale;//[Offset: 0x31c, Size: 4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x320, Size: 240]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x410, Size: 240]
	MapDataBase* CurrentMapData;//[Offset: 0x500, Size: 8]
	UserWidget* BindWidget;//[Offset: 0x508, Size: 8]
	MapObjct* ParentMapObject;//[Offset: 0x510, Size: 8]
	Vector LandscapeCenterCpp;//[Offset: 0x518, Size: 12]
	float LevelToMapScaleC;//[Offset: 0x524, Size: 4]
	float MapScaleCpp;//[Offset: 0x528, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x52c, Size: 8]
	float MapScalingRadio;//[Offset: 0x534, Size: 4]
	int LocalPlayerIndexC;//[Offset: 0x538, Size: 4]
	float MapImageExtentC;//[Offset: 0x53c, Size: 4]
	float MapWindowExtentC;//[Offset: 0x540, Size: 4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 1]
	bool bNeedDrawSelfGuideLineOutC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 1]
	LinearColor GuideLineColor;//[Offset: 0x548, Size: 16]
	LinearColor WhiteCircleColorC;//[Offset: 0x558, Size: 16]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	float GuideLineDashSizeC;//[Offset: 0x56c, Size: 4]
	float DefaultLineThicknessC;//[Offset: 0x570, Size: 4]
	bool bNeedDrawWhiteCircleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool bNeedDrawCircleGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	Vector2D MapAdjustLocation;//[Offset: 0x578, Size: 8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x580, Size: 8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x588, Size: 8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x590, Size: 8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	int AirDropIndex;//[Offset: 0x59c, Size: 4]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x5a4, Size: 8]
	void UpdateUIMarkBinding();// 0x36bc228
	void UpdatePlayersLocAndRotC(STExtraPlayerController* STEPC, STExtraPlayerState* STEPS, STExtraGameStateBase* STEGS);// 0x350fa60
	void UpdateMultiMarkC(int Index, out const Vector2D[] MultiMarkLocs, bool IsShow, float Opacity);// 0x36bc07c
	void UpdateMarkC(int Index, Vector2D FLoc, bool IsShow, float Opacity);// 0x36bbf2c
	void UpdateImageMarkBinding();// 0x36bbf18
	void TickWidget(out const Geometry MyGeometry, float InDeltaTime);// 0x362d744
	void ShowOrHideLegendMarks(FString Tag, bool bIsShow);// 0x36bbd70
	void SetupUIMarkRoot();// 0x36bbd5c
	void RepositionMapMultiMarkC(int playerIndex, Vector2D CurSize);// 0x36bbca8
	void RepositionMapMarkC(int FIndex, int LocalPlayerIndex, Vector2D CurSize);// 0x36bbba8
	void RedrawAllMapMarkC(Vector2D CurSize);// 0x36bbb38
	void ReCalMapInfoC();// 0x36bbb24
	void OnUpdateUIMarks();// 0x35b23f8
	void OnUpdateImageMarks();// 0x355f9e4
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x36bb9bc
	void OnPaint(PaintContext InContext);// 0x36bb928
	void InitMap(MapDataBase* InMapData, UserWidget* InUserWidget);// 0x362d630
	World* GetWorldInternal();// 0x36bb900
	float GetLevelToMapScale();// 0x362d600
	STExtraGameStateBase* GetGameState();// 0x36bb8b8
	bool CheckMarkDistance(Widget* Widget, Vector Location, float MaxDistance);// 0x36bb7a8

--------------------------------
Class: MapUIMarkBaseWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x3c8, Size: 8]
	int DefaultZOrder;//[Offset: 0x3d0, Size: 4]
	bool bIsNeedRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	Actor* BindingActor;//[Offset: 0x3d8, Size: 8]
	float MaxShowDistance;//[Offset: 0x3e0, Size: 4]
	TextBlock* CountDownText;//[Offset: 0x3e4, Size: 4]
	FString CountDownFormat;//[Offset: 0x3e8, Size: 12]
	CanvasPanelSlot* ChangeSizeSlot;//[Offset: 0x410, Size: 4]
	float OriginSizeX;//[Offset: 0x418, Size: 4]
	float OriginSizeY;//[Offset: 0x41c, Size: 4]
	UpdateStateChangePorperty[] UpdateStatePropertyArray;//[Offset: 0x424, Size: 12]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x36be2f0
	void UpdateMarkSize(float inScale);// 0x35cbe94
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x36be1a0
	bool ShouldLimitedInMinimap();// 0x36be178
	void SetWidgetCurPostion(Vector WorldPos3D);// 0x36be108
	void SetUpdatePropertyArray(out const UpdateStateChangePorperty[] PropertyArray, int InitState);// 0x36bdfbc
	void SetCountDownText(TextBlock* TextBlock, int TotalSecond, bool IsShowZero, FString Format);// 0x36bdd80
	void SetChangeSizePanel(float SizeX, float SizeY, bool IsChangeSize, bool IsChangeInUpdate, float Ratio);// 0x36bdbdc
	void RefreshPanelScale(float Scale);// 0x36bdb64
	void RefreshCountDownText();// 0x36bdb50
	void OnWidgetShow(out const CustomMarkEventData InState);// 0x36bda74
	void OnUpdateState(out const CustomMarkEventData InState);// 0x36bd998
	void OnUpdateMarkSize(float Scale, float Ratio);// 0x36bd8dc
	void OnUpdateIconMap(int NewState);// 0x36bd864
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x36bd780
	void OnUIBPDestroy();// 0x36bd764
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x36bd63c
	void OnEnterEntireMap();// 0x49216cc
	Vector GetWidgetCurWorldPos();// 0x36bd5f4

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf4, Size: 12]
	delegate TextDelegate;//[Offset: 0x100, Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x110, Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130, Size: 16]
	SlateColor SelectColorAndOpacity;//[Offset: 0x140, Size: 28]
	SlateColor NoSelectColorAndOpacity;//[Offset: 0x15c, Size: 28]
	bool bHaveSelectColorAndOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	SlateFontInfo Font;//[Offset: 0x180, Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x1c0, Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x1c8, Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1d8, Size: 16]
	float MinDesiredWidth;//[Offset: 0x1e8, Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	void SetVerticalJustification(byte InJustification);// 0x5850c8c
	void SetText(FText InText);// 0x58509dc
	void SetShadowOffset(Vector2D InShadowOffset);// 0x585096c
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x58508f0
	void SetSelectColor(bool bIsSelect);// 0x5850870
	void SetOpacity(float InOpacity);// 0x58507f8
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x5850780
	void SetJustification(byte InJustification);// 0x5850708
	void SetFont(SlateFontInfo InFontInfo);// 0x58503f0
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x58500d0
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x5850048
	FText GetText();// 0x584feec

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xd0, Size: 4]
	byte Justification;//[Offset: 0xd4, Size: 1]
	byte VerticalJustification;//[Offset: 0xd5, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	float WrapTextAt;//[Offset: 0xd8, Size: 4]
	enum WrappingPolicy;//[Offset: 0xdc, Size: 1]
	Margin Margin;//[Offset: 0xe0, Size: 16]
	float LineHeightPercentage;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 4]
	Object* FontMaterial;//[Offset: 0x4, Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8, Size: 28]
	FName TypefaceFontName;//[Offset: 0x30, Size: 8]
	int Size;//[Offset: 0x38, Size: 4]
	bool IsBold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4, Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8, Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: UpdateStateChangePorperty
	Widget* UpdateWidget;//[Offset: 0x0, Size: 4]
	FString[] IconPathArray;//[Offset: 0x4, Size: 12]
	enum[] IconVisibleArray;//[Offset: 0x10, Size: 12]
	LinearColor[] IconColorArray;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MapImageMarkData
	int ConfigId;//[Offset: 0x0, Size: 4]
	Image* Image;//[Offset: 0x4, Size: 4]
	Vector CurrentWorldPos;//[Offset: 0x8, Size: 12]
	Vector2D OriginalSize;//[Offset: 0x14, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Vector2D MaxSize;//[Offset: 0x20, Size: 8]
	Actor* BindingActor;//[Offset: 0x28, Size: 8]
	float MaxShowDistance;//[Offset: 0x30, Size: 4]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: UIBPAsyncParams
	MarkSyncData MarkData;//[Offset: 0x4, Size: 68]
	class Widget* UIIconSoftPtr;//[Offset: 0x50, Size: 40]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x78, Size: 40]
	class Object* UIClass;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: MapMarkConfig
	int ConfigId;//[Offset: 0x0, Size: 4]
	FString UIPath;//[Offset: 0x4, Size: 12]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Vector2D MaxSize;//[Offset: 0x20, Size: 8]
	int ZOrder;//[Offset: 0x28, Size: 4]
	bool bIsControlByLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	FString LegendTags;//[Offset: 0x30, Size: 12]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float MaxShowDistance;//[Offset: 0x40, Size: 4]

--------------------------------
Class: FakeRadiationCircle.Actor.Object

--------------------------------
Class: MapRealTimeInfo
	Vector2D MapCenterToPlayer;//[Offset: 0x0, Size: 8]
	Vector MapCenterToBlueCircle;//[Offset: 0x8, Size: 12]
	Vector MapCenterToWhiteCircle;//[Offset: 0x14, Size: 12]
	Vector2D PlayerCoord;//[Offset: 0x20, Size: 8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x28, Size: 8]
	Vector2D WhiteCircleCoord;//[Offset: 0x30, Size: 8]
	Vector2D BlueCircleCoord;//[Offset: 0x38, Size: 8]
	float WhiteCircleRadius;//[Offset: 0x40, Size: 4]
	float BlueCircleRadius;//[Offset: 0x44, Size: 4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x48, Size: 8]
	enum LastDriveVehicleType;//[Offset: 0x50, Size: 1]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x54, Size: 100]
	AirDropPathData AirDropPathData;//[Offset: 0xb8, Size: 56]

--------------------------------
Class: AirplaneRouteData
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 8]
	float PlaneRotation;//[Offset: 0x24, Size: 4]
	AirDropPathData[] AirDropPaths;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLocInMapForCamp;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLocInMapForCamp;//[Offset: 0x3c, Size: 8]
	float CampRouteLengthInMap;//[Offset: 0x44, Size: 4]
	float CampRouteWidgetRotateAngle;//[Offset: 0x48, Size: 4]
	Vector2D LastValidCanJumpLocInMap;//[Offset: 0x4c, Size: 8]
	Vector2D LastValidForceJumpLocInMap;//[Offset: 0x54, Size: 8]
	float LastValidRouteWidgetRotateAngle;//[Offset: 0x5c, Size: 4]
	float LastValidRouteLengthInMap;//[Offset: 0x60, Size: 4]

--------------------------------
Class: AirDropPathData
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector2D StartLoc;//[Offset: 0x4, Size: 8]
	Vector2D TargetLoc;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D[] AirDropLocs;//[Offset: 0x1c, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x28, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: MapDataBase.Object
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x1c, Size: 12]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x28, Size: 12]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x34, Size: 12]
	MapUIBase* CurrentMapUI;//[Offset: 0x40, Size: 4]
	Vector PlayerLocOffset;//[Offset: 0x44, Size: 12]
	delegate FinaleChangeCurLocDelegate;//[Offset: 0x50, Size: 12]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x5c, Size: 8]
	void Init(MapUIBase* INMapUI);// 0x36ba3f0
	World* GetWorldInternal();// 0x36ba3c8
	STExtraGameStateBase* GetGameState();// 0x36ba380

--------------------------------
Class: MapObjct.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	MapUIBase* CurrentHoldMapUI;//[Offset: 0x6c, Size: 8]
	World* GetWorldInternal();// 0x36bce70
	void DrawCircle(Vector2D CircleCenter, LinearColor CircleColor, float CircleRadius, float MapWindowExtent, Vector2D PlayerCoord, byte MapType, bool bAntiAlias);// 0x36bcc30

--------------------------------
Class: WidgetToRenderTarget.Object
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x1c, Size: 60]
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x58, Size: 12]
	void ReleaseCachedParams();// 0x3ac6060
	bool ReceivePreDrawTextToTextureRenderTarget2DAsync(out DrawTextToTextureRenderTarget2DParams Params);// 0x49216cc
	void ReceivePostDrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params);// 0x49216cc
	void DrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params, out const delegate OnWidgetToRenderTargetDrawn);// 0x3ac5d60

--------------------------------
Class: TextureRenderTarget2DManagerWidgetInfo
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 40]
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 4]
	UserWidget* UserWidget;//[Offset: 0x2c, Size: 4]
	FName UpdateWidgetFunctionName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DrawTextToTextureRenderTarget2DParams
	FText Text;//[Offset: 0x0, Size: 12]
	FName WidgetName;//[Offset: 0x10, Size: 8]
	int DrawWidth;//[Offset: 0x18, Size: 4]
	int DrawHeight;//[Offset: 0x1c, Size: 4]
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0x20, Size: 4]
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x28, Size: 40]
	FName TextureParameterName;//[Offset: 0x50, Size: 8]
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x58, Size: 4]
	FString Payload;//[Offset: 0x5c, Size: 12]
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: GameStateWeaponRule
	bool bForbidShootTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CheckForbidShootTime;//[Offset: 0x4, Size: 4]
	class Actor[] ForbidShootClassArray;//[Offset: 0x8, Size: 12]
	class Actor[] SwallowBulletClassArray;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ReplayRecordInfo.Actor.Object
	float WorldTimeSecondsForReplay;//[Offset: 0x308, Size: 4]
	void SaveExternalData(FString InData);// 0x37822dc

--------------------------------
Class: ParallelWorldDebugSummary
	int WorldNum;//[Offset: 0x0, Size: 4]
	int MaxPlayerNumPerPW;//[Offset: 0x4, Size: 4]
	ParallelWorldDebugEntry[] DebugData;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParallelWorldDebugEntry
	int ParallelWorldId;//[Offset: 0x0, Size: 4]
	int PlayerNum;//[Offset: 0x4, Size: 4]
	int AINum;//[Offset: 0x8, Size: 4]
	int TeamNum;//[Offset: 0xc, Size: 4]
	int[] TeamIds;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AirAttackOrder
	enum Msg;//[Offset: 0x0, Size: 1]
	uint16 waveIndex;//[Offset: 0x2, Size: 2]
	float FlightHeight;//[Offset: 0x4, Size: 4]
	float SeaLevelHeight;//[Offset: 0x8, Size: 4]
	uint32[] bombsInterval;//[Offset: 0xc, Size: 12]
	uint16 BombBaseDamage;//[Offset: 0x18, Size: 2]
	uint16 BombMinDamage;//[Offset: 0x1a, Size: 2]
	Vector AirAttackArea;//[Offset: 0x1c, Size: 12]
	Vector2D[] bombsPosition2D;//[Offset: 0x28, Size: 12]
	Vector[] bombsPosition;//[Offset: 0x34, Size: 12]

--------------------------------
Class: AnimalTeleportComponent.ActorComponent.Object
	bool bDeliverToInDoorPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	AnimalDeliverRatingConfig[] ChickDeliverConfig;//[Offset: 0xc0, Size: 12]
	AnimalDeliverRatingConfig[] DeerDeliverConfig;//[Offset: 0xcc, Size: 12]
	AnimalDeliverRatingConfig[] GoblinDeliverConfig;//[Offset: 0xd8, Size: 12]
	AnimalDeliverRatingConfig[] IceDeliverConfig;//[Offset: 0xe4, Size: 12]
	AnimalDeliverAreaLimit[] DeliveryAreaLimit;//[Offset: 0xf0, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0xfc, Size: 8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x104, Size: 8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x10c, Size: 4]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x110, Size: 4]
	<STExtraPlayerCharacter*> DeliveredGoblinPlayers;//[Offset: 0x114, Size: 60]
	<STExtraPlayerCharacter*> DeliveredIcePlayers;//[Offset: 0x150, Size: 60]
	<enum,int> DeleverCountPerWave;//[Offset: 0x294, Size: 60]

--------------------------------
Class: AnimalDeliverRatingConfig
	float RightRatingSection;//[Offset: 0x0, Size: 4]
	uint32 DeliverGroupNumPerWave;//[Offset: 0x4, Size: 4]
	float DeliverBeginTime;//[Offset: 0x8, Size: 4]
	float DeliveryWaveInterval;//[Offset: 0xc, Size: 4]
	float DeliverEndTime;//[Offset: 0x10, Size: 4]
	uint32 FullFeedLimit;//[Offset: 0x14, Size: 4]
	float DeliverFreqInterval;//[Offset: 0x18, Size: 4]
	int DeliverNumEachFreq;//[Offset: 0x1c, Size: 4]
	<int,int> DeliverCountByPlayerNum;//[Offset: 0x20, Size: 60]

--------------------------------
Class: AnimalDeliverAreaLimit
	Vector TopLeft;//[Offset: 0x0, Size: 12]
	Vector BottomRight;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AnimalDeliverConfiguration.Object
	AnimalDeliverStrategy*[] TeamDeliverStrategies;//[Offset: 0x1c, Size: 12]
	AnimalDeliverStrategy*[] IndividualDeliverStrategies;//[Offset: 0x28, Size: 12]

--------------------------------
Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x1c, Size: 1]
	enum SortStrategy;//[Offset: 0x5c, Size: 1]
	enum SelectStrategy;//[Offset: 0x5d, Size: 1]

--------------------------------
Class: PlaneComponent.LuaInstancedActorComponent.ActorComponent.Object
	int ClassicFlightNo;//[Offset: 0x114, Size: 4]
	<int,PlaneData> PlaneDataMap;//[Offset: 0x118, Size: 60]
	class Pawn* PlaneClass;//[Offset: 0x154, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bEnableClassic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bSyncRouteAfterFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x15c, Size: 12]
	AIController*[] CachedTotalAI;//[Offset: 0x168, Size: 12]
	int FlightTimes;//[Offset: 0x174, Size: 4]
	int NotifyEndFlightDelayTime;//[Offset: 0x178, Size: 4]
	int CustomFlightTimes;//[Offset: 0x188, Size: 4]
	void StartFlight(int FlightNo);// 0x372ac9c
	void SetPlaneClassPath(FString PlaneClassPath);// 0x372abe0
	void SetFlight(int FlightNo, out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x372a98c
	int SetCustomFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x372a770
	void NotifyEndFlight();// 0x372a75c
	PlaneData GetPlaneDataByFlightNo(int FlightNo);// 0x372a55c
	void EndPlaneFlightByFlightNo(int FlightNo);// 0x372a4e4
	void BPCalFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc);// 0x372a358
	bool AddPlayerToFlight(PlayerController* PC, int FlightNo);// 0x372a294

--------------------------------
Class: PlaneData
	int FlightNo;//[Offset: 0x0, Size: 4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Actor* ThePlane;//[Offset: 0x8, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector PlaneVelocity;//[Offset: 0x10, Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x1c, Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x3c, Size: 8]
	float PlaneHeight;//[Offset: 0x44, Size: 4]
	int TotalPlayerNum;//[Offset: 0x48, Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x4c, Size: 12]
	PlayerController*[] CurPlayers;//[Offset: 0x58, Size: 12]
	int TotalAINum;//[Offset: 0x64, Size: 4]
	AIController*[] TotalAIs;//[Offset: 0x68, Size: 12]
	int CurAINum;//[Offset: 0x74, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x78, Size: 4]
	bool bCanFixedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0xc0, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xc4, Size: 4]
	enum RespawnPointType;//[Offset: 0xc8, Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0xcc, Size: 12]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0xd8, Size: 12]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0xe4, Size: 12]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0xf0, Size: 60]
	<uint32,RespawnIgnoreItemType> PlayerRespawnIgnoreItemTypes;//[Offset: 0x12c, Size: 60]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x168, Size: 24]
	int[] DefaultWeaponList;//[Offset: 0x180, Size: 12]
	float bRestoreDataDelay;//[Offset: 0x18c, Size: 4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	delegate OnGlobalRespawnedDelegate;//[Offset: 0x194, Size: 12]
	delegate OnRespawnedPlayerDelegate;//[Offset: 0x1a0, Size: 12]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x29c, Size: 4]
	Pawn* RespawningPlayerPawn;//[Offset: 0x2a0, Size: 4]
	void SetRespawnInvincibleTime(float DefaultRespawnInvincibleTimeIn);// 0x3741844
	void RespawnAllPlayer();// 0x3741830
	void RemovePlayerRespawnTimer(uint32 PlayerKey, bool bAI);// 0x374176c
	void PlayerDelayAddItem(uint32 PlayerKey, int ItemId);// 0x37416b0
	void OnCharacterStartFire(STExtraWeapon* _, STExtraBaseCharacter* Character);// 0x37415f4
	bool IsContainPlayerTimer(uint32 PlayerKey);// 0x3741574
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x37414a4
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x37413e8
	int GetRespawnWeaponBulletNum(out const RespawnKeepAllItemData RespawnKeepAllItemData, int SlotType, int SpecificID);// 0x3741290
	bool GetPlayerRespawnKeepAllItemData(uint32 PlayerKey, bool bAI, out RespawnKeepAllItemData OutRespawnKeepAllItemData, bool bKeepBullet);// 0x37410dc
	float GetDefaultPlayerRespawnTime();// 0x37410b4
	void GenerateRespawnKeepItems(uint32 PlayerKey, bool bAI, out const RespawnKeepAllItemData RespawnKeepAllItemData, bool bForceKeepItems);// 0x3740f08
	void DealWithDelayAddItem(uint32 PlayerKey, bool bAddAll, bool bClearAll);// 0x3740df4
	void ClearDelayAddItems(uint32 PlayerKey);// 0x3740d7c
	void ClearAllPlayerRespawnTimer();// 0x3740d68
	void ChangeWeaponSchemeIndex(int InIndex);// 0x34b6c34
	void AddPlayerRespawnIgnoreKeepItemType(uint32 PlayerKey, bool IsAdd, int itemType);// 0x3740c5c

--------------------------------
Class: ReplaceWeaponDataMap
	<byte,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ReplaceWeaponData
	int WeaponId;//[Offset: 0x0, Size: 4]
	BattleItemData WeaponItemData;//[Offset: 0x8, Size: 160]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0xa8, Size: 12]

--------------------------------
Class: RespawnIgnoreItemType

--------------------------------
Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 12]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x18, Size: 1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x1c, Size: 12]
	int ClipBulletNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0, Size: 4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0, Size: 4]
	RespawnItem[] ItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShowVehicleComponent.LuaInstancedActorComponent.ActorComponent.Object
	class Actor* VehicleSpotClass;//[Offset: 0x114, Size: 4]
	float DropHeightOffset;//[Offset: 0x118, Size: 4]
	float LeftTimeToDestroyVehicles;//[Offset: 0x11c, Size: 4]
	float TimerHzToDestroyVehicles;//[Offset: 0x120, Size: 4]
	bool bUseNewVehicleSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	float LeftTimeToDestroyWingman;//[Offset: 0x128, Size: 4]
	float TimerHzToDestroyWingman;//[Offset: 0x12c, Size: 4]
	int MaxVehicles;//[Offset: 0x130, Size: 4]
	int MaxVehiclesPerGroup;//[Offset: 0x134, Size: 4]
	Actor*[] VehicleSpotActors;//[Offset: 0x138, Size: 12]
	VehicleSpots[] VehicleSpotGroup;//[Offset: 0x15c, Size: 12]
	<uint32,Actor*> VehicleContainers;//[Offset: 0x168, Size: 60]
	<int,Actor*> WingmanMap;//[Offset: 0x1e8, Size: 60]
	void ShowWingmanFor(uint32 InPlayerKey, FString InWingmanClassPath, out const Transform InWingmanSpawnTransform);// 0x37b32b0
	void ShowVehicleFor(uint32 InPlayerKey, FString InVehiclePath, FString InVehicleContainerPath, int InAvatarID);// 0x37b30dc
	void SetVehicleSpotsInfo();// 0x34b6cb4
	void RemoveVehicleInfo(uint32 InPlayerKey);// 0x37b3064
	void OnGameModeStateChanged(out const GameModeStateChangedParams InParams);// 0x37b2fd4
	void DestroyWingman();// 0x37b2fc0
	void DestroyVehicleFor(uint32 InPlayerKey);// 0x37b2f48

--------------------------------
Class: VehicleSpots
	Transform[] Spots;//[Offset: 0x0, Size: 12]
	<int> UsedSpot;//[Offset: 0xc, Size: 60]
	<int,UsedVehicleSpots> GroupIndexUsedVehicleSpotsMap;//[Offset: 0x48, Size: 60]

--------------------------------
Class: UsedVehicleSpots
	<int> UsedSpot;//[Offset: 0x0, Size: 60]

--------------------------------
Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0, Size: 4]
	FString PlaneClassFullPath;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4, Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14, Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 12]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4, Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ItemAttach
	int BaseItemID;//[Offset: 0x0, Size: 4]
	AddItemInfo[] AttachItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AddItemInfo
	int AddItemID;//[Offset: 0x0, Size: 4]
	int AddItemNum;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0, Size: 4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 12]
	FString FakePlayerCampNameTableName;//[Offset: 0xc8, Size: 12]
	FString FakePlayerRandomNameTableName;//[Offset: 0xd4, Size: 12]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0xe0, Size: 60]
	<int,FString> FakePlayerCampNameMap;//[Offset: 0x11c, Size: 60]
	FString[] FakePlayerRandomNamePrefixArray;//[Offset: 0x158, Size: 12]
	FString[] FakePlayerRandomNameArray;//[Offset: 0x164, Size: 12]
	void InitRowDataMap();// 0x363c5ac
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x363c4a8
	FString GetControllerPath(int resID);// 0x363c3a0

--------------------------------
Class: FakePlayerCustomRow
	int ID;//[Offset: 0x0, Size: 4]
	FString ControllerPath;//[Offset: 0x4, Size: 12]
	FString Name;//[Offset: 0x10, Size: 12]
	int gender;//[Offset: 0x1c, Size: 4]
	FString ItemStr;//[Offset: 0x20, Size: 12]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x2c, Size: 12]
	int IsUseRandomName;//[Offset: 0x38, Size: 4]
	int NameLocalizeId;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DSTickRateOptimize
	float TickFrequency;//[Offset: 0x0, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x4, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x8, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GroupPlayers
	uint32[] Players;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PVSNetRelevantHelper.Object
	float MaxVoiceSyncDissquaredDeathMatch;//[Offset: 0x9c, Size: 4]
	float MaxVoiceSyncDissquaredBR;//[Offset: 0xa0, Size: 4]
	float MaxVoiceSyncDissquared;//[Offset: 0xa4, Size: 4]
	bool bEnableVoiceLODSector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int VoiceLODSectorCircleDivideCount;//[Offset: 0xbc, Size: 4]
	int VoiceLODSectorBeginDistance;//[Offset: 0xc0, Size: 4]
	int VoiceLODSectorBeginThickness;//[Offset: 0xc4, Size: 4]
	enum GameModeModType;//[Offset: 0xc8, Size: 4]
	bool bEnableLandscapeRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bEnableCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	float ModdedMinJudgeDistanceSquared;//[Offset: 0xd0, Size: 4]
	float BaseModMinJudgeDistanceSquared;//[Offset: 0xd4, Size: 4]
	float MinJudgeDisquared;//[Offset: 0xd8, Size: 4]
	float MinSprintFootVoiceNeedVelocitySquared;//[Offset: 0xdc, Size: 4]
	bool bAIVoiceSyncSpecial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bHasDecidedMinJudgeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	float RayVisibilityMoveUpDistance;//[Offset: 0x2a4, Size: 4]
	float RayVisibilityPerSecondTimeLimit;//[Offset: 0x2a8, Size: 4]
	float RayVisibilityCheckIntervalWhenVisible;//[Offset: 0x2ac, Size: 4]
	int RayVisibilityMaxHidePerViewer;//[Offset: 0x2b0, Size: 4]
	float CameraStayStillButCharacterMoveDistanceThreshold;//[Offset: 0x2b4, Size: 4]
	void RegisterObfuscateSync(const UAEPlayerController* PlayerController);// 0x37794a8
	void EnableCell();// 0x3779494

--------------------------------
Class: AIControllerList

--------------------------------
Class: AIPawnPoolItem
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: RoomCustomParams
	int CircleSpeedMultiplicator;//[Offset: 0x0, Size: 4]
	bool bAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bShowSkull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bGunRemoveBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int BlueCircleDamageMultiplicator;//[Offset: 0xc, Size: 4]
	bool bUseFirstWhiteCircleDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bUseFirstSafeZoneAppearTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bUseFirstWhiteCircleRadiusMultiplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int FirstWhiteCircleDelayTime;//[Offset: 0x14, Size: 4]
	int FirstSafeZoneAppearTime;//[Offset: 0x18, Size: 4]
	int FirstWhiteCircleRadiusMultiplicator;//[Offset: 0x1c, Size: 4]
	bool EnableRedZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	CustomCircleParams[] CustomCircleParamsList;//[Offset: 0x24, Size: 12]
	bool bFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: CustomCircleParams
	int Stage;//[Offset: 0x0, Size: 4]
	int DelayTime;//[Offset: 0x4, Size: 4]
	int SafeZoneAppeartime;//[Offset: 0x8, Size: 4]
	int LastTime;//[Offset: 0xc, Size: 4]
	int CircleDamage;//[Offset: 0x10, Size: 4]
	int BlueCircleRadius;//[Offset: 0x14, Size: 4]
	int WhiteCircleRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlowUpData
	float TimeStamp;//[Offset: 0x0, Size: 4]
	int InternalBlowUpID;//[Offset: 0x4, Size: 4]
	bool bIsBeingBlew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float InternalTime;//[Offset: 0xc, Size: 4]
	Vector LaunchVelocity;//[Offset: 0x10, Size: 12]
	Actor* HitActor;//[Offset: 0x1c, Size: 8]
	PrimitiveComponent* HitComponent;//[Offset: 0x24, Size: 8]

--------------------------------
Class: NetMoveSpeedParameter
	float SpeedValue;//[Offset: 0x0, Size: 4]
	byte SpeedScale;//[Offset: 0x4, Size: 1]
	byte SpeedRate;//[Offset: 0x5, Size: 1]
	byte SwimSpeedDynamicScale;//[Offset: 0x6, Size: 1]
	byte EnergySpeedScale;//[Offset: 0x7, Size: 1]

--------------------------------
Class: SplineMoveInfo
	SplineComponent* MoveAlongSpline;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 4]
	Transform DecalTransform;//[Offset: 0x10, Size: 48]
	int DecalInstanceId;//[Offset: 0x40, Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x44, Size: 12]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: PlayerPosMarkerParam
	Character* Player;//[Offset: 0x0, Size: 4]
	float MarkTimeLen;//[Offset: 0x4, Size: 4]
	int MarkIcon;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PUBGDoor.UAENetActor.LuaActor.Actor.Object
	int iRegionDoor;//[Offset: 0x420, Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x428, Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x430, Size: 4]
	float autoOpenAngel;//[Offset: 0x434, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x438, Size: 4]
	int DoorState;//[Offset: 0x43c, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	float DoorOperateTime;//[Offset: 0x444, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x448, Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x44c, Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x450, Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	int DoorStateEx;//[Offset: 0x458, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x460, Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x464, Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x468, Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46d, Size: 1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46e, Size: 1]
	delegate OnDoorBrokenDelegate;//[Offset: 0x470, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x47c, Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x488, Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x494, Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x498, Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x4a4, Size: 4]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x4b0, Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x4b8, Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x4c8, Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	DoorOpenConfig DoorOpenConfig;//[Offset: 0x4ec, Size: 8]
	ExDoorOpenConfig ExDoorOpenConfig;//[Offset: 0x4f4, Size: 8]
	void SetDoorBroken(bool bExtraDoor, Controller* EventInstigator);// 0x3764bb0
	void RefreshUIOnClient();// 0x3764b9c
	void RecordBreakDoorTlog(PlayerController* EventInstigator);// 0x3764b24
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x3764a60
	void OnRep_RepDoorStateEx();// 0x3764a4c
	void OnRep_RepDoorState();// 0x3764a38
	void OnRep_RepDoorBrokenEx();// 0x3764a24
	void OnRep_RepDoorBroken();// 0x3764a10
	void OnRep_ExDoorOpenConfig();// 0x37649fc
	void OnRep_DoorOpenConfig();// 0x37649e8
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x37648a0
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3764758
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x3764694
	void OnBPRespawned();// 0x34d0a90
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x376445c
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3764224
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x3764160
	bool IsSameDoorState(int ClientState);// 0x37640e0
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x3763ebc
	enum[] GetDamageableGameObjectType();// 0x3763df4
	void ForceNetUpdate();// 0x3721bbc
	void DeCodeKey();// 0x35d1618
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x3763d30
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x3763bcc
	void BPSetObjectPoolInitialData();// 0x34d0ac8
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x49216cc
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x49216cc
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x49216cc

--------------------------------
Class: DoorOpenConfig
	int DoorState;//[Offset: 0x0, Size: 4]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ExDoorOpenConfig
	int DoorStateEx;//[Offset: 0x0, Size: 4]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraProp.Actor.Object
	bool bKeepRelevantWhenHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	STExtraBaseCharacter* OwnerPlayer;//[Offset: 0x30c, Size: 4]
	STExtraBaseCharacter* LastOwnerPlayer;//[Offset: 0x310, Size: 4]
	Transform OriginTrans;//[Offset: 0x320, Size: 48]
	FName PropAttachSocket;//[Offset: 0x350, Size: 8]
	AkAudioEvent* EquipSound;//[Offset: 0x358, Size: 4]
	AkAudioEvent* UnEquipSound;//[Offset: 0x35c, Size: 4]

--------------------------------
Class: MovementRecordData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Vector Velocity;//[Offset: 0x18, Size: 12]
	Vector ControllerNormalRot;//[Offset: 0x24, Size: 12]
	Vector SimulateViewNormalRot;//[Offset: 0x30, Size: 12]
	float ServerTimeStamp;//[Offset: 0x3c, Size: 4]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Vector VehicleLocation;//[Offset: 0x44, Size: 12]
	Rotator VehicleRotation;//[Offset: 0x50, Size: 12]
	Vector VehicleRotVelocity;//[Offset: 0x5c, Size: 12]
	bool VehicleIsCorrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	byte PoseState;//[Offset: 0x69, Size: 1]
	enum MoveBaseState;//[Offset: 0x6a, Size: 1]
	float PingMillisecond;//[Offset: 0x6c, Size: 4]
	bool IsCustomMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	uint64 PawnStates;//[Offset: 0x78, Size: 8]
	uint32 UserCmdSequence;//[Offset: 0x80, Size: 4]
	uint32 LastAckBadMoveSequence;//[Offset: 0x84, Size: 4]
	bool bHasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]

--------------------------------
Class: ShootDamageTipsStr
	STExtraBaseCharacter* DamageTarget;//[Offset: 0x0, Size: 4]
	float Damage;//[Offset: 0x4, Size: 4]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 1]
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0, Size: 12]
	FString CauserNation;//[Offset: 0xc, Size: 12]
	FString VictimName;//[Offset: 0x18, Size: 12]
	FString VictimNation;//[Offset: 0x24, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x30, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x3c, Size: 12]
	int DamageType;//[Offset: 0x48, Size: 4]
	int AdditionalParam;//[Offset: 0x4c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x50, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x54, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ResultHealthStatus;//[Offset: 0x5c, Size: 4]
	byte RecordRelationShip;//[Offset: 0x60, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x64, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x68, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x6c, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x70, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x74, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x78, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x7c, Size: 4]
	FString CauserPicURL;//[Offset: 0x80, Size: 12]
	FString VictimPicURL;//[Offset: 0x8c, Size: 12]
	FString RealKillerName;//[Offset: 0x98, Size: 12]
	int RealKillNum;//[Offset: 0xa4, Size: 4]
	byte CauserType;//[Offset: 0xa8, Size: 1]
	byte VictimType;//[Offset: 0xa9, Size: 1]
	int CauserTeamID;//[Offset: 0xac, Size: 4]
	int VictimTeamID;//[Offset: 0xb0, Size: 4]
	bool IsUseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	LinearColor UseColor;//[Offset: 0xb8, Size: 16]
	byte[] ExpandDataContent;//[Offset: 0xc8, Size: 12]

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	bool bPlayHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]

--------------------------------
Class: DotDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ValidTouchMoveFrameConfig
	FString DeviceName;//[Offset: 0x0, Size: 12]
	int Enable;//[Offset: 0xc, Size: 4]
	int Frame;//[Offset: 0x10, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc, Size: 12]
	int PlayerGender;//[Offset: 0x18, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20, Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 40]
	SensibilityMode FireMode;//[Offset: 0x28, Size: 40]
	SensibilityMode MotionMode;//[Offset: 0x50, Size: 40]
	SensibilityMode MotionFireMode;//[Offset: 0x78, Size: 40]
	float VehicleEye;//[Offset: 0xa0, Size: 4]
	float ParachuteEye;//[Offset: 0xa4, Size: 4]
	float FPPEye;//[Offset: 0xa8, Size: 4]
	int SideMirrorModeC;//[Offset: 0xac, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]
	float Shoulder;//[Offset: 0x20, Size: 4]
	float ShoulderFPP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x4, Size: 12]
	FString AttackName;//[Offset: 0x10, Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int KillNum;//[Offset: 0x20, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bHideKillIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	FString FullMsg;//[Offset: 0x28, Size: 12]
	int victimAnchorPlatformResID;//[Offset: 0x34, Size: 4]
	FString VictimPlayerName;//[Offset: 0x38, Size: 12]
	FString CauserPlayerName;//[Offset: 0x44, Size: 12]
	FString CauserRealPlayerName;//[Offset: 0x50, Size: 12]
	bool bIsCauserTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIsVictimTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool bIamCauser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bIamVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	int ResultHealthStatus;//[Offset: 0x60, Size: 4]
	int CauserType;//[Offset: 0x64, Size: 4]
	int DamageType;//[Offset: 0x68, Size: 4]
	int AdditionalParam;//[Offset: 0x6c, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x70, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0x74, Size: 12]
	int AssistNum;//[Offset: 0x80, Size: 4]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xbc, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	float GuideInterval;//[Offset: 0xc4, Size: 4]
	int MaxGuideLevel;//[Offset: 0xc8, Size: 4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0xd0, Size: 40]
	class Object[] tGuideConfigClassArray;//[Offset: 0xf8, Size: 12]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x104, Size: 12]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x110, Size: 40]
	NewbieGuideItem[] tItems;//[Offset: 0x138, Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0x144, Size: 4]
	int[] FinishedTips;//[Offset: 0x148, Size: 12]
	int[] FinishedCounts;//[Offset: 0x154, Size: 12]
	int PlayerLevel;//[Offset: 0x160, Size: 4]
	byte curPlayerCategory;//[Offset: 0x164, Size: 1]
	void TriggerNewbieEvent(FString NewbieEvent);// 0x36f2440
	void ShowHideGuide(int TipsID, bool bShow);// 0x36f237c
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x36f2270
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x36f21f4
	void OnNewbieEventMapUpdate__DelegateSignature();// 0x49216cc
	void OnLoadGuideConfigFinish(LoadGuideConfig inFinishRet);// 0x36f2074
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte _curPlayerCategory, int _PlayerLevel);// 0x36f1d30
	void HandleNewbieGuideEnd(FString GuideID, FString EndType);// 0x36f1bf0
	void HandleNewbieGuideBegin(FString GuideID);// 0x36f1b34
	bool GetIsAllowNewGuide();// 0x36f1b0c
	bool GetIsAllowLuaNewGuide();// 0x36f1ae4
	void AddGuidItem(class STNewBieGuideConfig Config);// 0x36f1964

--------------------------------
Class: STNewBieGuideConfig.Object
	NewbieGuideItem[] tItems;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	byte Type;//[Offset: 0x10, Size: 1]
	int MaxGuideCounts;//[Offset: 0x14, Size: 4]
	int MaxGuideLevel;//[Offset: 0x18, Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x1c, Size: 12]
	int Priority;//[Offset: 0x28, Size: 4]
	int MuteFlag;//[Offset: 0x2c, Size: 4]
	int PreconditionID;//[Offset: 0x30, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x34, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x38, Size: 12]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44, Size: 4]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListenerList;//[Offset: 0x48, Size: 12]
	float Duration;//[Offset: 0x54, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x58, Size: 12]
	bool UseNewEdition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x60, Size: 8]
	FString LuaFilePath;//[Offset: 0x68, Size: 12]
	bool ReconnectRecover();// 0x35dc0b8
	bool IsOK();// 0x35dc0fc

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x36f14c0

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x1c, Size: 12]
	Controller* OwnerController;//[Offset: 0x28, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float DelayTime;//[Offset: 0x34, Size: 4]
	bool ReconnectRecover();// 0x35dc0b8
	void OnEventTrigger();// 0x3515c44
	Actor* GetCurrentEventOwnerActor();// 0x34da7d8
	bool EnableListener();// 0x3666728
	bool DisableListener();// 0x35dc0fc

--------------------------------
Class: NewbieGuideUIInfo
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString MountName;//[Offset: 0x2c, Size: 12]
	FString MountOuterName;//[Offset: 0x38, Size: 12]
	AnchorData LayoutData;//[Offset: 0x44, Size: 40]
	FString LogicManagerNames;//[Offset: 0x6c, Size: 12]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	int ZOrder;//[Offset: 0x7c, Size: 4]
	Widget* UIWidget;//[Offset: 0x80, Size: 4]
	class Object* UIWidgetClass;//[Offset: 0x84, Size: 4]

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: LoadGuideConfig

--------------------------------
Class: PVSComponent.ActorComponent.Object
	void SyncVoiceLODSector(STExtraBaseCharacter* PtrChar, float InVoice1, float InVoice2, float InVoice3, const int Index);// 0x3778d8c
	void SyncVoiceCellInfo(STExtraBaseCharacter* PtrChar, const int InVoice1, const int InVoice2, const float InVoice3);// 0x3778c44
	void SyncVisibilityFor(STExtraBaseCharacter* PtrChar, const bool bVisible);// 0x3778b80
	void SyncPosition(STExtraBaseCharacter* PtrChar, const Vector Position);// 0x3778acc
	void SyncFootVoice(STExtraBaseCharacter* PtrChar, const byte FootStepState, const Vector_NetQuantize100 VoiceCheckVector);// 0x37789d4
	void ReportPVSException(const Vector OwnPos, const Vector OtherPos, const Vector Vel, const Vector OuterLoc);// 0x3778874
	void ForceSyncPosition(STExtraBaseCharacter* PtrChar, const RepMovement RepMovement);// 0x37787b8
	void AlertPopInDev(FString Message, FString SimulateProxyUID);// 0x377864c

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float TimeStartDelay;//[Offset: 0xc0, Size: 4]
	float SyncInterval;//[Offset: 0xc4, Size: 4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x39ca23c
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x34b6cd0
	void OnTimeInspectorColdMove_Vehicle();// 0x39ca228
	void OnTimeInspectorColdMove_Own();// 0x39ca214
	void OnServerAboutToReconnect();// 0x39ca200
	void CheckTimeLine();// 0x39ca1ec

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch CheatStateData2TotalCheatTimes;//[Offset: 0xc8, Size: 32]
	VerifySwitch MoveCheatAntiStrategy3TotalCheatTimes;//[Offset: 0xec, Size: 32]
	VerifySwitch VsNoHitDetail;//[Offset: 0x124, Size: 32]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x144, Size: 32]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x164, Size: 32]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x184, Size: 32]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x1a4, Size: 32]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x1c4, Size: 32]
	VerifySwitch VsBoneScale;//[Offset: 0x1e4, Size: 32]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x204, Size: 32]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x224, Size: 32]
	VerifySwitch VsBulletID;//[Offset: 0x244, Size: 32]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x264, Size: 32]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x284, Size: 32]
	int MaxShootPointPassWall;//[Offset: 0x2a4, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x2a8, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x2ac, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2b0, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x2b4, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x2b8, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2bc, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2c0, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2c4, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2c8, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2cc, Size: 32]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x2ec, Size: 32]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x30c, Size: 32]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x32c, Size: 32]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x34c, Size: 32]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x36c, Size: 32]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x38c, Size: 32]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x3ac, Size: 32]
	int MaxMergedStrategy1;//[Offset: 0x3cc, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x3d0, Size: 4]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3d4, Size: 32]
	VerifySwitch VsClientNotConnectShoot;//[Offset: 0x3f4, Size: 32]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x414, Size: 32]
	VerifySwitch VsShootRpgShootIntervalVerify;//[Offset: 0x434, Size: 32]
	float MaxFuelConsume;//[Offset: 0x454, Size: 4]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x4d4, Size: 32]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x4f4, Size: 32]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x518, Size: 32]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x538, Size: 32]
	VerifySwitch VsClientBulletDir;//[Offset: 0x558, Size: 32]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x578, Size: 32]
	VerifySwitch VsClientDownShoot;//[Offset: 0x598, Size: 32]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x5b8, Size: 32]
	VerifySwitch FarJump;//[Offset: 0x5d8, Size: 32]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x5f8, Size: 32]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x618, Size: 32]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x638, Size: 32]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x658, Size: 32]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x678, Size: 32]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x698, Size: 32]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x6b8, Size: 32]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x6d8, Size: 32]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x6f8, Size: 28]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x714, Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x718, Size: 32]
	float ServerAccumulateErrors;//[Offset: 0x740, Size: 4]
	float ServerAvgErrors;//[Offset: 0x744, Size: 4]
	VerifySwitch DSSpeedOver10FailedCnt;//[Offset: 0x750, Size: 32]
	VerifySwitch DSSpeedOver15FailedCnt;//[Offset: 0x770, Size: 32]
	VerifySwitch DSSpeedOver20FailedCnt;//[Offset: 0x790, Size: 32]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x7b0, Size: 32]
	VerifySwitch BulletDirError;//[Offset: 0x7d0, Size: 32]
	VerifySwitch MuzzleAndOwnerDisOpti;//[Offset: 0x7f0, Size: 32]
	VerifySwitch ImpactAndEnemyDisOpti;//[Offset: 0x810, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirError1;//[Offset: 0x830, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirError2;//[Offset: 0x850, Size: 32]
	VerifySwitch SwitchShootPosHistoryLocusError2;//[Offset: 0x870, Size: 32]
	VerifySwitch SwitchShootPosHistoryLocusError3;//[Offset: 0x890, Size: 32]
	VerifySwitch SwitchMuzzleLocusError;//[Offset: 0x8b0, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorX;//[Offset: 0x8d0, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorY;//[Offset: 0x8f0, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorZ;//[Offset: 0x910, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorLength;//[Offset: 0x930, Size: 32]
	VerifySwitch SwitchShooterMovementError1;//[Offset: 0x950, Size: 32]
	VerifySwitch SwitchShooterMovementError2;//[Offset: 0x970, Size: 32]
	VerifySwitch SwitchHeadLocusError3;//[Offset: 0x990, Size: 32]
	VerifySwitch SwitchHeadLocusError4;//[Offset: 0x9b0, Size: 32]
	VerifySwitch Gun2ShooterPosError1;//[Offset: 0x9d0, Size: 32]
	VerifySwitch Gun2ShooterPosError2;//[Offset: 0x9f0, Size: 32]
	VerifySwitch ShooterHead2PosBlock;//[Offset: 0xa10, Size: 32]
	float MaxUseOptiArguPing;//[Offset: 0xa30, Size: 4]
	int ShootVerifyTimes;//[Offset: 0xa34, Size: 4]
	float VehicleSpeedZDeltaTotal;//[Offset: 0xa7c, Size: 4]
	int VehicleSpeedZDeltaOver10Times;//[Offset: 0xa80, Size: 4]
	VerifySwitch VehicleSpeedZDeltaOver10TimesWhenNoXY;//[Offset: 0xa84, Size: 32]
	VerifySwitch VehicleVelZCheck1;//[Offset: 0xaa4, Size: 32]
	VerifySwitch VehicleVelZCheck2;//[Offset: 0xac4, Size: 32]
	VerifySwitch VehicleHitMuzzleCheck;//[Offset: 0xae4, Size: 32]
	VerifySwitch VehicleHitImpactPointCheck;//[Offset: 0xb04, Size: 32]
	VerifySwitch VehicleHitBlockWall;//[Offset: 0xb24, Size: 32]
	VerifySwitch FarShootInMidAirVehicleExceedThreshold;//[Offset: 0xb44, Size: 32]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceTrial;//[Offset: 0xb64, Size: 32]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceFurtherTrial;//[Offset: 0xb84, Size: 32]
	VerifySwitch FarShootInMidAirVehicleHeightTrial;//[Offset: 0xba4, Size: 32]
	VerifySwitch FarShootInMidAirVehicleHeightFurtherTrial;//[Offset: 0xbc4, Size: 32]
	VerifySwitch FarShootInMidAirPawnExceedThreshold;//[Offset: 0xbe4, Size: 32]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceTrial;//[Offset: 0xc04, Size: 32]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceFurtherTrial;//[Offset: 0xc24, Size: 32]
	VerifySwitch FarShootInMidAirPawnHeightTrial;//[Offset: 0xc44, Size: 32]
	VerifySwitch FarShootInMidAirPawnHeightFurtherTrial;//[Offset: 0xc64, Size: 32]
	VerifySwitch DSLongTimeMoveDistanceExceedThresholdCount;//[Offset: 0xc84, Size: 32]
	VerifySwitch DSRunning2DSpeedExceededCount;//[Offset: 0xca4, Size: 32]
	VerifySwitch DSRunning2DSpeedTrial;//[Offset: 0xcc4, Size: 32]
	VerifySwitch DSRunning2DSpeedFurtherTrial;//[Offset: 0xce4, Size: 32]
	VerifySwitch DSIgnoreNetworkDying2DSpeedExceededCount;//[Offset: 0xd04, Size: 32]
	VerifySwitch DSProneMoveSpeedExceedCount;//[Offset: 0xd24, Size: 32]
	VerifySwitch DSDyingMoveSpeedExceedCount;//[Offset: 0xd44, Size: 32]
	VerifySwitch DSSprintCrouchMoveSpeedExceedCount;//[Offset: 0xd64, Size: 32]
	VerifySwitch DSAimCrouchMoveSpeedExceedCount;//[Offset: 0xd84, Size: 32]
	VerifySwitch DSNonSprintNonAimCrouchMoveSpeedExceedCount;//[Offset: 0xda4, Size: 32]
	VerifySwitch NonGunADSFarShootCount;//[Offset: 0xdc4, Size: 32]
	VerifySwitch NonGunADSFarShootFromClientBulletDataCount;//[Offset: 0xde4, Size: 32]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceTrialCount;//[Offset: 0xe04, Size: 32]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceFurtherTrialCount;//[Offset: 0xe24, Size: 32]
	VerifySwitch ClientUploadFuzzyObjectVerifyFail;//[Offset: 0xe44, Size: 32]
	VerifySwitch ClientMoveTimeStampResetFrequencyExceedThreshold;//[Offset: 0xe64, Size: 32]
	VerifySwitch ShootBirdNonGunADSExceedThreshold;//[Offset: 0xe84, Size: 32]
	VerifySwitch ShootBirdNonGunADSDistanceTrial;//[Offset: 0xea4, Size: 32]
	VerifySwitch ShootBirdNonGunADSDistanceFurtherTrial;//[Offset: 0xec4, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedExceedThreshold;//[Offset: 0xee4, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceTrial;//[Offset: 0xf04, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceFurtherTrial;//[Offset: 0xf24, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedTrial;//[Offset: 0xf44, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedFurtherTrial;//[Offset: 0xf64, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKill;//[Offset: 0xf84, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillDistanceTrial;//[Offset: 0xfa4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillTimeTrial;//[Offset: 0xfc4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillMaxTime;//[Offset: 0xfe4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItem;//[Offset: 0x1004, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemDistanceTrial;//[Offset: 0x1024, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemTimeTrial;//[Offset: 0x1044, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemMaxTime;//[Offset: 0x1064, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKill;//[Offset: 0x1084, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillDistanceTrial;//[Offset: 0x10a4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillTimeTrial;//[Offset: 0x10c4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillMaxTime;//[Offset: 0x10e4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicle;//[Offset: 0x1104, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleDistanceTrial;//[Offset: 0x1124, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleTimeTrial;//[Offset: 0x1144, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleMaxTime;//[Offset: 0x1164, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicle;//[Offset: 0x1184, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleTimeTrial;//[Offset: 0x11a4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleMaxTime;//[Offset: 0x11c4, Size: 32]
	VerifySwitch IllegalTeamUpUseObjectTogether;//[Offset: 0x11e4, Size: 32]
	VerifySwitch IllegalTeamUpGetOnEnemyVehicleCount;//[Offset: 0x1204, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFoot;//[Offset: 0x1224, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFootDistanceTrial;//[Offset: 0x1244, Size: 32]
	VerifySwitch IllegalTeamUpStayOnEnemyVehicle;//[Offset: 0x1264, Size: 32]
	VerifySwitch KillBird;//[Offset: 0x1284, Size: 32]
	VerifySwitch ParachuteLandingSecondsExceedThreshold;//[Offset: 0x12a4, Size: 32]
	VerifySwitch ParachuteObliqueLandingSecondsExceedThreshold;//[Offset: 0x12c4, Size: 32]
	VerifySwitch ShootBird;//[Offset: 0x12ec, Size: 32]
	VerifySwitch DSFallingSpeedFailCount;//[Offset: 0x130c, Size: 32]
	VerifySwitch DSFallingHeightFailCount;//[Offset: 0x132c, Size: 32]
	int PVSInCityKillCount;//[Offset: 0x134c, Size: 4]
	int PVSNotInCityKillCount;//[Offset: 0x1350, Size: 4]
	float PVSInCityKillTotalTime;//[Offset: 0x1354, Size: 4]
	float PVSNotInCityKillTotalTime;//[Offset: 0x1358, Size: 4]
	float PVSInCityKillerTotalMoveDistance;//[Offset: 0x135c, Size: 4]
	float PVSNotInCityKillerTotalMoveDistance;//[Offset: 0x1360, Size: 4]
	int PVSRayUseTimeRatio;//[Offset: 0x1364, Size: 4]
	int PVSRayTaskFinishPercent;//[Offset: 0x1368, Size: 4]
	int PVSRayHidePercent;//[Offset: 0x136c, Size: 4]
	int PVSCellHidePercent;//[Offset: 0x1370, Size: 4]
	int PVSTotalHidePercent;//[Offset: 0x1374, Size: 4]
	VerifySwitch ShooterCapsuleCollided;//[Offset: 0x1380, Size: 32]
	VerifySwitch JumpReviewHighJumpExceed;//[Offset: 0x13a0, Size: 32]
	VerifySwitch JumpReviewFarJumpExceed;//[Offset: 0x13c0, Size: 32]
	VerifySwitch JumpReviewLowerFarJump;//[Offset: 0x13e0, Size: 32]
	float ActorTimeDilation;//[Offset: 0x1400, Size: 4]
	VerifySwitch SmallActorTimeDilationCount;//[Offset: 0x1404, Size: 32]
	VerifySwitch LargeRotateLockShooting;//[Offset: 0x1424, Size: 32]
	VerifySwitch SmallRotateLockShooting;//[Offset: 0x1444, Size: 32]
	VerifySwitch OneClipShootCount;//[Offset: 0x1464, Size: 32]
	VerifySwitch ClientWeaponFastReload;//[Offset: 0x1484, Size: 32]
	VerifySwitch WalkSpeedFailedCnt;//[Offset: 0x14a4, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistance2D;//[Offset: 0x15e4, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistance2DTrial;//[Offset: 0x1604, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistance2DFurther;//[Offset: 0x1624, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistanceZ;//[Offset: 0x1644, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistanceZTrial;//[Offset: 0x1664, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistanceZFurther;//[Offset: 0x1684, Size: 32]
	float MaxFallingSustainTime;//[Offset: 0x16a4, Size: 4]
	VerifySwitch ReplayMaxFallingSustainTime;//[Offset: 0x16a8, Size: 32]
	float MaxCustomMoveModeSustainTime;//[Offset: 0x16c8, Size: 4]
	VerifySwitch ReplayMaxCustomMoveModeSustainTime;//[Offset: 0x16cc, Size: 32]
	float MaxMoveDistance2DPerSecond;//[Offset: 0x16ec, Size: 4]
	float MaxDistanceToGround;//[Offset: 0x16f0, Size: 4]
	float MaxSingleShotDamage;//[Offset: 0x16f4, Size: 4]
	VerifySwitch ReplayMaxSingleShotDamage;//[Offset: 0x16f8, Size: 32]
	VerifySwitch UndergroundCount;//[Offset: 0x1718, Size: 32]
	VerifySwitch MoveDistance2DPerSecondAnomaly;//[Offset: 0x1738, Size: 32]
	VerifySwitch DistanceToGroundAnomaly;//[Offset: 0x1758, Size: 32]
	VerifySwitch SingleShotDamageAnomaly;//[Offset: 0x1778, Size: 32]
	BurstVerifySwitch DSSpeedOver10BurstCount;//[Offset: 0x1798, Size: 100]
	BurstVerifySwitch DSSpeedOver10BurstTrial;//[Offset: 0x17fc, Size: 100]
	VerifySwitch KillBeforeSearchNearbyHouse;//[Offset: 0x1860, Size: 32]
	VerifySwitch BandaCount;//[Offset: 0x1880, Size: 32]
	VerifySwitch LargeInstantAimShoot;//[Offset: 0x18a0, Size: 32]
	VerifySwitch SmallInstantAimShoot;//[Offset: 0x18c0, Size: 32]
	VerifySwitch LargeInstantAimHit;//[Offset: 0x18e0, Size: 32]
	VerifySwitch SmallInstantAimHit;//[Offset: 0x1900, Size: 32]
	BurstVerifySwitch ParachuteSpeedBurst;//[Offset: 0x1920, Size: 100]
	BurstVerifySwitch ParachuteSpeedBurstTrial;//[Offset: 0x1984, Size: 100]
	float ParachuteStartTime;//[Offset: 0x1a64, Size: 4]
	float ParachuteOpenTime;//[Offset: 0x1a68, Size: 4]
	float ParachuteCloseTime;//[Offset: 0x1a6c, Size: 4]
	float ParachuteStartHight;//[Offset: 0x1a70, Size: 4]
	float ParachuteOpenHight;//[Offset: 0x1a74, Size: 4]
	float ParachuteCloseHight;//[Offset: 0x1a78, Size: 4]
	<enum,uint32> ReportMiscMap;//[Offset: 0x1af4, Size: 60]
	int PlayerBadPingTimes;//[Offset: 0x1b30, Size: 4]
	VerifySwitch VsPetJumpHeightLimiter;//[Offset: 0x1b34, Size: 32]
	VerifySwitch VsPetMoveSpeedLimiter;//[Offset: 0x1b54, Size: 32]
	VerifySwitch VsBioVehicleMoveSpeedLimiter;//[Offset: 0x1b74, Size: 32]
	VerifySwitch ServerMoveCacheCountOver;//[Offset: 0x1b94, Size: 32]
	VerifySwitch ServerMoveBurst;//[Offset: 0x1bb4, Size: 32]
	VerifySwitch KillOtherAfterBurst;//[Offset: 0x1bd4, Size: 32]
	void ReportAntiCheatDetailData();// 0x372ceb4
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x372ce18
	void OnRecoverOnServer();// 0x372ce04
	void OnPreReconnectOnServer();// 0x372ce04
	FString GetWHCString(int StartInclusive, int EndInclusive);// 0x372ccb8
	int GetWHCountByID(const int ID);// 0x372cc38
	FString GetAACString(int StartInclusive, int EndInclusive);// 0x372caec
	int GetAACCountByID(const int ID);// 0x372ca6c
	void ExitParachute();// 0x372ca58
	void EnterParachute();// 0x372ca44
	void EnterJumping();// 0x372ca30

--------------------------------
Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BurstVerifySwitch.VerifySwitch
	float BurstTime;//[Offset: 0x5c, Size: 4]
	int BurstCount;//[Offset: 0x60, Size: 4]

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 4]
	uint32 EventID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x8, Size: 8]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: TeamMateStateInfo
	byte DirtyFlags;//[Offset: 0x0, Size: 1]
	STExtraPlayerState* PlayerState;//[Offset: 0x4, Size: 4]
	Vector_NetQuantize10 Location;//[Offset: 0x8, Size: 12]
	Rotator Rotation;//[Offset: 0x14, Size: 12]
	float PlayerHealth;//[Offset: 0x20, Size: 4]
	float PlayerHealthMax;//[Offset: 0x24, Size: 4]
	int MemberIdInVoiceRoom;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	byte uavType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: BackpackRepActor.PlayerReliableSequentialSyncActor.PlayerActorChannelExActor.Actor.Object
	BackpackComponent* BackpackComp;//[Offset: 0x314, Size: 4]
	IncNetArray ItemListNet;//[Offset: 0x318, Size: 24]
	void OnRep_ItemListNet();// 0x404fe28
	void NotifyItemUpdated(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x404fd20
	void NotifyItemRemoved(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x404fc18
	void NotifyItemEmpty(int Slack);// 0x404fba0
	void NotifyItemAdded(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x404fa98

--------------------------------
Class: PlayerReliableSequentialSyncActor.PlayerActorChannelExActor.Actor.Object
	PlayerController* OwningController;//[Offset: 0x310, Size: 4]
	void OnActorSpawned(Actor* Actor);// 0x3bb981c

--------------------------------
Class: PlayerActorChannelExActor.Actor.Object

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0xbc, Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0xc0, Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xc4, Size: 4]
	void SetAutoOpenDoorMode(int Mode);// 0x35d5e58
	void SetAutoOpenDoorEnable(bool bEnable);// 0x35d5dd8
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x35d5cdc
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int DoorState);// 0x35d5be0
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x35d5b60
	PUBGDoor* GetPriorityDoor();// 0x35d5b38
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x35d59e0
	void BP_SimulateUIClick(bool bExtraDoor);// 0x49216cc
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x49216cc

--------------------------------
Class: ChatComponent.LuaActorComponent.ActorComponent.Object
	int end_time;//[Offset: 0x150, Size: 4]
	FString Reason;//[Offset: 0x154, Size: 12]
	int[] audioChat;//[Offset: 0x160, Size: 12]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0x16c, Size: 12]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0x178, Size: 12]
	QuickChatOption[] allChatOption;//[Offset: 0x184, Size: 12]
	int MinTraceDist;//[Offset: 0x190, Size: 4]
	FString TeammateColor;//[Offset: 0x194, Size: 12]
	FString MyColor;//[Offset: 0x1a0, Size: 12]
	<int,FString> ActorNameList;//[Offset: 0x1ac, Size: 60]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x1e8, Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x224, Size: 12]
	float SendMsgCD;//[Offset: 0x230, Size: 4]
	ReportChatMsgInfo ChatMsgInfo;//[Offset: 0x234, Size: 28]
	float lastShowChatTime;//[Offset: 0x250, Size: 4]
	float ShowChatDuration;//[Offset: 0x254, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x258, Size: 12]
	FString EndChar;//[Offset: 0x264, Size: 12]
	FString ColonChar;//[Offset: 0x270, Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x27c, Size: 60]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x2b8, Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x2c4, Size: 4]
	byte[] ExtendParamsCache;//[Offset: 0x2cc, Size: 12]
	int itemIDOnGround;//[Offset: 0x320, Size: 4]
	int itemOnGroundNetGUID;//[Offset: 0x324, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x328, Size: 4]
	Vector hitItemPosition;//[Offset: 0x32c, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x33c, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x348, Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x354, Size: 12]
	InGameChatMsg CurrMsg;//[Offset: 0x360, Size: 88]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool AutoLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x49216cc
	void TransformMsgAndSend(FString Msg, int MsgID, int ItemId, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x35c6054
	void ShowTeamMsg(out const InGameChatMsg MsgItem, bool isMe, bool ShowChat, bool PlaySound, bool bControlByMaxShowDis);// 0x35c5e34
	void ShowQuickPanel(bool bShow);// 0x35c5db4
	void SetReportChatMsgInfo(out const InGameChatMsg OriginalChatMsg);// 0x35c5cd4
	void SetExtendParamsCache(out const byte[] Content);// 0x35c5c08
	void ServerSendMsgToAll(const InGameChatMsg MsgItem, byte CheckSetting);// 0x35c5ab8
	void ServerSendMsg(const InGameChatMsg MsgItem, byte CheckSetting, bool bIncludeTeammates);// 0x35c590c
	void ServerSendGift(const InGameChatMsg MsgItem);// 0x35c5804
	void SendToAllPlayer(FString Msg);// 0x35c5748
	void SendDirtyFilterContent(FString Content);// 0x49216cc
	void SendDirtyFilter(FString Name, FString Content, bool isMe, bool bSTTMsg);// 0x49216cc
	void SendCustomMsgToAll(FString Message, int MsgExtraParam, bool bSpeechToText);// 0x35c55fc
	void ReportBattleChat(int MsgID, FString Msg, int MsgExtraParam);// 0x49216cc
	void OnPreFilterFinish(FString Name, FString Content, bool isMe, bool bSTTMsg);// 0x49216cc
	void OnInviteNextBattle(FString gid, FString Name);// 0x35c54bc
	void OnFinishPreFilter(FString filterText, FString OriText);// 0x35c537c
	void OnFilterFinishWithMsgID(FString filterText, int MsgID, FString Name);// 0x49216cc
	void OnFilterFinish(FString filterText);// 0x49216cc
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x49216cc
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x49216cc
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x49216cc
	void MakeQuickSignMark(out const InGameChatMsg MsgItem, bool isMe, enum flagType, bool bControlByMaxShowDis);// 0x35c51b8
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x35c5078
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x35c4eec
	ReportChatMsgInfo GetReportChatMsgInfo();// 0x35c4e0c
	void ForceClearitemIDOnGround();// 0x35c4df8
	void FindTextIDByAudioID();// 0x49216cc
	void CloseChatHistoryList();// 0x49216cc
	void ClientReceiveMsg(const InGameChatMsg MsgItem, bool isMe, byte CheckSetting);// 0x35c4c8c
	void ClientReceiveGift(const InGameChatMsg MsgItem, bool isMe);// 0x35c4b68
	bool CheckSpecialChatCD(int MsgID);// 0x35c4ae8
	bool CheckNeedReportChatMsgInfo();// 0x35c4ac0
	byte CheckIsNeedShow(byte CheckSetting);// 0x35c4a38
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x35c497c
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x49216cc
	void AddOneMarkToUI(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x49216cc
	void AddFriendChat(FString gid, FString Name, FString Content, bool IsSelf);// 0x35c45a4

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 4]
	int RealTextID;//[Offset: 0x4, Size: 4]
	int AlternateTextID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0, Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 12]
	FString Content;//[Offset: 0xc, Size: 12]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int MsgType;//[Offset: 0x1c, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 1]
	int[] chatIDList;//[Offset: 0x4, Size: 12]
	int AlternateChatID;//[Offset: 0x10, Size: 4]
	int FlagIndex;//[Offset: 0x14, Size: 4]
	int traceDist;//[Offset: 0x18, Size: 4]
	float minDist;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ReportChatMsgInfo
	FString msgContent;//[Offset: 0x0, Size: 12]
	uint32 ItemId;//[Offset: 0xc, Size: 4]
	Vector hitPosition;//[Offset: 0x10, Size: 12]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0, Size: 4]
	int flagID;//[Offset: 0x4, Size: 4]
	Vector hitPosition;//[Offset: 0x8, Size: 12]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	uint32 playerIdentifier;//[Offset: 0xc, Size: 4]
	FString msgContent;//[Offset: 0x10, Size: 12]
	int MsgID;//[Offset: 0x1c, Size: 4]
	int audioID;//[Offset: 0x20, Size: 4]
	int ItemId;//[Offset: 0x24, Size: 4]
	FString PlayerKeyString;//[Offset: 0x28, Size: 12]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector hitPosition;//[Offset: 0x38, Size: 12]
	int itemIDOnGround;//[Offset: 0x44, Size: 4]
	bool bSTTMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	byte[] ExtendParams;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0xbc, Size: 12]
	Widget* MaskWidget;//[Offset: 0xc8, Size: 8]
	void SetMaskWidgetOnTop(bool bTop);// 0x367abfc
	void CreateGuideUI();// 0x49216cc

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0, Size: 4]
	int guildUI;//[Offset: 0x4, Size: 4]
	Vector2D Offset;//[Offset: 0x8, Size: 8]
	Vector2D Size;//[Offset: 0x10, Size: 8]
	int childData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignComponent.LuaActorComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0x14c, Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0x158, Size: 12]
	delegate OnDangerousQuickSignDelegate;//[Offset: 0x164, Size: 12]
	delegate FOnSignPickUpActoDelegate;//[Offset: 0x170, Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	int TextID_OutRange;//[Offset: 0x180, Size: 4]
	FString PreFix_Command;//[Offset: 0x184, Size: 12]
	FString PreFix_Command_Res;//[Offset: 0x190, Size: 12]
	FString PreFix_Mark;//[Offset: 0x19c, Size: 12]
	FString PreFix_MarkBox;//[Offset: 0x1a8, Size: 12]
	FName IgnoreTag;//[Offset: 0x1b8, Size: 8]
	int MinTraceDist;//[Offset: 0x1c0, Size: 4]
	int MaxTraceDist;//[Offset: 0x1c4, Size: 4]
	int ItemTraceDist;//[Offset: 0x1c8, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x1cc, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x1d0, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x1d4, Size: 4]
	float MinHighLightDangerousTime;//[Offset: 0x1d8, Size: 4]
	float MinHighLightDangerousDistance;//[Offset: 0x1dc, Size: 4]
	float DangerousMarkLifeSpan;//[Offset: 0x1e0, Size: 4]
	<int,DangerousSignInfo> LastDangerousID;//[Offset: 0x1e4, Size: 60]
	int MarkMaxNum;//[Offset: 0x220, Size: 4]
	float ReplyDelayTime;//[Offset: 0x224, Size: 4]
	bool bHasSendLongPressTLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x22c, Size: 4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x230, Size: 60]
	<class Object,FString> MarkNameClassMap;//[Offset: 0x26c, Size: 60]
	<int,FString> BoxTypeNameMap;//[Offset: 0x2a8, Size: 60]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x2e4, Size: 60]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x320, Size: 60]
	FString[] HasReplyMsg;//[Offset: 0x35c, Size: 12]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x368, Size: 60]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x3a4, Size: 60]
	int[] ServerCachedNetGUIDs;//[Offset: 0x3e0, Size: 12]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x3ec, Size: 12]
	FString[] TempIDArray;//[Offset: 0x3f8, Size: 12]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x404, Size: 60]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x440, Size: 60]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x4c4, Size: 60]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x500, Size: 60]
	byte MaxSendCountPerSecond;//[Offset: 0x53c, Size: 1]
	ReportQuickSignMsg SignMsgInfo;//[Offset: 0x540, Size: 20]
	<FString,QuickSignMark> CustomMarkInfoMap;//[Offset: 0x590, Size: 60]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x377cbe4
	void SpectatorActorMark(out const QuickSignMsg OriMarkInfo, out QuickSignMsg MarkInfo, Actor* Actor);// 0x49216cc
	void ShowMsgTipsVoice(out const QuickSignMsg MsgItem, bool IsSelf, FString PlayerKey);// 0x49216cc
	void SetReportSignMsgInfo(out const QuickSignMsg OriginalSignMsg);// 0x377cb08
	void ServerSendMsg(const QuickSignMsg MsgItem, byte SignType);// 0x377c9bc
	void ServerMarkCustom(out const QuickSignMsg MsgItem, float ShareDistance, bool ShareWithTeammates);// 0x377c850
	void ServerDelNetGuid(int Guid);// 0x377c7d8
	void ServerDelMsg(FString MsgID);// 0x377c6e4
	void ServerDelCustomMark(FString MsgID, bool ShareWithTeammates);// 0x377c594
	void ServerAddNetGuid(int Guid);// 0x377c51c
	void ReportQuickSign(out const QuickSignMsg MsgItem);// 0x49216cc
	void RemoveActorMask(int ActorNetGUID);// 0x377c468
	void OperMark(FString MsgID);// 0x377c3ac
	void OnPickUpActor(int Guid);// 0x377c334
	void MakeQuickNeed(enum SignSubType);// 0x377c2bc
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor, int RelationID, bool bNeedTransform);// 0x377c1b4
	void MakeQuickMark(Actor* SpecificActor);// 0x377c13c
	void MakeQuickCommand(byte SignType);// 0x377c0c4
	void MakeCustomMark(Vector targetPos, FString SignConfigKey);// 0x377bfc4
	bool IsSelfMark(FString MsgID);// 0x377bf00
	bool IsContainMark(FString MsgID);// 0x377be3c
	int GetVoiceAudioID(enum MsgType);// 0x49216cc
	ReportQuickSignMsg GetReportChatSignInfo();// 0x377bdf0
	bool GetRelationActorMsg(int ActorGUID, int RelationID, out QuickSignMsg MsgItem);// 0x377bc84
	bool GenerateMarkInfo(out const QuickSignMsg MsgItem, out QuickSignMark MarkInfo);// 0x49216cc
	FString FindMarkNameClassKey(class Object uMarkClass);// 0x377bb80
	void DelSpecialReplyMsg(out const QuickSignMark MsgItem);// 0x377ba88
	void DelMarkFromPool(FString MsgMark, bool bIsCheckSenderMap);// 0x377b980
	void DelAllMarkMsgForReplay();// 0x377b96c
	void DealWithNewMsg(out const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey, bool ShowChat, bool bControlByMaxShowDis);// 0x377b684
	void DealWithMarkCustomMsg(out const QuickSignMsg MsgItem, bool IsSelf);// 0x377b55c
	void ClientReceiveMsg(const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey);// 0x377b3b4
	void ClientMarkCustomMsg(const QuickSignMsg MsgItem, bool IsSelf);// 0x377b294
	void ClientDelMsg(FString MsgID);// 0x377b1d0
	void ClientDelCustomMarkMsg(FString MsgID);// 0x359a3e8
	bool CheckNeedReportSignMsgInfo();// 0x377b1a8
	void CheckMsgValid();// 0x377b194
	void AnalysisConfigKeyClass(FString ConfigId, FString ConfigScriptParam);// 0x377b054
	void AddSpecialReplyMsg(out const QuickSignMark MsgItem);// 0x377af5c
	void AddRelationActorMap(out const QuickSignMsg MsgItem);// 0x377ae80
	void AddNewMark(out const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey, bool bControlByMaxShowDis);// 0x377abe4
	void AddMarkToPool(out const QuickSignMark MsgMark, FString SenderPlayerKey);// 0x377a9cc
	void AddActorMask(int ActorNetGUID);// 0x377a918

--------------------------------
Class: DangerousSignInfo
	FString MsgID;//[Offset: 0x0, Size: 12]
	Vector LastDangerousLocation;//[Offset: 0xc, Size: 12]
	float LastMarkDangerousTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString MarkType;//[Offset: 0xc, Size: 12]
	FString IconPath;//[Offset: 0x18, Size: 12]
	FString IconBGPath;//[Offset: 0x24, Size: 12]
	FString IconOuterPath;//[Offset: 0x30, Size: 12]
	FString IconOuterBGPath;//[Offset: 0x3c, Size: 12]
	FString IconOutScreenIconPath;//[Offset: 0x48, Size: 12]
	FString IconOutScreenBGPath;//[Offset: 0x54, Size: 12]
	FString IconOutScreenArrowPath;//[Offset: 0x60, Size: 12]
	FString ReplyID;//[Offset: 0x6c, Size: 12]
	Vector Loc;//[Offset: 0x78, Size: 12]
	int MaxNum;//[Offset: 0x84, Size: 4]
	int LifeSpan;//[Offset: 0x88, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	FString SenderPlayerKey;//[Offset: 0x90, Size: 12]
	bool bControlByMaxShowDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ReportQuickSignMsg
	Vector HitPos;//[Offset: 0x0, Size: 12]
	uint32 ItemId;//[Offset: 0xc, Size: 4]
	enum MsgType;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xbc, Size: 4]
	FString OwningPlayerName;//[Offset: 0xc0, Size: 12]
	int RetrieveUseItemAreaType(int ItemId, Vector PlayerLocation);// 0x3575e68
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x3575df0
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x3575ce4
	int RetrieveLandLocType(FString TargetName);// 0x3575b84
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x357579c
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x49216cc
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x49216cc
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x49216cc
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x49216cc
	FString GetOwningPlayerName();// 0x35756dc
	FString GetMapName();// 0x357561c
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x49216cc
	int GetItemUseAreaIDFromDataTable(int ItemId, Vector InPlayerLocation);// 0x49216cc

--------------------------------
Class: BattleItemSpectatingData
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int AdditionalData;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 12]
	byte gender;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SyncOBDataActor.Actor.Object
	PlayerStaticInfoInOB[] TotalPlayersStatic;//[Offset: 0x308, Size: 12]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x314, Size: 12]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x320, Size: 12]
	PlayerBreathInfoList PlayerBreathInfoList;//[Offset: 0x330, Size: 32]
	PlayerFiringList PlayerFiringList;//[Offset: 0x350, Size: 16]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x360, Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x36c, Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x378, Size: 12]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x384, Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x390, Size: 60]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool bRefreshPosWhenDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	void OnRep_TotalPlayersStaticInfo();// 0x39b9d18
	void OnRep_RefreshTotalPlayers();// 0x39b9d04
	void OnRep_RefreshAirDropBox();// 0x39b9cf0
	void OnRep_PlayerFiringList();// 0x39b9cdc
	void OnRep_PlayerBreathInfoList();// 0x39b9cc8
	Vector GetNewestAirDropBoxPos();// 0x39b9c80
	PlayerInfoInOB[] GetNearPlayerList();// 0x39b9b70
	float GetBreath(uint32 InPlayerKey);// 0x39b9af0
	AirDropBoxInOb[] GetAirDropBoxList();// 0x39b9a84

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerOpenID;//[Offset: 0xc, Size: 12]
	FString PicUrl;//[Offset: 0x18, Size: 12]
	int TeamID;//[Offset: 0x24, Size: 4]
	byte IndexInMap;//[Offset: 0x28, Size: 1]
	uint64 UID;//[Offset: 0x30, Size: 8]
	uint32 PlayerKey;//[Offset: 0x38, Size: 4]

--------------------------------
Class: PlayerBaseInfoInOB
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 4]
	uint32 PlayerKey;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PlayerBreathInfoList
	uint64 PlayerIndexLow;//[Offset: 0x0, Size: 8]
	uint64 PlayerIndexHigh;//[Offset: 0x8, Size: 8]
	byte[] BreathList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: PlayerFiringList
	uint64 PlayerFiringIndexLow;//[Offset: 0x0, Size: 8]
	uint64 PlayerFiringIndexHigh;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	uint64 UID;//[Offset: 0x28, Size: 8]
	FString PlayerName;//[Offset: 0x30, Size: 12]
	FString PlayerOpenID;//[Offset: 0x3c, Size: 12]
	FString PicUrl;//[Offset: 0x48, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	int TeamID;//[Offset: 0x58, Size: 4]
	FString TeamName;//[Offset: 0x5c, Size: 12]
	Pawn* Character;//[Offset: 0x68, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 4]
	FString TeamName;//[Offset: 0x4, Size: 12]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString LogoPicUrl;//[Offset: 0x14, Size: 12]
	int KillNum;//[Offset: 0x20, Size: 4]
	int LiveMemberNum;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPlayerInfoInOB
	FString PlayerKey;//[Offset: 0x0, Size: 12]
	int TeamID;//[Offset: 0xc, Size: 4]
	Pawn* Character;//[Offset: 0x10, Size: 8]

--------------------------------
Class: AllStarReportData
	bool bShowReportFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int BeReportedNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PicUrl;//[Offset: 0xc, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int TeamID;//[Offset: 0x1c, Size: 4]
	uint64 UID;//[Offset: 0x20, Size: 8]
	Vector[] PosList;//[Offset: 0x28, Size: 12]
	uint32 PlayerKey;//[Offset: 0x34, Size: 4]

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 12]
	uint32 CharacterGUID;//[Offset: 0xc, Size: 4]
	int SyncTicket;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 12]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc, Size: 4]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x308, Size: 4]
	Rotator TargetKillerRotation;//[Offset: 0x30c, Size: 12]
	Actor* ReturnActor;//[Offset: 0x318, Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x348, Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x34c, Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x350, Size: 12]
	float MinMovingSpeed;//[Offset: 0x35c, Size: 4]
	float MaxMovingTime;//[Offset: 0x360, Size: 4]
	float ObservingTime;//[Offset: 0x364, Size: 4]
	float TrackingDelay;//[Offset: 0x368, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x36c, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x370, Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x378, Size: 4]
	float DriverArmLenth;//[Offset: 0x37c, Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x384, Size: 4]
	void TargetChangeForPCOB();// 0x34f4004
	static KillerTracker* StartTrackingKiller(class KillerTracker Template, Actor* Killer, PlayerController* PC, Vector InitLocation, Rotator InitRotation);// 0x369c8c0
	void ForceEnd();// 0x369c8ac

--------------------------------
Class: VehicleUserComponent.VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
	ItemDefineID LastUsedItemDefineID;//[Offset: 0x1b0, Size: 24]
	float LastFinishCD;//[Offset: 0x1c8, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool bReconnectSkipFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	delegate OnAtomicStateChanged;//[Offset: 0x1d0, Size: 12]
	delegate OnClosestVehicleChanged;//[Offset: 0x1dc, Size: 12]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0x1e8, Size: 4]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x1ec, Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x1f0, Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0x1f8, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x204, Size: 12]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x210, Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x21c, Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x230, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x244, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x254, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x258, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x25c, Size: 4]
	float MaxCanAimAngle;//[Offset: 0x260, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x268, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x26c, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x270, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x274, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x27c, Size: 4]
	float LastSpeed;//[Offset: 0x288, Size: 4]
	float LastHeight;//[Offset: 0x28c, Size: 4]
	float LastLandHeight;//[Offset: 0x290, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x298, Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x29c, Size: 4]
	Rotator InputExtraRot;//[Offset: 0x2a0, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x2ac, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x2bc, Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x2f8, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x300, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x308, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x30c, Size: 4]
	enum CurrentSeatType;//[Offset: 0x310, Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x33c, Size: 4]
	float FastestAllowDistance;//[Offset: 0x340, Size: 4]
	float NearVehicleTickRate;//[Offset: 0x344, Size: 4]
	int VehicleIconID;//[Offset: 0x348, Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x364, Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x374, Size: 12]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x380, Size: 12]
	delegate OnRefuseExchangeVehicleSeat;//[Offset: 0x38c, Size: 12]
	bool bDebugResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	float EnterVehicleCheatingCheckDis;//[Offset: 0x3a0, Size: 4]
	void UseVehicleWeaponOrNot();// 0x3a7f7d0
	void UpdateVehWeaponPassengerViewLimit();// 0x3a7f7bc
	void UpdatePassengerViewPitchLimit();// 0x3a7f7a8
	void TurnVehicle(float rate);// 0x3a7f728
	void TryUseHorn(bool bUse);// 0x3a7f6a8
	void TryShutDownUnmannedVehicle();// 0x3a7f694
	void TryPauseUnmannedVehicle();// 0x3a7f680
	bool TryLeanOutOrIn(bool bAutoLeanOut, bool bForce);// 0x3a7f5a8
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x3a7f530
	void TryLaunchCurrentUnmannedVehicle();// 0x3a7f510
	void TryExitVehicle();// 0x3a7f4fc
	void TryEnterVehicleInReady(STExtraVehicleBase* InVehicle, enum SeatType);// 0x3a7f440
	bool TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x3a7f37c
	void TryEnterAttachVehicle(enum InSeatType);// 0x3a7f304
	void TryChangeVehicleSeat();// 0x3a7f2f0
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x3a7f270
	bool TryChangeFreeFireSeatAndScopeIn();// 0x3a7f248
	bool TryChangeFreeFireSeatAndLeanOut();// 0x3a7f220
	void TryAutonomousDriving(bool bEnable);// 0x3a7f1a0
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x49216cc
	void TestMoveVehicleUp(float rate);// 0x3a7f128
	void TestMoveVehicleRight(float rate);// 0x3a7f0b0
	void TestMoveVehicleForward(float rate);// 0x3a7f038
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x3a7ef74
	void StopFireVehicleWeapon();// 0x3a7ef60
	bool ShowVehicleWeaponUI();// 0x3a7ef38
	void SetVehicleUserState(enum UserState);// 0x3a7eec4
	void SetVehicleIgnoreLookInput(bool bNewIgnore);// 0x3a7ee44
	void SetPlayMusic(bool bEnabled);// 0x3a7edc4
	void SetLastDriveVehicle(STExtraVehicleBase* LastVehicle);// 0x3a7ed4c
	void SetIsAutoMoveForward(bool IsEnable);// 0x3a7eccc
	void SetClosestVehicle(STExtraVehicleBase* InVehicle);// 0x3a7ec50
	void SetBrake(float rate);// 0x3a7ebd0
	void SetBoosting(bool bEnabled);// 0x3a7eb48
	void SetAirControlF(float rate);// 0x35f1608
	void SetAirControlB(float rate);// 0x370a03c
	void ServerUseVehicleWeaponOrNot(int SeatID, bool bUse);// 0x3a7ea38
	void ServerStopFireVehicleWeapon();// 0x3a7e9dc
	void ServerReqQuickSwitchSeat(STExtraPlayerCharacter* ReqTarget);// 0x3a7e928
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x3a7e864
	void ServerEquipVehicleWeaponOrNot(int SeatID, bool bEquip);// 0x3a7e754
	bool ServerEnterVehicleWithFailedReason(STExtraVehicleBase* InVehicle, enum SeatType, const int ConditionsIgnore, out enum OutFailedReason);// 0x3a7e5f4
	void ServerDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x3a7e57c
	void ServerAgreeQuickSwitchSeat(bool bIsAgree);// 0x3a7e4b4
	void Server_JoystickCenterClickHandler();// 0x3a7e458
	void SendToServerUnmannedVehicleUse();// 0x3a7e3fc
	void SendToServerUnmannedVehicleRecall();// 0x3a7e3a0
	void SendToServerUnmannedVehiclePause();// 0x3a7e344
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x3a7e2bc
	void RspRefuseExchangeVehicleSeat(STExtraPlayerCharacter* acceptPlayer);// 0x3a7e23c
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x3a7e170
	void RspLeanOut(bool bOut);// 0x3a7e0e8
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x3a7e01c
	void RspExitVehicle(bool bSuccess);// 0x372266c
	void RspExchangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd);// 0x3a7df10
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x3a7ddb4
	void RspEnterAttachVehicle(STExtraVehicleBase* InVehicle, bool InSuccess, enum InSeatType, int InSeatIndex);// 0x3a7dc0c
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn, int FailTips);// 0x3a7da10
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x3a7d938
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x3a7d83c
	void ReqShutDownUnmannedVehicle();// 0x3a7d7e0
	void ReqQuickSwitchSeat();// 0x3a7d7cc
	void ReqPauseUnmannedVehicle();// 0x3a7d770
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x3a7d674
	void ReqLeanOut(bool IsLeanOut);// 0x3a7d5ac
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x3a7d4f8
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x3a7d44c
	void ReqExchangeVehicleSeat();// 0x3a7d3f0
	void ReqEraseLastDriveVehicle();// 0x3a7d394
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x3a7d298
	void ReqEnterAttachVehicle(STExtraVehicleBase* InVehicle, enum InSeatType);// 0x3a7d19c
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x3a7d0e8
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x3a7d020
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x3a7cf58
	void ReqAutonomousDriving(bool bEnable);// 0x3a7ce90
	void ReqAcceptExchangeVehicleSeat(bool IsAccept);// 0x3a7cdc8
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x3a7cd50
	void OnUnmannedVehicle_Standby_Reconnet();// 0x49216cc
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x49216cc
	void OnServerReconnected();// 0x3a7cd3c
	void OnScopeInAfterChangeSeat();// 0x3a7cd28
	void OnRep_DefineID();// 0x3a7cd14
	void OnRep_BornInVehicle();// 0x3a7cd00
	void OnRefuseExchangeVehicleSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x49216cc
	void OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x49216cc
	void OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* Driver);// 0x49216cc
	void OnPauseUnmannedVehicleCompleted();// 0x49216cc
	void OnLeanOutAfterChangeSeat();// 0x3a7ccec
	void OnLaunchUnmannedVehicleCompleted();// 0x49216cc
	void OnInputAxisMoveRight(float rate);// 0x49216cc
	void OnInputAxisMoveForward(float rate);// 0x49216cc
	void OnExitVehicleCompleted();// 0x49216cc
	void OnEnterVehicleCompleted(enum SeatType);// 0x49216cc
	void OnCurrrentClosestVehicleChanged();// 0x49216cc
	void OnClientReconnected();// 0x3a7ccd8
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x49216cc
	void OnAtomicStateChanged__DelegateSignature(bool bEnter);// 0x49216cc
	void NotifyLeaveVehicleFailed();// 0x34d87f0
	void MoveVehicleUp(float rate);// 0x39c6f24
	void MoveVehicleRight(float rate);// 0x3a7cc58
	void MoveVehicleForward(float rate);// 0x39c6ea4
	void MaintenanceVehicle(float addpercenthp, bool fixtire);// 0x3a7cb94
	bool IsControllingUnmannedVehicle();// 0x3a7cb6c
	bool IsAutoDriving();// 0x3a7cb44
	bool IgnoreVehicleLookInput();// 0x3a7cb1c
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x3a7caa4
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x3a7ca90
	void HandleLocalBackpackCurrentWeaponFinished();// 0x3a7ca7c
	bool HandleClientReconnecting();// 0x3a7ca54
	enum GetVehicleUserState();// 0x3a7ca38
	STExtraVehicleBase* GetVehicle();// 0x3a68828
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x3a7ca1c
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x3a7c9f4
	bool GetAssistantState();// 0x3a7c9cc
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x3a7c86c
	void ForceEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x3a7c764
	void ForceChangeVehicleSeat(int TargetSeatIndex);// 0x35cbe94
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x3a7c608
	void FlipTrackVehicleDirection();// 0x3a7c5f4
	void FireVehicleWeapon();// 0x3a7c5e0
	void DoVehicleLeanOut(bool bLeanOut);// 0x3a7c558
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x3a7c480
	void DoEquipAction(bool bEquip);// 0x3a7c400
	void DoEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x3a7c2f8
	void ClosestVehicleDelegate__DelegateSignature();// 0x49216cc
	void ClientReqQuickSwitchSeat(STExtraPlayerCharacter* ReqOrign);// 0x3a7c244
	void ClientDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x3821ad0
	void Client_UnbindTouchEvents();// 0x3a7c1e8
	void Client_ShouldBindTouchEvents();// 0x3a7c18c
	void CheckVehicleFuel();// 0x3a7c178
	bool CheckCanLeanOutVehicle();// 0x3a7c150
	void ChangeAssistantState(bool bEnter);// 0x3a7c0d0
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x3a7c050
	bool CanUseVehicleHorn();// 0x3a7c028
	bool CanShowEnterBtn(STExtraVehicleBase* InVehicle);// 0x49216cc
	bool CanLeanOutVehicle(STExtraVehicleBase* InVehicle, STExtraPlayerCharacter* InCharacter, int InSeatIndex);// 0x3a7bf20
	bool CanConsumeReconnectSkipFlag();// 0x3a7bef8
	bool CanChangeSeat(STExtraVehicleBase* InVehicle);// 0x49216cc
	bool CanAutoDriving();// 0x3a7bed0
	void BrakeTrackVehicle(bool bIsBrake);// 0x3a7be50
	void AgreeQuickSwitchSeat(bool bIsAgree);// 0x3a7bdd0
	void AddVehicleFuel(float amount);// 0x370bf28

--------------------------------
Class: VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnCanEnterVehicleDelegate;//[Offset: 0x150, Size: 16]
	delegate OnCanExitVehicleDelegate;//[Offset: 0x160, Size: 16]
	STExtraVehicleBase* Vehicle;//[Offset: 0x170, Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0x174, Size: 4]
	enum VehicleUserState;//[Offset: 0x178, Size: 1]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x18c, Size: 4]
	void TurnVehicle(float InRate);// 0x3a7f728
	void SetUsingHorn(bool bEnabled);// 0x3a84c80
	void SetBrake(float InRate);// 0x3a7ebd0
	void SetBoosting(bool bEnabled);// 0x3a7eb48
	void SetAirControlF(float InRate);// 0x35f1608
	void SetAirControlB(float InRate);// 0x370a03c
	void ServerVehicleLeanOut(bool bLeanOut);// 0x3a84bf8
	void ServerChangeVehicleSeat(int InSeatIndex);// 0x3a84b78
	void OnEnterVehiclePreStopSkill(UAESkill* CurSkill);// 0x49216cc
	void MoveVehicleUp(float InRate);// 0x39c6f24
	void MoveVehicleRight(float InRate);// 0x3a7cc58
	void MoveVehicleForward(float InRate);// 0x39c6ea4
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x3a7c86c
	void ForceEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x3a7c764
	void ForceChangeVehicleSeat(int TargetSeatIndex);// 0x35cbe94
	void DoVehicleLeanOut(bool bLeanOut);// 0x3a7c558
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x3a7c480
	void DoEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x3a7c2f8
	bool DoChangeVehicleSeat(int InSeatIndex);// 0x3a84af0
	bool CanLeanOutOrIn(bool bLeanOut);// 0x3a84a60
	bool CanExitVehicle(bool bMustExit);// 0x3a849d0
	bool CanEnterVehicle(STExtraVehicleBase* InVehicle, byte SeatType, out int NewSeatIndex);// 0x3a848b8
	bool CanChangeVehicleSeat(out int InSeatIndex);// 0x3a84820
	bool BPCanEnterVehicle(STExtraVehicleBase* InVehicle, byte SeatType);// 0x3a84754
	void AddVehicleFuel(float InAmount);// 0x370bf28

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	enum PawnState;//[Offset: 0x4f8, Size: 1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fa, Size: 1]
	<enum,int> CastFailTipsIDMap;//[Offset: 0x4fc, Size: 60]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	bool IgnoreConnectionCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53a, Size: 1]
	int InteractiveSkillDurationPhase;//[Offset: 0x53c, Size: 4]
	float CancelLockDuration;//[Offset: 0x540, Size: 4]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x39dc47c
	float GetSkillDurationScale(UTSkillManagerComponent* SkillManagerComponent);// 0x39dc3f4
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x39dc330
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x39dc2b8

--------------------------------
Class: UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x4ec, Size: 12]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x39d72c0

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xbc, Size: 12]
	enum StartStateType;//[Offset: 0xc8, Size: 1]
	enum FinishStateType;//[Offset: 0xc9, Size: 1]
	State* CurrentState;//[Offset: 0xcc, Size: 4]
	enum CurrentStateType;//[Offset: 0xd0, Size: 1]
	enum LastStateType;//[Offset: 0xd1, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x4ac, Size: 12]
	FString TreasureBoxName;//[Offset: 0x4b8, Size: 12]
	float TotalHP;//[Offset: 0x4c4, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x4c8, Size: 4]
	float TotalTime;//[Offset: 0x4cc, Size: 4]
	int BoxId;//[Offset: 0x4d0, Size: 4]
	Vector GroupLoc;//[Offset: 0x4d4, Size: 12]
	float DestroyTime;//[Offset: 0x4e0, Size: 4]
	float OperationalDistance;//[Offset: 0x4e4, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x4e8, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x4ec, Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x4f0, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x520, Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x530, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x560, Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x570, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x5a0, Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x5b0, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x5e0, Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x5f0, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x620, Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x624, Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x628, Size: 4]
	class Controller[] InstigatorList;//[Offset: 0x62c, Size: 12]
	class Actor[] DamageCauserList;//[Offset: 0x638, Size: 12]
	enum PickUpBoxType;//[Offset: 0x644, Size: 1]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x646, Size: 1]
	int IconID;//[Offset: 0x648, Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	bool bRegisterRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x696, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x697, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x698, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x69c, Size: 4]
	int HideLightColumn;//[Offset: 0x6a0, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x6a4, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x6a8, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x6ac, Size: 4]
	bool GoUpAnimationHightEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	float GoUpAnimationYawSpeed;//[Offset: 0x6b4, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x6b8, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x6bc, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x6c8, Size: 12]
	bool bImmediateOpenBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	bool IsForbidOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d5, Size: 1]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d6, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x6d8, Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x6dc, Size: 4]
	float StartedTime;//[Offset: 0x6f8, Size: 4]
	enum CurState;//[Offset: 0x6fc, Size: 1]
	uint32 StartedPlayerKey;//[Offset: 0x700, Size: 4]
	int StartedTeamId;//[Offset: 0x704, Size: 4]
	float CountdownTime;//[Offset: 0x708, Size: 4]
	float StartDestroytime;//[Offset: 0x70c, Size: 4]
	int MonsterBoxId;//[Offset: 0x710, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x714, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x718, Size: 60]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x758, Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x75c, Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x760, Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x764, Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x768, Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x76c, Size: 4]
	Object* TriggerActionHost;//[Offset: 0x7a0, Size: 4]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x49216cc
	void ShowMonsterTreasureBox(PlayerController* PC);// 0x36d3d38
	void SetDropItems(out const DropPropData[] DropItems, STExtraPlayerState* PlayerState);// 0x49216cc
	void SetClientClientAutoActiveBoxCD(int CD);// 0x36d3cc0
	void SetAutoActiveBoxCD(int leftTime);// 0x36d3c48
	void OnTreasureBoxPicked__DelegateSignature();// 0x49216cc
	void OnSomeonePickItem(uint32 InPC, const int TypeSpecificID);// 0x36d3b8c
	void OnRep_HideLightColumn();// 0x36d3b78
	void OnRep_CurState();// 0x36d3b64
	void OnBoxEmpty();// 0x36d3b50
	void OnAnimationStop();// 0x36d3b3c
	bool IsShowIcon();// 0x36d3b14
	int GetMonsterBoxId();// 0x36d3aec
	enum[] GetDamageableGameObjectType();// 0x36d3a24
	enum GetCurState();// 0x36d39fc
	int GetClientClientAutoActiveBoxCD();// 0x36d39d4
	void DeActiveMonsterTreasureBox();// 0x36d39c0
	bool CanBeDamaged();// 0x36d3998
	void BPRepCurState();// 0x49216cc
	void BPOnStopMonsterTreasureBox();// 0x49216cc
	void BPOnStartMonsterTreasureBox();// 0x49216cc
	void BPOnHideLightColumn();// 0x49216cc
	void BPOnCountdownEnd();// 0x49216cc
	void BPOnBreakMonsterTreasureBox();// 0x49216cc
	void BPOnAnimationStop();// 0x49216cc
	void BPOnAnimationAkAudioStop();// 0x49216cc
	void BPOnAnimationAkAudioStart();// 0x49216cc
	FString BPGetTreasureBoxName();// 0x49216cc

--------------------------------
Class: UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int iRegionHouse;//[Offset: 0x3a4, Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x3a8, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x3ac, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x3b0, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x3b4, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x3b8, Size: 12]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x3c4, Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bShouldConsiderDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 1]
	byte[] SerializeData;//[Offset: 0x458, Size: 12]
	void RecordBreakWindowTlog(PlayerController* EventInstigator);// 0x409fda4
	static void ProcessWindowCreateList();// 0x409fd90
	void OnRep_WindowList();// 0x409fd7c
	void ClearWindowList();// 0x409fd68
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x409fb40

--------------------------------
Class: AvatarCapture.LuaActor.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x398, Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x39c, Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x3a0, Size: 4]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x3a4, Size: 12]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x3b0, Size: 60]
	class AnimInstance* animBP;//[Offset: 0x3ec, Size: 4]
	<int,class AnimInstance> AnimBP_SpecialMap;//[Offset: 0x3f0, Size: 60]
	class AnimInstance* AnimBP_Real;//[Offset: 0x42c, Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x430, Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x43c, Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool bShowingAvatarModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	<int,FName> SlotToSocket;//[Offset: 0x444, Size: 60]
	FName OBPlayerName;//[Offset: 0x480, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x488, Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x48c, Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x490, Size: 4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x494, Size: 12]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x4a0, Size: 12]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x4ac, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x4b0, Size: 12]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x4bc, Size: 12]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x4c8, Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x4d4, Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x4d8, Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x3505250
	void SetEnable(bool IsEnable);// 0x35051d0
	void ResetWeaponPendant(int WeaponId);// 0x3505158
	void ResetBackpackPendant(CharacterAvatarComponent2* AvatarComponent);// 0x35050e0
	void RenderCaptureScene();// 0x35050cc
	void RefreshAvatar();// 0x35050b8
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x3505010
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x3504f40
	void OnSimulatedWeaponChanged();// 0x3504f2c
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemId);// 0x3504e20
	void OnAvatarAllMeshLoaded();// 0x3504e0c
	void ModifyAnimationByEquipWeapon(int WeaponId);// 0x34cfbc4
	void ModifyAnimationByCharAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x34cff1c
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x3504cf0
	int[] GetWeaponSkinIDs();// 0x3504c30
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x3504c08
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x3504a94
	void EquipWeapon();// 0x3504a80
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x3504a08
	void DisplayAvatarWithComponent(bool IsEnable, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x35048fc
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x3504834
	void CreateWeapon(bool IsSkeletalMesh);// 0x35047b4
	void BluePrintSetEnable(bool IsEnable);// 0x49216cc
	void ApplyAnimation();// 0x35047a0

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x314, Size: 1]
	float FOVAngle;//[Offset: 0x318, Size: 4]
	float OrthoWidth;//[Offset: 0x31c, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x320, Size: 4]
	byte CaptureSource;//[Offset: 0x324, Size: 1]
	byte CompositeMode;//[Offset: 0x325, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x330, Size: 1312]
	float PostProcessBlendWeight;//[Offset: 0x850, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x860, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x8a4, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x8b0, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8bc, Size: 1]
	void CaptureScene();// 0x65fdee0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x65fddb0

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2ad, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2b0, Size: 12]
	Actor*[] HiddenActors;//[Offset: 0x2bc, Size: 12]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2c8, Size: 12]
	Actor*[] ShowOnlyActors;//[Offset: 0x2d4, Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 1]
	float LODDistanceFactor;//[Offset: 0x2e4, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x2e8, Size: 4]
	int CaptureSortPriority;//[Offset: 0x2ec, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x2f0, Size: 12]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x65fd820
	void ShowOnlyActorComponents(Actor* InActor);// 0x65fd7a8
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x65fd730
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x65fd6b8
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x65fd640
	void HideComponent(PrimitiveComponent* InComponent);// 0x65fd5c8
	void HideActorComponents(Actor* InActor);// 0x65fd550
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x65fd4d8
	void ClearHiddenComponents();// 0x65fd4c4

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a9, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x3ac, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x3b0, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x3b4, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x3c0, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x3c4, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x3c8, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x3cc, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x3d0, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x3d4, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x3d8, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x3e0, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x3e4, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x3ec, Size: 4]
	float FarShadowDistance;//[Offset: 0x3f0, Size: 4]
	LinearColor ShadowEdgeColor;//[Offset: 0x3f4, Size: 16]
	float DistanceFieldShadowDistance;//[Offset: 0x404, Size: 4]
	float LightSourceAngle;//[Offset: 0x408, Size: 4]
	float TraceDistance;//[Offset: 0x40c, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x410, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x420, Size: 1]
	bool bCastsLandscapeShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x420, Size: 1]
	float LandscapeShadowColor;//[Offset: 0x424, Size: 4]
	float LandscapeShadowOffset;//[Offset: 0x428, Size: 4]
	float LandscapeShadowSoftHeight;//[Offset: 0x42c, Size: 4]
	float LandscapeShadowPixelPrecision;//[Offset: 0x430, Size: 4]
	LandscapeGeometryAsset* LandscapeGeometry;//[Offset: 0x434, Size: 4]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	float SoftShadowSoftness;//[Offset: 0x43c, Size: 4]
	float ShadowBlendFactor;//[Offset: 0x440, Size: 4]
	float BoundsScale;//[Offset: 0x444, Size: 4]
	float NearPlaneOffset;//[Offset: 0x448, Size: 4]
	float FarPlaneOffset;//[Offset: 0x44c, Size: 4]
	float SplitNearOffset;//[Offset: 0x450, Size: 4]
	float SplitFarOffset;//[Offset: 0x454, Size: 4]
	float ShadowMapResolution;//[Offset: 0x458, Size: 4]
	Color ModulatedShadowColor;//[Offset: 0x45c, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x460, Size: 12]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46c, Size: 1]
	float ShadowControl;//[Offset: 0x470, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x474, Size: 1]
	int AtmosphereSunLightIndex;//[Offset: 0x478, Size: 4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x47c, Size: 16]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x490, Size: 4]
	float CloudShadowTileSize;//[Offset: 0x494, Size: 4]
	float CloudShadowDensity;//[Offset: 0x498, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x49c, Size: 8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x64cf278
	void SetOcclusionMaskDarkness(float NewValue);// 0x64cf200
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x64cf190
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x64cf110
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x64cf098
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x64cf020
	void SetDynamicShadowCascades(int NewValue);// 0x64cefa8
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x64cef24
	void SetCloudShadowTileSize(float InValue);// 0x64ceeac
	void SetCloudShadowTexture(Texture* InTexture);// 0x64cee34
	void SetCloudShadowDensity(float InDensity);// 0x64cedbc
	void SetCastsCloudShadow(bool InValue);// 0x64ced3c
	void SetCascadeTransitionFraction(float NewValue);// 0x64cecc4
	void SetCascadeDistributionExponent(float NewValue);// 0x64cec4c
	void SetAtmosphereSunLight(bool bNewValue);// 0x64cebcc

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LandscapeGeometryAsset.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x20, Size: 12]
	Vector[] Normals;//[Offset: 0x2c, Size: 12]
	Vector2D[] UV;//[Offset: 0x38, Size: 12]
	int[] Indices;//[Offset: 0x44, Size: 12]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x50, Size: 60]
	int ComponentIndexCount;//[Offset: 0x8c, Size: 4]
	int ComponentVertexCount;//[Offset: 0x90, Size: 4]
	<FString,LevelComponentMapValue> SubLevelComponentMap;//[Offset: 0x94, Size: 60]
	StaticMesh* HighQualityMesh;//[Offset: 0xd0, Size: 40]
	float HighQualityMeshDestroyHight;//[Offset: 0xf8, Size: 4]
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0xfc, Size: 60]

--------------------------------
Class: LevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 12]
	int[] IndexOffsetArray;//[Offset: 0xc, Size: 12]
	int[] IndexCountArray;//[Offset: 0x18, Size: 12]
	int[] VertexOffsetIndex;//[Offset: 0x24, Size: 12]
	int[] BorderIndex1;//[Offset: 0x30, Size: 12]
	int[] BorderIndex2;//[Offset: 0x3c, Size: 12]
	int[] BorderIndex3;//[Offset: 0x48, Size: 12]
	int[] BorderIndex4;//[Offset: 0x54, Size: 12]
	int[] UnderBorderIndex1;//[Offset: 0x60, Size: 12]
	int[] UnderBorderIndex2;//[Offset: 0x6c, Size: 12]
	int[] UnderBorderIndex3;//[Offset: 0x78, Size: 12]
	int[] UnderBorderIndex4;//[Offset: 0x84, Size: 12]
	int[] BorderIndicesBuffer1;//[Offset: 0x90, Size: 12]
	int[] BorderIndicesBuffer2;//[Offset: 0x9c, Size: 12]
	int[] BorderIndicesBuffer3;//[Offset: 0xa8, Size: 12]
	int[] BorderIndicesBuffer4;//[Offset: 0xb4, Size: 12]
	FString Sibling1Name;//[Offset: 0xc0, Size: 12]
	FString Sibling2Name;//[Offset: 0xcc, Size: 12]
	FString Sibling3Name;//[Offset: 0xd8, Size: 12]
	FString Sibling4Name;//[Offset: 0xe4, Size: 12]
	int Sibling1Idx;//[Offset: 0xf0, Size: 4]
	int Sibling2Idx;//[Offset: 0xf4, Size: 4]
	int Sibling3Idx;//[Offset: 0xf8, Size: 4]
	int Sibling4Idx;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x308, Size: 4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 12]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x308, Size: 60]
	class Actor[] IgnoreActorClass;//[Offset: 0x344, Size: 12]
	float DecalLongestDistance;//[Offset: 0x350, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x35c, Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x368, Size: 4]
	Transform DecalBoundTransform;//[Offset: 0x370, Size: 48]
	void RemoveDecalOnTimer(int[] DecalIdArray);// 0x36860a0
	bool RemoveDecal(const int ID, bool NeedUpdate);// 0x3685fd4
	bool HasDecalId(const int ID);// 0x3685f54
	int[] CreateNewDecal(out const IdeaDecalParam IdeaDecalParam, float AutoDisappearTime);// 0x3685d60

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 4]
	Texture* DecalTexure;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x744, Size: 4]
	PrimitiveComponent* GetDecalParentComponent();// 0x3685aa8

--------------------------------
Class: IdeaDecalParam
	Transform DecalTrans;//[Offset: 0x0, Size: 48]
	MaterialInstanceDynamic* DecalMaterialInstance;//[Offset: 0x30, Size: 4]
	Vector2D DecalUVOffset;//[Offset: 0x34, Size: 8]
	Vector2D DecalUVScale;//[Offset: 0x3c, Size: 8]
	byte TraceAxis;//[Offset: 0x44, Size: 1]
	bool bNegativeDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	enum DecalTraceTowardsType;//[Offset: 0x46, Size: 1]
	FName CollisionProfileName;//[Offset: 0x48, Size: 8]
	int TranslucentSortPriority;//[Offset: 0x50, Size: 4]
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	int ClipPlaneNum;//[Offset: 0x58, Size: 4]
	FName DecalTag;//[Offset: 0x60, Size: 8]
	bool bOnlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0xf4, Size: 4]
	Texture* DecalTexure;//[Offset: 0xf8, Size: 4]
	int CoordX;//[Offset: 0xfc, Size: 4]
	int CoordY;//[Offset: 0x100, Size: 4]
	Vector2D DecalSize;//[Offset: 0x104, Size: 8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	int GifDecalFrameNum;//[Offset: 0x110, Size: 4]
	float GifDecalFrameTime;//[Offset: 0x114, Size: 4]
	AkAudioEvent* DecalSound;//[Offset: 0x118, Size: 4]
	float AttenuationRadius;//[Offset: 0x11c, Size: 4]
	float OutputVolume;//[Offset: 0x120, Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x308, Size: 4]
	int RemainSupplyTimes;//[Offset: 0x30c, Size: 4]
	int SupplyBulletNum;//[Offset: 0x310, Size: 4]
	float ValidDistance;//[Offset: 0x314, Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x318, Size: 12]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x34d78d4

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x308, Size: 12]
	int AddMonsterExpNum;//[Offset: 0x314, Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x318, Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x31c, Size: 4]
	int UseSuccessTipsId;//[Offset: 0x320, Size: 4]
	float ValidDistance;//[Offset: 0x324, Size: 4]
	float SelfResetTime;//[Offset: 0x328, Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	enum EnhancerState;//[Offset: 0x32d, Size: 1]
	float ReadyTime;//[Offset: 0x330, Size: 4]
	float FixReadyTime;//[Offset: 0x334, Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x338, Size: 12]
	void StateChangeDelegate();// 0x34f5ff4
	void SetReadyTime(float SReadyTime);// 0x362becc
	void SetEState(enum EState);// 0x362be54
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x362bd58
	void ResetTimes();// 0x362bd44
	void ResetSelf();// 0x362bd30
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x362bcb0
	void ReadyTimeChangeDelegate();// 0x34ee148
	void OpenEffect();// 0x34cfeec
	void OnRep_StateChange();// 0x362bc9c
	void OnRep_ReadyTimeChange();// 0x362bc88
	void OnRep_FixReadyTimeChange();// 0x362bc88
	enum GetSpotState();// 0x362bc6c
	void DelayResetSelf();// 0x362bc58
	void CloseEffect();// 0x3585a04

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0, Size: 1]
	int SkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRevivalComponent.LuaActorComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x14c, Size: 4]
	int GotoSpectatingTime;//[Offset: 0x150, Size: 4]
	int64 FinishRevivalTime;//[Offset: 0x158, Size: 8]
	int64 StartObserverTime;//[Offset: 0x160, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0x168, Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x16c, Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0x178, Size: 120]
	DateTime BePickupTime;//[Offset: 0x1f0, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x37427fc
	void SetRemainingRevivalTime(int InValue);// 0x3742784
	void SetCaptureIDCardStatus(bool InValue);// 0x3742704
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x374268c
	void OnPlayerQuitSpectating();// 0x3742678
	void OnPlayerGotoSpectating();// 0x3742664
	void OnPlayerExitGame(FName ParamState, FString ParamReason);// 0x37424b8
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x3742438
	void LeaveRevivalState(uint32 SaviorKey);// 0x37423c0
	bool IsInWaittingRevivalState();// 0x3742398
	int GetRevivalCountDownTime();// 0x374237c
	int GetRemainingRevivalTime();// 0x3742354
	bool GetCaptureIDCardStatus();// 0x374232c
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x37422ac
	void EnterRevivalState();// 0x3742298
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x374219c
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x37420a0

--------------------------------
Class: RevivalPointActor.LuaActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x398, Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x3a0, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x3a4, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x3a8, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x3ac, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	float RevivalCDTime;//[Offset: 0x3b4, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	int RevivalCount;//[Offset: 0x3bc, Size: 4]
	delegate OnHaveRevivedTeammates;//[Offset: 0x3c0, Size: 12]
	int ID;//[Offset: 0x3cc, Size: 4]
	enum CurState;//[Offset: 0x3d0, Size: 1]
	enum preState;//[Offset: 0x3d1, Size: 1]
	int RevivalTime;//[Offset: 0x3d4, Size: 4]
	bool bCanBroadcastFatalDamageInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	int CurRevivalTime;//[Offset: 0x3dc, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	int OperationalDistance;//[Offset: 0x3e4, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x3e8, Size: 60]
	Transform PTowEleTransform;//[Offset: 0x430, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x460, Size: 60]
	FString ExParticleComponentTag;//[Offset: 0x49c, Size: 12]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x4a8, Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x4e4, Size: 4]
	int SmokingdisappearTime;//[Offset: 0x4e8, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	int IconID;//[Offset: 0x4f0, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x4f4, Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x500, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x508, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x520, Size: 8]
	void UpdateRevivalPointEffect();// 0x3786634
	void StartRevival();// 0x3786620
	void ShowOperatorUIByState();// 0x3585a04
	void SetDisableMapUI();// 0x378660c
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x378658c
	bool RecheckCurrentRevivingPlayers();// 0x3786564
	void OnRep_ShowSmoking();// 0x3786550
	void OnRep_RevivalPointState(enum LastPreState);// 0x37864d0
	void OnRep_RevivalCDTimeCur();// 0x34cfeec
	void OnRep_CurrentRevivingPlayers();// 0x37864bc
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x378643c
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x37863bc
	float GetRevivalCDTimeCurPercent();// 0x3786394
	float GetRevivalCDTimeCur();// 0x378636c
	float GetRevivalCDTime();// 0x3786344
	int GetId();// 0x378631c
	void DistanceChangedEvent(float Scale);// 0x49216cc
	void CheckOverlap();// 0x34f5ff4
	bool CanOperatorMe(STExtraPlayerController* InPC);// 0x378629c

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 4]
	int64 PickupTime;//[Offset: 0x8, Size: 8]
	int64 DroperTime;//[Offset: 0x10, Size: 8]
	FString PickUpName;//[Offset: 0x18, Size: 12]
	FString DroperPlayerName;//[Offset: 0x24, Size: 12]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0xd0, Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0xd4, Size: 4]
	CurveFloat* OffsetYCurve;//[Offset: 0xd8, Size: 4]
	Vector RandomVector;//[Offset: 0xdc, Size: 12]
	float TextScale;//[Offset: 0xe8, Size: 4]
	LinearColor NormalTextColor;//[Offset: 0xec, Size: 16]
	float HeadShotTextScale;//[Offset: 0xfc, Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x100, Size: 16]
	float BigDamageTextScale;//[Offset: 0x110, Size: 4]
	float BigDamage;//[Offset: 0x114, Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x118, Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x128, Size: 4]
	int FloatTextZorder;//[Offset: 0x12c, Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x134, Size: 12]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x140, Size: 12]
	float[] RecycleTimeList;//[Offset: 0x14c, Size: 12]
	float RecycleTime;//[Offset: 0x158, Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x15c, Size: 4]
	void UpdateTextWidgetPos(out ShowTextWidgetData ShowTextWidgetData);// 0x3642e44
	void ShowFloatingText(out const FloatingTextData FloatingTextData);// 0x3642db8
	void SetFloatingText(UserWidget* FloatingTextWidget, int Damage);// 0x49216cc
	void ReycleFloatingTextWidget();// 0x3642da4
	void PlayFloatingTextAnim(out ShowTextWidgetData ShowTextWidgetData, int Damage, bool IsHeadshot);// 0x3642c84
	void OnFloatingDamageText(float BaseDamage, bool IsHeadshot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x3642a5c
	ShowTextWidgetData GetShowTextWidgetData(out const FloatingTextData FloatingTextData);// 0x36429b4
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x36428c0

--------------------------------
Class: ShowTextWidgetData
	UserWidget* FloatingTextWidget;//[Offset: 0x0, Size: 4]
	float RecycleTime;//[Offset: 0x4, Size: 4]
	Vector ShowWorldPos;//[Offset: 0x8, Size: 12]
	Vector RandomOffset;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParachuteAnimAssetData
	<byte,AnimationAsset*> AnimAssetCache;//[Offset: 0x0, Size: 60]
	bool IsAnimCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	int CircleIndex;//[Offset: 0x430, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x434, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x450, Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x470, Size: 32]
	float TickOBPlayerCD;//[Offset: 0x490, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x494, Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x498, Size: 4]
	DynamicWeatherController* DstController;//[Offset: 0x49c, Size: 4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x4a0, Size: 4]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x4a8, Size: 68]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x4f8, Size: 12]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x504, Size: 12]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x360eca0
	void BlendToWeather(bool bDstWeather);// 0x360ec20

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x4, Size: 12]
	byte ParticleType;//[Offset: 0x10, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x14, Size: 4]
	FName ShaderName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 12]
	ExponentialHeightFog* Fog;//[Offset: 0xc, Size: 4]
	WeatherDstFog DstWeatherFog;//[Offset: 0x10, Size: 20]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x24, Size: 12]
	float blendTime;//[Offset: 0x30, Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x38, Size: 12]

--------------------------------
Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float StartDistance;//[Offset: 0x4, Size: 4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0, Size: 4]
	int[] HitNumEveryBodys;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LastGameRemainItemData
	FName TombName;//[Offset: 0x0, Size: 8]
	Vector DropGroundPoint;//[Offset: 0x8, Size: 12]
	FString TargetPlayerUID;//[Offset: 0x14, Size: 12]
	RemainItemData[] RemainItemDataList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RemainItemData
	int ItemId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x8, Size: 12]
	int SlotID;//[Offset: 0x14, Size: 4]
	int8 RemainType;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParachuteData
	uint64 UID;//[Offset: 0x0, Size: 8]
	float SlideDuration;//[Offset: 0x8, Size: 4]
	byte FollowState;//[Offset: 0xc, Size: 1]
	Vector ClientLandLocation;//[Offset: 0x10, Size: 12]
	Vector ClientLocation;//[Offset: 0x1c, Size: 12]
	Vector ServerLandLocation;//[Offset: 0x28, Size: 12]
	float SlideStartTime;//[Offset: 0x34, Size: 4]
	float SlideEndTime;//[Offset: 0x38, Size: 4]
	FString InputCount;//[Offset: 0x3c, Size: 12]
	FString PositionCheck;//[Offset: 0x48, Size: 12]
	FString ClientPositionDiff;//[Offset: 0x54, Size: 12]
	float LastCorrectionTime;//[Offset: 0x60, Size: 4]
	float LastCorrectionHeight;//[Offset: 0x64, Size: 4]
	Vector LastCorrectionLocation;//[Offset: 0x68, Size: 12]
	Vector LastCorrectedLocation;//[Offset: 0x74, Size: 12]

--------------------------------
Class: VehicleMoveDragData
	VehicleMoveDrag[] MoveDrag;//[Offset: 0x0, Size: 12]
	VehicleMoveDrag[] SimulatedMoveDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	byte VehicleType;//[Offset: 0x4, Size: 1]
	byte[] Reasons;//[Offset: 0x8, Size: 12]
	int[] Counters;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ScreenAppearanceActor.Actor.Object
	bool EnableScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	ScreenAppearanceProvider*[] DefaultScreenAppearanceProviders;//[Offset: 0x30c, Size: 12]
	<Actor*,ScreenAppearanceProviders> SavedPlayerScreenAppearances;//[Offset: 0x318, Size: 60]
	ScreenAppearanceProviders PersistentScreenAppearances;//[Offset: 0x354, Size: 12]
	void StopScreenAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x378ed00
	void StopScreenAppearance(ScreenAppearanceProvider* Provider);// 0x378ec88
	void StopAllScreenAppearances(const Actor* AppearanceOwner);// 0x378ec10
	void SetScalarParameter(out const FName ParameterName, float ParameterValue);// 0x378eb3c
	void SetFloatParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, float NewValue);// 0x378ea0c
	void SetColorParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, out const LinearColor NewValue);// 0x378e8d0
	void SetColorParameter(out const FName ParameterName, out const LinearColor ParameterValue);// 0x378e7f0
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x378e720
	Actor* ResolveAppearanceOwner(Actor* InOwner);// 0x378e698
	ScreenAppearanceProvider* PlayDefaultScreenAppearance(const Actor* AppearanceOwner, FName AppearanceName, const Actor* Causer);// 0x378e590
	bool IsScreenAppearancePlaying(const Actor* AppearanceOwner, FName AppearanceName);// 0x378e4cc
	bool HasActiveAppearance();// 0x378e4a4
	PlayerController* GetPlayerController();// 0x378e3ec
	PlayerCameraManager* GetPlayerCameraManager();// 0x378e378
	Actor* GetCurrentViewTarget();// 0x378e350
	ScreenAppearanceProvider* FindDefaultScreenAppearanceProvider(out const FName Name);// 0x378e2bc
	ScreenAppearanceProvider* FindAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x378e1f8

--------------------------------
Class: ScreenAppearanceProvider.Object
	FName AppearanceName;//[Offset: 0x20, Size: 8]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	float TickInterval;//[Offset: 0x2c, Size: 4]
	AppearanceParameter[] MaterialParameterCurve;//[Offset: 0x30, Size: 12]
	float LifeSpan;//[Offset: 0x3c, Size: 4]
	ScreenAppearanceScalarParameter[] AppearanceScalarParamters;//[Offset: 0x40, Size: 12]
	ScreenAppearanceColorParameter[] AppearanceColorParameters;//[Offset: 0x4c, Size: 12]
	bool bLobbyUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	ScreenAppearanceActor* OwnerAppearance;//[Offset: 0x70, Size: 4]
	Actor* OwnerActor;//[Offset: 0x74, Size: 4]
	FName[] HighPriorityProviderNames;//[Offset: 0x80, Size: 12]
	Transform AlignRelationTransform;//[Offset: 0x90, Size: 48]
	bool bAttachToActiveCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	void UpdateRelativeTransform(out const Transform RelativeTrans);// 0x3790010
	void SetVectorParameter(out const FName ParameterName, out const Vector Param);// 0x378ff30
	void SetLifeSpan(float NewLifeSpan);// 0x378febc
	void SetFloatParameter(out const FName ParameterName, float Param);// 0x378fde0
	void SetColorParameter(out const FName ParameterName, out const LinearColor Param);// 0x378fd00
	void SetAsset(Object* Asset);// 0x378fc80
	void ReceiveTick(float DeltaTime);// 0x49216cc
	void ReceiveEndPlay();// 0x49216cc
	void ReceiveBeginPlay();// 0x49216cc
	MaterialInterface* GetMaterial();// 0x378fc50
	void AlignActiveCamera(bool bForceUseActiveCamera);// 0x378fbd0

--------------------------------
Class: AppearanceParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	CurveBase* ControlCurve;//[Offset: 0x8, Size: 40]

--------------------------------
Class: ScreenAppearanceScalarParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ScreenAppearanceColorParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ScreenAppearanceProviders
	ScreenAppearanceProvider*[] ScreenAppearances;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PlayerPetSpectatorComponent.LuaActorComponent.ActorComponent.Object
	STExtraPetSpectatorCharacter* PetSpectatorPawn;//[Offset: 0x14c, Size: 4]
	bool bTeammatePetShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	STExtraPetSpectatorCharacter* SpawnPetSpectator(class Actor ActorClass, out const Transform SpawnTransform, Actor* Owner);// 0x373fbc0
	void OnRep_PetSpectatorPawn();// 0x49216cc
	bool CanControlSpectator();// 0x36d2874

--------------------------------
Class: CacheSACData
	STExtraShootWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	SACData SACData;//[Offset: 0x4, Size: 112]

--------------------------------
Class: BattleOpenSequencerInfo
	Transform StartPosition;//[Offset: 0x0, Size: 48]
	VehicleWarStartVehicleInfo[] VehicleInfoList;//[Offset: 0x30, Size: 12]
	float Time;//[Offset: 0x3c, Size: 4]
	float ServerStartTimestamp;//[Offset: 0x40, Size: 4]

--------------------------------
Class: VehicleWarStartVehicleInfo
	Vector Position;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	STExtraVehicleBase* Vehicle;//[Offset: 0x18, Size: 4]
	VehicleWarStartVehiclePlayerInfo DriverInfo;//[Offset: 0x1c, Size: 12]
	VehicleWarStartVehiclePlayerInfo PassengerInfo;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleWarStartVehiclePlayerInfo
	int upassLevel;//[Offset: 0x0, Size: 4]
	int upassScore;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BasePlayer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x308, Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x30c, Size: 4]
	float NearToFarDistance;//[Offset: 0x310, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x314, Size: 4]
	float PlayEffectDelayTime;//[Offset: 0x318, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x320, Size: 144]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]

--------------------------------
Class: HitTargetExtraData
	byte PlatForm;//[Offset: 0x0, Size: 1]
	int CharacterReplicatID;//[Offset: 0x4, Size: 4]
	int CharacterMovementReplicatID;//[Offset: 0x8, Size: 4]
	float LastReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xc, Size: 4]
	float LastReplicatedTimePass;//[Offset: 0x10, Size: 4]
	float CapsulePreMoveDistance;//[Offset: 0x14, Size: 4]
	float MeshOffsetDistance;//[Offset: 0x18, Size: 4]
	float AverageFPS;//[Offset: 0x1c, Size: 4]
	float ImpactFrameDeltaTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STExtraFireBalloon.LuaActor.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x3a0, Size: 4]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x3a4, Size: 4]
	FireBalloonMovementComponent* Movement;//[Offset: 0x3a8, Size: 4]
	int MapMarkTypeID;//[Offset: 0x3ac, Size: 4]
	enum MapMarkFlag;//[Offset: 0x3b0, Size: 1]
	Pawn* Driver;//[Offset: 0x3b8, Size: 4]
	float MoveUpValue;//[Offset: 0x3bc, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x3f0, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x3f4, Size: 4]
	float MoveUpScale;//[Offset: 0x3f8, Size: 4]
	float AutoFallOffSpeed;//[Offset: 0x3fc, Size: 4]
	bool UseStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	Vector ControlInputVector;//[Offset: 0x404, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x410, Size: 12]
	float TickInterval;//[Offset: 0x41c, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	Vector2D FObservationArea;//[Offset: 0x428, Size: 8]
	bool bIsInObservationArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x38b662c
	void SetMoveUpValue(float InMoveUpValue);// 0x38b65b4
	void SetMoveInputValue(float InMoveUpValue, float InMoveForwardValue, float InMoveRightValue);// 0x38b64ac
	void SetDriver(Pawn* InPawn);// 0x34cff1c
	void OnRep_Driver(Pawn* PrevDriver);// 0x38b642c
	Pawn* GetDriver();// 0x38b6410
	void CheckWishTask();// 0x49216cc
	bool CanBeDriver(Pawn* InPawn);// 0x38b6388
	void BPUpdateUIVisible();// 0x49216cc
	void BPUpdateObservationArea();// 0x49216cc
	void BPSetPlayCameraOffsetData(float FAlpha, bool IsUpdateCameraLocation);// 0x49216cc
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x49216cc

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x135, Size: 1]
	float InitialMaxTarceDist;//[Offset: 0x138, Size: 4]
	Vector InitialLocation;//[Offset: 0x13c, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x148, Size: 12]
	Actor* ActorOwner;//[Offset: 0x154, Size: 4]
	float MaxFlyHeight;//[Offset: 0x168, Size: 4]
	void SetSkipUpdate(bool bNewValue);// 0x38b5f48
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x49216cc
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x49216cc
	float GetMaxFlyHeight();// 0x38b5f18

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x124, Size: 4]
	float Acceleration;//[Offset: 0x128, Size: 4]
	float Deceleration;//[Offset: 0x12c, Size: 4]
	float TurningBoost;//[Offset: 0x130, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 1]

--------------------------------
Class: OBPlayerWeaponRecord
	uint64 OBPlayerWeaponRecord_UID;//[Offset: 0x0, Size: 8]
	OBSingleWeaponRecord[] WeaponReport;//[Offset: 0x8, Size: 12]

--------------------------------
Class: OBSingleWeaponRecord
	int OBSingleWeaponRecord_WeaponID;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockDownCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 12]
	FString GLVersion;//[Offset: 0xc, Size: 12]
	FString OSVersion;//[Offset: 0x18, Size: 12]
	FString DeviceMake;//[Offset: 0x24, Size: 12]
	FString DeviceModel;//[Offset: 0x30, Size: 12]
	FString VulkanVersion;//[Offset: 0x3c, Size: 12]
	FString MemorySizeInGB;//[Offset: 0x48, Size: 12]
	FString OpenID;//[Offset: 0x54, Size: 12]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRemainTombBox.PlayerTombBox.LuaActor.Actor.Object
	FString TargetPlayerUID;//[Offset: 0x494, Size: 12]
	int MiniMapIconID;//[Offset: 0x4a0, Size: 4]
	int MiniMapInstanceID;//[Offset: 0x4a4, Size: 4]
	bool bIsSearchedRemainBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	void OnRep_IsSearchedRemainBox();// 0x37400e4
	void HandleBoxIsSearched();// 0x37400c8

--------------------------------
Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0, Size: 4]
	int Score;//[Offset: 0x4, Size: 4]
	enum ScoreChangeReason;//[Offset: 0x8, Size: 1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc, Size: 4]
	int HighestScore;//[Offset: 0x10, Size: 4]
	int FollowScore;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 12]
	int8 PlatID;//[Offset: 0x14, Size: 1]
	uint16 AreaID;//[Offset: 0x16, Size: 2]
	FString ZoneID;//[Offset: 0x18, Size: 12]
	VehicleMovePoint[] PointList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0, Size: 4]
	int8 Type;//[Offset: 0x4, Size: 1]
	int X;//[Offset: 0x8, Size: 4]
	int Y;//[Offset: 0xc, Size: 4]
	int Z;//[Offset: 0x10, Size: 4]
	int Speed;//[Offset: 0x14, Size: 4]
	int8 VehicleN2oUse;//[Offset: 0x18, Size: 1]
	int8 VehicleCarPetUse;//[Offset: 0x19, Size: 1]
	int VehicleMoveDistance;//[Offset: 0x1c, Size: 4]
	int TimeStamp;//[Offset: 0x20, Size: 4]
	int8 RoleType;//[Offset: 0x24, Size: 1]

--------------------------------
Class: PlayerPositionFlow
	PlayBaseInfo PlayerBaseInfo;//[Offset: 0x0, Size: 40]
	int FirstPointTimestamp;//[Offset: 0x28, Size: 4]
	IntPosition2D[] PointList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: PlayBaseInfo
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 12]
	int8 PlatID;//[Offset: 0x14, Size: 1]
	uint16 AreaID;//[Offset: 0x16, Size: 2]
	FString ZoneID;//[Offset: 0x18, Size: 12]

--------------------------------
Class: IntPosition2D
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0, Size: 12]
	enum CaculateType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SIslandInactiveClearComponent.ActorComponent.Object
	float ComponentTickInterval;//[Offset: 0xbc, Size: 4]
	float InactiveCheckGap;//[Offset: 0xc0, Size: 4]
	float InactiveTimeForTipPreTime;//[Offset: 0xc8, Size: 4]
	float PreActiveTime;//[Offset: 0xcc, Size: 4]
	float ClientSendActiveRPCGap;//[Offset: 0xd4, Size: 4]
	bool bIsClientActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	enum SIslandActiveType;//[Offset: 0xd9, Size: 1]
	Vector PrePawnLoc;//[Offset: 0xdc, Size: 12]
	Rotator PreControllerRotation;//[Offset: 0xe8, Size: 12]
	delegate OnInactiveTipInSocialIslandDelegate;//[Offset: 0xf4, Size: 12]
	void ServerMarkPlayerActive();// 0x37be20c
	void OnInactiveTipInSocialIslandDelegate__DelegateSignature(float RemainTime);// 0x49216cc
	void MarkPlayerActive();// 0x37be1f8
	void KickOutPlayer();// 0x37be1e4
	void ClientShowKickOutTip(float RemainTime);// 0x34b6c34
	void ClientCachedActiveState();// 0x37be1d0
	bool CheckForMovement();// 0x37be1a8
	void CheckForInactive();// 0x35b345c

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0x1b8, Size: 12]
	delegate OnKillInfoDownloadComplete;//[Offset: 0x1c4, Size: 12]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x1d0, Size: 4]
	FString ReplayServerURL;//[Offset: 0x200, Size: 12]
	void RequestReplaysFromServer(FString URLString);// 0x370707c
	void ClearStreams();// 0x3707068

--------------------------------
Class: DailyTaskReportInfo
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	uint32 TaskSyncToDsTs;//[Offset: 0xc, Size: 4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0x10, Size: 12]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: DailyTaskAwardInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	TaskAwardItemInfo[] AwardList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: TaskAwardItemInfo
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FatalDamageParameterCompress
	FString CauserName;//[Offset: 0x0, Size: 12]
	FString VictimName;//[Offset: 0xc, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x18, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x24, Size: 12]
	FString RealKillerName;//[Offset: 0x30, Size: 12]
	FString CauserNation;//[Offset: 0x3c, Size: 12]
	FString VictimNation;//[Offset: 0x48, Size: 12]
	int DamageType;//[Offset: 0x54, Size: 4]
	int AdditionalParam;//[Offset: 0x58, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int ResultHealthStatus;//[Offset: 0x60, Size: 4]
	int Relationship;//[Offset: 0x64, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x68, Size: 4]
	int realKillerNewKillNum;//[Offset: 0x6c, Size: 4]
	uint32 CauserKey;//[Offset: 0x70, Size: 4]
	uint32 VictimKey;//[Offset: 0x74, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x78, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x7c, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x80, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x84, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x88, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x8c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x90, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x94, Size: 4]
	int CauserType;//[Offset: 0x98, Size: 4]
	int VictimType;//[Offset: 0x9c, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0xa0, Size: 12]
	int AssistNum;//[Offset: 0xac, Size: 4]
	bool isCausedByDevliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]

--------------------------------
Class: KillInfoRecordData
	FString Killer;//[Offset: 0x0, Size: 12]
	FString Victim;//[Offset: 0xc, Size: 12]
	bool bKillDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	uint64 KillTimeStampDemoTime;//[Offset: 0x20, Size: 8]
	uint64 KillTimeStampGameTime;//[Offset: 0x28, Size: 8]
	FString SafeLabel;//[Offset: 0x30, Size: 12]
	int SafeParam1;//[Offset: 0x3c, Size: 4]
	int SafeParam2;//[Offset: 0x40, Size: 4]
	float RecordTimestamp;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MLAIInfoRecordData
	float MLAITimeStamp;//[Offset: 0x0, Size: 4]
	uint32 PlayerKey;//[Offset: 0x4, Size: 4]
	uint64 UID;//[Offset: 0x8, Size: 8]
	byte Type;//[Offset: 0x10, Size: 1]
	<FString,FString> AdditionalData;//[Offset: 0x14, Size: 60]

--------------------------------
Class: PlayerEventInfoRecordData
	FString PlayerUID;//[Offset: 0x0, Size: 12]
	uint64 RecordTimestamp;//[Offset: 0x10, Size: 8]
	uint32 EventType;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SingleStrategyRecordFullInfo
	int StrategyTypeInReplay;//[Offset: 0x0, Size: 4]
	SingleStrategyRecordInReplay SingleStrategyRecordInReplay;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SingleStrategyRecordInReplay
	byte CountValue;//[Offset: 0x0, Size: 1]
	uint16 ReplayTimeStampInSeconds;//[Offset: 0x2, Size: 2]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	DeathReplayData DeathReplayData;//[Offset: 0x1b8, Size: 232]
	DeathPlayCameraShot* DeathPlayCameraShot;//[Offset: 0x2a0, Size: 4]
	void SetMurderInfo();// 0x35fbc98
	void PlayCollectReplay(FString DemoName);// 0x3523d84
	void OnKillOrPutDownMessageEvent();// 0x35fbc84
	void OnDeathEvent(STExtraBaseCharacter* BaseCharacter);// 0x35fbc0c
	void OnClientObserveCharacterEvent();// 0x35fbbf8
	bool IsSwitchedOffByDevice();// 0x35fbbd0
	bool IsNewDeathReplay();// 0x35fbba8
	bool HaveRecordingData_New();// 0x35fbb80
	FString GetReplayTargetName();// 0x35fbac0
	STExtraPlayerCharacter* GetDeadCharacter();// 0x35fba98
	BattleDeathPlaybackInfo GetBattleDeathPlaybackInfo();// 0x35fba58
	void GetAllCollectReplay(out FString[] OutCollectReplayList);// 0x35fb924

--------------------------------
Class: DeathPlayCameraShot.Actor.Object
	FString LuaFilePath;//[Offset: 0x34c, Size: 12]
	void StopCameraShot();// 0x34d87f0
	void StartCameraShot(PlayerController* PlayerController);// 0x34ee164

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x218, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x240, Size: 4]
	int MaxHoursForKeepingFiles;//[Offset: 0x244, Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bUsingMapPlayerItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x24c, Size: 12]
	int EnableCheckpointConfig;//[Offset: 0x258, Size: 4]
	float CheckpointUploadDelayConfig;//[Offset: 0x25c, Size: 4]
	float CheckpointSaveMaxMSPerFrameConfig;//[Offset: 0x260, Size: 4]
	int[] DelayStopRecordingGameModes;//[Offset: 0x264, Size: 12]
	float DelayStopRecordingTime;//[Offset: 0x270, Size: 4]
	int DefaultCompressionFlag;//[Offset: 0x274, Size: 4]
	int NewCompressionFlag;//[Offset: 0x278, Size: 4]
	int OodleCompressor;//[Offset: 0x27c, Size: 4]
	int Oodlelevel;//[Offset: 0x280, Size: 4]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x298, Size: 12]
	bool bUseWeseeStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	FString RecordTargetUID;//[Offset: 0x2a8, Size: 12]
	int RecordTargetTeamID;//[Offset: 0x2b4, Size: 4]
	int StrategyRecordMaxSizeInByte;//[Offset: 0x3f4, Size: 4]
	void SetNewCompressionFlag(int InFlag);// 0x35d6f44
	void SetForceAllowFreeView(bool bInValue);// 0x35d6ec4
	bool PlayDemoWithFilename(FString DemoName);// 0x35d6e00
	void OnPlayerKilledOthersPlayer(out const FatalDamageParameter FatalDamageParameter);// 0x35d6cb0
	bool LoadKillInfo();// 0x35d6c7c
	FString GetStrategyNameByID(const int ID);// 0x35d6b74
	bool GetShowOrHideUIForAntiCheat();// 0x35d6b4c
	FString GetRealNameByUID(FString PlayerUID);// 0x35d6a08
	FString GetDemoPlayTime();// 0x35d6948
	float GetCurrentTimeInReplay();// 0x35d6920
	FString DecryptWeirdString(out FString InStr);// 0x35d67cc
	void AddStrategyRecord(FString UID, const int StrategyTypeInReplay, out const SingleStrategyRecordInReplay InSingleStrategyRecordInReplay);// 0x35d6674

--------------------------------
Class: WonderfulPlayback.GameReplay.Object
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	enum WonderfulPlayType;//[Offset: 0x1bb, Size: 1]
	bool bWaitFirstPeriodShowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float FirstPeriodUIShowTime;//[Offset: 0x278, Size: 4]
	void SetWonderfulPlayType(enum InWonderfulPlayType);// 0x3ac7f94
	bool PlayReplayMemory();// 0x3ac7f6c
	bool PlayReplayFile(FString DemoName);// 0x3ac7ea8
	bool PlayReplayAgain();// 0x3ac7e80
	bool IsSwitchedOffByDevice();// 0x3ac7e58
	void GetUserWonderfulList(out FString[] OutWonderfulList, FString InRoleId);// 0x3ac7c94
	uint64 GetTargetUID();// 0x3ac7c6c
	FString GetTargetPlayerName();// 0x3ac7bac
	FString GetTargetOpenID();// 0x3ac7aec
	uint64 GetTargetGameID();// 0x3ac7ac4
	FString GetReplayFileNamePart();// 0x3ac7a04
	WonderfulTypeInfo GetCurWonderfulTypeInfo();// 0x3ac793c
	void GetAllWonderfulList(out FString[] OutWonderfulList);// 0x3ac7808
	void FetchBattleWonderfulInfo();// 0x3ac77f4
	uint64[] DecryptFileName(FString DemoFullPathName);// 0x3ac76b0
	FString BPGetTargetUID();// 0x3ac75f0
	FString BPGetTargetGameID();// 0x3ac7530
	enum AnalysizeReplayFile(FString InReplayFileName);// 0x3ac746c
	LobbyWonderfulInfo AnalysizeInfoFile(FString InInfoFileName);// 0x3ac7384

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x1c, Size: 12]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 12]
	int bUseFeatureSet;//[Offset: 0xc, Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x10, Size: 12]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x1c, Size: 12]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x28, Size: 12]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x34, Size: 12]
	FString[] ExcludeComponentsList_DSAI;//[Offset: 0x40, Size: 12]
	FString[] ExcludeComponentsList_DSMLAI;//[Offset: 0x4c, Size: 12]
	FString[] ExcludeComponentsList_ClientAI;//[Offset: 0x58, Size: 12]
	FString[] ExcludeComponentsList_Standalone;//[Offset: 0x64, Size: 12]
	FString[] ExcludeComponentsList_StandaloneAI;//[Offset: 0x70, Size: 12]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarItemDownload.Object
	int DisableInBattleThreshold;//[Offset: 0x1c, Size: 4]
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate OnItemDownloadDelegate);// 0x3519618
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x3519404
	void SetDisableInBattleThreshold(uint32 InThreshold);// 0x3519384
	int GetDisableInBattleThreshold();// 0x34da7a8

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	void ConditionSetFireGyroData(bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue3, bool CallFunc_EqualEqual_FloatFloat_ReturnValue4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue5, bool CallFunc_EqualEqual_FloatFloat_ReturnValue6, bool CallFunc_EqualEqual_FloatFloat_ReturnValue7, bool CallFunc_EqualEqual_FloatFloat_ReturnValue8, bool CallFunc_EqualEqual_FloatFloat_ReturnValue9, bool CallFunc_EqualEqual_FloatFloat_ReturnValue10);// 0x49216cc
	void Init(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x49216cc
	int CrossHairColor;//[Offset: 0x20, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	int LeftHandFire;//[Offset: 0x28, Size: 4]
	int Gyroscope;//[Offset: 0x2c, Size: 4]
	int ArtQuality;//[Offset: 0x30, Size: 4]
	float ViewPercentage;//[Offset: 0x34, Size: 4]
	int FireMode;//[Offset: 0x38, Size: 4]
	int VehicleControlMode;//[Offset: 0x3c, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	int CameraLensSensibility;//[Offset: 0x44, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float MainVolumValue;//[Offset: 0x90, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float EffectVolumValue;//[Offset: 0x98, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float UIVolumValue;//[Offset: 0xa0, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float BGMVolumValue;//[Offset: 0xa8, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int VoiceChannel;//[Offset: 0xb0, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float SocialIslandOtherVolume;//[Offset: 0xc0, Size: 4]
	float SpeakerVolumValue;//[Offset: 0xc4, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	int LimitBandage;//[Offset: 0xdc, Size: 4]
	int LimitMedical;//[Offset: 0xe0, Size: 4]
	int LimitAnodyne;//[Offset: 0xe4, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xe8, Size: 4]
	int LimitAdrenaline;//[Offset: 0xec, Size: 4]
	int LimitShouliudan;//[Offset: 0xf0, Size: 4]
	int LimitYanwudan;//[Offset: 0xf4, Size: 4]
	int LimitZhenbaodan;//[Offset: 0xf8, Size: 4]
	int LimitRanshaodan;//[Offset: 0xfc, Size: 4]
	int LimitBullet9mm;//[Offset: 0x100, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x104, Size: 4]
	int Limit12koujing;//[Offset: 0x108, Size: 4]
	int Limit45koujing;//[Offset: 0x10c, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x110, Size: 4]
	int Limitbolt;//[Offset: 0x114, Size: 4]
	int LimitBullet5;//[Offset: 0x118, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int FPSLevel;//[Offset: 0x120, Size: 4]
	int ArtStyle;//[Offset: 0x124, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x128, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x12c, Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x168, Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a8, Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	int[] DefaultPlayerChatQuickTextIDList;//[Offset: 0x1e8, Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1f4, Size: 12]
	int LRShootMode;//[Offset: 0x200, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x208, Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x214, Size: 12]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	int NewGetActorID;//[Offset: 0x224, Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	float 3DTouchValue;//[Offset: 0x22c, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	int ShotGunShootMode;//[Offset: 0x234, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x238, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x23c, Size: 4]
	float VehicleEye;//[Offset: 0x240, Size: 4]
	float ParachuteEye;//[Offset: 0x244, Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x248, Size: 12]
	int RepeatingWeaponShootMode;//[Offset: 0x254, Size: 4]
	int DrivingViewMode;//[Offset: 0x258, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	int FpViewValue;//[Offset: 0x260, Size: 4]
	float CamFpFreeEye;//[Offset: 0x264, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x268, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x26c, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x270, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x278, Size: 4]
	FString currentLanguage;//[Offset: 0x27c, Size: 12]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	FString lastViewDayTime;//[Offset: 0x28c, Size: 12]
	FString lastViewWeekTime;//[Offset: 0x298, Size: 12]
	bool DoblySwitch2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool DoblySwitch1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x2a8, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x2ac, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x2b0, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b4, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b8, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x2bc, Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	int RedDotCHColor;//[Offset: 0x2c4, Size: 4]
	int RedDotCHType;//[Offset: 0x2c8, Size: 4]
	int HolographicCHColor;//[Offset: 0x2cc, Size: 4]
	int HolographicCHType;//[Offset: 0x2d0, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x2d4, Size: 4]
	int Sinper2xCHType;//[Offset: 0x2d8, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2dc, Size: 4]
	int Sniper3xCHType;//[Offset: 0x2e0, Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e8, Size: 60]
	int LimitFirstAidKit;//[Offset: 0x324, Size: 4]
	FString XGLanguageTag;//[Offset: 0x328, Size: 12]
	FString XGTimezoneTag;//[Offset: 0x334, Size: 12]
	FString XGPushNightTag;//[Offset: 0x340, Size: 12]
	FString XGPushDayTag;//[Offset: 0x34c, Size: 12]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x35c, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x360, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x364, Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	int LimitSniper2X;//[Offset: 0x36c, Size: 4]
	int LimitSniper3X;//[Offset: 0x370, Size: 4]
	int LimitSniper4X;//[Offset: 0x374, Size: 4]
	int LimitSniper6X;//[Offset: 0x378, Size: 4]
	int LimitSniper8X;//[Offset: 0x37c, Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	int SidewaysMode;//[Offset: 0x384, Size: 4]
	int OpenMirrorMode;//[Offset: 0x388, Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool OBSTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool OBSPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool OBSBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	int LobbyStyleID;//[Offset: 0x394, Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	float ScreenLightness;//[Offset: 0x39c, Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	FString FirstChargeVersion;//[Offset: 0x3a4, Size: 12]
	FString RechargePosSave;//[Offset: 0x3b0, Size: 12]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3c0, Size: 60]
	int LimitViscidityBomb;//[Offset: 0x3fc, Size: 4]
	int LimitZombieGrenade;//[Offset: 0x400, Size: 4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x408, Size: 4]
	int SideMirrorMode;//[Offset: 0x40c, Size: 4]
	int[] DefaultPlayerWheelChatQuickTextIDList;//[Offset: 0x410, Size: 12]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41f, Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x420, Size: 4]
	int LimitAntidote;//[Offset: 0x424, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x42c, Size: 12]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x43c, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	int FPPFireMode;//[Offset: 0x444, Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x448, Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x44c, Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x450, Size: 4]
	byte TurboLastQuality;//[Offset: 0x454, Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x458, Size: 60]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x494, Size: 60]
	int[] UselessWeakGuidIDs;//[Offset: 0x4d0, Size: 12]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de, Size: 1]
	int[] ChatOptiongList5;//[Offset: 0x4e0, Size: 12]
	int[] ChatOptiongList6;//[Offset: 0x4ec, Size: 12]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	int TD_FireMode;//[Offset: 0x4fc, Size: 4]
	int TD_FPPFireMode;//[Offset: 0x500, Size: 4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	float TD_3DTouchValue;//[Offset: 0x508, Size: 4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x510, Size: 4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	int LimitSnowMan;//[Offset: 0x518, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
	int ColorBlindnessType;//[Offset: 0x520, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x528, Size: 4]
	float UAVScopePercent;//[Offset: 0x52c, Size: 4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	int SideMirrorType;//[Offset: 0x534, Size: 4]
	int SideMirrorColor;//[Offset: 0x538, Size: 4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x540, Size: 12]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	bool DisableAutoPickDropMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	int AutoPickClipType;//[Offset: 0x558, Size: 4]
	int[] QuickSignIDList;//[Offset: 0x55c, Size: 12]
	int[] QuickSignWheelIDList;//[Offset: 0x568, Size: 12]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 1]
	int HitEffectColor;//[Offset: 0x578, Size: 4]
	int HurtEffectColor;//[Offset: 0x57c, Size: 4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	int ProfiledScreenSwitch;//[Offset: 0x584, Size: 4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	int BuildDoubleClick;//[Offset: 0x58c, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x590, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x594, Size: 4]
	int DoubleClickDistance;//[Offset: 0x598, Size: 4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	int BattleFPS;//[Offset: 0x5a0, Size: 4]
	int BattleRenderStyle;//[Offset: 0x5a4, Size: 4]
	int BattleRenderQuality;//[Offset: 0x5a8, Size: 4]
	int LobbyFPS;//[Offset: 0x5ac, Size: 4]
	int LobbyRenderStyle;//[Offset: 0x5b0, Size: 4]
	int LobbyRenderQuality;//[Offset: 0x5b4, Size: 4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 1]
	bool OBSLogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bb, Size: 1]
	bool OBSHitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x5c0, Size: 60]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x5fc, Size: 60]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x638, Size: 60]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x674, Size: 60]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x6b0, Size: 60]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x6ec, Size: 60]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72f, Size: 1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x734, Size: 60]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x770, Size: 60]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x7ac, Size: 60]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x7e8, Size: 60]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool OBSCustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x826, Size: 1]
	bool SettingDisableAutoPickupDropMirrorRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x827, Size: 1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	float CamLensSenShoulderTPP;//[Offset: 0x82c, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x830, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x834, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x838, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x83c, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x840, Size: 4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	int ShoulderMode;//[Offset: 0x848, Size: 4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	bool OBSSmokeGrenadeCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84e, Size: 1]
	bool OBSSmokeGrenadeAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84f, Size: 1]
	bool bGunAccessoriesAddDefauleM4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool bGunAccessoriesGuidedRemoveSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	bool bGunAccessoriesGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x852, Size: 1]
	bool bGunAccessoriesGuidedSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x853, Size: 1]
	bool bGunAccessoriesGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	bool bAddedGunAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 1]
	bool bGunSensitivityGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x856, Size: 1]
	bool bGunSensitivityGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x857, Size: 1]
	bool bGunSensitivityGuidedCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	int GunSensitivitySingleTrainingGuideCount;//[Offset: 0x85c, Size: 4]
	bool bGunSensitivitySingleTrainingGuideTiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	bool OBSShowOwnWeaponKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	bool isCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 1]
	FString CloudSensitivityPlayerId_Custom;//[Offset: 0x864, Size: 12]
	bool isOtherCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	bool IsCloudAndLocalSame_SensitivityCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 1]
	bool isCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x872, Size: 1]
	FString CloudAccessoriesPlayerId_Custom;//[Offset: 0x874, Size: 12]
	bool isOtherCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	bool IsCloudAndLocalSame_AccessoriesCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 1]
	int TpViewValue;//[Offset: 0x884, Size: 4]
	bool bHasCloudCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	int PickUpListMode;//[Offset: 0x88c, Size: 4]
	bool GyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	bool bHasCloudCustomAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 1]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x894, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x898, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x89c, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x8a0, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x8a4, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x8a8, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x8ac, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x8b0, Size: 4]
	bool AutoParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 1]
	bool MapMarkEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b5, Size: 1]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x8b8, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x8bc, Size: 4]
	bool FireGyroscopeRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	bool HasOperateRingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 1]
	bool HasOperatedRingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c2, Size: 1]
	bool SettingBasicGyroRverseRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c3, Size: 1]
	bool bLbsNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bLbsWarZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	bool AutoContinueHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c6, Size: 1]
	bool FocalLengthModifySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c7, Size: 1]
	bool FocalLengthModifySwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool bRecordWonderfulReplayOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	int AntiAliasingValue;//[Offset: 0x8cc, Size: 4]
	bool OneKeyProneAndCrouchSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	bool HasOperateOneKeyProneAndCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 1]
	bool bLbsMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d2, Size: 1]
	bool bLbsChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d3, Size: 1]
	bool bOpenBattleNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 1]
	bool bOpenLobbyNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d5, Size: 1]
	int JoystickSprintSensitity;//[Offset: 0x8d8, Size: 4]
	bool bHideIngameUIAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	bool bCloseHitHeadAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 1]
	int HightLightReshowAirLineTimes;//[Offset: 0x8e0, Size: 4]
	bool bHasSetWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	bool bIsShowedHideUIGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e5, Size: 1]
	bool bAmericanCustomSettingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e6, Size: 1]
	float CamLensSenNoneSniper;//[Offset: 0x8e8, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8ec, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x8f0, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x8f4, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x8f8, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x8fc, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x900, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x904, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x908, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x90c, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x910, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x914, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x918, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x91c, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x920, Size: 4]
	float VehicleEye;//[Offset: 0x924, Size: 4]
	float ParachuteEye;//[Offset: 0x928, Size: 4]
	float CamFpFreeEye;//[Offset: 0x92c, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x930, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x934, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x938, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x93c, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x940, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x944, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x948, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x94c, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x950, Size: 4]
	float CamLensSenShoulderTPP;//[Offset: 0x954, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x958, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x95c, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x960, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x964, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x968, Size: 4]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x96c, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x970, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x974, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x978, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x97c, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x980, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x984, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x988, Size: 4]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x98c, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x990, Size: 4]
	bool bInitedCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 1]
	bool bFireGyroSenUseGryo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x995, Size: 1]
	bool bFireCamSenUseCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x996, Size: 1]
	bool AutoHitMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x997, Size: 1]
	bool bResetDeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998, Size: 1]
	bool SwitchSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x999, Size: 1]
	bool bConsumeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99a, Size: 1]
	int[] MaxACCount;//[Offset: 0x99c, Size: 12]
	int[] DefaultACCount;//[Offset: 0x9a8, Size: 12]
	bool HasOperateSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 1]
	bool UseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 1]
	<FString,int> OpenStoreTimes;//[Offset: 0x9b8, Size: 60]
	<int,int> setting_ver_info;//[Offset: 0x9f4, Size: 60]
	bool bIsBackpackExpand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	bool OpenMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 1]
	int HapticSwitch;//[Offset: 0xa34, Size: 4]
	int HapticVoiceSwitch;//[Offset: 0xa38, Size: 4]
	int HapticCharacterSwitch;//[Offset: 0xa3c, Size: 4]
	int HapticWeaponSwitch;//[Offset: 0xa40, Size: 4]
	int HapticVehicleSwitch;//[Offset: 0xa44, Size: 4]
	bool bHapticVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 1]
	bool bHapticVoiceGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa49, Size: 1]
	bool bHapticVoiceGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4a, Size: 1]
	bool bHapticVoiceVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4b, Size: 1]
	bool bHapticCharacterBeGunAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 1]
	bool bHapticCharacterBeOtherAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4d, Size: 1]
	bool bHapticCharacterFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4e, Size: 1]
	bool bHapticWeaponAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4f, Size: 1]
	bool bHapticWeaponAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	bool bHapticWeaponSemiAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa51, Size: 1]
	bool bHapticWeaponSniper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa52, Size: 1]
	bool bHapticWeaponOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa53, Size: 1]
	bool bHapticVehicleDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa54, Size: 1]
	bool bHapticVehicleBeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa55, Size: 1]
	bool bHapticVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa56, Size: 1]
	bool bIsOpenMapTaskUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa57, Size: 1]
	bool AmmoRemain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	bool ReshowAirlineRouteBtnChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa59, Size: 1]
	bool OBMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5a, Size: 1]
	bool OBTeammateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5b, Size: 1]
	bool OBPlayerInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa60, Size: 12]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa6c, Size: 12]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa78, Size: 12]
	int PlayerChatIndex;//[Offset: 0xa84, Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xa88, Size: 12]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xa94, Size: 12]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xaa0, Size: 12]
	int PlayerChatActorID;//[Offset: 0xaac, Size: 4]
	bool bHasCloudBasicSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 1]
	bool isCloudSettingBasicUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab1, Size: 1]
	FString NewbieGuideDailyLimit;//[Offset: 0xab4, Size: 12]
	int LastSaveSettingBasicTM;//[Offset: 0xac0, Size: 4]
	bool OpenSilentChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 1]
	bool DoubleIntimacyHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac5, Size: 1]
	bool backgroundChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac6, Size: 1]
	bool bCanMapLongPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac7, Size: 1]
	float NoUIOpacity;//[Offset: 0xac8, Size: 4]
	int OldMarkStyle;//[Offset: 0xacc, Size: 4]
	<FString,FString> PlayerFeatureVoiceCfg;//[Offset: 0xad0, Size: 60]
	int SoundVisualizationType;//[Offset: 0xb0c, Size: 4]
	bool OBSSwitchOBHttpComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 1]
	bool LocalHideMetroArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb11, Size: 1]
	int TargetNameGuideTimes;//[Offset: 0xb14, Size: 4]
	int DangerousGuideTimes;//[Offset: 0xb18, Size: 4]
	int HunterTaskGuideTimes;//[Offset: 0xb1c, Size: 4]
	FString SynthesizeFormula;//[Offset: 0xb20, Size: 12]
	bool GrenadeSettingPredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	bool AutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2d, Size: 1]
	bool LocalHideMetroBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2e, Size: 1]
	int LevelPreLoadSetting;//[Offset: 0xb30, Size: 4]
	bool bSpectatingPetVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 1]
	int DBCollectGuideNum;//[Offset: 0xb38, Size: 4]
	int preTeamUpChat;//[Offset: 0xb3c, Size: 4]
	bool bLastIsPreTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 1]
	bool bLastMicPreTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb42, Size: 1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb43, Size: 1]
	int NewVar;//[Offset: 0xb44, Size: 4]
	int AutoPickMeleeType;//[Offset: 0xb48, Size: 4]
	bool AutoUseMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4c, Size: 1]
	int AuxiliaryVoice;//[Offset: 0xb50, Size: 4]
	int InterruptReloadType;//[Offset: 0xb54, Size: 4]
	bool OpenPetSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb58, Size: 1]
	int DefaultMeleeWeaponType;//[Offset: 0xb5c, Size: 4]
	float WeaponVolumValue;//[Offset: 0xb60, Size: 4]
	float VehicleVolumValue;//[Offset: 0xb64, Size: 4]
	float VoiceVolumValue;//[Offset: 0xb68, Size: 4]

--------------------------------
Class: UAELobbyGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
