//Generated by @snakee2019 (telegram)

Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 12]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 12]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60, Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c, Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74, Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78, Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c, Size: 136]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x108, Size: 4]
	Object*[] SyncPreLoadSet;//[Offset: 0x10c, Size: 12]
	NavigationSystem* NavigationSystem;//[Offset: 0x134, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x138, Size: 4]
	GameStateBase* GameState;//[Offset: 0x13c, Size: 4]
	AISystemBase* AISystem;//[Offset: 0x140, Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x144, Size: 4]
	Level*[] Levels;//[Offset: 0x148, Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x154, Size: 12]
	Level* CurrentLevel;//[Offset: 0x164, Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x168, Size: 4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x16c, Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x178, Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x17c, Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x6ec, Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x732, Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x4a51734

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 4]
	Model* Model;//[Offset: 0x8c, Size: 4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x254, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x264, Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x268, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 1]
	int HighDeviceMemoryTotalSize;//[Offset: 0x2c8, Size: 4]
	int LowDeviceMemoryTotalSize;//[Offset: 0x2cc, Size: 4]
	WorldSettings* WorldSettings;//[Offset: 0x308, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x310, Size: 12]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x680, Size: 4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x2c4, Size: 4]
	float MinDrawDistance;//[Offset: 0x2c8, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x2cc, Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x2d0, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x2d4, Size: 4]
	bool UseScopeDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x2d9, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2da, Size: 1]
	enum LightmapType;//[Offset: 0x2db, Size: 1]
	bool bForceInjectToHierarchicalSurfel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dc, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dc, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2dc, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2dc, Size: 1]
	bool bAsyncGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dd, Size: 1]
	bool bGenerateOverlapEventsByBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dd, Size: 1]
	bool bGenerateOverlapEventsByRoot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dd, Size: 1]
	bool bGenerateOverlapEventsByBoundsDoubleCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dd, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2dd, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dd, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2dd, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2dd, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2de, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2de, Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2de, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2de, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2de, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2de, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2de, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2de, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2df, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2df, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2df, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2df, Size: 1]
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2df, Size: 1]
	bool bIdeaOutlineNew;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2df, Size: 1]
	bool bIdeaOutlineOcclusionHighlight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2df, Size: 1]
	bool bIdeaOverrideOutlineAndOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2df, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x2e4, Size: 16]
	LinearColor IdeaOutlineOcclusionColor;//[Offset: 0x2f4, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x308, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x30d, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x310, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x320, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bEnableTransparentZWrite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bOnlyAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bAlwaysAvailableOccluder;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x331, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x331, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x331, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x331, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x331, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x332, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x332, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x332, Size: 1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x332, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x332, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x332, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x332, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x332, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x333, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x333, Size: 1]
	bool bReceiveLandscapeShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x333, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x333, Size: 1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x333, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x333, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x333, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x333, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x334, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x334, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x335, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x337, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x338, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x339, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x33c, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x340, Size: 4]
	int TranslucencySortGroupPriority;//[Offset: 0x344, Size: 4]
	int VisibilityId;//[Offset: 0x348, Size: 4]
	byte PrimitiveShadingStrategy;//[Offset: 0x350, Size: 1]
	byte ShadingRate;//[Offset: 0x351, Size: 1]
	float FOVAdaptiveShadingFactor;//[Offset: 0x354, Size: 4]
	bool bUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 1]
	bool bAffectAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x358, Size: 1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x360, Size: 4]
	float BoundsScale;//[Offset: 0x368, Size: 4]
	float OCBoundsScale;//[Offset: 0x36c, Size: 4]
	int OCBoundsExtent;//[Offset: 0x370, Size: 4]
	float LastSubmitTime;//[Offset: 0x374, Size: 4]
	float LastRenderTime;//[Offset: 0x378, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x37c, Size: 4]
	float ShadowLastRenderTime;//[Offset: 0x380, Size: 4]
	bool bFreezeMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x388, Size: 12]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x394, Size: 12]
	MaterialInterface*[] LODDefault;//[Offset: 0x3a8, Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x400, Size: 320]
	bool bUseNoCollisionProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	delegate OnComponentHit;//[Offset: 0x544, Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x550, Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x55c, Size: 12]
	delegate OnComponentWake;//[Offset: 0x568, Size: 12]
	delegate OnComponentSleep;//[Offset: 0x574, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x58c, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x598, Size: 12]
	delegate OnClicked;//[Offset: 0x5a4, Size: 12]
	delegate OnReleased;//[Offset: 0x5b0, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x5bc, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x5c8, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x5d4, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x5e0, Size: 12]
	<int,MaterialInterface*> LowLevelLODMaterial;//[Offset: 0x5f8, Size: 60]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x634, Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x638, Size: 60]
	bool WasRecentlyRendered(float Tolerance);// 0x67864ec
	void WakeRigidBody(FName BoneName);// 0x678646c
	void WakeAllRigidBodies();// 0x6786450
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x67863b8
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x6786334
	void SetUnderWater(bool bNewUnderWater);// 0x67862b4
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x678623c
	void SetTranslucentSortGroupPriority(int NewTranslucentSortGroupPriority);// 0x67861c4
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x6786144
	void SetSimulatePhysics(bool bSimulate);// 0x5b8d164
	void SetRenderInMono(bool bValue);// 0x67860c4
	void SetRenderInMainPass(bool bValue);// 0x6786044
	void SetRenderCustomDepth(bool bValue);// 0x6785fc4
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x6785f44
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x3a5033c
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x6785e30
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x6785d0c
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x6785d0c
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x6785bf8
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x6785ae4
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x67859ac
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x67859ac
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x678592c
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x67858ac
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x6785828
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x38892e0
	void SetMaterialByNameAsyncCallBack(FName MaterialSlotName, MaterialInterface* AssetPtr);// 0x6785658
	void SetMaterialByNameAsync(FName MaterialSlotName, FString MaterialPath);// 0x67854ac
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x67853e8
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x6785324
	void SetMassScale(FName BoneName, float InMassScale);// 0x6785258
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x678513c
	void SetMaskFilter(int InMaskFilter);// 0x67850c4
	void SetLODDefault(int LODIndex, MaterialInterface* LODMat);// 0x6785008
	void SetLockedAxis(byte LockedAxis);// 0x6784f88
	void SetLinearDamping(float InDamping);// 0x6784f08
	void SetIdeaOverrideOutlineAndOcclusion(bool bOutlineAndOcclusion);// 0x363b278
	void SetIdeaOutlineUseNormalInVertexColor(bool bNewUseNormalInVertexColor);// 0x363b278
	void SetIdeaOutlineOcclusionHighlight(bool bOcclusionHighlight);// 0x363b278
	void SetIdeaOutlineOcclusionColor(out const LinearColor InOcclusionColor);// 0x6784e84
	void SetIdeaOutlineNew(bool bNew);// 0x363b278
	void SetEnableGravity(bool bGravityEnabled);// 0x6784dfc
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x6784d7c
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x6784d04
	void SetDrawDyeing(bool bNewDrawOutline);// 0x6784c84
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x6784c0c
	void SetCustomDepthStencilValue(int Value);// 0x6784b94
	void SetCullDistance(float NewCullDistance);// 0x6784b1c
	void SetConstraintMode(byte ConstraintMode);// 0x6784a9c
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x67849d8
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x6784958
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x67848d8
	void SetCollisionObjectType(byte Channel);// 0x36beabc
	void SetCollisionEnabled(byte NewType);// 0x6784858
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x6784798
	void SetCastShadow(bool NewCastShadow);// 0x672f51c
	void SetCastPhotonShadow(bool bNewCastPhotonShadow);// 0x6784718
	void SetBoundsScale(float NewBoundsScale);// 0x67846a0
	void SetAngularDamping(float InDamping);// 0x3871288
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x67845d4
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x67844f8
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x67843f0
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x6784314
	void SetAllMassScale(float InMassScale);// 0x6784294
	void SetAffectAO(bool bNewAffectAO);// 0x6784214
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x6784128
	void PutRigidBodyToSleep(FName BoneName);// 0x67840b0
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x6783fe8
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x6783f14
	void K2_SetMoveIgnoreMask(int InIgnoreMask);// 0x6783ea0
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x6783b58
	bool K2_IsQueryCollisionEnabled();// 0x6783b18
	bool K2_IsPhysicsCollisionEnabled();// 0x6783ad8
	bool K2_IsCollisionEnabled();// 0x6783aa0
	int K2_GetMoveIgnoreMask();// 0x6783a84
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x6783a04
	bool IsOverlappingActor(const Actor* Other);// 0x6783984
	bool IsGravityEnabled();// 0x3a1cd3c
	bool IsAnyRigidBodyAwake();// 0x6783954
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x6783890
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x67837cc
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x6783790
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x67836ac
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x6783618
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x6783584
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x67834d8
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x67834d8
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x678340c
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x67832f8
	int GetNumMaterials();// 0x67832c8
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x67831ec
	MaterialInterface* GetMaterialAsync(int ElementIndex, delegate MaterialCallback);// 0x67830f4
	MaterialInterface* GetMaterial(int ElementIndex);// 0x678306c
	float GetMassScale(FName BoneName);// 0x6782fe4
	float GetMass();// 0x6782fb4
	int GetMaskFilter();// 0x6782f98
	Vector GetLocalCenterOfMass(FName BoneName);// 0x6782f04
	float GetLinearDamping();// 0x39a0ce0
	Vector GetInertiaTensor(FName BoneName);// 0x6782e68
	byte GetCollisionResponseToChannel(byte Channel);// 0x6782de0
	FName GetCollisionProfileName();// 0x6782da0
	byte GetCollisionObjectType();// 0x6782d70
	byte GetCollisionEnabled();// 0x6782d40
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x6782c10
	Vector GetCenterOfMass(FName BoneName);// 0x6782b7c
	float GetAngularDamping();// 0x6782b4c
	void ForceRecoverMaterial(int ElementIndex);// 0x6782acc
	void ForceClearMaterial(int ElementIndex);// 0x3a9a73c
	MaterialInstanceDynamic* CreateDynamicMaterialInstanceAsync(int ElementIndex, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x6782990
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x67828c4
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterialAsync(int ElementIndex, MaterialInterface* Parent, delegate MaterialInstCallback);// 0x6782788
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x67826bc
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicAsync(int ElementIndex, delegate MaterialInstCallback);// 0x67825c4
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x389dabc
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x6782504
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x6782444
	void ClearMoveIgnoreComponents();// 0x6782414
	void ClearMoveIgnoreActors();// 0x6782400
	bool CanCharacterStepUp(Pawn* Pawn);// 0x6782378
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x6782134
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x6782244
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x6782134
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x6781f90
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x6781dec
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x6781cd4
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x6781bbc
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x6781aa4
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x678198c
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x6781874
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x678175c
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x6781620
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x6781508

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc8, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xd0, Size: 4]
	FName AttachSocketName;//[Offset: 0xd8, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xe0, Size: 12]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xec, Size: 12]
	Vector RelativeLocation;//[Offset: 0x120, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x12c, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x138, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x200, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x210, Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x218, Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x220, Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x228, Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x230, Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x238, Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	byte Mobility;//[Offset: 0x23d, Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x240, Size: 4]
	byte DetailMode;//[Offset: 0x244, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x290, Size: 12]
	void ToggleVisibility(bool bPropagateToChildren);// 0x679db5c
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x679da98
	void SetWorldScale3D(Vector NewScale);// 0x679da28
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x679d950
	void SetSkipUpdateChildTransforms(bool EnableSkipUpdateChildTransforms);// 0x679d8d4
	void SetRelativeScale3D(Vector NewScale3D);// 0x452645c
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x679d800
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x679d6e0
	void ResetRelativeTransform();// 0x679d6cc
	void OnRep_Visibility(bool OldValue);// 0x679d64c
	void OnRep_Transform();// 0x679d638
	void OnRep_AttachSocketName();// 0x679d624
	void OnRep_AttachParent();// 0x679d624
	void OnRep_AttachChildren();// 0x679d610
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679d3f0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679d230
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679d038
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679ce80
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679cc60
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679ca9c
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679c8a4
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679c6ec
	Transform K2_GetComponentToWorld();// 0x679c68c
	Vector K2_GetComponentScale();// 0x679c644
	Rotator K2_GetComponentRotation();// 0x679c5fc
	Vector K2_GetComponentLocation();// 0x679c5b4
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x679c464
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x679c27c
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x679c120
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679bf00
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679bd48
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679bb90
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679b9d8
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679b820
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679b600
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679b448
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x679b290
	bool IsVisible();// 0x3a8a0e8
	bool IsSimulatingPhysics(FName BoneName);// 0x679b208
	bool IsAnySimulatingPhysics();// 0x3781684
	Vector GetUpVector();// 0x679b1c0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x679b0c4
	Rotator GetSocketRotation(FName InSocketName);// 0x679b028
	Quat GetSocketQuaternion(FName InSocketName);// 0x679af8c
	Vector GetSocketLocation(FName InSocketName);// 0x679aef0
	Vector GetRightVector();// 0x679aea8
	Transform GetRelativeTransform();// 0x679ae48
	PhysicsVolume* GetPhysicsVolume();// 0x679ae20
	void GetParentComponents(out SceneComponent*[] Parents);// 0x679ad54
	int GetNumChildrenComponents();// 0x679ad2c
	Vector GetForwardVector();// 0x6768618
	Vector GetComponentVelocity();// 0x679acdc
	Transform GetComponentTransformViewTranslatedBP();// 0x679aca0
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x679aba0
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x679aa78
	SceneComponent* GetChildComponent(int ChildIndex);// 0x679a9f8
	FName GetAttachSocketName();// 0x679a9dc
	SceneComponent* GetAttachParent();// 0x679a9c0
	FName[] GetAllSocketNames();// 0x679a900
	bool DoesSocketExist(FName InSocketName);// 0x679a878
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x679a7a0

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bFastCreation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	bool bCallPreReplication;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x70, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8e, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8e, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8e, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	enum CreationMethod;//[Offset: 0x92, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x94, Size: 12]
	delegate OnComponentActivated;//[Offset: 0xa4, Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xb0, Size: 12]
	void ToggleActive();// 0x37c5da0
	void SetTickGroup(byte NewTickGroup);// 0x6612908
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x6612888
	void SetIsReplicated(bool ShouldReplicate);// 0x6612808
	void SetComponentTickInterval(float TickInterval);// 0x6612790
	void SetComponentTickEnabled(bool bEnabled);// 0x3fb2c48
	void SetAutoActivate(bool bNewAutoActivate);// 0x35b5b48
	void SetActive(bool bNewActive, bool bReset);// 0x66126b8
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6612638
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x66125b8
	void ReceiveTick(float DeltaSeconds);// 0x4a51734
	void ReceiveEndPlay(byte EndPlayReason);// 0x4a51734
	void ReceiveBeginPlay();// 0x4a51734
	void OnRep_Replicates();// 0x66125a4
	void OnRep_IsActive();// 0x6612590
	void K2_DestroyComponent(Object* Object);// 0x6612518
	bool IsComponentTickEnabled();// 0x66124f0
	bool IsBeingDestroyed();// 0x66124d0
	bool IsActive();// 0x3c73784
	Actor* GetOwner();// 0x66124b4
	float GetComponentTickInterval();// 0x661248c
	void ForceNetUpdate();// 0x37d4afc
	void Deactivate();// 0x37c5d68
	bool ComponentHasTag(FName Tag);// 0x661240c
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x661238c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x661230c
	void Activate(bool bReset);// 0x35b5ac0

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 52]
	FName BoneName;//[Offset: 0x50, Size: 8]
	byte PhysicsType;//[Offset: 0x58, Size: 1]
	bool bCustomizePhysicsBlendWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0x5c, Size: 4]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x64, Size: 4]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x6c, Size: 12]
	byte CollisionReponse;//[Offset: 0x78, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0x7c, Size: 12]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0x88, Size: 12]
	byte[] BoxCollisionEnabledList;//[Offset: 0x94, Size: 12]
	byte[] ConvexCollisionEnabledList;//[Offset: 0xa0, Size: 12]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xac, Size: 12]
	byte CollisionTraceFlag;//[Offset: 0xb8, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xc0, Size: 320]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x200, Size: 16]
	float BuildScale;//[Offset: 0x210, Size: 4]
	Vector BuildScale3D;//[Offset: 0x214, Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 12]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Vector Center;//[Offset: 0x50, Size: 12]
	float Radius;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float X;//[Offset: 0x78, Size: 4]
	float Y;//[Offset: 0x7c, Size: 4]
	float Z;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float Radius;//[Offset: 0x78, Size: 4]
	float Length;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10, Size: 12]
	Box ElemBox;//[Offset: 0x1c, Size: 28]
	Transform Transform;//[Offset: 0x40, Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float Restitution;//[Offset: 0x24, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	Color MaterialColor;//[Offset: 0x2c, Size: 4]
	float Density;//[Offset: 0x30, Size: 4]
	float RaiseMassToPower;//[Offset: 0x34, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x38, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x3c, Size: 4]
	byte SurfaceType;//[Offset: 0x40, Size: 1]
	float TireFrictionScale;//[Offset: 0x44, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x48, Size: 12]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: StaticMesh.Object
	int MinLOD;//[Offset: 0x30, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x34, Size: 12]
	StaticMaterial[] StaticMaterials;//[Offset: 0x40, Size: 12]
	float LightmapUVDensity;//[Offset: 0x4c, Size: 4]
	int LightMapResolution;//[Offset: 0x50, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x54, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x58, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x60, Size: 4]
	int LODForCollision;//[Offset: 0x64, Size: 4]
	float CullingScreenSize;//[Offset: 0x68, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bLazyLoadBulkData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f, Size: 1]
	bool bEnableTransparentRenderOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xa8, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	FString OccluderMeshDataPath;//[Offset: 0xc4, Size: 12]
	StaticMeshSocket*[] Sockets;//[Offset: 0xe4, Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x12c, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x138, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool bEnableMeshletCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	ClusterNode_Mesh[] ClusterNodesTree;//[Offset: 0x148, Size: 12]
	int ElementToIgnoreForTexFactor;//[Offset: 0x154, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x158, Size: 12]
	NavCollision* NavCollision;//[Offset: 0x164, Size: 4]
	int GetNumSections(int InLOD);// 0x67c2ec4
	int GetNumLODs();// 0x67c2e9c
	int GetMaterialIndex(FName MaterialSlotName);// 0x67c2e1c
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x67c2d9c
	BoxSphereBounds GetBounds();// 0x67c2d48
	Box GetBoundingBox();// 0x67c2cf4

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20, Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x40, Size: 12]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x672a094
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x6729f2c
	PhysicalMaterial* GetPhysicalMaterial();// 0x384abac
	Material* GetBaseMaterial();// 0x6729f04

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x58, Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x90, Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc8, Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0x100, Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x138, Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x170, Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a8, Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e8, Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x220, Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x258, Size: 56]
	byte MaterialDomain;//[Offset: 0x290, Size: 1]
	byte BlendMode;//[Offset: 0x291, Size: 1]
	byte DecalBlendMode;//[Offset: 0x292, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x293, Size: 1]
	byte ShadingModel;//[Offset: 0x294, Size: 1]
	byte ShadingRate;//[Offset: 0x295, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x298, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x29c, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	byte OITBlendMode;//[Offset: 0x2a1, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8, Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8, Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328, Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360, Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398, Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0, Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408, Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x440, Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478, Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678, Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0, Size: 56]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x6f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x740, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x790, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x790, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x790, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x790, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x790, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x790, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x790, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x794, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x798, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x79c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x7a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x7a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x7ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x7b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x7b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x7b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x7c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7ce, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cf, Size: 1]
	bool bProcessInGammaSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d1, Size: 1]
	bool bShadowUseTentFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d1, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d1, Size: 1]
	bool bUsedWithLandscapeShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d1, Size: 1]
	bool bUseLandscapeMultiLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d2, Size: 1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d2, Size: 1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d2, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d2, Size: 1]
	byte ShadowOverride;//[Offset: 0x7d3, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x7d4, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d5, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d5, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d5, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d5, Size: 1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d5, Size: 1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d5, Size: 1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d5, Size: 1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d5, Size: 1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d6, Size: 1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d6, Size: 1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d6, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d6, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d6, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d6, Size: 1]
	bool bApplyFogInscattering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d6, Size: 1]
	bool bSeparateShadowControl;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d6, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d7, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x7d8, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d9, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d9, Size: 1]
	bool bUsedWithTexture2DArrayShaderVariant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d9, Size: 1]
	float MaxDisplacement;//[Offset: 0x7dc, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e0, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e0, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e0, Size: 1]
	int EditorX;//[Offset: 0x7e4, Size: 4]
	int EditorY;//[Offset: 0x7e8, Size: 4]
	int EditorPitch;//[Offset: 0x7ec, Size: 4]
	int EditorYaw;//[Offset: 0x7f0, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x7f4, Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x800, Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x80c, Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x818, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x818, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x818, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x818, Size: 1]
	bool bClearCoatBottomIBLOptClose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x818, Size: 1]
	bool bUsedWithMobileTAA;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x818, Size: 1]
	bool bUsedWithLandscapeVT;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x818, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x819, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x819, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x819, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x819, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x819, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x819, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x81c, Size: 4]
	bool bUsedMobileDynamicAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x820, Size: 1]
	byte BlendableLocation;//[Offset: 0x821, Size: 1]
	int BlendablePriority;//[Offset: 0x824, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	byte RefractionMode;//[Offset: 0x829, Size: 1]
	float RefractionDepthBias;//[Offset: 0x82c, Size: 4]
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x830, Size: 1]
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x830, Size: 1]
	bool bEnableMeshDiscard;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x830, Size: 1]
	bool bEnableMeshArcPlaneClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x830, Size: 1]
	bool bUsedWithMultiPassInstanceID;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x830, Size: 1]
	bool bUsedWithMobileReadScene;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x830, Size: 1]
	bool bIsEnhancedUImage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x830, Size: 1]
	Guid stateID;//[Offset: 0x834, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x8dc, Size: 12]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Color Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector Constant;//[Offset: 0x34, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float ConstantX;//[Offset: 0x34, Size: 4]
	float ConstantY;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 4]
	FString Desc;//[Offset: 0x24, Size: 12]
	Color BorderColor;//[Offset: 0x30, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38, Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	FString Description;//[Offset: 0x2c, Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c, Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 12]
	int Mask;//[Offset: 0xc, Size: 4]
	int MaskR;//[Offset: 0x10, Size: 4]
	int MaskG;//[Offset: 0x14, Size: 4]
	int MaskB;//[Offset: 0x18, Size: 4]
	int MaskA;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20, Size: 16]
	int LODBias;//[Offset: 0x30, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x48, Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x54, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	byte CompressionSettings;//[Offset: 0x59, Size: 1]
	byte Filter;//[Offset: 0x5a, Size: 1]
	byte LODGroup;//[Offset: 0x5b, Size: 1]
	byte CrunchSetting;//[Offset: 0x5c, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x60, Size: 4]
	byte BasisSetting;//[Offset: 0x64, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x68, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 12]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 12]
	Vector RelativeScale;//[Offset: 0x40, Size: 12]
	FString Tag;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ClusterNode_Mesh
	Vector BoundMin;//[Offset: 0x0, Size: 12]
	int FirstChild;//[Offset: 0xc, Size: 4]
	Vector BoundMax;//[Offset: 0x10, Size: 12]
	int LastChild;//[Offset: 0x1c, Size: 4]
	int FirstInstance;//[Offset: 0x20, Size: 4]
	int LastInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58, Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64, Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70, Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20, Size: 4]
	Color DrawColor;//[Offset: 0x24, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19, Size: 1]
	byte DOFMode;//[Offset: 0x1a, Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b, Size: 1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 4]
	float MassInKgOverride;//[Offset: 0x64, Size: 4]
	float LinearDamping;//[Offset: 0x68, Size: 4]
	float AngularDamping;//[Offset: 0x6c, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 12]
	Vector COMNudge;//[Offset: 0x7c, Size: 12]
	float MassScale;//[Offset: 0x88, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 12]
	byte ObjectType;//[Offset: 0x98, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4, Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8, Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0, Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8, Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x338, Size: 4]
	int Priority;//[Offset: 0x33c, Size: 4]
	float FluidFriction;//[Offset: 0x340, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x310, Size: 1]
	Color BrushColor;//[Offset: 0x314, Size: 4]
	int PolyFlags;//[Offset: 0x318, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31c, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31c, Size: 1]
	Model* Brush;//[Offset: 0x320, Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x324, Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x32c, Size: 12]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float CustomTimeDilation;//[Offset: 0x5c, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 1]
	bool bNewPhysicsReplicationImpl;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x61, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x62, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 1]
	byte RemoteRole;//[Offset: 0x64, Size: 1]
	Actor* Owner;//[Offset: 0x68, Size: 4]
	byte WorldParallelismID;//[Offset: 0x6c, Size: 1]
	FName NetDriverName;//[Offset: 0x78, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x80, Size: 72]
	float InitialLifeSpan;//[Offset: 0xc8, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xd0, Size: 56]
	byte Role;//[Offset: 0x108, Size: 1]
	byte NetDormancy;//[Offset: 0x109, Size: 1]
	byte AutoReceiveInput;//[Offset: 0x10a, Size: 1]
	int InputPriority;//[Offset: 0x10c, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x110, Size: 4]
	float NetCullDistanceSquared;//[Offset: 0x114, Size: 4]
	int NetTag;//[Offset: 0x118, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x120, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x124, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x128, Size: 4]
	byte ActorReplicateFreqLODGroupID;//[Offset: 0x12c, Size: 1]
	bool bLowRepFreqOptimizedNAK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12d, Size: 1]
	float NetPriority;//[Offset: 0x130, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x138, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x138, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x138, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x138, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x138, Size: 1]
	bool bNetDormancyForReplay;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x138, Size: 1]
	bool bSkipComparePropertiesForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x139, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x139, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x139, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x139, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x139, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13a, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13a, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x13b, Size: 1]
	Pawn* Instigator;//[Offset: 0x148, Size: 4]
	Actor*[] Children;//[Offset: 0x14c, Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x158, Size: 4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x15c, Size: 12]
	FName[] Layers;//[Offset: 0x170, Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x17c, Size: 8]
	FName[] Tags;//[Offset: 0x184, Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x190, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x198, Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x1a4, Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x1b0, Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x1bc, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1c8, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1d4, Size: 12]
	delegate OnClicked;//[Offset: 0x1e0, Size: 12]
	delegate OnReleased;//[Offset: 0x1ec, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1f8, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x204, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x210, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x21c, Size: 12]
	delegate OnActorHit;//[Offset: 0x228, Size: 12]
	delegate OnDestroyed;//[Offset: 0x234, Size: 12]
	delegate OnEndPlay;//[Offset: 0x240, Size: 12]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2c4, Size: 12]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2d0, Size: 12]
	int ParallelWorldId;//[Offset: 0x2ec, Size: 4]
	bool bAlwaysRelevantToParallelWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	delegate OnActorEnterParallelWorld;//[Offset: 0x2f4, Size: 12]
	delegate OnActorLeaveParallelWorld;//[Offset: 0x300, Size: 12]
	int RealParallelWorldId;//[Offset: 0x30c, Size: 4]
	bool WasRecentlyRendered(float Tolerance);// 0x660e6e0
	void UserConstructionScript();// 0x4a51734
	void TearOff();// 0x3602490
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x660e624
	void SetTickGroup(byte NewTickGroup);// 0x660e5ac
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x660e52c
	void SetReplicates(bool bInReplicates);// 0x660e4ac
	void SetReplicateMovement(bool bInReplicateMovement);// 0x39b0b6c
	void SetParallelWorldId(int InWorldId, int Masks);// 0x660e3f0
	void SetOwner(Actor* NewOwner);// 0x3559fb4
	void SetNetUpdateGroupID(byte InGroupID);// 0x660e370
	void SetNetUpdateGroup(Actor* InConnectionActor);// 0x660e2f0
	void SetNetDormancy(byte NewDormancy);// 0x660e278
	void SetLifeSpan(float InLifespan);// 0x660e1f8
	void SetActorTickInterval(float TickInterval);// 0x660e180
	void SetActorTickEnabled(bool bEnabled);// 0x660e100
	void SetActorScale3D(Vector NewScale3D);// 0x660e090
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x660e020
	void SetActorHiddenInGame(bool bNewHidden);// 0x3fb2ff0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x660dfa0
	void ResetParallelWorldId(int Masks);// 0x660df28
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3655e28
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3655ea8
	void ReceiveTick(float DeltaSeconds);// 0x4a51734
	void ReceiveReInitForReplay();// 0x4a51734
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x4a51734
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x4a51734
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x4a51734
	void ReceiveEndPlay(byte EndPlayReason);// 0x4a51734
	void ReceiveDestroyed();// 0x4a51734
	void ReceiveBeginPlay();// 0x4a51734
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x4a51734
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x4a51734
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x4a51734
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x4a51734
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x4a51734
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x4a51734
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x4a51734
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x4a51734
	void ReceiveActorEndCursorOver();// 0x4a51734
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x4a51734
	void ReceiveActorBeginCursorOver();// 0x4a51734
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x660de14
	void OnRep_ReplicateMovement();// 0x365824c
	void OnRep_ReplicatedMovement();// 0x36b40f4
	void OnRep_Owner();// 0x37c5da0
	void OnRep_Instigator();// 0x3601c70
	void OnRep_AttachmentReplication();// 0x37d58ec
	void MarkNetDormancyForReplay(bool bInDormancyForReplay);// 0x660dd94
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x660dbf8
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x3c79800
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x660db30
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660d910
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x660d840
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660d620
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660d464
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660d2ac
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660d0a0
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660cee4
	void K2_OnReset();// 0x4a51734
	void K2_OnEndViewTarget(PlayerController* PC);// 0x4a51734
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x4a51734
	SceneComponent* K2_GetRootComponent();// 0x660cec8
	Rotator K2_GetActorRotation();// 0x660cdd4
	Vector K2_GetActorLocation();// 0x660cd10
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x660cc10
	void K2_DestroyComponent(ActorComponent* Component);// 0x660cb98
	void K2_DestroyActor();// 0x35b27f0
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x660c9b8
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x660c7d8
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x660c684
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x660c530
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660c310
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660c158
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660bfa0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660bd80
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660bbc0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x660ba08
	bool IsOverlappingActor(const Actor* Other);// 0x660b988
	bool IsChildActor();// 0x660b960
	bool IsActorTickEnabled();// 0x660b938
	bool IsActorBeingDestroyed();// 0x660b914
	bool HasAuthority();// 0x660b8ec
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x660b86c
	Vector GetVelocity();// 0x3a31000
	Transform GetTransform();// 0x660b820
	bool GetTickableWhenPaused();// 0x660b7f8
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x660b778
	byte GetRole();// 0x660b750
	byte GetRemoteRole();// 0x660b734
	ChildActorComponent* GetParentComponent();// 0x660b70c
	Actor* GetParentActor();// 0x660b6e4
	int GetParallelWorldId();// 0x660b6bc
	Actor* GetOwner();// 0x660b6a0
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x660b5d4
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x660b4c0
	byte GetLocalRole();// 0x660b4a4
	float GetLifeSpan();// 0x660b474
	Controller* GetInstigatorController();// 0x660b44c
	Pawn* GetInstigator();// 0x3794a50
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x660b148
	float GetInputAxisValue(const FName InputAxisName);// 0x660b0c8
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x660add0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x660ad50
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x660acd0
	float GetGameTimeSinceCreation();// 0x660aca8
	float GetDotProductTo(const Actor* OtherActor);// 0x660ac28
	float GetDistanceTo(const Actor* OtherActor);// 0x660aba8
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x660aa54
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x660a94c
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x660a8cc
	FName GetAttachParentSocketName();// 0x660a88c
	Actor* GetAttachParentActor();// 0x660a864
	void GetAttachedActors(out Actor*[] OutActors);// 0x660a798
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x660a67c
	Vector GetActorUpVector();// 0x660a608
	float GetActorTimeDilation();// 0x660a5e0
	float GetActorTickInterval();// 0x660a5b8
	Vector GetActorScale3D();// 0x660a570
	Vector GetActorRightVector();// 0x660a4fc
	Vector GetActorRelativeScale3D();// 0x660a4b4
	Vector GetActorForwardVector();// 0x660a440
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x660a360
	bool GetActorEnableCollision();// 0x660a340
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x660a218
	void ForceNetUpdate();// 0x37d4afc
	void ForceNetConsider();// 0x660a1fc
	void FlushNetDormancy();// 0x660a1e8
	void EnableInput(PlayerController* PlayerController);// 0x3760d4c
	void DisableInput(PlayerController* PlayerController);// 0x38b5ec0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x660a168
	bool BeenInParallelWorld();// 0x660a140
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x660a0c0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x39ad9b0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x6609f00
	bool ActorHasTag(FName Tag);// 0x6609e74

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x674, Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x678, Size: 4]
	Vector PrePivot;//[Offset: 0x67c, Size: 12]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 1]
	byte EndTickGroup;//[Offset: 0x5, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	float TickInterval;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]
	bool LocationQuantizationLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	FName LocationQuantizationLODGroup;//[Offset: 0x38, Size: 8]
	byte ForcedLocationQuantizationLOD;//[Offset: 0x40, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 12]
	FName AttachSocket;//[Offset: 0x28, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 4]
	byte ExtraData;//[Offset: 0x34, Size: 1]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x66a4394
	bool WasControllerKeyJustPressed(Key Key);// 0x66a4394
	bool IsControllerKeyDown(Key Key);// 0x66a4394
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x66a4214
	Vector GetControllerVectorKeyState(Key Key);// 0x66a3f10
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x66a3e30
	float GetControllerKeyTimeDown(Key Key);// 0x66a3a14
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x66a3d0c
	float GetControllerAnalogKeyState(Key Key);// 0x66a3a14

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 1]
	bool bRoleReplicationOptim;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 1]
	float BaseEyeHeight;//[Offset: 0x318, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x31c, Size: 1]
	enum AutoPossessAI;//[Offset: 0x31d, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x320, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x324, Size: 4]
	byte RemoteViewPitch;//[Offset: 0x328, Size: 1]
	Controller* LastHitBy;//[Offset: 0x32c, Size: 4]
	Controller* Controller;//[Offset: 0x330, Size: 4]
	Vector ControlInputVector;//[Offset: 0x33c, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x348, Size: 12]
	void SpawnDefaultController();// 0x6760a70
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x3b5f2c4
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x67609a0
	void ReceiveUnpossessed(Controller* OldController);// 0x4a51734
	void ReceivePossessed(Controller* NewController);// 0x4a51734
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x676084c
	void OnRep_PlayerState();// 0x3864510
	void OnRep_Controller();// 0x367a48c
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6760738
	Vector K2_GetMovementInputVector();// 0x67606c8
	bool IsPlayerControlled();// 0x3b5d52c
	bool IsMoveInputIgnored();// 0x665a3a0
	bool IsLocallyControlled();// 0x3a50f98
	bool IsControlled();// 0x6760710
	Vector GetPendingMovementInputVector();// 0x67606c8
	Vector GetNavAgentLocation();// 0x665a2dc
	PawnMovementComponent* GetMovementComponent();// 0x3a28ad8
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x6760650
	PrimitiveComponent* GetMovementBase();// 0x39b49c4
	Vector GetLastMovementInputVector();// 0x6760608
	Rotator GetControlRotation();// 0x67605b8
	Controller* GetController();// 0x676059c
	Rotator GetBaseAimRotation();// 0x676054c
	void DetachFromControllerPendingDestroy();// 0x6760530
	Vector ConsumeMovementInputVector();// 0x67604e0
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x67603cc
	void AddControllerYawInput(float Val);// 0x676034c
	void AddControllerRollInput(float Val);// 0x3620794
	void AddControllerPitchInput(float Val);// 0x67602cc

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x314, Size: 4]
	Character* Character;//[Offset: 0x320, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x324, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x328, Size: 4]
	Rotator ControlRotation;//[Offset: 0x32c, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 1]
	FName StateName;//[Offset: 0x348, Size: 8]
	Actor* ObservedActor;//[Offset: 0x350, Size: 4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x354, Size: 12]
	void UnPossess();// 0x39f9a1c
	void StopMovement();// 0x417ae48
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x416ca34
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x39f5e90
	void SetIgnoreLookInput(bool bNewLookInput);// 0x665a580
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x39f568c
	void ResetIgnoreMoveInput();// 0x39e898c
	void ResetIgnoreLookInput();// 0x3a11e04
	void ResetIgnoreInputFlags();// 0x665a564
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x4a51734
	void Possess(Pawn* InPawn);// 0x3976a40
	void OnRep_PlayerState();// 0x3864510
	void OnRep_Pawn();// 0x367a48c
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x665a448
	Pawn* K2_GetPawn();// 0x665a420
	bool IsPlayerController();// 0x665a400
	bool IsMoveInputIgnored();// 0x665a3d0
	bool IsLookInputIgnored();// 0x665a3a0
	bool IsLocalPlayerController();// 0x665a35c
	bool IsLocalController();// 0x665a32c
	Actor* GetViewTarget();// 0x6651d18
	Rotator GetDesiredRotation();// 0x665a2dc
	Rotator GetControlRotation();// 0x665a28c
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x665a1c0
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x665a0f8
	PlayerController* CastToPlayerController();// 0x665a0d0

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x354, Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x358, Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x35c, Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x360, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x390, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x3c0, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x3c4, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x3d0, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3e0, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x3f0, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3f4, Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3f8, Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3fc, Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x400, Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x408, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 1]
	byte Ping;//[Offset: 0x40d, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40e, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40e, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40e, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40e, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40e, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40e, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40e, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40e, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x410, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x414, Size: 4]
	int JumpMaxCount;//[Offset: 0x418, Size: 4]
	int JumpCurrentCount;//[Offset: 0x41c, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x420, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x424, Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x43c, Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x448, Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x454, Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4f0, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x530, Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x540, Size: 224]
	void UnCrouch(bool bClientSimulation);// 0x664f9ac
	void StopJumping();// 0x364d8bc
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x664f92c
	void SetReplicateMovement(bool bInReplicateMovement);// 0x39b0b6c
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x664f868
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x664f750
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x664f5d0
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x664f5bc
	void OnRep_RootMotion();// 0x664f5a8
	void OnRep_ReplicatedBasedMovement();// 0x3a11ffc
	void OnRep_IsCrouched();// 0x3990774
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4a51734
	void OnLanded(out const HitResult Hit);// 0x4a51734
	void OnJumped();// 0x664f58c
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x664f470
	void K2_UpdateCustomMovement(float DeltaTime);// 0x4a51734
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x4a51734
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x4a51734
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x4a51734
	void Jump();// 0x364d8d8
	bool IsPlayingRootMotion();// 0x664f448
	bool IsPlayingNetworkedRootMotionMontage();// 0x664f420
	bool IsJumpProvidingForce();// 0x364a7dc
	AnimMontage* GetCurrentMontage();// 0x664f3f8
	Vector GetBaseTranslationOffset();// 0x664f3d4
	Rotator GetBaseRotationOffsetRotator();// 0x664f370
	float GetAnimRootMotionTranslationScale();// 0x664f348
	void Crouch(bool bClientSimulation);// 0x664f2c0
	void ClientCheatWalk();// 0x3a11de8
	void ClientCheatGhost();// 0x3990cc0
	void ClientCheatFly();// 0x3a12018
	bool CanJumpInternal();// 0x364b1c8
	bool CanJump();// 0x664f298
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x664f1d0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x814, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x818, Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x81c, Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x820, Size: 4]
	AnimInstance*[] SubInstances;//[Offset: 0x824, Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x830, Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x834, Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x868, Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x874, Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x894, Size: 4]
	enum UseAsyncScene;//[Offset: 0x898, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x899, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x89a, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x89b, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89c, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89c, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89c, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89c, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89c, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89c, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x8a0, Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ac, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8ac, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8ac, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8ac, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8ac, Size: 1]
	float ClothBlendWeight;//[Offset: 0x8b0, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x8b8, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c4, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c4, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c4, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c6, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x8c8, Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cd, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cd, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cd, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cd, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cd, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cd, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cd, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cd, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8ce, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x8d0, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x8e0, Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x9a8, Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x9ac, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x9b0, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0xaa0, Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0xb3c, Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0xb40, Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb44, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb44, Size: 1]
	float DefaultPosition;//[Offset: 0xb48, Size: 4]
	float DefaultPlayRate;//[Offset: 0xb4c, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xb50, Size: 4]
	float LastPoseTickTime;//[Offset: 0xb54, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb82, Size: 1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x67a6694
	void SuspendClothingSimulation();// 0x67a6680
	void Stop();// 0x67a666c
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x67a655c
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x363b278
	void SetTeleportRotationThreshold(float Threshold);// 0x67a64e4
	void SetTeleportDistanceThreshold(float Threshold);// 0x67a646c
	void SetPosition(float InPos, bool bFireNotifies);// 0x67a63a8
	void SetPlayRate(float rate);// 0x67a6330
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x67a62b8
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x67a6194
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x67a6080
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x67a6000
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x67a5ee4
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x67a5e1c
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x67a5d9c
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x67a5cd0
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x67a5bb4
	void SetClothMaxDistanceScale(float Scale);// 0x67a5b3c
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x67a5a6c
	void SetAnimInstanceClass(class Object NewClass);// 0x67a59f4
	void SetAnimationMode(byte InAnimationMode);// 0x67a597c
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x67a5904
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x67a57b0
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x67a5694
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x67a5614
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x67a54f4
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x67a53d4
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x67a5284
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x67a5204
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x67a5140
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x67a5014
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x67a4ea0
	void ResumeClothingSimulation();// 0x67a4e8c
	void ResetClothTeleportMode();// 0x67a4e78
	void ResetAllowedAnimCurveEvaluation();// 0x67a4e64
	void ResetAllBodiesSimulatePhysics();// 0x67a4e50
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x67a4d8c
	void Play(bool bLooping);// 0x67a4d0c
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x67a4b64
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x67a4978
	bool IsPlaying();// 0x67a4950
	bool IsClothingSimulationSuspended();// 0x67a4928
	bool IsBodyGravityEnabled(FName BoneName);// 0x67a48a8
	float GetTeleportRotationThreshold();// 0x67a4880
	float GetTeleportDistanceThreshold();// 0x67a4880
	AnimInstance*[] GetSubAnimInstances();// 0x67a47c0
	Vector GetSkeletalCenterOfMass();// 0x67a4778
	AnimInstance* GetPostProcessInstance();// 0x67a4750
	float GetPosition();// 0x67a4728
	float GetPlayRate();// 0x67a4700
	float GetMorphTarget(FName MorphTargetName);// 0x67a4680
	bool GetDisableAnimCurves();// 0x67a465c
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x67a44dc
	float GetClothMaxDistanceScale();// 0x67a44b4
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x67a43e0
	AnimInstance* GetAnimInstance();// 0x67a43b8
	byte GetAnimationMode();// 0x67a4390
	bool GetAllowedAnimCurveEvaluate();// 0x67a4370
	void ForceClothNextUpdateTeleportAndReset();// 0x67a435c
	void ForceClothNextUpdateTeleport();// 0x67a4348
	FName FindConstraintBoneName(int ConstraintIndex);// 0x67a42c0
	void ClearMorphTargets();// 0x67a42ac
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x67a419c
	void BindClothToMasterPoseComponent();// 0x67a4188
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x67a40bc
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x67a3f54
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x67a3dec
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x67a3ccc

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x694, Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x698, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x720, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x73c, Size: 4]
	int ForcedLodModel;//[Offset: 0x740, Size: 4]
	int MinLodModel;//[Offset: 0x744, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x754, Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x760, Size: 4]
	Color WireframeColor;//[Offset: 0x764, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x768, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x768, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x768, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x768, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x778, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x778, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x778, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x779, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77a, Size: 1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77b, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x77b, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x788, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x788, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x789, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78a, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78a, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x78c, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x7a4, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e1, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e2, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x67aa544
	void UnHideBoneByName(FName BoneName);// 0x67aa4cc
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x67aa308
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x67aa144
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x67aa034
	bool SetSkinWeightProfile(FName InProfileName);// 0x67a9fb4
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x67a9ea4
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x67a9dd8
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReinit);// 0x67a9d0c
	void SetMinLOD(int InNewMinLOD);// 0x67a9c94
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x67a9c1c
	void SetForcedLOD(int InNewForcedLOD);// 0x67a9ba4
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x67a9b24
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x67a9aa4
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x67a9a2c
	void ResetAnimUROParams(float[] DistanceFactors, int MaxEvalRateForInterpolation);// 0x67a9890
	bool IsUsingSkinWeightProfile();// 0x67a9870
	bool IsBoneHiddenByName(FName BoneName);// 0x67a97f0
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x67a972c
	FName GetSocketBoneName(FName InSocketName);// 0x67a96a0
	FName GetParentBone(FName BoneName);// 0x67a9614
	int GetNumLODs();// 0x67a95ec
	int GetNumBones();// 0x67a95c4
	FName GetCurrentSkinWeightProfileName();// 0x67a95a0
	FName GetBoneName(int BoneIndex);// 0x67a9518
	int GetBoneIndex(FName BoneName);// 0x67a9498
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x67a9320
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x672ef80
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x672ee70
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x672ed44
	void DisableMeshClipPlane(int PlaneIndex);// 0x362cbdc
	void DisableMeshClipArc();// 0x39a2318
	void DisableMeshClip4Planes();// 0x382a8e4
	void ClearVertexColorOverride(int LODIndex);// 0x67a92a8
	void ClearSkinWeightProfile();// 0x3592f9c
	void ClearSkinWeightOverride(int LODIndex);// 0x67a9230
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x67a9164

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x674, Size: 12]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x672f9b0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x672f8ec
	void SetLayerVisibilityValue(byte Layer, bool Visible, bool bPropagateToChildren);// 0x672f7d0
	void SetLayerVisibilityEnable(bool Enable, bool bPropagateToChildren);// 0x672f6f8
	void SetLayerCastShadowValue(byte Layer, bool NewCastShadow);// 0x672f62c
	void SetLayerCastShadowEnable(bool Enable);// 0x672f5a4
	void SetCastShadow(bool NewCastShadow);// 0x672f51c
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x672f408
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x672f380
	FName[] GetMaterialSlotNames();// 0x672f2b8
	MaterialInterface*[] GetMaterials();// 0x672f1f0
	int GetMaterialIndex(FName MaterialSlotName);// 0x672f168
	bool GetLayerVisibilityValue(byte Layer);// 0x672f0e0
	bool GetLayerCastShadowValue(byte Layer);// 0x672f058
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x672ef80
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x672ee70
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x672ed44
	void DisableMeshClipPlane(int PlaneIndex);// 0x362cbdc
	void DisableMeshClipArc();// 0x39a2318
	void DisableMeshClip4Planes();// 0x382a8e4

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20, Size: 4]
	byte RootMotionMode;//[Offset: 0x24, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c, Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38, Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44, Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50, Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118, Size: 12]
	bool bDispatchQueuedAnimEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	bool bNeedReInitializeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	FString ShowDebugToggleSubCategoryName;//[Offset: 0x2f0, Size: 12]
	bool bForceParallelUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x661da30
	Pawn* TryGetPawnOwner();// 0x3a45884
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x661d974
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x661d85c
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x661d798
	void SetRootMotionMode(byte Value);// 0x661d718
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x661d654
	void SetForceParallelUpdateAnimation(bool bForce);// 0x661d5d4
	void SavePoseSnapshot(FName SnapshotName);// 0x661d554
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x661d4d4
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x661d25c
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x661d074
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x661cfb8
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x661cefc
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x661ce40
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x661cd38
	void Montage_Resume(const AnimMontage* Montage);// 0x661ccc0
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x3a4b658
	void Montage_Pause(const AnimMontage* Montage);// 0x661cc48
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x661cb8c
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x661cad0
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x661ca50
	bool Montage_IsActive(const AnimMontage* Montage);// 0x661c9d0
	float Montage_GetPosition(const AnimMontage* Montage);// 0x661c950
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x661c8d0
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x661c7f8
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x661c778
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x661c6f0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x661c670
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x661c5a0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x661c430
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x661c36c
	bool IsAnyMontagePlaying();// 0x661c344
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x661c278
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x661c148
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x661c0b0
	AnimInstance* GetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x661c030
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x661bf6c
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x661bea8
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x661bde4
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x661bd20
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x661bc5c
	SkeletalMeshComponent* GetOwningComponent();// 0x661bc34
	Actor* GetOwningActor();// 0x661bc0c
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x661bb48
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x661ba84
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x661b9c0
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x661b8fc
	float GetInstanceMachineWeight(int MachineIndex);// 0x661b87c
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x661b7fc
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x661b77c
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x661b6fc
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x661b67c
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x661b5fc
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x661b57c
	float GetCurveValue(FName CurveName);// 0x661b4fc
	FName GetCurrentStateName(int MachineIndex);// 0x661b474
	AnimMontage* GetCurrentActiveMontage();// 0x661b44c
	AnimMontage* GetCurMontageBySlot(FName SlotName);// 0x661b3cc
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x661b34c
	void DestroyAllSubAnimInstances();// 0x661b338
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x661b274
	void ClearMorphTargets();// 0x661b260
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x661b180
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x4a51734
	void BlueprintPostEvaluateAnimation();// 0x4a51734
	void BlueprintInitializeAnimation();// 0x4a51734
	void BlueprintBeginPlay();// 0x4a51734

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20, Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c, Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124, Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c, Size: 60]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8, Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 12]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	FName BoneName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x67a8148
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x67a80b8

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 12]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 4]
	FName NotifyName;//[Offset: 0x38, Size: 8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 4]
	float Duration;//[Offset: 0x48, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	byte MontageTickType;//[Offset: 0x71, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 4]
	byte NotifyFilterType;//[Offset: 0x78, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int TrackIndex;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 4]
	int SlotIndex;//[Offset: 0x8, Size: 4]
	int SegmentIndex;//[Offset: 0xc, Size: 4]
	byte LinkMethod;//[Offset: 0x10, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 4]
	float SegmentLength;//[Offset: 0x18, Size: 4]
	float LinkValue;//[Offset: 0x1c, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x4a51734
	FString GetNotifyName();// 0x6625284

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c, Size: 12]
	float SequenceLength;//[Offset: 0x68, Size: 4]
	float RateScale;//[Offset: 0x6c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70, Size: 12]
	float GetPlayLength();// 0x6627268

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20, Size: 4]
	AnimMetaData*[] MetaData;//[Offset: 0x44, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 12]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 12]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 84]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41, Size: 1]
	float DefaultValue;//[Offset: 0x44, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x4a51734
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x4a51734
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x4a51734
	FString GetNotifyName();// 0x6625284

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c, Size: 44]
	float BlendInTime;//[Offset: 0xa8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 44]
	float BlendOutTime;//[Offset: 0xd8, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc, Size: 4]
	FName SyncGroup;//[Offset: 0xe0, Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec, Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x104, Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110, Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c, Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x12a, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c, Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138, Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144, Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 4]
	float blendTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float GetFloatValue(float InTime);// 0x665e08c

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x665dac8
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x665d9e8

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28, Size: 8]
	float StartTime;//[Offset: 0x30, Size: 4]
	FName NextSectionName;//[Offset: 0x38, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 12]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 4]
	float StartPos;//[Offset: 0x4, Size: 4]
	float AnimStartTime;//[Offset: 0x8, Size: 4]
	float AnimEndTime;//[Offset: 0xc, Size: 4]
	float AnimPlayRate;//[Offset: 0x10, Size: 4]
	int LoopingCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28, Size: 8]
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 12]
	FName[] BoneNames;//[Offset: 0xc, Size: 12]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 8]
	FName SnapshotName;//[Offset: 0x20, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x5c, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x78, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x94, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xa0, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xac, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 12]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc4, Size: 12]
	byte SkelMirrorAxis;//[Offset: 0xd0, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0xd1, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd4, Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe0, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe0, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe0, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe0, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xe4, Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xe8, Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xec, Size: 4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xf0, Size: 12]
	MorphTarget*[] MorphTargets;//[Offset: 0xfc, Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x218, Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x224, Size: 4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x228, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x234, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x244, Size: 12]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x25c, Size: 12]
	int NumSockets();// 0x67a0bb0
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x67a0ae4
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x67a0a64
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x67a09e4
	BoxSphereBounds GetImportedBounds();// 0x67a0990
	BoxSphereBounds GetBounds();// 0x67a093c
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x67a0860
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x67a07e0

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x14, Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20, Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30, Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178, Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204, Size: 532]
	FName[] RemovedBones;//[Offset: 0x418, Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x424, Size: 12]
	AnimSequence* BakePose;//[Offset: 0x430, Size: 4]
	FString SourceImportFilename;//[Offset: 0x434, Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	byte TextureImportance;//[Offset: 0x1d, Size: 1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c, Size: 12]
	int BaseLOD;//[Offset: 0x38, Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44, Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144, Size: 4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte TextureWidth;//[Offset: 0x3, Size: 1]
	byte TextureHeight;//[Offset: 0x4, Size: 1]
	byte SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	byte TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24, Size: 68]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 1]
	byte Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	byte TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 1]
	byte BlendMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80, Size: 12]
	float StreamableFirstChunkSecond;//[Offset: 0x98, Size: 4]
	float StreamableFollowingChunkSecond;//[Offset: 0x9c, Size: 4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x108, Size: 1]
	byte RefPoseType;//[Offset: 0x109, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x10c, Size: 4]
	int RefFrameIndex;//[Offset: 0x110, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x114, Size: 4]
	FName RetargetSource;//[Offset: 0x118, Size: 8]
	enum Interpolation;//[Offset: 0x120, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x122, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x128, Size: 12]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24, Size: 104]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4, Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c, Size: 12]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28, Size: 12]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34, Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc, Size: 4]
	BodySetup*[] BodySetup;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2b0, Size: 12]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10, Size: 8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 8]
	Vector Pos1;//[Offset: 0x28, Size: 12]
	Vector PriAxis1;//[Offset: 0x34, Size: 12]
	Vector SecAxis1;//[Offset: 0x40, Size: 12]
	Vector Pos2;//[Offset: 0x4c, Size: 12]
	Vector PriAxis2;//[Offset: 0x58, Size: 12]
	Vector SecAxis2;//[Offset: 0x64, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c, Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58, Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 12]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 4]
	byte BlueprintType;//[Offset: 0x68, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 12]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]
	FName VariableName;//[Offset: 0x60, Size: 8]
	FName AttachToName;//[Offset: 0x68, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 12]
	Guid VariableGuid;//[Offset: 0x9c, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 4]
	byte LengthMode;//[Offset: 0x20, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 12]
	Guid TimelineGuid;//[Offset: 0x60, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	Vector GetVectorValue(float InTime);// 0x665f2fc

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	LinearColor GetLinearColorValue(float InTime);// 0x665e474

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 12]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 12]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 4]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 12]
	Guid AssetGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	float SavedPosition;//[Offset: 0x8, Size: 4]
	float SavedPlayRate;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x134, Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 1]
	float GravityScale;//[Offset: 0x13c, Size: 4]
	float MaxStepHeight;//[Offset: 0x140, Size: 4]
	float JumpZVelocity;//[Offset: 0x144, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x148, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x14c, Size: 4]
	float WalkableFloorZ;//[Offset: 0x150, Size: 4]
	byte MovementMode;//[Offset: 0x154, Size: 1]
	byte CustomMovementMode;//[Offset: 0x155, Size: 1]
	float GroundFriction;//[Offset: 0x180, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x184, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x188, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x18c, Size: 4]
	float MaxFlySpeed;//[Offset: 0x190, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x194, Size: 4]
	float MaxAcceleration;//[Offset: 0x198, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x19c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x1a0, Size: 4]
	float BrakingFriction;//[Offset: 0x1a4, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1ac, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1b0, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1b4, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1b8, Size: 4]
	float AirControl;//[Offset: 0x1bc, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1c0, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1c4, Size: 4]
	float FallingLateralFriction;//[Offset: 0x1c8, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1cc, Size: 4]
	float Buoyancy;//[Offset: 0x1d0, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1d4, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1d8, Size: 4]
	Rotator RotationRate;//[Offset: 0x1dc, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e8, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e8, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e8, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e8, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e8, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e8, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1e8, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e9, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e9, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e9, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e9, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e9, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e9, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1ec, Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1f0, Size: 4]
	float OutofWaterZ;//[Offset: 0x1f4, Size: 4]
	float Mass;//[Offset: 0x1f8, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x204, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x208, Size: 4]
	float PushForceFactor;//[Offset: 0x20c, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x210, Size: 4]
	float TouchForceFactor;//[Offset: 0x214, Size: 4]
	float MinTouchForce;//[Offset: 0x218, Size: 4]
	float MaxTouchForce;//[Offset: 0x21c, Size: 4]
	float RepulsionForce;//[Offset: 0x220, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x228, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x22c, Size: 4]
	Vector Acceleration;//[Offset: 0x230, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x23c, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x250, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x260, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x26c, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x270, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x27c, Size: 12]
	float AnalogInputModifier;//[Offset: 0x288, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x294, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x298, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x29c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2a0, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2a4, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2a8, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2ac, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2b0, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2b4, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2b8, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2bc, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2c0, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2c4, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2c8, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2cd, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2d0, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2d4, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2d8, Size: 160]
	byte DefaultLandMovementMode;//[Offset: 0x378, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x379, Size: 1]
	byte GroundMovementMode;//[Offset: 0x37a, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37b, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37b, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37b, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37b, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37b, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37b, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x380, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x380, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x380, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x380, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x380, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x380, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x380, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x381, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x381, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x381, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x381, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x381, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x381, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x381, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x382, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x382, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x382, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x382, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x382, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x394, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x398, Size: 12]
	int AvoidanceUID;//[Offset: 0x3a4, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3a8, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3ac, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b0, Size: 4]
	float AvoidanceWeight;//[Offset: 0x3b4, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x3b8, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4cc, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4d0, Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5f0, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x630, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x6653528
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x66534b0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x66533ec
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x6653368
	void SetGroupsToIgnore(int GroupFlags);// 0x384e144
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x66532e4
	void SetGroupsToAvoid(int GroupFlags);// 0x665326c
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x66531e8
	void SetAvoidanceGroup(int GroupFlags);// 0x6653170
	void SetAvoidanceEnabled(bool bEnable);// 0x66530f0
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x6652f9c
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6652a64
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x665252c
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x66521a0
	float K2_GetWalkableFloorZ();// 0x3794958
	float K2_GetWalkableFloorAngle();// 0x3794930
	float K2_GetModifiedMaxAcceleration();// 0x6652170
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x665204c
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x6651e50
	bool IsWalking();// 0x39b629c
	bool IsWalkable(out const HitResult Hit);// 0x38e38f8
	float GetValidPerchRadius();// 0x6651e28
	float GetPerchRadiusThreshold();// 0x6651e00
	PrimitiveComponent* GetMovementBase();// 0x6651dd8
	float GetMinAnalogSpeed();// 0x6651da8
	float GetMaxJumpHeightWithJumpTime();// 0x6651d78
	float GetMaxJumpHeight();// 0x6651d48
	float GetMaxBrakingDeceleration();// 0x38e30ec
	float GetMaxAcceleration();// 0x6651d18
	Vector GetImpartedMovementBaseVelocity();// 0x38e2fb4
	Vector GetCurrentAcceleration();// 0x38e2c74
	Character* GetCharacterOwner();// 0x38eb1d8
	float GetAnalogInputModifier();// 0x6651cf0
	void FlushServerMoves();// 0x6651cd4
	void DisableMovement();// 0x660a1fc
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6651a94
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x665168c
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6651368
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x66510c0
	void ClientAckGoodMove(float TimeStamp);// 0x399adf4
	void ClearAccumulatedForces();// 0x66510a4
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x362cc5c
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x6650f48
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x6650e7c
	void AddForce(Vector force);// 0x6650e04

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x128, Size: 4]
	Vector K2_GetInputVector();// 0x6762dcc
	bool IsMoveInputIgnored();// 0x6762e14
	Vector GetPendingInputVector();// 0x6762dcc
	Pawn* GetPawnOwner();// 0x6762da4
	Vector GetLastInputVector();// 0x6762d5c
	Vector ConsumeInputVector();// 0x6762d0c
	void AddInputVector(Vector WorldVector, bool bForce);// 0x36f2f84

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xfc, Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x114, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118, Size: 1]
	MovementProperties MovementState;//[Offset: 0x11c, Size: 4]
	void StopMovementKeepPathing();// 0x673e774
	void StopActiveMovement();// 0x368a004
	bool IsSwimming();// 0x452028c
	bool IsMovingOnGround();// 0x39b629c
	bool IsFlying();// 0x673e744
	bool IsFalling();// 0x3ad3acc
	bool IsCrouching();// 0x66323a8

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xc4, Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc8, Size: 4]
	Vector Velocity;//[Offset: 0xd0, Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xdd, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xe0, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xec, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf8, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf8, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf8, Size: 1]
	void StopMovementImmediately();// 0x38de270
	void SnapUpdatedComponentToPlane();// 0x673225c
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x35a9dec
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x67321e4
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x673216c
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x67320a4
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x673201c
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x38de3a8
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x387888c
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x6731e1c
	float K2_GetModifiedMaxSpeed();// 0x6731dec
	float K2_GetMaxSpeedModifier();// 0x6731dbc
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x36621f0
	Vector GetPlaneConstraintOrigin();// 0x6731d88
	Vector GetPlaneConstraintNormal();// 0x6731d54
	enum GetPlaneConstraintAxisSetting();// 0x6731d38
	PhysicsVolume* GetPhysicsVolume();// 0x362c798
	float GetMaxSpeed();// 0x6731d08
	float GetGravityZ();// 0x6731cd8
	Vector ConstrainNormalToPlane(Vector Normal);// 0x6731c3c
	Vector ConstrainLocationToPlane(Vector Location);// 0x6731ba0
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x6731b04

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]
	Vector[] TriangleVertexLocationArray;//[Offset: 0x84, Size: 12]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x310, Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x318, Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x368, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x368, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x368, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x368, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x369, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x36c, Size: 4]
	uint32 DataVersion;//[Offset: 0x370, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3fc, Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18, Size: 8]
	Color Color;//[Offset: 0x20, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30, Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 12]
	int AreaID;//[Offset: 0xc, Size: 4]
	class Object* AreaClass;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 144]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x684, Size: 4]
	float CapsuleRadius;//[Offset: 0x688, Size: 4]
	float CapsuleHeight;//[Offset: 0x68c, Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x664e00c
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x664df44
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x664de7c
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x664dd90
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x664dcac
	float GetUnscaledCapsuleRadius();// 0x664dc90
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x664dc5c
	float GetUnscaledCapsuleHalfHeight();// 0x664dc40
	float GetShapeScale();// 0x664dbd0
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x664da78
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x664d928
	float GetScaledCapsuleRadius();// 0x664d8a8
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x664d818
	float GetScaledCapsuleHalfHeight();// 0x664d798

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x674, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x678, Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67c, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67c, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67c, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x680, Size: 4]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	bool bNearPushBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bPushedByBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 12]
	Rotator Rotation;//[Offset: 0x20, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 224]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 4]
	float Position;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x310, Size: 4]
	byte Ping;//[Offset: 0x314, Size: 1]
	FString PlayerName;//[Offset: 0x318, Size: 12]
	int PlayerID;//[Offset: 0x330, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x334, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x334, Size: 1]
	int StartTime;//[Offset: 0x338, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x33c, Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x344, Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x350, Size: 12]
	Pawn* PawnPrivate;//[Offset: 0x368, Size: 4]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x4a51734
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x4a51734
	void OnRep_UniqueId();// 0x3598478
	void OnRep_Score();// 0x357c654
	void OnRep_PlayerName();// 0x357b710
	void OnRep_bIsInactive();// 0x3590e5c

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	float DamageImpulse;//[Offset: 0x20, Size: 4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 4]
	float DamageFalloff;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x360, Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x368, Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x36c, Size: 4]
	HUD* MyHUD;//[Offset: 0x374, Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x378, Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x37c, Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x384, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x39c, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x3a0, Size: 12]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x3ac, Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x3bc, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x3c0, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3cc, Size: 12]
	int ClientCap;//[Offset: 0x3d8, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x3dc, Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x3e0, Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x3e4, Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3e8, Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x456, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x457, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x484, Size: 4]
	NetConnection* NetConnection;//[Offset: 0x488, Size: 4]
	float InputYawScale;//[Offset: 0x498, Size: 4]
	float InputPitchScale;//[Offset: 0x49c, Size: 4]
	float InputRollScale;//[Offset: 0x4a0, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a4, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a4, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4a4, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4a4, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4a4, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4a4, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x4a8, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x4ac, Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x4b8, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x4b9, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x4ba, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x4bb, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x4bc, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d0, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x540, Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x544, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x550, Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x594, Size: 4]
	Vector SpawnLocation;//[Offset: 0x598, Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x5aa, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x5ac, Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x67777c8
	bool WasInputKeyJustPressed(Key Key);// 0x67774d4
	void ToggleSpeaking(bool bInSpeaking);// 0x677744c
	void SwitchLevel(FString URL);// 0x6777388
	void StopHapticEffect(enum Hand);// 0x6777310
	void StartFire(byte FireModeNum);// 0x6777290
	void SetVirtualJoystickVisibility(bool bVisible);// 0x6777208
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x6777068
	void SetName(FString S);// 0x6776fa4
	void SetMouseLocation(const int X, const int Y);// 0x6776ee8
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x6776e2c
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x6776d2c
	void SetControllerLightColor(Color Color);// 0x6776cbc
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6776af0
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x67769e4
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x67768d4
	void ServerViewPrevPlayer();// 0x6776878
	void ServerViewNextPlayer();// 0x677681c
	void ServerVerifyViewTarget();// 0x67767c0
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x67766b4
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x67765b0
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x6776094
	void ServerToggleAILogging();// 0x6776038
	void ServerShortTimeout();// 0x6775fdc
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x6775f14
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x6775dfc
	void ServerRestartPlayer();// 0x6775da0
	void ServerPause();// 0x6775d44
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x6775ca0
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x6775784
	void ServerCheckClientPossessionReliable();// 0x6775728
	void ServerCheckClientPossession();// 0x67756cc
	void ServerChangeName(FString S);// 0x67755d8
	void ServerCamera(FName NewMode);// 0x6775524
	void ServerAcknowledgePossession(Pawn* P);// 0x6775470
	void SendToConsole(FString Command);// 0x67753ac
	void RestartLevel();// 0x6775390
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x6775270
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x6775120
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x6774e40
	void Pause();// 0x3a4ee18
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x6774db0
	void OnGoingToLoseJoystick();// 0x6774d94
	void LocalTravel(FString URL);// 0x6774cd0
	bool IsInputKeyDown(Key Key);// 0x67749dc
	void GetViewportSize(out int SizeX, out int SizeY);// 0x67748fc
	SpectatorPawn* GetSpectatorPawn();// 0x67748e0
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x67747f8
	Vector GetInputVectorKeyState(Key Key);// 0x67744f4
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x6774374
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x6774294
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x6774110
	float GetInputKeyTimeDown(Key Key);// 0x6773e18
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x6773cf4
	float GetInputAnalogKeyState(Key Key);// 0x67739fc
	HUD* GetHUD();// 0x67739d4
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x67737c8
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6773610
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6773458
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x6773290
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x677311c
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6772fa8
	Vector GetFocalLocation();// 0x39e1b14
	void FOV(float NewFOV);// 0x6772f28
	void EnableCheats();// 0x6772f0c
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x6772da0
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x6772cc0
	void ConsoleKey(Key Key);// 0x67729cc
	void ClientWasKicked(const FText KickReason);// 0x6772838
	void ClientVoiceHandshakeComplete();// 0x3b948d4
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x6772680
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x6772314
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x6772164
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x6771fc4
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x6771e28
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x6771d64
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x6771c98
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x6771c18
	void ClientStartOnlineSession();// 0x362d0fc
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x38f5860
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x6771b10
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x6771a88
	void ClientSetHUD(class HUD NewHUDClass);// 0x6771a08
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x6771900
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x6771784
	void ClientSetCameraMode(FName NewCamMode);// 0x6771704
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x6771560
	void ClientSetBlockOnAsyncLoading();// 0x362b16c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x677149c
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x677141c
	void ClientRestart(Pawn* NewPawn);// 0x677139c
	void ClientReset();// 0x3612fb4
	void ClientRepObjRef(Object* Object);// 0x677131c
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x6771184
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x6771028
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x6770f04
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x6770db0
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x6770ca8
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x6770b3c
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x67709e8
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x6770718
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x67703ac
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x6770258
	void ClientIgnoreMoveInput(bool bIgnore);// 0x67701d0
	void ClientIgnoreLookInput(bool bIgnore);// 0x6770148
	void ClientGotoState(FName NewState);// 0x67700c8
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x676fffc
	void ClientForceGarbageCollection();// 0x38ee740
	void ClientFlushLevelStreaming();// 0x676ffe8
	void ClientEndOnlineSession();// 0x3a52370
	void ClientEnableNetworkVoice(bool bEnable);// 0x676ff60
	void ClientCommitMapChange();// 0x3a2135c
	void ClientClearCameraLensEffects();// 0x361390c
	void ClientCapBandwidth(int Cap);// 0x676fee0
	void ClientCancelPendingMapChange();// 0x41638e8
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x676fdd4
	void ClearJoystick();// 0x676fdb8
	void ClearAudioListenerOverride();// 0x676fda4
	void Camera(FName NewMode);// 0x676fd24
	void AddYawInput(float Val);// 0x676fca4
	void AddRollInput(float Val);// 0x676fc24
	void AddPitchInput(float Val);// 0x676fba4
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x39da274

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x310, Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x314, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x318, Size: 12]
	FName[] DebugDisplay;//[Offset: 0x32c, Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x338, Size: 12]
	Canvas* Canvas;//[Offset: 0x344, Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x348, Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x34c, Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x358, Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x35c, Size: 4]
	Actor* UpdateShowDebugTargetActor();// 0x4a51734
	void ShowHUD();// 0x357c654
	void ShowDebugToggleSubCategory(FName Category);// 0x669e4ac
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x669e434
	void ShowDebugForMoifiedTargetActor();// 0x669e420
	void ShowDebug(FName DebugType);// 0x3a77ea4
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x669e35c
	void RemoveAllDebugStrings();// 0x669e348
	void ReceiveHitBoxRelease(const FName BoxName);// 0x4a51734
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x4a51734
	void ReceiveHitBoxClick(const FName BoxName);// 0x4a51734
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x4a51734
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x4a51734
	Vector Project(Vector Location);// 0x669e2b4
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x669e0b8
	PlayerController* GetOwningPlayerController();// 0x3796cdc
	Pawn* GetOwningPawn();// 0x669e090
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x669de38
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x669dca0
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x669d828
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x669d5b0
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x669d414
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x669d090
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x669ce68
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x669ca90
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x669c8ac
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x669c748
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x669c5ac
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x669c1bc

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 4]
	float OrgY;//[Offset: 0x20, Size: 4]
	float ClipX;//[Offset: 0x24, Size: 4]
	float ClipY;//[Offset: 0x28, Size: 4]
	Color DrawColor;//[Offset: 0x2c, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	int SizeX;//[Offset: 0x34, Size: 4]
	int SizeY;//[Offset: 0x38, Size: 4]
	Plane ColorModulate;//[Offset: 0x40, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x664c958
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x664c848
	Vector K2_Project(Vector WorldLocation);// 0x664c7b4
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x664c610
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x664c33c
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x664bf34
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x664bda0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x664bbfc
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x664b9e4
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x664b88c
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x664b78c
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x664b26c
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x664b150

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xa8, Size: 4]
	int LevelIndex;//[Offset: 0xac, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xb0, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xb4, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xc0, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xca, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xca, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xca, Size: 1]
	byte AddressX;//[Offset: 0xcb, Size: 1]
	byte AddressY;//[Offset: 0xcc, Size: 1]
	int Blueprint_GetSizeY();// 0x67ca424
	int Blueprint_GetSizeX();// 0x67ca3fc

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 12]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 12]
	int IsRemapped;//[Offset: 0x3c, Size: 4]
	float EmScale;//[Offset: 0x40, Size: 4]
	float Ascent;//[Offset: 0x44, Size: 4]
	float Descent;//[Offset: 0x48, Size: 4]
	float Leading;//[Offset: 0x4c, Size: 4]
	int Kerning;//[Offset: 0x50, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 144]
	int NumCharacters;//[Offset: 0xe4, Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 12]
	float ScalingFactor;//[Offset: 0xf4, Size: 4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 4]
	FName LegacyFontName;//[Offset: 0x100, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 24]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 12]
	float Height;//[Offset: 0xc, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	byte CharacterSet;//[Offset: 0x11, Size: 1]
	FString Chars;//[Offset: 0x14, Size: 12]
	FString UnicodeRange;//[Offset: 0x20, Size: 12]
	FString CharsFilePath;//[Offset: 0x2c, Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 4]
	int XPadding;//[Offset: 0x64, Size: 4]
	int YPadding;//[Offset: 0x68, Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int Kerning;//[Offset: 0x80, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc, Size: 12]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 12]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 12]
	enum Hinting;//[Offset: 0xc, Size: 1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0, Size: 12]
	Int32Range[] CharacterRanges;//[Offset: 0xc, Size: 12]
	float ScalingFactor;//[Offset: 0x18, Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 12]
	FString DebugText;//[Offset: 0x1c, Size: 12]
	float TimeRemaining;//[Offset: 0x28, Size: 4]
	float Duration;//[Offset: 0x2c, Size: 4]
	Color TextColor;//[Offset: 0x30, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float FontScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x310, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x314, Size: 4]
	float DefaultFOV;//[Offset: 0x320, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x328, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x330, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x380, Size: 1408]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x900, Size: 1408]
	TViewTarget ViewTarget;//[Offset: 0xe80, Size: 1424]
	TViewTarget PendingViewTarget;//[Offset: 0x1410, Size: 1424]
	CameraModifier*[] ModifierList;//[Offset: 0x19b4, Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x19c0, Size: 12]
	float FreeCamDistance;//[Offset: 0x19cc, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x19d0, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x19dc, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x19f8, Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1a04, Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1a08, Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1a28, Size: 12]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1a40, Size: 12]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1a4c, Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x1a58, Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a5c, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a5c, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a5c, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a5d, Size: 1]
	float ViewPitchMin;//[Offset: 0x1a60, Size: 4]
	float ViewPitchMax;//[Offset: 0x1a64, Size: 4]
	float ViewYawMin;//[Offset: 0x1a68, Size: 4]
	float ViewYawMax;//[Offset: 0x1a6c, Size: 4]
	float ViewRollMin;//[Offset: 0x1a70, Size: 4]
	float ViewRollMax;//[Offset: 0x1a74, Size: 4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x676d3c8
	void StopCameraFade();// 0x3a11e04
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x676d2fc
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x676d230
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x676d164
	void StopAllCameraShakes(bool bImmediately);// 0x676d0dc
	void StopAllCameraAnims(bool bImmediate);// 0x676d054
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x676ce68
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x676cd54
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x66848fc
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x676ccd4
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x676cb78
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x676c854
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x676c6ec
	void OnPhotographySessionStart();// 0x3598478
	void OnPhotographySessionEnd();// 0x3590e5c
	void OnPhotographyMultiPartCaptureStart();// 0x357b710
	void OnPhotographyMultiPartCaptureEnd();// 0x357c654
	PlayerController* GetOwningPlayerController();// 0x676c6bc
	float GetFOVAngle();// 0x3998cfc
	Rotator GetCameraRotation();// 0x676c674
	Vector GetCameraLocation();// 0x676c62c
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x364a754
	void ClearCameraLensEffects();// 0x676c610
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x4a51734
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x676c588
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x676c500

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1392]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1312]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x560, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTDefaultOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSkyLightScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	byte BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc, Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2d4, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2dc, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e0, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2fc, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x300, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x304, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x308, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x30c, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x310, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x314, Size: 4]
	bool BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]
	Texture2D* BlindWatermarkingTexture;//[Offset: 0x31c, Size: 4]
	bool bOverride_BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	bool bOverride_ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 1]
	bool bOverride_BlindWatermarkingTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 1]
	float AutoExposureBias;//[Offset: 0x324, Size: 4]
	float HistogramLogMin;//[Offset: 0x328, Size: 4]
	float HistogramLogMax;//[Offset: 0x32c, Size: 4]
	float LensFlareIntensity;//[Offset: 0x330, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x334, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x344, Size: 4]
	int LensFlareCount;//[Offset: 0x348, Size: 4]
	float LensFlareThreshold;//[Offset: 0x34c, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x350, Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x354, Size: 16]
	float VignetteIntensity;//[Offset: 0x3d4, Size: 4]
	float GrainJitter;//[Offset: 0x3d8, Size: 4]
	float GrainIntensity;//[Offset: 0x3dc, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3e0, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3e4, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3e8, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ec, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3f0, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3f4, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3f8, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x404, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x408, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x40c, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x410, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x414, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x424, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x428, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x42c, Size: 4]
	float SRTDefaultOcclusion;//[Offset: 0x430, Size: 4]
	float SRTSkyLightScale;//[Offset: 0x434, Size: 4]
	float SRTFilterSmoothness;//[Offset: 0x438, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x43c, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x44c, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x450, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x454, Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x458, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x45c, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x460, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x464, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x468, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x46c, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x470, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x474, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x478, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x480, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x484, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x488, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x490, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x494, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x498, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4a0, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4a4, Size: 4]
	float MotionBlurMax;//[Offset: 0x4a8, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4ac, Size: 4]
	float LPVIntensity;//[Offset: 0x4b0, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4b4, Size: 4]
	float LPVSize;//[Offset: 0x4b8, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4bc, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4c0, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4c4, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4c8, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4cc, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4d0, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4d4, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4d8, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4dc, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4e0, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4e4, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4e8, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4ec, Size: 4]
	float LPVFadeRange;//[Offset: 0x4f0, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4f4, Size: 4]
	float ScreenPercentage;//[Offset: 0x4f8, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x4fc, Size: 12]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x508, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x50c, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x510, Size: 4]
	Object*[] Blendables;//[Offset: 0x514, Size: 12]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1392]
	PlayerState* PlayerState;//[Offset: 0x580, Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	byte Priority;//[Offset: 0x1d, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 4]
	float AlphaInTime;//[Offset: 0x24, Size: 4]
	float AlphaOutTime;//[Offset: 0x28, Size: 4]
	float Alpha;//[Offset: 0x2c, Size: 4]
	bool IsDisabled();// 0x3658268
	Actor* GetViewTarget();// 0x357e648
	void EnableModifier();// 0x38caa10
	void DisableModifier(bool bImmediate);// 0x3657310
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x4a51734
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x4a51734

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x354, Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x358, Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x35c, Size: 4]
	Transform RelativeTransform;//[Offset: 0x360, Size: 48]
	float BaseFOV;//[Offset: 0x390, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x394, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x398, Size: 12]
	float DistFromCamera;//[Offset: 0x3a4, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x310, Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x318, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x324, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x330, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x33c, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x348, Size: 12]
	void ToggleActive();// 0x667005c
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x666ff9c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x36ed0dc
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x666fee0
	void SetFloatParameter(FName ParameterName, float Param);// 0x666fe1c
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x666fd54
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x666fc98
	void OnRep_bCurrentlyActive();// 0x357b710
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x357b72c
	bool IsActive();// 0x666fc70
	void Deactivate();// 0x666fc5c
	void Activate();// 0x666fc48

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x674, Size: 4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x678, Size: 12]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x684, Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x691, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x691, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x691, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x691, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x692, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x692, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x692, Size: 1]
	byte LODMethod;//[Offset: 0x694, Size: 1]
	enum RequiredSignificance;//[Offset: 0x695, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x698, Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x6a4, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x6b0, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x6bc, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x6c8, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x6d4, Size: 12]
	Vector OldPosition;//[Offset: 0x6e0, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x6ec, Size: 12]
	float WarmupTime;//[Offset: 0x6f8, Size: 4]
	float WarmupTickRate;//[Offset: 0x6fc, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x704, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x70c, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x72c, Size: 12]
	float CustomTimeDilation;//[Offset: 0x740, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x784, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x790, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x798, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x799, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x79a, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x7c4, Size: 12]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x675d4ec
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x675f23c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x675f1c4
	void SetSocketName(FName InSocketName);// 0x675f14c
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x675f090
	void SetLODLevel(int InLODLevel);// 0x675f010
	void SetFloatParameter(FName ParameterName, float Param);// 0x675d420
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x675ef3c
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x675d348
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x675ee30
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x382a7dc
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x675ed24
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x675ec18
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x675eb10
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x675ea04
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x675e940
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x675e810
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x675e66c
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x675d284
	void OnMaterialLoaded(MaterialInterface* MaterialInstance, int ElementIndex);// 0x675e5b0
	int GetNumActiveParticles();// 0x675e588
	MaterialInterface* GetNamedMaterial(FName InName);// 0x675e500
	int GetLODLevel();// 0x675e4d0
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x675e3b4
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x675e294
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x675e178
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x675e05c
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x675df3c
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x675de20
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x675dd48
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x675dba8
	void EndTrails();// 0x675db94
	void CreateNamedDynamicMaterialInstanceAsync(FName InName, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x675da50
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x675d984
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x675d82c

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x675d4ec
	void SetFloatParameter(FName ParameterName, float Param);// 0x675d420
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x675d348
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x675d284

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 1]
	bool bAlwaysUpdateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 4]
	float WarmupTime;//[Offset: 0x28, Size: 4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bUseNewLodFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	byte LODMethod;//[Offset: 0x4e, Size: 1]
	float[] LODDistances;//[Offset: 0x50, Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x60, Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70, Size: 28]
	bool bIgnoreMisFrameSubmit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0x90, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 1]
	float Delay;//[Offset: 0x98, Size: 4]
	float DelayLow;//[Offset: 0x9c, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa4, Size: 4]
	enum InsignificantReaction;//[Offset: 0xa8, Size: 1]
	float InsignificanceDelay;//[Offset: 0xac, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xb0, Size: 1]
	bool bEnableTransparentRenderOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb4, Size: 12]
	float MacroUVRadius;//[Offset: 0xc0, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc4, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc8, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe4, Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf0, Size: 12]
	bool ContainsEmitterType(class Object TypeData);// 0x675cb1c

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20, Size: 8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x50, Size: 4]
	byte DetailMode;//[Offset: 0x54, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	enum SignificanceLevel;//[Offset: 0x56, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 12]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 12]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 12]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 12]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x2c, Size: 4]
	MaterialInterface* MaterialPath;//[Offset: 0x30, Size: 40]
	Vector EmitterOrigin;//[Offset: 0x58, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x64, Size: 12]
	byte ScreenAlignment;//[Offset: 0x70, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x74, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x78, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	byte SortMode;//[Offset: 0x7d, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e, Size: 1]
	float EmitterDuration;//[Offset: 0x80, Size: 4]
	float EmitterDurationLow;//[Offset: 0x84, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	int EmitterLoops;//[Offset: 0x8c, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x90, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0xb8, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xbc, Size: 12]
	float EmitterDelay;//[Offset: 0xc8, Size: 4]
	float EmitterDelayLow;//[Offset: 0xcc, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 1]
	byte InterpolationMethod;//[Offset: 0xd1, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xd4, Size: 4]
	int SubImages_Vertical;//[Offset: 0xd8, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	float RandomImageTime;//[Offset: 0xe0, Size: 4]
	int RandomImageChanges;//[Offset: 0xe4, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xec, Size: 12]
	float MacroUVRadius;//[Offset: 0xf8, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	int MaxDrawCount;//[Offset: 0x100, Size: 4]
	enum UVFlippingMode;//[Offset: 0x104, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0x108, Size: 4]
	Texture2D* CutoutTexturePath;//[Offset: 0x110, Size: 40]
	byte BoundingMode;//[Offset: 0x138, Size: 1]
	byte OpacitySourceMode;//[Offset: 0x139, Size: 1]
	float AlphaThreshold;//[Offset: 0x13c, Size: 4]
	int CutoutSubImagesX;//[Offset: 0x140, Size: 4]
	int CutoutSubImagesY;//[Offset: 0x144, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0x148, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0x14c, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0x158, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x168, Size: 12]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x174, Size: 12]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	byte LODValidity;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 28]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 1]
	byte EntryCount;//[Offset: 0x1, Size: 1]
	byte EntryStride;//[Offset: 0x2, Size: 1]
	byte SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0xc, Size: 12]
	byte LockFlag;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat rate;//[Offset: 0x30, Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x58, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x80, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x84, Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x90, Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2d, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x70, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x74, Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xb4, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xb8, Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	Vector MinValueVec;//[Offset: 0x24, Size: 12]
	Vector MaxValueVec;//[Offset: 0x30, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2c, Size: 1]
	FName EventName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 12]
	int ActiveTab;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 12]
	float ViewStartInput;//[Offset: 0x18, Size: 4]
	float ViewEndInput;//[Offset: 0x1c, Size: 4]
	float ViewStartOutput;//[Offset: 0x20, Size: 4]
	float ViewEndOutput;//[Offset: 0x24, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 4]
	Color CurveColor;//[Offset: 0x4, Size: 4]
	FString CurveName;//[Offset: 0x8, Size: 12]
	int bHideCurve;//[Offset: 0x14, Size: 4]
	int bColorCurve;//[Offset: 0x18, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 4]
	int bClamp;//[Offset: 0x20, Size: 4]
	float ClampLow;//[Offset: 0x24, Size: 4]
	float ClampHigh;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x67297c4
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x6729708
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x6729644
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x6729544
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x67294b4
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x6729434
	float K2_GetScalarParameterValue(FName ParameterName);// 0x67293b4
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x672933c
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x67292c4
	void CopyInterpParameters(MaterialInstance* Source);// 0x672924c

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	MaterialInterface* Parent;//[Offset: 0x54, Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x5c, Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x68, Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x74, Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x80, Size: 12]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x8c, Size: 60]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xcc, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0xf0, Size: 12]
	bool bEnableTexture2DArrayShaderVariant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 1]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 4]
	int FontPage;//[Offset: 0xc, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	byte BlendMode;//[Offset: 0xc, Size: 1]
	byte ShadingModel;//[Offset: 0xd, Size: 1]
	byte ShadingRate;//[Offset: 0xe, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x30, Size: 12]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakeMap;//[Offset: 0x3c, Size: 60]
	float SplitScreenShakeScale;//[Offset: 0x78, Size: 4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float OscillationDuration;//[Offset: 0x20, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 12]
	float AnimPlayRate;//[Offset: 0x80, Size: 4]
	float AnimScale;//[Offset: 0x84, Size: 4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 4]
	float ShakeScale;//[Offset: 0x134, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 4]
	void ReceiveStopShake(bool bImmediately);// 0x4a51734
	void ReceivePlayShake(float Scale);// 0x4a51734
	bool ReceiveIsFinished();// 0x36849c8
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x4a51734

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 4]
	float AnimLength;//[Offset: 0x20, Size: 4]
	Box BoundingBox;//[Offset: 0x24, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float BaseFOV;//[Offset: 0x44, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 1312]
	float BasePostProcessBlendWeight;//[Offset: 0x570, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 12]
	FName GroupName;//[Offset: 0x30, Size: 8]
	Color GroupColor;//[Offset: 0x38, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 4]
	byte ActiveCondition;//[Offset: 0x34, Size: 1]
	FString TrackTitle;//[Offset: 0x38, Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 4]
	float PlayRate;//[Offset: 0x3c, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 4]
	byte PlaySpace;//[Offset: 0x58, Size: 1]
	void Stop(bool bImmediate);// 0x6645ac0
	void SetScale(float NewDuration);// 0x3768f7c
	void SetDuration(float NewDuration);// 0x6645a48
	void SetCurrentTime(float NewTime);// 0x66459d0

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 4]
	Actor* GroupActor;//[Offset: 0x20, Size: 4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 12]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 12]
	FName LookAtGroupName;//[Offset: 0x80, Size: 8]
	float LinCurveTension;//[Offset: 0x88, Size: 4]
	float AngCurveTension;//[Offset: 0x8c, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	byte RotMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 12]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 12]
	Rotator ResetRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x310, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x314, Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x318, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	float AspectRatio;//[Offset: 0x328, Size: 4]
	float FOVAngle;//[Offset: 0x32c, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x330, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x340, Size: 1312]
	int GetAutoActivatePlayerIndex();// 0x6645420

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2c0, Size: 4]
	float OrthoWidth;//[Offset: 0x2c4, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c8, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x2cc, Size: 4]
	float AspectRatio;//[Offset: 0x2d0, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4, Size: 1]
	bool bAutoFixFovByAspectRatio;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d4, Size: 1]
	byte ProjectionMode;//[Offset: 0x2d5, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x2d8, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 1312]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x860, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x66465fc
	void SetProjectionMode(byte InProjectionMode);// 0x6646588
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x6646514
	void SetOrthoWidth(float InOrthoWidth);// 0x66464a0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x664642c
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x66463b8
	void SetFieldOfView(float InFieldOfView);// 0x3757648
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x6646330
	void SetAutoFixFovByAspectRatio(bool bInAutoFixFovByAspectRatio);// 0x66462b0
	void SetAspectRatio(float InAspectRatio);// 0x664623c
	void SetActive(bool bNewActive, bool bReset);// 0x66126b8
	void RemoveBlendable(interface classNone InBlendableObject);// 0x664614c
	void OnViewportSizeChanged(Vector2D OldViewportSize, Vector2D NewViewportSize);// 0x6646098
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x37b5f60
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x6646020
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x6645ef0

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 4]
	void Walk();// 0x38caa10
	void ViewSelf();// 0x3601c70
	void ViewPlayer(FString S);// 0x6656c14
	void ViewClass(class Actor DesiredClass);// 0x4514b4c
	void ViewActor(FName actorName);// 0x35b2bcc
	void TriggerCrash();// 0x6656c00
	void ToggleDebugCamera();// 0x3572474
	void ToggleAILogging();// 0x3572120
	void TestCollisionDistance();// 0x3b13ab0
	void Teleport();// 0x37c5d84
	void Summon(FString ClassName);// 0x3f4ae5c
	void StreamLevelOut(FName PackageName);// 0x6656b80
	void StreamLevelIn(FName PackageName);// 0x377dc54
	void Slomo(float NewTimeDilation);// 0x6656b00
	void SetWorldOrigin();// 0x6656aec
	void SetNavDrawDistance(float DrawDistance);// 0x6656a74
	void SetMouseSensitivityToDefault();// 0x6656a60
	void ServerToggleAILogging();// 0x6656a04
	void ReceiveInitCheatManager();// 0x4a51734
	void ReceiveEndPlay();// 0x4a51734
	void RebuildNavigation();// 0x3b1375c
	void PlayersOnly();// 0x35b5e24
	void OnlyLoadLevel(FName PackageName);// 0x6656984
	void LogLoc();// 0x35869b0
	void InvertMouse();// 0x6656970
	void God();// 0x38cbfac
	void Ghost();// 0x3852774
	void FreezeFrame(float Delay);// 0x35bccf4
	void Fly();// 0x35b5e08
	void FlushLog();// 0x6656954
	void EnableDebugCamera();// 0x38fdec8
	void DumpVoiceMutingState();// 0x3b6a01c
	void DumpPartyState();// 0x6656938
	void DumpOnlineSessionState();// 0x38f834c
	void DumpChatState();// 0x665691c
	void DisableDebugCamera();// 0x38fe184
	void DestroyTarget();// 0x35b6248
	void DestroyPawns(class Pawn aClass);// 0x59eaf70
	void DestroyAllPawnsExceptTarget();// 0x363ef50
	void DestroyAll(class Actor aClass);// 0x665689c
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x66567d8
	void DebugCapsuleSweepPawn();// 0x38fdc70
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x6656750
	void DebugCapsuleSweepClear();// 0x4555a8c
	void DebugCapsuleSweepChannel(byte Channel);// 0x66566d0
	void DebugCapsuleSweepCapture();// 0x38fdc8c
	void DebugCapsuleSweep();// 0x35b2ce8
	void DamageTarget(float DamageAmount);// 0x6656650
	void CheatScript(FString ScriptName);// 0x66564f8
	void ChangeSize(float F);// 0x435e520
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x66562fc
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x665611c
	void BugIt(FString ScreenShotDescription);// 0x6656058

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b5, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b5, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5b8, Size: 4]
	float SpeedScale;//[Offset: 0x5cc, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x5d0, Size: 4]
	float InitialAccel;//[Offset: 0x5d4, Size: 4]
	float InitialDecel;//[Offset: 0x5d8, Size: 4]
	void ToggleDisplay();// 0x6661108
	void ShowDebugSelectedInfo();// 0x3742050
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x6661090
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x4a51734
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x4a51734
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x4a51734
	Actor* GetSelectedActor();// 0x6661068

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x674, Size: 4]
	float FrustumAngle;//[Offset: 0x678, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x67c, Size: 4]
	float FrustumStartDist;//[Offset: 0x680, Size: 4]
	float FrustumEndDist;//[Offset: 0x684, Size: 4]
	Texture* Texture;//[Offset: 0x688, Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160, Size: 12]
	FName[] InvertedAxis;//[Offset: 0x190, Size: 12]
	void SetMouseSensitivity(const float Sensitivity);// 0x677cb84
	void SetBind(FName BindName, FString Command);// 0x677ca7c
	void InvertAxisKey(const Key AxisKey);// 0x677c790
	void InvertAxis(const FName AxisName);// 0x677c718
	void ClearSmoothing();// 0x677c704

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 16]
	FString Command;//[Offset: 0x10, Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 12]
	float Duration;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 12]
	NetDriver* Driver;//[Offset: 0x3c, Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 12]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 12]
	Actor* ViewTarget;//[Offset: 0x60, Size: 4]
	Actor* OwningActor;//[Offset: 0x64, Size: 4]
	Actor* ObserveTarget;//[Offset: 0x68, Size: 4]
	int MaxPacket;//[Offset: 0x6c, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool RecordLifetimeChangelist;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool BackwardsCompatible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xf0, Size: 12]
	double LastReceiveTime;//[Offset: 0x148, Size: 8]
	bool bOpenClampBandwidthDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29798, Size: 1]
	float MaxBandwitdhDeltaTime;//[Offset: 0x2979c, Size: 4]
	Channel*[] ChannelsToTick;//[Offset: 0x2994c, Size: 12]
	int MaxPacketFaultCountPerMinute;//[Offset: 0x2b444, Size: 4]
	int MaxPacketFaultCountTotal;//[Offset: 0x2b448, Size: 4]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x2b458, Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38, Size: 4]
	int MaxClientRate;//[Offset: 0x3c, Size: 4]
	float ServerTravelPause;//[Offset: 0x40, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44, Size: 4]
	float RelevantTimeout;//[Offset: 0x48, Size: 4]
	float KeepAliveTime;//[Offset: 0x4c, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50, Size: 4]
	float ConnectionTimeout;//[Offset: 0x54, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x58, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x60, Size: 4]
	NetConnection*[] ClientConnections;//[Offset: 0x64, Size: 12]
	World* World;//[Offset: 0x7c, Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x90, Size: 4]
	Property* RoleProperty;//[Offset: 0x94, Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x98, Size: 4]
	FName NetDriverName;//[Offset: 0xa0, Size: 8]
	float Time;//[Offset: 0xcc, Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x404, Size: 60]
	NetOptimConfig* NetOptimConfig;//[Offset: 0x490, Size: 4]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: NetOptimConfig.WorldSubsystem.Subsystem.Object
	bool ActorRepNetNotRelevantLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	<byte,ActorRepNetNotRelevantLODConfig> ActorRepNetNotRelevantLODGroups;//[Offset: 0x24, Size: 60]
	<byte,ActorReplicateFreqLODGroup> ActorReplicateFreqLODGroups;//[Offset: 0x60, Size: 60]

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: ActorRepNetNotRelevantLODConfig
	FName Category;//[Offset: 0x0, Size: 8]
	bool LODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float LODDeltaTime;//[Offset: 0xc, Size: 4]
	float LODDistFactor;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ActorReplicateFreqLODGroup
	FName Category;//[Offset: 0x0, Size: 8]
	bool LODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool LODDistEnhancedOnBack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float LODBackEnhanceMinDistSq;//[Offset: 0xc, Size: 4]
	float LODBackEnhanceFactor;//[Offset: 0x10, Size: 4]
	float LODLongDistViewFactor;//[Offset: 0x14, Size: 4]
	ActorReplicateFreqLODConfig[] LODDistConfigs;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ActorReplicateFreqLODConfig
	float DistSquared;//[Offset: 0x0, Size: 4]
	float NetUpdateFreq;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 12]
	float ActiveOpacity;//[Offset: 0x28, Size: 4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 4]
	float TimeUntilReset;//[Offset: 0x34, Size: 4]
	float ActivationDelay;//[Offset: 0x38, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float StartupDelay;//[Offset: 0x40, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 4]
	Texture2D* Image2;//[Offset: 0x4, Size: 4]
	SlateBrush Brush1;//[Offset: 0x8, Size: 152]
	SlateBrush Brush2;//[Offset: 0xa0, Size: 152]
	Vector2D Center;//[Offset: 0x138, Size: 8]
	Vector2D VisualSize;//[Offset: 0x140, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x148, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x150, Size: 8]
	Vector2D InputScale;//[Offset: 0x158, Size: 8]
	Key MainInputKey;//[Offset: 0x160, Size: 16]
	Key AltInputKey;//[Offset: 0x170, Size: 16]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4, Size: 8]
	Margin Margin;//[Offset: 0xc, Size: 16]
	SlateColor TintColor;//[Offset: 0x1c, Size: 28]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Object* ResourceObject;//[Offset: 0x3c, Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40, Size: 40]
	FName ResourceName;//[Offset: 0x68, Size: 8]
	Box2D UVRegion;//[Offset: 0x70, Size: 20]
	byte DrawAs;//[Offset: 0x84, Size: 1]
	byte Tiling;//[Offset: 0x85, Size: 1]
	byte Mirroring;//[Offset: 0x86, Size: 1]
	byte ImageType;//[Offset: 0x87, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x354, Size: 4]
	float BaseLookUpRate;//[Offset: 0x358, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x35c, Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x360, Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x364, Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
	void TurnAtRate(float rate);// 0x6663a5c
	void MoveUp_World(float Val);// 0x4544b78
	void MoveRight(float Val);// 0x3649068
	void MoveForward(float Val);// 0x4544af8
	void LookUpAtRate(float rate);// 0x66639e4

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x684, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x67b6bd0
	float GetUnscaledSphereRadius();// 0x664dc40
	float GetShapeScale();// 0x664dbd0
	float GetScaledSphereRadius();// 0x664d798

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x694, Size: 4]
	int LowDeviceForcedLodModel;//[Offset: 0x698, Size: 4]
	int PreviousLODLevel;//[Offset: 0x69c, Size: 4]
	int MinLOD;//[Offset: 0x6a0, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x6a4, Size: 4]
	byte TileLength;//[Offset: 0x6e4, Size: 1]
	byte TileNum;//[Offset: 0x6e5, Size: 1]
	Texture2D* TileTexture;//[Offset: 0x6e8, Size: 4]
	Vector2D TileLocalMin;//[Offset: 0x6ec, Size: 8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f4, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f4, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f4, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f4, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f4, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f4, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f4, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6f4, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f5, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f5, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f5, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f5, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f5, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f5, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f5, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x6f8, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x6fc, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x700, Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x714, Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x724, Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x760, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x778, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x78c, Size: 12]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x798, Size: 12]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x5c3b12c
	void SetOverrideCullingScreenSizeEnable(bool bEnable);// 0x67c3a14
	void SetOverrideCullingScreenSize(float ScreenSize);// 0x67c399c
	void SetLowDeviceForcedLodModel(int NewLowDeviceForcedLodModel);// 0x67c3924
	void SetForcedLodModel(int NewForcedLodModel);// 0x67c38ac
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x36dbb90
	void SetDirty();// 0x67c3898
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x67c3820
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x67c3748
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x672ef80
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x672ee70
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x672ed44
	void DisableMeshClipPlane(int PlaneIndex);// 0x362cbdc
	void DisableMeshClipArc();// 0x39a2318
	void DisableMeshClip4Planes();// 0x382a8e4

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 12]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 1]
	byte Y;//[Offset: 0x1, Size: 1]
	byte Z;//[Offset: 0x2, Size: 1]
	byte W;//[Offset: 0x3, Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd4, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe8, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf8, Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x118, Size: 16]
	Margin Padding;//[Offset: 0x128, Size: 16]
	WAnimTime WAnimTime;//[Offset: 0x138, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x148, Size: 12]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x154, Size: 12]
	delegate OnTouchStart;//[Offset: 0x160, Size: 16]
	delegate OnTouchMove;//[Offset: 0x170, Size: 16]
	delegate OnTouchEnd;//[Offset: 0x180, Size: 16]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x190, Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x19c, Size: 4]
	int Priority;//[Offset: 0x1a0, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a4, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a4, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a4, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a4, Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a4, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a4, Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	FName[] autoPlayNameList;//[Offset: 0x1a8, Size: 12]
	enum TickFrequency;//[Offset: 0x1b4, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1b8, Size: 4]
	void UnregisterInputComponent();// 0x59d9eb8
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x4a51734
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x59d9dec
	void StopListeningForAllInputActions();// 0x59d9dd8
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x59d9d60
	void SetWAnimTime(WAnimTime InWAnimTime);// 0x59d9cd8
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x59d9c18
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x59d9b5c
	void SetPadding(Margin InPadding);// 0x59d9ad4
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x59d9a5c
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x59d99e4
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x59d9928
	void SetInputActionPriority(int NewPriority);// 0x59d98b0
	void SetInputActionBlocking(bool bShouldBlock);// 0x59d9830
	void SetForegroundColor(SlateColor InForegroundColor);// 0x59d9510
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x59d9488
	void SetDesiredSizeInViewport(Vector2D Size);// 0x59d9418
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x59d939c
	void SetAnchorsInViewport(Anchors Anchors);// 0x59d9314
	void SetAlignmentInViewport(Vector2D Alignment);// 0x59d92a4
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x59d922c
	void RemoveFromViewport();// 0x59d9218
	void RegisterInputComponent();// 0x59d9204
	void PreConstruct(bool IsDesignTime);// 0x4a51734
	void PlaySound(SoundBase* SoundToPlay);// 0x59d918c
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x59d8fb8
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x59d8e28
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x59d8da8
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4a51734
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4a51734
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x4a51734
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4a51734
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x4a51734
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4a51734
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4a51734
	void OnPaint(out PaintContext Context);// 0x4a51734
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4a51734
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4a51734
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x4a51734
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4a51734
	void OnMouseCaptureLost();// 0x4a51734
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4a51734
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4a51734
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x4a51734
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x4a51734
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4a51734
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4a51734
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x4a51734
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x4a51734
	void OnFocusLost(FocusEvent InFocusEvent);// 0x4a51734
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4a51734
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4a51734
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4a51734
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4a51734
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x4a51734
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4a51734
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x59d8d28
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x35b280c
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x4a51734
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x4a51734
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x59d8b98
	bool IsPlayingAnimation();// 0x59d8b70
	bool IsListeningForInputAction(FName ActionName);// 0x59d8af0
	bool IsInViewport();// 0x59d88bc
	bool IsInteractable();// 0x4a51734
	bool IsAnyAnimationPlaying();// 0x59d8ac8
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x59d8a48
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x59d89c8
	Widget* GetWidgetFromName(out const FName Name);// 0x59d8934
	Pawn* GetOwningPlayerPawn();// 0x59d890c
	PlayerController* GetOwningPlayer();// 0x357e648
	LocalPlayer* GetOwningLocalPlayer();// 0x59d88e4
	bool GetIsVisible();// 0x59d88bc
	bool GetDontPaintWhenChildEmpty();// 0x59d8894
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x59d8814
	Anchors GetAnchorsInViewport();// 0x59d87d0
	Vector2D GetAlignmentInViewport();// 0x59d8790
	void Destruct();// 0x4a51734
	void Construct();// 0x4a51734
	void AddToViewport(int ZOrder);// 0x59d8718
	bool AddToPlayerScreen(int ZOrder);// 0x59d8698

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 16]
	FText ToolTipText;//[Offset: 0x30, Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 1]
	bool bDisableVolatileInSlateGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBufferNew;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9c, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0x9d, Size: 1]
	byte PreservedLayerNum;//[Offset: 0x9e, Size: 1]
	byte Cursor;//[Offset: 0x9f, Size: 1]
	enum Clipping;//[Offset: 0xa0, Size: 1]
	enum Visibility;//[Offset: 0xa1, Size: 1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	enum WidgetVisible;//[Offset: 0xa3, Size: 1]
	bool bOpenReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	bool bReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa8, Size: 4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc4, Size: 12]
	void SetWidgetRender(const enum InWidgetVisible);// 0x59df620
	void SetVisibility(enum InVisibility);// 0x59df5a0
	void SetUserFocus(PlayerController* PlayerController);// 0x59df528
	void SetToolTipText(out const FText InToolTipText);// 0x59df384
	void SetToolTip(Widget* Widget);// 0x59df30c
	void SetRenderTranslation(Vector2D Translation);// 0x59df29c
	void SetRenderTransformPivot(Vector2D Pivot);// 0x59df22c
	void SetRenderTransform(WidgetTransform InTransform);// 0x59df154
	void SetRenderShear(Vector2D Shear);// 0x59df0e4
	void SetRenderScale(Vector2D Scale);// 0x59df074
	void SetRenderAngle(float Angle);// 0x59deffc
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x59deef4
	void SetKeyboardFocus();// 0x59deee0
	void SetIsEnabled(bool bInIsEnabled);// 0x35b5ac0
	void SetCursor(byte InCursor);// 0x59dee68
	void SetClipping(enum InClipping);// 0x59dedf0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x59ded34
	void ResetCursor();// 0x59ded20
	void RemoveFromParent();// 0x37c5d84
	EventReply OnReply__DelegateSignature();// 0x4a51734
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4a51734
	bool IsVisible();// 0x59decf8
	bool IsHovered();// 0x59decd0
	void InvalidateLayoutCache();// 0x59decbc
	void InvalidateLayoutAndVolatility();// 0x59deca8
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x59dec28
	bool HasUserFocus(PlayerController* PlayerController);// 0x59deba8
	bool HasMouseCapture();// 0x59deb80
	bool HasKeyboardFocus();// 0x59deb58
	bool HasFocusedDescendants();// 0x59deb30
	bool HasAnyUserFocus();// 0x59deb08
	enum GetWidgetRender();// 0x59deae0
	Widget* GetWidget__DelegateSignature();// 0x4a51734
	enum GetVisibility();// 0x59deab8
	Geometry GetTickSpaceGeometry();// 0x59dea38
	Widget* GetTheTemplate();// 0x59dea90
	FText GetText__DelegateSignature();// 0x4a51734
	enum GetSlateVisibility__DelegateSignature();// 0x4a51734
	SlateColor GetSlateColor__DelegateSignature();// 0x4a51734
	SlateBrush GetSlateBrush__DelegateSignature();// 0x4a51734
	PanelWidget* GetParent();// 0x59dea68
	Geometry GetPaintSpaceGeometry();// 0x59dea38
	PlayerController* GetOwningPlayer();// 0x357e648
	byte GetMouseCursor__DelegateSignature();// 0x4a51734
	LinearColor GetLinearColor__DelegateSignature();// 0x4a51734
	bool GetIsEnabled();// 0x59dea10
	int GetInt32__DelegateSignature();// 0x4a51734
	float GetFloat__DelegateSignature();// 0x4a51734
	Vector2D GetDesiredSize();// 0x59de9d0
	enum GetClipping();// 0x59de9a8
	enum GetCheckBoxState__DelegateSignature();// 0x4a51734
	Geometry GetCachedGeometry();// 0x59de978
	Geometry GetCachedAllottedGeometry();// 0x59de948
	bool GetBool__DelegateSignature();// 0x4a51734
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x4a51734
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x4a51734
	void ForceVolatile(bool bForce);// 0x59de8c8
	void ForceLayoutPrepass();// 0x59de8b4
	void DisableVolatileInSlateGI(bool bDisabled);// 0x59de834
	void AdaptationWidgetSlot(out const Margin InOffset);// 0x59de7a4

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 4]
	Widget* Content;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xd0, Size: 12]
	bool RemoveChildAt(int Index);// 0x59c321c
	bool RemoveChild(Widget* Content);// 0x59c319c
	bool HasChild(Widget* Content);// 0x59c311c
	bool HasAnyChildren();// 0x59c30f4
	int GetChildrenCount();// 0x59c30cc
	int GetChildIndex(Widget* Content);// 0x59c304c
	Widget* GetChildAt(int Index);// 0x59c2fcc
	void ClearChildren();// 0x59c2fb8
	PanelSlot* AddChildAt(int Index, Widget* Content);// 0x59c2ef4
	PanelSlot* AddChild(Widget* Content);// 0x59c2e74

--------------------------------
Class: WAnimTime
	float PlayTime;//[Offset: 0x0, Size: 4]
	float PlayTime;//[Offset: 0x4, Size: 4]
	float PlayTime;//[Offset: 0x8, Size: 4]
	float PlayTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220, Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c, Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238, Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c, Size: 12]
	float GetStartTime();// 0x59e0614
	float GetEndTime();// 0x59e05ec

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x40, Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1d4, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1d8, Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 16]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 12]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 4]
	FloatRange SelectionRange;//[Offset: 0x74, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x84, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float FixedFrameInterval;//[Offset: 0x98, Size: 4]
	float InTime;//[Offset: 0x9c, Size: 4]
	float OutTime;//[Offset: 0xa0, Size: 4]
	float StartTime;//[Offset: 0xa4, Size: 4]
	float EndTime;//[Offset: 0xa8, Size: 4]
	bool bLowDeviceFrameRateLimitEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int LowDeviceFrameLimit;//[Offset: 0xb0, Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c, Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20, Size: 12]
	enum Ownership;//[Offset: 0x2c, Size: 1]
	enum DeviceLevel;//[Offset: 0x2d, Size: 1]
	enum UserQualitySettingLevel;//[Offset: 0x2e, Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c, Size: 4]
	Guid ParentGuid;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 12]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114, Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x14, Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 56]
	FName EvaluationGroup;//[Offset: 0x68, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4, Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34, Size: 16]
	int HierarchicalBias;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 12]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4, Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40, Size: 60]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 4]
	Widget*[] AllWidgets;//[Offset: 0x20, Size: 12]

--------------------------------
Class: Geometry

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38, Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c, Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	int ControllerId;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24, Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28, Size: 12]
	World* World;//[Offset: 0x58, Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c, Size: 4]
	void SSSwapControllers();// 0x365824c
	void ShowTitleSafeArea();// 0x3602490
	void SetConsoleTarget(int playerIndex);// 0x35bccf4
	static void RemoveViewportChangeDelegate(out const delegate Delegate);// 0x669a644
	static void AddViewportChangeDelegate(out const delegate Delegate);// 0x669a584

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 12]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 4]
	class Object* WithinClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24, Size: 12]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30, Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c, Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	void ReceiveShutdown();// 0x4a51734
	void ReceiveInit();// 0x4a51734
	void HandleTravelError(byte FailureType);// 0x4a51734
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x4a51734
	int GetDeviceLevel();// 0x36096c4
	void DebugRemovePlayer(int ControllerId);// 0x6656b00
	void DebugCreatePlayer(int ControllerId);// 0x384abdc

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x24, Size: 4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x28, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x34, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x40, Size: 4]
	float Priority;//[Offset: 0x44, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x48, Size: 4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x4c, Size: 12]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x58, Size: 4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 12]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 12]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	byte OutputTarget;//[Offset: 0x25, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float EQPriority;//[Offset: 0x20, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 12]
	float InitialDelay;//[Offset: 0x6c, Size: 4]
	float FadeInTime;//[Offset: 0x70, Size: 4]
	float Duration;//[Offset: 0x74, Size: 4]
	float FadeOutTime;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 4]
	float PitchAdjuster;//[Offset: 0x8, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 532]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	byte DistanceType;//[Offset: 0x7e, Size: 1]
	float OmniRadius;//[Offset: 0x80, Size: 4]
	float StereoSpread;//[Offset: 0x84, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0x88, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0x8c, Size: 4]
	float RadiusMin;//[Offset: 0x90, Size: 4]
	float RadiusMax;//[Offset: 0x94, Size: 4]
	float LPFRadiusMin;//[Offset: 0x98, Size: 4]
	float LPFRadiusMax;//[Offset: 0x9c, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xa0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xa4, Size: 88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xfc, Size: 88]
	float LPFFrequencyAtMin;//[Offset: 0x154, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x158, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x15c, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x160, Size: 4]
	float FocusAzimuth;//[Offset: 0x164, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x168, Size: 4]
	float FocusDistanceScale;//[Offset: 0x16c, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x170, Size: 4]
	float FocusPriorityScale;//[Offset: 0x174, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x178, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x17c, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x180, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x184, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x188, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x18c, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x190, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x194, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x198, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x19c, Size: 4]
	enum ReverbSendMethod;//[Offset: 0x1a0, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x1a4, Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x1a8, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x1ac, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x1b0, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x1b4, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1b8, Size: 88]
	float ManualReverbSendLevel;//[Offset: 0x210, Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8, Size: 88]
	byte AttenuationShape;//[Offset: 0x60, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x64, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x68, Size: 12]
	float ConeOffset;//[Offset: 0x74, Size: 4]
	float FalloffDistance;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 12]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 4]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 12]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x1cc, Size: 1]
	float SourceBusDuration;//[Offset: 0x1d0, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 1]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x6c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	int StreamingPriority;//[Offset: 0x74, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 1]
	byte SoundGroup;//[Offset: 0x7a, Size: 1]
	FString SpokenText;//[Offset: 0x7c, Size: 12]
	float SubtitlePriority;//[Offset: 0x88, Size: 4]
	float Volume;//[Offset: 0x8c, Size: 4]
	float Pitch;//[Offset: 0x90, Size: 4]
	int NumChannels;//[Offset: 0x94, Size: 4]
	int SampleRate;//[Offset: 0x98, Size: 4]
	int RawPCMDataSize;//[Offset: 0x9c, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xa0, Size: 12]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xac, Size: 12]
	CurveTable* Curves;//[Offset: 0xb8, Size: 4]
	CurveTable* InternalCurves;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 12]
	float Time;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 12]
	SubtitleCue[] Subtitles;//[Offset: 0xc, Size: 12]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 12]
	Object* Payload;//[Offset: 0x28, Size: 4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 4]
	enum Pivot;//[Offset: 0x30, Size: 1]
	Vector2D Offset;//[Offset: 0x34, Size: 8]
	delegate OnDrop;//[Offset: 0x3c, Size: 12]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 12]
	delegate OnDragged;//[Offset: 0x54, Size: 12]
	void Drop(out const PointerEvent PointerEvent);// 0x59b518c
	void Dragged(out const PointerEvent PointerEvent);// 0x59b4f58
	void DragCancelled(out const PointerEvent PointerEvent);// 0x59b4d24

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float Angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98, Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 12]
	FName DestinationProperty;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0xc, Size: 4]
	Field* Field;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x310, Size: 4]
	FName MatineeControllerName;//[Offset: 0x318, Size: 8]
	float PlayRate;//[Offset: 0x320, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	float ForceStartPosition;//[Offset: 0x328, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x32c, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x32c, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x32c, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x32c, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x330, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x334, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x338, Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x348, Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x354, Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x360, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x360, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x360, Size: 1]
	float InterpPosition;//[Offset: 0x364, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x36c, Size: 1]
	delegate OnPlay;//[Offset: 0x370, Size: 12]
	delegate OnStop;//[Offset: 0x37c, Size: 12]
	delegate OnPause;//[Offset: 0x388, Size: 12]
	void Stop();// 0x3590e5c
	void SetPosition(float NewPosition, bool bJump);// 0x672e180
	void SetLoopingState(bool bNewLooping);// 0x672e0f8
	void Reverse();// 0x3598478
	void Play();// 0x357b710
	void Pause();// 0x3628fb8
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x672df50
	void ChangePlaybackDirection();// 0x35738a0

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 4]
	float PathBuildTime;//[Offset: 0x20, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 4]
	float EdSectionStart;//[Offset: 0x34, Size: 4]
	float EdSectionEnd;//[Offset: 0x38, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 12]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 12]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2c0, Size: 4]
	Actor* ChildActor;//[Offset: 0x2c4, Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x2c8, Size: 4]
	void SetChildActorClass(class Actor InClass);// 0x665801c

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 4]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x4a51734
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x67090c4
	bool RemoteEvent(FName EventName);// 0x670903c
	void LevelReset();// 0x4a51734

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x314, Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x318, Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x31c, Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x674, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x678, Size: 1]
	float ScreenSize;//[Offset: 0x67c, Size: 4]
	float U;//[Offset: 0x680, Size: 4]
	float UL;//[Offset: 0x684, Size: 4]
	float V;//[Offset: 0x688, Size: 4]
	float VL;//[Offset: 0x68c, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x66382fc
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x6638164
	void SetSprite(Texture2D* NewSprite);// 0x3665678

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x318, Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x324, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x324, Size: 1]
	bool bEnableParallelWorld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x324, Size: 1]
	int[] ParallelWorldIds;//[Offset: 0x328, Size: 12]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x334, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x334, Size: 1]
	float KillZ;//[Offset: 0x338, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x33c, Size: 4]
	float WorldGravityZ;//[Offset: 0x340, Size: 4]
	float GlobalGravityZ;//[Offset: 0x344, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x348, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x34c, Size: 4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x350, Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x354, Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x358, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35c, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x360, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x36c, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x370, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 1]
	float MaxWorldSize;//[Offset: 0x378, Size: 4]
	int RegionSizeNear;//[Offset: 0x37c, Size: 4]
	int RegionSizeFar;//[Offset: 0x380, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 1]
	int Graduation;//[Offset: 0x388, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x38c, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x390, Size: 1]
	int VisibilityCellSize;//[Offset: 0x394, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x398, Size: 1]
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x399, Size: 1]
	byte CurrentDSPVSCategory;//[Offset: 0x39a, Size: 1]
	<byte,DSPVSParameter> DSPVSCategorys;//[Offset: 0x39c, Size: 60]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x3dc, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x42c, Size: 100]
	SurfelRayTracingSettings SurfelRayTracingSettings;//[Offset: 0x490, Size: 64]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x4d0, Size: 16]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x4e0, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x504, Size: 4]
	float WorldToMeters;//[Offset: 0x508, Size: 4]
	float MonoCullingDistance;//[Offset: 0x50c, Size: 4]
	BookMark* BookMarks;//[Offset: 0x510, Size: 4]
	float TimeDilation;//[Offset: 0x538, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x53c, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x540, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x544, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x548, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x54c, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x550, Size: 4]
	PlayerState* Pauser;//[Offset: 0x554, Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x55c, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x568, Size: 12]
	bool bEnableUnLoadLevelGCMemoryOptimitize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	float[] LODRelativeDistances;//[Offset: 0x578, Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	int WorldCompositionNums;//[Offset: 0x588, Size: 4]
	int CompositionBlockLength;//[Offset: 0x58c, Size: 4]
	void OnRep_WorldGravityZ();// 0x357b710

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x310, Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x31c, Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x320, Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x324, Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x328, Size: 4]
	class HUD* HUDClass;//[Offset: 0x32c, Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x330, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x334, Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x338, Size: 4]
	GameSession* GameSession;//[Offset: 0x33c, Size: 4]
	GameStateBase* GameState;//[Offset: 0x340, Size: 4]
	FText DefaultPlayerName;//[Offset: 0x344, Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x350, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x350, Size: 1]
	void StartPlay();// 0x37fa348
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x37ff920
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x6684990
	bool ShouldReset(Actor* ActorToReset);// 0x66848fc
	void ReturnToMainMenuHost();// 0x66848e0
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x66847c0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3820e24
	void RestartPlayer(Controller* NewPlayer);// 0x3620794
	void ResetLevel();// 0x668479c
	bool PlayerCanRestart(PlayerController* Player);// 0x37ff898
	bool MustSpectate(PlayerController* NewPlayerController);// 0x6684714
	void K2_PostLogin(PlayerController* NewPlayer);// 0x4a51734
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x4a51734
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x4a51734
	void K2_OnLogout(Controller* ExitingController);// 0x4a51734
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x4a51734
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x668460c
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x6684548
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x357b72c
	bool HasMatchStarted();// 0x665a32c
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x3ad3d8c
	int GetNumSpectators();// 0x6651d18
	int GetNumPlayers();// 0x6652170
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x66844c0
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x66843b0
	Actor* ChoosePlayerStart(Controller* Player);// 0x6684328
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x41628cc
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x668425c

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x310, Size: 4]
	int MaxPlayers;//[Offset: 0x314, Size: 4]
	int MaxPartySize;//[Offset: 0x318, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x31c, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	FName SessionName;//[Offset: 0x320, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x310, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x314, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x318, Size: 4]
	PlayerState*[] PlayerArray;//[Offset: 0x31c, Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x32c, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x330, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x334, Size: 4]
	void OnRep_SpectatorClass();// 0x367a48c
	void OnRep_ReplicatedWorldTimeSeconds();// 0x36ad318
	void OnRep_ReplicatedHasBegunPlay();// 0x3864510
	void OnRep_GameModeClass();// 0x36cd020
	bool HasMatchStarted();// 0x3a6237c
	bool HasBegunPlay();// 0x6697b74
	float GetServerWorldTimeSeconds();// 0x3a28ad8
	float GetPlayerStartTime(Controller* Controller);// 0x6697aec
	float GetPlayerRespawnDelay(Controller* Controller);// 0x6697a64

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x310, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x314, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x318, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x31c, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x320, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x328, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x32c, Size: 4]
	int BadPingThreshold;//[Offset: 0x330, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x334, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x338, Size: 4]
	float PercentForBadPing;//[Offset: 0x33c, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x340, Size: 4]
	float MoveRepSize;//[Offset: 0x344, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x348, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x34c, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x350, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x354, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x358, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x35c, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x360, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x364, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x368, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x36c, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x374, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x37c, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x380, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x384, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x388, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]

--------------------------------
Class: DSPVSParameter
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	int DSVisibilityCellSize;//[Offset: 0x4, Size: 4]
	byte DSVisibilityAggressiveness;//[Offset: 0x8, Size: 1]
	int[] DSDebugGroups;//[Offset: 0xc, Size: 12]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: SurfelRayTracingSettings
	bool bAllowSurfelRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	Vector SurfelVoxelSize;//[Offset: 0x4, Size: 12]
	IntVector SurfelHierarchyDimension;//[Offset: 0x10, Size: 12]
	Vector IrradianceVolumeCellSize;//[Offset: 0x1c, Size: 12]
	IntVector IrradianceVolumeDimension;//[Offset: 0x28, Size: 12]
	uint32 IrradianceVolumeCellDim;//[Offset: 0x34, Size: 4]
	uint32 SurfelInjectSingleSize;//[Offset: 0x38, Size: 4]
	uint32 SurfelPoolInitScale;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	byte ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 4]
	float Volume;//[Offset: 0x8, Size: 4]
	float FadeTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c, Size: 4]
	float Diffusion;//[Offset: 0x20, Size: 4]
	float Gain;//[Offset: 0x24, Size: 4]
	float GainHF;//[Offset: 0x28, Size: 4]
	float DecayTime;//[Offset: 0x2c, Size: 4]
	float DecayHFRatio;//[Offset: 0x30, Size: 4]
	float ReflectionsGain;//[Offset: 0x34, Size: 4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 4]
	float LateGain;//[Offset: 0x3c, Size: 4]
	float LateDelay;//[Offset: 0x40, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 12]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 4]
	Actor* InViewer;//[Offset: 0x4, Size: 4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 4]
	Vector ViewLocation;//[Offset: 0xc, Size: 12]
	Vector ViewDir;//[Offset: 0x18, Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20, Size: 8]
	World* WorldAsset;//[Offset: 0x28, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 12]
	Transform LevelTransform;//[Offset: 0x70, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa3, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa3, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa3, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa3, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 1]
	int LevelLODIndex;//[Offset: 0xa8, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 1]
	Color DrawColor;//[Offset: 0xb0, Size: 4]
	LinearColor LevelColor;//[Offset: 0xb4, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc4, Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xd0, Size: 4]
	FString[] Keywords;//[Offset: 0xd8, Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe4, Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xf0, Size: 12]
	delegate OnLevelShown;//[Offset: 0xfc, Size: 12]
	delegate OnLevelHidden;//[Offset: 0x108, Size: 12]
	delegate OnStatusChanged;//[Offset: 0x114, Size: 12]
	Level* LoadedLevel;//[Offset: 0x12c, Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 4]
	Level*[] UnloadingLevels;//[Offset: 0x134, Size: 12]
	bool IsStreamingStatePending();// 0x6709a44
	bool IsLevelVisible();// 0x6709a1c
	bool IsLevelLoaded();// 0x67099f8
	FName GetWorldAssetPackageFName();// 0x67099b8
	Level* GetLoadedLevel();// 0x670999c
	LevelScriptActor* GetLevelScriptActor();// 0x6709974
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x6709814

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x338, Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 1]
	byte StreamingUsage;//[Offset: 0x345, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x534, Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x7b4, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x838, Size: 4]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 4]
	Level* Level;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4, Size: 60]
	<FName,ObjectPoolClassConfig> mapClassConfigs;//[Offset: 0x40, Size: 60]
	Actor* Holder;//[Offset: 0x84, Size: 4]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0, Size: 4]
	int ObjectLifePeriodTime;//[Offset: 0x4, Size: 4]
	Object*[] Pool;//[Offset: 0x8, Size: 12]
	<Object*,uint32> RecycleTime;//[Offset: 0x14, Size: 60]
	int Size;//[Offset: 0x50, Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]

--------------------------------
Class: ObjectPoolClassConfig
	FName ObjectClassName;//[Offset: 0x0, Size: 8]
	bool ObjectPoolEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool ObjectPoolEnableForComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int PoolSize;//[Offset: 0xc, Size: 4]
	int LifePeriodTime;//[Offset: 0x10, Size: 4]
	bool UseOldPoolLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool DisableOnLowMemDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	int BackendSwitchType;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c, Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20, Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x28, Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	enum DataGatheringMode;//[Offset: 0x2d, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x30, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x34, Size: 12]
	float UpdateInterval;//[Offset: 0x40, Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x44, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x48, Size: 12]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x54, Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa8, Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb4, Size: 12]
	enum OperationMode;//[Offset: 0x15c, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x673932c
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x67392b4
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x67391f4
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x6739140
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x67390c8
	void SetGeometryGatheringMode(enum NewMode);// 0x6739050
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x673903c
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x6738f3c
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x6738d90
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x6738d18
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x6738b18
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x6738928
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6738738
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6738548
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x67384d0
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x6738458
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x67382ac
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6738100
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6737efc
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6737cf8
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x6737c80
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x6737ad4
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x67378f4

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 4]
	float TravelCostOverride;//[Offset: 0x4, Size: 4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x338, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c, Size: 12]
	Vector[] PathPoints;//[Offset: 0x28, Size: 12]
	byte RecalculateOnInvalidation;//[Offset: 0x34, Size: 1]
	bool IsValid();// 0x6736fa0
	bool IsStringPulled();// 0x370390c
	bool IsPartial();// 0x6736f78
	float GetPathLength();// 0x6736f50
	float GetPathCost();// 0x6736f28
	FString GetDebugString();// 0x6736e68
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x6736de8
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x6736d18

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 24]
	FName AISystemModuleName;//[Offset: 0x38, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 4]
	float TestHeightDifference;//[Offset: 0x34, Size: 4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x6637d44
	int GetObjectCount();// 0x6637d1c
	int GetNewAvoidanceUID();// 0x6637cf4
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x6637c64

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 4]
	<Level*> Levels;//[Offset: 0x14, Size: 60]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 4]
	World* World;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0xd4, Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xe0, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xec, Size: 4]
	FString PVEBordersName;//[Offset: 0xf0, Size: 12]
	FString[] UnloadTileOnServer;//[Offset: 0xfc, Size: 12]
	<FString> UnloadTileSet;//[Offset: 0x108, Size: 60]
	bool bClientUseInitViewpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	Vector ClientInitViewPoint;//[Offset: 0x160, Size: 12]
	LevelStreaming*[] LandScapeStreamingLevel;//[Offset: 0x16c, Size: 12]
	bool SetStreamingDistanceScalePerLevel(out const FName LevelName, float Scale);// 0x67d8c68
	bool SetStreamingDistanceScaleByLayer(FString LayerName, float Scale);// 0x67d8b60
	bool SetStreamingDistanceScaleAllLevel(float Scale);// 0x67d8ae0
	bool RemoveDynamicTile(FString TilePackageNameStr);// 0x67d8a1c
	LevelStreaming* GetDynamicTile(FString TilePackageNameStr);// 0x67d8958
	void AddEnableStreamingTile(int EnableTileIdx);// 0x67d88e0
	void AddEnableStreamingLayer(FString EnableLayerName);// 0x67d8788
	LevelStreaming* AddDynamicTile(FString TilePackageNameStr, int X, int Y, bool bAllowCopy, bool bDisableDistanceStreaming);// 0x67d859c

--------------------------------
Class: AkAmbientSound.Actor.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x310, Size: 4]
	AkComponent* AkComponent;//[Offset: 0x314, Size: 4]
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	void StopAmbientSound();// 0x7423458
	void StartAmbientSound();// 0x7423444

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MinimumDuration;//[Offset: 0x28, Size: 4]
	float MaximumDuration;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2c0, Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2c4, Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x2d0, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x2d4, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2d8, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e2, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e2, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x2e4, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x2e8, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2ec, Size: 4]
	FString EventName;//[Offset: 0x2f0, Size: 12]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x742a8b4
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x742a580
	void StopPlayingID(int StopEventID);// 0x742a508
	void Stop();// 0x742a4f4
	int SetSwitch(FString SwitchGroup, FString SwitchState);// 0x742a27c
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x742a1fc
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x742a060
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x7429e80
	void SetOutputBusVolume(float BusVolume);// 0x7429e08
	void SetListeners(out const AkComponent*[] Listeners);// 0x7429d3c
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x7429cc4
	void SetAutoDestroy(bool in_AutoDestroy);// 0x7429c48
	void SetAttenuationScalingFactor(float Value);// 0x7429bd0
	int SeekOnEvent(FString in_EventName, int in_iPosition);// 0x7429ac8
	void PostTrigger(FString Trigger);// 0x7429970
	int PostAssociatedAkEvent();// 0x7429948
	int PostAkEventByName(FString in_EventName);// 0x7429884
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x742977c
	float GetAttenuationRadius();// 0x7429754
	void GetAkGameObjectName(out FString Name);// 0x7429688

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x318, Size: 32]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x338, Size: 4]
	SoftObjectPath LevelSequence;//[Offset: 0x340, Size: 24]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x358, Size: 12]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x364, Size: 4]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x368, Size: 4]
	bool bReduceFrequency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	int ReduceFrameCount;//[Offset: 0x370, Size: 4]
	float IgnoreFrameTolerance;//[Offset: 0x374, Size: 4]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x37c, Size: 4]
	bool bForceAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x384, Size: 4]
	void SetSequence(LevelSequence* InSequence);// 0x5c4955c
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x5c49404
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x5c4926c
	void SetAllMovieSceneSectionsToKeepState();// 0x5c49258
	void ResetBindings();// 0x5c49218
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x5c49120
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x5c48fe0
	void ReceiveInitailizePlayer();// 0x4a51734
	LevelSequence* GetSequence(bool bLoad, bool bInitializePlayer);// 0x5c48f08
	MovieSceneObjectBindingID GetPossessableByName(FString NameKeyString);// 0x5c48e30
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x5c48ca8

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0, Size: 4]
	float PlayRate;//[Offset: 0x4, Size: 4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	interface class None* BindingOverrides;//[Offset: 0x18, Size: 8]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x644, Size: 12]
	delegate OnTrackEvent;//[Offset: 0x650, Size: 12]
	Object*[] AdditionalEventReceivers;//[Offset: 0x688, Size: 12]
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x5c4a7bc

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x2e0, Size: 12]
	delegate OnPlayReverse;//[Offset: 0x2ec, Size: 12]
	delegate OnStop;//[Offset: 0x2f8, Size: 12]
	delegate OnPreStop;//[Offset: 0x304, Size: 12]
	bool FreezeEndFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	delegate OnPause;//[Offset: 0x314, Size: 12]
	delegate OnFinished;//[Offset: 0x320, Size: 12]
	delegate OnObjectSpawnedEvent;//[Offset: 0x32c, Size: 12]
	byte Status;//[Offset: 0x338, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 1]
	bool bPendingFirstUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x33c, Size: 4]
	float TimeCursorPosition;//[Offset: 0x340, Size: 4]
	float StartTime;//[Offset: 0x344, Size: 4]
	float EndTime;//[Offset: 0x348, Size: 4]
	int CurrentNumLoops;//[Offset: 0x34c, Size: 4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x35c, Size: 32]
	void Stop();// 0x57aad8c
	void StartPlayingNextTick();// 0x57aad78
	void SetPlayRate(float PlayRate);// 0x57aad00
	void SetPlayLoopCount(int NumLoops);// 0x57aac88
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x57aabcc
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x57aaa8c
	void Scrub();// 0x57aabb8
	void PlayReverse();// 0x57aaba4
	void PlayLooping(int NumLoops);// 0x57aab2c
	void Play();// 0x57aab18
	void Pause();// 0x57aab04
	void JumpToPositionEx(float NewPlaybackPosition);// 0x57aaa8c
	void JumpToPosition(float NewPlaybackPosition);// 0x57aaa14
	bool IsPlaying();// 0x57aa9ec
	bool IsPaused();// 0x57aa9c4
	void GoToEndAndStop();// 0x57aa9b0
	float GetPlayRate();// 0x415798c
	float GetPlaybackStart();// 0x57aa994
	float GetPlaybackPosition();// 0x36a0644
	float GetPlaybackEnd();// 0x57aa978
	float GetLength();// 0x57aa950
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x57aa80c
	void ChangePlaybackDirection();// 0x57aa7f8

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 60]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x260, Size: 60]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x29c, Size: 60]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 12]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 12]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x1c, Size: 12]
	Object* CachedComponent;//[Offset: 0x28, Size: 8]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 4]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x20, Size: 24]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x38, Size: 4]

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x20, Size: 12]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 24]
	Object* Object;//[Offset: 0x18, Size: 8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x204, Size: 48]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x234, Size: 4]
	void SetSettings(Object* InSettings);// 0x4a51734
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x3f56c2c

--------------------------------
Class: LevelSequencePlayerSnapshot
	FText MasterName;//[Offset: 0x0, Size: 12]
	float MasterTime;//[Offset: 0xc, Size: 4]
	FText CurrentShotName;//[Offset: 0x10, Size: 12]
	float CurrentShotLocalTime;//[Offset: 0x1c, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x20, Size: 4]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x24, Size: 8]
	MovieSceneSequenceID ShotID;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	float FrameRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Editor_login_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x318, Size: 4]
	void SetFpsByIndex(int idx, int CallFunc_Subtract_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x4a51734
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x4a51734
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x4a51734
	void InpActEvt_BackSpace_K2Node_InputKeyEvent(Key Key);// 0x4a51734
	void InpActEvt_B_K2Node_InputKeyEvent(Key Key);// 0x4a51734
	void InpActEvt_G_K2Node_InputKeyEvent(Key Key);// 0x4a51734
	void ReceiveBeginPlay();// 0x4a51734
	void ExecuteUbergraph_Editor_login(int EntryPoint, bool CallFunc_IsEditor_ReturnValue, FString ___string_Variable, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key2, bool CallFunc_NotEqual_IntInt_ReturnValue, Key K2Node_InputKeyEvent_Key3, FString CallFunc_GetPlatformName_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_IsEditor_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, Key K2Node_InputKeyEvent_Key4, Key K2Node_InputKeyEvent_Key5);// 0x4a51734

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: LuaBPVar

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x357e618
	static GameBackendHUD* GetInstance();// 0x3f49630
	GameFrontendHUD* GetGameFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x3f495b0
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x3f49530

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x1c, Size: 4]
	FString BackendUtilsClassName;//[Offset: 0x20, Size: 12]
	BackendUtils* Utils;//[Offset: 0x2c, Size: 4]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x30, Size: 12]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x3c, Size: 60]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x68e4878
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x68e47f8

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20, Size: 4]
	SoftObjectPath TinyFontName;//[Offset: 0x28, Size: 24]
	Font* SmallFont;//[Offset: 0x5c, Size: 4]
	SoftObjectPath SmallFontName;//[Offset: 0x60, Size: 24]
	Font* MediumFont;//[Offset: 0x78, Size: 4]
	SoftObjectPath MediumFontName;//[Offset: 0x80, Size: 24]
	Font* LargeFont;//[Offset: 0x98, Size: 4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0, Size: 24]
	Font* SubtitleFont;//[Offset: 0xb8, Size: 4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0, Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xd8, Size: 12]
	FString[] AdditionalFontNames;//[Offset: 0xec, Size: 12]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 4]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x190, Size: 4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x198, Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1b0, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1b4, Size: 4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b8, Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1d0, Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e8, Size: 4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1f0, Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x208, Size: 4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x20c, Size: 4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x210, Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x228, Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x240, Size: 24]
	Object* GameSingleton;//[Offset: 0x258, Size: 4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x260, Size: 24]
	AssetManager* AssetManager;//[Offset: 0x278, Size: 4]
	Texture2D* DefaultTexture;//[Offset: 0x27c, Size: 4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x280, Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x298, Size: 4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2a0, Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b8, Size: 4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2c0, Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d8, Size: 4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2e0, Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f8, Size: 4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x300, Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x318, Size: 4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x320, Size: 24]
	Material* WireframeMaterial;//[Offset: 0x338, Size: 4]
	FString WireframeMaterialName;//[Offset: 0x33c, Size: 12]
	Material* DebugMeshMaterial;//[Offset: 0x348, Size: 4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x350, Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x368, Size: 4]
	FString LevelColorationLitMaterialName;//[Offset: 0x36c, Size: 12]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x378, Size: 4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x37c, Size: 12]
	Material* LightingTexelDensityMaterial;//[Offset: 0x388, Size: 4]
	FString LightingTexelDensityName;//[Offset: 0x38c, Size: 12]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x398, Size: 4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x39c, Size: 12]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a8, Size: 4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3ac, Size: 12]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b8, Size: 4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3c0, Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x3d8, Size: 4]
	FString VertexColorMaterialName;//[Offset: 0x3dc, Size: 12]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e8, Size: 4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3ec, Size: 12]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f8, Size: 4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3fc, Size: 12]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x408, Size: 4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x40c, Size: 12]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x418, Size: 4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x41c, Size: 12]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x428, Size: 4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x42c, Size: 12]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x438, Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x450, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x454, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x458, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x45c, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x460, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x464, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x468, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x46c, Size: 4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x470, Size: 4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x478, Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x490, Size: 4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x498, Size: 24]
	Material* ArrowMaterial;//[Offset: 0x4b0, Size: 4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b8, Size: 24]
	Material* OutlineMaterial;//[Offset: 0x4d0, Size: 4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d8, Size: 24]
	Material* OutlineMaskedMaterial;//[Offset: 0x4f0, Size: 4]
	SoftObjectPath OutlineMaskedMaterialName;//[Offset: 0x4f8, Size: 24]
	Material* LowLevelLODMaterial;//[Offset: 0x510, Size: 4]
	Material* LowLevelLODMaskMaterial;//[Offset: 0x514, Size: 4]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x518, Size: 24]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x530, Size: 24]
	Texture2D* SmaaAreaTex;//[Offset: 0x548, Size: 4]
	Texture2D* SmaaSearchTex;//[Offset: 0x54c, Size: 4]
	Material* DyeingColorMaterial;//[Offset: 0x550, Size: 4]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x558, Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x570, Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x580, Size: 12]
	LinearColor[] QuadComplexityColors;//[Offset: 0x58c, Size: 12]
	LinearColor[] LightComplexityColors;//[Offset: 0x598, Size: 12]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x5a4, Size: 12]
	LinearColor[] LODColorationColors;//[Offset: 0x5b0, Size: 12]
	LinearColor[] HLODColorationColors;//[Offset: 0x5bc, Size: 12]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x5c8, Size: 12]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x5d4, Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x5d8, Size: 4]
	float MinLightMapDensity;//[Offset: 0x5dc, Size: 4]
	float IdealLightMapDensity;//[Offset: 0x5e0, Size: 4]
	float MaxLightMapDensity;//[Offset: 0x5e4, Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x5ec, Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x5f0, Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x5f4, Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x604, Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x614, Size: 12]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x620, Size: 4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x628, Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x640, Size: 12]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x64c, Size: 12]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x658, Size: 12]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x664, Size: 12]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x670, Size: 4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x678, Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x690, Size: 4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x698, Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x6b0, Size: 4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x6b8, Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x6d0, Size: 4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x6d8, Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x6f4, Size: 4]
	FString[] DeferredCommands;//[Offset: 0x6f8, Size: 12]
	int TickCycles;//[Offset: 0x704, Size: 4]
	int GameCycles;//[Offset: 0x708, Size: 4]
	int ClientCycles;//[Offset: 0x70c, Size: 4]
	float NearClipPlane;//[Offset: 0x710, Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x714, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x714, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x718, Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71c, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71c, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71c, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71c, Size: 1]
	float FixedFrameRate;//[Offset: 0x720, Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x724, Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x734, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x738, Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73c, Size: 1]
	Color C_WorldBox;//[Offset: 0x740, Size: 4]
	Color C_BrushWire;//[Offset: 0x744, Size: 4]
	Color C_AddWire;//[Offset: 0x748, Size: 4]
	Color C_SubtractWire;//[Offset: 0x74c, Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x750, Size: 4]
	Color C_NonSolidWire;//[Offset: 0x754, Size: 4]
	Color C_WireBackground;//[Offset: 0x758, Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x75c, Size: 4]
	Color C_VolumeCollision;//[Offset: 0x760, Size: 4]
	Color C_BSPCollision;//[Offset: 0x764, Size: 4]
	Color C_OrthoBackground;//[Offset: 0x768, Size: 4]
	Color C_Volume;//[Offset: 0x76c, Size: 4]
	Color C_BrushShape;//[Offset: 0x770, Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x774, Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x778, Size: 12]
	byte TransitionType;//[Offset: 0x784, Size: 1]
	FString TransitionDescription;//[Offset: 0x788, Size: 12]
	FString TransitionGameMode;//[Offset: 0x794, Size: 12]
	float MeshLODRange;//[Offset: 0x7a0, Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a4, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x7a8, Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x7ac, Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x7b0, Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x7b4, Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b8, Size: 1]
	int MaxParticleResize;//[Offset: 0x7bc, Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x7c0, Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x7c4, Size: 12]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x7d0, Size: 92]
	float NetClientTicksPerSecond;//[Offset: 0x82c, Size: 4]
	float DisplayGamma;//[Offset: 0x830, Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x834, Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x838, Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x83c, Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x84c, Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x85c, Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x86c, Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x87c, Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88d, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88d, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88d, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88d, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x890, Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x89c, Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a0, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x8a4, Size: 12]
	float SelectionHighlightIntensity;//[Offset: 0x8bc, Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x8c0, Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x8c4, Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x8c8, Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x8cc, Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xa24, Size: 12]
	FString[] ServerActors;//[Offset: 0xa30, Size: 12]
	FString[] RuntimeServerActors;//[Offset: 0xa3c, Size: 12]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa48, Size: 1]
	int NextWorldContextHandle;//[Offset: 0xa58, Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x60, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x64, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c, Size: 4]
	int WindowPosX;//[Offset: 0x70, Size: 4]
	int WindowPosY;//[Offset: 0x74, Size: 4]
	int FullscreenMode;//[Offset: 0x78, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x80, Size: 4]
	uint32 Version;//[Offset: 0x84, Size: 4]
	int AudioQualityLevel;//[Offset: 0x88, Size: 4]
	float FrameRateLimit;//[Offset: 0x8c, Size: 4]
	int DesiredScreenWidth;//[Offset: 0x94, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	int DesiredScreenHeight;//[Offset: 0x9c, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xa0, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xa4, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xa8, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xac, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xb0, Size: 12]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xbc, Size: 12]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc8, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xd0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd4, Size: 12]
	void ValidateSettings();// 0x37c5da0
	bool SupportsHDRDisplayOutput();// 0x6699204
	void SetVSyncEnabled(bool bEnable);// 0x6699184
	void SetVisualEffectQuality(int Value);// 0x3f4557c
	void SetViewDistanceQuality(int Value);// 0x669910c
	void SetToDefaults();// 0x35b2140
	void SetTextureQuality(int Value);// 0x6699094
	void SetShadowQuality(int Value);// 0x669901c
	void SetScreenResolution(IntPoint Resolution);// 0x6698fac
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x6698f34
	void SetResolutionScaleValue(int NewScaleValue);// 0x6698ebc
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x6698e44
	void SetPostProcessingQuality(int Value);// 0x6698dcc
	void SetOverallScalabilityLevel(int Value);// 0x35bccf4
	void SetFullscreenMode(byte InFullscreenMode);// 0x6698d54
	void SetFrameRateLimit(float NewLimit);// 0x6698cdc
	void SetFoliageQuality(int Value);// 0x6698c64
	void SetBenchmarkFallbackValues();// 0x6698c50
	void SetAudioQualityLevel(int QualityLevel);// 0x6698bd8
	void SetAntiAliasingQuality(int Value);// 0x6698b60
	void SaveSettings();// 0x38caa10
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x6698a58
	void RevertVideoMode();// 0x6698a44
	void ResetToCurrentSettings();// 0x3852774
	void LoadSettings(bool bForceReload);// 0x3657310
	bool IsVSyncEnabled();// 0x6698a1c
	bool IsVSyncDirty();// 0x66989f4
	bool IsScreenResolutionDirty();// 0x66989cc
	bool IsHDREnabled();// 0x66989a4
	bool IsFullscreenModeDirty();// 0x669897c
	bool IsDirty();// 0x3658268
	int GetVisualEffectQuality();// 0x6698954
	int GetViewDistanceQuality();// 0x35b5e94
	int GetTextureQuality();// 0x669892c
	int GetShadowQuality();// 0x6698904
	IntPoint GetScreenResolution();// 0x66988bc
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x6698728
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x6698594
	float GetRecommendedResolutionScale();// 0x3b7a0f8
	byte GetPreferredFullscreenMode();// 0x669856c
	int GetPostProcessingQuality();// 0x3f5512c
	int GetOverallScalabilityLevel();// 0x6698544
	IntPoint GetLastConfirmedScreenResolution();// 0x66984fc
	byte GetLastConfirmedFullscreenMode();// 0x66984d4
	static GameUserSettings* GetGameUserSettings();// 0x66984ac
	byte GetFullscreenMode();// 0x6698484
	float GetFrameRateLimit();// 0x669845c
	int GetFoliageQuality();// 0x6698434
	IntPoint GetDesktopResolution();// 0x66983ec
	static IntPoint GetDefaultWindowPosition();// 0x66983ac
	static byte GetDefaultWindowMode();// 0x39577c0
	float GetDefaultResolutionScale();// 0x669837c
	static IntPoint GetDefaultResolution();// 0x669833c
	int GetCurrentHDRDisplayNits();// 0x6698314
	int GetAudioQualityLevel();// 0x66982f8
	int GetAntiAliasingQuality();// 0x66982d0
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x6698208
	void ConfirmVideoMode();// 0x66981f4
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x669816c
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x66980ec
	void ApplyNonResolutionSettings();// 0x3602490
	void ApplyHardwareBenchmarkResults();// 0x35b2214

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x1c0, Size: 12]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x1d8, Size: 4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 12]
	StatColorMapEntry[] colorMap;//[Offset: 0xc, Size: 12]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 4]
	Color Out;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 8]
	FName NewGameName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 8]
	FName OldClassName;//[Offset: 0x8, Size: 8]
	FName NewClassName;//[Offset: 0x10, Size: 8]
	FName OldSubobjName;//[Offset: 0x18, Size: 8]
	FName NewSubobjName;//[Offset: 0x20, Size: 8]
	FName NewClassClass;//[Offset: 0x28, Size: 8]
	FName NewClassPackage;//[Offset: 0x30, Size: 8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 12]
	FString NewPluginName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 8]
	FName NewStructName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 12]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	FString Comment;//[Offset: 0x18, Size: 12]

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 4]
	float PingLimit;//[Offset: 0x4, Size: 4]
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 4]
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 4]
	float MaxRestoredStateError;//[Offset: 0x10, Size: 4]
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 4]
	float PositionLerp;//[Offset: 0x18, Size: 4]
	float AngleLerp;//[Offset: 0x1c, Size: 4]
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 4]
	float LinearDampingCoefficient;//[Offset: 0x24, Size: 4]
	float AngularVelocityCoefficient;//[Offset: 0x28, Size: 4]
	float AngularDampingCoefficient;//[Offset: 0x2c, Size: 4]
	float ErrorAccumulationSeconds;//[Offset: 0x30, Size: 4]
	float ErrorAccumulationDistanceSq;//[Offset: 0x34, Size: 4]
	float ErrorAccumulationSimilarity;//[Offset: 0x38, Size: 4]
	float LinearDeltaThresholdSq;//[Offset: 0x3c, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x40, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x44, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0x48, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x4c, Size: 4]
	float AngularRecipFixTime;//[Offset: 0x50, Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x54, Size: 4]
	float AngularSpeedThresholdSq;//[Offset: 0x58, Size: 4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 8]
	FName DriverClassName;//[Offset: 0x8, Size: 8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c, Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34, Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40, Size: 4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44, Size: 12]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50, Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0, Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4, Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8, Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac, Size: 4]
	FString CurrentGameStatus;//[Offset: 0xb0, Size: 12]
	FString LastGameStatus;//[Offset: 0xbc, Size: 12]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	FString PendingGameStatus;//[Offset: 0xcc, Size: 12]
	FString LatestGameStatusURL;//[Offset: 0xd8, Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xe4, Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xf0, Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xfc, Size: 12]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x114, Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x120, Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x12c, Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x138, Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x144, Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x150, Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x15c, Size: 4]
	void SwitchGameStatus(FString GameStatus, FString Options);// 0x68e65b8
	void StandAloneSwitchGameStatus(FString InGameStatus, FString Options);// 0x68e63d4
	void OnPreLoadMap(FString MapName);// 0x68e6310
	void OnPostLoadMapWithWorld(World* World);// 0x68e6290
	void OnGameViewportClientCreated();// 0x3592f9c
	World* GetWorld();// 0x68e6260
	FrontendUtils* GetUtils();// 0x68e6238
	PlayerController* GetPlayerController();// 0x68e6210
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x68e60b0
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x68e6030
	GameViewportClient* GetGameViewportClient();// 0x68e6008
	GameMode* GetGameMode();// 0x68e5fe0
	GameInstance* GetGameInstance();// 0x6698904
	Object*[] FindRegistedUIFunctionList(FString strMsg, FString moduleMsg);// 0x68e5e18
	void EnableGuiTest(bool bEnable);// 0x68e5d98
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget, FString module);// 0x68e5c98
	void ClearLogicManagerListByStatus(FName PendingStatus, bool bIsForceDelete);// 0x68e5bcc
	void ClearLogicManagerByName(FString managerName);// 0x68e5a74

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 4]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x20, Size: 12]
	FName CurrentSceneCameraName;//[Offset: 0x30, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x38, Size: 12]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x44, Size: 60]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x80, Size: 12]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x8c, Size: 60]
	PointLight*[] ScenePointLightList;//[Offset: 0xc8, Size: 12]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xd4, Size: 60]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x110, Size: 60]
	FString GlobalUIContainerClassName;//[Offset: 0x1a8, Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x1b4, Size: 12]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x1c0, Size: 60]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x1fc, Size: 12]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x208, Size: 60]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x26c, Size: 60]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce, bool bAutoFixAspect);// 0x68e7f20
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x68e7e00
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x68e7c30
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x68e79d0
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x68e77b0
	void SetAutoFixFovByAspectRatio(CameraActor* CameraActor, bool bInAutoFixFov);// 0x68e76ec
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x68e7630
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x68e7574
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x68e74b8
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x68e73fc
	void PopAllPushedUI();// 0x68e73e8
	void OnAllSceneCamerasRegistered();// 0x35b5e08
	bool IsPushedPanel(out const FName managerName);// 0x68e7354
	bool IsNoRenderClient();// 0x68e732c
	FString GetUIStackTopSrcTag();// 0x68e726c
	FString GetUIStackTopDstTag();// 0x68e71ac
	FString GetUIStackTop();// 0x68e70ec
	CameraActor* GetSceneCamera();// 0x68e70c4
	FrontendHUD* GetOwningFrontendHUD();// 0x36947cc
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x68e7044
	void EnableLobbyMainLight(bool NewEnable);// 0x68e6fc4
	void ClearAllSceneCameras();// 0x68e6fb0

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x310, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	void ToggleEnabled();// 0x670ab7c
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x670ab0c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x670aa94
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x670aa1c
	void SetLightColor(LinearColor NewLightColor);// 0x670a9a0
	void SetEnabled(bool bSetEnabled);// 0x670a920
	void SetCastShadows(bool bNewValue);// 0x670a8a0
	void SetBrightness(float NewBrightness);// 0x670a828
	void SetAffectTranslucentLighting(bool bNewValue);// 0x670a7a8
	void OnRep_bEnabled();// 0x357c654
	bool IsEnabled();// 0x670a780
	LinearColor GetLightColor();// 0x670a73c
	float GetBrightness();// 0x670a714

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2e8, Size: 4]
	float MaxDrawDistance;//[Offset: 0x2ec, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x2f0, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 1]
	int ShadowMapChannel;//[Offset: 0x2f8, Size: 4]
	float MinRoughness;//[Offset: 0x300, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x304, Size: 4]
	int LightPriority;//[Offset: 0x308, Size: 4]
	float ShadowBias;//[Offset: 0x30c, Size: 4]
	float ShadowSharpen;//[Offset: 0x310, Size: 4]
	float ContactShadowLength;//[Offset: 0x314, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x318, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x318, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x318, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x319, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x31c, Size: 4]
	Vector LightFunctionScale;//[Offset: 0x320, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x32c, Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	float IESBrightnessScale;//[Offset: 0x334, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x338, Size: 4]
	float DisabledBrightness;//[Offset: 0x33c, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 1]
	float BloomScale;//[Offset: 0x344, Size: 4]
	float BloomThreshold;//[Offset: 0x348, Size: 4]
	Color BloomTint;//[Offset: 0x34c, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x354, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x670bac4
	void SetTemperature(float NewTemperature);// 0x670ba4c
	void SetShadowBias(float NewValue);// 0x670b9d4
	void SetLightPriority(int Priority);// 0x670b95c
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x670b8ec
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x670b874
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x670b7fc
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x670b784
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x670b6bc
	void SetIntensity(float NewIntensity);// 0x670b644
	void SetIndirectLightingIntensity(float NewIntensity);// 0x670b5cc
	void SetIESTexture(TextureLightProfile* NewValue);// 0x670b554
	void SetEnableLightShaftBloom(bool bNewValue);// 0x670b4d4
	void SetBloomTint(Color NewValue);// 0x670b464
	void SetBloomThreshold(float NewValue);// 0x670b3ec
	void SetBloomScale(float NewValue);// 0x670b374
	void SetAffectTranslucentLighting(bool bNewValue);// 0x670b2f4
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x670b274
	void ForceUpdateShadowState();// 0x670b260

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2c0, Size: 16]
	float Brightness;//[Offset: 0x2d0, Size: 4]
	float Intensity;//[Offset: 0x2d4, Size: 4]
	Color LightColor;//[Offset: 0x2d8, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dc, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dc, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2dc, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dc, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x2e0, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x2e4, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x670e08c
	void SetCastShadows(bool bNewValue);// 0x670e00c
	LinearColor GetLightColor();// 0x670dfc8

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xe4, Size: 4]
	float TextureMultiplier;//[Offset: 0xe8, Size: 4]

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x318, Size: 4]
	void SetRadius(float NewRadius);// 0x677d95c
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x677d8e4

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x3bc, Size: 4]
	float AttenuationRadius;//[Offset: 0x3c0, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c4, Size: 1]
	float LightFalloffExponent;//[Offset: 0x3c8, Size: 4]
	float SourceRadius;//[Offset: 0x3cc, Size: 4]
	float SoftSourceRadius;//[Offset: 0x3d0, Size: 4]
	float SourceLength;//[Offset: 0x3d4, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d8, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x3dc, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x3e0, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e4, Size: 1]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e4, Size: 1]
	float ShadowControl;//[Offset: 0x3e8, Size: 4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x3ec, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x677e070
	void SetSourceLength(float NewValue);// 0x677dff8
	void SetSoftSourceRadius(float bNewValue);// 0x677df80
	void SetSimulateRectLight(bool NewValue);// 0x677df00
	void SetSimulatePortalLight(bool NewValue);// 0x677de80
	void SetRectLightSourceWidth(float NewValue);// 0x677de08
	void SetRectLightSourceHeight(float NewValue);// 0x677dd90
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x677dd18
	void SetAttenuationRadius(float NewRadius);// 0x677dca0

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x310, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	void OnRep_bEnabled();// 0x357c654

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x2e8, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x2ec, Size: 4]
	TextureCube* ProcessedCubemap;//[Offset: 0x2f0, Size: 4]
	float SourceCubemapAngle;//[Offset: 0x2f4, Size: 4]
	int CubemapResolution;//[Offset: 0x2f8, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x2fc, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x304, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x314, Size: 4]
	float Contrast;//[Offset: 0x318, Size: 4]
	float OcclusionExponent;//[Offset: 0x31c, Size: 4]
	float MinOcclusion;//[Offset: 0x320, Size: 4]
	Color OcclusionTint;//[Offset: 0x324, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x328, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3c8, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x67ae4d0
	void SetOcclusionTint(out const Color InTint);// 0x67ae44c
	void SetOcclusionExponent(float InOcclusionExponent);// 0x67ae3d4
	void SetOcclusionContrast(float InOcclusionContrast);// 0x67ae35c
	void SetMinOcclusion(float InMinOcclusion);// 0x67ae2e4
	void SetLightColor(LinearColor NewLightColor);// 0x67ae268
	void SetIntensity(float NewIntensity);// 0x67ae1f0
	void SetIndirectLightingIntensity(float NewIntensity);// 0x67ae178
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x67ae078
	void SetCubemap(TextureCube* NewCubemap);// 0x67ae000
	void RecaptureSky();// 0x67adfec

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x354, Size: 12]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x373a784
	void RemoveWidget(UserWidget* Widget);// 0x68f1b94
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x35a9ad4
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x68f1ad8
	void AddWidgetInternal(UserWidget* Widget);// 0x3a894b4
	void AddWidget(UserWidget* Widget);// 0x68f1a60

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x204, Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x208, Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x20c, Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x210, Size: 4]
	Property*[] Params;//[Offset: 0x28c, Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x2a0, Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x2b0, Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x2d0, Size: 32]
	float TickRate;//[Offset: 0x2f0, Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f7, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2f8, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x300, Size: 8]
	enum FadingStatus;//[Offset: 0x310, Size: 1]
	float CurrentOpacity;//[Offset: 0x314, Size: 4]
	float FadingInTime;//[Offset: 0x318, Size: 4]
	float FadingOutTime;//[Offset: 0x31c, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 1]
	FString UIMsgPrefix;//[Offset: 0x324, Size: 12]
	FString[] UIMsgFunctionList;//[Offset: 0x330, Size: 12]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	FString MoudleToRegisted;//[Offset: 0x340, Size: 12]
	bool Visible();// 0x68efc60
	void UnRegistFromGameFrontendHUD();// 0x68efc4c
	void SynchronizeBlueprintProperties();// 0x4a51734
	void Show();// 0x68efc38
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x68efbc0
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x68efb48
	static void SetOnWidgetShow(delegate onShow);// 0x68efaac
	static void SetOnWidgetHide(delegate OnHide);// 0x68efa10
	static void SetOnClearUIStack(delegate onClear);// 0x68ef974
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x68ef82c
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x68ef7b4
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x68ef6f0
	void ReceiveShow();// 0x4a51734
	void ReceiveHide();// 0x4a51734
	void ReceivedMountWidget();// 0x35a9cfc
	void ReceivedInitWidget();// 0x4a51734
	void ReCachedUIMsgFunction();// 0x68ef6dc
	static void PushOpenedUIStack(FString Name);// 0x68ef628
	static void PopOpenedUIStack(FString curOpen);// 0x68ef574
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x4a51734
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x4a51734
	void OnRightClicked(Vector2D TempScreenPos);// 0x4a51734
	void OnFadeOutFinished();// 0x3670884
	void OnFadeInFinished();// 0x355a034
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x4a51734
	void OnClicked(Vector2D TempScreenPos);// 0x4a51734
	void OnClearUIStack__DelegateSignature();// 0x4a51734
	bool IntCompare(int A, int B, enum CompareType);// 0x68ef46c
	void InitWidget(bool Recursive);// 0x68ef3ec
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x3861ea0
	void Hide();// 0x68ef3d8
	void HandleUIMessageBattle(FString UIMessage);// 0x68ef31c
	void HandleUIMessage(FString UIMessage);// 0x68ef260
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x68ef0cc
	Widget* GetWidgetContainsName(FString Name);// 0x68ef008
	UAEUserWidget* GetParentWidget();// 0x3f4a5c4
	PlayerController* GetOwningPlayer();// 0x357e648
	LogicManagerBase* GetOwningLogicManager();// 0x68eefe0
	FrontendHUD* GetOwningFrontendHUD();// 0x68eefb8
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x68eef38
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x68eedec
	UserWidget* GetChildWidget(FString WName);// 0x68eed28
	Margin GetAdapation();// 0x68eed00
	bool FloatCompare(float A, float B, enum CompareType);// 0x68eebf8
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget);// 0x68eeb80
	void DestroyWidget();// 0x68eeb6c
	static void ClearOpenedUIStack();// 0x68eeb58
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x68eea9c
	void ClearFunctionCache();// 0x68eea88
	void ClearClassWidgetTree();// 0x68eea74
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x3754120

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	int iUIControlState;//[Offset: 0x38, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x3c, Size: 4]
	FName[] GameStatusList;//[Offset: 0x4c, Size: 12]
	class Object[] WidgetUClassList;//[Offset: 0x7c, Size: 12]
	UAEUserWidget*[] WidgetList;//[Offset: 0x88, Size: 12]
	Object*[] DelayMessage_Obj;//[Offset: 0xa4, Size: 12]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x68e9a08
	bool IsEnableRemoveDynamicWidgets();// 0x68e99e0
	UAEUserWidget*[] GetWidgetList();// 0x68e9920
	UAEUserWidget* GetWidgetByName(FString InName);// 0x68e985c
	UAEUserWidget* GetWidgetByClass(class Object InClass);// 0x68e97dc
	FrontendHUD* GetOwningFrontendHUD();// 0x66982d0
	int GetDefaultSceneCamera();// 0x6698434
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x68e95fc

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 12]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAntialiased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 1]
	float RTScale;//[Offset: 0x694, Size: 4]
	enum Space;//[Offset: 0x698, Size: 1]
	enum TimingPolicy;//[Offset: 0x699, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x69c, Size: 4]
	IntPoint DrawSize;//[Offset: 0x6a0, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 1]
	float RedrawTime;//[Offset: 0x6ac, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x6b8, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	Vector2D Pivot;//[Offset: 0x6c8, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x6d4, Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x6d8, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x6e8, Size: 16]
	float OpacityFromTexture;//[Offset: 0x6f8, Size: 4]
	enum BlendMode;//[Offset: 0x6fc, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fe, Size: 1]
	UserWidget* Widget;//[Offset: 0x700, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x714, Size: 4]
	MaterialInterface* TranslucentMaterialAA;//[Offset: 0x718, Size: 4]
	MaterialInterface* TranslucentMaterialAA_OneSided;//[Offset: 0x71c, Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x720, Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x724, Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x728, Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x72c, Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x730, Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x734, Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x738, Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x73c, Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x741, Size: 1]
	FName SharedLayerName;//[Offset: 0x748, Size: 8]
	int LayerZOrder;//[Offset: 0x750, Size: 4]
	enum GeometryMode;//[Offset: 0x754, Size: 1]
	float CylinderArcAngle;//[Offset: 0x758, Size: 4]
	void SetWidget(UserWidget* Widget);// 0x382a1f4
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x59e79ac
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x59e7934
	void SetDrawSize(Vector2D Size);// 0x59e78c4
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x59e7848
	void RequestRedraw();// 0x36eaa60
	UserWidget* GetUserWidgetObject();// 0x59e7820
	TextureRenderTarget2D* GetRenderTarget();// 0x59e77f8
	LocalPlayer* GetOwnerPlayer();// 0x59e77d0
	MaterialInstanceDynamic* GetMaterialInstance();// 0x59e77a8
	Vector2D GetDrawSize();// 0x59e7768
	Vector2D GetCurrentDrawSize();// 0x59e7728

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xb0, Size: 4]
	int SizeY;//[Offset: 0xb4, Size: 4]
	LinearColor ClearColor;//[Offset: 0xb8, Size: 16]
	byte AddressX;//[Offset: 0xc8, Size: 1]
	byte AddressY;//[Offset: 0xc9, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xca, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xcb, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 1]
	byte OverrideFormat;//[Offset: 0xcd, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0xd0, Size: 152]
	delegate BrushDelegate;//[Offset: 0x168, Size: 16]
	delegate OnSetBrushAsyncComplete;//[Offset: 0x178, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x188, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x198, Size: 16]
	FString imageSrcPath;//[Offset: 0x1a8, Size: 12]
	Vector2D ScalePivot;//[Offset: 0x1b4, Size: 8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c0, Size: 16]
	SoftObjectPath AsyncLoadResourcePath;//[Offset: 0x1d0, Size: 24]
	float HitTestAreaRadius;//[Offset: 0x1f8, Size: 4]
	bool bIsEnhancedImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 1]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd, Size: 1]
	bool bFixOverScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe, Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff, Size: 1]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	bool bAsyncLoadImageAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 1]
	void SetOpacity(float InOpacity);// 0x59bb01c
	void SetDontPaintWhenColorZero(bool Enable);// 0x59baf9c
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x59baf1c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x59baea0
	void SetBrushResourceFromPathSync(FString ResourcePath);// 0x59bade4
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x59bad20
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x59bac5c
	void SetBrushFromPathAsync(FString ResourcePath, bool bMatchSize);// 0x59bab54
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x59baadc
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x59ba9e4
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x59ba96c
	void SetBrush(out const SlateBrush InBrush);// 0x59ba804
	void SeFixOverScale(bool Enable);// 0x59ba784
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x59ba75c
	bool GetDontPaintWhenColorZero();// 0x59ba734
	bool GetDontPaintWhenAlphaZero();// 0x59ba70c

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20, Size: 152]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x360, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
	int NumSpectators;//[Offset: 0x36c, Size: 4]
	int NumPlayers;//[Offset: 0x370, Size: 4]
	int NumBots;//[Offset: 0x374, Size: 4]
	float MinRespawnDelay;//[Offset: 0x378, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x37c, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x380, Size: 4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x384, Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x390, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	void StartMatch();// 0x39906cc
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x36135e0
	void Say(FString Msg);// 0x66833dc
	void RestartGame();// 0x66833c0
	bool ReadyToStartMatch();// 0x3a0fd88
	bool ReadyToEndMatch();// 0x6683390
	void K2_OnSetMatchState(FName NewState);// 0x4a51734
	bool IsMatchInProgress();// 0x6683360
	bool HasMatchEnded();// 0x6683330
	FName GetMatchState();// 0x668330c
	void EndMatch();// 0x3a11eac
	void AbortMatch();// 0x66832f0

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x3f49284

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c, Size: 12]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x28, Size: 12]
	FString ManualTableDirectory;//[Offset: 0x34, Size: 12]
	bool AllowItemTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	UAEDataTable*[] TableObjList;//[Offset: 0x104, Size: 12]
	World* CurWorld;//[Offset: 0x110, Size: 4]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x114, Size: 60]
	<FName,UAEDataTable*> TableObjMap_Mod;//[Offset: 0x150, Size: 60]
	delegate OnTableCreateInFighting;//[Offset: 0x18c, Size: 12]
	FString PathCompressionConfigsPath;//[Offset: 0x264, Size: 12]
	bool bIsPathCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bIsPathCompressionCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	int PathCompressionCacheMaxSize;//[Offset: 0x274, Size: 4]
	bool bTranslationFallBackUnloadDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	bool bShrinkTranslationMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	FString BaseTableRelativeDir;//[Offset: 0x280, Size: 12]
	FString ModTableRelativeDir;//[Offset: 0x28c, Size: 12]
	FString[] BaseModTableConfig;//[Offset: 0x298, Size: 12]
	<FName,ModTable*> ModTableMap;//[Offset: 0x2a4, Size: 60]
	<FName,UAEDataTable*> ModTableObjMap;//[Offset: 0x2e0, Size: 60]
	UAEDataTable*[] InGameTableObjList;//[Offset: 0x31c, Size: 12]
	<FName,bool> CheckNeedModMap;//[Offset: 0x328, Size: 60]
	FString CurrentModName;//[Offset: 0x364, Size: 12]
	FString EmptyModName;//[Offset: 0x370, Size: 12]
	<FString,BaseTableResMap*> LoadedTableMap;//[Offset: 0x37c, Size: 60]
	<FString,bool> CheckMapTable;//[Offset: 0x3b8, Size: 60]
	<FString,DataTableProxy*> TableCache;//[Offset: 0x3f4, Size: 60]
	void ReleaseTable(FName TableFName);// 0x3c9c634
	UAEDataTable* GetTablePtr_Mod(FName tableName);// 0x3c9c5b4
	UAEDataTable* GetTablePtr(FName tableName, bool bCheckModTable);// 0x3c9c4e0
	BaseTableResMap* GetTableMap(FString tableName);// 0x3c9c41c
	static bool GetTableData(FString tableName, FString Key, out TableRowBase OutRow);// 0x3c9bb20
	static UAETableManager* GetInstance();// 0x3c9baf8
	static FString GetDomainByID(const int ID);// 0x3c9b9f8
	static UAEDataTable* GetDataTableStatic_Mod(FString tableName);// 0x3c9b93c
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x3c9b880
	DataTableProxy* GetDataTableProxy(FString tableName, bool bTempory);// 0x3c9b770

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0x80, Size: 60]
	bool SetTableData_String(FString KeyValue, FString TagName, FString Value);// 0x68ec900
	bool SetTableData_Int32(FString KeyValue, FString TagName, int Value);// 0x68ec774
	bool SetTableData_Float(FString KeyValue, FString TagName, float Value);// 0x68ec5e8
	FString GetTableName();// 0x68ec528
	FString GetRealTableName(FString tableName);// 0x68ec3e4
	bool ConditionAddEmptyRow(out const FName RowName);// 0x68ec350

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: ModTable.Object

--------------------------------
Class: BaseTableResMap.Object
	ScriptStruct* DataStruct;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: DataTableProxy.Object
	DataTable* ModDataTable;//[Offset: 0x1c, Size: 4]
	DataTable* DataTable;//[Offset: 0x20, Size: 4]
	DataTableRowDesc* Desc;//[Offset: 0x9c, Size: 4]

--------------------------------
Class: DataTableRowDesc.Object

--------------------------------
Class: TableRowBase

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnHandleWebviewActionDelegate;//[Offset: 0x164, Size: 12]
	delegate OnGetTicketNotifyDelegate;//[Offset: 0x170, Size: 12]
	delegate OnHandleServerListDownload;//[Offset: 0x17c, Size: 12]
	delegate OnUIStatReport;//[Offset: 0x188, Size: 12]
	delegate OnCloudGMReceive;//[Offset: 0x194, Size: 12]
	delegate OnReportClientTool;//[Offset: 0x1a0, Size: 12]
	FString CSVTableRelativeDir;//[Offset: 0x1ac, Size: 12]
	<FString,FString> GameStatusMap;//[Offset: 0x1b8, Size: 60]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	bool bEnableReportMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f6, Size: 1]
	VoiceSDKInterface* VoiceSDK;//[Offset: 0x20c, Size: 4]
	BugReporter* GameBugReporter;//[Offset: 0x210, Size: 4]
	GMLogShare* LogShare;//[Offset: 0x214, Size: 4]
	int MaxUpdateRetryTimes;//[Offset: 0x218, Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x224, Size: 4]
	Translator* Translator;//[Offset: 0x228, Size: 4]
	HttpWrapper* HttpWrapper;//[Offset: 0x22c, Size: 4]
	GCPufferDownloader* GPuffer;//[Offset: 0x230, Size: 4]
	LaggingReporter* LaggingReporter;//[Offset: 0x234, Size: 4]
	AsyncTaskDownloader* DownloadTask;//[Offset: 0x23c, Size: 4]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x286, Size: 1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x287, Size: 1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bEnableEditorPufferDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	CDNUpdate* CDNUpdater;//[Offset: 0x2a0, Size: 4]
	int ODPaksPoolSize;//[Offset: 0x2a4, Size: 4]
	int ODPaksPoolSizeLowend;//[Offset: 0x2a8, Size: 4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x2ac, Size: 4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	interface class None* ClientNetInterface;//[Offset: 0x2cc, Size: 8]
	FName UnrealNetworkStatus;//[Offset: 0x2d8, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x2f0, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x300, Size: 4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	FString[] PersistentLuaManager;//[Offset: 0x308, Size: 12]
	bool bPatchReInitSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x31c, Size: 4]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x320, Size: 4]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x324, Size: 4]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x328, Size: 4]
	FString ScriptBPRelativeDir;//[Offset: 0x330, Size: 12]
	FString ScriptRelativeDir;//[Offset: 0x33c, Size: 12]
	FString InGameLuaDir;//[Offset: 0x348, Size: 12]
	FString PreloadLuaFileRelativePath;//[Offset: 0x354, Size: 12]
	FString[] LuaDirList;//[Offset: 0x360, Size: 12]
	FString[] NoGCPackage;//[Offset: 0x36c, Size: 12]
	float LuaTickTime;//[Offset: 0x378, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	int PingFirstReportIntervalSecond;//[Offset: 0x3a0, Size: 4]
	int PingReportIntervalSecond;//[Offset: 0x3a4, Size: 4]
	int LossSyncIntervalSecond;//[Offset: 0x3a8, Size: 4]
	int PlayerStatusReportIntervalSecond;//[Offset: 0x3ac, Size: 4]
	int LossArraySyncIntervalSecond;//[Offset: 0x3b0, Size: 4]
	int vmInstrumentOptimization;//[Offset: 0x3b8, Size: 4]
	TssManager* TssMgr;//[Offset: 0x3bc, Size: 4]
	float PingReportInterval;//[Offset: 0x3e4, Size: 4]
	int64 DeactivatedThreshold;//[Offset: 0x4c0, Size: 8]
	int64 TimePassThreshold;//[Offset: 0x4c8, Size: 8]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x4d0, Size: 4]
	delegate UIStackChangeDelegate;//[Offset: 0x4d4, Size: 12]
	delegate UIStackRecoverDelegate;//[Offset: 0x4e0, Size: 12]
	delegate OnFRefreshAdaptationUIEvent;//[Offset: 0x4ec, Size: 12]
	delegate OnFRefreshAdaptationExUIEvent;//[Offset: 0x4f8, Size: 12]
	delegate EnterBattleStageDelegate;//[Offset: 0x504, Size: 12]
	delegate OnAfterInitedDolphinDelegate;//[Offset: 0x510, Size: 12]
	delegate OnDolphinVersionInfoDelegate;//[Offset: 0x51c, Size: 12]
	delegate OnDolphinNoticeInstallApkDelegate;//[Offset: 0x528, Size: 12]
	delegate OnDolphinProgressDelegate;//[Offset: 0x534, Size: 12]
	delegate OnDolphinErrorDelegate;//[Offset: 0x540, Size: 12]
	delegate OnRepairOverMaxTimesDelegate;//[Offset: 0x54c, Size: 12]
	delegate OnUpdateFinishedDelegate;//[Offset: 0x558, Size: 12]
	delegate OnRestartGameDelegate;//[Offset: 0x564, Size: 12]
	delegate OnInitIMSDKEnvDelegate;//[Offset: 0x570, Size: 12]
	delegate OnGetEnableCDNGetVersionDelegate;//[Offset: 0x57c, Size: 12]
	delegate OnAfterLoadedEditorLoginDelegate;//[Offset: 0x588, Size: 12]
	delegate OnClearUIBeforeReInitLuaStateDelegate;//[Offset: 0x594, Size: 12]
	delegate OnInitStateDelegate;//[Offset: 0x5a0, Size: 12]
	delegate OnStartPufferUpdateDelegage;//[Offset: 0x5ac, Size: 12]
	delegate OnGetUpdateStateCDNConfigUrlDelegate;//[Offset: 0x5b8, Size: 12]
	delegate OnGetCDNUpdateInfoDelegate;//[Offset: 0x5c4, Size: 12]
	delegate OnQuickLoginDelegate;//[Offset: 0x5d0, Size: 12]
	delegate OnGetRegionNoByCountryNoDelegate;//[Offset: 0x5dc, Size: 12]
	delegate OnPhoneMailLoginCallbackDelegate;//[Offset: 0x5e8, Size: 12]
	delegate OnLoginSDKCallbackDelegate;//[Offset: 0x5f4, Size: 12]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x698, Size: 4]
	int FpsForWindowClient;//[Offset: 0x69c, Size: 4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x6a0, Size: 4]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a5, Size: 1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a6, Size: 1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a7, Size: 1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6aa, Size: 1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ab, Size: 1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 1]
	int GDPRUserType;//[Offset: 0x6b0, Size: 4]
	bool bShouldShowAdaptTipInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	float fLaggingFPSDiffThreshold;//[Offset: 0x6b8, Size: 4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x6bc, Size: 4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x6c0, Size: 4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x6c4, Size: 4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x6c8, Size: 4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x6cc, Size: 4]
	float fFPSReportInterval;//[Offset: 0x6d0, Size: 4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e4, Size: 1]
	Package*[] NoGcPackages;//[Offset: 0x6e8, Size: 12]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f4, Size: 1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f5, Size: 1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f7, Size: 1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	bool bCheckWorldNameForLoadConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77d, Size: 1]
	ColorBlindnessMgr* ColorBlindnessMgrInstace;//[Offset: 0x784, Size: 4]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x788, Size: 12]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x794, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x795, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x798, Size: 4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x79c, Size: 4]
	FString BattleUtilsClassName;//[Offset: 0x7a0, Size: 12]
	BattleUtils* BattleUtils;//[Offset: 0x7ac, Size: 4]
	delegate OnImagePickDetectEvent;//[Offset: 0x7b8, Size: 16]
	delegate OnPermissionResultEvent;//[Offset: 0x7c8, Size: 16]
	FString CurrentMapName;//[Offset: 0x7d8, Size: 12]
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x3f4d38c
	void TimeStatisticStop(int Type, FString Name);// 0x3f4d1ec
	void TimeStatisticStart(int Type);// 0x3f4d174
	void TickUdpCollector(float DeltaTime);// 0x3f4d0fc
	void StatisVisibilityWidget(Widget* Widget);// 0x36dbb90
	void StatisLoadedTexture(Texture* Texture);// 0x36dbb90
	bool StartGrayUpdate();// 0x3f4d0d4
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x3f4d0c0
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x3f4d0ac
	void ShutdownUnrealNetwork();// 0x37c5da0
	void SetShouldShowAdaptTipInLobby(bool bShoudShow);// 0x3f4d02c
	void SetGameSubMode(FString SubMode);// 0x3f4cf70
	void SetGameStatusMap(out <FString,FString> InGameStatusMap);// 0x3f4ce64
	void SetClientEnterBattleStage(FString InStageStr);// 0x3f4cda8
	void SetAccountByWebLogin(int Channel, FString OpenID, FString userId, FString TokenID, const int ExpireTime);// 0x3f4cb54
	void RetryDownload();// 0x3f4cb40
	void RetryCDNDownload();// 0x3f4cb2c
	void RequestPhotoPermission(delegate PermissionResultEvent);// 0x3f4ca88
	void RequestCameraPermission(delegate PermissionResultEvent);// 0x3f4c9e4
	void ReportNetContinuousSaturate();// 0x3f4c9d0
	void RemoveSuppotAdaptationBind(PanelSlot* PanelSlot);// 0x3f4c958
	void ReleaseBattleUtils();// 0x3f4c944
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x3f4c8a0
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x3f4c6d8
	void PickImageDetectQRCode(delegate ImagePickDetectEvent);// 0x3f4c634
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x3f4c52c
	void OnWebviewActionNotify(FString URL);// 0x3f4c3d4
	void OnUAAssistantEvent(out const UAAssistantInfoWrapper UAAssistentInfo);// 0x3f4c2c8
	void OnSDKCallbackEvent(out const SDKCallbackInfoWrapper sdkCallbackInfo);// 0x3f4c1bc
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x3f4c0f0
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x3f4bf00
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x3f4bdf4
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x3f4bce4
	void OnNotUpdateFinished();// 0x3f4bcd0
	void OnLoginFlowNotify(int _Flow, int _Param, FString ExtraData);// 0x3f4bae8
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x3f4ba2c
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x3f4b96c
	void OnGetTicketNotify(FString Ticket);// 0x3f4b814
	void OnGetShortUrlNotify(int Ret, FString ShortUrl);// 0x3f4b674
	void OnGetCountryNoNotify(int Country);// 0x3f4b5fc
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x3f4b4b8
	void OnGameMasterEvent(FString EventName, int Ret);// 0x3f4b31c
	void OnConnectorNetStateChangeNotify(int State, int EventParam1, int EventParam2, int EventParam3);// 0x3f4b1d4
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x3f4b0cc
	void OnAreaChanged(FString InArea);// 0x3f4b010
	void NotifyLoadingUIOperation(int OperationType);// 0x3f4af98
	void MakeToSuppotAdaptation(PanelSlot* PanelSlot);// 0x3f4af20
	void LuaDoString(FString LuaString);// 0x3f4ae5c
	bool IsWindowOB();// 0x370390c
	bool IsInstallPlatform(FString PlatForm);// 0x3f4acfc
	bool IsCEHideLobbyUI();// 0x3f4acd4
	bool HasAnyNetMsgToHandle();// 0x3f4acac
	bool GetWidgetRenderCanChange();// 0x3f4ac84
	VoiceSDKInterface* GetVoiceSDKInterface();// 0x3607eb0
	SaveGame* GetUserSettings();// 0x3608180
	GDolphinUpdater* GetUpdater();// 0x3f4ac68
	Translator* GetTranslator();// 0x3f4ac4c
	bool GetShouldShowAdaptTipInLobby();// 0x3f4ac24
	SettingSubsystem* GetSettingSubsystem();// 0x3f4abfc
	GCPufferDownloader* GetPufferDownloader();// 0x3f4abe0
	FString GetPlayerStatusReportInfo();// 0x3f4ab20
	FString GetPingReportInfo();// 0x3f4aa60
	int GetPhotoPermission();// 0x3f4aa38
	FString GetPacketLossReportInfo();// 0x3f4a978
	LuaStateWrapper* GetLuaStateWrapper();// 0x3f4a950
	LuaEventBridge* GetLuaEventBridge();// 0x3f4a928
	LuaBlueprintMgr* GetLuaBlueprintSysMgr();// 0x3f4a900
	HttpWrapper* GetHttpWrapper();// 0x3f4a8e4
	FString GetGameSubMode();// 0x3f4a87c
	GameStateBase* GetGameState();// 0x3f4a854
	FString GetFPSReportInfo();// 0x3f4a794
	EffectSettingMgr* GetEffectSettingMgr();// 0x3f4a764
	int GetDetailNetInfoFromDPM();// 0x35d30e4
	ColorBlindnessMgr* GetColorBlindnessMgr();// 0x384abac
	Object* GetClientNetObj();// 0x3f4a73c
	FString GetClientEnterBattleStageCostTime();// 0x3f4a67c
	FString GetClientEnterBattleStage();// 0x3f4a614
	int GetCameraPermission();// 0x3f4a5ec
	BugReporter* GetBugReporter();// 0x3f4a5c4
	BattleUtils* GetBattleUtils();// 0x3f4a59c
	FString GetBattleIDHexStr();// 0x3f4a4dc
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x3f4a4b4
	void FinishModifyUserSettings();// 0x3f4a4a0
	void EnableFPSAndMemoryLog(bool bEnable);// 0x3f4a420
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x3f4a398
	void DispatchConfirmMisKill(FString KillerName);// 0x3f4a2ec
	Texture2D* CreateQRCodeTexture(FString Text);// 0x3f4a228
	void CreateBattleUtils();// 0x3f4a214
	void CatchLuaException();// 0x3f4a200
	void CallGlobalScriptFunction(FString InFunctionName);// 0x3f4a13c
	void BeginModifyUserSettings();// 0x3f4a128
	void BattleUtilsGameEnd();// 0x3f4a114
	void AfterLoadedEditorLogin();// 0x3f4a100
	void AddAdaptationWidgetDelegateEx(PanelSlot* PanelSlot);// 0x3f4a088
	void AddAdaptationWidgetDelegate(PanelSlot* PanelSlot);// 0x3f4a010

--------------------------------
Class: VoiceSDKInterface.Object
	int lbsRoomMemberID;//[Offset: 0x24, Size: 4]
	delegate OnSTTReportCallback;//[Offset: 0x40, Size: 16]
	delegate OnRSTSCallback;//[Offset: 0x50, Size: 16]
	delegate OnRSTSSpeechToTextCallback;//[Offset: 0x60, Size: 16]
	FString ServerInfo;//[Offset: 0x7c, Size: 12]
	uint32 openVoiceSDKLog;//[Offset: 0x88, Size: 4]
	uint32 MicVolumeMUFactor;//[Offset: 0x8c, Size: 4]
	uint32 SpeekerVolumeMUFactor;//[Offset: 0x90, Size: 4]
	int RoomOperationTimeout;//[Offset: 0x94, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x98, Size: 4]
	delegate OpenMicFail;//[Offset: 0x110, Size: 16]
	delegate OpenMicSuccess;//[Offset: 0x120, Size: 16]
	delegate CloseMicFail;//[Offset: 0x130, Size: 16]
	delegate CloseMicSuccess;//[Offset: 0x140, Size: 16]
	delegate OpenSpeakerFail;//[Offset: 0x150, Size: 16]
	delegate OpenSpeakerSuccess;//[Offset: 0x160, Size: 16]
	delegate CloseSpeakerFail;//[Offset: 0x170, Size: 16]
	delegate CloseSpeakerSuccess;//[Offset: 0x180, Size: 16]
	delegate JoinRoomFail;//[Offset: 0x190, Size: 16]
	delegate JoinRoomNotify;//[Offset: 0x1a0, Size: 16]
	delegate QuitRoomNotify;//[Offset: 0x1b0, Size: 16]
	delegate JoinLbsRoomNotify;//[Offset: 0x1c0, Size: 16]
	delegate QuitLbsRoomNotify;//[Offset: 0x1d0, Size: 16]
	delegate RoomStatusUpdatedNotify;//[Offset: 0x1e0, Size: 16]
	delegate SetAppInfoSuccess;//[Offset: 0x1f0, Size: 16]
	delegate SetAppInfoFail;//[Offset: 0x200, Size: 16]
	delegate GetReconnectInfo;//[Offset: 0x210, Size: 16]
	delegate ImSpeakingNotify;//[Offset: 0x220, Size: 16]
	delegate TestMicFail;//[Offset: 0x230, Size: 16]
	delegate TestMicSuccess;//[Offset: 0x240, Size: 16]
	delegate QuitRoomFail;//[Offset: 0x250, Size: 16]
	delegate DownLoadFileNotify;//[Offset: 0x260, Size: 16]
	delegate UploadFileNotify;//[Offset: 0x270, Size: 16]
	delegate ApplyMessageKeyNotify;//[Offset: 0x280, Size: 16]
	delegate MemberIsSpeakingNotify;//[Offset: 0x290, Size: 16]
	delegate LbsMemberIsSpeakingNotify;//[Offset: 0x2a0, Size: 16]
	delegate OnMuteSwitchResult;//[Offset: 0x2b0, Size: 16]
	delegate ReportVoiceTimeToServer;//[Offset: 0x2c0, Size: 16]
	delegate RecordSuccess;//[Offset: 0x2d0, Size: 16]
	delegate RecordFail;//[Offset: 0x2e0, Size: 16]
	delegate UploadSuccess;//[Offset: 0x2f0, Size: 16]
	delegate UploadFail;//[Offset: 0x300, Size: 16]
	delegate DownloadFileSuccess;//[Offset: 0x310, Size: 16]
	delegate DownloadFileFail;//[Offset: 0x320, Size: 16]
	delegate EnableRoomMicrophone;//[Offset: 0x330, Size: 16]
	delegate ExitInfectionGameMode;//[Offset: 0x340, Size: 16]
	delegate JoinInfectionGameMode;//[Offset: 0x350, Size: 16]
	delegate RequestPrivacyInSetting;//[Offset: 0x360, Size: 16]
	delegate OnReportPlayerCallback;//[Offset: 0x370, Size: 16]
	delegate OnVoiceSDKEvent;//[Offset: 0x380, Size: 16]
	delegate BeforeVoiceSDKInitDelegate;//[Offset: 0x390, Size: 16]
	delegate AfterVoiceSDKInitDelegate;//[Offset: 0x3a0, Size: 16]
	delegate AudioRouteChangedAfterSpeakerDelegate;//[Offset: 0x3b0, Size: 16]
	delegate AudioSessionInterruptedDelegate;//[Offset: 0x3c0, Size: 16]
	void UploadRecordFile(bool InPermanent);// 0x3fb9a00
	int UploadRecordedFile(FString InFilePath, int InTimeout, bool InPermanent);// 0x3fb98ac
	int UpdateVoiceCoordinate(FString InRoomName, int64 X, int64 Y, int64 Z, int64 Radius);// 0x3fb96b0
	void TestMic();// 0x3fb969c
	bool TeamSpeakerEnable();// 0x3fb9680
	bool TeamMicphoneEnable();// 0x3fb9664
	void SwitchMode(enum CharMode);// 0x3fb95ec
	void SwitchMicphoneWhenCorpsMode();// 0x3fb95d8
	void SwitchCampRoom(enum campMode);// 0x3fb9560
	int StopRecording();// 0x3fb9538
	void StopRecord();// 0x3fb9524
	void StopPlayRecordFile();// 0x3fb9510
	void StopInterphone();// 0x3fb94fc
	void StopCampMode();// 0x3fb94e8
	int StartRecording(FString InFilePath, bool InNotVoip);// 0x3fb93d8
	void StartRecord();// 0x3fb93c4
	void StartInterphone();// 0x3fb93b0
	void StartCampMode(FString ZombieCampRoomName, FString ManCampRoomName, FString userId);// 0x3fb91ec
	void ShowOpenSpeakerAtFirstMsg();// 0x37c5da0
	void ShowCorpsModeCannotUseLBSVoice();// 0x38cbfac
	void SetVoiceServer(FString ServerInfo);// 0x3fb9130
	void SetVoiceSDKSupportBackgroundChat(bool isSupportBGChat);// 0x3fb90b0
	void SetVoiceSDKChatServiceEnable(bool IsEnable);// 0x3fb9030
	void SetVoiceMode(int Type);// 0x3fb8fb8
	void SetSpeakerVolum(float Value);// 0x3fb8f40
	void SetSpeakerStatus(bool Flag);// 0x3fb8ec0
	int SetServerInfo(FString URL, FString InDefaultIpSvr);// 0x3fb8d78
	void SetRoomOperationTimeout(int InTimeout);// 0x3fb8d00
	void SetReportBufferTime(int nTimeSec);// 0x3fb8c88
	void SetPlayerVolume(FString InPlayerId, int InVol);// 0x3fb8aec
	int SetNotify();// 0x3fb8ac4
	int SetMode(int InGVMode);// 0x3fb8a44
	void SetMicphoneVolum(float Value);// 0x3fb89cc
	void SetMicphoneStatus(bool Flag);// 0x3fb894c
	void SetLbsVoiceRadius(float Radius);// 0x3fb88d8
	void SetLbsRoomEnableStatus(bool Flag);// 0x3fb8858
	void SetGMServerUrl(FString InServerUrl);// 0x3fb875c
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x3fb86e4
	void SetFeature(int8 InFeature, bool Inactive);// 0x3fb8620
	void SetCurrentDownloadFieldID(FString filedId);// 0x3fb8488
	int SetAppInfo(FString InAppId, FString InAppKey, FString InOpenId);// 0x3fb82bc
	void SetAllVoiceStatus(bool Flag);// 0x3670bc4
	void RSTSStopRecording();// 0x3fb82a8
	int RSTSSpeechToText(int InSrcLang);// 0x3fb8228
	void ResetWhenLogOut();// 0x3fb8214
	bool ReportPlayers(FString InExtraInfo, FString[] InOpenids);// 0x3fb7ee8
	int ReportFileForAbroad(FString InFilePath, bool InTranslate, bool InChangeVoice, int InTime);// 0x3fb7d3c
	void ReactiveLbsStatus();// 0x3fb7d28
	int QuitVoiceRoom(FString InRoomName);// 0x3fb7c64
	void QuitRoom();// 0x3fb7c50
	void QuitCommonRoom(FString InRoomName);// 0x3fb7b94
	int Poll();// 0x3fb7b6c
	void PlayRecordFile();// 0x3fb7b58
	int PlayRecordedFile(FString InDownloadInFilePath);// 0x3fb7a94
	int OpenVoiceSpeaker();// 0x3fb7a6c
	int OpenVoiceMic();// 0x3fb7a44
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x3fb79c4
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x3fb793c
	int OpenTeamInterphone();// 0x3fb7914
	int OpenSpeaker();// 0x3fb78ec
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x3fb78d8
	int OpenMic();// 0x3fb78b0
	void OpenIngameSpeaker();// 0x3fb789c
	int OpenIngameMicphone();// 0x3fb7874
	void OpenAllSpeaker(bool ShowTips);// 0x3fb77f4
	int OpenAllMicphone(bool ShowTips);// 0x3fb776c
	int OpenAllInterphone();// 0x3fb7744
	void OnRoomTypeChanged(FString itemtext);// 0x3fb7618
	void OnResume();// 0x3fb7604
	void OnPause();// 0x3fb75f0
	bool LbsSpeakerEnable();// 0x3fb75d4
	bool LbsMicphoneEnable();// 0x3fb75b8
	int JoinTeamRoom(FString InRoomName);// 0x3fb74f4
	void JoinRoom(FString room, FString userId);// 0x3fb7284
	int JoinRangeRoom(FString InRoomName);// 0x3fb71c0
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x3fb6f50
	void JoinCommonRoom(FString InRoomName);// 0x3fb6e94
	bool IsVoiceSDKEnable();// 0x3fb6e6c
	bool IsTeamInterphoneOpenned();// 0x3fb6e50
	bool IsSpeaking();// 0x3fb6e28
	bool IsLbsInterphoneOpenned();// 0x3fb6e0c
	bool IsInterphoneMode();// 0x3fb6dd0
	bool IsEnableCivilFile();// 0x3fb6da8
	int Invoke(uint32 InCmd, uint32 InParam1, uint32 InParam2, FString InExterInfo);// 0x3fb6c14
	void InitVoiceSDKComponent(FString userId);// 0x3fb6abc
	int InitVoiceSDK();// 0x3fb6a94
	void Init();// 0x3fb6a80
	bool HaveTeamRoom();// 0x3fb6a58
	bool HaveLbsRoom();// 0x3fb6a30
	float GetVoiceLength();// 0x3fb6a08
	FString GetTeamRoomName();// 0x3fb6948
	int GetRoomStatus(FString InRoomName);// 0x3fb6884
	int GetPlayerVolume(FString InPlayerId);// 0x3fb6724
	int GetMicState();// 0x3fb66fc
	FString GetLocalRecordFilePath(FString InFileName);// 0x3fb65b8
	FString GetLbsRoomName();// 0x3fb64f8
	FString GetGMServerUrl();// 0x3fb63e0
	void GetAuthKey();// 0x3fb63cc
	int GetAudioDeviceConnectionState();// 0x3fb63a4
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x3fb62e0
	int ForbidMemberVoice(int InMember, bool InEnable, FString InRoomName);// 0x3fb6188
	void ForbidLbsMemberVoiceById(int memberID, bool IsEnable);// 0x3fb60c4
	int EnableVoiceRoomMicrophone(FString InRoomName, bool InEnable);// 0x3fb5fb4
	void EnableVoiceChat(bool InEnable);// 0x3fb5f34
	int EnableRoomSpeaker(FString InRoomName, bool InEnable);// 0x3fb5e24
	int EnableReportForAbroad(bool InIsWholeRoundaudit);// 0x3fb5d9c
	bool EnableReportALLAbroad(bool InEnable, bool InWithEncryption, int InTimeout);// 0x3fb5c7c
	int EnableMultiRoom(bool InEnable);// 0x3fb5bf4
	void EnableLog(bool InEnable);// 0x3fb5b74
	int EnableCivilFile(bool Enable);// 0x3fb5aec
	void EnableBluetoothSCO(bool InEnable);// 0x3fb5a6c
	void DownloadRecordFile(bool InPermanent);// 0x3fb59ec
	int DownloadRecordedFile(FString InFileID, FString InDownloadInFilePath, int InTimeout, bool InPermanent);// 0x3fb5810
	void CommonTestMic();// 0x3fb57fc
	int CloseVoiceSpeaker();// 0x3fb57d4
	int CloseVoiceMic();// 0x3fb57ac
	void CloseSpeaker();// 0x3fb5798
	void CloseMic();// 0x3fb5784
	void CloseIngameSpeaker();// 0x365824c
	void CloseIngameMicphone();// 0x3602490
	void CloseAllSpeaker(bool ShowTips);// 0x3fb5704
	void CloseAllMicphone(bool ShowTips);// 0x3fb5684
	int CheckDeviceMuteState();// 0x3fb565c
	void CheckAndEnableWWisePlugin();// 0x3fb5648
	void CheckAndEnableRoomSpeaker();// 0x3fb5634
	void ChatShowAgeRestrictionMsgInLobby();// 0x38caa10
	void ChatShowAgeRestrictionMsgInFighting();// 0x3852774
	void ChatShowAgeRestrictionMsgInChat();// 0x35b5e08
	void ChatRequestPrivacyInSetting();// 0x3fb5620
	void ChatRequestPrivacyInGame();// 0x3fb560c
	int ApplyMessageKey();// 0x3fb55e4
	void AlwaysDisableRoomMic(FString InRoomName, bool WithClear);// 0x3fb54dc

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x3f368f4
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x3f36510
	void ReadZipLog(FString Filename);// 0x3f363b8
	byte[] CompressLog(bool pullAllLog);// 0x3f362a8

--------------------------------
Class: GMLogShare.Object
	static void ShareLogFile();// 0x3985980
	static void Init();// 0x3f5acb4

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x50, Size: 60]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x130, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x134, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x138, Size: 4]
	bool EnableRandomBackupURL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool EnablePufferUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	FString UpdateInfoPath;//[Offset: 0x150, Size: 12]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	void StartAppUpdate();// 0x3f55554
	void SetEnableCDNGetVersion(bool Enable);// 0x3f554d4
	void OnUpdateError(int curVersionStage, int ErrorCode);// 0x3f55418
	void OnDolphinBGDownloadDone();// 0x3f55404
	void OnAreaChanged(FString InArea);// 0x3f55348
	bool IsUpdating();// 0x3f55320
	bool IsInstallInApp();// 0x3f552f8
	bool IsGrayUpdate();// 0x3f552d0
	bool IsExamine();// 0x370390c
	void Install();// 0x3f552bc
	int GetTotalValue();// 0x3f55294
	int GetCurValue();// 0x3b14a70
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x3f55154
	float GetCurPercent();// 0x3f5512c
	uint32 GetChannelIDWithHUD(GameFrontendHUD* InGameFrontendHUD);// 0x3f550ac
	uint32 GetChannelID();// 0x3f55084
	void FinishUpdate();// 0x3f55070
	void FinishPufferUpdate();// 0x3f5505c
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x363b278
	bool EnableCDNGetVersion();// 0x3f55034
	void ContinueUpdate();// 0x3f55020
	void CancelUpdate();// 0x3f5500c
	void CancelAppUpdate();// 0x3f54ff8

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x1c, Size: 12]
	FString StoredAccessToken;//[Offset: 0x28, Size: 12]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x38, Size: 16]
	delegate OnDetectDelegate;//[Offset: 0x48, Size: 16]
	delegate OnTranslateDelegate;//[Offset: 0x58, Size: 16]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 4]
	void TranslateV2(int Channel, int ID, FString Text);// 0x3fa8098
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3fa7d58
	void PostMsg(FString URL, FString Content);// 0x3fa7c18
	void OnTranslateV2(bool Success, FString Data);// 0x3fa7b0c
	void OnTranslate__DelegateSignature(bool IsSuccess, FString LanguageFrom, FString Translation);// 0x4a51734
	void OnTranslate(bool Success, FString Data);// 0x3fa7a00
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x3fa78f4
	void OnGetAccessToken__DelegateSignature(bool IsSuccess, FString Token);// 0x4a51734
	void OnGetAccessToken(bool Success, FString Data);// 0x3fa77e8
	void OnDetectV2(bool Success, FString Data);// 0x3fa76dc
	void OnDetect__DelegateSignature(bool IsSuccess, FString from, FString to);// 0x4a51734
	void OnDetect(bool Success, FString Data);// 0x3fa75d0
	bool HasTranslating();// 0x3fa75a8
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3fa7214
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3fa6ed4

--------------------------------
Class: HttpWrapper.Object
	delegate OnResponseEvent;//[Offset: 0x1c, Size: 12]
	delegate OnImageDownloadResponseEvent;//[Offset: 0x28, Size: 12]
	void SimplePostForLua(FString URL, FString Content, int Priority, int QueueType);// 0x3f5c88c
	void SetQueueSize(int QueueType, int InSize);// 0x3f5c7d0
	void SetQueueEnable(bool InEnableQueue);// 0x3f5c754
	void SetPoolEnable(bool InEnablePool);// 0x3f5c6cc
	int RequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority, int QueueType);// 0x3f5c398
	int ImageDownloadRequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority);// 0x3f5c0a8
	bool GetQueueEnable();// 0x3f5c08c
	bool GetPoolEnable();// 0x3f5c064
	int GetInternalIndex();// 0x3f5c048
	void CancelRequestAll(int QueueType);// 0x3f5bfd0
	void CancelRequest(int QueueType, int ReqIndex);// 0x3f5bf14

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	FString DownloadDir;//[Offset: 0x2a4, Size: 12]
	FString PufferTmpDir;//[Offset: 0x2b0, Size: 12]
	uint32 CleanFlagVer;//[Offset: 0x2bc, Size: 4]
	FString[] CleanFileNamePattern;//[Offset: 0x2c0, Size: 12]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 1]
	FString[] PreFetchPakNames;//[Offset: 0x2d0, Size: 12]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x2dc, Size: 4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x2e4, Size: 4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x2e8, Size: 4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x2ec, Size: 4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x2f0, Size: 4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x2f4, Size: 12]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x304, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x308, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x30c, Size: 4]
	bool DisableBGDownloadNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	float PreFetchODPaks_StartTime;//[Offset: 0x314, Size: 4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x318, Size: 12]
	bool StopTask(uint64 TaskId);// 0x3f59a4c
	int StopMergeBinDiffPak(int outterTaskID);// 0x3f599cc
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x3f5994c
	void StopBGDownloadNotification();// 0x3f59938
	bool StopAllTask();// 0x3f59910
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate downloadDelegate);// 0x3f597e4
	void StartBGDownloadNotification(uint64 InDownloadedSize);// 0x3f59768
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x3f5955c
	void SetTempProductIdBase(int ProductIdRaw);// 0x3f594e4
	void SetTempProductId(FString ProductIdRaw);// 0x3f5938c
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, FString FileList, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x3f59068
	void SetIOSBGDownloadAttribute(bool bEnableCellularAccess, bool bEnableResumeData, int nMinFileSize, int nMaxTasks);// 0x3f58f08
	bool SetImmDLMaxSpeed(uint64 MaxSpeed);// 0x3f58e84
	void SetBattleDownloadSwitch(bool Enable);// 0x3f58e04
	static int ReturnSplitMiniPakFilelist_LuaState();// 0x3f56c2c
	static int ReturnLocalFiles_LuaState();// 0x3f56c2c
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x3f58c54
	bool RemountPakFiles();// 0x3f58c2c
	FString ReadFile(FString Filename);// 0x3f58a4c
	bool PreFetchPakFiles();// 0x3f58a24
	int PreFetchODPakFilesUpdate();// 0x3f589fc
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x3f58974
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x3f588f4
	bool PreFetchODPakFiles(bool Start);// 0x3f5886c
	void OnItemDownloadedInFighting(FString PackHash, FString ErrorCode);// 0x3f585fc
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x3f5845c
	int MoveFileTo(FString Filename, FString from, FString to);// 0x3f580cc
	int MoveFile(FString from, FString to);// 0x3f57e54
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x3f57a2c
	bool IsODPaks(FString FilePath);// 0x3f578cc
	bool IsODFileExists(FString Path);// 0x3f57808
	bool IsInitSuccess();// 0x3f577e0
	bool IsFileReady(FString FilePath);// 0x3f57680
	bool IsFileExist(FString Filename, FString extension);// 0x3f57408
	bool InitializeODPaks();// 0x3f573e0
	FString GetTempWorkPath();// 0x3f57320
	void GetProductIDBase(out int[] ProductIDs);// 0x3f57254
	void GetProductID(out int[] ProductIDs);// 0x3f57188
	int GetODPakNum();// 0x3f57160
	FString GetODPakName(FString Path);// 0x3f5701c
	uint32 GetInitErrcode();// 0x3f56ff4
	uint64 GetFileSizeCompressed(FString FilePath);// 0x3f56e94
	float GetFileSize(FString Filename);// 0x3f56d30
	FString GetDownloadPath();// 0x3f56c70
	float GetCurrentSpeed();// 0x3f56c48
	int GetBatchODPaksDownloadList_LuaState();// 0x3f56c2c
	void EnableUseOldInterface(bool Enable);// 0x3f56bac
	bool DeleteFileEvenIfUnfinished(FString FilePath);// 0x3f56a4c
	static bool DeleteFile(FString fullPath);// 0x3f568f4
	bool ConvertPreFetchFiles();// 0x3f568cc
	FString ConvertItemIdToPakName(uint32 ItemId);// 0x3f567c4
	bool ClearUselessODPaks();// 0x3f5679c
	bool ClearPreFetchODPaksFiles();// 0x3f56774
	bool ClearPreFetchFiles();// 0x3f5674c
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x3f56560

--------------------------------
Class: LaggingReporter.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x3c, Size: 12]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x3f32438

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x365824c

--------------------------------
Class: CDNUpdate.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x90, Size: 4]
	void StartUpdateApp();// 0x3f42498
	void StartAppUpdate(bool StartGrayUpdate);// 0x3f42418
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x3f4234c
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x3f42280
	bool IsUpdating();// 0x3f42258
	bool IsGrayUpdate();// 0x3f42230
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x3f420f0
	void FinishUpdate();// 0x3f420dc
	void ContinueUpdate();// 0x3f420c8
	void CancelUpdate();// 0x3f420b4

--------------------------------
Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x28, Size: 60]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x64, Size: 60]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xa0, Size: 60]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0xdc, Size: 12]
	Property*[] Params;//[Offset: 0xe8, Size: 12]
	void SyncLuaRegisterEventNum(FString EventType, FString EventID, int Number);// 0x3c7e9d8
	LuaTemBPData*[] GetCurrentParam();// 0x3c7e970
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x3c7e8e8
	bool CheckNeedPostEventWithFilterKey(out const uint32 FilterKey, FString EventType, FString EventID, bool bCheckNeedPostLua);// 0x3c7e6f8
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventID, const bool bActive);// 0x3c7e510

--------------------------------
Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0, Size: 12]

--------------------------------
Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0, Size: 8]
	FString FunctionName;//[Offset: 0x8, Size: 12]
	FString EventType;//[Offset: 0x14, Size: 12]
	FString EventID;//[Offset: 0x20, Size: 12]

--------------------------------
Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	FString LuaManagerName;//[Offset: 0x24, Size: 12]
	FString ShowUI;//[Offset: 0x30, Size: 12]
	FString HideUI;//[Offset: 0x3c, Size: 12]
	FString CheckWindowOpen;//[Offset: 0x48, Size: 12]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x1c, Size: 60]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x3f69448
	void AddSystem(const FString SystemName, const FString BPPath);// 0x3f691d8

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	void Init();// 0x4a51734

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x1c, Size: 12]
	FString TssCDNHostInfo;//[Offset: 0x28, Size: 12]
	FString TssBuildInIpInfo;//[Offset: 0x34, Size: 12]
	int TssLocal;//[Offset: 0x40, Size: 4]
	static int SendSkdData_LuaState();// 0x3f56c2c
	static int SendEigeninfoData_LuaState();// 0x3f56c2c
	static uint32 SaveSendEigeninfoCode_LuaState();// 0x3f56c2c
	static int OnRecvData_LuaState();// 0x3f56c2c
	static uint32 InvokeSDKIoctl(int Command, FString InCmdData);// 0x3fa8718
	static int GetUserTag4Lua_LuaState();// 0x3f56c2c
	static int GetDeviceFeature_LuaState();// 0x3f56c2c
	static int EigenArrayObfuscationVerify_LuaState();// 0x3f56c2c

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 12]
	delegate OnFail;//[Offset: 0x28, Size: 12]
	FString FileURL;//[Offset: 0x34, Size: 12]
	FString CompreesedFileUrl;//[Offset: 0x40, Size: 12]
	FString FileSavePath;//[Offset: 0x4c, Size: 12]
	FString CompreesedFileSavePath;//[Offset: 0x58, Size: 12]
	FString UrlHash;//[Offset: 0x64, Size: 12]
	FString CompreesedUrlHash;//[Offset: 0x70, Size: 12]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	void Start(FString URL);// 0x3f5d344
	static ImageDownloader* MakeDownloaderInGame();// 0x3f5d31c
	static ImageDownloader* MakeDownloader();// 0x3f5d2f4
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x3f5d194
	static FString CheckAndGetEncryptUrl(out FString InUrl);// 0x3f5d048

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x44, Size: 60]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0x90, Size: 12]
	void TickUDPPing(float DeltaTime);// 0x3fb1508
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x3fb120c
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x3fb102c
	void OnPingServerResultDelegate__DelegateSignature(FString address, int IsSuccess, float Time);// 0x4a51734
	bool IsChooingZoneAccess();// 0x3fb1004
	bool isAllZoneHasPingValue();// 0x3fb0fdc
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x3fb0e4c
	float GetZoneServerDelay(FString ServerAddress);// 0x3fb0ce8
	int GetMinDealyAddress();// 0x3fb0cc0
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x3fb0b20

--------------------------------
Class: PingServerInfo

--------------------------------
Class: Package.Object

--------------------------------
Class: ColorBlindnessMgr.Object
	<int,LinearColor> CBColorMap;//[Offset: 0x1c, Size: 60]
	<int,ParticleSysColor> CBParticleColorMap;//[Offset: 0x58, Size: 60]
	<uint32,ImageOriginal> HandleCBColorImageContaner;//[Offset: 0x94, Size: 60]
	<uint32,HandleMesh> HandleCBColorMeshContaner;//[Offset: 0xd0, Size: 60]
	<uint32,HandleParticleSystem> HandleCBColorParticleContaner;//[Offset: 0x10c, Size: 60]
	void Reset();// 0x367b140
	void RemoveParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x367b0c8
	void RemoveMeshComponent(MeshComponent* Mesh);// 0x367b050
	void RemoveImage(Image* Image);// 0x367afd8
	void HandleUserSettingChange();// 0x367afc4
	LinearColor GetColorByType(int Type);// 0x367af38
	void Clear();// 0x367af24
	void AddParticleSystem(ParticleSystemComponent* ParticleSystem, int Type);// 0x367ae68
	void AddMeshComponent(MeshComponent* Mesh, int Type);// 0x367adac
	void AddImage(Image* Image, LinearColor Color, int Type);// 0x367aca0
	void AddColorByType(FString Type, LinearColor Color);// 0x367aafc

--------------------------------
Class: ParticleSysColor
	<FString,LinearColor> colorMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ImageOriginal
	LinearColor OriginalColir;//[Offset: 0x8, Size: 16]
	int Type;//[Offset: 0x18, Size: 4]

--------------------------------
Class: HandleMesh
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HandleParticleSystem
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 8]

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x1c, Size: 60]
	void SetMaxTaskNum(int Num);// 0x36e1874
	void RunNextTask();// 0x3f30f78
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x3f30e0c
	void ClearOneTask(FString ObjectPath);// 0x3f30cb4
	void ClearAllTask();// 0x3f30ca0
	void AddTask(FString ObjectPath, int LoadPriority);// 0x3f30b04

--------------------------------
Class: BattleUtils.Object
	GameFrontendHUD* OwningFrontendHUD;//[Offset: 0x5c, Size: 4]
	UAEGameMode* BattleGameMode;//[Offset: 0x70, Size: 4]
	BattlePlayer*[] BattlePlayerList;//[Offset: 0x74, Size: 12]
	BattleGameInfo CachedBattleGameInfo;//[Offset: 0x80, Size: 48]
	GameModeAIPlayerParams CachedAIPlayerParams;//[Offset: 0xb0, Size: 824]
	FString LuaFilePath;//[Offset: 0x3e8, Size: 12]
	uint32 SyncNewBattlePlayer(uint64 UID, out const PlayerInfoData Info);// 0x3f34f08
	void SyncGameInfo(out const BattleGameInfo Info);// 0x3f34dfc
	void SyncGameExit();// 0x3f34de8
	void SyncBattlePlayerExit(uint64 UID, FName PlayerType, FString Reason);// 0x3f34bec
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x3f34b14
	GameModeAIPlayerParams RetrieveAIPlayerParams(PlayerID PlayerID);// 0x3f34a2c
	void ResponPlayerWeaponDIYData(uint64 PlayerUID, WeaponDIYData InWeaponDIYData);// 0x3f34900
	void RequestSomePlayersBattleData(uint64[] PlayerUIDList, byte DataType);// 0x3f34764
	void RequestPlayerWeaponDIYData(uint64 PlayerUID, int WeaponSkinID, int PlanID);// 0x3f3465c
	void RequestOnePlayersBattleData(uint64 PlayerUID, byte DataType);// 0x3f34594
	void RequestAllPlayersBattleData(byte DataType);// 0x3f3451c
	void OnPostLoadMapWithWorld(World* World);// 0x3f344a4
	BattlePlayer* NewBattlePlayer();// 0x3f3447c
	BattleAIPlayer* NewBattleAIPlayer();// 0x3f34454
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x3f343c4
	UAEGameMode* GetBattleGameMode();// 0x3f3439c
	void GenerateAIPlayerParams(out const PlayerInfoData Info);// 0x3f34284
	BattlePlayer* FindPlayerByUID(uint64 UID, FName PlayerType);// 0x3f341b8
	BattlePlayer* FindPlayerByPlayerName(FString PlayerName, FName PlayerType);// 0x3f34010
	BattlePlayer* FindPlayerByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x3f33f4c

--------------------------------
Class: UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x3e4, Size: 8]
	float GridCheckSize;//[Offset: 0x3ec, Size: 4]
	float DeepCheckSize;//[Offset: 0x3f0, Size: 4]
	float HeightCheckSize;//[Offset: 0x3f4, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x3f8, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 1]
	bool bUseDefaultResultRules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 1]
	int AntiDataCD;//[Offset: 0x410, Size: 4]
	int WeatherId;//[Offset: 0x414, Size: 4]
	FString WeatherName;//[Offset: 0x418, Size: 12]
	int RoomMode;//[Offset: 0x424, Size: 4]
	int SeasonIdx;//[Offset: 0x428, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x42c, Size: 4]
	FString ItemTableName;//[Offset: 0x430, Size: 12]
	FString ItemClassPath;//[Offset: 0x43c, Size: 12]
	FString ReplayPushURL;//[Offset: 0x448, Size: 12]
	int ReplayType;//[Offset: 0x454, Size: 4]
	FString ReplayTitle;//[Offset: 0x458, Size: 12]
	enum EnableObserverEnemyTrace;//[Offset: 0x464, Size: 1]
	FString[] ItemSpawnTableList;//[Offset: 0x468, Size: 12]
	FString[] IgnoreItemClassPathList;//[Offset: 0x474, Size: 12]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x480, Size: 12]
	<uint64,CharacterMoveDragData> CharacterMoveDragDataMap;//[Offset: 0x48c, Size: 60]
	<uint64,ParachuteDragData> ParachuteDragDataMap;//[Offset: 0x4c8, Size: 60]
	<uint64,VehicleMoveDragDataFriendly> VehicleMoveDrag;//[Offset: 0x504, Size: 60]
	<uint64,CharacterShootVerifyData> CharacterShootVerifyDataMap;//[Offset: 0x540, Size: 60]
	<uint64,CharacterShootVerifyStat> CharacterShootVerifyStatMap;//[Offset: 0x57c, Size: 60]
	uint32 ServerStartTime;//[Offset: 0x5b8, Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x5c0, Size: 12]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x5d0, Size: 12]
	FString VehicleTableName;//[Offset: 0x5dc, Size: 12]
	FString VehicleClassPath;//[Offset: 0x5e8, Size: 12]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 1]
	Vector RegionCenter;//[Offset: 0x5f8, Size: 12]
	float RegionRadius;//[Offset: 0x604, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x608, Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x644, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x648, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x64c, Size: 4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x654, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x658, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x65c, Size: 4]
	float RescueSelfRestoreDuration;//[Offset: 0x660, Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x664, Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x668, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66d, Size: 1]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x670, Size: 12]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x67c, Size: 4]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x680, Size: 12]
	Actor*[] DynamicTriggers;//[Offset: 0x68c, Size: 12]
	int IsGameModeFpp;//[Offset: 0x698, Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x6a0, Size: 12]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x6ac, Size: 60]
	VehicleAvatarReplaceCfg[] VehicleAvatarReplaceCfgList;//[Offset: 0x6e8, Size: 12]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f4, Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f5, Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x6f8, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x704, Size: 12]
	int[] DynamicLevelArray;//[Offset: 0x710, Size: 12]
	FString RoomType;//[Offset: 0x71c, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	int ZoneID;//[Offset: 0x72c, Size: 4]
	int nClientType;//[Offset: 0x730, Size: 4]
	int MainModeID;//[Offset: 0x734, Size: 4]
	int RealPlayerNums;//[Offset: 0x738, Size: 4]
	delegate OnGameModeStateChanged;//[Offset: 0x760, Size: 12]
	delegate SendTeammateResultWhenChicken;//[Offset: 0x7e8, Size: 16]
	delegate HaveSentTeamBattleResult;//[Offset: 0x7f8, Size: 16]
	delegate SendTeamBattleResult;//[Offset: 0x808, Size: 12]
	delegate SendGameStopJoin;//[Offset: 0x89c, Size: 12]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 1]
	float OBInfoTimeStep;//[Offset: 0xc08, Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0xc2c, Size: 12]
	UAEPlayerController*[] KickFlagControllerList;//[Offset: 0xc38, Size: 12]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0xc44, Size: 12]
	class UAEAdvertisementActor* AdvertisementActorBP;//[Offset: 0xce4, Size: 4]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0xce8, Size: 12]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0xcf4, Size: 12]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0xd00, Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0xd10, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0xd1c, Size: 12]
	FString GrenadeEffectPath;//[Offset: 0xd28, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd35, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd36, Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd37, Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0xd38, Size: 12]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 1]
	float FestivalAirDropProb;//[Offset: 0xd48, Size: 4]
	float MonsterDropPar;//[Offset: 0xd4c, Size: 4]
	float SceneDropParam;//[Offset: 0xd50, Size: 4]
	uint32 DSOpenSwtich;//[Offset: 0xd54, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xd58, Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xd5c, Size: 4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0xd64, Size: 12]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0xd70, Size: 12]
	FString SeasonStatueClassPath;//[Offset: 0xd7c, Size: 12]
	FString StatueBaseClassPath;//[Offset: 0xd88, Size: 12]
	StatueBaseData StatueBaseInfo;//[Offset: 0xd94, Size: 84]
	int BattleStopJoin;//[Offset: 0xde8, Size: 4]
	int nSignalGunEffectId;//[Offset: 0xdec, Size: 4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0xdf0, Size: 12]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe70, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0xe74, Size: 12]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec1, Size: 1]
	int StandAloneTestPlayerKey;//[Offset: 0xec4, Size: 4]
	FName StandAloneTestPlayerType;//[Offset: 0xec8, Size: 8]
	void WriteStatistics();// 0x416528c
	void SyncPlayerNames();// 0x3923a9c
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x4165150
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x4165010
	void SetVehicleReportEntry(uint32 InUniqueID, VehicleReportEntry InEntry);// 0x4164f14
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x4164e0c
	void SetMaxWeaponReportNum(int Num);// 0x4164d98
	void SetKillerPlayerKey(Controller* VictimPlayer, uint32 KillerPlayerKey);// 0x4164cd4
	void SetGameEndReportData();// 0x3620ad0
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x4164c20
	void RetrieveBattleData(out BattleData OutBattleData);// 0x4164b8c
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3820e24
	void ResetGameParamsFromGameMode();// 0x4164b70
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x361d668
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x4164aac
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x4164a2c
	void RefreshWorldActiveRange();// 0x4164a10
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x416494c
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 UID, int IdxInTeam);// 0x4164678
	int RecoardAlivePlayerNum();// 0x4164648
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x41645c0
	void OnStandAloneGameEnd();// 0x41645a4
	void OnReportNetworkData();// 0x3620410
	void OnPlayerFiring(uint32 InPlayerKey);// 0x4164524
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x3620390
	void OnPlayerBreathChange(uint32 InPlayerKey, float InBreath);// 0x4164460
	void OnObserverLogout(UAEPlayerController* InController);// 0x41643e0
	void OnObserverLogin(UAEPlayerController* InController);// 0x4164360
	void OnMsg(FString Msg);// 0x416429c
	void OnAirDropBoxLanded(int BoxId, out const Vector Pos);// 0x41641cc
	void OnAirDropBoxEmpty(int BoxId);// 0x416414c
	void NotifyPlayerExitWhenNotStarted(uint32 PlayerKey, FName PlayerType, FString Reason);// 0x3b9177c
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage, FName ParamState, FString ParamReason);// 0x3b912f8
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x4164088
	void NotifyGameModeParamsChanged(out const GameModeParams GameModeParams);// 0x4163ff0
	void NotifyGameModeLuckmate(int64 MyUID, int64 LuckmateUID);// 0x4163f18
	void NotifyGameModeInit();// 0x3b948d4
	void NotifyExistPlayerReEnter(uint32 PlayerKey);// 0x4163e98
	void NotifyAIPlayerEnter(uint32 PlayerKey, bool IsMLAI, const bool bTeammateAI);// 0x4163d7c
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x3620168
	float ModifyVehicleDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* VictimVehicle, Actor* DamageCauser);// 0x3b49f24
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x4163bb8
	void Killed(Controller* Killer, Controller* VictimPlayer, Actor* DamageCauser, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x4163a00
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x4163974
	void InitWorldActiveRange();// 0x36331b4
	void InitSeasonStatue();// 0x4163958
	void InitMissionBoard();// 0x416393c
	void InitGenerator();// 0x4163920
	void InitGameParamsFromGameMode();// 0x4163904
	void InitDynamicTriggers();// 0x41638e8
	void InitDynamicBuildingGroups();// 0x38ee740
	void InitBornWithApple();// 0x41638cc
	void Heartbeat();// 0x41638b8
	bool HasVehicleReportEntry(uint32 InUniqueID);// 0x41637d0
	bool HasDynamicBuildingGroup();// 0x41637a8
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x416360c
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x4163548
	float GetWeaponDamageFromRecord(FString PlayerKey, int TargetWeaponType);// 0x4a51734
	VehicleReportEntry GetVehicleReportEntry(uint32 InUniqueID);// 0x4163410
	int GetSurvivingTeamCount();// 0x391ce7c
	int GetSurvivingCharacterCount();// 0x41633e0
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x416328c
	void GetPlayerRealtimeVerifyInfo(uint32 PlayerKey, out RealtimeVerifyInfo RealtimeVerifyInfo);// 0x361fcfc
	UAEPlayerController* GetPlayerControllerWithUID(uint64 UID);// 0x4163208
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x41630b4
	void GetPlayerAndRealAiNum(out HeartBeatData Data);// 0x4163010
	UAEPlayerController*[] GetObserverControllerList();// 0x4162f50
	void GetMonsterNum(out HeartBeatData Data);// 0x4162eac
	int GetMaxWeaponReportNum();// 0x4162e90
	Vector GetClassicPlaneDirection();// 0x4162e40
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x4162d7c
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x4162cb8
	PlayerController* FindPlayerControllerByUId(uint64 UID);// 0x361f5d4
	Controller* FindControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x4162bf4
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x4162b10
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x399af98
	void DestroyAllPickUpObjs();// 0x3592f9c
	void DeleteSeasonStatue();// 0x38eea8c
	void DeleteDynamicLoadItem();// 0x3a2135c
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x4162a90
	void CreateDynamicBuildingGroups(Vector Offset);// 0x4162a20
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x41628cc
	void AddAirDropBox(int BoxId, out const Vector Pos);// 0x41627fc

--------------------------------
Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x3d8, Size: 12]

--------------------------------
Class: DSSwitchInfo
	int KeyNum;//[Offset: 0x0, Size: 4]
	FString SValue;//[Offset: 0x4, Size: 12]

--------------------------------
Class: CharacterMoveDragData
	CharacterMoveDrag[] Drag;//[Offset: 0x0, Size: 12]
	CharacterSimulateMoveDrag[] SimulateDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: CharacterMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	<byte,int> ReasonCount;//[Offset: 0x4, Size: 60]
	DistanceDragData[] ExceedsDistances;//[Offset: 0x40, Size: 12]

--------------------------------
Class: DistanceDragData
	float CX;//[Offset: 0x0, Size: 4]
	float CY;//[Offset: 0x4, Size: 4]
	float CZ;//[Offset: 0x8, Size: 4]
	float SX;//[Offset: 0xc, Size: 4]
	float SY;//[Offset: 0x10, Size: 4]
	float sz;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterSimulateMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int DragCount;//[Offset: 0x8, Size: 4]
	int ShakeCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ParachuteDragData
	uint32 MyDrag;//[Offset: 0x0, Size: 4]
	uint32 OtherDrag;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleMoveDragDataFriendly
	VehicleMoveDragFriendly[] MoveDrag;//[Offset: 0x0, Size: 12]
	VehicleMoveDragFriendly[] SimulatedMoveDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleMoveDragFriendly
	int Minute;//[Offset: 0x0, Size: 4]
	byte VehicleType;//[Offset: 0x4, Size: 1]
	<byte,int> Counters;//[Offset: 0x8, Size: 60]

--------------------------------
Class: CharacterShootVerifyData
	<byte,int> ShootVerifyFailed;//[Offset: 0x0, Size: 60]

--------------------------------
Class: CharacterShootVerifyStat
	<byte,int> ShootVerifyStat;//[Offset: 0x0, Size: 60]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x2bd, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 1]
	int WorldCompositionID;//[Offset: 0x2c0, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x2c4, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x2c8, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 1]
	void SetGroupValid(bool Valid);// 0x4137ae8
	bool IsValidGroup();// 0x4137ab8
	int FindWorldCompositionID();// 0x4137a90
	void DoPickUp();// 0x4137a7c

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 12]
	FString TriggerClassPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 12]
	int ActID;//[Offset: 0xc, Size: 4]
	FString Path;//[Offset: 0x10, Size: 12]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	int[] PosIdxList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: DynamicBuildingGroupTransform
	float locX;//[Offset: 0x0, Size: 4]
	float locY;//[Offset: 0x4, Size: 4]
	float LocZ;//[Offset: 0x8, Size: 4]
	float RotX;//[Offset: 0xc, Size: 4]
	float RotY;//[Offset: 0x10, Size: 4]
	float RotZ;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VehicleAvatarReplaceCfg
	int OriginID;//[Offset: 0x0, Size: 4]
	int[] SkinIDList;//[Offset: 0x4, Size: 12]
	float[] ProbabilityDistribute;//[Offset: 0x10, Size: 12]
	int MaxNum;//[Offset: 0x1c, Size: 4]
	int CurrentNum;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AirDropBoxInOb
	int BoxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector Pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x650, Size: 8]
	FString PlayerName;//[Offset: 0x658, Size: 12]
	uint32 PlayerKey;//[Offset: 0x664, Size: 4]
	uint64 UID;//[Offset: 0x668, Size: 8]
	FString PlayerOpenID;//[Offset: 0x670, Size: 12]
	int TeamID;//[Offset: 0x67c, Size: 4]
	int64 IdxInTeam;//[Offset: 0x680, Size: 8]
	int CampID;//[Offset: 0x688, Size: 4]
	Vector CharacterLocation;//[Offset: 0x68c, Size: 12]
	int RoomMode;//[Offset: 0x698, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x69c, Size: 20]
	int planeAvatarId;//[Offset: 0x6b0, Size: 4]
	int DyeDebugFlag;//[Offset: 0x6b4, Size: 4]
	int PlayerStartID;//[Offset: 0x6b8, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x6c0, Size: 48]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x6f4, Size: 12]
	int InPacketLossRate;//[Offset: 0x700, Size: 4]
	int OutPacketLossRate;//[Offset: 0x704, Size: 4]
	int ClientNetworkType;//[Offset: 0x708, Size: 4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	int GameReplayType;//[Offset: 0x728, Size: 4]
	bool bDisableProcessPlayerInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool bNoAttenuationGlobalVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x730, Size: 48]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x760, Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x76c, Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x778, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	FString Nation;//[Offset: 0x780, Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x794, Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x798, Size: 4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x79c, Size: 12]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x7a8, Size: 12]
	int RolewearIndex;//[Offset: 0x7b4, Size: 4]
	int[] equip_plating_list;//[Offset: 0x7b8, Size: 12]
	GameModePlayerItem[] InitialSharedSkin;//[Offset: 0x7c4, Size: 12]
	GameModePlayerKnapsackSingleInfo InitialSharedKnapsack;//[Offset: 0x7d0, Size: 80]
	bool bSharedSkinOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	bool bUsingSharedSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x821, Size: 1]
	bool bSubscribeBagOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x822, Size: 1]
	int FashionBagStartIndex;//[Offset: 0x824, Size: 4]
	int VehicleSkinInReady;//[Offset: 0x828, Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82c, Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x830, Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x83c, Size: 28]
	GameModePlayerPetInfo[] AdditionalPetInfo;//[Offset: 0x858, Size: 12]
	int UsingAdditionalPetIndex;//[Offset: 0x864, Size: 4]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x868, Size: 12]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0x874, Size: 12]
	delegate OnInitialWeaponScheme;//[Offset: 0x880, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x88c, Size: 4]
	int PveLevel;//[Offset: 0x890, Size: 4]
	int[] InitialCharSkillList;//[Offset: 0x894, Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x8a0, Size: 12]
	GameModePlayerItems[] InitialVehicleAvatarSkinList;//[Offset: 0x8ac, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x8b8, Size: 4]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0x8bc, Size: 12]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x8c8, Size: 12]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0x8d4, Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x8e0, Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x8f0, Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0x8fc, Size: 60]
	<int,int> GrenadeAvatarItemList;//[Offset: 0x974, Size: 60]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x9b0, Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0x9bc, Size: 60]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x9f8, Size: 60]
	<int,VehicleAvatarSkinList> VehicleAvatarSkinList;//[Offset: 0xa34, Size: 60]
	int[] VehicleMusicList;//[Offset: 0xa70, Size: 12]
	int[] DefaultVehicleMusic;//[Offset: 0xa7c, Size: 12]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0xa88, Size: 12]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0xa94, Size: 12]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0xaa0, Size: 60]
	<int,int> InitialWeaponPendantList;//[Offset: 0xadc, Size: 60]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xb18, Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xb24, Size: 12]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xb30, Size: 12]
	uint32 TaskSyncToDsTs;//[Offset: 0xb3c, Size: 4]
	delegate OnPlayerGotoSpectatingDelegate;//[Offset: 0xb40, Size: 12]
	delegate OnReceiveUIMessage;//[Offset: 0xb54, Size: 12]
	int64 LastGameResultTime;//[Offset: 0xb60, Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb69, Size: 1]
	FString IpCountryStr;//[Offset: 0xb6c, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78, Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb79, Size: 1]
	uint32 ObserverFlags;//[Offset: 0xb7c, Size: 4]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 1]
	LobbyWatchInfo LobbyWatchInfo;//[Offset: 0xb84, Size: 8]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0xb8c, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0xb90, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 1]
	float UpdateOBCircleCounter;//[Offset: 0xb98, Size: 4]
	float UpdateOBCircleInterval;//[Offset: 0xb9c, Size: 4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 1]
	bool bWaitRetryGotoSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba1, Size: 1]
	FString[] FriendObservers;//[Offset: 0xba4, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb1, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb8, Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xc00, Size: 8]
	bool bExited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0b, Size: 1]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0d, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xc1c, Size: 12]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xc28, Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xc34, Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xc40, Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xc4c, Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xc58, Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xc64, Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xc70, Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0xc7c, Size: 12]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0xc88, Size: 12]
	delegate OnInitGameUI;//[Offset: 0xc94, Size: 12]
	bool bCanWatchEnemyInRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8, Size: 1]
	Object*[] SecurityObjs;//[Offset: 0xd10, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0xd1c, Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd28, Size: 1]
	float NotifyTimeOut;//[Offset: 0xd2c, Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0xd30, Size: 4]
	FString NeedLoadLevelName;//[Offset: 0xd34, Size: 12]
	FString NeedLoadedLevelFullName;//[Offset: 0xd40, Size: 12]
	bool IsTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4c, Size: 1]
	int AntiDataCD;//[Offset: 0xd58, Size: 4]
	int ModeID;//[Offset: 0xd5c, Size: 4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	float ClientToDSFlowLimitTime;//[Offset: 0xd84, Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0xd88, Size: 4]
	FString UsingNetObjectPathNameMappingCSV;//[Offset: 0xd9c, Size: 12]
	NetworkReportActor* NetworkReportActor;//[Offset: 0xdc0, Size: 4]
	bool UseingWeaponScheme();// 0x4173d9c
	void TestShowLongTimeNoOperation();// 0x4173d60
	void TestShowConfirmDialogOfMisKill();// 0x4173d4c
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x4173bc8
	void SyncDailyTaskStoreInfo(DailyTaskStoreInfo[] NewDailyTaskStoreList);// 0x4173a6c
	void SetUsedSimulationCVar(bool Value);// 0x41739ec
	static void SetTargetMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x417390c
	void SetPanels(out const UAEUserWidget*[] panels);// 0x4173838
	void SetIsInPetSpectator(bool inIsInPetSpectator);// 0x41737b8
	static void SetDSMsgReceiveDelegate(delegate InDelegate);// 0x417371c
	static void SetClientMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x417363c
	void ServerSetVoiceId(int VoiceID);// 0x4173588
	void ServerKickSelf();// 0x417352c
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x4173478
	void ServerExitGame();// 0x417341c
	void ServerAcknowledgeReconnection(uint32 Token);// 0x4173368
	void SendNetObjectPathNameMappingHashToServer(uint32 VersionHash);// 0x41732b4
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x41731a4
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x4173094
	void RPC_Server_SyncClientNetInfo(int InLoss, int OutLoss, int InNetworkType);// 0x4172f50
	void RPC_Server_ReportClientNetInfo(int AvgPing, int MaxPing, int MinPing, int LostPackRate, int AvgNoOutlier, int StdNoOutlier, int NumNoOutlier, int InLoss, int OutLoss);// 0x4172c38
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x4172afc
	void RPC_LuaClientToDS(int ID, const byte[] Content);// 0x41729c0
	void Respawn();// 0x41729a4
	void ResetUsedSimulationCVar();// 0x4172990
	void ReleaseInGameUI();// 0x4172974
	void ReceivePostLoginInit();// 0x4a51734
	void PrintStatistics();// 0x3592f9c
	void PlayerStartIDReceived();// 0x4172960
	void OnRep_WeaponAvatarDataList();// 0x39e6e70
	void OnRep_UsingNetObjectPathNameMappingCSV();// 0x417294c
	void OnRep_UsedSimulation();// 0x39e6e54
	void OnRep_PveLevel();// 0x4172930
	void OnRep_PlayerOBInfoList();// 0x417291c
	void OnRep_LobbyWatchInfo();// 0x4172900
	void OnRep_LastGameResultTime();// 0x41728e4
	void OnRep_IsSpectatingEnemy();// 0x41728c8
	void OnRep_IsSpectating();// 0x41728ac
	void OnRep_IsObserver();// 0x4172890
	void OnRep_InitialWeaponSchemeInfo();// 0x417287c
	void OnRep_InitialEquipmentAvatar();// 0x39e6d58
	void OnRep_InitialConsumableAvatar();// 0x39e6d3c
	void OnRep_FriendObservers();// 0x396801c
	void OnRep_CurWeaponSchemeIndex();// 0x3592f9c
	void OnRep_bRoomOwner();// 0x4172860
	void OnNetObjectPathNameMappingTableAsyncLoad();// 0x417284c
	void NotifyEnterBattle();// 0x39e5454
	void KickSelf();// 0x3592f9c
	bool IsTeammateSpectator();// 0x4172824
	bool IsSpectatorOrDemoPlayer();// 0x41727fc
	bool IsSpectator();// 0x41727d4
	bool IsRoomMode();// 0x41727b0
	bool IsPureSpectator();// 0x4172788
	bool IsObserver();// 0x4172760
	bool IsInSpectatingEnemy();// 0x4172738
	bool IsInSpectating();// 0x4172710
	bool IsInPetSpectator();// 0x41726e8
	bool IsHawkEyeSpectator();// 0x41726c0
	bool IsFriendOrEnemySpectator();// 0x4172698
	bool IsFriendObserver();// 0x4172670
	bool IsFriendNotHawkEyeObserver();// 0x4172648
	bool IsExited();// 0x4172620
	bool IsDemoRecSpectator();// 0x41725f8
	bool IsDemoPlaySpectator();// 0x3a4ec5c
	bool IsDemoPlayGlobalObserver();// 0x41725d0
	bool IsDeathSpectator();// 0x41725a8
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x41724fc
	void InitWeaponAvatarItems();// 0x41724e0
	void InitVehicleMusicList();// 0x41724c4
	void InitVehicleAvatarSkinList();// 0x39e4314
	void InitVehicleAvatarList();// 0x39e42f8
	void InitVehicleAdvanceAvatarList();// 0x41724a8
	void InitIngameUI();// 0x417248c
	void InitGrenadeAvatarList(bool ReInitial);// 0x4172404
	bool HasAnySpectatorReplayFlag(uint32 InFlag);// 0x39e3dd8
	int GotoSpectating(int PlayerID);// 0x39e3384
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x4172330
	int GetWeaponAvatarItemId(int ID);// 0x39e30fc
	void GetVisibleLevelsLoadedName(out FString[] VisibleLevels);// 0x41721fc
	FString GetLobbyWatchedPlayerKeyAsString();// 0x417213c
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskId);// 0x41720ac
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x4172084
	GameModePlayerPetInfo GetCurrentPetInfo();// 0x4171fbc
	uint32 GetCurrentOBPlayerKey();// 0x4171f8c
	int GetCurrentOBPlayerInfoIndex();// 0x4171f64
	int GenerateKillBroadcastItemID(int ClothAvatarID, int PlayerUID);// 0x4a51734
	void ForceNetReady();// 0x4171f50
	void ExitGame();// 0x4171f3c
	void ExhaustCPU();// 0x4171f28
	void ExecDSCommand(const FString DSCommand);// 0x39e0624
	void ExcuteIntRecord(FString Key, int Count);// 0x4171d8c
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x4171bf0
	void EnableInGameUI();// 0x4171bdc
	void DumpUAENetActors();// 0x4171bc8
	void DumpRegions();// 0x4171bb4
	void DumpNetActors();// 0x3592f9c
	void DumpCharacters();// 0x4171ba0
	void DumpAllUI();// 0x3592f9c
	void DumpAllObjects();// 0x3592f9c
	void DumpAllActors();// 0x3592f9c
	void DoCrash();// 0x3592f9c
	void DisableInGameUI();// 0x4171b8c
	void DelayEnterBattleCheck();// 0x39a05b0
	void DealWithPickUpFailed(ItemDefineID DefineID);// 0x4171afc
	void ClientShowTeammateEscapeNotice();// 0x4171ae0
	void ClientRPC_CastUIMsgWithStrings(FString strMsg, FString module, const int TipsID, FString Param1, FString Param2);// 0x4171844
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x41716b8
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x4171570
	void ClientInitPlayerOBInfoButton();// 0x4171554
	void ClientBroadcastRespawnComplete();// 0x3917ca8
	void ClientBroadcastReconnectionSuccessful();// 0x4171538
	void ClientAcknowledgeReconnection(uint32 Token);// 0x3903ae4
	void CheckPlayerOBInfoButtonInit();// 0x39dc830
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x41714b0
	void CastUIMsg(FString strMsg, FString module);// 0x4171368
	enum CanPickUpItem(ItemDefineID DefineID);// 0x41712d0
	void BroadcastUIMessage(FString MessageName, const int TipsIDOrType, FString Param1, FString Param2);// 0x41710c4
	void BroadcastRespawnComplete();// 0x41710b0

--------------------------------
Class: LuaPlayerController.PlayerController.Controller.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x5f8, Size: 60]
	FString LuaFilePath;//[Offset: 0x634, Size: 12]

--------------------------------
Class: LuaNetSerialization

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 12]
	int WeatherId;//[Offset: 0xc, Size: 4]
	float WeatherTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 12]
	FString LocalAddr;//[Offset: 0xc, Size: 12]
	float AvgPing;//[Offset: 0x18, Size: 4]
	float MaxPing;//[Offset: 0x1c, Size: 4]
	float HighPingPercent;//[Offset: 0x20, Size: 4]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0, Size: 4]
	int upassLevel;//[Offset: 0x4, Size: 4]
	int upassScore;//[Offset: 0x8, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	FString iconUrl;//[Offset: 0x10, Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int upassKeepBuy;//[Offset: 0x20, Size: 4]
	int upassCurValue;//[Offset: 0x24, Size: 4]
	int pass_type;//[Offset: 0x28, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UID;//[Offset: 0x8, Size: 8]
	int ZoneID;//[Offset: 0x10, Size: 4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	int WinCount;//[Offset: 0x24, Size: 4]
	int TopTenCount;//[Offset: 0x28, Size: 4]
	int KillNum;//[Offset: 0x2c, Size: 4]
	float KDNum;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 12]
	bool bDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 12]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0, Size: 4]
	int BagSkin;//[Offset: 0x4, Size: 4]
	int HelmetSkin;//[Offset: 0x8, Size: 4]
	int FlySkin;//[Offset: 0xc, Size: 4]
	int GrenadeSkin;//[Offset: 0x10, Size: 4]
	GameModePlayerConsumableAvatar ConsumableAvatarList;//[Offset: 0x14, Size: 16]
	GameModePlayerItem[] WeaponList;//[Offset: 0x24, Size: 12]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x30, Size: 12]
	GameModePlayerItem[] BackPackPendantList;//[Offset: 0x3c, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x48, Size: 4]
	int WingmanSkin;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatarShoulei;//[Offset: 0x0, Size: 4]
	int GrenadeAvatarSmoke;//[Offset: 0x4, Size: 4]
	int GrenadeAvatarStun;//[Offset: 0x8, Size: 4]
	int GrenadeAvatarBurn;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]
	int PetCfgId;//[Offset: 0x8, Size: 4]
	int PetColor;//[Offset: 0xc, Size: 4]
	int[] PetAvatarList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 80]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int WearIndex;//[Offset: 0x54, Size: 4]

--------------------------------
Class: GameModePlayeWeaponSchemeInfo
	int SchemeIndex;//[Offset: 0x0, Size: 4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	GameModePlayeWeaponSchemeSlotInfo[] SlotList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayeWeaponSchemeSlotInfo
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemId;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int[] AttachList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: GameModePlayerItems
	GameModePlayerItem[] Items;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0, Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x4, Size: 12]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int ParticleID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0, Size: 4]
	int HelmetAvatar;//[Offset: 0x4, Size: 4]
	int ArmorAvatar;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0, Size: 4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleAvatarSkinList
	int[] SkinList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: GameModeWeaponDIYPlanData
	int WeaponAvatarID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DailyTaskStoreInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	int State;//[Offset: 0x4, Size: 4]
	int Progress;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LobbyWatchInfo
	uint32 WatchedPlayerKey;//[Offset: 0x0, Size: 4]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: NetworkReportActor.Actor.Object
	int LossRateArrayNum;//[Offset: 0x310, Size: 4]
	int MaxCacheLossRateArrayNum;//[Offset: 0x314, Size: 4]
	FString InPacketLossRateArrayStr;//[Offset: 0x318, Size: 12]
	FString OutPacketLossRateArrayStr;//[Offset: 0x324, Size: 12]
	void RPC_Server_SyncClientPkgLossArrayInfo(const byte[] InLoss, const byte[] OutLoss);// 0x414646c
	void ResetAllNetworkData();// 0x4146458

--------------------------------
Class: GameModePlayerParams
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x4, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	int ZoneID;//[Offset: 0x24, Size: 4]
	int8 PlatID;//[Offset: 0x28, Size: 1]
	FName PlayerType;//[Offset: 0x30, Size: 8]
	FString PlayerName;//[Offset: 0x38, Size: 12]
	uint32 PlayerKey;//[Offset: 0x44, Size: 4]
	int TeamID;//[Offset: 0x48, Size: 4]
	int64 IdxInTeam;//[Offset: 0x50, Size: 8]
	uint64 PreTeamID;//[Offset: 0x58, Size: 8]
	int PlayerBornPointID;//[Offset: 0x60, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]
	byte gender;//[Offset: 0x66, Size: 1]
	FString PIC_URL;//[Offset: 0x68, Size: 12]
	int Level;//[Offset: 0x74, Size: 4]
	int Segment_Level;//[Offset: 0x78, Size: 4]
	int AceImprintShowId;//[Offset: 0x7c, Size: 4]
	int AceImprintBaseId;//[Offset: 0x80, Size: 4]
	int AvatarBoxId;//[Offset: 0x84, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	uint64 MLAIDisplayUID;//[Offset: 0x90, Size: 8]
	GameModePlayerItem[] ItemList;//[Offset: 0x98, Size: 12]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0xa4, Size: 12]
	int[] equip_plating_list;//[Offset: 0xb0, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0xbc, Size: 12]
	int RolewearIndex;//[Offset: 0xc8, Size: 4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xcc, Size: 12]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xd8, Size: 12]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0xe4, Size: 12]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xf0, Size: 12]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0xfc, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x108, Size: 12]
	GameModeWeaponDIYPlanData[] WeaponDIYPlanData;//[Offset: 0x114, Size: 12]
	int VehicleSkinInReady;//[Offset: 0x120, Size: 4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x124, Size: 52]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x158, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x188, Size: 28]
	GameModePlayerPetInfo[] AdditionalPetInfo;//[Offset: 0x1a4, Size: 12]
	int UsingAdditionalPetIndex;//[Offset: 0x1b0, Size: 4]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x1b4, Size: 12]
	GameModePlayeWeaponSchemeInfo[] WeaponSchemeInfoList;//[Offset: 0x1c0, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x1cc, Size: 4]
	int PveLevel;//[Offset: 0x1d0, Size: 4]
	int[] CharSkillList;//[Offset: 0x1d4, Size: 12]
	GameModePlayerBanChat banChat;//[Offset: 0x1e0, Size: 16]
	GameModePlayerBanChat banTarget;//[Offset: 0x1f0, Size: 16]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x200, Size: 12]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x20c, Size: 12]
	int[] audioChat;//[Offset: 0x218, Size: 12]
	FName CurrentPlayerState;//[Offset: 0x228, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x230, Size: 8]
	float SyncedTimestamp;//[Offset: 0x238, Size: 4]
	float DestinyValue;//[Offset: 0x23c, Size: 4]
	float WarmScore;//[Offset: 0x240, Size: 4]
	float AIAllocMarkValue;//[Offset: 0x244, Size: 4]
	int LeaderCount;//[Offset: 0x248, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x250, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x258, Size: 12]
	uint64 LastGameBattleID;//[Offset: 0x268, Size: 8]
	float RatingScore;//[Offset: 0x270, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	float MaxRankingScore;//[Offset: 0x278, Size: 4]
	uint32 ObserverFlags;//[Offset: 0x27c, Size: 4]
	uint64 WatchPlayerKey;//[Offset: 0x280, Size: 8]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0x28c, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0x290, Size: 4]
	byte PlatformGender;//[Offset: 0x294, Size: 1]
	int planeAvatarId;//[Offset: 0x298, Size: 4]
	int DyeDebugFlag;//[Offset: 0x29c, Size: 4]
	FString Nation;//[Offset: 0x2a0, Size: 12]
	int MatchLabel;//[Offset: 0x2ac, Size: 4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x2b8, Size: 8]
	int64 CorpsID;//[Offset: 0x2c0, Size: 8]
	int64 CampID;//[Offset: 0x2c8, Size: 8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]
	FString IpCountryStr;//[Offset: 0x2d4, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int VeteranRecruitIndex;//[Offset: 0x2e4, Size: 4]
	int MatchStrategyLabel;//[Offset: 0x2e8, Size: 4]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x2ec, Size: 12]
	int LandId;//[Offset: 0x2f8, Size: 4]
	int FollowType;//[Offset: 0x2fc, Size: 4]
	uint64 FollowUID;//[Offset: 0x300, Size: 8]
	uint32 TaskSyncToDsTs;//[Offset: 0x308, Size: 4]
	uint64 LuckmateUID;//[Offset: 0x310, Size: 8]
	FString GameAPPIDFromDS;//[Offset: 0x318, Size: 12]
	float RealHiddenScore;//[Offset: 0x324, Size: 4]

--------------------------------
Class: GameModePlayerAliasInfo
	int AliasID;//[Offset: 0x0, Size: 4]
	FString AliasTitle;//[Offset: 0x4, Size: 12]
	FString AliasNation;//[Offset: 0x10, Size: 12]
	int AliasRank;//[Offset: 0x1c, Size: 4]
	FString AliasPartnerName;//[Offset: 0x20, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x2c, Size: 4]
	int AliasRankID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AchievementPrize
	int MedalAvatarID;//[Offset: 0x0, Size: 4]
	int NotifyTitleAvatarID;//[Offset: 0x4, Size: 4]
	int ScoreBoardAvatarID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x358, Size: 12]
	bool bMultiAdvertisement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	<byte,Texture2D*> IdTextureMap;//[Offset: 0x368, Size: 60]
	StaticMesh* StaticMesh;//[Offset: 0x3a4, Size: 4]
	FString StaticMeshPath;//[Offset: 0x3a8, Size: 12]
	FrontendHUD* FrontendHUD;//[Offset: 0x3b4, Size: 4]
	int ID;//[Offset: 0x3b8, Size: 4]
	float NetCullDistance;//[Offset: 0x3bc, Size: 4]
	void SetStaticMeshPath(FString InMeshPath);// 0x415538c
	void SetStaticMesh(StaticMesh* InStaticMesh);// 0x3975b78
	void SetScale(Vector inScale);// 0x4155314
	void SetId(int InputID);// 0x415529c
	void SetCulDistance(float CulDistance);// 0x36cd03c
	void RequestHttpImageByUrl(FString PicUrl);// 0x41551e0
	void ReplaceTexture(Texture2D* Texture);// 0x4155168
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x4155060
	void OnRep_MeshPath();// 0x4a51734
	void OnRep_Id();// 0x4a51734
	void OnClientLoadMesh();// 0x4a51734
	void InitImageDownloadUtil();// 0x415504c

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x310, Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x315, Size: 1]

--------------------------------
Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	FString HttpImgPath;//[Offset: 0xc, Size: 12]
	Vector Loc;//[Offset: 0x18, Size: 12]
	Rotator Rot;//[Offset: 0x24, Size: 12]
	Vector Scale;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	int CulDistance;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MissionBoardConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	float Progress;//[Offset: 0x30, Size: 4]
	FString CountOrTime;//[Offset: 0x34, Size: 12]
	int TipId;//[Offset: 0x40, Size: 4]

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x210, Size: 12]
	byte BornIslandGroupType;//[Offset: 0x21c, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x220, Size: 208]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x2f0, Size: 60]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x32c, Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	FString[] AreaIDList;//[Offset: 0x33c, Size: 12]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x348, Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x354, Size: 12]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x360, Size: 12]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x36c, Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x3a8, Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x3c8, Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x3cc, Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x3d0, Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x40c, Size: 60]
	Actor*[] BornIslandItems;//[Offset: 0x448, Size: 12]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x454, Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x468, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x470, Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x4b8, Size: 12]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x4d0, Size: 12]
	FString CookedBandFilePath;//[Offset: 0x518, Size: 12]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x528, Size: 12]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x534, Size: 60]
	bool bUseDynamicSpotConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	DynamicSpotConfig[] DynamicSpotConfigs;//[Offset: 0x574, Size: 12]
	int RandomSpotCountPerTick;//[Offset: 0x5bc, Size: 4]
	delegate PreCalculateCompleted;//[Offset: 0x5fc, Size: 12]
	bool bCheckPreCalculateComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 1]
	bool bEnablePrimeItemCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x609, Size: 1]
	PrimeItemCircleConfig[] PrimeItemCircleConfigs;//[Offset: 0x60c, Size: 12]
	<Vector,UAESpotGroupObject*> SpotGroupObjectsMapByLoc;//[Offset: 0x63c, Size: 60]
	bool bRemovableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 1]
	int RemoveGeneratedItemPerTick;//[Offset: 0x6f4, Size: 4]
	int RemoveDropGroundItemPerTick;//[Offset: 0x6f8, Size: 4]
	bool bAddHouseActorSerializeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	void WriteItemSpotStatisticsDatas();// 0x413ec20
	void WriteItemClassStatisticsDatas_V15();// 0x3592f9c
	void WriteItemClassStatisticsDatas();// 0x413ec0c
	void WriteGroupStatisticsDatas();// 0x413ebf8
	void WriteBuildingStatisticsDatas();// 0x413ebe4
	void WriteAreaItemStatisticsDatas();// 0x413ebd0
	void WriteAllStatisticsDatasToLog();// 0x35b08dc
	void WriteAllStatisticsDatas();// 0x37b9640
	void SetRandomSeed(int Seed);// 0x36dbb90
	void SetCatetoryRate(<FString,float> Rates);// 0x413ea24
	bool RemoveSpotInfo(bool bFirstEnterState);// 0x413e99c
	void RemoveItemOnTick();// 0x413e988
	bool RemoveDropGround(bool bFirstEnterState);// 0x413e900
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x413e81c
	void RegisterBornIslandItem(Actor* Item);// 0x3b4051c
	UAEDataTable* ReadItemGenerateTable(FString TablePath);// 0x413e6bc
	void ReAddAllSpot();// 0x413e6a8
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x413e4f0
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x413e3d8
	void RandomBornIslandGroups();// 0x35b05a4
	void OnAsyncLoadItemClassFinish(class Actor ActorClassPtr, ItemGenerateSpawnClass SpawnClass);// 0x413e184
	void LuaCustomFunctionAfterGenerate(out ItemGenerateSpawnClass SpawnClass, Actor* ItemActor);// 0x413e03c
	bool LuaAddRandomItemClassArray(ItemGenerateSpawnClass SpawnClass);// 0x413df1c
	void LoadItemGenerateTable();// 0x3671a08
	bool IsCatetoryEnabled();// 0x413def4
	void InitCatetorys();// 0x413dee0
	void InitCategoryEx();// 0x413decc
	Vector[] GMTrackGroundCheck(class Object CheckClass, float FloatUp, float FloatDown, float SinkUp, float SinkTop, bool bCheckBounds);// 0x413dc58
	bool GMGenerateAllSpot(FString ItemPath);// 0x413daf8
	void GMEnableRefreshAllSpotWithSeed(int Seed);// 0x36dbb90
	FString[] GetSpotTags();// 0x413d99c
	Vector[] GetSpotLocsByTag(FString ExTag);// 0x413d858
	int GetSpotLocInPolygon(Vector[] Anchors, out Vector[] OutLocs, int RandomNum);// 0x413d618
	int GetSpotLocInCircle(Vector Center, int Radius, out Vector[] OutLocs, int RandomNum);// 0x413d474
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x413d34c
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, ItemSpotSceneComponent* SpotComponent);// 0x413d06c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4119f50
	int GetItemDefineID(class Object PickUpClass);// 0x4a51734
	float GetCatetoryRate(FString Catetory);// 0x413cfa4
	void GenerateSpotOnTick(float DeltaTime);// 0x3570244
	void GenerateNewRandomSeed();// 0x3592f9c
	Vector FindASpawnLoc(World* InWorld, const Vector TraceStart);// 0x413cecc
	void EnableRemoveItem();// 0x413ceb8
	void EnableRefreshAllSpot();// 0x413cea4
	void EnablePrimeItemPolygon(Vector[] Anchors, int PrimeConfigIndex);// 0x413cd04
	void EnablePrimeItemCircle(Vector Center, int Radius, int PrimeConfigIndex);// 0x413cc08
	void EnableDynamicSpotConfigByIndex(int DynamicIndex);// 0x413cb90
	void DoPickUp(int ItemSpotDataIndex, FString Value, FString Category);// 0x413ca04
	void DeleteBornIslandItems();// 0x413c9f0
	bool CheckShouldGenerateItem(int ItemId);// 0x413c968
	void CheckRecoverItems();// 0x413c954
	bool CheckInPolygon(out const Vector Pos, out const Vector[] Anchors);// 0x413c82c
	bool CheckInCircle(out const Vector Pos, out const Vector Center, out int Radius);// 0x413c6f4
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x413c5c0
	void AddDropGround(Actor* InActor);// 0x413c548

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0x150, Size: 4]
	FString ItemTableName;//[Offset: 0x154, Size: 12]
	FString[] ItemSpawnTableList;//[Offset: 0x160, Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0x16c, Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x174, Size: 60]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x1b0, Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x1bc, Size: 60]
	FString CookedFilePath;//[Offset: 0x1f8, Size: 12]
	FString[] CookedFileAddPathArray;//[Offset: 0x204, Size: 12]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x35701c4
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x36449d8
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x3644b58
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4119f50
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x4119e84
	void GenerateSpots();// 0x36592b0
	void GenerateSpotOnTick(float DeltaTime);// 0x3570244
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x4119c34
	void CheckTileLevelsVisible();// 0x4119c20

--------------------------------
Class: ItemActorComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: LuaActorComponent.ActorComponent.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x104, Size: 60]
	FString LuaFilePath;//[Offset: 0x140, Size: 12]
	void UnRegistLuaTick();// 0x78911b4
	void RegistLuaTick(float TickInterval);// 0x78915d0

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x2bd, Size: 1]
	int ID;//[Offset: 0x2c0, Size: 4]
	int WorldCompositionID;//[Offset: 0x2c4, Size: 4]
	float HalfHeight;//[Offset: 0x2c8, Size: 4]
	int SpotProbability;//[Offset: 0x2cc, Size: 4]
	float LineOffsetZ;//[Offset: 0x2d0, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	void SetSpotValid(bool Valid);// 0x4154938
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x4154644
	bool IsSpotValid();// 0x4154614
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4154448
	bool GenerateSpot();// 0x3b09354
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x41542d0

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 12]
	int Weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x4, Size: 4]
	FString ItemPath;//[Offset: 0x8, Size: 12]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString MetaData;//[Offset: 0x18, Size: 12]
	FString ItemValue;//[Offset: 0x24, Size: 12]
	FString ItemCategory;//[Offset: 0x30, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x40, Size: 12]
	Vector SpotGroupLoc;//[Offset: 0x4c, Size: 12]
	Rotator SpotRotator;//[Offset: 0x58, Size: 12]
	int SpotPercent;//[Offset: 0x64, Size: 4]
	FString SpotDefaultTag;//[Offset: 0x6c, Size: 12]
	Actor* HostActor;//[Offset: 0x80, Size: 4]
	Actor* AttachedActor;//[Offset: 0x84, Size: 4]
	int SpotIndex;//[Offset: 0x9c, Size: 4]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	Vector RelativeLoc;//[Offset: 0xa4, Size: 12]

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c, Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88, Size: 60]
	AreaItemStatisticsData[] AreaItemStatisticsData;//[Offset: 0xc4, Size: 12]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllSpotCount;//[Offset: 0x10, Size: 4]
	int AllValidSpotCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4, Size: 12]
	float BuildingLocationX;//[Offset: 0x10, Size: 4]
	float BuildingLocationY;//[Offset: 0x14, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c, Size: 4]
	int AllSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidSpotCount;//[Offset: 0x24, Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28, Size: 60]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18, Size: 12]
	int ItemTogetherCount;//[Offset: 0x24, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: AreaItemStatisticsData.TableRowBase
	FString ItemName;//[Offset: 0x4, Size: 12]
	int UID;//[Offset: 0x10, Size: 4]
	int ItemId;//[Offset: 0x14, Size: 4]
	int GroupType;//[Offset: 0x18, Size: 4]
	int SpotType;//[Offset: 0x1c, Size: 4]
	FString AreaName;//[Offset: 0x20, Size: 12]
	Vector Location;//[Offset: 0x2c, Size: 12]
	float X;//[Offset: 0x38, Size: 4]
	float Y;//[Offset: 0x3c, Size: 4]
	int GameTime;//[Offset: 0x40, Size: 4]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18, Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ItemRegionCircle
	Vector Center;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float RadiusSquared2D;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ExtraItemSpawn
	int SpawnPercent;//[Offset: 0x0, Size: 4]
	FString SpawnItemValue;//[Offset: 0x4, Size: 12]
	FString SpawnItemCategory;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x4, Size: 12]
	FString ItemCategory;//[Offset: 0x10, Size: 12]
	int ItemWeight;//[Offset: 0x1c, Size: 4]
	FString ItemPath;//[Offset: 0x20, Size: 12]
	int ItemStackCount;//[Offset: 0x2c, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x30, Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x3c, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x40, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2d0, Size: 4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x2d4, Size: 12]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x2e0, Size: 12]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x41442f4
	void RepeatSpots();// 0x41442e0
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x4144268
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x41440cc
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x4143f7c
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x4143e58

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x2d8, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	byte SpotGroupType;//[Offset: 0x2de, Size: 1]
	float RepeatGenerateItemCD;//[Offset: 0x2e0, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2e4, Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x2e8, Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x2f4, Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x2f8, Size: 60]
	Actor*[] CacheItems;//[Offset: 0x334, Size: 12]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x4144de4
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x4144d2c
	bool GenerateSpot();// 0x3b09354
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x4144c28
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x41449b8
	int CountCacheItemValeCategory();// 0x4144990
	void ClearCacheItems();// 0x414497c

--------------------------------
Class: DateTime

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xa0, Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0xa8, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: AreaItemsLimitEdit
	int AreaX;//[Offset: 0x0, Size: 4]
	int AreaY;//[Offset: 0x4, Size: 4]
	GenerateItemLimit[] ItemsMaxLimitEdit;//[Offset: 0x8, Size: 12]
	GenerateItemLimit[] ItemsMinLimitEdit;//[Offset: 0x14, Size: 12]

--------------------------------
Class: GenerateItemLimit
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AreaItemsLimit
	RegionID RegionID;//[Offset: 0x0, Size: 12]
	bool IsBeginGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool IsCheckRecoverItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	Vector[] AvailablePosi;//[Offset: 0x10, Size: 12]
	<int,AreaItemsNum> ItemsMaxLimit;//[Offset: 0x1c, Size: 60]
	<int,AreaItemsNum> ItemsMinLimit;//[Offset: 0x58, Size: 60]

--------------------------------
Class: RegionID

--------------------------------
Class: AreaItemsNum
	int LimitNum;//[Offset: 0x0, Size: 4]
	int CurNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: DynamicSpotConfig
	FString Comment;//[Offset: 0x0, Size: 12]
	bool bDefaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	FString DynamicSpotPath;//[Offset: 0x10, Size: 12]
	CustomSpotConfig CustomSpotConfig;//[Offset: 0x1c, Size: 28]
	SpotGroupProperty[] SpotGroupProperties;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CustomSpotConfig
	bool bGenerateAtBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int NeedGroupMin;//[Offset: 0x4, Size: 4]
	int NeedGroupMax;//[Offset: 0x8, Size: 4]
	bool bSpotPerGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int NeedSpotPerGroupMin;//[Offset: 0x10, Size: 4]
	int NeedSpotPerGroupMax;//[Offset: 0x14, Size: 4]
	bool bUseCookedRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOverrideNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]

--------------------------------
Class: PrimeItemCircleConfig
	SpotGroupProperty[] PrimeItemCircleProperties;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UAESpotGroupObject.Object
	Object* Host;//[Offset: 0x58, Size: 4]

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool bCanBackupVehicleSpotDatas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x214, Size: 12]
	byte RegionType;//[Offset: 0x220, Size: 1]
	BackupVehicleSpotData[] BackupVehicleSpotDatas;//[Offset: 0x224, Size: 12]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x230, Size: 12]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x23c, Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x24c, Size: 60]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x288, Size: 60]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x2c4, Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x300, Size: 72]
	UAEDataTable* VehicleDataTable;//[Offset: 0x348, Size: 4]
	bool bRemovableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	<VehicleSpotObject*> PauseVehicleSpotObjectSet;//[Offset: 0x35c, Size: 60]
	Actor*[] GeneratedActorArray;//[Offset: 0x398, Size: 12]
	delegate OnVehicleGeneratedDelegate;//[Offset: 0x3a8, Size: 12]
	delegate OnVehicleGenerateEndDelegate;//[Offset: 0x3b4, Size: 12]
	void WriteVehicleSpotStatisticsFromSpotFile();// 0x3592f9c
	void WriteVehicleSpotStatisticsDatas_V15();// 0x3592f9c
	void WriteVehicleSpotStatisticsDatas();// 0x3592f9c
	void WriteVehicleClassStatisticsDatas_V15();// 0x3592f9c
	void WriteVehicleClassStatisticsDatas();// 0x3592f9c
	void WriteAllVehicleStatisticsDatasToLog();// 0x3592f9c
	void WriteAllVehicleStatisticsDatas_V15();// 0x3592f9c
	void WriteAllVehicleStatisticsDatas();// 0x3592f9c
	void SetAllVehicleNumRate(<FString,float> Rates);// 0x4184114
	void ResumeGenerate();// 0x4184100
	void RegisterVehicleGenerateSpawnData(out const VehicleGenerateSpawnData Data);// 0x4183ff8
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x3644b58
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x4183e24
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x4183c50
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x4183a7c
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x41838a8
	void RandomGroups();// 0x35a9cfc
	void PauseGenerate();// 0x4183894
	void LoadVehicleGenerateTable();// 0x4a51734
	bool GMGenerateAllVehicleSpot(FString VehiclePath);// 0x4183734
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoWithCategory(out VehicleSpotProperty SpotProperty, FString Category);// 0x41833c8
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType, FString InCategory);// 0x41831b4
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out const VehicleSpotProperty SpotProperty, FString InCategory);// 0x4182ee4
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x4182c9c
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x4182acc
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4119f50
	int GetAlreadyGeneratedVehicleNum();// 0x4182ab0
	void GenerateSpotOnTick(float DeltaTime);// 0x3570244
	void EndGenerate();// 0x4182a9c
	void EnableRemovableMode();// 0x4182a88
	bool DynamicSpawnVehicleBySpotId(int ID, FString Category);// 0x41828e0
	void DeleteGroups();// 0x41828cc
	bool CanDynamicSpawnVehicle(Vector SpawnLocation, Vector TestLocationOffset, Vector TestBoxSize);// 0x41827b4
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x418253c
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x4182350

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x2dc, Size: 1]
	byte RegionType;//[Offset: 0x2dd, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2de, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2df, Size: 1]
	float RandomRotationMin;//[Offset: 0x2e0, Size: 4]
	float RandomRotationMax;//[Offset: 0x2e4, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x2e8, Size: 32]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x30c, Size: 4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x41865c4
	bool GenerateSpot();// 0x3b09354

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 12]
	FString VehiclePath;//[Offset: 0xc, Size: 12]
	float FuelPercent;//[Offset: 0x18, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: BackupVehicleSpotData
	int ID;//[Offset: 0x0, Size: 4]
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	byte SpotType;//[Offset: 0x5, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x8, Size: 12]
	Rotator SpotRotator;//[Offset: 0x14, Size: 12]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int FuelPercentMin;//[Offset: 0x10, Size: 4]
	int FuelPercentMax;//[Offset: 0x14, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	byte RandomType;//[Offset: 0x19, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x20, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x24, Size: 4]
	float ProbabilityPersent;//[Offset: 0x28, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int TotalCountRangeMin;//[Offset: 0x10, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 12]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x4, Size: 12]
	FString VehiclePath;//[Offset: 0x10, Size: 12]
	int VehicleWeight;//[Offset: 0x1c, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 12]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc, Size: 60]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	FString VehiclePath;//[Offset: 0x8, Size: 12]
	float VehicleLocationX;//[Offset: 0x14, Size: 4]
	float VehicleLocationY;//[Offset: 0x18, Size: 4]
	float VehicleLocationZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int AllVehicleCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleSpotObject.Object
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x58, Size: 32]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0x78, Size: 4]
	void OnVehicleGenerateEnd();// 0x4186374

--------------------------------
Class: SeasonStatueData
	FString Name;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	FString Nation;//[Offset: 0x30, Size: 12]
	int AGender;//[Offset: 0x3c, Size: 4]
	int Head;//[Offset: 0x40, Size: 4]
	int hair;//[Offset: 0x44, Size: 4]
	int WeaponId;//[Offset: 0x48, Size: 4]
	int[] AvatarList;//[Offset: 0x4c, Size: 12]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x58, Size: 12]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0, Size: 12]
	FString MatPath;//[Offset: 0xc, Size: 12]
	FString TeamFlag;//[Offset: 0x18, Size: 12]
	FString TeamName;//[Offset: 0x24, Size: 12]
	Vector Loc;//[Offset: 0x30, Size: 12]
	Rotator Rot;//[Offset: 0x3c, Size: 12]
	Vector Scale;//[Offset: 0x48, Size: 12]

--------------------------------
Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0, Size: 12]
	float AttrValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 8]
	FString CorpsName;//[Offset: 0x8, Size: 12]
	int Icon;//[Offset: 0x14, Size: 4]
	int SegmentLevel;//[Offset: 0x18, Size: 4]

--------------------------------
Class: VehicleReportEntry
	uint32 VehicleID;//[Offset: 0x0, Size: 4]
	int VehicleShapeType;//[Offset: 0x4, Size: 4]
	bool IsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float FirstAttackedTime;//[Offset: 0xc, Size: 4]
	float LastAttackedTime;//[Offset: 0x10, Size: 4]
	bool Drived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainTeamCount;//[Offset: 0xc, Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x10, Size: 4]
	float PlaneDirectionX;//[Offset: 0x14, Size: 4]
	float PlaneDirectionY;//[Offset: 0x18, Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x1c, Size: 60]
	<FString,float> PlayersOnlineTime;//[Offset: 0x58, Size: 60]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x94, Size: 12]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 12]
	int CorpsHeadIcon;//[Offset: 0xc, Size: 4]
	int KilledNum;//[Offset: 0x10, Size: 4]
	int SegmentLevel;//[Offset: 0x14, Size: 4]
	int RealtimeRank;//[Offset: 0x18, Size: 4]
	int DefeatPlayerNum;//[Offset: 0x1c, Size: 4]
	float TotalDamage;//[Offset: 0x20, Size: 4]
	float SurvivalTime;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BattleData
	int WatcherNum;//[Offset: 0x0, Size: 4]
	int CircleNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModeParams
	FName CurrentGameModeState;//[Offset: 0x0, Size: 8]
	int MaxKillTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DSAIDropInfo
	uint64 BattleID;//[Offset: 0x0, Size: 8]
	int nts;//[Offset: 0x8, Size: 4]
	DSAIDropItem[] ais;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DSAIDropItem
	uint64 UID;//[Offset: 0x0, Size: 8]
	int Time;//[Offset: 0x8, Size: 4]
	int8 hlv;//[Offset: 0xc, Size: 1]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	bool IsForcedNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	float surviveTime;//[Offset: 0x408, Size: 4]
	float surviveTimeFromPlane;//[Offset: 0x40c, Size: 4]
	float Pronetime;//[Offset: 0x410, Size: 4]
	int MovingCount;//[Offset: 0x41c, Size: 4]
	float marchDistance;//[Offset: 0x420, Size: 4]
	float travelDistance;//[Offset: 0x424, Size: 4]
	float DriveDistance;//[Offset: 0x428, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x42c, Size: 4]
	int destroyVehicleNum;//[Offset: 0x430, Size: 4]
	int rescueTimes;//[Offset: 0x434, Size: 4]
	uint64[] RescueTeammatesList;//[Offset: 0x438, Size: 12]
	int NormalItemsNum;//[Offset: 0x444, Size: 4]
	int SeniorItemsNum;//[Offset: 0x448, Size: 4]
	int GVMemberID;//[Offset: 0x44c, Size: 4]
	FName PlayerType;//[Offset: 0x450, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x458, Size: 8]
	uint32 PlayerKey;//[Offset: 0x460, Size: 4]
	FString PlayerUID;//[Offset: 0x464, Size: 12]
	FString MLAIStringUID;//[Offset: 0x470, Size: 12]
	bool bPSEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	FString iconUrl;//[Offset: 0x480, Size: 12]
	int gender;//[Offset: 0x48c, Size: 4]
	int PlayerLevel;//[Offset: 0x490, Size: 4]
	int SegmentLevel;//[Offset: 0x494, Size: 4]
	int AceImprintShowId;//[Offset: 0x498, Size: 4]
	int AceImprintBaseId;//[Offset: 0x49c, Size: 4]
	int AvatarBoxId;//[Offset: 0x4a0, Size: 4]
	int planeAvatarId;//[Offset: 0x4a4, Size: 4]
	int CampID;//[Offset: 0x4a8, Size: 4]
	int resID;//[Offset: 0x4ac, Size: 4]
	uint64 UID;//[Offset: 0x4b0, Size: 8]
	uint64 MLAIDisplayUID;//[Offset: 0x4b8, Size: 8]
	FString OpenID;//[Offset: 0x4c0, Size: 12]
	int ZoneID;//[Offset: 0x4cc, Size: 4]
	FString Nation;//[Offset: 0x4d0, Size: 12]
	int TeamID;//[Offset: 0x4dc, Size: 4]
	int64 IdxInTeam;//[Offset: 0x4e0, Size: 8]
	uint64 PreTeamID;//[Offset: 0x4e8, Size: 8]
	int PreTeamChatState;//[Offset: 0x4f0, Size: 4]
	int PlayerBornPointID;//[Offset: 0x4f4, Size: 4]
	int Kills;//[Offset: 0x4f8, Size: 4]
	int KillsBeforeDie;//[Offset: 0x4fc, Size: 4]
	int Knockouts;//[Offset: 0x500, Size: 4]
	int AIKills;//[Offset: 0x504, Size: 4]
	int DeathsCount;//[Offset: 0x508, Size: 4]
	int MlAIDeliverNum;//[Offset: 0x510, Size: 4]
	int OriginalMlAIDeliverNum;//[Offset: 0x514, Size: 4]
	int Assists;//[Offset: 0x518, Size: 4]
	uint64[] AssistTeammatesList;//[Offset: 0x51c, Size: 12]
	int[] OvertimeAssistsTime;//[Offset: 0x564, Size: 12]
	byte PlatformGender;//[Offset: 0x570, Size: 1]
	int MatchStrategyLabel;//[Offset: 0x574, Size: 4]
	int MatchLabel;//[Offset: 0x578, Size: 4]
	uint32 Killer;//[Offset: 0x57c, Size: 4]
	uint32 KillerIGPlayerKey;//[Offset: 0x580, Size: 4]
	FString BeKilledOpenID;//[Offset: 0x584, Size: 12]
	FString KillerName;//[Offset: 0x590, Size: 12]
	uint32 KillerType;//[Offset: 0x59c, Size: 4]
	int KillerWeaponID;//[Offset: 0x5a0, Size: 4]
	uint32 KillerDeliveryType;//[Offset: 0x5a4, Size: 4]
	uint32 DeadCircleIndex;//[Offset: 0x5a8, Size: 4]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x5b0, Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x5b8, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x5bc, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x5c0, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x5c4, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x5c8, Size: 4]
	int HeadShotNum;//[Offset: 0x5cc, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x5d0, Size: 4]
	int KillNumByGrende;//[Offset: 0x5d4, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x5d8, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x5dc, Size: 4]
	int UseFlashGrenadeNum;//[Offset: 0x5e0, Size: 4]
	int UseBurnGrenadeNum;//[Offset: 0x5e4, Size: 4]
	int MaxKillDistance;//[Offset: 0x5e8, Size: 4]
	int HealTimes;//[Offset: 0x5ec, Size: 4]
	float DamageAmount;//[Offset: 0x5f0, Size: 4]
	float RealPlayerDamageAmount;//[Offset: 0x5f4, Size: 4]
	int MeleeKillTimes;//[Offset: 0x5f8, Size: 4]
	float MeleeDamageAmount;//[Offset: 0x5fc, Size: 4]
	float RangedDamagedAmount;//[Offset: 0x600, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x604, Size: 4]
	float HealAmount;//[Offset: 0x608, Size: 4]
	FString[] KillFlow;//[Offset: 0x60c, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x618, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x624, Size: 12]
	float InDamageAmount;//[Offset: 0x630, Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x640, Size: 12]
	int PickUpItemTimes;//[Offset: 0x64c, Size: 4]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x654, Size: 60]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x690, Size: 72]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x6dc, Size: 60]
	GameModeLikeResultData[] Like;//[Offset: 0x718, Size: 12]
	uint32 Switch;//[Offset: 0x724, Size: 4]
	uint32[] Self;//[Offset: 0x728, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x734, Size: 12]
	UseItemFlow[] UseItemFlow;//[Offset: 0x740, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x74c, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x758, Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x764, Size: 12]
	<int,int> TLog_BulletCount;//[Offset: 0x770, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x7ac, Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x7b8, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x7bc, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x7c8, Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x7cc, Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x7d0, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x7d4, Size: 4]
	int[] BuildFlow;//[Offset: 0x7d8, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x7e4, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x7f0, Size: 4]
	float HitShelterDamage;//[Offset: 0x7f4, Size: 4]
	Vector LandLocation;//[Offset: 0x7f8, Size: 12]
	Vector ParachuteLocation;//[Offset: 0x804, Size: 12]
	int LandTime;//[Offset: 0x810, Size: 4]
	Vector DeadLocation;//[Offset: 0x814, Size: 12]
	FString DeadDamangeType;//[Offset: 0x820, Size: 12]
	int PveDeadAttacker;//[Offset: 0x82c, Size: 4]
	int PveStageId;//[Offset: 0x830, Size: 4]
	FString DeadTimeStr;//[Offset: 0x834, Size: 12]
	int NearDeathDamageType;//[Offset: 0x840, Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x844, Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	int BeDownTimes;//[Offset: 0x84c, Size: 4]
	int BeSavedTimes;//[Offset: 0x850, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x854, Size: 80]
	int PersonalRank;//[Offset: 0x8a4, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	int GamePlayingTime;//[Offset: 0x8b4, Size: 4]
	int ObserverTime;//[Offset: 0x8b8, Size: 4]
	int TouchDownAreaID;//[Offset: 0x8bc, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x8c0, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x8c4, Size: 12]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	float ReportTouchDownHeight;//[Offset: 0x8d4, Size: 4]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x8d8, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x8e4, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x8f0, Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x8fc, Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x908, Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x914, Size: 4]
	float InHelicopterTime;//[Offset: 0x918, Size: 4]
	int RevivalNum;//[Offset: 0x91c, Size: 4]
	int BeRevivedNum;//[Offset: 0x920, Size: 4]
	int KillNumInVehicle;//[Offset: 0x924, Size: 4]
	float MaxVehicleToLandHeight;//[Offset: 0x928, Size: 4]
	float MaxVehicleInAirInterval;//[Offset: 0x92c, Size: 4]
	int KillPlayerNum;//[Offset: 0x930, Size: 4]
	int KillAINum;//[Offset: 0x934, Size: 4]
	float TotalSprintDistance;//[Offset: 0x938, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x93c, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x940, Size: 4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x944, Size: 12]
	int ProneTimes;//[Offset: 0x950, Size: 4]
	int CrouchTimes;//[Offset: 0x954, Size: 4]
	int JumpTimes;//[Offset: 0x958, Size: 4]
	int KillMonsterNum;//[Offset: 0x95c, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0x960, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x99c, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x9a0, Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x9a4, Size: 60]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x9e0, Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0xa1c, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0xa20, Size: 4]
	int LightCandleNum;//[Offset: 0xa24, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xa28, Size: 60]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0xa64, Size: 12]
	float BattleStateTime;//[Offset: 0xa70, Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa74, Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0xa78, Size: 4]
	int FistKillingCount;//[Offset: 0xa7c, Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0xa80, Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0xa84, Size: 60]
	FString[] DestroyVehicleFlow;//[Offset: 0xac0, Size: 12]
	int UseHelicoperNum;//[Offset: 0xacc, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0xad0, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0xadc, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0xae8, Size: 32]
	float UseHelicoperDistance;//[Offset: 0xb08, Size: 4]
	byte CharmRankIndex;//[Offset: 0xb0c, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0xb10, Size: 60]
	int FollowState;//[Offset: 0xb4c, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0xb50, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0xb54, Size: 4]
	int KillMagicWalkAI;//[Offset: 0xb58, Size: 4]
	int SendMagicWalkAI;//[Offset: 0xb5c, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0xb60, Size: 12]
	int KillSnowManCount;//[Offset: 0xb6c, Size: 4]
	uint64 LuckmateUID;//[Offset: 0xb70, Size: 8]
	<enum,int> EventCounterMap;//[Offset: 0xb78, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0xbb4, Size: 60]
	delegate OnGenerelCountChanged;//[Offset: 0xbf8, Size: 12]
	int VeteranRecruitIndex;//[Offset: 0xc04, Size: 4]
	delegate PlayerStateTeamChanged;//[Offset: 0xc08, Size: 12]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xc14, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xc20, Size: 52]
	int MemberIdInVoiceRoom;//[Offset: 0xc54, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xc5c, Size: 48]
	int UpassShow;//[Offset: 0xc8c, Size: 4]
	int upassKeepBuy;//[Offset: 0xc90, Size: 4]
	int upassCurValue;//[Offset: 0xc94, Size: 4]
	int pass_type;//[Offset: 0xc98, Size: 4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c, Size: 1]
	TLog_Micphone MicphoneTlog;//[Offset: 0xca0, Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0xcb8, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xcbc, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xcc0, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xcc4, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xcc8, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0xccc, Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0xcd0, Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0xcd4, Size: 4]
	DamageInfo LuaNearDeathDamageInfo;//[Offset: 0xcf0, Size: 144]
	DamageInfo LuaDeathDamageInfo;//[Offset: 0xd80, Size: 144]
	FName RepPropertyCategory;//[Offset: 0xe10, Size: 8]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe40, Size: 120]
	FString RealPlayerName;//[Offset: 0xebc, Size: 12]
	void SetRankAndPersonalRank(int TempRank, int TempPersonalRank);// 0x417bd4c
	void SetGVMemberIDServerCall(int memberID);// 0x417bc98
	void SetGVMemberID(int memberID);// 0x417bc20
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess, int EventTypeId);// 0x417bb14
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x417ba04
	void RPC_ServerAddGeneralCount(int ID, int InCount, bool bReset);// 0x417b8ac
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x417b770
	void RPC_ChangeOnlyTeamChat(int NewPreTeamChatState);// 0x417b6bc
	void ReportTaskExtInfo(int TaskId, FString ExtInfo);// 0x417b51c
	void ReportTaskData(int TaskId, int process);// 0x417b460
	void ReportSpecialCollection(int ItemId, int Count);// 0x417b3a4
	void ReportSecretAreaID(int SecretAreaID);// 0x417b32c
	void ReportLikeTeammate(int64 BeLikeUID, int LikeType);// 0x417b26c
	void ReportLikeSwitch(int SwitchSetting);// 0x417b1f4
	void ReportLikeSelf(int LikeType);// 0x417b17c
	void ReportLandLocType(int TouchDownLocType);// 0x417b104
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x417b038
	void ReportLandArea(int TouchDownArea);// 0x417afc0
	void ReportLabelCheck(int TeammateUID, int Result);// 0x417af04
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x417ae8c
	void OnRepCampIDBP();// 0x4a51734
	void OnRep_VeteranRecruitIndex();// 0x417ae78
	void OnRep_UpdateKillMonsterNum();// 0x364d8f4
	void OnRep_UID();// 0x3a120fc
	void OnRep_TeamID();// 0x417ae64
	void OnRep_RescueTimesChange();// 0x417ae48
	void OnRep_PreTeamID();// 0x417adf8
	void OnRep_PlayerKillsChange();// 0x3a11ffc
	void OnRep_PlayerKey();// 0x39e898c
	void OnRep_MLAIDisplayUID();// 0x417ae34
	void OnRep_MatchLabel();// 0x3592f9c
	void OnRep_CollectItemRecord();// 0x417ae20
	void OnRep_CampID();// 0x417ae0c
	void OnRep_bOnlyPreTeamChat();// 0x417adf8
	void OnRep_AliasInfo();// 0x417ade4
	void OnClientVeteranRecruitIndexUpdated();// 0x3a11e04
	bool IsSpecialPickItemCollectionCompleted(int ItemId);// 0x417ad64
	bool IsSpecialPickItem(int ItemId);// 0x417ace4
	bool IsNearDeathDamageInfoValid();// 0x417acbc
	bool IsItemForbidMerge(int ItemResId);// 0x37d50e4
	bool IsDeathDamageInfoValid();// 0x417ac94
	OnePlayerWeapon GetWeaponReportByWeaponRecord();// 0x4a51734
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x417aba8
	int GetVeteranPlayerLevel();// 0x417ab78
	uint32 GetUserIDByMemberID(int memberID);// 0x3a11750
	FString GetUIDString();// 0x417aab8
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x417aa4c
	int GetTeamId();// 0x417aa30
	int GetRank();// 0x417aa08
	int GetPlayerTotalShootNum();// 0x3888494
	uint32 GetPlayerKey();// 0x417a9e0
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x417a8fc
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x417a890
	enum GetMentorPlayerType();// 0x417a860
	void ForceUpdateCampCharacterList();// 0x417a844
	void CopyNearDeathDamageInfo();// 0x417a830
	void CopyDeathDamageInfo();// 0x417a81c
	void ClearTlogData();// 0x417a800
	void ClearKillNum();// 0x417a7e4
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x417a720
	void AddGeneralTLogJustForDelegate(int ID, int DeltaCnt, int CurrValue);// 0x417a620
	void AddGeneralCount(int ID, int InCount, bool bReset);// 0x417a518
	void AddEventCount(byte EventID, int InCount, bool bReset);// 0x417a410

--------------------------------
Class: LuaPlayerState.PlayerState.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x3bc, Size: 60]
	FString LuaFilePath;//[Offset: 0x3f8, Size: 12]

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0, Size: 8]
	int Times;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	FString TimeStr;//[Offset: 0x1c, Size: 12]
	uint64 InstanceID;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0, Size: 4]
	int ThrowCount;//[Offset: 0x4, Size: 4]
	int HitOthersCount;//[Offset: 0x8, Size: 4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AIDeliveryTlogData
	uint64 UID;//[Offset: 0x0, Size: 8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: AIDeliveryInfo
	int DeliveryStartTime;//[Offset: 0x0, Size: 4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int DeliveryArrivalTime;//[Offset: 0x8, Size: 4]
	int EventTypeId;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModeLikeResultData
	uint32[] Like;//[Offset: 0x0, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeTeammateLableCheckData
	uint32 Mask;//[Offset: 0x0, Size: 4]
	uint64 UID;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: UseBuffFlow
	int BuffID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: BuildingEnterFlow
	int BuildingID;//[Offset: 0x0, Size: 4]
	int EnterCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FString TimeStr;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0, Size: 8]
	int VehicleType;//[Offset: 0x8, Size: 4]
	int AvatarID;//[Offset: 0xc, Size: 4]
	float DriveDistance;//[Offset: 0x10, Size: 4]
	float DriveTime;//[Offset: 0x14, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20, Size: 12]
	int ViceWeaponID;//[Offset: 0x2c, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30, Size: 12]
	int CloseWeaponID;//[Offset: 0x3c, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40, Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int HeadShootCount;//[Offset: 0xc, Size: 4]
	int LimbsShootCount;//[Offset: 0x10, Size: 4]
	int BodyShootCount;//[Offset: 0x14, Size: 4]
	int HandShootCount;//[Offset: 0x18, Size: 4]
	int FootShootCount;//[Offset: 0x1c, Size: 4]
	int UniqueHitCount;//[Offset: 0x20, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x24, Size: 12]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int TotalOwnTime;//[Offset: 0x34, Size: 4]
	int KillCount;//[Offset: 0x38, Size: 4]
	int KnockNumber;//[Offset: 0x3c, Size: 4]
	int[] Associations;//[Offset: 0x40, Size: 12]
	int AvatarID;//[Offset: 0x4c, Size: 4]
	int DIYPlanID;//[Offset: 0x50, Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: DestroyVehicleWheelFlow
	int AreaID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityEventReportData
	byte EventID;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_KillInfo
	int FakePlayerID;//[Offset: 0x0, Size: 4]
	int DeadTime;//[Offset: 0x4, Size: 4]
	int AILastFightTime;//[Offset: 0x8, Size: 4]
	int[] PlayerAreas;//[Offset: 0xc, Size: 12]
	int ArmorID;//[Offset: 0x18, Size: 4]
	int HelmetID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TLog_Micphone
	float TeammateMicrophoneTime;//[Offset: 0x0, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x4, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x8, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xc, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x10, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DamageInfo
	uint32 DamageType;//[Offset: 0x0, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float Distance;//[Offset: 0x8, Size: 4]
	uint32 Time;//[Offset: 0xc, Size: 4]
	uint32 DamageValue;//[Offset: 0x10, Size: 4]
	uint32 AttackerID;//[Offset: 0x14, Size: 4]
	Vector AttackerLoc;//[Offset: 0x18, Size: 12]
	uint32 AttackerBulletNumInClip;//[Offset: 0x24, Size: 4]
	uint32 AttackerSightType;//[Offset: 0x28, Size: 4]
	uint32 AttackerWeaponType;//[Offset: 0x2c, Size: 4]
	uint32 AttackerWeaponScopeID;//[Offset: 0x30, Size: 4]
	uint32 AttackerShotTimes;//[Offset: 0x34, Size: 4]
	uint64 AttackerState;//[Offset: 0x38, Size: 8]
	bool bAttackerMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	uint64 VictimID;//[Offset: 0x48, Size: 8]
	uint32 VictimType;//[Offset: 0x50, Size: 4]
	uint32 VictimDeliveryType;//[Offset: 0x54, Size: 4]
	int CircleIndex;//[Offset: 0x58, Size: 4]
	Vector VictimLoc;//[Offset: 0x5c, Size: 12]
	uint32 VictimState;//[Offset: 0x68, Size: 4]
	bool bVictimInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	int VictimVehicleType;//[Offset: 0x70, Size: 4]
	float VictimVelocity;//[Offset: 0x74, Size: 4]
	uint32 AttackerAreaID;//[Offset: 0x78, Size: 4]
	uint32 AlivePlayerNum;//[Offset: 0x7c, Size: 4]
	uint32 VictimTeamID;//[Offset: 0x80, Size: 4]
	int FloorType;//[Offset: 0x84, Size: 4]
	uint32 AttackerWeaponAvatarID;//[Offset: 0x88, Size: 4]
	uint32 AttackerVehicleShapeType;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	FString GameAppID;//[Offset: 0xc, Size: 12]
	FString OpenID;//[Offset: 0x18, Size: 12]
	uint16 AreaID;//[Offset: 0x24, Size: 2]
	int8 PlatID;//[Offset: 0x26, Size: 1]
	FString ZoneID;//[Offset: 0x28, Size: 12]
	uint64 BattleID;//[Offset: 0x38, Size: 8]
	FString UserName;//[Offset: 0x40, Size: 12]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	int8 RoleType;//[Offset: 0x58, Size: 1]
	FString PicUrl;//[Offset: 0x5c, Size: 12]
	FString GameAPPIDFromDS;//[Offset: 0x68, Size: 12]

--------------------------------
Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0, Size: 12]
	WeaponReport[] Weapons;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponReport
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]
	int AdsFireCount;//[Offset: 0x8, Size: 4]
	int HitCount;//[Offset: 0xc, Size: 4]
	int UniqueHitCount;//[Offset: 0x10, Size: 4]
	int KillCount;//[Offset: 0x14, Size: 4]
	float TotalDamage;//[Offset: 0x18, Size: 4]
	float TotalMonsterDamage;//[Offset: 0x1c, Size: 4]
	float TotalRealPlayerDamage;//[Offset: 0x20, Size: 4]
	float TotalNormalAIDamage;//[Offset: 0x24, Size: 4]
	float TotalMLAIDamage;//[Offset: 0x28, Size: 4]
	int TotalOwnTime;//[Offset: 0x2c, Size: 4]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int KnockDownCount;//[Offset: 0x34, Size: 4]
	int HeadShootCount;//[Offset: 0x38, Size: 4]
	int KillAICount;//[Offset: 0x3c, Size: 4]
	int KnockDownAICount;//[Offset: 0x40, Size: 4]
	int HeadShootAICount;//[Offset: 0x44, Size: 4]
	int HitAICount;//[Offset: 0x48, Size: 4]
	int UniqueHitAICount;//[Offset: 0x4c, Size: 4]
	int UseCount;//[Offset: 0x50, Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x54, Size: 12]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 4]
	int Distance;//[Offset: 0x4, Size: 4]
	int IsKill;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte[] PlayerStates;//[Offset: 0x14, Size: 12]
	byte HitPos;//[Offset: 0x20, Size: 1]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	uint32 HitPlayerKey;//[Offset: 0x24, Size: 4]
	int TimeStamp;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
	int Kill;//[Offset: 0x18, Size: 4]
	int AIKills;//[Offset: 0x1c, Size: 4]
	FString State;//[Offset: 0x20, Size: 12]
	float travelDistance;//[Offset: 0x2c, Size: 4]
	float marchDistance;//[Offset: 0x30, Size: 4]
	float DriveDistance;//[Offset: 0x34, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x38, Size: 4]
	float DamageAmount;//[Offset: 0x3c, Size: 4]
	float RealPlayerDamageAmount;//[Offset: 0x40, Size: 4]
	float HealAmount;//[Offset: 0x44, Size: 4]
	int AssistNum;//[Offset: 0x48, Size: 4]
	uint64[] AssistTeammatesList;//[Offset: 0x4c, Size: 12]
	int HeadShotNum;//[Offset: 0x58, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x5c, Size: 4]
	float surviveTime;//[Offset: 0x60, Size: 4]
	float surviveTimeFromPlane;//[Offset: 0x64, Size: 4]
	int rescueTimes;//[Offset: 0x68, Size: 4]
	uint64[] RescueTeammatesList;//[Offset: 0x6c, Size: 12]
	int DestroyVehicles;//[Offset: 0x78, Size: 4]
	FString[] KillFlow;//[Offset: 0x7c, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x88, Size: 12]
	float OutsideBlueCircleTime;//[Offset: 0x94, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x98, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0xa4, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0xa8, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0xac, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xb0, Size: 12]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0xbc, Size: 4]
	float InDamageAmount;//[Offset: 0xc0, Size: 4]
	int ProneTimes;//[Offset: 0xc4, Size: 4]
	int CrouchTimes;//[Offset: 0xc8, Size: 4]
	int JumpTimes;//[Offset: 0xcc, Size: 4]
	int KillMonsterNum;//[Offset: 0xd0, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xd4, Size: 60]
	int LightCandleNum;//[Offset: 0x110, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0x114, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x150, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x154, Size: 4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x158, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x15c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	int mainWeaponID;//[Offset: 0x164, Size: 4]
	float MaxWeaponAccurate;//[Offset: 0x168, Size: 4]
	float MaxWeaponHeadShotRate;//[Offset: 0x16c, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 4]
	int DeerBBQNum;//[Offset: 0x4, Size: 4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 4]
	int UseKFNum;//[Offset: 0xc, Size: 4]
	int UseUAVNum;//[Offset: 0x10, Size: 4]
	int KFUsingTime;//[Offset: 0x14, Size: 4]
	int UAVUsingTime;//[Offset: 0x18, Size: 4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 12]

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainingPlayerCount;//[Offset: 0xc, Size: 4]
	int TotalPlayerCount;//[Offset: 0x10, Size: 4]
	int RemainingTeamCount;//[Offset: 0x14, Size: 4]
	int TotalTeamCount;//[Offset: 0x18, Size: 4]
	float OnlineTime;//[Offset: 0x1c, Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	uint64 Killer;//[Offset: 0x28, Size: 8]
	uint64 killer_ig_uid;//[Offset: 0x30, Size: 8]
	uint64 KillerAIDisplayUID;//[Offset: 0x38, Size: 8]
	FString KillerName;//[Offset: 0x40, Size: 12]
	FString BeKilledOpenID;//[Offset: 0x4c, Size: 12]
	uint32 KillerType;//[Offset: 0x58, Size: 4]
	uint32 KillerDeliveryType;//[Offset: 0x5c, Size: 4]
	int KillerWeaponID;//[Offset: 0x60, Size: 4]
	uint32 DeadCircleIndex;//[Offset: 0x64, Size: 4]
	int ShootWeaponShotNum;//[Offset: 0x68, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x6c, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x70, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x74, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x78, Size: 4]
	int HealTimes;//[Offset: 0x7c, Size: 4]
	FString[] KillFlow;//[Offset: 0x80, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x8c, Size: 12]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x98, Size: 12]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0xa4, Size: 60]
	int PickUpItemTimes;//[Offset: 0xe0, Size: 4]
	<int,int> TLog_BulletCount;//[Offset: 0xe4, Size: 60]
	uint64 parachute_leader_uid;//[Offset: 0x120, Size: 8]
	UseItemFlow[] UseItemFlow;//[Offset: 0x128, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x134, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x140, Size: 12]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x14c, Size: 12]
	int destroyVehicleNum;//[Offset: 0x158, Size: 4]
	int is_escape;//[Offset: 0x15c, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x160, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x16c, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x178, Size: 32]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x198, Size: 12]
	GameModeLikeResultData[] Like;//[Offset: 0x1a4, Size: 12]
	uint64[] BeLiked;//[Offset: 0x1b0, Size: 12]
	uint32 Switch;//[Offset: 0x1bc, Size: 4]
	uint32[] Self;//[Offset: 0x1c0, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x1cc, Size: 12]
	Vector LandLocation;//[Offset: 0x1d8, Size: 12]
	int LandTime;//[Offset: 0x1e4, Size: 4]
	Vector ParachuteLocation;//[Offset: 0x1e8, Size: 12]
	Vector DeadLocation;//[Offset: 0x1f4, Size: 12]
	FString DeadDamangeType;//[Offset: 0x200, Size: 12]
	int PveDeadAttacker;//[Offset: 0x20c, Size: 4]
	int PveStageId;//[Offset: 0x210, Size: 4]
	FString DeadTimeStr;//[Offset: 0x214, Size: 12]
	FString logoutime;//[Offset: 0x220, Size: 12]
	float Pronetime;//[Offset: 0x22c, Size: 4]
	float BeInWaterTime;//[Offset: 0x230, Size: 4]
	float SwimmingDistance;//[Offset: 0x234, Size: 4]
	int BeDownTimes;//[Offset: 0x238, Size: 4]
	int BeSavedTimes;//[Offset: 0x23c, Size: 4]
	int PickUpAirDrops;//[Offset: 0x240, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x244, Size: 80]
	int Rank;//[Offset: 0x294, Size: 4]
	int TotalScore;//[Offset: 0x298, Size: 4]
	int ProneTimes;//[Offset: 0x29c, Size: 4]
	int CrouchTimes;//[Offset: 0x2a0, Size: 4]
	int JumpTimes;//[Offset: 0x2a4, Size: 4]
	int TouchDownAreaID;//[Offset: 0x2a8, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x2ac, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x2b0, Size: 12]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x2bc, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x2c8, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x2d4, Size: 12]
	GrenadeDamageRecord GrenadeDamageRecord;//[Offset: 0x2e0, Size: 28]
	KniveDamageRecord KniveDamageRecord;//[Offset: 0x2fc, Size: 32]
	int[] SecretAreaIDList;//[Offset: 0x31c, Size: 12]
	int KillNumInVehicle;//[Offset: 0x328, Size: 4]
	float TotalSprintDistance;//[Offset: 0x32c, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x330, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x334, Size: 4]
	int[] BuildFlow;//[Offset: 0x338, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x344, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x350, Size: 4]
	float HitShelterDamage;//[Offset: 0x354, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x358, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x364, Size: 12]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	int KillMonsterNum;//[Offset: 0x374, Size: 4]
	int LightCandleNum;//[Offset: 0x378, Size: 4]
	int KillMagicWalkAI;//[Offset: 0x37c, Size: 4]
	int SendMagicWalkAI;//[Offset: 0x380, Size: 4]
	float BattleStateTime;//[Offset: 0x384, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	<int,int> ActivityButtonCount;//[Offset: 0x38c, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x3c8, Size: 8]
	float TotalDamage;//[Offset: 0x3d0, Size: 4]
	int MeleeKillTimes;//[Offset: 0x3d4, Size: 4]
	float MeleeDamageAmount;//[Offset: 0x3d8, Size: 4]
	float RangedDamagedAmount;//[Offset: 0x3dc, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x3e0, Size: 4]
	int OpenAirDropBoxesNum;//[Offset: 0x3e4, Size: 4]
	int FollowState;//[Offset: 0x3e8, Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x3ec, Size: 12]
	int UseHelicoperNum;//[Offset: 0x3f8, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x3fc, Size: 4]
	int RevivalNum;//[Offset: 0x400, Size: 4]
	int BeRevivedNum;//[Offset: 0x404, Size: 4]
	int DrivingHelicopterTime;//[Offset: 0x408, Size: 4]
	int InHelicopterTime;//[Offset: 0x40c, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0x410, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0x414, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0x418, Size: 12]
	int KillSnowManCount;//[Offset: 0x424, Size: 4]
	<enum,int> EventCounterMap;//[Offset: 0x428, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0x464, Size: 60]
	TLog_Micphone MicphoneTlog;//[Offset: 0x4a0, Size: 24]
	int NormalItemNum;//[Offset: 0x4b8, Size: 4]
	int SeniorItemNum;//[Offset: 0x4bc, Size: 4]
	SpecialWeaponRecord[] SpecicalWeaponRecordList;//[Offset: 0x4c0, Size: 12]

--------------------------------
Class: GrenadeDamageRecord
	int HitCount;//[Offset: 0x0, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x4, Size: 12]
	GrenadeDamageRecordItem[] Grenades;//[Offset: 0x10, Size: 12]

--------------------------------
Class: GrenadeDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	int KnockNumber;//[Offset: 0x10, Size: 4]
	int AvatarID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: KniveDamageRecord
	int HeadShootCount;//[Offset: 0x0, Size: 4]
	int LimbsShootCount;//[Offset: 0x4, Size: 4]
	int BodyShootCount;//[Offset: 0x8, Size: 4]
	int HandShootCount;//[Offset: 0xc, Size: 4]
	int FootShootCount;//[Offset: 0x10, Size: 4]
	KniveDamageRecordItem[] Knives;//[Offset: 0x14, Size: 12]

--------------------------------
Class: KniveDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockNumber;//[Offset: 0xc, Size: 4]
	int AvatarID;//[Offset: 0x10, Size: 4]
	int TotalUseTime;//[Offset: 0x14, Size: 4]
	int TotalOwnTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SpecialWeaponRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: RealtimeVerifyInfo
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	int HitCountsNoAI;//[Offset: 0x10, Size: 4]
	int HeadshotCountsNoAI;//[Offset: 0x14, Size: 4]
	int ShotCounts;//[Offset: 0x18, Size: 4]
	int Kills;//[Offset: 0x1c, Size: 4]
	int PrisonBreaks;//[Offset: 0x20, Size: 4]
	int JumpMaxHeight2;//[Offset: 0x24, Size: 4]
	int SkeletonLengthCheckInvaildNum;//[Offset: 0x28, Size: 4]
	int MuzzleAndOwnerPosInVaildNum;//[Offset: 0x2c, Size: 4]
	int ImpactActorPosOffsetBigNum;//[Offset: 0x30, Size: 4]
	int TotalImpactCharacterNum;//[Offset: 0x34, Size: 4]
	int WeaponScopeHeightBigNum;//[Offset: 0x38, Size: 4]
	int WeaponScopeDisBigNum;//[Offset: 0x3c, Size: 4]
	int OwnerHeadAndMuzzleBlockNum;//[Offset: 0x40, Size: 4]
	int ImpactPointAndBulletDisBigNum;//[Offset: 0x44, Size: 4]
	int ShootVerifyInvalidNum;//[Offset: 0x48, Size: 4]
	float TotalSkeletonLengthMax;//[Offset: 0x4c, Size: 4]
	int TimeAccTimes;//[Offset: 0x50, Size: 4]
	int SpeedQuickCheck;//[Offset: 0x54, Size: 4]
	float ShootVerifyClientHitAABBCount;//[Offset: 0x58, Size: 4]
	float ShootVerifyDSAABBMissCount;//[Offset: 0x5c, Size: 4]
	float PlayerZ;//[Offset: 0x60, Size: 4]

--------------------------------
Class: HeartBeatData
	int AlivePlayerNum;//[Offset: 0x0, Size: 4]
	int AINum;//[Offset: 0x4, Size: 4]
	int MonsterNum;//[Offset: 0x8, Size: 4]
	int ConnectionNum;//[Offset: 0xc, Size: 4]
	int OnlineNum;//[Offset: 0x10, Size: 4]
	int HighPingNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BattlePlayer.Object
	uint64 UID;//[Offset: 0x20, Size: 8]
	PlayerInfoData PlayerInfoData;//[Offset: 0x28, Size: 160]
	PlayerAvatarData PlayerAvatarData;//[Offset: 0xc8, Size: 16]
	<int,WeaponDIYData> WeaponDIYData;//[Offset: 0xd8, Size: 60]
	BattleUtils* OwningBattleUtils;//[Offset: 0x114, Size: 4]
	GameModePlayerParams ExtractGameModePlayerParams();// 0x3f337c0

--------------------------------
Class: PlayerInfoData.ResponResult
	FString PlayerType;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint32 PlayerKey;//[Offset: 0x1c, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	byte PlayerGender;//[Offset: 0x21, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	int64 CampID;//[Offset: 0x28, Size: 8]
	int PlayerBornPointID;//[Offset: 0x30, Size: 4]
	GameModePlayerItem[] ItemList;//[Offset: 0x34, Size: 12]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x40, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x4c, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x58, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x64, Size: 48]
	int planeAvatarId;//[Offset: 0x94, Size: 4]
	int RolewearIndex;//[Offset: 0x98, Size: 4]

--------------------------------
Class: ResponResult
	bool bResponed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: PlayerAvatarData.ResponResult
	AvatarBackpack[] AvatarBackpackData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AvatarBackpack
	int[] WeaponAvatarList;//[Offset: 0x0, Size: 12]
	int[] VehicleAvatarList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponDIYData.ResponResult
	int WeaponId;//[Offset: 0x4, Size: 4]
	int PlanID;//[Offset: 0x8, Size: 4]
	DIYMergedTexData[] DIYData;//[Offset: 0xc, Size: 12]
	int[] MatParam;//[Offset: 0x18, Size: 12]
	int[] MirroParam;//[Offset: 0x24, Size: 12]
	int[] SlotMatParam;//[Offset: 0x30, Size: 12]

--------------------------------
Class: DIYMergedTexData
	DIYOneTexData[] TextureList;//[Offset: 0x0, Size: 12]
	int TexPathID;//[Offset: 0xc, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x10, Size: 48]
	int SlotID;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DIYOneTexData
	int TexPathID;//[Offset: 0x0, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x4, Size: 48]

--------------------------------
Class: DIYParamData
	int Direction;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	float Opacity;//[Offset: 0x8, Size: 4]
	float Rotation;//[Offset: 0xc, Size: 4]
	float ScaleX;//[Offset: 0x10, Size: 4]
	float ScaleY;//[Offset: 0x14, Size: 4]
	float OffSetX;//[Offset: 0x18, Size: 4]
	float OffSetY;//[Offset: 0x1c, Size: 4]
	float UClipX;//[Offset: 0x20, Size: 4]
	float UClipY;//[Offset: 0x24, Size: 4]
	float VClipX;//[Offset: 0x28, Size: 4]
	float VClipY;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BattleGameInfo
	uint64 GameID;//[Offset: 0x0, Size: 8]
	FString GameModeID;//[Offset: 0x8, Size: 12]
	int GameMapID;//[Offset: 0x14, Size: 4]
	int WeatherId;//[Offset: 0x18, Size: 4]
	FString WeatherName;//[Offset: 0x1c, Size: 12]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x328, Size: 1]
	uint32 AILevel;//[Offset: 0x32c, Size: 4]
	bool bMLAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	uint32 MLBotType;//[Offset: 0x334, Size: 4]

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleAIPlayer.BattlePlayer.Object
	GameModeAIPlayerParams ExtractGameModeAIPlayerParams();// 0x3f33c7c

--------------------------------
Class: GameModeStateChangedParams
	FName GameModeState;//[Offset: 0x0, Size: 8]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]
	int extend;//[Offset: 0x10, Size: 4]
	int Extend2;//[Offset: 0x14, Size: 4]
	FString MsgData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: UAAssistantInfoWrapper
	enum UAType;//[Offset: 0x0, Size: 1]
	int Result;//[Offset: 0x4, Size: 4]
	FString ExtraJson;//[Offset: 0x8, Size: 12]
	FString RetsultMsg;//[Offset: 0x14, Size: 12]

--------------------------------
Class: SDKCallbackInfoWrapper
	enum CallbackType;//[Offset: 0x0, Size: 1]
	FString CallbackParameter;//[Offset: 0x4, Size: 12]
	FString ExtraJson;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WakeupInfoWrapper
	<FString,FString> FWakeupInfoMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0, Size: 4]
	<FString,FString> friendsInfo;//[Offset: 0x4, Size: 60]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 4]
	int Flag;//[Offset: 0x4, Size: 4]
	int ErrorCode;//[Offset: 0x8, Size: 4]
	int PlatForm;//[Offset: 0xc, Size: 4]
	FString Desc;//[Offset: 0x10, Size: 12]
	NoschatGroupInfomation noschatGroupInfo;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: NoschatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 12]
	FString MemberNum;//[Offset: 0xc, Size: 12]
	FString ChatRoomURL;//[Offset: 0x18, Size: 12]

--------------------------------
Class: DownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]
	FString StringContent;//[Offset: 0x24, Size: 12]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: SettingSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bUseRegisterDelegateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	<FString,bool> CacheRegisterProperties_Bool;//[Offset: 0x24, Size: 60]
	<FString,int> CacheRegisterProperties_Int;//[Offset: 0x60, Size: 60]
	<FString,float> CacheRegisterProperties_Float;//[Offset: 0x9c, Size: 60]
	FString CachedSaveGameName;//[Offset: 0xd8, Size: 12]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0xe4, Size: 12]
	delegate GetUserSettingsDelegate;//[Offset: 0xf0, Size: 16]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x100, Size: 4]
	SaveGame* UserSettings;//[Offset: 0x104, Size: 4]
	class Object* UserSettingsClass;//[Offset: 0x108, Size: 4]
	FString UserSettingsClassName;//[Offset: 0x10c, Size: 12]
	FString ActiveSaveGameName;//[Offset: 0x118, Size: 12]
	FString LanguageSettingsClassName;//[Offset: 0x128, Size: 12]
	FString LanguageSaveGameName;//[Offset: 0x134, Size: 12]
	<FString,bool> LanguageMap;//[Offset: 0x188, Size: 60]
	bool UpdateCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x3fa4cd4
	bool SetUserSettings_String(FString PropertyName, FString Val);// 0x3fa4af0
	bool SetUserSettings_Int(FString PropertyName, int Value);// 0x3fa49e8
	bool SetUserSettings_Float(FString PropertyName, float Value);// 0x3fa48e0
	bool SetUserSettings_Bool(FString PropertyName, bool Value, bool IngoreSave);// 0x3fa4780
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x3fa4654
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x3fa4654
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x3fa4654
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x3fa45b0
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x3fa44ec
	FString GetUserSettings_String(FString PropertyName);// 0x3fa43a8
	int GetUserSettings_Int(FString PropertyName);// 0x3fa42e4
	float GetUserSettings_Float(FString PropertyName);// 0x3fa421c
	bool GetUserSettings_Bool(FString PropertyName);// 0x3fa4158
	SaveGame* GetUserSettings();// 0x3fa4130
	FString GetUserLanguageSettingsProperty_String(FString PropertyName);// 0x3fa3fec
	EffectSettingMgr* GetEffectSettingMgr();// 0x3fa3fc4
	SaveGame* GetCustomSetting(FString InSlotName);// 0x3fa3f00
	void FinishModifyUserSettings();// 0x3fa3eec
	void ClearCustomSetting();// 0x3fa3ed8
	void CheckLocalizationLanguage();// 0x3fa3ec4
	bool CheckChangeWithCache(Object* Source, Property* Property, FString PropertyName);// 0x3fa3cd4
	void CacheRegisterValue(Object* Source, Property* Property, FString PropertyName);// 0x3fa3aec
	void BeginModifyUserSettings();// 0x3fa3ad8
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x3fa39d8

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 12]
	SaveGame* SaveGame;//[Offset: 0xc, Size: 4]

--------------------------------
Class: EffectSettingMgr.Object
	FString SingleLayerColorTable;//[Offset: 0x1c, Size: 12]
	FString MultiLayerColorTable;//[Offset: 0x28, Size: 12]
	void UpdateSingleLayerColor(LinearColor Color);// 0x36c1858
	void UpdateMultiLayerColcor(FString Key, LinearColor Color);// 0x36c16b4
	void SetParticleSystemColorSingleLayer(ParticleSystemComponent* ParticleSystem);// 0x36c163c
	void SetParticleSystemColorMultiLayer(ParticleSystemComponent* ParticleSystem);// 0x36c15c4

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x380, Size: 12]
	delegate OnRenderQualitySettingsChanged;//[Offset: 0x38c, Size: 12]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x398, Size: 12]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x3a4, Size: 12]
	delegate OnCampRoomChanged;//[Offset: 0x3b0, Size: 12]
	delegate ScreenOrientationChangedNotify;//[Offset: 0x3bc, Size: 12]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x3c8, Size: 8]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x3d0, Size: 8]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x3d8, Size: 8]
	UserDetailSetting UserDetailSetting;//[Offset: 0x3e0, Size: 112]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47a, Size: 1]
	bool TemporaryFixedLobbyRenderSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47b, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 1]
	int iEnableRegionID;//[Offset: 0x480, Size: 4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x484, Size: 12]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x490, Size: 12]
	RenderItem[] LobbyRenderSettingsUltralHigh;//[Offset: 0x49c, Size: 12]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x4a8, Size: 12]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x4b4, Size: 12]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x4c0, Size: 12]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x4cc, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x4d8, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x4e4, Size: 12]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x4f0, Size: 12]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x4fc, Size: 12]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x508, Size: 12]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x514, Size: 12]
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x520, Size: 12]
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x52c, Size: 12]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x538, Size: 12]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x544, Size: 12]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x550, Size: 12]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x55c, Size: 12]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x568, Size: 12]
	FString[] RePairDeleteDir;//[Offset: 0x574, Size: 12]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x580, Size: 12]
	MaterialParametersStyle[] MaterialParametersStyleArray;//[Offset: 0x58c, Size: 12]
	ObjectPoolClassConfig[] ObjectPoolClassConfigs;//[Offset: 0x598, Size: 12]
	FName[] ObjectPoolIgnoringProperties;//[Offset: 0x5a4, Size: 12]
	Vector2D FOVRange;//[Offset: 0x5bc, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x5c4, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cd, Size: 1]
	float SwimRotateX;//[Offset: 0x5d0, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d4, Size: 1]
	FString[] BPGameSubsystemClassPath;//[Offset: 0x5d8, Size: 12]
	int ModeID;//[Offset: 0x5e4, Size: 4]
	FString ModType;//[Offset: 0x5e8, Size: 12]
	FString ModType2;//[Offset: 0x5f4, Size: 12]
	int MainModeID;//[Offset: 0x600, Size: 4]
	Actor* mInstanceActor;//[Offset: 0x604, Size: 4]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x620, Size: 4]
	ClientInGameReplay* ClientInGameReplay;//[Offset: 0x624, Size: 4]
	DeathPlayback* DeathPlayback;//[Offset: 0x628, Size: 4]
	CompletePlayback* CompletePlayback;//[Offset: 0x62c, Size: 4]
	ObservingReplay* ObservingReplay;//[Offset: 0x630, Size: 4]
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x634, Size: 4]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x638, Size: 4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x688, Size: 4]
	AvatarItemDownload* AssociatedAvatarItemDownload;//[Offset: 0x68c, Size: 4]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x690, Size: 12]
	float DefaultGray;//[Offset: 0x69c, Size: 4]
	int MoveInputsBitmapSize;//[Offset: 0x6e8, Size: 4]
	uint32[] MoveInputsBitmapData;//[Offset: 0x6ec, Size: 12]
	int MinValidMoveInputSampleCount;//[Offset: 0x6f8, Size: 4]
	int InvalidMoveInputSampleCount;//[Offset: 0x6fc, Size: 4]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x4a51734
	void VoiceSDKCampRoomChanged__DelegateSignature(enum CampRoomType);// 0x4a51734
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x4a51734
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x4a51734
	void UpdateWorldCullDistanceVolumes();// 0x3980664
	void SuperBattleWithPlayerName(FString IP, FString PlayerName, int PlayerKey);// 0x39804e0
	void SuperBattle(FString IP);// 0x3980388
	void ShowInstance(int IndexStart, int indexEnd, out Vector Location);// 0x398027c
	void SetWorldDoorCullDistance(int Distance);// 0x3980204
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x3980068
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x397ffac
	void SetWaterReflectionSetting(bool bDoOpen);// 0x397ff2c
	void SetUserVulkanSetting(bool Enable);// 0x397feac
	void SetUserSetingShadowQuality(bool bShadow);// 0x397fe2c
	void SetUserSetingMobilceContentSCale(float mcs);// 0x397fdb4
	bool SetSoundEffectQuality(int Type);// 0x397fd34
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x397fc88
	void SetModeID(int InModeID);// 0x397fc10
	void SetMainModeID(int ParamId);// 0x397fb98
	void SetKillZValue(float KillZ);// 0x397fb20
	void SetHZBMobileState();// 0x3592f9c
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x397faa8
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x397f900
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x397f758
	void ScreenOrientationChangedDelegate__DelegateSignature(int inScreenOrientation);// 0x4a51734
	void ReSetFOVScreenSizeCullingFactor();// 0x397f744
	void ReplaceAllInstance(int NumperTick, int tickTime, int typeNum, out Vector Location);// 0x397f5f0
	void RenderQualitySettingsChanged__DelegateSignature(RenderQualitySettings RenderQualitySettings);// 0x4a51734
	void RenderForLowFPS();// 0x397f5dc
	void RemovePPVBlendableMaterial(MaterialInterface* InMaterial);// 0x397f564
	void RemoveInstance(int IndexStart, int indexEnd, int tickTime);// 0x397f464
	void RefuseRenderForLowFPS();// 0x397f450
	void RefreshObjectPoolConfig();// 0x397f43c
	void QuitGame();// 0x397f428
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x397f328
	void PreLoadBPGameSubsystem();// 0x397f314
	void OpenHDR(bool bOpen);// 0x397f294
	void ObjectPoolServerSwitch(bool bOn);// 0x397f214
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x36dbb90
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x397f200
	bool IsViewedByReplay(const Actor* InActor);// 0x397f180
	bool isUsingAssumedNameInReplay();// 0x397f158
	bool IsSupportTagCulling();// 0x397f13c
	bool IsSupportSwitchSoundEffectQuality();// 0x397f114
	bool IsSupportSwitchRenderLevelRuntime();// 0x397f0ec
	bool IsSupportMSAA();// 0x397f0c4
	bool IsSupportLDR();// 0x397f09c
	bool IsRunningOnVulkan();// 0x397f074
	bool IsPVENightChangeCullDistance();// 0x397f04c
	bool IsPlayingObservingReplay();// 0x397f024
	bool IsOpenMSAA();// 0x397effc
	bool IsOpenHDROcean();// 0x397efd4
	bool IsOpenHDR();// 0x397efac
	bool IsObjectPoolEnabledByClassName(FName ClassName);// 0x397ef2c
	bool IsObjectPoolEnabled();// 0x397ef04
	bool IsIOSOneGigabyteDevice();// 0x370390c
	bool IsInTournamentMap();// 0x397eedc
	bool IsFoldingScreenDevice(float baseValue);// 0x397ee5c
	void HideInstance(int IndexStart, int indexEnd);// 0x397eda0
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x397ed78
	WonderfulPlayback* GetWonderfulPlayback();// 0x397ed50
	FString GetWeatherLevelName();// 0x397ec88
	int GetWeatherID();// 0x397ec58
	bool GetWaterReflectionSetting();// 0x397ec30
	bool GetUserVulkanSetting();// 0x397ec08
	bool GetUserSetingShadowQuality();// 0x397ebe0
	int GetUserQualitySettingLevel();// 0x397ebc4
	int GetSuppotMSAA();// 0x397eba8
	static FString GetSuperBattleParam();// 0x397eaf0
	int GetSoundEffectQuality();// 0x397eac8
	RenderQualitySettings GetRenderQualityLastSet();// 0x397ea70
	RenderQualitySettings GetRenderQualityApplying();// 0x397ea18
	ObservingReplay* GetObservingReplay();// 0x397e9f0
	FString GetModType2();// 0x397e930
	FString GetModType();// 0x397e870
	int GetModeID();// 0x397e848
	int GetMainModeID();// 0x397e820
	FString GetLoadWeatherName(FString InWeatherName);// 0x397e6d4
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x397e608
	bool GetIsFirstInitWaterReflectionSetting();// 0x397e5e0
	static STExtraGameInstance* GetInstance();// 0x397e5b8
	int GetExactDeviceLevel();// 0x397e590
	int GetDeviceUpdateVersionFlag();// 0x397e560
	FString GetDeviceProfilerLevel();// 0x397e4a0
	byte GetDeviceMaxSupportSoundEffect();// 0x397e478
	byte GetDeviceMaxSupportLevel();// 0x397e450
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel);// 0x397e3d0
	int GetDeviceLimit();// 0x397e3a8
	int GetDeviceLevel();// 0x36096c4
	bool GetDefaultSoundEffectQuality();// 0x397e380
	DeathPlayback* GetDeathPlayback();// 0x397e358
	FString GetCurrentRHI();// 0x397e298
	CompletePlayback* GetCompletePlayback();// 0x397e270
	ClientInGameReplay* GetClientInGameReplay();// 0x397e248
	AvatarItemDownload* GetAssociatedAvatarItemDownload();// 0x397e220
	bool GetApplyingShadowQuality();// 0x397e1f8
	FString GetActiveDeviceProfile();// 0x397e138
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x397dec8
	void EnableStreamingLevelLOD(bool bEnable);// 0x397de48
	void EnableObjectPoolByClassName(FName ClassName, bool Enable);// 0x397dd7c
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x397dc7c
	bool DeleteSavedFiles(bool allfilesSaved);// 0x397dbf4
	void CreativeDelegateCreated__DelegateSignature();// 0x4a51734
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x397db30
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x397da6c
	void ChangeLevelFXActor(FString LevelName, bool isLoad);// 0x397d964
	void ChangeCullDistanceVolume(bool UpdateCulldisImmediate);// 0x397d8e4
	void bHideGroundLevels(bool Disable);// 0x397d864
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x397d7e4
	void AutoActiveUltralHighRenderItems();// 0x397d7d0
	void AutoActiveLDR();// 0x397d7bc
	void AttachCameraViewToCharacter(STExtraBaseCharacter* Character);// 0x397d744
	void AddOrUpdatePPVBlendableMaterial(MaterialInterface* InMaterial, float InWeight);// 0x397d688
	void AddInstance(int NumperTick, int tickTime, int typeNum, out Vector Location);// 0x397d534
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x397d424
	void ActiveStyle_PP(byte Level);// 0x397d3a4
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x397d294
	void ActiveStyle(byte Level);// 0x397d214
	void ActiveNightVision(bool bSet);// 0x397d194
	void ActiveMSAA(bool bOpenMSAA, int MSAAValue);// 0x397d0cc
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x397cf68

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x1d8, Size: 264]
	delegate EnginePreTick;//[Offset: 0x2e0, Size: 12]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x330, Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x338, Size: 4]
	bool bStandAloneFromLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	delegate OnPreBattleResult;//[Offset: 0x358, Size: 12]
	FString[] HighWeatherNames;//[Offset: 0x36c, Size: 12]
	int HighWeatherMinRenderQuality;//[Offset: 0x378, Size: 4]
	int HighWeatherMaxRenderQuality;//[Offset: 0x37c, Size: 4]
	void SetLuaStateWrapper(LuaStateWrapper* TLuaStateWrapper);// 0x3c940e4
	void OpenAssetLoadLog();// 0x3592f9c
	void OnPreBattleResult__DelegateSignature();// 0x4a51734
	void LuaLeakDetect();// 0x3c940d0
	void LuaDoString(FString LuaString);// 0x3c94014
	float GetWeatherTime();// 0x3c93fe4
	FString GetWeatherLevelName();// 0x397ec88
	int GetWeatherID();// 0x397ec58
	LuaStateWrapper* GetLuaStateWrapper();// 0x3c93fbc
	FString GetLoadWeatherName(FString InWeatherName);// 0x397e6d4
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x397e608
	FString GetGameID();// 0x3c93ef0
	int GetDeviceLevel();// 0x36096c4
	UAEDataTable* GetDataTable_Mod(FString tableName);// 0x3c93e2c
	UAEDataTable* GetDataTable(FString tableName);// 0x3c93d68
	FrontendHUD* GetAssociatedFrontendHUD();// 0x3c93d40
	void CloseAssetLoadLog();// 0x3592f9c

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 12]
	uint64 RoleID;//[Offset: 0x10, Size: 8]
	FString GameSvrId;//[Offset: 0x18, Size: 12]
	FString GameAppID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	uint64 GameID;//[Offset: 0x48, Size: 8]
	FString BattleServerIP;//[Offset: 0x50, Size: 12]
	uint32 BattleServerPort;//[Offset: 0x5c, Size: 4]
	FString UserName;//[Offset: 0x60, Size: 12]
	FString PicUrl;//[Offset: 0x6c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x78, Size: 4]
	int[] MrpcsData;//[Offset: 0x80, Size: 12]
	<int,FString> AdvConfig;//[Offset: 0x90, Size: 60]
	<FString,Texture2D*> AdvTextureList;//[Offset: 0xcc, Size: 60]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int RenderMSAAValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 4]
	int TCQualityGrade;//[Offset: 0x4, Size: 4]
	int DeviceMaxSoundEffectLevel;//[Offset: 0x8, Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0xc, Size: 4]
	int UserQualitySetting;//[Offset: 0x10, Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 4]
	int IsOpenHDR;//[Offset: 0x18, Size: 4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int UserMSAAValue;//[Offset: 0x28, Size: 4]
	float UserMCSSetting;//[Offset: 0x2c, Size: 4]
	int UserShadowSetting;//[Offset: 0x30, Size: 4]
	int UserShadowSwitch;//[Offset: 0x34, Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x38, Size: 4]
	int PUBGLimitSetting;//[Offset: 0x3c, Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x40, Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x44, Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x48, Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x4c, Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x50, Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x54, Size: 4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x58, Size: 4]
	int PUBGDeviceFPSUltimateHigh;//[Offset: 0x5c, Size: 4]
	int PUBGDeviceFPSUltimateHighTA;//[Offset: 0x60, Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x68, Size: 4]
	int UserVulkanSetting;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 12]
	SwitchesItem[] Switches;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 12]
	float Value;//[Offset: 0xc, Size: 4]
	FString DependKey;//[Offset: 0x10, Size: 12]
	float DependValue;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 12]
	float RenderValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 1]
	FString[] PostProcessParams;//[Offset: 0x4, Size: 12]
	ACESParameter ACESParams;//[Offset: 0x10, Size: 40]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MaterialParametersStyle
	FString StyleName;//[Offset: 0x0, Size: 12]
	MaterialParameterFloat[] Floats;//[Offset: 0xc, Size: 12]
	MaterialParameterVector[] Vectors;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MaterialParameterFloat
	FName Name;//[Offset: 0x0, Size: 8]
	float Value;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MaterialParameterVector
	FName Name;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x1c, Size: 12]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28, Size: 12]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x6c, Size: 12]
	void StopRecord(bool bRankFirst);// 0x3b899f8
	void StartRecord();// 0x3b899e4
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x3b897a8
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x3b89674
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x3b89398
	void BuildOutputData();// 0x3b89384
	void BuildContinuousKillOutputData();// 0x3b89370

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	int KillNum;//[Offset: 0x8, Size: 4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte CaptureType;//[Offset: 0x1, Size: 1]
	byte ShootDamageType;//[Offset: 0x2, Size: 1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	float ShootDistance;//[Offset: 0x8, Size: 4]
	FString CauserName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte CaptureType;//[Offset: 0x9, Size: 1]
	byte ShootDamageType;//[Offset: 0xa, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ClientInGameReplay.GameReplay.Object
	bool bGWonderfulPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	int ConditionKillNums;//[Offset: 0x1bc, Size: 4]
	enum WonderfulKeepState;//[Offset: 0x1c0, Size: 1]
	bool bCanKeepReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	delegate OnClientRecordingStateChange;//[Offset: 0x1c4, Size: 12]
	DeathReplayData DeathReplayData;//[Offset: 0x1d0, Size: 232]
	BattleDeathPlaybackInfo BattleDeathPlaybackInfo;//[Offset: 0x380, Size: 108]
	BattleWonderfulInfo BattleWonderfulInfo;//[Offset: 0x3f0, Size: 56]
	LobbyWonderfulInfo LobbyWonderfulInfo;//[Offset: 0x428, Size: 160]
	void UpdatePlayerPVSVisibleTime(FString PlayerName);// 0x3679218
	void UpdatePlayerPVSInvisibleTime(FString PlayerName);// 0x367915c
	void SetSaveTimestamp(uint64 InCurrentTime);// 0x36790e0
	void SetGWonderfulPlaybackSwitch(bool bInSwitch);// 0x3679060
	void SetDeathReplayData(out const DeathReplayData ReplayData);// 0x3678f98
	void SetClientVersion(FString InAppVersion, FString InSrcVersion);// 0x3678e58
	void ResetPlayerPVSTime(FString PlayerName);// 0x3678d9c
	void ResetAllPlayerPVSTime();// 0x3678d88
	void OnPlayerRespawnNotify();// 0x3678d74
	void OnKillOrPutDownMessageEvent();// 0x3678d60
	void OnBattleResultStopRecordingNotify();// 0x3678d4c
	bool IsSwitchedOffByDevice();// 0x3678d24
	bool HaveWonderfulPlaybackData();// 0x3678cfc
	bool HaveDeathPlaybackData();// 0x3678cd4
	enum GetWonderfulKeepState();// 0x3678c94
	FString GetCompressedFileName();// 0x3678bd4
	int[] GetAllWonderfulPeriodType();// 0x3678b14
	void EnableWonderfulPlayback(bool bEnable);// 0x3678a94
	void EnableDeathPlayback(bool bEnable);// 0x3678a14
	void DeleteWonderfulPeriod(int PeriodIndex);// 0x367899c
	void ClearWonderfulPeriod();// 0x3678988
	bool CheckKillNumsCondition();// 0x3678960
	void AddWonderfulPeriod(int InWonderfulType, float InStartTime, float InEndTime, out const float[] InAdditionalData, int InPeriodIndex);// 0x367877c

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x30, Size: 4]
	class UserWidget* GMUIClass;//[Offset: 0x38, Size: 40]
	enum ReplayType;//[Offset: 0x60, Size: 1]
	delegate OnReplayReadyInitUIDelegate;//[Offset: 0x64, Size: 12]
	delegate OnReplayGotoTimeResetUIDelegate;//[Offset: 0x70, Size: 12]
	delegate OnReplayResetViewTargetDelegate;//[Offset: 0x7c, Size: 12]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0x120, Size: 4]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0x124, Size: 12]
	WeaponRecordDataForReplay[] RecordWeaponInfoDataArray;//[Offset: 0x130, Size: 12]
	MLAIInfoRecordData[] RecordMLAIInfoDataArray;//[Offset: 0x17c, Size: 12]
	PlayerEventInfoRecordData[] RecordPlayerEventInfoDataArray;//[Offset: 0x188, Size: 12]
	int64 ModInfoBatchMaxSize;//[Offset: 0x198, Size: 8]
	byte[] ModBinaryData;//[Offset: 0x1a0, Size: 12]
	bool StopRecordingReplay();// 0x3684a0c
	bool StopPlay();// 0x3658268
	bool StartRecordingReplay();// 0x36849c8
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x3716678
	bool SetReplayTimeDilation(float InDilation);// 0x37165f8
	void SetReplayStreamer(FString InReplayStreamer);// 0x3716460
	void SetIsGMSpectator(bool bGM);// 0x37163e4
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x371636c
	void SetCanChangeViewTarget(bool bCanChange);// 0x37162ec
	void ResetPlaybackData();// 0x37162d8
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x3716260
	void ReplayOnWeaponChanged();// 0x371624c
	void ReplayOnSimulatedWeaponChanged();// 0x3716238
	void ReplayOnBulletNumChanged();// 0x3716224
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x37161ac
	bool PlayReplay();// 0x371617c
	bool PauseReplay(bool bPaused);// 0x37160ec
	void LeaveFreeViewMode();// 0x35b61ac
	bool IsInRecordState();// 0x37160c4
	bool IsInPlayState();// 0x371609c
	bool IsGMSpectator();// 0x3716080
	bool IsFastForwarding();// 0x3716058
	bool HaveRecordingData();// 0x3716028
	void HandleChangeStatePC();// 0x3716014
	STExtraBaseCharacter* GetViewCharacter();// 0x3715fec
	SingleStrategyRecordFullInfo[] GetStrategyRecordArray(FString UID, int InStrategyTypeInReplay, bool bIsSort);// 0x3715e14
	FString GetSpectatorName();// 0x36aa108
	float GetReplayRecordStartTime();// 0x3715dec
	PlayerCameraManager* GetPlayerCameraManager();// 0x3715dc4
	float GetCurrentReplayTotalTimeInSeconds();// 0x3715d9c
	float GetCurrentReplayCurTimeInSeconds();// 0x3715d74
	bool GetCanChangeViewTarget();// 0x3715d4c
	void EnterFreeViewMode();// 0x35b64d4
	void CreateGMUIIfNotExists();// 0x3715d38
	void AddRecordPlayerEventInfo(FString PlayerUID, const uint32 EventType);// 0x3715c38
	void AddRecordMLAIInfo(uint32 InPlayerKey, uint64 InUID, byte InType, out const <FString,FString> InAdditionalData);// 0x3715a54

--------------------------------
Class: DeathReplayData
	bool IsValidDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsForCE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	FString SelfName;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint64 PlayerUID;//[Offset: 0x20, Size: 8]
	uint64 MLAIUID;//[Offset: 0x28, Size: 8]
	int DamageType;//[Offset: 0x30, Size: 4]
	int SubType;//[Offset: 0x34, Size: 4]
	FString CauseName;//[Offset: 0x38, Size: 12]
	FString CauseActionName;//[Offset: 0x44, Size: 12]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool IsSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool bIsDeliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	int AliasID;//[Offset: 0x54, Size: 4]
	FString AliasTitle;//[Offset: 0x58, Size: 12]
	FString AliasNation;//[Offset: 0x64, Size: 12]
	int AliasRank;//[Offset: 0x70, Size: 4]
	FString AliasPartnerName;//[Offset: 0x74, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x80, Size: 4]
	int AliasRankID;//[Offset: 0x84, Size: 4]
	int SegmentLevel;//[Offset: 0x88, Size: 4]
	float KDNum;//[Offset: 0x8c, Size: 4]
	int GameCount;//[Offset: 0x90, Size: 4]
	int WinCount;//[Offset: 0x94, Size: 4]
	int TopTenCount;//[Offset: 0x98, Size: 4]
	int KillNum;//[Offset: 0x9c, Size: 4]
	float Distance;//[Offset: 0xa0, Size: 4]
	DeathReplayHitInfo OtherHitInfo;//[Offset: 0xa4, Size: 32]
	DeathReplayHitInfo SelfHitInfo;//[Offset: 0xc4, Size: 32]

--------------------------------
Class: DeathReplayHitInfo
	float Damage;//[Offset: 0x0, Size: 4]
	int HitCount;//[Offset: 0x4, Size: 4]
	int HeadShoot;//[Offset: 0x8, Size: 4]
	int LimbsShoot;//[Offset: 0xc, Size: 4]
	int BodyShoot;//[Offset: 0x10, Size: 4]
	int HandShoot;//[Offset: 0x14, Size: 4]
	int FootShoot;//[Offset: 0x18, Size: 4]
	float GunHitRate;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BattleDeathPlaybackInfo
	float DeathPlaybackStartTime;//[Offset: 0x0, Size: 4]
	float DeathPlaybackEndTime;//[Offset: 0x4, Size: 4]
	float DeathPlaybackKeyTime;//[Offset: 0x8, Size: 4]
	bool bIsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float PVSVisibleBeforeKeyTime;//[Offset: 0x10, Size: 4]
	float PVSVisibleAfterKeyTime;//[Offset: 0x14, Size: 4]
	float PVSInvisibleBeforeKeyTime;//[Offset: 0x18, Size: 4]
	float PVSInvisibleAfterKeyTime;//[Offset: 0x1c, Size: 4]
	float LastNearDeathTime;//[Offset: 0x20, Size: 4]
	float FinalDeathTime;//[Offset: 0x24, Size: 4]
	float StartRecordingTime;//[Offset: 0x28, Size: 4]
	float StopRecordingTime;//[Offset: 0x2c, Size: 4]
	<FString,FString> AdditionData;//[Offset: 0x30, Size: 60]

--------------------------------
Class: BattleWonderfulInfo
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	FString OpenID;//[Offset: 0x1c, Size: 12]
	WonderfulPeriodInfo[] WonderfulPeriodInfoArray;//[Offset: 0x28, Size: 12]

--------------------------------
Class: WonderfulPeriodInfo
	float WonderfulStartTime;//[Offset: 0x0, Size: 4]
	float WonderfulEndTime;//[Offset: 0x4, Size: 4]
	int WonderfulPeriodIndex;//[Offset: 0x8, Size: 4]
	WonderfulTypeInfo WondefulTypeInfo;//[Offset: 0xc, Size: 16]

--------------------------------
Class: WonderfulTypeInfo
	enum WondefulType;//[Offset: 0x0, Size: 1]
	float[] AdditionalData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LobbyWonderfulInfo
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	uint64 SaveTimestamp;//[Offset: 0x10, Size: 8]
	FString ModeID;//[Offset: 0x18, Size: 12]
	int SegmentLevel;//[Offset: 0x24, Size: 4]
	float TotalTime;//[Offset: 0x28, Size: 4]
	WonderfulTypeInfo[] TypeInfoArray;//[Offset: 0x2c, Size: 12]
	FString AppVersion;//[Offset: 0x38, Size: 12]
	FString SrcVersion;//[Offset: 0x44, Size: 12]
	enum ErrorCode;//[Offset: 0x50, Size: 1]
	WonderfulWeSeeInfo[] WeSeeInfoArray;//[Offset: 0x54, Size: 12]
	<FString,FString> AdditionData;//[Offset: 0x60, Size: 60]

--------------------------------
Class: WonderfulWeSeeInfo
	float StartTime;//[Offset: 0x0, Size: 4]
	float EndTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0xde0, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xde4, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde8, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xdec, Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0xe28, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xe2c, Size: 4]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0xe30, Size: 12]
	delegate OnPlayerControllerTouchEnd;//[Offset: 0xe3c, Size: 12]
	delegate OnPlayerControllerTouchedStartInArea;//[Offset: 0xe48, Size: 12]
	delegate OnPlayerRotationChanged;//[Offset: 0xe54, Size: 12]
	int RotationChangedBroadcastInterval;//[Offset: 0xe64, Size: 4]
	delegate OnPlayerCameraChanged;//[Offset: 0xe68, Size: 12]
	int CameraChangedBroadcastInterval;//[Offset: 0xe78, Size: 4]
	delegate OnAvatarInfoRep;//[Offset: 0xe7c, Size: 12]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0xec8, Size: 60]
	float MinOBRelevancyJudgeDissquared;//[Offset: 0xf04, Size: 4]
	bool bGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf08, Size: 1]
	FName FeatureActorName;//[Offset: 0xf10, Size: 8]
	ValidTouchMoveFrameConfig[] ValidTouchMoveFrameConfig;//[Offset: 0xf18, Size: 12]
	ValidTouchMoveFrameConfig CurValidTouchMoveFrameConfig;//[Offset: 0xf24, Size: 24]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0xf3c, Size: 12]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0xf48, Size: 12]
	byte[] AddTouchMoveFingerArray;//[Offset: 0xf54, Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0xf61, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xf64, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xf68, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xf6c, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xf70, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xf74, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xf78, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xf7c, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xf80, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xf84, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xf88, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xf8c, Size: 4]
	Vector2D StartPosition;//[Offset: 0xf90, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xf98, Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xfa0, Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xfac, Size: 12]
	FString FollowCandidateName;//[Offset: 0xfbc, Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xfc8, Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0x1004, Size: 12]
	Rotator PCFreeCameraStartRotation;//[Offset: 0x1010, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0x1020, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0x1050, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0x1051, Size: 1]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1052, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1054, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0x1058, Size: 12]
	LinearColor CrossHairColor;//[Offset: 0x1064, Size: 16]
	byte AutoAimType;//[Offset: 0x1074, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107c, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107d, Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1088, Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1089, Size: 1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108a, Size: 1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0x108c, Size: 12]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0x1098, Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0x10a4, Size: 168]
	SensibilityConfig SensibilityConfig;//[Offset: 0x114c, Size: 236]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b0, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b1, Size: 1]
	int UseMotionControlType;//[Offset: 0x12b4, Size: 4]
	bool IsGyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b8, Size: 1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x12bc, Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0x12c8, Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x12d4, Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0x12e0, Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0x12ec, Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0x12f8, Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0x1304, Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0x1310, Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0x131c, Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0x1328, Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0x1334, Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0x1340, Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0x134c, Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x1358, Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x1364, Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1370, Size: 12]
	delegate OnShowHideSelfMarkDelegate;//[Offset: 0x137c, Size: 12]
	delegate OnShowAllTeammatePosDelegate;//[Offset: 0x1388, Size: 12]
	delegate OnShowAliasInfoDelegate;//[Offset: 0x1394, Size: 12]
	delegate OnCongregationFlagDelegate;//[Offset: 0x13a0, Size: 12]
	delegate OnTeamFollowStageChangeDelegate;//[Offset: 0x13ac, Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0x13b8, Size: 12]
	delegate OnHideFollowPanelAndBtnDelegate;//[Offset: 0x13c4, Size: 12]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x13d0, Size: 12]
	delegate OnRemindTeammateShoot;//[Offset: 0x13dc, Size: 12]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x13e8, Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0x13f4, Size: 12]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x1400, Size: 12]
	delegate OnNightBeggan;//[Offset: 0x140c, Size: 12]
	delegate OnNightEnded;//[Offset: 0x1418, Size: 12]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x1424, Size: 12]
	delegate OnPlayerSwitchToDeadBox;//[Offset: 0x1430, Size: 12]
	delegate OnShowFollowEmoteDelegate;//[Offset: 0x143c, Size: 12]
	delegate OnShowMovableEmoteDelegate;//[Offset: 0x1448, Size: 12]
	delegate OnCoopEmoteChange;//[Offset: 0x1454, Size: 12]
	delegate OnServerStateTypeChanged;//[Offset: 0x1460, Size: 12]
	int SelectedNightRenderConfig;//[Offset: 0x146c, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x1470, Size: 12]
	delegate OnInitCollectionData;//[Offset: 0x147c, Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0x1488, Size: 12]
	delegate OnPlayerEnterArea;//[Offset: 0x1494, Size: 12]
	delegate OnPlayerKilling;//[Offset: 0x14a0, Size: 12]
	delegate OnPickupItem;//[Offset: 0x14ac, Size: 12]
	delegate OnDropItem;//[Offset: 0x14b8, Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0x14c4, Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x14f0, Size: 128]
	delegate OnKillOrPutDownMessage;//[Offset: 0x1570, Size: 12]
	delegate OnStartFireEvent;//[Offset: 0x157c, Size: 12]
	delegate OnStopFireEvent;//[Offset: 0x1588, Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0x1594, Size: 12]
	delegate OnReleaseScreen;//[Offset: 0x15a0, Size: 12]
	delegate OnFingerMove;//[Offset: 0x15ac, Size: 12]
	delegate OnHandleCameraModeChanged;//[Offset: 0x15b8, Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0x15c4, Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x15d0, Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0x15dc, Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0x15e8, Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x15f4, Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0x1600, Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0x160c, Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0x1618, Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0x1624, Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x1630, Size: 12]
	delegate OnDamageToOther;//[Offset: 0x163c, Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1648, Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0x1654, Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0x1660, Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x166c, Size: 12]
	delegate OnRank;//[Offset: 0x1678, Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0x1684, Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0x1690, Size: 12]
	delegate OnRepPlayerState;//[Offset: 0x169c, Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0x16a8, Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x16b4, Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x16c4, Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0x16d0, Size: 12]
	delegate OnHideSkillPrompt;//[Offset: 0x16dc, Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x16e8, Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0x16f4, Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x1700, Size: 12]
	delegate OnPlayerChangePetDone;//[Offset: 0x170c, Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x1718, Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x1724, Size: 12]
	delegate OnConsumableAvatarChange;//[Offset: 0x1730, Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0x173c, Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x1748, Size: 12]
	delegate OnGameStateChange;//[Offset: 0x1754, Size: 12]
	delegate OnPlayerKilledOthersPlayer;//[Offset: 0x1760, Size: 12]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x176c, Size: 12]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x1778, Size: 12]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x1784, Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x1790, Size: 12]
	delegate OnSetViewTarget;//[Offset: 0x17a4, Size: 12]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x17b8, Size: 12]
	delegate OpenSequencerDelegate;//[Offset: 0x17c4, Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x17e0, Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x17e4, Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x17f0, Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x17fc, Size: 12]
	delegate OnPostTakeDamageDelegate;//[Offset: 0x1808, Size: 12]
	delegate OnPostTakeDamageForBP;//[Offset: 0x1814, Size: 12]
	delegate OnLostConnection;//[Offset: 0x1820, Size: 12]
	delegate OnReconnected;//[Offset: 0x182c, Size: 12]
	delegate OnExitGame;//[Offset: 0x1838, Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x1844, Size: 12]
	delegate OnSpectatorToFreeView;//[Offset: 0x1858, Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1864, Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1870, Size: 12]
	delegate MoveForwarDelegate;//[Offset: 0x187c, Size: 12]
	delegate MoveRightDelegate;//[Offset: 0x1888, Size: 12]
	delegate MoveUpDelegate;//[Offset: 0x1894, Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x18a0, Size: 4]
	int MaternalZombieWeight;//[Offset: 0x18a4, Size: 4]
	PVSComponent* PVSComponent;//[Offset: 0x18a8, Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x18ac, Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x18b0, Size: 4]
	SpectatorComponent* SpectatorComponent;//[Offset: 0x18b4, Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b8, Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x1a78, Size: 12]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x1a84, Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a94, Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a95, Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a96, Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a97, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a98, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x1a9c, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1aa0, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1aa4, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x1aa8, Size: 4]
	float GOOGLE_CameraMoveRateX;//[Offset: 0x1aac, Size: 4]
	float GOOGLE_CameraMoveRateY;//[Offset: 0x1ab0, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1ab4, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1ab8, Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1abc, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x1ac0, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1ae4, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1b08, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1b10, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1b18, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x1b3c, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x1b44, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x1b4c, Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x1b70, Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1bac, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1bb0, Size: 4]
	float MoveCameraMaxDistanceThreshold;//[Offset: 0x1bb4, Size: 4]
	<byte,int> PlayerClothLODLevel;//[Offset: 0x1bb8, Size: 60]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x1bf4, Size: 12]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c00, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c01, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1c08, Size: 4]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0c, Size: 1]
	byte CurCameraMode;//[Offset: 0x1c0d, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x1c10, Size: 12]
	FName AutoScopeAimCompName;//[Offset: 0x1c20, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1c28, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2c, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2d, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2e, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2f, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1c30, Size: 4]
	float CanMoveCDTime;//[Offset: 0x1c34, Size: 4]
	float CanSprintCDTime;//[Offset: 0x1c38, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1c3c, Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1c40, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x1c44, Size: 4]
	float AutoSprintFireRequestCD;//[Offset: 0x1c48, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4c, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1c50, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x1c5c, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x1c60, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1c64, Size: 60]
	bool bAutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca0, Size: 1]
	bool bAutoEquipMelleeWeaponLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca1, Size: 1]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca2, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca3, Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca4, Size: 1]
	bool bMelleeWeaponAutoCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca6, Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x1ca8, Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cac, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cad, Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x1cb0, Size: 8]
	float AccumulateYawInput;//[Offset: 0x1cb8, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x1cbc, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc0, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc1, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc2, Size: 1]
	float NoRespondArea;//[Offset: 0x1cc4, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x1cc8, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ccc, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ccd, Size: 1]
	byte sprintOptType;//[Offset: 0x1cce, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x1cd0, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x1cd4, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x1cd8, Size: 4]
	int JoystickSprintSensitity;//[Offset: 0x1cdc, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x1ce0, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce4, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x1ce5, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x1ce8, Size: 4]
	float AssistAreaHalfHeight;//[Offset: 0x1cec, Size: 4]
	float AssistAreaRadius;//[Offset: 0x1cf0, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf4, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x1cf8, Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x1d34, Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x1d38, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x1d3c, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1d40, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x1d44, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d48, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x1d4c, Size: 4]
	byte TouchFireType;//[Offset: 0x1d50, Size: 1]
	float TestForce;//[Offset: 0x1d54, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x1d58, Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x1d64, Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d70, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d71, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d72, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d73, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x1d74, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x1d78, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x1d7c, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x1d80, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x1d84, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1d88, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8c, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x1d90, Size: 4]
	float MinFovChangeView;//[Offset: 0x1d94, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1d98, Size: 32]
	int GameTipMsgID;//[Offset: 0x1db8, Size: 4]
	FString GameTipParam1;//[Offset: 0x1dbc, Size: 12]
	FString GameTipParam2;//[Offset: 0x1dc8, Size: 12]
	float AutoSprintCD;//[Offset: 0x1e10, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x1e14, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x1e50, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x1e8c, Size: 60]
	float TeamInfoForceUpdateInterval;//[Offset: 0x1ecc, Size: 4]
	float MaxDeltaYawBetweenControlAndActor;//[Offset: 0x1ed0, Size: 4]
	bool bWaistFollowingController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed4, Size: 1]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1ef0, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1fb8, Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x1fbc, Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1fc0, Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1fc4, Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x2010, Size: 4]
	bool bTempDeadBoxIgnoreTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2014, Size: 1]
	FString[] ForbitPickList;//[Offset: 0x2018, Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2030, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x2034, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2038, Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2039, Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x203c, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x2040, Size: 4]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x2044, Size: 12]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2050, Size: 1]
	float FreeViewUpRate;//[Offset: 0x2054, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x2058, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x205c, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2060, Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2061, Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x2064, Size: 12]
	bool bSyncMLAIStateInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2070, Size: 1]
	bool bNeedUpdateAITeamMateState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2071, Size: 1]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x2074, Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2088, Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x2089, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208a, Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208b, Size: 1]
	byte CurSightZoomFingerIndex;//[Offset: 0x20d4, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x20d5, Size: 1]
	byte ValidTouchMove;//[Offset: 0x2118, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x2144, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x21d0, Size: 4]
	BackpackRepActor* BackpackRepActor;//[Offset: 0x21d4, Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x21d8, Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x21dc, Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x21e0, Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x21e4, Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x21e8, Size: 4]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x21f0, Size: 12]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2209, Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x220a, Size: 1]
	delegate OnOBPlayerItemChangedDelegate;//[Offset: 0x220c, Size: 12]
	delegate OnOBPlayerWeaponChangedDelegate;//[Offset: 0x2218, Size: 12]
	delegate OnOBPlayerBulletChangedDelegate;//[Offset: 0x2224, Size: 12]
	delegate OnViewTargetAttachedToVehicleDelegate;//[Offset: 0x2230, Size: 12]
	delegate OnViewTargetDetachedFromVehicleDelegate;//[Offset: 0x223c, Size: 12]
	BattleItemSpectatingData[] ObservedItemList;//[Offset: 0x2264, Size: 12]
	bool bIsSendingObserveReq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2270, Size: 1]
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x22b0, Size: 12]
	delegate OnSetObserveCharacter;//[Offset: 0x22bc, Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x22c8, Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x22d4, Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x22e0, Size: 12]
	bool bIsCheckLevelStreamingReturnBeforeFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22ec, Size: 1]
	bool bIsLevelLoadedSetGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22ed, Size: 1]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x22f0, Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22fc, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x2300, Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x2310, Size: 4]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x2314, Size: 4]
	AIPlayerInfoInOB[] NearAIPlayerList;//[Offset: 0x2318, Size: 12]
	FString TPPFollowAIPlayerKey;//[Offset: 0x2328, Size: 12]
	<FString,AllStarReportData> AllStarReportInfoCache;//[Offset: 0x2334, Size: 60]
	ObservedData ObservedData;//[Offset: 0x2370, Size: 72]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c5, Size: 1]
	delegate OnToggleOBMapShowHide;//[Offset: 0x23cc, Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x23d8, Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x23ec, Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x23f8, Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x2404, Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x2410, Size: 12]
	delegate WeaponEquipAttachment;//[Offset: 0x241c, Size: 12]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x2428, Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x2434, Size: 12]
	delegate OnOBVehicleViewChangedDelegate;//[Offset: 0x2440, Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x245c, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x2460, Size: 4]
	bool IsSmoothlyVehicleViewSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2470, Size: 1]
	bool NeedCheckChangeToVehicleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2471, Size: 1]
	CurveVector* OBVehicleViewArmOffset;//[Offset: 0x2474, Size: 8]
	int OBVehicleViewAcceRecordsNum;//[Offset: 0x247c, Size: 4]
	class CameraShake* OnHitCameraShake;//[Offset: 0x248c, Size: 4]
	CurveVector* OBVehicleImpulseClamp;//[Offset: 0x2498, Size: 8]
	CurveFloat* OBVehicleImpulseRollClamp;//[Offset: 0x24a0, Size: 8]
	float CurrentOBVehicleViewArmLength;//[Offset: 0x24a8, Size: 4]
	float OBVehicleViewArmLengthMax;//[Offset: 0x24ac, Size: 4]
	float OBVehicleViewArmLengthMin;//[Offset: 0x24b0, Size: 4]
	Vector OBVehicleRelativeLocation;//[Offset: 0x24b4, Size: 12]
	float OBVehicleViewFOV;//[Offset: 0x24c0, Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x24c8, Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x24cc, Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24cd, Size: 1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ce, Size: 1]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x24d0, Size: 12]
	delegate OnLiveStateChanged;//[Offset: 0x24dc, Size: 12]
	int FireMode;//[Offset: 0x24e8, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ec, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ed, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ee, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ef, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x24f0, Size: 12]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x24fc, Size: 12]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2508, Size: 12]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x2514, Size: 12]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x2520, Size: 12]
	Actor*[] nowGrenadeList;//[Offset: 0x252c, Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2538, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x253c, Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x2548, Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2554, Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2560, Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x256c, Size: 12]
	delegate tirggerLandingVoiceCheckDelegate;//[Offset: 0x2578, Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2584, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x2588, Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x2594, Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a0, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x25a4, Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x25b0, Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25bc, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x25c0, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x25c4, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x25c8, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x25cc, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x25d0, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x25e0, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x25fc, Size: 20]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x2610, Size: 12]
	Actor* ThePlane;//[Offset: 0x261c, Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x2628, Size: 4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x262c, Size: 12]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x2638, Size: 12]
	delegate OnNotifyServerOpenAnyPickUpBox;//[Offset: 0x2644, Size: 12]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2650, Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x2654, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x2670, Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x2680, Size: 4]
	FString LastBreathMurder;//[Offset: 0x2688, Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2694, Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x2698, Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x26a0, Size: 4]
	FString murderName;//[Offset: 0x26a4, Size: 12]
	FString FinalMurderName;//[Offset: 0x26b0, Size: 12]
	uint64 MurderUID;//[Offset: 0x26c0, Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c8, Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c9, Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ca, Size: 1]
	bool bDisableItemOperationSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ff, Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x2710, Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x274c, Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x2790, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x2794, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x2798, Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x279c, Size: 60]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d8, Size: 1]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x28ac, Size: 4]
	AkAudioEvent* HitVehicleSoundFlesh;//[Offset: 0x28b0, Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b4, Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x28b8, Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x2900, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2904, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x2908, Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290c, Size: 1]
	enum ServerStateType;//[Offset: 0x290d, Size: 1]
	enum ClientStateType;//[Offset: 0x290e, Size: 1]
	enum GameStateMsgType;//[Offset: 0x290f, Size: 1]
	enum LastStateType;//[Offset: 0x2913, Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2917, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2918, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2919, Size: 1]
	float ObservingTime;//[Offset: 0x291c, Size: 4]
	KillerTracker* KillerCameraTracker;//[Offset: 0x2920, Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2934, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2935, Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x2944, Size: 4]
	FString DefaultHUDClassPath;//[Offset: 0x2948, Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x2968, Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x2974, Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2978, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2979, Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x297c, Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x2980, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x2984, Size: 56]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x29bc, Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x29c8, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x29cc, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x29d0, Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x2a0c, Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x2a4c, Size: 4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x2a50, Size: 12]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x2a5c, Size: 60]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x2ab0, Size: 4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x2ab4, Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x2ab8, Size: 4]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x2ae4, Size: 12]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x2af0, Size: 12]
	delegate SetCaptureIDCardStatusDelegate;//[Offset: 0x2b00, Size: 16]
	delegate OnPlayerExitGameDelegate;//[Offset: 0x2b10, Size: 12]
	delegate OnEnterVehicleDelegate;//[Offset: 0x2b2c, Size: 12]
	delegate ClientOnEnterVehicle;//[Offset: 0x2b38, Size: 12]
	delegate ClientOnLeaveVehicle;//[Offset: 0x2b44, Size: 12]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x2b50, Size: 12]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x2b5c, Size: 12]
	delegate ClientOnDeathReplayDataWhenFatalDamagedDelegate;//[Offset: 0x2b68, Size: 12]
	delegate OnViewTargetChange;//[Offset: 0x2b7c, Size: 12]
	delegate OnPreViewTargetChange;//[Offset: 0x2b88, Size: 12]
	delegate OnImprisonStateChange;//[Offset: 0x2b94, Size: 12]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba0, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba1, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x2ba4, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x2ba8, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x2bb4, Size: 8]
	int IdCardMarkType;//[Offset: 0x2bc0, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bca, Size: 1]
	int VehicleControlMode;//[Offset: 0x2bcc, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd0, Size: 1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x2bd4, Size: 12]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x2be0, Size: 12]
	float StreamingDistanceScaleFlying;//[Offset: 0x2bec, Size: 4]
	bool bClearWeaponRecordOnPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf0, Size: 1]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf1, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x2bf4, Size: 12]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c00, Size: 1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x2c04, Size: 12]
	float MoveDistanceThreshold;//[Offset: 0x2c10, Size: 4]
	float SpeedRecordTime;//[Offset: 0x2c14, Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x2c18, Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x2c1c, Size: 12]
	delegate OnChangeToWalkingDead;//[Offset: 0x2c28, Size: 12]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c34, Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x2c38, Size: 12]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x2c44, Size: 12]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c50, Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c51, Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x2c54, Size: 12]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x2c60, Size: 12]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x2c6c, Size: 12]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x2c78, Size: 12]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x2c84, Size: 12]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x2c90, Size: 4]
	uint32 LastKillerKey;//[Offset: 0x2c94, Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c98, Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c99, Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca4, Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca5, Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca6, Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x2ca8, Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x2cac, Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x2cb8, Size: 12]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x2cc4, Size: 12]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd0, Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x2cd4, Size: 12]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x2ce0, Size: 12]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x2cec, Size: 12]
	delegate OnMemberVoiceDelegate;//[Offset: 0x2cf8, Size: 12]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x2d04, Size: 12]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x2d10, Size: 12]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x2d1c, Size: 12]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x2d28, Size: 12]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x2d34, Size: 12]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x2d40, Size: 4]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x2d58, Size: 12]
	<byte,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x2d64, Size: 60]
	enum CurrentWeaponFunction;//[Offset: 0x2da0, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x2da4, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da8, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x2dac, Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x2db0, Size: 4]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc0, Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd0, Size: 1]
	double LastFlyLeapPlatfromTime;//[Offset: 0x2e10, Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e54, Size: 1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e55, Size: 1]
	bool InWateringRange_bp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e56, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x2e58, Size: 60]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x2ea8, Size: 16]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x2eb8, Size: 16]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x2ec8, Size: 48]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef8, Size: 1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2efa, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2efb, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x2efc, Size: 4]
	float ParachuteSlideReportDuration;//[Offset: 0x2f04, Size: 4]
	float ParachuteReportLocationDiffSq;//[Offset: 0x2f08, Size: 4]
	ParachuteData ParachuteData;//[Offset: 0x2f10, Size: 128]
	float TrustClientSinceEnterParachuteJump;//[Offset: 0x2f98, Size: 4]
	float ClientParachuteLandedFinishTimeMax;//[Offset: 0x2fa0, Size: 4]
	VehicleMoveDragData DragData;//[Offset: 0x2fb0, Size: 24]
	float ReportSimulatedDragInterval;//[Offset: 0x2fc8, Size: 4]
	delegate OnTeammateRescueStateChanged;//[Offset: 0x2fd4, Size: 12]
	TimerHandle LocalRescueEndedTimer;//[Offset: 0x2fe0, Size: 8]
	delegate OnSwimDistanceChange;//[Offset: 0x2ffc, Size: 12]
	ScreenAppearanceActor* ScreenAppearanceMgr;//[Offset: 0x3008, Size: 4]
	bool bIsInFreeBuildState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3010, Size: 1]
	PlayerPetSpectatorComponent* PetSpectatorComp;//[Offset: 0x3014, Size: 4]
	CacheSACData[] CacheSACDataArray;//[Offset: 0x3020, Size: 12]
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x39f9e80
	void ViewPlane();// 0x39f9e6c
	void VehicleWarOpenSequencerDelegate__DelegateSignature(out const BattleOpenSequencerInfo SequencerInfo);// 0x4a51734
	void VehicleWarFireTakeDamagedEvent(Vector CauserLocation, Actor* DamageCauser, float Damage);// 0x39f9d6c
	bool UseSharedBagSkin();// 0x39f9d3c
	void UserDropItemOperation(ItemDefineID DefineID);// 0x39f9cb4
	void UseItem(int ID);// 0x39f9c3c
	void UpdateTeammatesStreaming();// 0x39f9c20
	void UpdateSurfboardUI();// 0x39f9c0c
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x39f9b8c
	void UpdatePoseViewPitchLimit();// 0x39f9b78
	void UpdatePoseState(byte PoseType);// 0x39f9b00
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x39f9a38
	void UnPossess();// 0x39f9a1c
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x39f987c
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x39f95cc
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x39f96d4
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x39f95cc
	void TriggerLandingVoiceCheckFuction(Vector posVector, float showTime);// 0x39f9510
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x39f9510
	void TPPFollowAI(FString AIPlayerKey);// 0x35c75b4
	void TouchMove(Vector Loc, byte FingerIndex);// 0x39f9454
	bool TouchEnd(byte PressType);// 0x39f93d4
	void TouchBegin(byte PressType);// 0x39f935c
	void ToggleOBVehicleView();// 0x39f9348
	void ToggleOBTPPFollowFreeView();// 0x39f9334
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x39f92b4
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x39f91d8
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, float HealthMax, int VoiceID);// 0x39f8fb0
	void SyncSimulateCharacterLocation(STExtraBaseCharacter* TargetCharacter, Vector Location);// 0x39f8eec
	void SwitchToTeamByNumPressed();// 0x39f8ed8
	void SwitchToPlayerByNumPressed();// 0x39f8ec4
	void SwitchToDeadBox();// 0x39f8eb0
	void SwitchShowUI();// 0x39f8e9c
	void SwitchPoseStateWithTransformServer(STExtraBaseCharacter* TargetCharacter, byte PoseState, Vector Position, Rotator Rotation);// 0x39f8ce8
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x39f8bec
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState, enum FailReason);// 0x39f8a9c
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x39f89d8
	void SwitchMouseCursorShowState();// 0x39f89c4
	void SwitchGenerateItem();// 0x39f8968
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x39f88ac
	void SwitchCameraModeByOrder();// 0x39f8898
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x39f873c
	void SwimDistanceDelegate__DelegateSignature(float Distance);// 0x4a51734
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x39f8634
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x39f855c
	void StopAbsorb();// 0x39f8500
	void StartLandOnGroundAfterJumpPlane();// 0x39f84ec
	void StartGame();// 0x39f84d8
	void StartFreeCamera(byte FigerIndex);// 0x39f8460
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x39f8398
	void SpawnGameFeatureActor(FString Path);// 0x39f82dc
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x39f81dc
	void SpawnAIPosi(int ID, int AITeamID, float PosiX, float PosiY, float PosiZ);// 0x39f804c
	void SpawnAI(int Num, bool bSpawnAll);// 0x39f7f88
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x39f7f10
	bool SkipChangeViewTarget();// 0x39f7ee0
	void ShutDownBroadcastFatalDamage(bool IsOpen);// 0x363b278
	void ShowStringMsg(const FString Message, int MsgID, int ItemId, FString PlayerKeyString);// 0x39f7c78
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x39f7b34
	void ShowMovePath(const Vector[] Path);// 0x39f7a70
	void ShowGameTips(int TipsID, FString Params);// 0x39f7968
	void ShowFireBtn(bool bShow);// 0x4a51734
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x39f78a0
	void ShowAnimationButton(bool IsShow, int NewUIType);// 0x39f77d0
	bool ShouldShowVoiceVisualizationForTrainingMode();// 0x39f77a0
	bool ShouldShowVoiceVisualizationForSameTeam(Pawn* Other);// 0x39f7718
	bool ShouldSendFatalDamageToClient(UAECharacter* Causer, UAECharacter* Victim);// 0x39f764c
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x39f75cc
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x39f754c
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x39f74cc
	void SetVirtualJoystickWidgetRender(enum Visible);// 0x39f7454
	void SetViewYawLimit(float YawMin, float YawMax);// 0x39f7398
	void SetViewTargetTest(Actor* NewViewTarget);// 0x39f7320
	void SetViewPitchLimit(float PitchMin, float PitchMax);// 0x39f7264
	void SetTouchFingerIndex(bool TouchBegin, byte FingerIndex);// 0x39f719c
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x39f708c
	void SetSTExtraBaseCharacter(STExtraBaseCharacter* InChar);// 0x39f7014
	void SetSpectatorPawnLotation(out const Vector NewLocation);// 0x39f6f90
	void SetSkillFingerIndex(byte FingerIndex);// 0x39f6f18
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x39f6e98
	void SetShoulderFingerIndex(bool TouchBegin, byte FingerIndex);// 0x39f6dd0
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x39f6d08
	void SetPlayerMark(Vector Loc);// 0x39f6c5c
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x39f6a9c
	void SetPlane(Actor* Plane);// 0x39f6a24
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x39f6910
	void SetParachuteAnimCached(byte AnimOverrideType, bool InValue);// 0x39f684c
	void SetOBVehicleView(bool IsActive);// 0x39f67cc
	void SetObservingTime(float Time);// 0x39f6754
	void SetMovable(bool IsMovable);// 0x39f66d4
	void SetLocalUnPossesTest(bool bControllerSide, bool bPawnSide);// 0x39f6604
	void SetLaunchFlyStateOnServer(enum StateType);// 0x39f658c
	void SetLaunchFlyState(enum StateType);// 0x39f6514
	void SetJoyStickScale(float JSScale);// 0x39f649c
	void SetJoyStickPtrFireMode(int FireMode);// 0x39f6424
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x39f6368
	void SetJoyStickOpacityNotUpdate(float JSOpacity);// 0x39f62f0
	void SetJoyStickOpacity(float JSOpacity);// 0x39f6278
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x39f6208
	void SetJoyStickCenter(Vector2D JSCenter);// 0x39f6198
	void SetIsSnowy(bool bSnowy);// 0x39f6118
	void SetIsShowBlood(bool InIsShowBlood);// 0x39f6098
	void SetIsRainy(bool bRainy);// 0x39f6018
	void SetIsCacheReceiveRespawnZombie(bool isReceive);// 0x39f5f98
	void SetIsBlizzard(bool bBlizzard);// 0x39f5f18
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x39f5e90
	void SetHasResultState(bool InState);// 0x39f5e10
	void SetGhostValue(bool OutValue);// 0x39f5d90
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x39f5c2c
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x39f5b68
	void SetDisableTouchMoveInput(bool bDisable);// 0x39f5ae8
	void SetCustomSensibility(int WeaponId, int AttrIndex, float Value);// 0x39f59e8
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x39f58a0
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x39f57a4
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x39f568c
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList, int WeaponSyncTicket);// 0x39f5508
	void SetCircleInfoToClient(GetCircleInfo ReConnectInfo);// 0x39f5378
	void SetCaptureIDCardStatusDelegate__DelegateSignature(bool IsCapture);// 0x4a51734
	void SetCanJump(bool CanJump);// 0x39f52f8
	void SetCanGotoExPlane(bool bFlag);// 0x39f5278
	void SetCanDropItem(bool bCanDrop);// 0x39f51f8
	void SetBeKickedPlayerName(FString InPlayerName);// 0x39f50a0
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x39f4fd8
	void SetAllStarReportDataByOpenID(FString InPlayerOpenID, out AllStarReportData InReportData);// 0x39f4ec4
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x39f4d18
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x39f4bb0
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x39f4afc
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x39f4a48
	void ServerTriggerCharacterSkillWithID(int SkillID, bool bEnable);// 0x39f4938
	void ServerTriggerCharacterCustomEvent(byte SkillEvent, int SkillID);// 0x39f483c
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x39f4688
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x39f4348
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x39f4008
	void ServerStopFillGas(STExtraShootWeapon* TargetWeapon);// 0x39f3f54
	void ServerStateTypeChanged__DelegateSignature(enum ServerStateType);// 0x4a51734
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x39f3e58
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x39f3bb0
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x39f39cc
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x39f3888
	void ServerStartFillGas(STExtraShootWeapon* TargetWeapon);// 0x39f37d4
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x39f36d8
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x39f3624
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte ShootType);// 0x39f3528
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x39f33e4
	void ServerSetObsverLocation(const Vector locat);// 0x39f3338
	void ServerSetIsFreeView(bool isFreeView);// 0x39f3270
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x39f315c
	void ServerSetFreeCamera(Rotator InRotation);// 0x39f30b0
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x39f2f9c
	void ServerSetControlRotation(const Rotator NewRotation);// 0x39f2ef0
	void ServerSendLogToLobby(FString ErrorLog);// 0x39f2e34
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x39f2cc8
	void ServerReportVehicleDrag(const VehicleMoveDragData InDragData);// 0x39f2bd4
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x39f2970
	void ServerRemoteDestroyAllActor();// 0x39f2958
	void ServerRemoteDestroyActor(int SingleId);// 0x39f28e0
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x39f2784
	void ServerReceiveThePlane(int64 TimeStamp);// 0x39f26cc
	void ServerQuitSpectating();// 0x39f2670
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x39f2384
	void ServerOpenParachute();// 0x39f2328
	void ServerObserveKiller();// 0x39f22cc
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x39f2218
	void ServerObserveAirDropBox(int BoxId);// 0x39f2164
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x39f2054
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x39f1fa0
	void ServerJumpFromPlane();// 0x39f1f44
	void ServerInterruptGame();// 0x39f1ee8
	void ServerInternalSetTeammateForbidPick(bool bIsForbid, int TLogIndex);// 0x39f1e20
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x39f1d2c
	void ServerHandleMsg(enum Msg);// 0x39f1c78
	void ServerHandleHitDataArrayFlowOpt(STExtraShootWeapon* TargetWeapon, SACData AntiCheatData, const BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray);// 0x39f1a54
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x39f1908
	void ServerHandleExtraHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData, const HitTargetExtraData[] HitExtraDataArray);// 0x39f1734
	void ServerGetTotalPlayers();// 0x39f16d8
	void ServerGetPlayerAliasInfoList();// 0x39f167c
	void ServerGetCircleInfo();// 0x39f1620
	void ServerFight();// 0x39f15c4
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x39f1510
	void ServerExitFromFlyingVehicle(STExtraVehicleBase* ExitVehicle, float NewOpenParachuteHeight, float NewCanOpenParachuteHeight, float NewForceOpenParachuteHeight, float NewCloseParachuteHeight, bool bIsInSkipOpenParachuteHeight);// 0x39f12cc
	void ServerExitFreeCamera();// 0x39f1270
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x39f110c
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x39f0ffc
	void ServerDoPickupRevivalFlag();// 0x39f0fa0
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x39f0e84
	void ServerControlFireBalloonMoveEx(STExtraFireBalloon* FireBalloon, float MoveUpValue, float MoveForwardValue, float MoveRightValue);// 0x39f0cf0
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x39f0bf4
	void ServerCMD_RPC(FString Cmd);// 0x39f0b00
	void ServerCMD(FString Cmd);// 0x35c75b4
	void ServerClearTeammatesCache();// 0x39f0aa4
	void ServerChangeWeaponScheme(int Index);// 0x39f09f0
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x39f093c
	void ServerChangeVehicleAvatar(const int AvatarID);// 0x39f0888
	void ServerChangeStatePC(enum TargetStateType);// 0x39f0810
	void ServerChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x39f06ac
	void ServerAutoSwitchSameSlotWeapon(byte CurrentSlot);// 0x39f0634
	void SendWeaponInfoToOB(out OBPlayerWeaponRecord[] WeaponReport);// 0x39f0500
	void SendStringWithMsgID(FString Message, int MsgID, FString PlayerKeyString);// 0x39f037c
	void SendStringMsgWithTransform(FString Message, int MsgID, int ItemId, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x39f00d4
	void SendStringMsg(FString Message, int MsgID, int ItemId, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x39efe2c
	void SendStringDirect(FString Message);// 0x39efd70
	void SendLogToLobbyOnece(byte LogType);// 0x39efcf8
	void SendGameStateInitOK();// 0x39efc9c
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x39efbd0
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x39efa54
	void SendCustomMsg(FString Message, int MsgExtraParam, bool bSTTMsg);// 0x39ef908
	void S2C_ResponseSkillPrompt(int PromptID, float PastTime);// 0x39ef80c
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime, float RemainingRescueTotleTime);// 0x39ef664
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime, float RemainingRescueTotleTime);// 0x39ef4bc
	void RunOnNextFrameEvent();// 0x39ef4a8
	void RunOnNextFrame__DelegateSignature();// 0x4a51734
	void RspGetVehiclePos(STExtraVehicleBase* SimVehicle, Vector Pos);// 0x39ef3e4
	void RPC_ServerRefreshMaxBulletNum(STExtraShootWeapon* TargetWeapon);// 0x39ef330
	void RPC_Server_VehicleWarSetPlayerHasLogin();// 0x39ef2d4
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x39ef150
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x39eede0
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x39eead0
	void RPC_Server_ShootMultiEnergyAccumulateProjectileBulletsSimulate(STExtraShootWeapon* TargetWeapon, const ShootMultiBulletsParam[] LaunchParams, float CurAccEnergyPercent);// 0x39ee94c
	void RPC_Server_ShootGrenadeBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x39ee640
	void RPC_Server_SetRemainBoxIsSearched(PlayerRemainTombBox* RemainBox);// 0x39ee58c
	void RPC_Server_SetPlayerStateChoose(int choose);// 0x39ee4d8
	void RPC_Server_SetMicphoneTLogToServer(const TLog_Micphone MicphoneTlog);// 0x39ee414
	void RPC_Server_SendLog(FString ErrorLog);// 0x39ee320
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x39ee2c4
	void RPC_Server_ReqHealth();// 0x39ee268
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x39ee174
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x39ee07c
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x39edea0
	void RPC_Server_PrintHP();// 0x39ede44
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x39edd48
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x39edc94
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x39edbe0
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x39edad0
	void RPC_Server_NotifyServerPetNotDownload(int PetId);// 0x39eda1c
	void RPC_Server_NotifyServerOpenAnyPickUpBox(PlayerTombBox* TombBox);// 0x39ed968
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x39ed858
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x39ed704
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x39ed550
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x39ed45c
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window, bool bIsSelfInstigator);// 0x39ed060
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x39ed000
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x39ecec4
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(const ItemDefineID[] WeaponIDArray);// 0x39ecdd0
	void RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes(const int[] TreasureBoxIDArray);// 0x39eccdc
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x39ecbe8
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x39ecaf4
	void RPC_Server_EquipWeaponBullet(STExtraShootWeapon* TargetWeapon, int BulletID);// 0x39ec9f8
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x39ec8a8
	void RPC_Server_ClientHasReactivated();// 0x39ec84c
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x39ec6e8
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x39ec584
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x39ec488
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x39ec3d4
	void RPC_ReviveState_GiveUpRevive();// 0x39ec378
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x39ec2c4
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x39ec0b0
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x39ebeec
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x39ebd70
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x39ebc70
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x39ebbbc
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x39eba64
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x39eb908
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x39eb700
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x39eb4f8
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x39eb430
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x39eb258
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x39eb15c
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x39eb060
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x39eaf64
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x39eae0c
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector_NetQuantize10 BulletStart, Vector_NetQuantize10 BulletEnd);// 0x39eacf4
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x39eabb8
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x39eaa74
	void RPC_GiveUpGame();// 0x39eaa18
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x39ea8d8
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime, float Thickness);// 0x39ea758
	void RPC_DrawDebug_Box(const Vector Center, const Vector Extent, const Color Color, float LifeTime);// 0x39ea620
	void RPC_ClientSetVehicleSpawnServerTime(float STime);// 0x39ea5a0
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x39ea498
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x39ea284
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x39ea0b8
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x39e9eec
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x39e9d20
	void RPC_Client_SetSpectatorPawnLotation(const Vector NewLocation);// 0x39e9c74
	void RPC_Client_RemoteDestroyAllActor();// 0x39e9c58
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x39e9bd8
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x39e9a44
	void RPC_Client_PreSetBulletListInClip(STExtraShootWeapon* TargetWeapon, BulletInClip CurBulletInClip);// 0x39e97ac
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot, byte SurfaceType);// 0x39e9648
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x39e93a0
	void RPC_Client_NotifyHealth(float Health);// 0x39e92ec
	void RPC_Client_InfectionShowKillNum(int ShowKillNum);// 0x39e926c
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x39e9108
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x39e9014
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x39e8f18
	void RPC_Client_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x39e8e1c
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackArea);// 0x39e8c8c
	void RevivalTemateSuccess();// 0x39e8c70
	void RevivalTemateFailImpl(FString Reason);// 0x39e8bac
	void RevivalTemateFail(FString Reason);// 0x39e8ae8
	float RetriveMobileContentScaleFactor();// 0x39e8ac0
	void RestoreDefaultInteractionSize(int JSIndex);// 0x39e8a48
	void RespawnRecoverData(UAEPlayerController* PC);// 0x39e89d0
	bool ResetValidTouchMoveFrame();// 0x39e89a8
	void ResetMissingUIUpdate();// 0x4a51734
	void ResetIgnoreMoveInput();// 0x39e898c
	void RequireNetCullingDistanceByDevice();// 0x39e8930
	void RequireDeviceInfo();// 0x39e8914
	void RequestPlayerNewbieInfo();// 0x39e8900
	bool RequestChangeWearInPhoto(int NewIndex);// 0x39e8880
	bool RequestChangeWearInBattle(int NewIndex);// 0x39e8800
	bool RequestChangeWear(int NewIndex);// 0x39e8780
	bool RequestChangePet(int InNewIndex);// 0x39e8700
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x39e8638
	void ReqRecordEnterIceMountain();// 0x39e85dc
	void ReqGetVehiclePos(STExtraVehicleBase* SimVehicle);// 0x39e8528
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x39e84b0
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x39e8354
	void ReportPlayerPositionFlow(const PlayerPositionFlow PlayerPositionFlow);// 0x39e81ec
	void ReportClientParachuteData(ParachuteData InParachuteData);// 0x39e7f24
	void ReportAntiCheatInfo();// 0x39e7f10
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x39e7e98
	void RemoveCustomSensibility(int WeaponId);// 0x39e7e20
	void RemoveClientSpawnAndBackpackWeaponReplicatedData(const ItemDefineID WeaponData);// 0x39e7d6c
	void ReleaseFire();// 0x4a51734
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x39e7cf4
	void ReInitParachuteItem();// 0x39e7ce0
	void RefreshTopMostUIPanel(byte Type);// 0x4a51734
	void RefreshShootDetailInfo();// 0x39e7ccc
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x4a51734
	void RecoverStatusAfterReconnecting();// 0x39e7cac
	void RecoverJoystick(int FingerIndex);// 0x39e7c34
	void RecordPathPoint();// 0x39e7c20
	void ReceiveClientRestart();// 0x4a51734
	void ReceiveBackpackComponent();// 0x39e7c04
	void QuitSpectatingReSetData();// 0x39e7bf0
	void QuitSpectating();// 0x39e7bdc
	void PrivateTriggerVehicleVoiceCheckFuction(STExtraVehicleBase* PtrVehicle, Vector Position, float showTime);// 0x39e7ad4
	void PrivateTriggerShotVoiceCheckFuction(STExtraShootWeapon* PtrWeapon, Vector Position, float showTime, bool bSilience, bool bExplosion);// 0x39e792c
	void PrivateTriggerMoveVoiceCheckFuction(STExtraBaseCharacter* PtrCharacter, Vector Position, float showTime);// 0x39e7824
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x39e76d4
	void PreViewTargetChangeDelegate__DelegateSignature(Actor* NewTarget, Actor* PrevTarget);// 0x4a51734
	void PressGrenade(bool isThrow);// 0x4a51734
	void PressFire(int FingerIndex);// 0x4a51734
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x39e7618
	void PlayerKillingDelegate__DelegateSignature();// 0x4a51734
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x4a51734
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x4a51734
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x4a51734
	void PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x4a51734
	void PlayerControllerNotifyChangeToWalkingDead__DelegateSignature(bool bCanChange, bool bIsWalkingDeadFinish);// 0x4a51734
	void PlayerControllerChangeToWalkingDeadRes__DelegateSignature(bool bSucc);// 0x4a51734
	void PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x4a51734
	void PlayBattleSound(FString BankName, FString SoundName);// 0x39e74d8
	void PickupInitialItemListForRobustness();// 0x39e74c4
	void PerRespawnClearOtherPawn();// 0x4a51734
	void OpenParachute();// 0x39e74b0
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x4a51734
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x4a51734
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x4a51734
	void OnWallFeedBack(bool _WallFeedBack);// 0x39e7430
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x39e7374
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x39e72fc
	void OnViewTargetChangeVehicleSeat();// 0x39e72e8
	void OnViewTargetChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0x4a51734
	void OnViewTargetChange__DelegateSignature(STExtraBaseCharacter* ViewTarget, STExtraBaseCharacter* LastViewTarget, bool bIsOnPlane);// 0x4a51734
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x39e7270
	void OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x4a51734
	void OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x4a51734
	void OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x4a51734
	void OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x4a51734
	void OnVehicleExitFreeCameraDelegate__DelegateSignature(bool bExit);// 0x4a51734
	void OnUseVehicleWarWeapon();// 0x39e725c
	void OnUseVehicleWarItem();// 0x39e7248
	void OnUseVehicleWarEyes();// 0x39e7234
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x4a51734
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x4a51734
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x4a51734
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x39e7054
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x4a51734
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x4a51734
	void OnTeammatesAllDie();// 0x3592f9c
	void OnTeammateLogin(int InTeamID);// 0x39e6fdc
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x4a51734
	void OnTeamFollowStageChangeDelegate__DelegateSignature();// 0x4a51734
	void OnTakeDamaged__DelegateSignature(float DamageAngel, Actor* DamageCauser, float Damage);// 0x4a51734
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x4a51734
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x4a51734
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x4a51734
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x4a51734
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x4a51734
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x4a51734
	void OnStopFireDelegate__DelegateSignature();// 0x4a51734
	void OnStartFireDelegate__DelegateSignature();// 0x4a51734
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x4a51734
	void OnSpectatorToFreeView__DelegateSignature();// 0x4a51734
	void OnSpectatorChangeFunc();// 0x39e6fc8
	void OnSpectatorChange__DelegateSignature();// 0x4a51734
	void OnSpectatorCameraChange(bool bDie);// 0x4a51734
	void OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x4a51734
	void OnShowSkillPromptDelegate__DelegateSignature(int PromptID, float RemainTime);// 0x4a51734
	void OnShowHideSelfMarkDelegate__DelegateSignature();// 0x4a51734
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x4a51734
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x4a51734
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x39e6ef8
	void OnShowAllTeammatePosDelegate__DelegateSignature(bool bShow);// 0x4a51734
	void OnShowAliasInfoDelegate__DelegateSignature();// 0x4a51734
	void OnSetViewTarget__DelegateSignature(Actor* Target);// 0x4a51734
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x4a51734
	void OnServerFinishPickupRevivalFlag();// 0x39e6edc
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x4a51734
	void OnRescuedStateChanged__DelegateSignature(bool bBeingRescued);// 0x4a51734
	void OnRepTeammateChange__DelegateSignature();// 0x4a51734
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x4a51734
	void OnRepPlayerState__DelegateSignature();// 0x4a51734
	void OnRepNotify_SetBattleOwner();// 0x39e6ec8
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x3592f9c
	void OnRep_WeatherFog();// 0x39e6eb4
	void OnRep_WeaponSystemReconnectReplicateData();// 0x39e6ea0
	void OnRep_WeaponFunctionChanged();// 0x39e6e8c
	void OnRep_WeaponAvatarDataList();// 0x39e6e70
	void OnRep_UsedSimulation();// 0x39e6e54
	void OnRep_SwitchWeather();// 0x39e6e40
	void OnRep_STExtraBaseCharacter();// 0x39e6e2c
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x39e6e18
	void OnRep_ShowWeaponHitDetailInfo();// 0x39e6e04
	void OnRep_ServerStateType();// 0x39e6df0
	void OnRep_Plane();// 0x39e6ddc
	void OnRep_ObservedItemList();// 0x39e6dc8
	void OnRep_InWateringRangeBP();// 0x4a51734
	void OnRep_InWateringCRange();// 0x39e6d74
	void OnRep_InitialEquipmentAvatar();// 0x39e6d58
	void OnRep_InitialConsumableAvatar();// 0x39e6d3c
	void OnRep_ImprisonmentTeammateSucess();// 0x39e6d28
	void OnRep_GameStateMsgType();// 0x39e6d14
	void OnRep_ForbitPickEffect();// 0x39e6d00
	void OnRep_ForbitPick();// 0x39e6cec
	void OnRep_EnableDeathPlaybackDelay();// 0x39e6cd8
	void OnRep_DeadTombBox();// 0x39e6cc4
	void OnRep_CanOpenParachute();// 0x39e6cb0
	void OnRep_CanJump();// 0x39e6c9c
	void OnRep_CanImprisonmentTeammate();// 0x39e6c88
	void OnRep_bGhost();// 0x39e6c6c
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x39e6c58
	void OnRep_BackpackRepActor();// 0x39e6c44
	void OnRep_BackpackComponent();// 0x39e6c30
	void OnRep_AutoAimType();// 0x39e6c1c
	void OnRemindTeammateShoot__DelegateSignature(FString sPlayerKey, bool bShow, float nDist);// 0x4a51734
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x4a51734
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x4a51734
	void OnReleaseFire();// 0x39e6c08
	void OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x4a51734
	void OnReconnected__DelegateSignature();// 0x4a51734
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x4a51734
	void OnPressVehicleWarMatchData();// 0x39e6bf4
	void OnPressTurnplateQuickMsgBtn();// 0x39e6be0
	void OnPressTriggerEntireMapBtn();// 0x39e6bcc
	void OnPressShowTagVehileSeatListBtn();// 0x39e6bb8
	void OnPressRolewearChangeBtn(int Index);// 0x39e6b40
	void OnPressItemSKillBtn();// 0x39e6b2c
	void OnPressFire();// 0x39e6b18
	void OnPressBackpackBtn();// 0x39e6b04
	void OnPostTakeDamageForBP__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* DamageCauser);// 0x4a51734
	void OnPlayerUseRecoverItem();// 0x39e6af0
	void OnPlayerStateChanged();// 0x39e6adc
	void OnPlayerReConnected(int LostPlayerKey);// 0x39e6a28
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x4a51734
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x4a51734
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x4a51734
	void OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x4a51734
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x4a51734
	void OnPlayerLostConnection(int LostPlayerKey);// 0x39e6974
	void OnPlayerLeaveRevivalStateDelegate__DelegateSignature();// 0x4a51734
	void OnPlayerKilledOthersPlayer__DelegateSignature(out const FatalDamageParameter FatalDamageParameter);// 0x4a51734
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x4a51734
	void OnPlayerInOutBlueCircleChangedDelegate__DelegateSignature(bool bIsInBlueCircle);// 0x4a51734
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x39e68f4
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x4a51734
	void OnPlayerExitGameDelegate__DelegateSignature(FName ParamState, FString ParamReason);// 0x4a51734
	void OnPlayerEnterRevivalStateDelegate__DelegateSignature();// 0x4a51734
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x4a51734
	void OnPlayerControllerStateChangedCurrentType(enum CurrentType);// 0x39e687c
	void OnPlayerClickDriveBtn();// 0x39e6868
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x4a51734
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x4a51734
	void OnPlayerChangePetDone__DelegateSignature(int Index, float ChangePetTime);// 0x4a51734
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x39e6724
	void OnPickupItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x4a51734
	void OnPickUpExpand();// 0x39e66bc
	void OnPickUpCollapsed(bool isCollapsed);// 0x39e663c
	void OnPickUpActor(int Guid, int PickupCount, int TotalCount);// 0x39e653c
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x4a51734
	void OnOccupyNewbieGuide(int inGuideID);// 0x39e64c4
	void OnOBVehicleHitActor(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x39e6320
	void OnObserverLevelLoaded();// 0x39e630c
	void OnObservedWeaponDataChanged(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x39e6260
	void OnObservedUsingWeaponChanged();// 0x39e624c
	void OnObservedPoisonFogStageChanged();// 0x39e6238
	void OnObservedItemsChanged();// 0x39e6224
	void OnObservedBulletNumChanged();// 0x39e6210
	void OnOBPawnExitVehicle(STExtraVehicleBase* InTargetVehicle);// 0x39e6198
	void OnNightStateChangedDelegate__DelegateSignature();// 0x4a51734
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x39e6120
	void OnMemberVoiceDelegate__DelegateSignature(int member, int Status);// 0x4a51734
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x4a51734
	void OnLostConnection__DelegateSignature();// 0x4a51734
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x4a51734
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x4a51734
	void OnLiveStateChanged__DelegateSignature(enum LiveState);// 0x4a51734
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x4a51734
	void OnKillerNotify(Actor* Killer);// 0x39e60a8
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int Count);// 0x39e5f98
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x39e5eb8
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x39e5da8
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x4a51734
	void OnInfectionShowTipMsgDelegate__DelegateSignature(int MsgID, int IconID, float showTime, float DelayTime);// 0x4a51734
	void OnInfectionPlaySoundEvent__DelegateSignature(int SoundID);// 0x4a51734
	void OnImprisonStateChange__DelegateSignature(bool bEnterImprison);// 0x4a51734
	void OnHideSkillPromptDelegate__DelegateSignature(bool bForce, int PromptID);// 0x4a51734
	void OnHideFollowPanelAndBtnDelegate__DelegateSignature();// 0x4a51734
	void OnHandleCameraModeChangedDelegate__DelegateSignature(byte CameraMode);// 0x4a51734
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x4a51734
	void OnGameStartDelegate__DelegateSignature();// 0x4a51734
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x4a51734
	void OnGameModeStateChanged();// 0x4a51734
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0x4a51734
	void OnExitGame__DelegateSignature();// 0x4a51734
	void OnEquipWeaponDelegate__DelegateSignature();// 0x4a51734
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x4a51734
	void OnEquipmentAvatarChange__DelegateSignature();// 0x4a51734
	void OnEnterBattleResultStep();// 0x39e5d94
	void OnDropItemOnPlane();// 0x39e5d80
	void OnDropItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x4a51734
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x4a51734
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x4a51734
	void OnDeadBoxExpand();// 0x39e5d6c
	void OnDeadBoxCollapsed(bool isCollpased);// 0x39e5cec
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x4a51734
	void OnCoopEmoteChangeDelegate__DelegateSignature(bool bShow, EmotePlayer EmotePlayer);// 0x4a51734
	void OnConsumableAvatarChange__DelegateSignature();// 0x4a51734
	void OnCongregationFlagDelegate__DelegateSignature();// 0x4a51734
	void OnClientWillGotoSpectating();// 0x39e5cd8
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CamID, Actor*[] PeerVisualFieldActorList);// 0x4a51734
	void OnClickVehicleWarBuff();// 0x39e5cc4
	void OnClickToggleOBVehicleView();// 0x39e5cb0
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x4a51734
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x4a51734
	void OnCharacterRecoveryHealthEvent();// 0x39e5c9c
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x4a51734
	void OnCharacterReceiveHealthChangeHistory__DelegateSignature(out const float[] HealthChangeHistory);// 0x4a51734
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x4a51734
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x4a51734
	void OnCharacterLandingCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x4a51734
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x4a51734
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x39e5c1c
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x4a51734
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x4a51734
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x4a51734
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x4a51734
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x39e5b9c
	void OnBuyRevivalSign();// 0x39e5b80
	void OnAvatarInfoRep__DelegateSignature(int[] ItemIdList, FString PlayerUID, FString AvatarType);// 0x4a51734
	void OnAutoSprintActive__DelegateSignature();// 0x4a51734
	void OnAssociationOperation(ItemDefineID DefineID, ItemDefineID TargetDefineID, enum OperationType, byte Reason);// 0x39e5a18
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x4a51734
	void ObserveWhoKilledMe();// 0x39e5a04
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x39e5950
	void ObserveCharacter(FString InPlayerName);// 0x39e57f8
	void ObserveAirDropBox(int BoxId);// 0x39e5780
	void OBCameraTurnSlower();// 0x39e576c
	void OBCameraTurnFaster();// 0x39e5758
	void OBCameraMoveSlower();// 0x39e5744
	void OBCameraMoveNear();// 0x39e5730
	void OBCameraMoveFaster();// 0x39e571c
	void OBCameraMoveFar();// 0x39e5708
	void NotifyOpenSequencer(BattleOpenSequencerInfo Info);// 0x39e54f0
	void NotifyIsInResultView(bool isInResultView);// 0x39e5470
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x4a51734
	void NotifyEnterBattle();// 0x39e5454
	void NotifyDeadBoxExpand();// 0x4a51734
	void NotifyDeadBoxCollapsed(bool isCollpased);// 0x4a51734
	void MoveUpDelegate__DelegateSignature(float rate);// 0x4a51734
	void MoveUp(float rate);// 0x39e53dc
	void MoveToAIWithClassName(FString AIClassName, float XOffset, float YOffset, float ZOffset);// 0x39e5250
	void MoveToAI();// 0x39e523c
	void MoveRightDelegate__DelegateSignature(float rate);// 0x4a51734
	void MoveForwarDelegate__DelegateSignature(float rate);// 0x4a51734
	void MovableEmoteDelegate__DelegateSignature(bool bIsVisible);// 0x4a51734
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x39e5180
	void ModifyCameraViewPitchLimitWithPose(byte Pose, float PitchMin, float PitchMax);// 0x39e5080
	void MemberVoice(int member, int Status);// 0x4a51734
	void MarkStartFireFrame();// 0x39e506c
	void LocalMoveTo(out const Vector targetPos);// 0x39e4fe8
	void LocalGetGameStateReconnectInfo();// 0x39e4fd4
	void LerpFPPCamera();// 0x39e4fc0
	void KickPlayerFromGame();// 0x39e4fac
	void K2_SetPawn(Pawn* InPawn);// 0x39e4f34
	void JumpPlanDell(STExtraBaseCharacter* dellPawn);// 0x4a51734
	void JumpFromPlane();// 0x39e4f20
	void JoystickTriggerSprint(bool bIsSprint);// 0x4a51734
	bool IsVirtualJoystickValid();// 0x39e4ef8
	bool IsViewTarget(const Actor* pActor);// 0x39e4e6c
	bool IsUse3DTouch();// 0x39e4e44
	bool IsTouchToRotControl();// 0x39e4e14
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x39e4d94
	bool IsToggleOBBulletTrackEffect();// 0x39e4d6c
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x39e4cec
	bool IsStandalone();// 0x39e4cb8
	bool IsShowBlood();// 0x39e4c98
	bool IsSameTeam(Pawn* Other);// 0x39e4c18
	bool IsRevivalMode();// 0x39e4be8
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x39e4b68
	bool IsRecentlyCalledServerCMD(const float MarginSeconds);// 0x39e4ae8
	bool IsParachuteAnimCached(byte AnimOverrideType);// 0x39e4a68
	bool IsMurderSelfDefense(FString InformMurderName);// 0x39e49a4
	bool IsMoveable_DontConsiderFollowingState();// 0x39e497c
	bool IsMoveable();// 0x39e4954
	bool IsLastBreathOrRescueingOther();// 0x39e492c
	bool IsInRevival();// 0x39e4904
	bool IsInPlane();// 0x39e48dc
	bool IsInParachuteOpen();// 0x39e48b4
	bool IsInParachuteJump();// 0x39e488c
	bool IsInParachute();// 0x39e4864
	bool IsInObservingPlayback();// 0x39e483c
	bool IsInNormalPlane();// 0x39e4814
	bool IsInInitial();// 0x39e47ec
	bool IsInFreeCameraView();// 0x39e47d0
	bool IsInFreeBuildState();// 0x39e47b0
	bool IsInFinish();// 0x39e4788
	bool IsInFight();// 0x39e4760
	bool IsInDeathReplay();// 0x39e4738
	bool IsInDead();// 0x39e4710
	bool IsGhost();// 0x39e46e8
	bool IsForbitPickMakeEffect();// 0x39e46c0
	bool IsForbitPick(out const FName TombName);// 0x39e462c
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x39e4560
	bool IsCanViewEnemy();// 0x39e4538
	bool IsCanSpectateTeammate();// 0x39e4510
	bool IsCanImprisonmentTeammate();// 0x39e44e8
	bool IsCacheReceiveRespawnZombie();// 0x39e44c0
	bool IsAutoParachuteEnable();// 0x39e4498
	bool IsAllowBackpackReplayData(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x39e4380
	bool IsAllowActorTouchMove();// 0x39e4358
	bool IsAGMPlayer();// 0x39e4330
	void InitVehicleAvatarSkinList();// 0x39e4314
	void InitVehicleAvatarList();// 0x39e42f8
	void InitTaskDatas(uint32 InPlayerKey);// 0x39e4280
	void InitTaskDataDelegate__DelegateSignature(int TaskId, int process, FString ext_info);// 0x4a51734
	void InitTaskData(int TaskId, int process, FString ext_info);// 0x39e4098
	void InitTaskComponent();// 0x39e4084
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x4a51734
	void InitJoyStickAfterActivation();// 0x4a51734
	void InitCollectionDataDelegate__DelegateSignature(int ItemId, int CurrentCount, int TotalCount);// 0x4a51734
	void InitCollectionData(int ItemId, int CurrentCount, int TotalCount);// 0x39e3f84
	void InfectionSelectZombieDelegate__DelegateSignature(enum TargetPawnType);// 0x4a51734
	void HideGameTipForLowFPSWarning();// 0x39e3f70
	void HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x4a51734
	FString HawkEyesLocalize(int InPlayerKey);// 0x39e3e60
	bool HasAnySpectatorReplayFlag(uint32 InFlag);// 0x39e3dd8
	void HandleVirtualJoystickTouchedStartInArea(out const Geometry Geometry, out const Vector2D ScreenPosition);// 0x39e3cf8
	void HandleVirtualJoystickInput(out const Geometry Geometry, out const Vector2D ScreenPosition, int PointerIndex, bool MouseDown);// 0x39e3b80
	void HandleVirtualJoystickActive(Vector2D NormalizedOffset, Vector2D VisualSize);// 0x39e3ac0
	void HandleUpdateShovelingRelease();// 0x39e3aac
	void HandleUpdateShovelingPressed();// 0x39e3a98
	void HandleUpdateShoveling();// 0x39e3a84
	void HandleTogglePlayerListInOB();// 0x39e3a70
	void HandleToggleOBTeamList(bool InShow);// 0x39e39f0
	void HandleToggleMapInOB();// 0x39e39dc
	void HandleToggleHitDamageDisplay();// 0x39e39c8
	void HandleToggleBulletTrack();// 0x39e39b4
	void HandleTipInfo(FString FullMsg);// 0x39e38f8
	void HandleSwitchToTeammatePrev();// 0x39e38e4
	void HandleSwitchToTeammateNext();// 0x39e38d0
	void HandleSwitchToTeam(int InTeamID);// 0x39e3858
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x39e37e0
	void HandleMsg(enum Msg);// 0x39e3768
	void HandleLeaveFreeViewInOB();// 0x39e3754
	void HandleLandOnGroundEnd();// 0x39e3740
	void HandleHitDataArray(STExtraShootWeapon* TargetWeapon, out const SACData InAntiCheatData);// 0x39e361c
	void HandleFlyLeapPlatform();// 0x39e35c0
	void HandleEnterFreeViewInOB();// 0x39e35ac
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x39e34dc
	void HandleClientHasReactivated();// 0x39e34c8
	void HandleChangeRolewearDone();// 0x4a51734
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x39e340c
	int GotoSpectating(int TeammatePlayerid);// 0x39e3384
	void GotoFlying();// 0x39e3370
	void GMTeleport(FName Teleporter);// 0x39e32f8
	int GetWriteCircleDistance();// 0x39e32d0
	WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x39e3204
	int GetWeaponDIYPlanID(int WeaponId);// 0x39e3184
	int GetWeaponAvatarItemId(int BPID);// 0x39e30fc
	int GetWeaponAvatarID(int WeaponId, bool isGrenade);// 0x39e3030
	float GetViewPortDPIScale();// 0x39e3000
	VehicleUserComponent* GetVehicleUserComp();// 0x39e2fd8
	bool GetUseMotionControlLog();// 0x39e2fb0
	bool GetUseMotionControlEnable();// 0x39e2f88
	int GetUnlockWearCount();// 0x39e2f60
	float GetTouchSensibilityRate();// 0x39e2f30
	float GetTouchForce(byte FingerIndex);// 0x39e2eb0
	Actor* GetThePlane();// 0x39e2e90
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x39e2e10
	SpringArmComponent* GetTargetedSpringArm();// 0x39e2de8
	int GetStatTriangles();// 0x35d30e4
	FString GetStatMemory();// 0x39986ec
	StateMachineComponent* GetStateMachineCompent();// 0x39e2dc0
	int GetStatDrawCalls();// 0x35d30e4
	STExtraPlayerState* GetSpecOrDemoPlayerState();// 0x39e2d98
	Pawn* GetSpecOrDemoPawn();// 0x39e2d70
	BattleItemData[] GetSpecialClothingInAllBackpack(int Index);// 0x39e2c18
	int[] GetSpecialClothingCountInAllBackpack(int Index);// 0x39e2b10
	int[] GetSpecialAreaList();// 0x39e2a50
	int GetSpecialAreaID();// 0x39e2a28
	SIslandInactiveClearComponent* GetSIslandInactiveClearComponent();// 0x39e2a00
	byte GetSightTypeForSensibility(STExtraShootWeapon* ShootWeapon);// 0x39e2978
	byte GetShakeCameraMode();// 0x39e2948
	Rotator GetSensibilityRate(float YawInput, float PitchInput, bool bIsMotionControl);// 0x39e2824
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x39e26c8
	ScreenAppearanceActor* GetScreenAppearanceMgr();// 0x39e26a0
	FString GetRHIThreadTime();// 0x39986ec
	int GetRevivalCountDownTime();// 0x39e2678
	FString GetRenderThreadTime();// 0x39986ec
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x4a51734
	QuickSignComponent* GetQuickSignComponent();// 0x39e2650
	FString GetPresentTime();// 0x39986ec
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x39e2628
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x39e2540
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x39e2518
	STExtraBaseCharacter* GetPickingupCharacter();// 0x39e24e8
	PlayerPetSpectatorComponent* GetPetSpectatorComp();// 0x39e24c0
	CharacterParachuteComponent* GetParachuteComponent();// 0x39e2498
	AnimationAsset* GetParachuteAnimAsset(byte AnimType, byte AnimOverrideType);// 0x39e23d4
	Transform GetPaintDecalTargetTransform();// 0x39e2374
	ObservingReplay* GetObservingPlayback();// 0x39e234c
	Vector GetNewestAirDropBoxPos();// 0x39e2304
	FString GetMurderUIDStr();// 0x39e2208
	FString GetMurderName();// 0x39e2148
	bool GetMurderIsAI();// 0x39e2110
	BattleItemSpectatingData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x39e1f30
	byte GetMaxTouchForceFinger();// 0x39e1ef0
	enum GetLastStateType();// 0x39e1ec8
	Vector2D GetJoyStickVisualSize();// 0x39e1e88
	float GetJoyStickOpacity();// 0x39e1e60
	Vector2D GetJoyStickCenter();// 0x39e1e20
	int GetItemUseSpecialAreaID(int ItemId);// 0x39e1da0
	bool GetIsRespawn();// 0x39e1d80
	bool GetIsMurderSameTeam();// 0x39e1d48
	bool GetIsFreeCamera();// 0x39e1d28
	enum GetInfectionPawnSubType();// 0x39e1d00
	enum GetInfectionPawnMainType();// 0x39e1cd8
	IdeaDecalManager* GetIdeaDecalManager();// 0x39e1cb0
	FString GetGameThreadTime();// 0x39986ec
	void GetGameStateReconnectInfoOnServer();// 0x39e1c54
	LastGameRemainItemData GetGameRemainItems();// 0x39e1b64
	int GetFriendDistance();// 0x35d30e4
	Vector GetFocalLocation();// 0x39e1b14
	FString GetFinalMurderName();// 0x39e19f4
	WeaponHitDetailInfo GetDetailHitInfo();// 0x39e18c0
	void GetDailyTaskReportData(out DailyTaskReportInfo ResultData);// 0x39e1744
	enum GetCurrentStateType();// 0x39e171c
	Vector GetCurrentLevelOffset();// 0x39e16d4
	STExtraPlayerState* GetCurPlayerState();// 0x39e16ac
	int GetCurPlayerId();// 0x39e1684
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x39e165c
	Vector GetCurPawnLocation();// 0x39e1614
	Pawn* GetCurPawn();// 0x39e15ec
	float GetCurFPS();// 0x35d30e4
	Rotator GetControlLookRotation();// 0x39e159c
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x39e14b0
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x39e1358
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x39e12d8
	ChatComponent* GetChatComponent();// 0x39e12b0
	byte GetCameraModeForSensibility();// 0x39e1280
	uint32 GetBeKickedPlayerKey();// 0x39e1258
	BackpackComponent* GetBackpackComponent();// 0x39e1230
	AllStarReportData GetAllStarReportDataByOpenID(FString InPlayerOpenID);// 0x39e1164
	void GenerateIdCardMark(out const Vector Loc);// 0x39e10d8
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int BoxId);// 0x39e0f74
	void GameModeGotoFightingState();// 0x39e0f60
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x39e0ea4
	void ForceServerSetControlRotationOnVehicle();// 0x39e0e90
	void ForceReleaseCurTouchMoveFinger();// 0x39e0e7c
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x39e0db0
	void ForceDropItemsWithType(int TypeItem);// 0x39e0d38
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x39e0c6c
	void ForceDropItems(out const int[] ItemTableList);// 0x39e0ba0
	void ForceDropAllItem();// 0x39e0b8c
	bool ForbidSpectateTeamMateOnPlane();// 0x39e0b5c
	void FollowEmoteDelegate__DelegateSignature(bool bIsVisible);// 0x4a51734
	void FlushItem(int onlyStatic);// 0x39e0ae4
	void FireTakeDamagedEvent(Vector CauserLocation, Actor* DamageCauser, float Damage);// 0x39e09e4
	void FireOrGrenade();// 0x39e09d0
	void Fight();// 0x39e09bc
	void FadeSceneToGrayOnDeath(bool bSet);// 0x39e093c
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x39e0798
	void ExitNightState();// 0x39e0784
	void ExitFromFlyingVehicleParachuteJump();// 0x39e0768
	void ExitFreeCamera(bool IsForceReset);// 0x39e06e8
	void ExecDSCommand(const FString DSCommand);// 0x39e0624
	void EquipIceDrinkItems(out const int[] ItemList);// 0x39e0558
	void EnterVehicleDelegate__DelegateSignature(bool IsEnter, Actor* Vehicle);// 0x4a51734
	void EnterNightState();// 0x39e0544
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x39e043c
	void EndForceTouchFire(Vector Loc);// 0x39e03cc
	void EnablePlayerInHouse(bool bIsIn);// 0x39e034c
	void EnableNetUpdateGroupID(byte NetGroupID);// 0x39e02d4
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x4a51734
	void EnableAutoParachute(bool bEnable);// 0x39e0254
	void DynamicCreateComponents();// 0x39e0240
	void DropItemsWithType(int TypeItem);// 0x39e01c8
	void DropItem(int ID);// 0x39e0150
	void DropAllItem();// 0x39e013c
	void DoUITouchMove(Vector Loc);// 0x4a51734
	void DoubleClickCancel(const byte FingerIndex);// 0x39e00c4
	void DoTouchMove(float Yaw, float Pitch);// 0x4a51734
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x39e0010
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x39dff5c
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x4a51734
	void DisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString Param1, FString Param2, float ControlTime);// 0x39dfd08
	void DisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x39dfafc
	void DisplayLowFPSCountingDown();// 0x39dfae8
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x39df830
	void DisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x39df578
	void DisplayGameTipWithMsgID(int ID);// 0x39df500
	void DisplayGameTipForLowFPSWarning(int ID, FString Param1, FString Param2);// 0x39df248
	void DisplayCustomLuaGameTips(FString FunctionName, int ID, out const byte[] ExpandDataContent);// 0x39df0b4
	void DisplayBattleGeneralTip(int ID, FString Param1, FString Param2);// 0x39dedfc
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x39ded84
	void DispatchPlayerReconnectedEvent();// 0x39ded70
	void DispatchPlayerLostEvent();// 0x39ded5c
	void DispatchPlayerExitEvent();// 0x39ded48
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x39decd0
	void DisableNetUpdateGroupID(byte NetGroupID);// 0x39dec58
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x4a51734
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x4a51734
	void DelayGotoSpectating();// 0x39dec44
	void DelayForceExitFreeCamera();// 0x39dec30
	void DebugSetUIVisibility(bool bUIVisibility);// 0x4a51734
	void DealGetAllNearShotWeapon(float disRate);// 0x39debb8
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x39deafc
	void DealGetAllNearMoveCharacter(float checkDis);// 0x39dea84
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x39de8c8
	void ConsumeRevivalSign();// 0x39de8ac
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x39de794
	void ClientStopShoveling();// 0x39de738
	void ClientStartOnlineGame();// 0x39de71c
	void ClientShowInfectAreaWarning();// 0x39de6c0
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x39de598
	void ClientSetPoisonSmogStage(int SmogStage);// 0x39de4e4
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x39de3dc
	void ClientSetControlRotation(const Rotator NewRotation);// 0x39de364
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x39de268
	void ClientSetAIPosToTarget(Vector StartPos, Vector targetPos);// 0x39de1a0
	void ClientSetAIPos(uint32 KeyID, Vector Pos, bool isStart);// 0x39de08c
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x39ddfbc
	void ClientRPC_TeamMateStateChanged(const TeamMateStateInfo TeamMateInfo);// 0x39ddf14
	void ClientRequestPullInstanceData(uint32 Seq, out uint32[] InstanceIDs);// 0x39dde04
	void ClientRealPlayItemOperationSound(FString BankName, FString SoundName, Actor* TargetActor);// 0x39ddc78
	void ClientQuitViewEnemy();// 0x39ddc5c
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x39ddb5c
	void ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x4a51734
	void ClientOnHurt();// 0x39ddb40
	void ClientOnEnterVehicleDelegate__DelegateSignature(int SeatType);// 0x4a51734
	void ClientOnDeathReplayDataWhenFatalDamaged__DelegateSignature(bool bIsDead, bool bIsValidDeathReplay, bool bIsSuicide, FString InPlayerName, FString PlayerUID, bool bIsPlayerAI, enum AIType, int DamageType, FString MLAIUID);// 0x4a51734
	void ClientOnDamageToOther(float _DamageToOther);// 0x39ddac0
	void ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature(enum SeatType);// 0x4a51734
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType, bool bIsDroneActor);// 0x39dd95c
	void ClientInterruptGame();// 0x39dd900
	void ClientInitIngameUIAfterRespawn();// 0x39dd8a4
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x39dd7e8
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x39dd720
	void ClientGotoSpectating();// 0x3923b2c
	void ClientGiveUpRevivalTemmates();// 0x39dd704
	void ClientGameStarted();// 0x39dd6e8
	void ClientFriendBattleEnd(bool bIsShowWatchFriendBattleEndTips);// 0x39dd660
	void ClientForbidLoadParahuteAnim(bool bCanForbid);// 0x39dd5d8
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x39dd550
	void ClientEnterViewBox(int BoxId);// 0x39dd4d0
	void ClientEndOnlineGame();// 0x39dd4b4
	void ClientDisplayNormalTips(FString Content);// 0x39dd3f0
	void ClientDisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString Param1, FString Param2, float ControlTime);// 0x39dd194
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x39dcf80
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x39dcdbc
	void ClientDisplayGameTipWithMsgID(int ID);// 0x39dcd08
	void ClientDisplayCustomLuaGameTips(FString FunctionName, int ID, const byte[] ExpandDataContent);// 0x39dcb7c
	void ClientCheckStartShovelingFail();// 0x39dcb20
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x39dca6c
	void ClientChangeStatePC(enum TargetStateType);// 0x39dc9ec
	void ClearParachuteAnimAssetCache();// 0x39dc9d8
	void ClearDeadTombBox();// 0x39dc9c4
	void ClearAllConstructedBuilding();// 0x39dc9b0
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x39dc910
	bool CientRevivalTemmates();// 0x39dc8e8
	void CheckServerStateIgnoreTouch();// 0x39dc8cc
	void CheckQuitSpectatingInClientRestart(Pawn* NewPawn);// 0x39dc84c
	void CheckPlayerOBInfoButtonInit();// 0x39dc830
	void CheckParachuteLandedFinish();// 0x39dc81c
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x39dc734
	void CheckDeadBoxIgnoreTouch();// 0x39dc718
	void CheckConsumeGlideItem();// 0x39dc704
	bool CheckAllVehicleWeaponIsReadyForFire(bool WithBroadEvent);// 0x39dc67c
	bool ChecCanChangeWeaponScheme();// 0x39dc64c
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x39dc5cc
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x39dc554
	void ChangeToWalkingDead();// 0x39dc540
	void ChangeStatePC(enum TargetStateType);// 0x39dc4c8
	void ChangeSpectatorStateToFreeView();// 0x39dc4b4
	bool ChangeRolewearIndex(int NewIndex, bool bIgnoreVault);// 0x39dc3e8
	void ChangeCharacterLogicDelegate__DelegateSignature(enum TargetPawnType);// 0x4a51734
	void ChangeCharacterBeforeDelegate__DelegateSignature(enum TargetPawnType);// 0x4a51734
	bool ChangeActorRelevantTime(Actor* pActor, float Timeout);// 0x39dc324
	void CanSeeAllUI(bool bUIVisibility);// 0x363b278
	bool CanCombineShootHitData();// 0x39dc2fc
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x39dc25c
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x39dc14c
	bool CanAutoSwitchGrenade(int GrenadeID);// 0x39dc0c4
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x39dbfe0
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, float HealthMax, int VoiceID);// 0x39dbdfc
	void CallShowTouchInterface(bool InShow);// 0x39dbd74
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x39db7a4
	Vector2D CalcAttactBtnPos(float locX, float locY, float SizeX, float SizeY);// 0x39db644
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x39db5cc
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x39db554
	void CacheRecvInfectionSelectZombie__DelegateSignature(bool bRecv);// 0x4a51734
	void C2S_RequestSkillPrompt();// 0x39db4f8
	void C2S_RequestBeingRescuedRemainingTime();// 0x39db49c
	void BroadcastFatalDamageToClientWithStructNew(const FatalDamageParameterCompress FatalDamageParameter);// 0x39db3b8
	void BroadcastFatalDamageToClientWithStruct(const FatalDamageParameter FatalDamageParameter);// 0x39db2a4
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x39db040
	SpringArmComponent* BPGetTargetedSpringArm();// 0x39db008
	bool BPGetIsAndroidSimulator();// 0x39dafe0
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString Param1, FString Param2);// 0x39dad94
	void BPCastUIMsgWithParam(FString Func, FString module, FString Param1);// 0x39dabd0
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x4a51734
	void BP_BeginSpectatingState();// 0x4a51734
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x39dab58
	void BindVoiceCheckFunction();// 0x39dab44
	void BindVirtualJoystickTouchedStartInAreaDelegates(bool bBind);// 0x39daac4
	void BindVirtualJoystickInputDelegates(bool bBind);// 0x39daa44
	void BindVirtualJoystickActiveDelegates(bool bBind);// 0x39da9c4
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x39da908
	void BeginAbsorb();// 0x39da8ac
	void BecomeAGhost(bool Flag);// 0x39da824
	void BackToGameDataRefresh();// 0x39da810
	bool AutoSelectViewTarget();// 0x39da7e8
	void AutoSelectTeammateToView();// 0x39da7d4
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x39da6c8
	void AddParachuteAnimAssetCache(byte AnimType, AnimationAsset* AnimAsset, byte AnimOverrideType);// 0x39da5c8
	void AddItemAttachList(int BaseItemID);// 0x39da550
	void AddItem(int ID, int Count, int PickupType);// 0x39da450
	void AddCharacterVirtualItemToBackpack();// 0x39da43c
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x39da2f4
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x39da274

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float AirLaunchApexTime;//[Offset: 0xce8, Size: 4]
	delegate OnPlayerTeleport;//[Offset: 0xcec, Size: 12]
	delegate OnDeath;//[Offset: 0xcf8, Size: 12]
	delegate OnBulletChange;//[Offset: 0xd04, Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0xd10, Size: 12]
	delegate OnAnimAssetSkeletonMatch;//[Offset: 0xd1c, Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0xd28, Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0xd34, Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0xd40, Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0xd4c, Size: 12]
	delegate OnPlayerWeaponReloadLastBullet;//[Offset: 0xd58, Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0xd64, Size: 12]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0xd70, Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0xd7c, Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xd88, Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0xd94, Size: 12]
	delegate OnFollowStateChanged;//[Offset: 0xda0, Size: 12]
	delegate OnPlayerStartRescue;//[Offset: 0xdd4, Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0xde0, Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0xdec, Size: 12]
	delegate OnServerPerspectiveChanged;//[Offset: 0xdf8, Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xe04, Size: 12]
	delegate OnDeathDelegate;//[Offset: 0xe10, Size: 12]
	delegate OnPostTakeDamage;//[Offset: 0xe1c, Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0xe28, Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0xe34, Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0xe40, Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0xe4c, Size: 12]
	delegate OnClientCurrentVehicleChange;//[Offset: 0xe58, Size: 12]
	delegate PostAttrModifiedDelegate;//[Offset: 0xe64, Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xea0, Size: 12]
	delegate AnimMontagePlayExtraDelegate;//[Offset: 0xeac, Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xeb8, Size: 12]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0xec4, Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xed0, Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xedc, Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xee8, Size: 12]
	delegate OnCharacterShootBulletDelegate;//[Offset: 0xef4, Size: 12]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xf00, Size: 12]
	delegate OnCharacterEndViewTarget;//[Offset: 0xf0c, Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xf18, Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xf24, Size: 12]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0xf30, Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0xf3c, Size: 12]
	delegate OnRequestPaintDecalDelegate;//[Offset: 0xf48, Size: 12]
	delegate OnPawnExitParachute;//[Offset: 0xf54, Size: 12]
	delegate SetClimbAnimationDelegate;//[Offset: 0xf60, Size: 12]
	delegate OnCanVaultFlagChangeDelegate;//[Offset: 0xf6c, Size: 12]
	delegate OnPreRepAttachment;//[Offset: 0xf78, Size: 12]
	delegate OnPostRepAttachment;//[Offset: 0xf84, Size: 12]
	delegate OnCalcPickUpItemFlow;//[Offset: 0xf90, Size: 12]
	delegate OnCalcUseItemFlow;//[Offset: 0xf9c, Size: 12]
	delegate OnReceivePlayerKey;//[Offset: 0xfa8, Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xfb4, Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xfb8, Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xfbc, Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xfc0, Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xfc4, Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xfc8, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfcc, Size: 1]
	bool bOnlyInvincibleToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfcd, Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfce, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfce, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xfd0, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd4, Size: 1]
	float Money;//[Offset: 0xfd8, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdc, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfdd, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfdd, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfde, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdf, Size: 1]
	bool bShootSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe0, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xfe4, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfe8, Size: 1]
	bool bStandAloneUnlimitBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe9, Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfea, Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfeb, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfec, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xff4, Size: 4]
	bool bCanBeHitWhenHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff9, Size: 1]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xffc, Size: 4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0x1000, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0x1004, Size: 4]
	FName HeadSocketName;//[Offset: 0x1008, Size: 8]
	FName LFootSocketName;//[Offset: 0x1010, Size: 8]
	FName RFootSocketName;//[Offset: 0x1018, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0x1020, Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0x1024, Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0x1028, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0x102c, Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0x1030, Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0x1034, Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0x1038, Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0x1040, Size: 12]
	byte PoseState;//[Offset: 0x104c, Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0x1050, Size: 4]
	Actor* ThePlane;//[Offset: 0x1054, Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0x1058, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0x105c, Size: 12]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1068, Size: 1]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1069, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106a, Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 1]
	float VaultCheckBroadcastInterval;//[Offset: 0x107c, Size: 4]
	bool bEnableSinkEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x1084, Size: 4]
	RepMovementKeyLoc RepMovementKeyLoc;//[Offset: 0x108c, Size: 36]
	byte ClientSidePoseState;//[Offset: 0x10b4, Size: 1]
	float RadialDamageScale;//[Offset: 0x10b8, Size: 4]
	float RadialDamageReduce;//[Offset: 0x10bc, Size: 4]
	float MomentumResistanceScale;//[Offset: 0x10c0, Size: 4]
	float MomentumResistanceFixed;//[Offset: 0x10c4, Size: 4]
	float ProcessServerLastTransformUpdateTimeStamp;//[Offset: 0x10c8, Size: 4]
	RepMovement ProcessReplicatedMovement;//[Offset: 0x10d0, Size: 72]
	RepMovement NetReplicatedMovement;//[Offset: 0x1118, Size: 72]
	bool bHasNetRepMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1160, Size: 1]
	bool bHasProcessRepMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1161, Size: 1]
	float NetServerLastTransformUpdateTimeStamp;//[Offset: 0x1164, Size: 4]
	float MoveOptimizeChangeCD;//[Offset: 0x116c, Size: 4]
	byte LastPoseState;//[Offset: 0x1174, Size: 1]
	float LastSwitchCharPoseTime;//[Offset: 0x1178, Size: 4]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1190, Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0x1194, Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119c, Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119d, Size: 1]
	bool bAttachmentRepNotifyAlways;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119e, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119f, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0x11a0, Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a4, Size: 1]
	bool bRespawnResetAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a5, Size: 1]
	bool bRespawnClearAttrModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a6, Size: 1]
	bool bRespawnClearAllbuffs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a7, Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0x11a8, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x11ac, Size: 12]
	Actor*[] PlayerSlotData;//[Offset: 0x11b8, Size: 12]
	Actor*[] InventoryData;//[Offset: 0x11c4, Size: 12]
	AkComponent* SoundComp;//[Offset: 0x121c, Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0x1220, Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1224, Size: 1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1225, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0x1228, Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0x122c, Size: 4]
	AkAudioEvent* AkHitHeadWithHelmet;//[Offset: 0x1230, Size: 4]
	AkAudioEvent* AkHitHeadWithoutHelmet;//[Offset: 0x1234, Size: 4]
	enum[] ModesIgnoreHitHead;//[Offset: 0x1238, Size: 12]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x1244, Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0x1280, Size: 4]
	Vector2D MeshContainerDefaultOffsetXY;//[Offset: 0x1284, Size: 8]
	int CurrentTaskTriggerAreaID;//[Offset: 0x128c, Size: 4]
	float ProduceSoundInterval;//[Offset: 0x1290, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0x1294, Size: 4]
	float HearRadius;//[Offset: 0x1298, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a8, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a9, Size: 1]
	byte EnsureStyle;//[Offset: 0x12aa, Size: 1]
	uint32 EnsureLevel;//[Offset: 0x12ac, Size: 4]
	int MLEnsureStyle;//[Offset: 0x12b0, Size: 4]
	Actor* WaterObj;//[Offset: 0x12b4, Size: 4]
	byte DSHitPartJudgment;//[Offset: 0x12b9, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x12bc, Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x12c0, Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x12c4, Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c8, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0x12cc, Size: 4]
	float NearDeathBreath;//[Offset: 0x12d0, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d4, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x12d8, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e0, Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0x12e4, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x12e8, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x12f0, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x12f8, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x1300, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x1308, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1310, Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0x134c, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x1358, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x1364, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x1368, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x1374, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x1378, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x137c, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x1384, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x1390, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x1394, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x1398, Size: 4]
	float ScopeLagScale;//[Offset: 0x13a0, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x13a4, Size: 4]
	float ScopeFov;//[Offset: 0x13a8, Size: 4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ac, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x13b0, Size: 4]
	bool bAIDropToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b4, Size: 1]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x13b8, Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x13bc, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x13c0, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x13c4, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x13c8, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x13d4, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e0, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x13e4, Size: 4]
	bool bFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e8, Size: 1]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x13ec, Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x13f0, Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0x13f4, Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x13f8, Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0x13fc, Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x1400, Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1404, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x1408, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x1418, Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x1424, Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x1430, Size: 12]
	delegate OnMovementBaseChanged;//[Offset: 0x143c, Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1448, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1449, Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144a, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x144c, Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0x1450, Size: 4]
	Rotator ProneCapsuleRelativeRotation;//[Offset: 0x1454, Size: 12]
	Vector ProneBoxRelativeLocation;//[Offset: 0x1460, Size: 12]
	float DamageCauserRecordKeepTime;//[Offset: 0x146c, Size: 4]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x1470, Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x147c, Size: 12]
	<STExtraPlayerState*,int> PlayerLastDamageTime;//[Offset: 0x1488, Size: 60]
	int MaxRecordOvertimeAssistTime;//[Offset: 0x14c4, Size: 4]
	float LastDamageTime;//[Offset: 0x14c8, Size: 4]
	float OutOfContestConfig;//[Offset: 0x14cc, Size: 4]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x14d0, Size: 4]
	bool AttackerNeedReceiveDamageRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d4, Size: 1]
	float PickUpRadius;//[Offset: 0x14d8, Size: 4]
	bool bSyncCameraByChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14dc, Size: 1]
	SimLocalViewData SimulateViewData;//[Offset: 0x14e0, Size: 16]
	SimViewData NetSimulateViewData;//[Offset: 0x14f0, Size: 6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1504, Size: 1]
	bool bShouldIgnorePVSTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c0, Size: 1]
	<int,class AnimInstance> SkillSubAnimInstances;//[Offset: 0x15dc, Size: 60]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1620, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1648, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x165c, Size: 12]
	float JumpCheckImmediatelyBlockZVelocityRate;//[Offset: 0x1668, Size: 4]
	bool bLandedHitVehicleSameTeamIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166c, Size: 1]
	float fLandedHitVehicleSameTeamIgnoreDamageCount;//[Offset: 0x1670, Size: 4]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x1674, Size: 12]
	bool bCanSwitchUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1680, Size: 1]
	bool bCanSwitchToSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1681, Size: 1]
	float LastPlayFallSoundTime;//[Offset: 0x1684, Size: 4]
	delegate OnPlayWeaponSound;//[Offset: 0x1688, Size: 12]
	float MaxDispalyFootprintDistance;//[Offset: 0x1694, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x1698, Size: 12]
	Vector DefaultMeshLoc;//[Offset: 0x16a4, Size: 12]
	InteractiveMoveActor* CurrentInteractiveMoveActor;//[Offset: 0x16b0, Size: 4]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x16b4, Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x16b8, Size: 4]
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x16bc, Size: 4]
	class AnimInstance* AvatarAnimClassCache;//[Offset: 0x16c0, Size: 4]
	bool IsNetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c4, Size: 1]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c5, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x16c8, Size: 4]
	float EmoteAnimLastTime;//[Offset: 0x16cc, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x16d0, Size: 12]
	delegate EmoteReadyToPlayNext;//[Offset: 0x16dc, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x16e8, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x16f4, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x1700, Size: 40]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1728, Size: 1]
	bool bStopEmoteLoadCallbackWhenCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1729, Size: 1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x172c, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x1730, Size: 4]
	<int,bool> DanceEmoteMap;//[Offset: 0x1734, Size: 60]
	bool bEnablePlayerPickUpAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1798, Size: 1]
	bool bEnablePlayerDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1799, Size: 1]
	bool bRecordKillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179a, Size: 1]
	float AIThrowPitch;//[Offset: 0x179c, Size: 4]
	Vector2D AISpeedScale;//[Offset: 0x17a0, Size: 8]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0x17a8, Size: 4]
	bool bValidCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ac, Size: 1]
	bool bExtraSwitchToGrenadeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ad, Size: 1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x17b0, Size: 60]
	<int,enum> PawnStateRelatedBuffIDMap;//[Offset: 0x17ec, Size: 60]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x1828, Size: 12]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1834, Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1835, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x1838, Size: 4]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x183c, Size: 12]
	float LastSyncHealthChange;//[Offset: 0x1848, Size: 4]
	StaticMeshComponent* ScopComp;//[Offset: 0x184c, Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x185c, Size: 4]
	int[] DisableConfigAttrPoseMoveIndexs;//[Offset: 0x1860, Size: 12]
	float voiceCheckCD;//[Offset: 0x186c, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x1870, Size: 4]
	float voiceCheckDis;//[Offset: 0x1874, Size: 4]
	float voiceCheckDisInParachute;//[Offset: 0x1878, Size: 4]
	bool voiceCheckInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x187c, Size: 1]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x1880, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x189c, Size: 60]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x18d8, Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x18e8, Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0x18ec, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x18f0, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x18f4, Size: 4]
	int HandFolderRatio;//[Offset: 0x18f8, Size: 4]
	float SwimUpRate;//[Offset: 0x18fc, Size: 4]
	PlayerSwimComponent* SwimComponet;//[Offset: 0x1900, Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1905, Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1906, Size: 1]
	WeaponRecordDataForReplay WeaponRecordDataForReplay;//[Offset: 0x1910, Size: 12]
	bool SkipCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191c, Size: 1]
	bool bIsOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191d, Size: 1]
	float UpdateAIPawnInfoTime;//[Offset: 0x1920, Size: 4]
	PickUpItemData[] CacheDropList;//[Offset: 0x1928, Size: 12]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1934, Size: 1]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1935, Size: 1]
	bool bForceDiffStateOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1936, Size: 1]
	Vector MoveInputState;//[Offset: 0x196c, Size: 12]
	byte MovementInputReplication;//[Offset: 0x1978, Size: 1]
	float SwitchPoseCD;//[Offset: 0x199c, Size: 4]
	float SwitchPoseStartTime;//[Offset: 0x19a0, Size: 4]
	float SwitchPerspectiveStartTime;//[Offset: 0x19a4, Size: 4]
	bool bWatchProneStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a8, Size: 1]
	bool bHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c0, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x19d4, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x19dc, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x19f0, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1a20, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1a68, Size: 4]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x1a6c, Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1a70, Size: 4]
	float DelayHideDuration;//[Offset: 0x1a74, Size: 4]
	float DelayResetStandDuration;//[Offset: 0x1a78, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1a7c, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a80, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x1a84, Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa8, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1aac, Size: 192]
	AnimParamList CurAnimParamList;//[Offset: 0x1b6c, Size: 316]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1ca8, Size: 184]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x1d60, Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x1d90, Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x1db0, Size: 32]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x1dd0, Size: 12]
	byte ThrowGrenadeMode;//[Offset: 0x1ddc, Size: 1]
	bool bShowHPFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dec, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ded, Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dee, Size: 1]
	bool IsClientPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1def, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x1df0, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1df8, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1dfc, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1e00, Size: 4]
	float HighWalkSpeed;//[Offset: 0x1e18, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1e1c, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x1e20, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1e24, Size: 4]
	float MaxProneSpeed;//[Offset: 0x1e28, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1e2c, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x1e30, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1e34, Size: 4]
	float HealthPredict;//[Offset: 0x1e38, Size: 4]
	float BreathAmount;//[Offset: 0x1e3c, Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e40, Size: 1]
	int PoisonSmogStage;//[Offset: 0x1e44, Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1e48, Size: 4]
	float AntidoteExeTime;//[Offset: 0x1e4c, Size: 4]
	float AntidoteMaxTime;//[Offset: 0x1e50, Size: 4]
	float SpeedDynamicScale;//[Offset: 0x1e54, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1e58, Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1e5c, Size: 12]
	byte HealthStatus;//[Offset: 0x1e68, Size: 1]
	byte LastHealthStatus;//[Offset: 0x1e69, Size: 1]
	delegate OnHealthStatusChangeDelegate;//[Offset: 0x1e6c, Size: 12]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x1e78, Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb4, Size: 1]
	float SpeedRate;//[Offset: 0x1eb8, Size: 4]
	float EnergySpeedScale;//[Offset: 0x1ebc, Size: 4]
	float RecoveryScale;//[Offset: 0x1ec0, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x1ec4, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x1ec8, Size: 4]
	float SwitchWeaponSpeedScale;//[Offset: 0x1ecc, Size: 4]
	BackpackReplayData BackpackReplayData;//[Offset: 0x1ed0, Size: 32]
	CharacterEnergyData Energy;//[Offset: 0x1ef0, Size: 52]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x1f24, Size: 12]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f30, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1f34, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1f38, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1f3c, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x1f40, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1f48, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1f4c, Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x1f54, Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f58, Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x1f5c, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1f60, Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1f64, Size: 4]
	float StandHalfHeight;//[Offset: 0x1f68, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x1f6c, Size: 4]
	float ProneHalfHeight;//[Offset: 0x1f70, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1f74, Size: 4]
	float StandRadius;//[Offset: 0x1f78, Size: 4]
	float DyingRadius;//[Offset: 0x1f7c, Size: 4]
	float DyingBeCarriedRadius;//[Offset: 0x1f80, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x1f84, Size: 12]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x1f90, Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x1f9c, Size: 4]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fac, Size: 1]
	delegate InAssistantStateDelegate;//[Offset: 0x1fb0, Size: 12]
	Actor* CurrentAttachParent;//[Offset: 0x1fbc, Size: 8]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc4, Size: 1]
	RepVehicleAttachment VehicleReplication;//[Offset: 0x1fc8, Size: 24]
	RepVehicleAttachment CurrentVehicleAttachment;//[Offset: 0x1fe0, Size: 24]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x1ffc, Size: 4]
	float LastVehicleDamageCD;//[Offset: 0x2000, Size: 4]
	float LastLeaveVehicleTime;//[Offset: 0x2004, Size: 4]
	int VehicleSeatIdx;//[Offset: 0x2008, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2012, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x2014, Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2030, Size: 1]
	PredictLineComponent* PredictLineComp;//[Offset: 0x2034, Size: 4]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x2038, Size: 4]
	PlayEmoteComponent* PlayEmoteComponent;//[Offset: 0x203c, Size: 4]
	CharacterPlayEmoteComponent* CharacterPlayEmoteComponent;//[Offset: 0x2040, Size: 4]
	CharacterFormationComponent* FormationComponent;//[Offset: 0x2044, Size: 4]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x2048, Size: 4]
	delegate OnAttachedToVehicle;//[Offset: 0x2088, Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x2094, Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x20a0, Size: 12]
	delegate OnPlayerStateUpdated;//[Offset: 0x20ac, Size: 12]
	float MaxLeaveVehicleVelocity;//[Offset: 0x20d0, Size: 4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x20e0, Size: 12]
	Rotator AngledSightRotOffset;//[Offset: 0x20ec, Size: 12]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x21fc, Size: 4]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2200, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x2204, Size: 4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x2220, Size: 60]
	STParachuteState STReplicateParchuteState;//[Offset: 0x225c, Size: 24]
	SlideMoveData SlideMoveData;//[Offset: 0x2274, Size: 20]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x2288, Size: 4]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x228c, Size: 48]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22bc, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x22c0, Size: 4]
	float MoveRightInputValue;//[Offset: 0x22c4, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c8, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x22cc, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d0, Size: 1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d1, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x22d4, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x22d8, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x22e0, Size: 4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x22e4, Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x22f0, Size: 4]
	enum FollowState;//[Offset: 0x22f4, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x22f8, Size: 12]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x2304, Size: 12]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x2310, Size: 12]
	FString LatestInviter;//[Offset: 0x231c, Size: 12]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2328, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x236c, Size: 4]
	float maxShowAlpha;//[Offset: 0x2374, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x2378, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x237c, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x2380, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x23ac, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x23b0, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x23b4, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23fc, Size: 1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x240c, Size: 12]
	float CollectPlayerRouteInterval;//[Offset: 0x241c, Size: 4]
	int IsEnableReportRoute;//[Offset: 0x24a0, Size: 4]
	int CurrentPlayEmoteId;//[Offset: 0x24a8, Size: 4]
	bool IsHandedWeaponBeforePlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b4, Size: 1]
	Vector EmoteColBox;//[Offset: 0x24e8, Size: 12]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x24f4, Size: 60]
	int IsEnableLogAIPlayerPos;//[Offset: 0x2538, Size: 4]
	float CompVisionOpDis;//[Offset: 0x253c, Size: 4]
	float CompVisionOpDelay;//[Offset: 0x2540, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2544, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x2554, Size: 60]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2590, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x2598, Size: 4]
	float MaxRelavantDistanceSquared;//[Offset: 0x259c, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x25a0, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x25a4, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x25a8, Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x25ac, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x25b0, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x25b4, Size: 4]
	bool EnableDyingInVehicleMeshCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b8, Size: 1]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b9, Size: 1]
	BaseFPPComponent* FPPComp;//[Offset: 0x25c0, Size: 4]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x25c4, Size: 4]
	UAEChaCustomAnimListComponent* OwnedChaCustomAnimComp;//[Offset: 0x25c8, Size: 4]
	float ClientSwitchWeaponDeltaTime;//[Offset: 0x25d4, Size: 4]
	float ClientCallSwitchWeaponDur;//[Offset: 0x25d8, Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25dc, Size: 1]
	bool bExitingParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25dd, Size: 1]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25de, Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x25e0, Size: 12]
	float CharacterFallingVelocityZFactor;//[Offset: 0x25f0, Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2608, Size: 1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2609, Size: 1]
	int AloneDistance;//[Offset: 0x2610, Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x2614, Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x2620, Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x2648, Size: 4]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x264c, Size: 4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x2650, Size: 12]
	SoftObjectPath ChangeWearingIconPath;//[Offset: 0x26a0, Size: 24]
	Vector ChangeWearingColBox;//[Offset: 0x26b8, Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x26c8, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26cc, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26cd, Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x26d0, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x26d4, Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x26d8, Size: 4]
	Actor* DecalActor;//[Offset: 0x26dc, Size: 4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e0, Size: 1]
	float OutBattleStateTime;//[Offset: 0x26e4, Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x26ec, Size: 12]
	delegate OnCharacterPlayEmote;//[Offset: 0x26f8, Size: 12]
	delegate OnAutonomousCharacterPlayEmote;//[Offset: 0x2704, Size: 12]
	delegate OnCharacterWin;//[Offset: 0x2710, Size: 12]
	delegate OnCharacterFallingModeChange;//[Offset: 0x271c, Size: 12]
	Vector LastServerHitImpactPoint;//[Offset: 0x2728, Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x2734, Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x2735, Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2736, Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x2738, Size: 12]
	int MonsterDamageReduceSkillID;//[Offset: 0x2744, Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x2748, Size: 60]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x2784, Size: 4]
	STExtraBaseCharacter* InteractionEmoteReceiver;//[Offset: 0x2788, Size: 4]
	float DSMaxSpeedForReplay;//[Offset: 0x2798, Size: 4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a1, Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x27a4, Size: 12]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x27b0, Size: 4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x27b4, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x27c4, Size: 252]
	byte MeleeAutoAimType;//[Offset: 0x28c0, Size: 1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28cc, Size: 1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x28d0, Size: 32]
	CharacterHide CharacterHide;//[Offset: 0x28f0, Size: 12]
	float CharacterShowWeaponTime;//[Offset: 0x28fc, Size: 4]
	bool bForbiddenRespawnAfterConstructSetClientLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2902, Size: 1]
	enum CharacterMainType;//[Offset: 0x2903, Size: 1]
	enum CharacterSubType;//[Offset: 0x2904, Size: 1]
	delegate BulletTrackShowDelegate;//[Offset: 0x2908, Size: 12]
	delegate OnClientHoldGrenadeStateChange;//[Offset: 0x2914, Size: 12]
	delegate MarkPlayerPosDelegate;//[Offset: 0x2920, Size: 12]
	delegate OnPlayerOpenDoorDelegate;//[Offset: 0x292c, Size: 12]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x2938, Size: 4]
	PlayerMantleComponent* VaultControllerComp;//[Offset: 0x293c, Size: 4]
	CharacterAnimShareParamsComp* AnimParamsComponent;//[Offset: 0x2940, Size: 4]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2944, Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2945, Size: 1]
	bool bEnableSetMeshUpdateFlagInBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2946, Size: 1]
	delegate OnUseSpringJump;//[Offset: 0x2948, Size: 12]
	float LastSprintTriggerTime;//[Offset: 0x2954, Size: 4]
	float FallingTime;//[Offset: 0x295c, Size: 4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2960, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2961, Size: 1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2962, Size: 1]
	Actor* MyConstActor;//[Offset: 0x2964, Size: 4]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2968, Size: 1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x296c, Size: 12]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x2978, Size: 4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x2980, Size: 4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x298c, Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x2990, Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x2994, Size: 4]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a1, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a2, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x29a4, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x29ac, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x29c0, Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x29f0, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x29f4, Size: 12]
	float ParticleShowingInterval;//[Offset: 0x2a00, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a08, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a09, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x2a10, Size: 40]
	Vector MoveAdditionalSpeed;//[Offset: 0x2a38, Size: 12]
	int CharacterMovementReplicatID;//[Offset: 0x2a44, Size: 4]
	int CharacterReplicatID;//[Offset: 0x2a48, Size: 4]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x2a4c, Size: 4]
	float RTNoDamageTime;//[Offset: 0x2a50, Size: 4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a54, Size: 1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5c, Size: 1]
	float MinWingUpControlTime;//[Offset: 0x2a68, Size: 4]
	WidgetComponent* PlayerInfoWidgetComp;//[Offset: 0x2a6c, Size: 4]
	FString DebugInfoWidgetPath;//[Offset: 0x2a70, Size: 12]
	FString DebugInfoWidgetRefreshFunName;//[Offset: 0x2a7c, Size: 12]
	Vector DebugInfoLocation;//[Offset: 0x2a88, Size: 12]
	Actor* ACurrentFloor;//[Offset: 0x2a94, Size: 8]
	bool IsMotifyAutoUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9c, Size: 1]
	bool IsMotifyAttackerByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9d, Size: 1]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x2aa0, Size: 4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x2aa4, Size: 4]
	float[] AIHotValueDebugInfo;//[Offset: 0x2aa8, Size: 12]
	Actor*[] OverlapDarkAreas;//[Offset: 0x2ab4, Size: 12]
	float SwimmingSwitchMovementModeCD;//[Offset: 0x2ac0, Size: 4]
	int PrepareEmoteId;//[Offset: 0x2ac8, Size: 4]
	FString EmoteSouceEventName;//[Offset: 0x2acc, Size: 12]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2ad8, Size: 4]
	bool bIsInUnderGroundArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2adc, Size: 1]
	bool bIsAroundUndergroundEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2add, Size: 1]
	bool bIsSkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ade, Size: 1]
	bool bMoveHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2adf, Size: 1]
	uint32 SightVisionMask;//[Offset: 0x2ae0, Size: 4]
	bool bUnderWaterPoseCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae5, Size: 1]
	bool bReviseIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae6, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae7, Size: 1]
	int nRepShoulderState;//[Offset: 0x2ae8, Size: 4]
	int nCurShoulderStateCount;//[Offset: 0x2aec, Size: 4]
	bool bForceChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af0, Size: 1]
	bool bSkillLockChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af1, Size: 1]
	bool bEmoteLockChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af2, Size: 1]
	float SimulateFootstepQueryInternal;//[Offset: 0x2b88, Size: 4]
	<int> NotDownloadPetIDs;//[Offset: 0x2b94, Size: 60]
	bool bDisableAttachRepInBeCarried;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd0, Size: 1]
	NetCarryBackState NetCarryBackState;//[Offset: 0x2bd4, Size: 12]
	STCharacterCarryBackComp* CarryBackComponent;//[Offset: 0x2be0, Size: 4]
	DynamicOptimizeActorComponents* DynamicOptimizeActorComponent;//[Offset: 0x2be4, Size: 4]
	delegate OnCharacterHiddenStateChange;//[Offset: 0x2be8, Size: 12]
	BattleRoyaleGameMode* CachedGameMode;//[Offset: 0x2bf4, Size: 4]
	bool EnablePlayEmoteAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf9, Size: 1]
	float DefaultEmoteFollowCheckTime;//[Offset: 0x2bfc, Size: 4]
	float DefaultEmoteFollowCheckRange;//[Offset: 0x2c00, Size: 4]
	float DefaultCoopEmoteCheckInterval;//[Offset: 0x2c04, Size: 4]
	float DefaultCoopEmoteCheckRange;//[Offset: 0x2c08, Size: 4]
	float CoopEmoteTargetOffset;//[Offset: 0x2c0c, Size: 4]
	float CoopEmoteCheckGroundHeight;//[Offset: 0x2c10, Size: 4]
	bool bFollowEmoteNeedRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c14, Size: 1]
	STExtraBaseCharacter* CachedCoopEmotePlayer;//[Offset: 0x2c24, Size: 8]
	BlowUpData CurrentBlowUpData;//[Offset: 0x2c40, Size: 44]
	delegate OnBlowUpCharacter;//[Offset: 0x2c6c, Size: 12]
	bool bNeedPlayVehicleEnterMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c80, Size: 1]
	bool EnableAireBorneAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c81, Size: 1]
	bool UseNewParachuteMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c82, Size: 1]
	float AirBornCanCurrentAbsoluteMaxHight;//[Offset: 0x2c84, Size: 4]
	float PawnCreateTime;//[Offset: 0x2c88, Size: 4]
	float PawnDestroyTime;//[Offset: 0x2c8c, Size: 4]
	float CheckCanStandOffset;//[Offset: 0x2c90, Size: 4]
	byte MoveSpeedParamMonitorStrategy;//[Offset: 0x2c94, Size: 1]
	NetMoveSpeedParameter ReplicatedServerMoveSpeedParam;//[Offset: 0x2c98, Size: 20]
	NetMoveSpeedParameter ReplicatedClientMoveSpeedParam;//[Offset: 0x2cac, Size: 20]
	float ExceptionMonitorInterval;//[Offset: 0x2cc4, Size: 4]
	int ExceptionMonitorHitTimes;//[Offset: 0x2cc8, Size: 4]
	<int,enum> AttrStateMap;//[Offset: 0x2ccc, Size: 60]
	float LowMoveSpeedThreshold;//[Offset: 0x2d08, Size: 4]
	bool bReportedModifierException;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0c, Size: 1]
	bool bReportedSpeedException;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0d, Size: 1]
	SplineMoveInfo SplineMoveInfo;//[Offset: 0x2d1c, Size: 8]
	delegate OnServerPlayerTryEnterSpline;//[Offset: 0x2d24, Size: 12]
	delegate OnClientPlayerLeaveSpline;//[Offset: 0x2d30, Size: 12]
	delegate CanOpenWorldPawnCollision;//[Offset: 0x2d40, Size: 16]
	delegate OnCharacterCameraModeChange;//[Offset: 0x2d50, Size: 12]
	bool bInVerticalZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5c, Size: 1]
	delegate CharacterDoJump;//[Offset: 0x2d60, Size: 12]
	bool bViewSelfWhenDeathReplayFakeAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6c, Size: 1]
	AnimInstance*[] PawnCachedSubInstances;//[Offset: 0x2d70, Size: 12]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x39325e8
	void VaultFailPawnCPP(const FString Content);// 0x3932524
	void VaultFailPawnBluePrint(out const FString Content);// 0x3932450
	bool ValidCalculate();// 0x3932428
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x393236c
	void UseSpringJump(int SpringID);// 0x39322f4
	void UserCancelRescue();// 0x39322e0
	bool UpdateShovelingState();// 0x39322b8
	void UpdateShovelingHoldStateRelease();// 0x39322a4
	void UpdateShovelingHoldStatePressed();// 0x3932290
	void UpdatePoseCollisionCpp(byte CurState, byte preState);// 0x39321d4
	void UpdateFallingTime(float Delta);// 0x393215c
	void UpdateDynamicHoldGunOption();// 0x3932148
	void UpdateCurrentShootWeaponTick();// 0x3932134
	void UpdateCurrentEmoteState();// 0x3932120
	void UpdateAttrValue(FString AttrName, float Val, int Reason, bool bSet);// 0x3931f8c
	void UpdateAllInstanceBodyTransform(int Type);// 0x3931f14
	void UnequipWeaponFinish();// 0x3592f9c
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x3931e50
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadshot, Actor* DamageCauser);// 0x3931c88
	void TryReplaySpecialMontage();// 0x3931c74
	void TryRecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x3931bb8
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x3931ae8
	bool TryFollowInitialParachuteLeader(FString Name);// 0x3931988
	bool TriggerEntrySkillWithParams(int SkillID, out const FString[] InKeyStrings, bool bEnable);// 0x39317a8
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x39316d4
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(byte NewMode, byte PrevMode);// 0x4a51734
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x4a51734
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x3931570
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x39314f0
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x393141c
	bool SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x39312ac
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x393118c
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bSwitchToNoneWhenNoWeapon);// 0x3931018
	bool SwitchToGrenadeCheck(int GrenadeID);// 0x3930f90
	void SwitchShoulderStateServer(bool bShoulder, int nClientShouldState);// 0x3930e80
	void SwitchShoulderStateLocal(bool bShoulder);// 0x3930df8
	void SwitchShoulderState(bool bShoulder);// 0x3930d78
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x3930bb8
	void SwapMainWeapon();// 0x3930ba4
	void STServerUpdateStateUnreliaby(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x3930a1c
	void STServerUpdateStateDirectly(float InThrottleInput, float InSteeringInput, Vector InLocalVelocity);// 0x39308c0
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x3930738
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x3930628
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x39305a8
	void StopMove();// 0x3930594
	void StopLastEmoteParticle();// 0x3930580
	bool StopFireFilter();// 0x3930550
	void StopFire();// 0x393053c
	void StopFillGas();// 0x3930528
	bool StopChangeWearingAnim();// 0x3930500
	void StopCarryBack(enum InDetachMethod);// 0x3930488
	void StopAnimMontageOriginal(AnimMontage* AnimMontage);// 0x3930410
	void StopAnimMontageExtra(AnimMontage* AnimMontage, FName IgnoreStopSection);// 0x3930354
	void StopAllMontages(FString GroupName);// 0x39301fc
	void StopAllAnimations(bool bStop);// 0x393017c
	void StartWaitRefreshShootDetailInfo();// 0x3930168
	bool StartPlayEmoteAnim(int EmoteIndex, uint32 FollowPlayerKey);// 0x39300a4
	void StartFireSimple(byte ShootMode);// 0x3930024
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x392ff9c
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x392fdb0
	void StartFillGas();// 0x392fd9c
	bool StartChangeWearingAnim();// 0x392fd74
	void SpawnFootprint(enum FootprintType);// 0x392fcfc
	void SpawnAndSwithToGrenadeServerCall(int InGrenadeID);// 0x392fc48
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(int GrenadeID);// 0x392fbc8
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(int GrenadeID);// 0x392fb48
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x392f98c
	void SimulatedPlayEmote(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x392f83c
	void ShowPlayerDebugInfo(bool bShow, FString[] BasicInfoKeys, FString[] DetailInfoKeys);// 0x392f410
	void ShowNightVisionFrame();// 0x392f3f4
	void ShowInjuryScreenEffect();// 0x392f3e0
	void ShowDebugRole();// 0x392f3cc
	void ShowDebugRecordData();// 0x392f3b8
	void ShowDebugPickUpFlow();// 0x392f3a4
	void ShowDebugEquipOrUnequipFlow();// 0x392f390
	void ShowDebugBornLandFlow();// 0x392f37c
	void ShowConfirmDialogOfMisKill();// 0x392f360
	bool ShouldUpdateHPOnUI();// 0x392f330
	bool ShouldShowCorp();// 0x392f308
	bool ShouldShowCoopEmoteBtn(EmotePlayer EmotePlayer);// 0x392f23c
	bool ShouldForceFPP();// 0x392f214
	bool ShouldCheckCoopEmote();// 0x392f1e4
	bool ShouldAutoScopeWhenPeek();// 0x392f1b4
	enum ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x392f0cc
	void SeverParachuteSimualteDrag(uint32 DragCount);// 0x392f018
	void SetWeaponShootType(byte ShootType);// 0x392efa0
	void SetViewTargetAgainForOB();// 0x392ef8c
	void SetThrowGrenadeMode(byte ThrowMode);// 0x392ef14
	void SetTargetPlayer(STExtraBaseCharacter* InTargetPlayer);// 0x392ee9c
	void SetSightVision(bool Enable, enum Flag);// 0x392edd4
	void SetSightCondition(bool Enable, enum Flag);// 0x392edd4
	void SetRTNoDamageTimer(float Timer);// 0x392ed5c
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x392ec98
	void SetPrepareEmoteId(int InEmoteID);// 0x392ec20
	void SetPoseState(byte NewPoseState);// 0x392eba8
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x392eb20
	void SetOverrideCirclePainActor(Actor* CirclePainActor);// 0x392eaa8
	void SetMLEnsureStyle(int InMLStyle);// 0x392ea28
	void SetMeshForceAnimLOD(int InNewForceAnimLOD);// 0x392e9b0
	void SetMeshContainerOffsetZ(float Z);// 0x392e938
	void SetMeshContainerOffsetY(float Y);// 0x392e8c0
	void SetMeshContainerOffsetX(float X);// 0x392e848
	void SetMEnsure(bool bMValue);// 0x392e7c0
	void SetIsDuringTransferLeader(bool isTransfer);// 0x392e740
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x392e678
	void SetInsectCameraEnable(bool bEnable);// 0x392e5f8
	void SetHitAnimInfo(Actor* DamageCauser);// 0x392e580
	void SetHighWalkSpeed(float WalkSpeed);// 0x392e508
	void SetHealthSafety(float NewHealth, byte Reason);// 0x392e44c
	void SetHandFoldRatio(int Ratio);// 0x392e3d4
	static void SetExpandDataContent(out const byte[] Content);// 0x392e310
	void SetExitingParachute(bool ExitParachute);// 0x392e290
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x392e210
	void SetEnsureStyle(byte InStyle);// 0x392e198
	void SetEnsureLevel(uint32 InLevel);// 0x392e120
	void SetEnsure(bool bValue);// 0x392e098
	void SetEmoteSouceEventName(FString EventName);// 0x392df40
	void SetDelayStateSwitchTime(float DelayTime);// 0x392dec8
	void SetDefaultWaterHeight(float InDefaultWater);// 0x392de50
	void SetCurScopeFov(float InFov);// 0x392ddd8
	void SetCurrentVehicle(STExtraVehicleBase* InVehicle);// 0x392dd64
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool ForceSetting);// 0x392dc8c
	void SetCurrentFloor(Actor* floor);// 0x392dc14
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x392db48
	void SetCheatSpeedModifier(float NewModifier);// 0x392dac8
	void SetCharAnimUpdateFlag();// 0x392daac
	void SetCharAnimInstanceClass(class Object NewAnimClass, FString SetReason, bool bForceClearOldAnim);// 0x392d958
	void SetCharacterHideInGame(bool bHide, bool bStopTick, bool bCloseCollision, float fScale);// 0x392d7ec
	void SetChangeWearingPromptEnable(bool bShow);// 0x392d76c
	void SetBasePoseStateMachineSwitching(bool bIsSwitching);// 0x392d6ec
	void SetBaseBluePrint(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x392d5dc
	void SetAttachmentExtraData(int SeatIndex);// 0x392d564
	void SetAttachment(Actor* InAttachParent, SceneComponent* InAttachComponent, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D, FName AttachSocket);// 0x392d374
	void SetAntidoteMaxTime(float MaxTime);// 0x392d2fc
	void SetAntidoteExeTime(float ExeTime);// 0x392d284
	void SetAnimParamIsRescueing(bool Val);// 0x392d204
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x392d184
	void SetAnimParamClimbAnimTime(float ExplicitTime, bool bFlag);// 0x392d0c0
	void SetAnimParamClimbAnimSwitch(bool bFlag, float TransTime);// 0x392cff8
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x392cf78
	void SetAnimParamAlwaysLandLight(bool bAlwaysLandLight);// 0x392cef8
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x392ce3c
	void SetAnimListComponentChild(UAECharAnimListCompBase* ChildComp, bool Add, byte AddLayer, byte AnimOverrideType);// 0x392cce8
	void SetAmbientRTPC(FString RTPC, float Value);// 0x392cb4c
	void SetAIActive(bool bActive);// 0x392cacc
	void SetActorLocationServerAndClient(Vector Location);// 0x392ca5c
	bool SetActorLocationSafetyWithParams(Vector NewLocation, out const ResolvePenetrationParams ResolveParams);// 0x392c894
	bool SetActorLocationSafety(Vector NewLocation);// 0x392c81c
	void ServerUpdateShovelingHoldState(bool ishold);// 0x392c754
	void ServerTryEnterSpline(SplineComponent* InSpline, Vector EnterLocation, Rotator EnterRotation);// 0x392c5f4
	void ServerTriggerJump();// 0x392c598
	void ServerSetPoisonSmogStage(int SmogStage);// 0x392c520
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x392c3fc
	void ServerSetPeekCollision(bool HasCollision);// 0x392c334
	void ServerSetMovementStateNewReliable(byte Input);// 0x392c280
	void ServerSetMovementStateNew(byte Input);// 0x392c1cc
	void ServerSetMovementState(Vector Input);// 0x392c120
	void ServerSendToLobbyServerUseItem(int ItemId, int Count);// 0x392c064
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x392be80
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x392bccc
	void ServerOnCoopEmotePhaseChange(int CoopPhase);// 0x4a51734
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x392bb90
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x392bab0
	void ServerFollowTeammate(FString Name);// 0x392b9bc
	void ServerDropCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x392b908
	bool ServerCheckEmoteCanPlay(int EmoteIndex);// 0x392b880
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x392b7cc
	void ServerCancelFollow();// 0x392b770
	void SendServerMoveToClientUnreliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x392b638
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x392b500
	void SendServerMoveToAdjustClient(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x392b3c8
	void SendClientMoveToServerUnreliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x392b250
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x392b0d8
	void SendClientMoveToServerReliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x392af60
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x392ade8
	void SendClientMoveToServerAccurate(float TimeStamp, float ThrottleInput, float SteerInput, float GlidingSpeed, enum State, Rotator CameraRotation, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x392aadc
	void SendAckServerMoveToClient(float TimeStamp);// 0x392aa5c
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x392a938
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x392a834
	void Scoping(byte NewType);// 0x392a7bc
	void ScopeOut(byte NewType);// 0x392a744
	void ScopeInterrupt(byte NewType);// 0x392a6cc
	void ScopeIn(byte NewType);// 0x392a654
	void SaveMeshUpdateFlag();// 0x392a630
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x392a57c
	void RspPlayInteractionEmote(int EmoteId);// 0x392a4c8
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x392a440
	void RPC_Server_TriggerEntryEventWithParams(int SkillID, const FString[] InKeyStrings, bool bEnable);// 0x392a238
	void RPC_Server_TriggerEntryEventByID(int SkillID, bool bEnable);// 0x392a128
	void RPC_Server_SwitchWeaponShootInterval(STExtraShootWeapon* Weapon, enum Mode);// 0x392a02c
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x3929e60
	void RPC_Server_SwapMainWeapon();// 0x3929e04
	void RPC_Server_SpawnAndSwitchToGrenade(int GrenadeID);// 0x3929d50
	void RPC_Server_ShootVertifyFailAlarm(const enum VertifyRes, FString Tips);// 0x3929c14
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x3929b60
	void RPC_Server_SetCurScopeFov(float InFov);// 0x3929aac
	void RPC_Server_SetCoopEmotePhase(int CoopPhase);// 0x39299f8
	void RPC_Server_ReportSimulateCharacterLocation(STExtraBaseCharacter* MoveCharacter, const Vector Location, float TargetTime, int MoveType);// 0x392986c
	void RPC_Server_JoinCoopEmote(EmotePlayer EmotePlayer);// 0x392975c
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x3929700
	void RPC_Server_ChangeWeaponState(byte State, STExtraWeapon* Weapon);// 0x3929604
	void RPC_Server_ChangeToShootGrenade();// 0x39295a8
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x39294f4
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x3929440
	void RPC_Client_TeleportToFinish(bool bSuccess, Vector DestLocation, Rotator DestRotation);// 0x39292c0
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x39290f4
	void RPC_Client_SwapMainWeapon();// 0x3929098
	void RPC_Client_SpawnAndSwitchToGrenade(int GrenadeID);// 0x3928fe4
	void RPC_Client_ShootVertifyRes(const enum VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x3928e20
	void RPC_Client_ShootVertifyFailAlarm(const enum VertifyRes, FString Tips);// 0x3928ce4
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x3928c30
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x3928b7c
	void RPC_Client_OnNearDeathRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x3928a8c
	void RPC_Client_OnDeathStopRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x392899c
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x39286f4
	void RPC_Client_OnCoopEmotePhaseChange(int CoopPhase);// 0x3928640
	void RPC_Client_NoticeSimulateMoveErrorRange(STExtraBaseCharacter* MoveCharacter, float ErrorRange, float TimeDif);// 0x39284fc
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x3928408
	void RPC_Client_LeaveSpline(SplineComponent* InSpline);// 0x3928354
	void RPC_Client_DrawDebugSphere(Vector Center, float Radius, int Segments, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x39280e0
	void RPC_Client_DrawDebugLine(Vector LineStart, Vector LineEnd, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x3927eb0
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x3927e54
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x3927cfc
	void RestoreMeshUpdateFlag();// 0x3927cd8
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x3927b44
	void ResetValueLimitForHealthPredict();// 0x3927b30
	void ResetCharAnimInstanceClass(FString SetReason, bool bForceClearOldAnim);// 0x3927a20
	void ResetCharacterEnergy();// 0x3927a0c
	void ResetCharacter();// 0x39279f0
	void ResetCamera();// 0x39279dc
	void ResetAnimInstanceClass();// 0x39279c8
	void RequestWeaponStopFire(STExtraShootWeapon* ShootWeapon);// 0x3927950
	void RequestUserCancleRescue();// 0x39278f4
	void RequestServerSureLeaveVehicle();// 0x3927898
	void RequestServerAssistantTrackVehicle(bool bEnterAssistant);// 0x39277d0
	bool RequestPaintDecal(int DecalId);// 0x3927750
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x39275ac
	void ReqStartChangeWearing();// 0x3927550
	void ReqSetIsWingUpControl(bool IsUpControl);// 0x3927488
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x39273d4
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x3927290
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x39271dc
	void ReqInteruptChangeWearing();// 0x3927180
	void ReqEmotePlayFinished(int EmoteIndex);// 0x39270cc
	void ReqChangeWearingFinished(int Index);// 0x3927018
	void ReqAcceptInteractionEmote();// 0x3926fbc
	void ReportSpeedException();// 0x3926fa0
	void ReportPlayerLocationInfo();// 0x3926f8c
	void ReportExceptionOnVehicle(FString Type, FString Msg);// 0x4a51734
	void ReportAutonomousMoveSpeedParam(NetMoveSpeedParameter MoveSpeedParam);// 0x3926eac
	void ReportAttrException(int AttrIndex);// 0x3926e2c
	void ReportAntiCheatInfo();// 0x3592f9c
	void RemoveClientLeaveStateCheck(enum State);// 0x3926db4
	void RemoveBuffWhenGotoPlane();// 0x3926da0
	bool ReloadWeaponFilter();// 0x3926d70
	bool ReloadCurrentWeapon();// 0x3926d48
	void RegisterPlayerPickUpList();// 0x3926d34
	void RefreshVehicleReplication();// 0x3926d20
	void RefreshPersonPerspective();// 0x3926d0c
	void RefreshPawnVaultTypeServer();// 0x3926cb0
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x3926c28
	void RefreshMoveAttrModifier();// 0x3926c14
	void RefreshEmote();// 0x3926c00
	void RefreshAvatar(enum SlotType, bool IsEquipped, int ItemId);// 0x3926af4
	void RecordFinalParachuteLeader();// 0x3926ae0
	void RecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x3926a24
	void PrintAIPolicyDecisionData();// 0x3926a10
	bool PreSwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x39268a0
	void PreDoDrop(STExtraBaseCharacter* DamageCauser);// 0x3926828
	void PostGetPlayerAnimation();// 0x4a51734
	void PostCollectDropWrapperList();// 0x4a51734
	bool PoseOnGround(byte InPoseState);// 0x39267a0
	bool PlayWeaponSound(AkAudioEvent* WeaponSound, STExtraWeapon* Weapon);// 0x39266dc
	void PlaySwitchSightSound(bool IsScopeIn);// 0x392665c
	void PlaySwitchFireModeSound();// 0x3926648
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x39265d0
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime, const byte InLoopCount, const float InStartPos, const float LoopStartPos);// 0x39263a0
	void PlaySelfThrowAwayWeaponSound();// 0x392638c
	void PlayPullBoltSound();// 0x3926378
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x3926108
	void PlayMountAccessoriesSound();// 0x39260f4
	void PlayMagOUTSound();// 0x39260e0
	void PlayMagINSound();// 0x39260cc
	void PlayLocalShellDropFX();// 0x39260b8
	void PlayLoadBulletSound();// 0x39260a4
	void PlayFootstepSound(byte FootStepState);// 0x3926024
	bool PlayerConfirmToRescue();// 0x3925ffc
	void PlayEmoteSoundByEmoteId(int EmoteId);// 0x3925f84
	bool PlayEmote_Autonomous(int EmoteId);// 0x3925f04
	void PlayChangeMagazineSound();// 0x3925ef0
	float PlayAnimMontageExtra(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, bool bOnlyJumpToSectionWhilePlaying, FName IgnoreStopSection);// 0x3925d40
	void PlayAmbientSound();// 0x3925d2c
	void PickUpWrapperAttachmentItem(Actor* Target, out const PickUpItemData ItemData, enum PickupAttachmentID, ItemDefineID TargetDefineID);// 0x3925af8
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount, int BattleItemClientPickupType);// 0x39258d4
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x392578c
	void PawnVaultStopCPP();// 0x3925770
	void PawnVaultStopBluePrint();// 0x3925754
	void PawnVaultServerStopCheckCPP();// 0x39256f8
	void PawnVaultServerStopCheckBluePrint();// 0x39256dc
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x3925254
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x3924e78
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x3924b04
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x3924774
	void PawnLeaveState(enum State);// 0x39246f4
	bool PawnHasState(enum PawnState);// 0x392466c
	bool PawnEnterState(enum State);// 0x39245e4
	bool PawnAllowState(enum State, bool withLog);// 0x3924510
	void ParseServiceDebugInfo(out FString[] BasicInfoKeys, out FString[] DetailInfoKeys);// 0x39242cc
	void OnWeaponEquipmentUpdateHandled();// 0x39242b0
	void OnWeaponEquipmentUpdate();// 0x3924294
	void OnWeaponDropStart(STExtraShootWeapon* ShootWeapon);// 0x392421c
	void OnWeaponDropFinished(STExtraShootWeapon* ShootWeapon);// 0x39241a4
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x39240e0
	void OnUnEquipWeapon();// 0x4a51734
	void OnStatusChanged();// 0x39240c4
	void OnStateLeave(enum EnteredState);// 0x3924044
	void OnStateEnter(enum EnteredState);// 0x3923fc4
	void OnShowName(bool _IsShow, FString _Name);// 0x4a51734
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x3923f44
	void OnScopeNotHandFold();// 0x3923f30
	void OnScopeHandFold();// 0x3923f1c
	void OnRep_WaterObj();// 0x3923f08
	void OnRep_VehicleSeatIdx();// 0x3923ef4
	void OnRep_VehicleReplication();// 0x3923ee0
	void OnRep_UnmannedVehicleSyncData();// 0x3923ec4
	void OnRep_ThrowGrenadeMode(byte PrevMode);// 0x3923e4c
	void OnRep_Temperature(float LastValue);// 0x3923dcc
	void OnRep_SwitchWeaponSpeedScale();// 0x3923db8
	void OnRep_StatusChanged(byte prevStatus);// 0x3923d38
	void OnRep_SightVisionMask();// 0x3923d24
	void OnRep_ShowRevivalPointIcon();// 0x3923d08
	void OnRep_ShowHPFX();// 0x3923cf4
	void OnRep_ShoulderStateChanged();// 0x38a6324
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x3923ce0
	void OnRep_ScopeFov();// 0x3923ccc
	void OnRep_RespawnResetAnim();// 0x3923cb8
	void OnRep_ResetDataOnRespawn();// 0x3923ca4
	void OnRep_ReplicatedParachuteState();// 0x3592f9c
	void OnRep_ReplicatedMoveState();// 0x3923c90
	void OnRep_ReplicatedMovement();// 0x36b40f4
	void OnRep_ReplicatedIsStartParachute();// 0x3923c7c
	void OnRep_RemainUseSupplySpotTimes();// 0x3923c68
	void OnRep_RemainUseEnhancerSpotTimes();// 0x3923c54
	void OnRep_PoseStateNotify(byte LastState);// 0x3923bdc
	void OnRep_PoisonFogStageChange();// 0x3592f9c
	void OnRep_PlayerKey();// 0x3923bc0
	void OnRep_PeekHasCollision();// 0x3923bac
	void OnRep_NetSimulateViewData();// 0x3923b98
	void OnRep_MovementInputReplication();// 0x3923b84
	void OnRep_MoneyNotify();// 0x3923b70
	void OnRep_IsWingUpControl();// 0x3923b5c
	void OnRep_IsRescueingOtherStatusChange();// 0x3923b48
	void OnRep_IsInvincible();// 0x3923b2c
	void OnRep_IsFPPChanged();// 0x3923b10
	void OnRep_IsFakeOnVehicle();// 0x3923af4
	void OnRep_IsBeingRescuedStatusChange();// 0x3923ae0
	void OnRep_InAssistantState();// 0x3923acc
	void OnRep_HealthPredict();// 0x3923ab8
	void OnRep_HealthMax();// 0x3923a9c
	void OnRep_Health(float PrevHealth);// 0x3598d90
	void OnRep_HandFolderRatio();// 0x3923a88
	void OnRep_FollowState();// 0x3923a74
	void OnRep_EnergyChange();// 0x3923a60
	void OnRep_DestroyOnDeath();// 0x3923a4c
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x39239d4
	void OnRep_CurrentStates(uint64 prevStates);// 0x3923950
	void OnRep_CharacterHide();// 0x392393c
	void OnRep_CharacterFallingVelocityZFactor();// 0x3923928
	void OnRep_CarryBackStateChanged();// 0x392390c
	void OnRep_BreathAmmountChange();// 0x39238f8
	void OnRep_bIsCallingForRevival();// 0x39238e4
	void OnRep_AntidoteMaxTimeSync();// 0x3592f9c
	void OnRep_AntidoteExeTimeSync();// 0x3592f9c
	void OnRep_AngleSightRotOffsetChanged();// 0x39238d0
	void OnRep_AKEventNotify();// 0x39238bc
	void OnPreRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x4a51734
	void OnPostRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x4a51734
	void OnPostFlushHealthChangeHistoryOnServer();// 0x39238a0
	void OnPoseStateChange(byte LastState, byte CurState);// 0x4a51734
	bool OnPlayFollowEmote(int EmoteId, int FollowPlayerKey, bool bKeepFollowState);// 0x3923788
	void OnPlayEmoteStop(int EmoteIndex);// 0x3923710
	void OnPlayEmoteEnd(int EmoteIndex);// 0x3923698
	bool OnPlayEmote(int EmoteId);// 0x3923610
	void OnOverlapDarkArea(bool bIsBegin, Actor* DarkAreaActor);// 0x3923548
	void OnOpenDoor(PUBGDoor* Door, int DoorState);// 0x3923484
	void OnNotifyHurt();// 0x4a51734
	void OnNeedSetSpeedOverLimit();// 0x3923470
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x3923370
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x39231b4
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x392313c
	void OnInterruptCurrentEmote();// 0x3923128
	void OnInterruptChangeWearing();// 0x3923114
	void OnHealthChangeFromRPC(float PrevHealth, float InHealth);// 0x3923058
	void OnFollowStateChangedDelegate__DelegateSignature(enum LastFollowState, enum NewFollowState);// 0x4a51734
	void OnFollowStateChange();// 0x3923044
	void OnFollowNearPlayerEmote();// 0x3923030
	void OnFlushHealthChangeHistoryOnClient(out const float[] ChangeHistory);// 0x3922f5c
	void OnEquipWeapon(byte Slot);// 0x4a51734
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x3922ee4
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x3922e28
	void OnEndChangeWearing(int StopReason);// 0x3922db0
	void OnDetectPaintDecalTarget(bool bStart);// 0x4a51734
	void OnCurEquipedShootWeaponReloadLastBullet(int RemainReloadTimes);// 0x3922d30
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x3922c74
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x3922b74
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x3922a74
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x39229fc
	bool OnChangeWearing(int Index);// 0x392297c
	void OnBPMoneyChange();// 0x4a51734
	void OnBPIsInvincibleChange();// 0x4a51734
	void OnBPHealthChange();// 0x4a51734
	void OnBeforeGetUp();// 0x4a51734
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x392272c
	void OnAsyncLoadChangeWearingAnim();// 0x3922718
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3922574
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x392249c
	void NM_ForceSetPeekState(bool Enable, bool IsLeft);// 0x39223c4
	bool NeedHideWeapon(STExtraWeapon* Weapon, byte Slot);// 0x39222f8
	bool NeedHandleHitAnim(int DamageID, float MinDamageThreshold);// 0x392222c
	void MulticastStartPlayEmoteWithRandReliable(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3922088
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3921ee4
	void MulticastStartChangeWearing();// 0x3921e88
	void MulticastPlayerSoundByID(int SoundID);// 0x3921dd4
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x3921d20
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x3921c6c
	void MulticastInteruptChangeWearingOnServer();// 0x3921c10
	void MulticastInteruptChangeWearing();// 0x3921bb4
	void MoveCameraTo(Vector DestLocation, Rotator DestRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath);// 0x39219c8
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x3921948
	float Montage_GetPosition(const AnimMontage* AnimMontage);// 0x39218c8
	void MonitorAttrModifierException(float DeltaTime);// 0x3921850
	void MeleeServer();// 0x39217f4
	void MeleeReleased();// 0x39217e0
	void MeleeLocal();// 0x4a51734
	void MeleeBroadcastOtherClients();// 0x3921784
	void Melee(bool IsForCE);// 0x3921704
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x39216f0
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x3921678
	bool LocalSwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x3921508
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x39213e0
	bool LocalStartPlayEmote(int EmoteIndex, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x39212d0
	bool LocalStartChangeWearing();// 0x39212a8
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x3921228
	bool LocalInteruptChangeWearing();// 0x3921200
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot, enum TriggerType);// 0x3921100
	void LocalEquipProp(STExtraProp* Prop);// 0x3921088
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x3921008
	void LeaveState(enum State);// 0x3920f88
	void LeaveServerState(enum State);// 0x3920ed4
	void LeaveBattleState();// 0x3920ec0
	bool IsWeaponOwnerLocallyControlled();// 0x3920e90
	bool IsVisionOptimizationComponent(SceneComponent* InSceneComp);// 0x3920e10
	bool IsValidPaintDecalTarget_Simple();// 0x3920df0
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x3920cb8
	bool IsUsingGrenade();// 0x3920c90
	bool IsThermalImagingValid();// 0x3920c68
	bool IsTargetAnimClassSkeletonMatching(class Object TargetAnimClass);// 0x3920be0
	bool IsSwimOnWaterSuface();// 0x3920bb8
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x3920b38
	bool IsSameTeamWithLocal();// 0x3920b10
	bool IsSameTeam(Pawn* Other);// 0x3920a88
	bool IsSameCharAnimClass(class Object NewAnimClass);// 0x3920a08
	bool IsReplayViewTarget();// 0x39209e0
	bool IsProneMove();// 0x39209b8
	bool IsPlayingEmotes();// 0x3920990
	bool IsOnVehicleNotUAV();// 0x3920968
	bool IsOnVehicle();// 0x3920940
	bool IsOnFireBalloon();// 0x3920918
	bool IsNowUpWater();// 0x39208f0
	bool IsNightVisionValid();// 0x39208c8
	bool IsNearDeath();// 0x39208a0
	bool IsLocalViewed();// 0x3920870
	bool IsLocalControlorView();// 0x3920848
	bool IsInteractiveMoveComponentTakeOverJump();// 0x3920820
	bool IsInInteractiveMoveComponentState();// 0x39207f8
	bool IsInFlyingTeam();// 0x39207d0
	bool IsInEditor();// 0x370390c
	bool IsInCarryBackState();// 0x39207a8
	bool IsInBeCarriedBackState();// 0x3920780
	bool IsHealthyAlive();// 0x3920758
	bool IsHealthAlive();// 0x3920730
	bool IsHandleInFold();// 0x3920708
	bool IsGunADS();// 0x39206d8
	bool IsFirstPerson();// 0x39206b0
	bool IsExitingParachute();// 0x3920688
	bool IsEnableFollowPlayEmote();// 0x3920658
	bool IsEnableDamage(STExtraBaseCharacter* TargetBaseCharacter);// 0x39205d8
	bool IsEnableBulletFlySound();// 0x39205a8
	bool IsDropAvatar();// 0x3920578
	bool IsDroneActor();// 0x3920548
	bool IsDetectingPaintDecalTarget();// 0x3920528
	bool IsDefaultCharType();// 0x39204f8
	bool IsDanceTogetherEmote(int EmoteId);// 0x3920478
	bool IsCoopEmote(int EmoteId, int CoopPhase);// 0x39203ac
	bool IsComponentDormant(ActorComponent* InComp);// 0x392032c
	bool IsCompatibleSkeletalCharAnimClass(class Object NewAnimClass);// 0x39202ac
	bool IsCommonFollowTeam(EmotePlayer EmotePlayer);// 0x39201e4
	bool IsClientCarryBackViewTarget();// 0x39201bc
	bool IsClientBeCarriedBackViewTarget();// 0x3920194
	bool IsClient_WeaponOwner();// 0x3920164
	bool IsCharacterSprinting();// 0x392013c
	bool IsChangeWearingState();// 0x3920114
	bool IsCarryBackEnable();// 0x39200ec
	bool IsCanPlayEmote(int EmoteId, bool ShowTips);// 0x3920020
	bool IsCanFollowed();// 0x390376c
	bool IsCanDriveSnowBoard();// 0x391fff8
	bool IsBattleState();// 0x391ffd0
	bool IsAttackerIgnoreDamage(int DamageEventType);// 0x391ff48
	bool IsAngledSight();// 0x391ff20
	bool IsAllowScopeIn();// 0x391fef8
	bool IsAlive();// 0x391fec8
	void InviteTeammate(FString Name, enum InvitationType);// 0x391fdc8
	void InterruptAutonomousFollowEmote(int EmoteId);// 0x391fd50
	void InterrupEmoteSoundByEmoteId(int EmoteId);// 0x391fcd8
	void InteractiveMoveComponentHandleJumpInput();// 0x391fcc4
	void InteractiveMoveComponentHandleEnterInput();// 0x391fcb0
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x391fbf4
	void InitCharacterSkillList();// 0x391fbe0
	bool InDarkArea();// 0x391fbb8
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x391fafc
	void HidePlayerMagOnGunReload();// 0x391fae8
	void HideNightVisionFrame();// 0x391facc
	bool HaveAngledSight();// 0x391faa4
	bool HasStateExceptStandOrPlayEmote();// 0x391fa7c
	bool HasState(enum State);// 0x391f9f4
	bool HasSightCondition(enum Flags);// 0x391f974
	bool HasCarryBackState(enum InState);// 0x391f8f4
	bool HasAnyStates(enum[] States);// 0x391f794
	bool HasAnySightVision(enum Flags);// 0x391f714
	bool HasAllStates(enum[] States);// 0x391f5b4
	void HandleWeaponShootLost();// 0x391f598
	void HandleWeaponOnShoot();// 0x391f584
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x391f484
	void HandleSwitchWeaponEnd();// 0x391f470
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x391f3f0
	void HandleStartFillGasDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x391f370
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x391f2f0
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x391f234
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x391f1b4
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x391f0f8
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x391f03c
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x391efc4
	void HandlePeekStateChanged();// 0x391efb0
	void HandleOpenPickUpBoxAction();// 0x391ef9c
	void HandleOnCharCustomAnimLoadingFinished();// 0x391ef80
	void HandleOnCharAnimLoadingFinished();// 0x391ef64
	void HandleMoveAntiShootVerifyMiss();// 0x391ef48
	void HandleEmoteTick(float DeltaTime);// 0x391eed0
	void HandleConsumeItemSkillBreak();// 0x391eebc
	void HandleChangeWearingCloseWeapon(byte TargetChangeSlot);// 0x391ee44
	void HandleBulletHitEvent(out const HitResult InImpactResult);// 0x391ed64
	void HandleAutoSwitchWeaponDelay();// 0x391ed50
	void GrenadeBackToWeaponServerCall();// 0x391ecf4
	void GMShowName();// 0x3592f9c
	Actor* GetWeaponUserConst();// 0x391ecc4
	float GetWeaponOwnerPawnHealth();// 0x391ec94
	WeaponManagerComponent* GetWeaponManager();// 0x391ec64
	Rotator GetViewRotation();// 0x391ec14
	int GetVehicleSeatSafetyIndex();// 0x391ebec
	PlayerMantleComponent* GetVaultComponent();// 0x391ebc4
	float GetValueLimitForHealthPredict();// 0x391eb9c
	STExtraUnderWaterEffectComp* getUnderWaterEffectComponent();// 0x391eb74
	Vector GetUIHelmetPosition();// 0x391eb24
	enum GetUAVState();// 0x391eb08
	byte GetThrowGrenadeMode();// 0x391eae8
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x391ea68
	STExtraBaseCharacter* GetTargetPlayer();// 0x391ea48
	Vector GetSpringArmLocation();// 0x391e9f8
	SkeletalMeshComponent* GetSpecialWeaponAttachMesh();// 0x391e9c8
	AkComponent* GetSoundComponent();// 0x391e9a0
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x391e7c0
	float GetSimpleCollisionHalfHeightInStandPose();// 0x391e798
	bool GetShouldDrowningHurt();// 0x391e768
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x4a51734
	Vector GetShootVertifyHitBoxScale(out const CharacterHistoryData CharacterHistotyData, out const MovementRecordData MovementRecordData);// 0x391e61c
	SecuryInfoComponent* GetSecuryComponent();// 0x391e5f4
	STCharacterRescueOtherComp* GetRescueOtherComponent();// 0x391e5d4
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x391e5b4
	int GetRedClothIDByEmote(int EmoteIndex);// 0x391e52c
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x391e494
	BoxComponent* GetProneShapeComponent();// 0x391e474
	byte GetPlayerWeaponFireMode();// 0x37c7168
	byte GetPlayerWeaponEquipSlot();// 0x391e44c
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x391e388
	PlayerVehAnimList GetPlayerVehAnimation();// 0x391e354
	int GetPlayerTeamIndex();// 0x391e32c
	STExtraPlayerState* GetPlayerStateSafety();// 0x391e304
	STExtraPlayerState* GetPlayerState();// 0x391e2d4
	PlayerSecurityInfoCollector* GetPlayerSecuryInfoCollectorComponent();// 0x391e2ac
	FString GetPlayerNameSafety();// 0x391e1e4
	Vector GetPlayerMovementDir();// 0x391e194
	FString GetPlayerDetailInfo();// 0x391e0d4
	STExtraPlayerController* GetPlayerControllerSafety();// 0x391e0a4
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x391e07c
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x391df54
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x391decc
	PlayerAnimList GetPlayerAnimation();// 0x391ddc0
	PlayEmoteComponent* GetPlayEmoteComponent();// 0x391dd90
	PickupManagerComponent* GetPickupManager();// 0x391dd68
	Vector GetOwnerShootStartLocation();// 0x391dd18
	Vector GetOverrideCirclePainPos();// 0x391dcd0
	enum GetNetRelevantStatus(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x391dbb4
	int GetNearTeamPlayerNum();// 0x391db8c
	Vector GetMoveInputLocalDir();// 0x391db44
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x391db14
	int GetMeshAnimLOD();// 0x391daec
	bool GetMEnsure();// 0x391dabc
	FString GetLatestInviter();// 0x391d9fc
	STExtraPlayerState* GetLastInviterPlayerState();// 0x391d9d4
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x391d9a4
	float GetKdValue();// 0x391d97c
	bool GetIsPlayingEmote();// 0x391d954
	bool GetIsFPPOnVehicle();// 0x391d924
	bool GetIsFPP();// 0x391d8f4
	bool GetIsChangeWearing();// 0x391d8d4
	float GetInjuryFreeRate(int BodyPart);// 0x391d84c
	enum GetHitBodyTypeByHitPos(out const Vector InImpactVec);// 0x391d7b8
	enum GetHitBodyType(out const HitResult _ImpactResult, out const Vector InImpactVec);// 0x391d680
	Vector GetHeadLocation(bool bUseHeadBone);// 0x391d5e8
	int GetHandFolderRatio();// 0x391d5b8
	Vector GetGunOwnerHeadLocation();// 0x391d568
	int GetGrenadeKillBindGunIDByPC(STExtraPlayerController* KillerPC, int GrenadeID);// 0x391d49c
	int GetGrenadeKillBindGunID(int CurWeaponID, int GrenadeID);// 0x391d3d0
	enum GetGender();// 0x391d3b4
	bool GetFuzzyPosition(out Vector FuzzyPostion);// 0x391d328
	BaseFPPComponent* GetFPPComp();// 0x391d300
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x391d270
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x391d1e0
	STExtraAnimInstanceBase* GetExtraAnimInstanceBase(bool bisFPP);// 0x391d158
	bool GetEnsure();// 0x3877ad0
	float GetEmoteStartPosition(int CharacterPlayerKey);// 0x391d0d8
	float GetEmotePlayRate();// 0x391d0b0
	FString GetEmoteHandlePath(int ItemId);// 0x4a51734
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x4a51734
	FString GetEmote(int ItemDefineID);// 0x4a51734
	STExtraBaseCharacter* GetDroneActor();// 0x391d080
	Vector GetCustomMoveInput(Vector InputDir, bool bUseCache);// 0x391cf98
	Rotator GetCustomMoveControlRotation(Rotator InputRot);// 0x391cefc
	STExtraWeapon* GetCurrentWeapon();// 0x391ced4
	int GetCurrentVehicleAnimVehicleType();// 0x391ceac
	STExtraVehicleBase* GetCurrentVehicle();// 0x391ce7c
	uint64 GetCurrentStatesInterface();// 0x391ce4c
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x391ce24
	STExtraWeapon* GetCurrentShieldWeapon();// 0x391cdfc
	InteractiveActorMoveComponent* GetCurrentInteractiveMoveComponent();// 0x391cdd4
	int GetCurrentFloorType();// 0x391cdac
	int GetCurrentEmoteId();// 0x391cd84
	AnimMontage* GetCurPlayingEmote();// 0x391cd5c
	float GetCrouchHalfHeight();// 0x391cd3c
	FString GetCorpName();// 0x391cc7c
	Controller* GetControllerSafety();// 0x391cc4c
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x391cc24
	float GetCharacterXYPlaneVelocity();// 0x391cbfc
	enum GetCharacterSubType();// 0x391cbd4
	class AnimInstance GetCharacterSkillAnimBP(int SkillID);// 0x391cb54
	CharacterPlayEmoteComponent* GetCharacterPlayEmoteComponent();// 0x391cb2c
	enum GetCharacterMainType();// 0x391cb04
	CharacterFormationComponent* GetCharacterFormationComponent();// 0x391cadc
	CharacterEnergyData GetCharacterEnergy();// 0x391c8f4
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x391c8c4
	UAEChaCustomAnimListComponent* GetChaCustomAnimComponent();// 0x391c89c
	STCharacterCarryBackComp* GetCarryBackComp();// 0x391c874
	STExtraBaseCharacter* GetCarryBackCharacter();// 0x391c84c
	Vector GetCapsuleEdgeLocation(out const Vector EdgeDirection);// 0x391c7b0
	CapsuleComponent* GetCapsuleComponentInterface();// 0x391c780
	STExtraBaseCharacter* GetCachedCoopEmotePlayer();// 0x391c738
	Rotator GetCachedControlRotation();// 0x391c6f0
	STExtraBaseCharacter* GetBeCarriedBackCharacter();// 0x391c6c8
	CharacterAvatarComponent2* getAvatarComponent2();// 0x391c6a0
	CharacterAnimShareParamsComp* GetAnimParamsComponent();// 0x391c680
	bool GetAnimParamAlwaysLandLight();// 0x391c658
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x391c5d8
	AnimationAsset* GetAnimByTag(FString Tag);// 0x391c478
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos, Actor* DamageCauser);// 0x391c370
	PickUpItemData[] GetAdditionalTombBoxItemBP(int InstanceIDCnt);// 0x391c2bc
	SpringArmComponent* GetActiveSpringArm();// 0x391c28c
	void GeneratePlayerBackpackWrappersToGround();// 0x391c270
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x391bfa4
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x391bd60
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x391bce0
	bool ForceUseLodZeroAnim();// 0x391bcb8
	void ForceSyncMovementState();// 0x391bc9c
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x391bbd0
	void ForceRepFPPChange(bool bSetSelf);// 0x391bb48
	void ForcePlayerUpdateAnimation();// 0x391bb34
	void ForceDestroyWeaponInventoryAndClearData();// 0x391bb20
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x391ba30
	void FollowTeammate(FString Name);// 0x391b8d8
	EmotePlayer FindNearPlayingEmote();// 0x391b884
	enum FindBuffRelatedPawnStateByID(int BuffID);// 0x391b804
	bool FindActorLocationSafetyWithParams(out Vector FindLoc, Vector NewLocation, out const ResolvePenetrationParams ResolveParams);// 0x391b5e4
	bool FindActorLocationSafety(out Vector FindLoc, Vector NewLocation);// 0x391b50c
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x391b330
	bool FillGasWeaponFilter();// 0x391b308
	void FaceRotation(Rotator NewControlRotation, float DeltaTime);// 0x391b244
	void ExitClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x391b1cc
	void EquipZoomScope(int WeaponId, int ScopeID);// 0x391b110
	void EquipWeaponFinish();// 0x3592f9c
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x391b04c
	bool EnterState(enum State);// 0x391afc4
	void EnterServerState(enum State);// 0x391af10
	void EnterFire();// 0x391aef4
	void EnterClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x391ae7c
	void EnterBattleState();// 0x391ae68
	void EnterAssistantOnTrackVehicle(bool bEnter);// 0x391ade8
	bool EnergyBuffConditionOK();// 0x391adc0
	void EnableStanbyAnim(bool bIsEnable);// 0x391ad40
	bool EmoteAnimFinishedSuccessfully();// 0x391ad18
	void DSSetCharacterStringPropertyForReplay(FString KeyName, FString InValue);// 0x391abd0
	void DSSetCharacterIntPropertyForReplay(FString KeyName, int InValue);// 0x391aac8
	void DoDetectPaintDecalTarget(bool bStart);// 0x391aa48
	void DoAutoDropWeapon(STExtraShootWeapon* ShootWeapon);// 0x391a9d0
	void DisappearOnDeath();// 0x391a9bc
	void DettachWeapon();// 0x3592f9c
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x391a8f0
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x391a81c
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x391a808
	void DelayResetStandState();// 0x391a7f4
	void DelayMoveEnd();// 0x391a7e0
	void DelayMove(float Time);// 0x391a768
	void DelayHidden();// 0x391a74c
	void DelayCustomDepth(float Time);// 0x391a6d4
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x391a584
	float CustomCalculateBodyhurtDamage(float Damage, int DamageTypeId, int AvatarDamagePosition, Actor* DamageCauser, STExtraBaseCharacter* AttackerBaseCharacter);// 0x391a3e4
	void CurrentMeleeReleased();// 0x391a3d0
	void CurrentMelee(bool IsForCE);// 0x391a350
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x391a2c8
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x391a248
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x391a1c8
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x391a148
	bool ConsumeVehicleEnterMontageTag();// 0x391a120
	void CollectPlayerTombBoxIDCard(out PickUpItemData[] OutItemDataList, out int InstanceIDCnt);// 0x391a014
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x3919e98
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x3919d4c
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x3919c44
	void ClientShowVeteranRecruitParachuteTeamTip(const int TipsID, FString Param1, FString Param2);// 0x3919ab8
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully, FString LeaderName);// 0x39199a4
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x391992c
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x3919868
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x391979c
	void ClientResponseFeedback(enum res);// 0x391971c
	void ClientPlayVehicleOverlapCameraShake();// 0x39196c0
	void ClientPlayInteractEmote(int EmoteId);// 0x3919640
	void ClientOnPossessBy(Controller* NewController);// 0x391958c
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool bHeadShotDamage);// 0x391935c
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool bHeadShotDamage);// 0x39190e4
	void ClientFeedbackVehiclePointDamage(float Damage, const STPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool bHeadShot);// 0x3918eb4
	void ClientChangeCharacterMesh(int MeshID);// 0x3918e34
	void ClientBulletLineTrace(Vector_NetQuantize BornPos, Vector_NetQuantize EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x3918cd0
	void ClientAttackerHandleShootDamageTips(const ShootDamageTipsStr ShootDamageTipsStr);// 0x3918c14
	void ClientAIHotValueDebugInfo(const float[] Info);// 0x3918b50
	void ClearOnDeath(Controller* EventInstigator, Actor* DamageCauser);// 0x3918a8c
	void ClearMovementInputVector();// 0x3918a78
	void ClearHPUI();// 0x3918a5c
	void ClearEmotePlayer();// 0x3918a48
	void ClearClientJump();// 0x3918a34
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x39189ac
	void CheckStateChangedInterruptEmoteState();// 0x3918998
	void CheckPoseCollisionRight();// 0x3918984
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x39188ec
	bool CheckPickWeaponCanAutoUse();// 0x39188bc
	bool CheckOnMoveablePlatform();// 0x3917ef8
	bool CheckNeedReportAttr();// 0x391888c
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x39187c8
	bool CheckNeedRecordEmoteState(int EmoteId);// 0x3918740
	void CheckNeedPlayReliableEmote();// 0x391872c
	void CheckNeedClearEmotePlayer();// 0x3918718
	void CheckNearPlayingEmote();// 0x3918704
	void CheckNearPlayingCoopEmote();// 0x39186f0
	bool CheckLowSpeedException();// 0x39186c0
	bool CheckIsWearingThoseClothes(out const int[] InClothIDList);// 0x39185ec
	bool CheckIsWearingThisCloth(int InClothID);// 0x391856c
	bool CheckIsValidXSuitBornIslandAction(int EmoteIndex);// 0x39184e4
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x391845c
	bool CheckInPhotoGrapherMode();// 0x391842c
	bool CheckEmoteNeedUseReliableRPC(int EmoteIndex);// 0x39183a4
	void CheckEmoteFollow(float DeltaTime);// 0x391832c
	bool CheckEmoteCollision(int EmoteId);// 0x39182ac
	void CheckCharacterDelayHide();// 0x3918298
	bool CheckCanStand();// 0x3918270
	bool CheckCanShowFollowPlayEmote(EmotePlayer EmotePlayer);// 0x39181a4
	bool CheckCanShovelInSpringState();// 0x3918174
	bool CheckCanRecipientDelivery();// 0x3918144
	void CheckCanInterruptCurrentEmote();// 0x3918130
	bool CheckCanFollowPlayEmote(const int EmoteId);// 0x39180a8
	bool CheckCanBeginPlayCoopEmote();// 0x3918080
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x3917ff8
	bool CheckBuffTarget(STBuff* Buff);// 0x3917f70
	bool CheckBaseIsSmallMoveable();// 0x3917f48
	bool CheckBaseIsMoving();// 0x3917f20
	bool CheckBaseIsMoveable();// 0x3917ef8
	void CheckAutonomousNeedFollowEmote(int EmoteId);// 0x3917e78
	void CharacterStateReset();// 0x3917e64
	void CharacterProcessAnimLanded();// 0x3917e48
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x3917dd0
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x3917cc4
	void CharacterHideInGameLogic();// 0x3917ca8
	bool ChangeWearingAnimFinishedSuccessfully();// 0x3917c80
	void ChangeVehWeaponCameraData(bool Enable, out const VHSeatCharacterCameraOffsetData InCharacterCameraOffset);// 0x3917b70
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x3917a68
	bool CanTakeDamageBySkill();// 0x3917a38
	bool CanSwitchWeaponWhenEnterFight();// 0x3917a08
	bool CanSelfRescue();// 0x39179e0
	bool CanRegisterToPickUpList(Actor* Actor);// 0x3917958
	bool CanPlayHitAnim();// 0x3917928
	bool CanPaintDecal(int DecalId);// 0x39178a8
	bool CanOpenDoor(PUBGDoor* Door);// 0x3917820
	bool CanHearWeaponLockSound();// 0x39177f0
	bool CanEnterWaterArea(enum[] disallowedState);// 0x3917690
	bool CanEnterState(enum NewState);// 0x3917610
	bool CanDrawWeaponCrossHair();// 0x39175e0
	void CancelFollow();// 0x39175cc
	bool CanAutoUseWeaopon(int WeaponId);// 0x3917544
	void CalculateUseBuffFlow(int InBuffID);// 0x39174cc
	void CalculateTakeItemFlow(int SpesificID, int Count);// 0x3917410
	float CalculateTakeDamageFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x391729c
	void CalculateShootPlayerHeadNum(int AddShootTimes, bool IsAI);// 0x39171d0
	void CalculatePickUpItemFlowInstance(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam, uint64 InstanceID);// 0x3916fec
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x3916e58
	void CalculateHeathRecoverVal(float RecoverVal, int Reason);// 0x3916d94
	void CalculateHeathRecoverTimes();// 0x3916d78
	void CalculateBuildingEnterFlow(int InBuildingID, int InCount);// 0x3916cbc
	void CalculateBornLandThrowGrenade(int ID);// 0x3916c44
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x3916b80
	void CalculateAreaUseItemFlow(int SpesificID, int Count);// 0x3916ac4
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x39169ec
	void CalcKillDataDeferred(out const DamageCauserRecordData Record);// 0x3916944
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x39167f8
	void BulletChange();// 0x391679c
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x39164fc
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadshot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x3916248
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* Victim, const ClientFatalDamageRecordData Data, uint32 CauserKey, uint32 VictimKey);// 0x3916044
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3915d18
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3915a3c
	void BroadcastClientsSimulateSTRadialDamage(float BaseDamage, const STRadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x39157d4
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x391542c
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x39150d4
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3914da8
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3914acc
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x39147a0
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x39144c4
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3914150
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3913e2c
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3913b00
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3913824
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x39134f8
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x391321c
	void BroadcastClientsSimulateDotDamageDie(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x3912eec
	void BroadcastClientsSimulateDotDamage(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3912c0c
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x39128a0
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3912584
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x39121dc
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3911e84
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3911d08
	void BPResetCharacter();// 0x4a51734
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x4a51734
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x4a51734
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x4a51734
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser, byte DamageEventType);// 0x4a51734
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4a51734
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4a51734
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3911b94
	float BPCalFinalDamage(Controller* Killer, float FinalDamage, bool bHeadShoot, bool bBreathing);// 0x3911a28
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x4a51734
	void BP_ResetDataOnRespawn();// 0x3911a0c
	int BP_GetWeaponSyncTicket();// 0x39119dc
	enum BP_CheckWeaponSyncTicket(int InTicket);// 0x3911954
	void AutoScopeWhenPeek();// 0x3911940
	void AttachWeapon();// 0x3592f9c
	void AttachCurrentWeaponMeshToHand(out const FName WeaponSocketName);// 0x39118b4
	void AsyncLoadPlayerVehAnimationByAnimType(const STExtraVehicleBase* InVehicle, const byte InAnimType, const int InSeatId);// 0x39117b4
	void AsyncAnimOpenDoorCallback(AnimationAsset* RetAsset);// 0x391173c
	void AsyncAnimListOpenDoorCallback(AnimationAsset*[] RetAssetList);// 0x39115e4
	void ApplyLeaveVehicleVelocity(Vector InLeaveVelocity);// 0x3911574
	bool AllowState(enum State, bool withLog);// 0x39114a0
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x391134c
	void AirLaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride, float UpTime);// 0x39111f4
	void AddPlayerLastDamageTime(STExtraPlayerState* Player, int Time);// 0x3911138
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadshot, Actor* DamageCauser, float Damage);// 0x3910f30
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x3910e30
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3910c7c
	void AddClientLeaveStateCheck(enum State, float Duration);// 0x3910bc0
	void ActivateParachuteFreeFallingShake(float FreeFallingShakeTime);// 0x3910b48

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnEditorKeyPressedDelegate;//[Offset: 0x8f0, Size: 12]
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fc, Size: 1]
	delegate CharacterAnimEventDelegate;//[Offset: 0x900, Size: 12]
	delegate CharacterCommonEventDelegate;//[Offset: 0x90c, Size: 12]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0x940, Size: 12]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0x94c, Size: 12]
	delegate OnPreTakeDamageDynamicDelegate;//[Offset: 0x958, Size: 12]
	delegate OnAttackerPreTakeDamageDelegate;//[Offset: 0x964, Size: 12]
	delegate OnVictimPreTakeDamageDelegate;//[Offset: 0x970, Size: 12]
	delegate OnClientPushDamageEvent;//[Offset: 0x97c, Size: 12]
	delegate OnAttrChangeEventDelegate;//[Offset: 0xa00, Size: 12]
	float Health;//[Offset: 0xa0c, Size: 4]
	float HealthMax;//[Offset: 0xa10, Size: 4]
	int[] TypeIds;//[Offset: 0xa14, Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0xa20, Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa24, Size: 1]
	bool bAIIgnore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa25, Size: 1]
	float threatenValue;//[Offset: 0xa28, Size: 4]
	float HurtParticleOffset;//[Offset: 0xa2c, Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0xa38, Size: 12]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xa44, Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0xa48, Size: 8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0xa50, Size: 8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0xa58, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xa5c, Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 1]
	FString CharacterStateType;//[Offset: 0xa68, Size: 12]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa74, Size: 1]
	FString BehaviorServiceDebugInfo;//[Offset: 0xab4, Size: 12]
	FString ServiceDebugInfoForShow;//[Offset: 0xac0, Size: 12]
	int DebugInfoDetailLv;//[Offset: 0xacc, Size: 4]
	delegate OnHandleSkillStartDelegate;//[Offset: 0xad0, Size: 12]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xadc, Size: 12]
	float SkillPromptStartTime;//[Offset: 0xae8, Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xaf0, Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xaf4, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xaf8, Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xafc, Size: 4]
	delegate StateEnterHandler;//[Offset: 0xb00, Size: 12]
	delegate StateLeaveHandler;//[Offset: 0xb0c, Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0xb24, Size: 12]
	delegate OnSimulateCharacterStatesChange;//[Offset: 0xb30, Size: 12]
	uint64 CurrentStates;//[Offset: 0xb50, Size: 8]
	uint64 DisabledStates;//[Offset: 0xb58, Size: 8]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xb60, Size: 12]
	enum[] AllowStates;//[Offset: 0xb6c, Size: 12]
	float RencentStatesValidRange;//[Offset: 0xb78, Size: 4]
	<float,uint64> RencentStatesMap;//[Offset: 0xb7c, Size: 60]
	delegate OnPawnStateDisabled;//[Offset: 0xbb8, Size: 12]
	delegate OnPawnStateEnabled;//[Offset: 0xbc4, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xbd0, Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0xbdc, Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe1, Size: 1]
	TurnAroundViewComponent* TurnAroundViewComp;//[Offset: 0xbe8, Size: 4]
	byte TeamNum;//[Offset: 0xbf0, Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0xbf4, Size: 4]
	float SpeedScale;//[Offset: 0xc00, Size: 4]
	float SpeedValue;//[Offset: 0xc04, Size: 4]
	float Temperature;//[Offset: 0xc08, Size: 4]
	float TemperatureMax;//[Offset: 0xc0c, Size: 4]
	float TemperatureMin;//[Offset: 0xc10, Size: 4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc21, Size: 1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0xc28, Size: 4]
	float VehicleDetailedTraceDist;//[Offset: 0xc2c, Size: 4]
	float SpringArmTraceDist;//[Offset: 0xc30, Size: 4]
	<byte,CharacterHasGunBodyOffsetList> BodyRelativeOffsetConfig;//[Offset: 0xc34, Size: 60]
	ActivitySyncData ActicitySyncData;//[Offset: 0xc70, Size: 28]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98, Size: 1]
	void StopCurrentLevelSequence();// 0x4a51734
	void ShotVoice(bool bBegin);// 0x396ce98
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x396cdd4
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x396cd10
	void SetMEnsure(bool bMValue);// 0x392e7c0
	void SetEnsure(bool bValue);// 0x392e098
	void SetAllowPawnState(enum PawnState, bool bAllow);// 0x396cc4c
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x396cb88
	void RPC_Client_SetServiceDebugInfo(FString Info);// 0x396cac4
	void RPC_Client_SetIsMLAI(bool InIsMLAI);// 0x396ca3c
	void RPC_Client_ChangeToMLAI(const uint64 DisplayUID, FString Name);// 0x396c928
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x396c8a8
	void ResetPawnStateDisabled(enum State);// 0x396c830
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x396c720
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x396c5c8
	void PlayLevelSequenceByPathAndBindingInfo(FString SequenceActorPath, FString LevelSequencePath, out const <FString,FString> TrackBindingInfo, float TimeOffset);// 0x4a51734
	void PlayLevelSequenceByPath(FString SequenceActorPath, FString LevelSequencePath, float TimeOffset);// 0x4a51734
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x396c468
	void OnRep_UnmannedVehicleSyncData();// 0x3923ec4
	void OnRep_Temperature(float LastValue);// 0x3923dcc
	void OnRep_HealthMax();// 0x3923a9c
	void OnRep_Health(float PrevHealth);// 0x3598d90
	void OnRep_DisabledStates(uint64 prevStates);// 0x396c3e4
	void OnRep_CurrentStates(uint64 prevStates);// 0x3923950
	void OnRep_AllowStates();// 0x396c3c8
	void OnRep_ActivitySyncData();// 0x396c3b4
	void OnLeaveStateForBp(enum State);// 0x4a51734
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x4a51734
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x4a51734
	void OnEnterStateForBp(enum State);// 0x4a51734
	void LeaveState(enum State);// 0x3920f88
	bool IsPawnStateDisabledByWeapon(STExtraWeapon* Weapon, enum State);// 0x396c2e8
	bool IsPawnStateDisabled(enum State);// 0x396c268
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x396c1c4
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x396c120
	bool IsAllowPawnState(enum State);// 0x396c0a0
	bool IsAlive();// 0x391fec8
	bool HasState(enum State);// 0x391f9f4
	bool HasRencentState(enum State);// 0x396c018
	bool HasBuffID(int BuffID);// 0x396bf90
	STExtraVehicleBase* GetUnmannedVehicle();// 0x396bf74
	UTSkillManagerComponent* GetSkillManager();// 0x396bf44
	float GetScaledSpeed();// 0x396bf14
	FString GetPlayerNameSafety();// 0x391e1e4
	STExtraPlayerController* GetPlayerControllerSafety();// 0x391e0a4
	enum GetObserverType();// 0x396bee4
	bool GetMEnsure();// 0x391dabc
	bool GetEnsure();// 0x3877ad0
	enum[] GetDamageableGameObjectType();// 0x396be1c
	STExtraVehicleBase* GetCurrentVehicle();// 0x391ce7c
	bool GetCharacterMEnsure();// 0x396bdec
	bool GetCharacterEnsure();// 0x396bdbc
	float GetBuffDuration(int InstID, int CauseSkillID);// 0x396bcf0
	UAEBlackboard* GetBuffBlackboard(int BuffID);// 0x396bc70
	void FillBuffBlackboard(int BuffID, UAEBlackboardParameter[] ParamList);// 0x396bae8
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamagetType);// 0x396b9a8
	int ExtractDamageAdditionType(out const DamageEvent DamageEvent, Actor* DamagetCauser);// 0x396b8bc
	bool EnterState(enum State);// 0x391afc4
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x396b83c
	void DelayHidden();// 0x391a74c
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x396b778
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x396b5a4
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x396b458
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x396b30c
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x396b128
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot);// 0x396af44
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x396ada0
	void ClearBuff();// 0x396ad84
	bool ChangeBuffDuration(int InstID, float Duration);// 0x396acb8
	bool CanBeAttackedByWeapon(int WeaponId);// 0x396ac30
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser, byte DamageEventType);// 0x4a51734
	void BPOnRespawned();// 0x4a51734
	void BPOnRecycled();// 0x4a51734
	FString BlueprintSetServiceDebugInfo(FString Info);// 0x4a51734
	bool AllowState(enum State, bool withLog);// 0x39114a0
	void AddEntryEventTokenByID(int SkillID);// 0x396abb8
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer, int Level);// 0x396aa60
	int AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID, int Level);// 0x396a8c0

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x664, Size: 4]
	FName RepPropertyCategory;//[Offset: 0x670, Size: 8]
	FName PlayerType;//[Offset: 0x678, Size: 8]
	FString PlayerName;//[Offset: 0x680, Size: 12]
	FString Nation;//[Offset: 0x68c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x698, Size: 4]
	FString PlayerUID;//[Offset: 0x69c, Size: 12]
	FString MLAIPlayerUID;//[Offset: 0x6a8, Size: 12]
	int TeamID;//[Offset: 0x6b4, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	int CampID;//[Offset: 0x6bc, Size: 4]
	int resID;//[Offset: 0x6c0, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x6c4, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x6c8, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x6d4, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x704, Size: 28]
	int planeAvatarId;//[Offset: 0x720, Size: 4]
	int DyeDebugFlag;//[Offset: 0x724, Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x728, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x736, Size: 1]
	bool bAINeedCheckBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x737, Size: 1]
	float DestinyValue;//[Offset: 0x738, Size: 4]
	float RatingScore;//[Offset: 0x748, Size: 4]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 1]
	bool bEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74d, Size: 1]
	bool bMEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74e, Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74f, Size: 1]
	FString LuaFilePath;//[Offset: 0x75c, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x768, Size: 60]
	void SetNetCullDistanceSquared(float fNetCullDistanceSquared);// 0x35735f8
	void SetMEnsure(bool bMValue);// 0x392e7c0
	void SetEnsure(bool bValue);// 0x392e098
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x4157f50
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x4157e14
	void OnRep_UseWholeModel();// 0x4157e00
	void OnRep_TeamID();// 0x4157dec
	void OnRep_PlayerUID();// 0x4157dd8
	void OnRep_PlayerKey();// 0x3923bc0
	void OnRep_MLAIPlayerUID();// 0x4157dc4
	void OnRep_CampID();// 0x4157db0
	bool IsDefaultCharType();// 0x39204f8
	int GetTeamId();// 0x4157d94
	FString GetPlayerKey();// 0x4157cd4
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x4157c0c
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x4157b44
	ActorComponent*[] GetNonSimulatedComponents();// 0x4157a7c
	ActorComponent*[] GetNonDedicatedComponents();// 0x41579b4
	PrimitiveComponent* GetMovementBaseComponent();// 0x415798c
	bool GetMEnsure();// 0x391dabc
	bool GetEnsure();// 0x3877ad0
	int GetCampId();// 0x4157964
	void ClientAcknowledgeReconnection(uint32 Token);// 0x41578e4

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x450, Size: 4]
	class AnimInstance[] CharacterInVehicleAnimBPs;//[Offset: 0x454, Size: 12]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool bAIBehaviorVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x462, Size: 1]
	enum VehicleType;//[Offset: 0x463, Size: 1]
	enum VehicleShapeType;//[Offset: 0x464, Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x468, Size: 24]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x480, Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x498, Size: 4]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x4a0, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x4c8, Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x4cc, Size: 60]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x508, Size: 60]
	Texture2D* VehicleIcon;//[Offset: 0x544, Size: 4]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x54c, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x550, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x555, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x558, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	bool bCanHandBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55d, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55e, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55f, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x560, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x568, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 1]
	int MainMaterialIndex;//[Offset: 0x570, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x574, Size: 12]
	bool ShowVehicleEnterButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bStopAnimWhenDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 1]
	Vector AirDropVelocity;//[Offset: 0x584, Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x590, Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x598, Size: 8]
	float AirdropOvertime;//[Offset: 0x5a0, Size: 4]
	delegate OnVehicleStartAirdrop;//[Offset: 0x5a4, Size: 12]
	delegate OnVehicleEndAirdrop;//[Offset: 0x5b0, Size: 12]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	bool bHasBeenCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 1]
	bool bEnableBuffComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5be, Size: 1]
	bool bEnableAttrModifyComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bf, Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 1]
	float BackpackCapacity;//[Offset: 0x5c4, Size: 4]
	FName BackpackName;//[Offset: 0x5c8, Size: 8]
	int[] marr_MidIndexes;//[Offset: 0x5d0, Size: 12]
	float EnterVehicleCameraBlendTime;//[Offset: 0x5dc, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x5e0, Size: 4]
	bool bEnableVehicleSteeringCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x5e8, Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	float StaticForceFixInterval;//[Offset: 0x5f0, Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 1]
	int[] SwitchSeatWithItemTypeList;//[Offset: 0x600, Size: 12]
	Vector[] RouteList;//[Offset: 0x60c, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x618, Size: 12]
	int AutoDrive_CurrentTargetWaypointIdx;//[Offset: 0x624, Size: 4]
	Vector AutoDriverTargetPosition;//[Offset: 0x628, Size: 12]
	Vector AutoDriverStartPosition;//[Offset: 0x634, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x640, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x64c, Size: 12]
	delegate OnSeatChange;//[Offset: 0x658, Size: 12]
	delegate OnStartResolveStuck;//[Offset: 0x664, Size: 12]
	delegate OnEndResolveStuck;//[Offset: 0x670, Size: 12]
	RepMovementKeyLoc RepMovementKeyLoc;//[Offset: 0x67c, Size: 36]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 1]
	FString LuaFilePath;//[Offset: 0x6a8, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x6b4, Size: 60]
	bool bEnableVoiceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	float voiceCheckCD;//[Offset: 0x6f4, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x6f8, Size: 4]
	float voiceCheckDis;//[Offset: 0x6fc, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x700, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x704, Size: 4]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x720, Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool CanPushUpCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	bool CanSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x726, Size: 1]
	uint16 ReplicatedFuelRatio;//[Offset: 0x728, Size: 2]
	ParticleSystem* ParticleExplosion;//[Offset: 0x760, Size: 4]
	enum VehicleHealthState;//[Offset: 0x764, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x765, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x766, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x767, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x76c, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x778, Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x77c, Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x780, Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x784, Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x788, Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x78c, Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x790, Size: 4]
	VehicleComponent*[] TickedComponents;//[Offset: 0x794, Size: 12]
	VehicleComponent*[] WeakTickedComponents;//[Offset: 0x7a0, Size: 12]
	bool bClearComponentTickWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 1]
	float EnActiveTimeThreshold;//[Offset: 0x7b4, Size: 4]
	float FreezeVehicleThreshold;//[Offset: 0x7b8, Size: 4]
	bool bFreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c4, Size: 1]
	float VehicleHitThreshold;//[Offset: 0x7d4, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x7d8, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x7e8, Size: 4]
	int EnableTickEffectsDevciveLevel;//[Offset: 0x7ec, Size: 4]
	float EffectUpdateInterval;//[Offset: 0x7f4, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x7f8, Size: 12]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x805, Size: 1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x806, Size: 1]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x807, Size: 1]
	float lastForwardSpeed;//[Offset: 0x808, Size: 4]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x80c, Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x818, Size: 12]
	delegate OnClientChangeVehicleSeatEvent;//[Offset: 0x824, Size: 12]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	bool bEnableEnterDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x832, Size: 1]
	float VehicleEnterDistance;//[Offset: 0x834, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x838, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x83c, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x84c, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x850, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x85c, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x860, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x864, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x870, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x87c, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x880, Size: 4]
	float PeneTerrainProtectionInterval;//[Offset: 0x88c, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x890, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x894, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x8d8, Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x8dc, Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x8e0, Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x8e4, Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x8e8, Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x8ec, Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x8f0, Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x8f4, Size: 4]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x8f8, Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x8fc, Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x900, Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x904, Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x908, Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x90c, Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x910, Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x914, Size: 4]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0x918, Size: 4]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x91c, Size: 4]
	float EngineSfxEndDelayTime;//[Offset: 0x920, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0x928, Size: 92]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0x984, Size: 92]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0x9e0, Size: 92]
	AkComponent* SoundComponent;//[Offset: 0xa3c, Size: 4]
	float RPMSfxScale;//[Offset: 0xa6c, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0xa70, Size: 4]
	enum VehicleSyncTag;//[Offset: 0xa89, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xa8c, Size: 4]
	delegate OnVehiclePossessed;//[Offset: 0xa90, Size: 12]
	delegate OnVehicleUnPossessed;//[Offset: 0xa9c, Size: 12]
	VehicleSimViewData SimulateViewData;//[Offset: 0xab8, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xabc, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xac0, Size: 4]
	VehiclePickableComponent* VehiclePickupComp;//[Offset: 0xac4, Size: 4]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xb00, Size: 12]
	delegate OnVehicleTakeDamageDelegate;//[Offset: 0xb0c, Size: 12]
	delegate OnVehicleHealthDestroy;//[Offset: 0xb18, Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb24, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xb28, Size: 4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb38, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb39, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xb3c, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xb40, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	float StuckMinImpulse;//[Offset: 0xb6c, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xb70, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xb74, Size: 4]
	float StuckResovingTime;//[Offset: 0xb78, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xb80, Size: 4]
	float StuckResovingTimer;//[Offset: 0xb84, Size: 4]
	float PenePercent;//[Offset: 0xb88, Size: 4]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xbd4, Size: 4]
	float RespawnTickInterval;//[Offset: 0xbd8, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdc, Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xc6c, Size: 12]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xc78, Size: 12]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xc84, Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc0, Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc8, Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xce0, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xce4, Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xce8, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xd10, Size: 4]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb1, Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb2, Size: 1]
	Vector SeekLockOffset;//[Offset: 0xdb4, Size: 12]
	FName SeekLockSocket;//[Offset: 0xdc0, Size: 8]
	float ProduceSoundInterval;//[Offset: 0xdc8, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xdd0, Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xddc, Size: 4]
	delegate OnEnterVehicle;//[Offset: 0xde0, Size: 12]
	float OverlapCameraShakeInterval;//[Offset: 0xdf4, Size: 4]
	float OverlapDamageRate;//[Offset: 0xdfc, Size: 4]
	float OverlapImpulseRate;//[Offset: 0xe00, Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xe04, Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xe08, Size: 4]
	float MinOverlapSpeed;//[Offset: 0xe0c, Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xe10, Size: 4]
	Vector OverrideOverlapSimpleCharBoxExtent;//[Offset: 0xe14, Size: 12]
	float OverlapVehicleDamageRate;//[Offset: 0xe24, Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xe28, Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xe30, Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xe40, Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xe48, Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xe4c, Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5d, Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0xe60, Size: 4]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0xe64, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xe68, Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xe6c, Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xe70, Size: 12]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xe7c, Size: 12]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xe88, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xe8c, Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe90, Size: 1]
	delegate OnAdvanceAvatarChanged;//[Offset: 0xe94, Size: 12]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea0, Size: 1]
	int CandidateAvatarID;//[Offset: 0xea4, Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea8, Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0xeb4, Size: 4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 1]
	float MaxLinearVelocity;//[Offset: 0xebc, Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 1]
	int TeamID;//[Offset: 0xec4, Size: 4]
	int CampID;//[Offset: 0xec8, Size: 4]
	float VehicleGoStraight;//[Offset: 0xecc, Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0xed4, Size: 4]
	float ExchangeVehicleSeatInterval;//[Offset: 0xed8, Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0xee0, Size: 12]
	delegate OnControlRotationInit;//[Offset: 0xeec, Size: 12]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xef8, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xefc, Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf01, Size: 1]
	int WeaponReconnectIdx;//[Offset: 0xf04, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xf08, Size: 4]
	enum UAVOperateState;//[Offset: 0xf10, Size: 1]
	float SingleMoveRate;//[Offset: 0xf14, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xf18, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xf30, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0xf48, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xf58, Size: 12]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xf64, Size: 12]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf70, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xf78, Size: 8]
	float TombBoxTraceLength;//[Offset: 0xf80, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0xf84, Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf89, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8a, Size: 1]
	float SleepVehicleTolerance;//[Offset: 0xf8c, Size: 4]
	float StaticFixAngel;//[Offset: 0xf90, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0xf94, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0xf98, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0xfa0, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0xfa4, Size: 4]
	bool CharacterFollowVehicleViewLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfad, Size: 1]
	int CannotEnterTips;//[Offset: 0xfb0, Size: 4]
	bool CanLeaveVehicleVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb4, Size: 1]
	float LeaveVehicleVelocity;//[Offset: 0xfb8, Size: 4]
	int CannotLeaveTips_HighSpeed;//[Offset: 0xfbc, Size: 4]
	int CannotDriveTips;//[Offset: 0xfc0, Size: 4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0xfc8, Size: 12]
	Vector AttachedRelLoc;//[Offset: 0xfd4, Size: 12]
	Actor* AttachedActor;//[Offset: 0xfe0, Size: 4]
	int HasAttachedActorTips;//[Offset: 0xfe4, Size: 4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff0, Size: 1]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0xff4, Size: 4]
	float LandTraceMaxHeight;//[Offset: 0xff8, Size: 4]
	bool bNeedPlayVehicleEnterMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xffc, Size: 1]
	delegate VehicleSkillCDChanged;//[Offset: 0x1000, Size: 12]
	delegate VehicleSkillDurationChanged;//[Offset: 0x100c, Size: 12]
	delegate VehicleSkillStateChanged;//[Offset: 0x1018, Size: 12]
	FName ChassisBoneName;//[Offset: 0x1028, Size: 8]
	Actor*[] VehicleIgnoreActors;//[Offset: 0x1030, Size: 12]
	delegate OnVehicleStateChanged;//[Offset: 0x103c, Size: 12]
	TrailerRepMovement TrailerMovement;//[Offset: 0x1048, Size: 24]
	byte CameraDataType;//[Offset: 0x1068, Size: 1]
	bool bBlockForwardInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1069, Size: 1]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106a, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x106c, Size: 4]
	bool bVehicleSimualetdPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1094, Size: 1]
	FName DecalSocketName;//[Offset: 0x1098, Size: 8]
	IdeaDecalActor*[] DecalActors;//[Offset: 0x10a0, Size: 12]
	float Timer_HitEffect;//[Offset: 0x10ac, Size: 4]
	bool bMinimalTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8, Size: 1]
	bool bRepPhysicsSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b9, Size: 1]
	void WeakTick(float DeltaTime);// 0x3a5383c
	void VehicleStateChanged__DelegateSignature();// 0x4a51734
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x3a537c4
	void UpdateHeightToLand();// 0x3a537b0
	void UnregisterComponentWeakTick(VehicleComponent* InComponent);// 0x3a53738
	void UnregisterComponentTick(VehicleComponent* InComponent);// 0x3a536c0
	void TickVehicleHealthState();// 0x362b16c
	void TickEnableAvatarOutline();// 0x3a536ac
	void StopEngine();// 0x3a53690
	void StopAutoDriving();// 0x3a5367c
	void StartFireSimple(byte ShootMode);// 0x3a53604
	void StartEngine();// 0x3a535e8
	void StartAirDrop();// 0x3a535cc
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x3a53520
	void ShowInteractiveButton(bool bShow);// 0x3a534a0
	void ShowBoostingEffect(bool bShow);// 0x4a51734
	bool ShouldUseSpecialHitEffect();// 0x3a53470
	bool ShouldShowVehicleEnterUI();// 0x3a2060c
	enum ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x3a53388
	void ShakePassengersCameraResponseHitSimpleCharacter();// 0x39b4c34
	void SetWeaponReconnectIdx(int ReconnectOpIndex);// 0x3a53308
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x3a531fc
	void SetVehicleReplicatedFuelRatio(float InFuel);// 0x3a53184
	void SetVehicleMusicPlayState(bool bEnabled);// 0x4a51734
	void SetVehicleHealthState(enum InVehicleHealthState);// 0x3a53110
	void SetUsingHorn(bool bUse);// 0x3a53090
	void SetUAVOperateState(enum NewState);// 0x3a53018
	void SetSpawnedInReady(bool bFlag);// 0x3a52f9c
	void SetSimulatePhysics(bool bSimulate);// 0x3a52f14
	void SetRegionBasedNetConsideration(bool bUseRegion);// 0x3a52e94
	void SetPhysActive(bool bActive, float Delay);// 0x3a52dcc
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x3a52d5c
	void SetInputControlEnabled(bool bEnable);// 0x3a52ce0
	void SetHandBrake(float rate);// 0x399af98
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x3a52c1c
	bool SetBoosting(bool bEnabled);// 0x399af08
	void SetAllowDifferentTeam(bool bAllow);// 0x3a52ba0
	void SetAirControlF(float rate);// 0x3a52b20
	void SetAirControlB(float rate);// 0x3620390
	void ServerSetUsingHorn(bool bUse);// 0x3a52a58
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x3a52990
	void ServerSetBoosting(bool bEnalbed);// 0x3a528c8
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x3a52850
	void ServerSetAirControlF(float rate);// 0x3a5279c
	void ServerSetAirControlB(float rate);// 0x3a526e8
	void ServerResetToPosition(Vector NewLocation, Rotator NewRotation);// 0x3a52620
	void ServerDetachEveryoneFromSeat(bool bMustExit, bool bApplyVehicleVelocity);// 0x3a52550
	void SendVehicleInAirChangedTimeToServer();// 0x3a524f4
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x3a52440
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x3a5238c
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x3a52370
	void SafeSleepVehicle();// 0x3a5235c
	void RestartAntiCheat();// 0x3a52348
	void ResetJoystickMove();// 0x3a52334
	void RequestChangeVehicleAvatar();// 0x3a522d8
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x3a521c8
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x3a52070
	void RemoveAntiStuckBox();// 0x3a5205c
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x3a51fe4
	void RegisterComponentWeakTick(VehicleComponent* InComponent);// 0x3a51f6c
	void RegisterComponentTick(VehicleComponent* InComponent);// 0x3a51ef4
	void RecordValidTransform();// 0x3a51ee0
	void RecordInAirTime();// 0x3a51ecc
	void ProcessAvatarOutline();// 0x3a51eb0
	void PrintStats();// 0x362b150
	bool PreChangeVehicleFPPAvatar();// 0x3a51e88
	bool PreChangeVehicleBrokenAvatar();// 0x3a51e60
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x3a51d9c
	void PostLoadFPPMesh();// 0x3a51d80
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x3a51d08
	bool PawnHasState(enum PawnState);// 0x3a51c80
	bool OverlapTest(out const Transform Transform, PrimitiveComponent* PrimComp, out const Transform PrimCompTransform, bool UseOBB);// 0x3a51a80
	void OnUserSwitchWeapon(STExtraBaseCharacter* InUser, byte Slot);// 0x3a519b0
	void OnUpdateEffects();// 0x4a51734
	void OnStopFire();// 0x4a51734
	void OnSkeletalMeshSleep(PrimitiveComponent* SleepingComponent, FName BoneName);// 0x3a518ec
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x3a51828
	void OnSetTailLightValue(float LightValue);// 0x4a51734
	void OnServerReconnectPossess();// 0x3a5180c
	void OnServerPlayerChangeVehicleSeat(enum LastSeatType, enum NewSeatType);// 0x4a51734
	void OnRep_VehicleSyncFlag();// 0x3a517f8
	void OnRep_VehicleSimulatedPhysics();// 0x3a517e4
	void OnRep_VehicleHealthState();// 0x3a517c8
	void OnRep_TrailerMovement();// 0x3a517b4
	void OnRep_TeamID();// 0x362033c
	void OnRep_SimulateViewData();// 0x3a517a0
	void OnRep_SimulateFreeCameraViewData();// 0x3a5178c
	void OnRep_ServerLastReplicatedServer();// 0x3a51778
	void OnRep_ReplicatedFuelRatio();// 0x3a51764
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x3a51750
	void OnRep_IsForbidNightVehicle();// 0x3a5173c
	void OnRep_IsEngineStarted();// 0x3a51728
	void OnRep_IsBoosting();// 0x3a51714
	void OnRep_IsAirdroppingVehicle();// 0x3a51700
	void OnRep_FrozenStatic();// 0x3a516ec
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x3a51674
	void OnRep_CandidateAvatar();// 0x4a51734
	void OnRep_CampID();// 0x3592f9c
	void OnRep_AttachedRelLoc();// 0x3a51660
	void OnRep_AttachedActor();// 0x3a5164c
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x3871288
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character, bool bSuccess);// 0x4a51734
	void OnPlayerEnterVehicle(bool IsSuccess, enum SeatType);// 0x4a51734
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x3a514e0
	void OnFireBeginOverlapEvent(Actor* OtherActor);// 0x3a51468
	void OnEngineStop();// 0x4a51734
	void OnEngineStart();// 0x4a51734
	void OnBoostingChanged();// 0x4a51734
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x3a5137c
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x3a5127c
	void LoadFPPVehicleModel();// 0x3a51268
	bool IsVehicleWarVehicle();// 0x3a51238
	bool IsVehicleBlockFromExplosion();// 0x3a51208
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm);// 0x3a5113c
	bool IsUsingFPPModel();// 0x3a51114
	bool IsUnusable();// 0x3a510e4
	bool IsUCAV();// 0x3a510bc
	bool IsUAV();// 0x3a5108c
	bool IsTrailer();// 0x3a51064
	bool IsSpawnedInReady();// 0x3a51048
	bool IsSimulatePhysics();// 0x3a51020
	bool IsNotInWater();// 0x3a50ff0
	bool IsMotorbike();// 0x3a50fc8
	bool IsLocallyControlled();// 0x3a50f98
	bool IsInMidAir();// 0x3a50f68
	bool IsInBuffSpeedState();// 0x3a50f4c
	bool IsHelicopter();// 0x3a50f24
	bool IsFloatingOnWater();// 0x3a50efc
	bool IsEntirelyUnderWater();// 0x3a50ed4
	bool IsElectronic_Failure();// 0x3a50eac
	bool IsDestroyed();// 0x3a50e84
	bool IsClient_WeaponOwner();// 0x3a50e54
	bool IsCharacterPlayingSeatAnim(STExtraPlayerCharacter* Character);// 0x3a50dd4
	bool IsBoosting();// 0x3a50da4
	bool IsAutoDriving();// 0x3a50d7c
	bool IsArmedVehicle();// 0x3a50d54
	bool IsAmphibiousVehicle();// 0x3a50d2c
	bool IsAlive();// 0x3a50cfc
	bool IsAirVehicle();// 0x3a11b74
	bool IsAirdroppingVehicle();// 0x3a50ce0
	bool IsActiveEffect(FName EffectName);// 0x3a50c60
	bool IsAcceptInputControl();// 0x3a50c44
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x3a50b28
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x3a50a64
	bool HasTrailer();// 0x3a50a3c
	bool HasSkillID(int SkillID);// 0x3a509bc
	bool HasBuffID(int BuffID);// 0x3a50934
	bool HasAutoDriveTarget();// 0x3a5090c
	void HandleVehicleHealthDestroy();// 0x3a508f0
	void HandlePlayerAttachedToVehcicle(STExtraBaseCharacter* Player);// 0x3a50870
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x39b030c
	void HandleOnVehicleAvatarDataCopied();// 0x3a5085c
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3a50754
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x3a505bc
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3a504b4
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3a41d30
	void HandleMoveAntiShootVerifyMiss();// 0x3a31ff8
	void HandleMeshLodChange(int LODLevel);// 0x3a5043c
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x3a503bc
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x3a5033c
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x3a502c4
	Actor* GetWeaponUserConst();// 0x3a50294
	Actor* GetWeaponUser();// 0x3a50264
	int GetWeaponReconnectIdx();// 0x3a50234
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x3a50204
	uint32 GetWeaponOwnerPlayerKey();// 0x3a501d4
	float GetWeaponOwnerPawnHealth();// 0x3a501a4
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x3a50174
	WeaponManagerComponent* GetWeaponManager();// 0x3a50144
	Rotator GetViewRotation();// 0x391ec14
	SkeletalMeshComponent* GetVehicleWheelMesh();// 0x3a5011c
	VehicleShootWeapon* GetVehicleWeapon(int SeatID, int WeaponListID);// 0x3a50058
	VehicleSyncComponent* GetVehicleSync();// 0x36923ac
	VehicleSpringArmComponent* GetVehicleSpringArm();// 0x3a50030
	int GetVehicleSkinItemID();// 0x3a50008
	VehicleSeatComponent* GetVehicleSeats();// 0x3a4ffec
	float GetVehicleReplicatedFuelRatio();// 0x3a4ffc4
	float GetVehicleOriginToLand();// 0x3a1c55c
	enum GetVehicleHealthState();// 0x3a4ffa8
	VehicleDamageComponent* GetVehicleDamage();// 0x3a4ff8c
	VehicleCommonComponent* GetVehicleCommon();// 0x3a4ff70
	Vector GetVehicleCenter();// 0x3a4ff20
	VehicleAvatarComponent* GetVehicleAvatar();// 0x3a4fef8
	VehicleAIComponent* GetVehicleAIComponent();// 0x3a4fedc
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x3a4feb4
	bool GetUsingHorn();// 0x3a4fe8c
	VehicleTrailerComponent* GetTrailerComponent();// 0x3a4fe64
	int GetTeamId();// 0x3a4fe3c
	MaterialInstanceDynamic* GetTailLightDIM();// 0x3a4fe14
	AkComponent* GetSoundComponent();// 0x3a4fdec
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x369aafc
	Vector GetRotationInputDir();// 0x38f6b0c
	float GetReloadAllWeaponTime();// 0x3a4fdc4
	Actor*[] GetQueryIgnoreActors();// 0x3a4fcfc
	VehiclePickableComponent* GetPickUpComponent();// 0x3a4fcd4
	Rotator GetPhysicsBoundsRotation(bool IsOBB);// 0x3a4fc3c
	Vector GetPhysicsBoundsExtent(bool IsOBB);// 0x3a4fba4
	Vector GetPhysicsBoundsCenter(bool IsOBB);// 0x3a4fb0c
	float GetMoveRightRate();// 0x3a4faf0
	float GetMoveForwardRate();// 0x3a4fad4
	SkeletalMeshComponent* GetMesh();// 0x398f8cc
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x3a4faa4
	BattleItemHandleBase* GetItemHandle();// 0x3a4fa88
	bool GetIsPhysSleep();// 0x3a4fa58
	bool GetIsOpenVertify();// 0x3a4fa3c
	float GetHandBrakeRate();// 0x3a4fa20
	Vector GetGunOwnerHeadLocation();// 0x3a4f9d0
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x3a4f9a8
	float GetForwardSpeed();// 0x37c0cbc
	STExtraPlayerCharacter* GetFirstPassenger();// 0x3a4f980
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x3a4f958
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x3a4f928
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x3a4f90c
	STExtraPlayerCharacter* GetDriver();// 0x3a4f8e4
	int GetDiedBoxAvatarID();// 0x3a4f8b4
	uint64 GetCurrentStatesInterface();// 0x3a4f884
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x3a4f7b8
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x3a4f62c
	Vector2D GetCharacterViewLimit(STExtraBaseCharacter* Character);// 0x3a4f5a4
	bool GetCharacterMEnsure();// 0x3a4f574
	class AnimInstance GetCharacterInVehicleAnimBP(int SeatID);// 0x3a4f4f4
	bool GetCharacterEnsure();// 0x3a4f4c4
	int GetCampId();// 0x3a4f49c
	BuoyancyForceComponent* GetBuoyancyForce();// 0x3a4f480
	Vector GetBoxExtent();// 0x3a4f438
	int GetAvatarId();// 0x3a4f410
	STExtraVehicleBase* GetAttachedVehicle();// 0x3a4f3e0
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x3a4f314
	void GetAllSkeletalMeshList(out SkeletalMeshComponent*[] OutList);// 0x3a4f248
	void ExitFPPVehicle();// 0x3a4f234
	void EnterFPPVehicle();// 0x3a4f218
	void EnablePlayMusic(bool InEnable);// 0x3a4f19c
	void EnableAvatarOutline(enum OutlineType);// 0x3a4f124
	void DestroyAndRespawnSelf();// 0x3a4f110
	void DeactiveEffect(FName EffectName);// 0x3a4f098
	void CreateAntiStuckBox();// 0x3a4f084
	void CorrectControlRotation(Rotator NewRotation);// 0x3a4f00c
	bool ComponentTickRegistered(const VehicleComponent* InComponent);// 0x3a4ef8c
	void ClientPlayVehicleCameraShake();// 0x3a4ef30
	void ClientFeedbackPointDamage(Actor* DamageCauser, float Damage);// 0x3a4ee34
	void ClearInputs();// 0x3a4ee18
	void ClearDecals();// 0x3a4ee04
	void ClearBuff();// 0x3a4ede8
	void ClearAllInputState();// 0x3a4edcc
	void ClearAllComponentWeakTick();// 0x3a4edb8
	void ClearAllComponentTick();// 0x3a4eda4
	bool CheckHaveSpecialAttachActor();// 0x3a3ae3c
	void CheckEnableAvatarOutline();// 0x4a51734
	bool CheckAllWeaponIsReadyForFire();// 0x3a4ed7c
	void ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x3a4ecfc
	void ChangeAssetBy(BackpackVehicleAvatarHandle* InAvatarHandle);// 0x3a4ec84
	bool CanVehicleJump();// 0x3a4ec5c
	bool CanVehicleBePickup();// 0x3a4ec34
	bool CanPushUpCharacterWhenPenetrating();// 0x3a4ec18
	bool CanLeaveVehicle();// 0x390376c
	bool CanDrive(STExtraPlayerCharacter* Character);// 0x3a4eb90
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x3a4eb08
	bool CanAutoDrivingNoDriver();// 0x3a4eae0
	bool CanAutoDriving();// 0x3a4eab8
	bool CanActiveEffect(FName EffectName);// 0x3a4ea30
	void CalcPhysicsBounds(out Vector OutLocation, out Rotator OutRotation, out const Transform NewVehicleTM, bool IsOBB);// 0x3a4e860
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x3a4e790
	void BroadcastClientVehicleExplosionEffect();// 0x3a4e774
	void BPPostLoadFPPMesh();// 0x4a51734
	void BPPlayOverlapDamageCameraShake();// 0x4a51734
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x3649068
	bool BPCanCharacterEnter(STExtraPlayerCharacter* InCharacter, enum SeatType);// 0x3a4e6a8
	void AutoLoadEffect();// 0x3a4e694
	void ApplyVehicleImpulse(out const Vector ApplyImpulse, bool bVelocityChange);// 0x3a4e5b8
	bool ApplyAnimation();// 0x3a4e590
	void AIChangeVehicleAvatar(FakePlayerAIController* MainPlayerController);// 0x3a4e510
	void AfterBeginPlay();// 0x4a51734
	void AddHealthSafety(float AddVal);// 0x3a4e490
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer, int Level);// 0x3a4e338
	int AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID, int Level);// 0x3a4e198
	void ActiveEffectAsync(FName EffectName);// 0x3a4e120
	void ActiveEffect(FName EffectName);// 0x3a4e0a8

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ValidDeviceLevel;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 4]

--------------------------------
Class: RepMovementKeyLoc
	enum LocationQuantizationLevel;//[Offset: 0x1c, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	float VaildExitVehicleHeight;//[Offset: 0x150, Size: 4]
	float PassengerHeightOffset;//[Offset: 0x154, Size: 4]
	STExtraVehicleSeat[] Seats;//[Offset: 0x158, Size: 12]
	VHSeatCharacterCameraOffsetData[] SeatsCameraConfigs;//[Offset: 0x164, Size: 12]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x170, Size: 12]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x17c, Size: 12]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x188, Size: 12]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x194, Size: 12]
	delegate OnSeatOccupiersChanged;//[Offset: 0x1a0, Size: 12]
	delegate OnSeatSocketChanged;//[Offset: 0x1ac, Size: 12]
	delegate OnVehicleWeaponRep;//[Offset: 0x1b8, Size: 12]
	delegate OnClientDriverChange;//[Offset: 0x1c4, Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x1d0, Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x1dc, Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0x1e8, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bCheckLeaveLocationSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	float LeaveLocationSpaceInflation;//[Offset: 0x1f0, Size: 4]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	bool bHidenCharacterOnSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5, Size: 1]
	bool bCanChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f6, Size: 1]
	enum[] SeatGUITypes;//[Offset: 0x200, Size: 12]
	STExtraPlayerCharacter*[] LastOccupiers;//[Offset: 0x20c, Size: 12]
	delegate OnPlayEnterVehicleAnim;//[Offset: 0x218, Size: 12]
	delegate OnPlayExitVehicleAnim;//[Offset: 0x224, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x230, Size: 12]
	delegate OnSeatDetachedBefore;//[Offset: 0x23c, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x248, Size: 12]
	delegate OnSeatChanged;//[Offset: 0x254, Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x260, Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x26c, Size: 12]
	delegate OnDriverChange;//[Offset: 0x278, Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x284, Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x294, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x29c, Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x2a4, Size: 4]
	delegate BeginEnterVehicleEvent;//[Offset: 0x2a8, Size: 12]
	delegate EndEnterVehicleEvent;//[Offset: 0x2b4, Size: 12]
	delegate BeginExitVehicleEvent;//[Offset: 0x2c0, Size: 12]
	delegate EndExitVehicleEvent;//[Offset: 0x2cc, Size: 12]
	bool bShowSeatUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bLeaveFailedTipsNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	void VehicleWeaponRepDelegate__DelegateSignature();// 0x4a51734
	void TestReleaseSeatAnim();// 0x3b2c0d4
	void SeatOccupiersChangedDelegate__DelegateSignature();// 0x4a51734
	void ReAttachAllCharacters();// 0x3b2c0c0
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x3b2c004
	void OnSeatSocketChanged__DelegateSignature();// 0x4a51734
	void OnRep_VehicleWeapons();// 0x3b2bff0
	void OnRep_Occupiers();// 0x3b2bfdc
	void OnRep_Attachments();// 0x3b2bfc8
	void OnDeleyReleaseWeapon(STExtraPlayerCharacter* Character, int SeatIdx);// 0x3b2bf0c
	bool IsSeatIndexAvailable(int SeatIndex);// 0x3b2be84
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x3b2be04
	bool IsSeatAvailable(enum SeatType);// 0x3b2bd84
	bool IsDriver(STExtraBaseCharacter* InCharacter);// 0x3b2bd04
	bool IsCharacterControlWeapon(STExtraPlayerCharacter* InCharacter);// 0x3b2bc84
	bool HasCharacter(const STExtraBaseCharacter* Character);// 0x3b2bc04
	int GetTotalSeatsNum();// 0x35afd88
	int GetSeatNum();// 0x3b2bbe8
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x3b2b9e0
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x3b2b954
	int GetInUseSeatNum();// 0x3b2b92c
	STExtraBaseCharacter* GetFirstSeatCharacterBySeatType(enum SeatType);// 0x3b2b8ac
	STExtraPlayerCharacter* GetFirstPassenger();// 0x3b2b884
	int GetDriverSeatIndex();// 0x3b2b85c
	STExtraPlayerCharacter* GetDriver();// 0x3b2b834
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x3b2b7b4
	int GetAvailableSeatIndex(enum SeatType);// 0x3b2b72c
	void EndExitVehicle__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, bool Success);// 0x4a51734
	void EndEnterVehicle__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, bool Success);// 0x4a51734
	void DetachEveryoneSafely();// 0x3592f9c
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x3b2b630
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x3b2b56c
	void ClientDriverChangeDelegate__DelegateSignature(STExtraBaseCharacter* LastDriver, STExtraBaseCharacter* NewDriver);// 0x4a51734
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x3b2b428
	void ChangeCharacterSeatSocket(out const FName[] InSeatSockets);// 0x3b2b35c
	bool CanChangeSeat(const STExtraBaseCharacter* InCharacter, int NewSeatIndex, out int FailedTips);// 0x3b2b260
	void BeginExitVehicle__DelegateSignature(STExtraPlayerCharacter* Character);// 0x4a51734
	void BeginEnterVehicle__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType);// 0x4a51734

--------------------------------
Class: VehicleComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	bool bHasUpPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bHasDownPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	byte OccupyMovementMode;//[Offset: 0x22, Size: 1]
	enum HoldWeaponType;//[Offset: 0x23, Size: 1]
	enum SeatSpecialType;//[Offset: 0x24, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x28, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x2c, Size: 4]
	Vector2D ViewPitchLimit;//[Offset: 0x30, Size: 8]
	Rotator CharRotVsVehiRot;//[Offset: 0x38, Size: 12]
	enum SeatSideType;//[Offset: 0x44, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x48, Size: 12]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x58, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float Radius;//[Offset: 0x64, Size: 4]
	float HalfHeight;//[Offset: 0x68, Size: 4]
	Transform CollisionOffset;//[Offset: 0x70, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float OnSeatCameraSpringArmLength;//[Offset: 0xa4, Size: 4]
	Vector2D CharacterPitchLimit;//[Offset: 0xa8, Size: 8]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 4]
	Vector2D ViewYawLimit;//[Offset: 0xc, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x14, Size: 8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float MuzzleDirTor;//[Offset: 0x20, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x28, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x30, Size: 28]
	float DistTorSquared;//[Offset: 0x4c, Size: 4]
	bool UseByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int VehicleWeaponParentIndex;//[Offset: 0x54, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	delegate OnVehWeaponUseStateChange;//[Offset: 0xfbc, Size: 12]
	float RotateSpeedOnVehicle;//[Offset: 0xfc8, Size: 4]
	bool bDoWeaponYawOnComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfcc, Size: 1]
	bool bDoWeaponRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfcd, Size: 1]
	float WeaponRotationLagYawThreshold;//[Offset: 0xfd0, Size: 4]
	float WeaponRotationLagPitchThreshold;//[Offset: 0xfd4, Size: 4]
	bool bUseWeaponRotationLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd8, Size: 1]
	bool bEquipOnDriversSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd9, Size: 1]
	float WeaponRotationLagMaxTimeStep;//[Offset: 0xfdc, Size: 4]
	float WeaponRotationLagSpeed;//[Offset: 0xfe0, Size: 4]
	float WeaponRotationScopingScale;//[Offset: 0xfe4, Size: 4]
	float WeaponRotationYawScopingScale;//[Offset: 0xfe8, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfec, Size: 1]
	bool bWeaponStateNotifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfed, Size: 1]
	byte FireMode;//[Offset: 0xfee, Size: 1]
	enum CameraSpace;//[Offset: 0xfef, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff0, Size: 1]
	bool bUseOwnerActorView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff1, Size: 1]
	bool bIgnorePawnControlView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff2, Size: 1]
	bool bDebugCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff3, Size: 1]
	FName CameraParentComponentTag;//[Offset: 0xff8, Size: 8]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0x1008, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0x1010, Size: 44]
	bool bUseAnimRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 1]
	float AnimRotationLimitOffset;//[Offset: 0x1040, Size: 4]
	CameraOffsetData OwnerActorViewCameraData;//[Offset: 0x1044, Size: 44]
	Vector2D PitchRange;//[Offset: 0x1070, Size: 8]
	Vector2D YawRange;//[Offset: 0x1078, Size: 8]
	bool bUseSeatLimitCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	bool bShowCrosshairUsedByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1081, Size: 1]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1082, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0x1088, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0x1090, Size: 4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0x1094, Size: 4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0x1098, Size: 4]
	float VehicleWeaponReloadRate;//[Offset: 0x109c, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x10a0, Size: 4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a4, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0x10a8, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0x10b0, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b9, Size: 1]
	bool bVehicleWeaponUseParentRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ba, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bb, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bc, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bd, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cc, Size: 1]
	bool bSyncVehicleSimulateBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cd, Size: 1]
	bool bEnableSyncShootInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ce, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cf, Size: 1]
	bool bEnableMoveCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 1]
	float UnEquipTime;//[Offset: 0x10d4, Size: 4]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10da, Size: 1]
	FName CharacterSocket;//[Offset: 0x10e0, Size: 8]
	float TimeDelayAttachCharacter;//[Offset: 0x10e8, Size: 4]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ec, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ed, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ee, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ef, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f0, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f1, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0x10f4, Size: 4]
	FName GrenadePredictLineSocket;//[Offset: 0x10f8, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0x1100, Size: 4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1104, Size: 1]
	float FuelConsumptionRate;//[Offset: 0x1108, Size: 4]
	Rotator MuzzleShootDirection;//[Offset: 0x1110, Size: 12]
	float LastUseTimeStamp;//[Offset: 0x111c, Size: 4]
	Vector MuzzleShootTarget;//[Offset: 0x1120, Size: 12]
	Vector2D MuzzleShootTargetOnScreenLoc;//[Offset: 0x112c, Size: 8]
	Vector4 Limit;//[Offset: 0x1140, Size: 16]
	Vector2D UIOffset;//[Offset: 0x1150, Size: 8]
	float StartReloadDelayTime;//[Offset: 0x1168, Size: 4]
	float EndReloadDelayTime;//[Offset: 0x1178, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0x117c, Size: 4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1184, Size: 4]
	WeaponSyncData VehicleWeaponSyncData;//[Offset: 0x1188, Size: 8]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x1190, Size: 4]
	WeaponOverHeatingComponent* WeaponOverHeatingComp;//[Offset: 0x11b0, Size: 4]
	int BulletTypeTipMsgID;//[Offset: 0x11b4, Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0x11b8, Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0x11bc, Size: 4]
	void StartReloadAnim();// 0x3b31818
	void SetVehWeaponTickEnabled(bool bEnabled);// 0x3b31798
	void SetVehicleWeaponSkin(MaterialInterface* InMaterial);// 0x3b31720
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x3b3160c
	void SetCameraSpace(enum InCameraSpace);// 0x3b31594
	void OnVehicleExplode();// 0x3a4ee18
	void OnRep_VehicleWeaponSyncData();// 0x3b31580
	void OnRep_OwnerActorBP();// 0x4a51734
	void OnRep_OwnerActor();// 0x3b3156c
	void OnClientVehWeaponUseStateChange__DelegateSignature(STExtraPlayerCharacter* uCharacter, bool bUse);// 0x4a51734
	void NetMulticastReturnBullets();// 0x3b31510
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x3b313b4
	void K2_SetSpecialMeshHide(bool isHide);// 0x4a51734
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x4a51734
	void K2_OnReturnBullets();// 0x4a51734
	MeshComponent* K2_GetWeaponMeshComp();// 0x4a51734
	void HnadleScopeInAfterReload();// 0x3b313a0
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x3b312e4
	void HandleWeaponStartReload();// 0x3b312d0
	void HandleWeaponEndReload();// 0x3b312bc
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x3b3123c
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x3b311b8
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x3b31190
	STExtraVehicleBase* GetOwnerVehicle();// 0x3b31168
	Rotator GetOwnerCameraRotator();// 0x3b31120
	Vector2D GetMuzzleShootTargetOnScreen();// 0x3b310e0
	Transform GetCharacterSocketTransform();// 0x3b31080
	void DoVehicleWeaponEquipActionBP(bool bEquip);// 0x4a51734
	void DoUsedOrNotBP(STExtraPlayerCharacter* Character, bool bUsed);// 0x4a51734
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x3b31008
	bool CheckIsAutonomousOrObTarget();// 0x3b30fe0
	void ChangeScopingRotateSpeed(bool IsScoping);// 0x3b30f60
	void AfterReloadEnd();// 0x3b30f4c

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x930, Size: 1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x931, Size: 1]
	float voiceCheckCD;//[Offset: 0x934, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x938, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 1]
	byte[] CanAutoTryingToFireStateList;//[Offset: 0x940, Size: 12]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x964, Size: 64]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a5, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x9a8, Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x9b4, Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x9c0, Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x9cc, Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x9d8, Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x9e4, Size: 12]
	delegate OnServerWeaponShootDelegate;//[Offset: 0x9f0, Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x9fc, Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xa08, Size: 12]
	delegate OnWeaponReloadReplayDelegate;//[Offset: 0xa14, Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xa20, Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0xa2c, Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xa38, Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0xa44, Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0xa50, Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0xa5c, Size: 12]
	delegate OnReloadScuccessDelegate;//[Offset: 0xa68, Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0xa74, Size: 12]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0xa80, Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0xa98, Size: 12]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0xaa4, Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0xab0, Size: 12]
	delegate OnShootWeaponAutoDrop;//[Offset: 0xabc, Size: 12]
	delegate OnWeaponDropStart;//[Offset: 0xac8, Size: 12]
	delegate OnWeaponDropFinished;//[Offset: 0xad4, Size: 12]
	delegate OnBulletLaunch;//[Offset: 0xae0, Size: 12]
	delegate OnBulletImpact;//[Offset: 0xaec, Size: 12]
	delegate OnBulletImpactFX;//[Offset: 0xaf8, Size: 12]
	delegate OnSpawnBulletImpactFX;//[Offset: 0xb04, Size: 12]
	delegate OnChangeShootType;//[Offset: 0xb10, Size: 12]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xb1c, Size: 4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xb20, Size: 4]
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xb24, Size: 4]
	delegate OnScopeIn;//[Offset: 0xb28, Size: 12]
	delegate OnScopeOut;//[Offset: 0xb34, Size: 12]
	delegate OnScopeInContinue;//[Offset: 0xb40, Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xb4c, Size: 4]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0xb50, Size: 4]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0xb54, Size: 4]
	EnergyAccumulateShootComponent* EnergyAccumulateShootComponent;//[Offset: 0xb58, Size: 4]
	FillGasComponent* FillGasComponent;//[Offset: 0xb5c, Size: 4]
	int CurBulletNumInClip;//[Offset: 0xb60, Size: 4]
	BulletInClip CurBulletInClip;//[Offset: 0xb64, Size: 16]
	int CurMaxBulletNumInOneClip;//[Offset: 0xb74, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0xb78, Size: 4]
	bool bBulletPreUseFromPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7c, Size: 1]
	int DynamicReloadType;//[Offset: 0xb80, Size: 4]
	byte ShootMode;//[Offset: 0xb84, Size: 1]
	byte CurShootType;//[Offset: 0xb85, Size: 1]
	byte LastShootType;//[Offset: 0xb86, Size: 1]
	int CurShootTotalType;//[Offset: 0xb88, Size: 4]
	byte SpecialFixShootType;//[Offset: 0xb8c, Size: 1]
	float voiceCheckDis;//[Offset: 0xb90, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0xb94, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0xb98, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0xb9c, Size: 12]
	int AngledSightID;//[Offset: 0xbb4, Size: 4]
	byte TraceChannel;//[Offset: 0xbb8, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0xbbc, Size: 12]
	float LastImpactEffectTime;//[Offset: 0xbc8, Size: 4]
	int CurBurstShootIndex;//[Offset: 0xbd0, Size: 4]
	Transform BoltActionTransform;//[Offset: 0xbe0, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 1]
	int ClientShootTimes;//[Offset: 0xc14, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xc18, Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xc1c, Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xc20, Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0xc24, Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xc28, Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0xc2c, Size: 4]
	Vector BulletDecalScale;//[Offset: 0xc30, Size: 12]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xc3c, Size: 16]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4d, Size: 1]
	float DropDuration;//[Offset: 0xc50, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xc54, Size: 4]
	float AIShootLoudness;//[Offset: 0xc58, Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0xc5c, Size: 4]
	float AIShootMaxDis;//[Offset: 0xc60, Size: 4]
	float AISilenceShootLoudness;//[Offset: 0xc64, Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xc68, Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0xc6c, Size: 4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	FireWeaponState* _FireWeaponState;//[Offset: 0xc74, Size: 4]
	byte CurShootWeaponState;//[Offset: 0xc79, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xc88, Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xc8c, Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0xc90, Size: 4]
	enum CurShootIntervalMode;//[Offset: 0xc94, Size: 1]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc95, Size: 1]
	bool IsEquipACCore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc96, Size: 1]
	bool IsEquipBezel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc97, Size: 1]
	bool IsTacticalAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc99, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9a, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xc9c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xca8, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xcb4, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xcc0, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xccc, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xcd8, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xce4, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0xcf0, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xcfc, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xd08, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xd14, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xd20, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd2c, Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0xd38, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 1]
	bool bBezelUnFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd45, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xd50, Size: 12]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xd5c, Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xd60, Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0xd6c, Size: 12]
	<int64,int> AttachedAttachmentInstanceID;//[Offset: 0xd78, Size: 60]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xdb4, Size: 12]
	int[] DynamicDefaultAttachedAttachmentID;//[Offset: 0xdc0, Size: 12]
	uint32 ShootID;//[Offset: 0xdcc, Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xdd0, Size: 4]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0xdd4, Size: 12]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde4, Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde5, Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe90, Size: 1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 1]
	bool bPostFireReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed9, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeda, Size: 1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0xedc, Size: 12]
	float WeaponDurability;//[Offset: 0xee8, Size: 4]
	int8 CurRearSightIndex;//[Offset: 0xeec, Size: 1]
	bool bEquipmentModifierOnlyRepOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef4, Size: 1]
	int UpgradeInfoID;//[Offset: 0xef8, Size: 4]
	uint32[] UpgradeBModifyIdArray;//[Offset: 0xefc, Size: 12]
	bool bUseNewUploadData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf08, Size: 1]
	bool bUseHitDataFlowOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf09, Size: 1]
	ReplayStartFireInfo ReplayStartFireInfo;//[Offset: 0xf0c, Size: 44]
	BulletHitInfoUploadDataInReplay[] RepRelpayHitDataArray;//[Offset: 0xf78, Size: 12]
	NextFireMinShootDataInReplay[] NextFireMinShootData;//[Offset: 0xf84, Size: 12]
	NextFireMinShootDataInReplay[] RepNextFireMinShootData;//[Offset: 0xf90, Size: 12]
	SACData[] SACDataArray;//[Offset: 0xfb0, Size: 12]
	void WeaponPartsRender(int WeaponSlotID);// 0x3a213bc
	bool VerifyCostOneBullet();// 0x3a2138c
	void UpdateComponentTick();// 0x3a21378
	void SuccessReload();// 0x3a2135c
	bool StopFireFilter();// 0x3a2132c
	void StopFire(byte ToState);// 0x3a212ac
	void StopFillGas();// 0x3a21298
	int StartReload();// 0x3a21268
	bool StartFireFilter();// 0x3a21238
	void StartFire();// 0x3892528
	void StartFillGas();// 0x3a21224
	void StartDoPreBarrel(float HandledTime);// 0x3a211a4
	void StartDoBarrel();// 0x3a21188
	void ShowDefaultScope(bool bShow);// 0x3a21108
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x3a21044
	void ShootIDIsNotValid();// 0x39906cc
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable, bool ClientSimulate);// 0x3a20eec
	void SetUpgradeInfoID(int ID);// 0x3a20e74
	void SetSpecialFixShootTypeOnServer(byte InSpecialFixShootType);// 0x3a20dfc
	void SetReloadWithNoCostFromEntity(bool bReloadWithNoCost);// 0x3a20d7c
	void SetReloadTypeOnServer(byte ReloadType);// 0x3a20d04
	void SetRearSightIndex(int Index);// 0x3a20c8c
	void SetLastFireTime(float Time);// 0x3a20c14
	void SetCurShootType(byte ShootType);// 0x3a20b9c
	void SetCurrentBulletNumInClipOnServer(BulletInClip InBulletInClip);// 0x3a20a38
	void SetCurrentBulletNumInClipOnClient(BulletInClip InBulletInClip);// 0x3a208d4
	void SetCurReloadMethod(byte method);// 0x3a2085c
	void SetBulletInClip(out BulletInWeapon[] InCurBulletList, int Count);// 0x3a20748
	void SetBaseImpactDamageEntity(float Damage);// 0x36dbb90
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x3a2063c
	bool ScopeOut();// 0x3a2060c
	void ScopeInContinue();// 0x3a205f8
	bool ScopeIn();// 0x39204f8
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x3a20578
	void RPC_ServerStopReload(int InterruptState);// 0x3a204c4
	void RPC_ServerSetMaxBulletNum();// 0x3a20468
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x3a203b4
	void RPC_Server_SetRearSightIndex(int Index);// 0x3a20300
	void RPC_ClientSetCurShootType(byte ShootType);// 0x3a2024c
	void RPC_ClientSetCurReloadMethod(byte method);// 0x3a20198
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainReloadTimes);// 0x3a20118
	void RPC_ClientChangeFreshWeaponState_WithParams(byte State, byte Parameter);// 0x3a2001c
	void RPC_Client_SetBulletNumInClip(BulletInClip InBulletInClip, int DSFireID);// 0x3a1fd8c
	void RPC_Client_DebugShootOtherBlock(Actor* BlockAct, PrimitiveComponent* BlockComp, Vector BlockActWorldVec, Vector BlockCompWorldVec);// 0x3a1fbd8
	void RotateCrossHair(Rotator Rot);// 0x3a1fb68
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x3a1fae8
	void ResetCurBulletNumInBarrel();// 0x3a1fad4
	void ReSetBulletInClip(BulletInClip NewBulletInClip);// 0x3a1f970
	void RemoveGrenadeLaunchBullet(int RemoveNum);// 0x3a1f8f8
	void RemoveBulletInClip(int RemoveNum, bool IsRevert);// 0x3a1f82c
	void RefreshCurClip();// 0x3a1f818
	void RefreshBulletInClip(int Count);// 0x3a1f7a0
	void ReduceWeaponDurability(float ReduceAmount);// 0x3a1f728
	void PushSACData(out const SACData SACData);// 0x3a1f648
	void PreSetBulletListInClip(BulletInClip NewBulletInClip);// 0x3a1f4e4
	byte PopNextSpecialBulletID();// 0x362caec
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x4a51734
	void OnWeaponShootDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x4a51734
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponReloadReplayDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x4a51734
	void OnWeaponEquipDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponDurabilityChangeDelegate__DelegateSignature();// 0x4a51734
	void OnStopFireDelegate__DelegateSignature();// 0x4a51734
	void OnStartFireDelegate__DelegateSignature();// 0x4a51734
	void OnSpawnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x4a51734
	void OnShootWeaponDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x4a51734
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x4a51734
	void OnShootWeaponAutoDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x4a51734
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0x4a51734
	void OnSetRearSightIndexDelegate__DelegateSignature(int PrevIndex, int PostIndex);// 0x4a51734
	void OnScopeInContinue__DelegateSignature();// 0x4a51734
	void OnRep_WeaponDurability();// 0x3a1f4d0
	void OnRep_UpgradeInfoID();// 0x3a1f4bc
	void OnRep_SpecialFixShootType(byte OldSpecialFixShootType);// 0x3a1f444
	void OnRep_SimulateHitDataArray();// 0x3a1f430
	void OnRep_RelpayNextFireMinShootData();// 0x3a1f41c
	void OnRep_RelpayHitDataArray();// 0x3a1f408
	void OnRep_IsEquipBezel();// 0x3a1f3f4
	void OnRep_IsEquipACCore();// 0x3a1f3e0
	void OnRep_DynamicReloadType(int OldVal);// 0x3a1f368
	void OnRep_CurRearSightIndex(int8 PrevIndex);// 0x3a1f2f0
	void OnRep_CurMaxBulletNumChange();// 0x3a1f2dc
	void OnRep_CurCurShootIntervalMode();// 0x3a1f2c8
	void OnRep_CurBulletInClipOnSimulatedClients();// 0x3a1f2b4
	void OnReloadScuccess__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x4a51734
	void OnMaxBulletChange__DelegateSignature();// 0x4a51734
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x4a51734
	void OnCurBulletChange__DelegateSignature();// 0x4a51734
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x4a51734
	void OnChangeShootType__DelegateSignature(STExtraShootWeapon* ShootWeapon, byte ShootType);// 0x4a51734
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x4a51734
	void OnBulletLaunch__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x4a51734
	void OnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x4a51734
	void OnBulletImpact__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x4a51734
	void NotifyServerNoneShootAction();// 0x3a1f258
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainReloadTimes);// 0x3a1f1e0
	void NotifyClientNoneShootAction();// 0x3a1f184
	void LocalSetBulletNumInClip(BulletInClip InBulletInClip);// 0x3a1f020
	bool IsWeaponDurabilityLoss();// 0x3a1eff8
	bool IsWeaponAttachmentFullEquiped();// 0x3a1efd0
	bool IsVehicleWeapon();// 0x3a1efa8
	bool IsUsingGrenadeLaunch();// 0x3a1ef80
	bool IsUseNewUploadData();// 0x3a1ef58
	bool IsSwallowBulletTarget(Actor* TargetActor);// 0x3a1eed0
	bool IsSupportBolt();// 0x3a1eea0
	bool IsSupportAutoAim();// 0x3a1ee78
	bool IsSpecialBulletIDValid(byte SpecialBulletID, int CurShootID);// 0x3a1edac
	bool IsShowDisableCrossIcon();// 0x3a1ed7c
	bool IsPostFireReloading();// 0x3a1ed60
	bool IsOwnerInGunADS();// 0x3a1ed38
	bool IsInPreFire();// 0x3a1ed10
	static bool IsGHasInfiniteBullets();// 0x3a1ece8
	bool IsForbidShootTarget(Actor* TargetActor);// 0x3a1ec60
	bool IsEnableReloadADS();// 0x3a1ec44
	bool IsEnableDropBullet();// 0x3a1ec1c
	bool IsDriverVehicleWeapon();// 0x3a1ebf4
	bool IsAutoDrop();// 0x3a1ebcc
	void InitWeaponDurability(int NewVal);// 0x3a1eb54
	bool HasUpgrade();// 0x3a1eb2c
	bool HasMultiBullet();// 0x3a1eb04
	void HandleWeaponScopeUnEquiped(enum Type);// 0x3a1ea8c
	void HandleWeaponScopeEquiped(enum Type);// 0x3a1ea14
	void HandleWeaponAvatarPutOnSlot(int SlotID);// 0x36dbb90
	void HandleWeaponAvatarLoaded(int SlotID, ItemDefineID DefineID);// 0x3a1e944
	void HandleWeaponAvatarClearSlot(int SlotID);// 0x36dbb90
	void HandleScopeOut(bool bIsBegin);// 0x3a1e8c4
	void HandleScopeIn(bool bIsBegin);// 0x3a1e844
	void HandlePartsEquipped(int WeaponSlotID, bool IsEquipped);// 0x3a1e780
	void HandleAllWeaponAvatarLoaded();// 0x3a1e76c
	byte GetWeaponReloadType();// 0x3a1e744
	int GetWeaponIDFromEntity();// 0x3a1e71c
	int GetWeaponID();// 0x3a1e6ec
	int GetWeaponDurability();// 0x3a1e6c4
	float GetWeaponBodyLength();// 0x3a1e69c
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x3a1e504
	ParticleSystem* GetVisualBulletTrackFX();// 0x3a1e4dc
	bool GetVisualBulletTrackEnabled();// 0x3a1e4b4
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x3a1e474
	FName GetVerifyScopeSocketNameFromEntity();// 0x3a1e434
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x3a1e40c
	int GetUpgradeInfoID();// 0x3a1e3e4
	float GetTraceDistanceFromEntity();// 0x3a1e3bc
	FName GetSilencerSocketNameFromEntity();// 0x3a1e37c
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x3a1e354
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x3a1e32c
	byte GetShootTypeFromEntity();// 0x3a1e304
	float GetShootReduceDurabilityAmount();// 0x3a1e2dc
	int GetShootIntervalShowNumberFromEntity();// 0x3a1e2b4
	float GetShootIntervalFromEntity(int BulletIndex);// 0x3a1e22c
	FName GetShellDropSocketNameFromEntity();// 0x3a1e1ec
	MeshComponent* GetScopeMeshByType(FName SocketName, enum Type, int SocketIndex);// 0x3a1e0dc
	int GetScopeID(bool bIsAngledOpticalSight);// 0x3a1e04c
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x3a1df28
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x3a1de10
	int GetRemainReloadTimes();// 0x3a1dde8
	bool GetReloadWithNoCostFromEntity();// 0x3a1ddc0
	float GetReloadTimeMagOutFromEntity();// 0x3a1dd98
	float GetReloadTimeMagInFromEntity();// 0x3a1dd70
	float GetReloadTimeFromEntity();// 0x3a1dd48
	FString GetReloadTIDPostfixByReloadType(byte ReloadType, bool IsTactical);// 0x3a1dbf4
	FName GetReloadTIDNameNew(byte method);// 0x3a1db6c
	FName GetReloadTIDName(byte method);// 0x3a1dadc
	float GetReloadTacticalTimeFromEntity();// 0x3a1dab4
	int GetReloadSpecificBulletNumFromEntity();// 0x3a1da8c
	float GetReloadRateFromEntity();// 0x3a1da64
	float GetReloadDurationStartFromEntity();// 0x3a1da3c
	float GetReloadDurationLoopFromEntity();// 0x3a1da14
	float GetReloadDurationEndFromEntity();// 0x3a1d9ec
	Transform GetRelativeMuzzleTransform();// 0x3a1d984
	float GetReferenceDistance();// 0x3a1d95c
	FName GetRearSightSocket(int Index);// 0x3a1d8d4
	Rotator GetRearSightRot();// 0x3a1d88c
	int GetRearSightIndex();// 0x3a1d864
	Rotator GetRearSightHandRotOffset();// 0x3a1d81c
	float GetRangeModifier();// 0x3a1d7f4
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x3a1d734
	float GetPreFireTimeFromEntity();// 0x3a1d70c
	float GetPreFireAnimScaleFromEntity();// 0x3a1d6e4
	float GetPostReloadTimeFromEntity();// 0x3a1d6bc
	float GetPostFireTimeFromEntity();// 0x3a1d694
	float GetPostFillGasTime();// 0x3a1d66c
	FName GetOverrideScopeAimSocketName();// 0x3a1d62c
	int GetOnceReloadBulletNumOverride();// 0x3a1d5fc
	byte GetNextSpecialBulletID();// 0x362cb4c
	bool GetNeedMagAnimationWhenReload();// 0x3a1d5d4
	Transform GetMuzzleTransform();// 0x3a1d56c
	FName GetMuzzleSocketNameFromEntity();// 0x3a1d524
	float GetMinShootIntervalFromEntity();// 0x3a1d4f4
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x3a1d4cc
	float GetMaxValidHitTimeFromEntity();// 0x3a1d4a4
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x3a1d47c
	int GetMaxBulletNumInOneClipFromEntity();// 0x3a1d454
	int GetMaxBulletNumInBarrelFromEntity();// 0x3a1d42c
	bool GetIsNeedOffsetVelocityFromEntity();// 0x3a1d404
	bool GetIsEnableScopeInFromEntity();// 0x3a1d3dc
	float GetImpactEffectSkipDistanceFromEntity();// 0x3a1d3b4
	float GetIgnoreRangeAttenuatDis();// 0x3a1d38c
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim, bool IsGunADS);// 0x3a1d2a4
	AkAudioEvent* GetGrenadeLaunchShootSound();// 0x3a1d27c
	WeaponCrossHairPerformData[] GetGrenadeLaunchCrossHairData();// 0x3a1d120
	float GetGasAddDamageRate();// 0x3a1d0f8
	float GetGameDeviationFactor();// 0x3a1d0d0
	FName GetFiringSuppressorSocketNameFromEntity();// 0x3a1d090
	float GetFireSensitiveYawRate();// 0x3a1d068
	float GetFireSensitivePitchRate();// 0x3a1d040
	int GetExtraShootIntervalShowNumberFromEntity();// 0x3a1d018
	float GetExtraShootIntervalFromEntity();// 0x3a1cff0
	<int,bool> GetEquipAttachSlotMap();// 0x3a1ce20
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x3a1cd94
	byte GetCurSightVisionType();// 0x3a1cd6c
	byte GetCurSightType();// 0x3a1cd3c
	enum GetCurShootIntervalMode();// 0x3a1cd20
	int GetCurrentBulletNumInClip();// 0x3a1cd04
	float GetCurReloadTime();// 0x3a1ccdc
	byte GetCurReloadMethod();// 0x3a1ccb4
	float GetCurGasRate();// 0x3a1cc8c
	float GetCurGasAngle();// 0x3a1cc64
	int GetCurBulletNumInClipForUI();// 0x3a1cc34
	int GetCurBulletNumInClip();// 0x3a1cc0c
	float GetCrossHairInitSize();// 0x3a1cbe4
	float GetCrossHairBurstSpeed();// 0x3a1cbbc
	float GetCrossHairBurstIncreaseSpeed();// 0x3a1cb94
	byte GetControllerRole();// 0x36e2f14
	int GetConstantWeaponDurabilityFromEntity();// 0x3a1cb6c
	bool GetClipHasInfiniteBulletsFromEntity();// 0x3a1cb44
	MeshComponent* GetChildMeshComp(FName compTag);// 0x3a1cac4
	bool GetCanRecordHitDetailFromEntity();// 0x3a1ca9c
	float GetBurstShootIntervalFromEntity();// 0x3a1ca6c
	float GetBurstShootCDFromEntity();// 0x3a1ca44
	int GetBurstShootBulletsNumFromEntity();// 0x3a1ca1c
	ItemDefineID GetBulletTypeFromEntity();// 0x3a1c9d0
	BulletTrackComponent* GetBulletTrackComponent();// 0x3a1c9a8
	float GetBulletRangeEntity();// 0x3a1c980
	int GetBulletNumSingleShotFromEntity();// 0x3a1c958
	int GetBulletNumSingleShotAtFire(bool IsGunADS);// 0x3a1c8c8
	int GetBulletNumByBulletID(out const BulletInClip BulletInClip, int BulletID);// 0x3a1c7ac
	float GetBulletMomentumFromEntity();// 0x3a1c784
	float GetBulletFireSpeedFromEntity();// 0x3a1c754
	float GetBaseReloadTime(bool bTactical);// 0x3a1c6cc
	float GetBaseImpactDamageEntity();// 0x3a1c6a4
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x3a1c58c
	float GetAutoShootCDFromEntity();// 0x3a1c55c
	bool GetAutoReloadFromEntity();// 0x3a1c534
	float GetAnimForegripParam();// 0x3a1c50c
	bool GetADSManualStop();// 0x3a1c4e4
	float GetAccessoriesVRecoilFactor();// 0x3a1c4bc
	float GetAccessoriesRecoveryFactor();// 0x3a1c494
	float GetAccessoriesHRecoilFactor();// 0x3a1c46c
	float GetAccessoriesDeviationFactor();// 0x3a1c444
	void ForceSyncAllClientsBulletsNumOnServer();// 0x3a1c430
	void FixBulletNumWithValideData();// 0x3a1c41c
	bool EnablePlayBoltAnimation();// 0x3a1c3f4
	void EnableInfiniteBullets(bool bEnableInfiniteBullets);// 0x3a1c374
	void DoGrenadeLaunchStartReload();// 0x3a1c360
	void CostGasByOneShoot();// 0x3a1c34c
	void ConsumeCacheSACDataArray();// 0x3a1c338
	bool ConditionForbidShootTarget();// 0x3a1c308
	void ConditionDrawRelpayHitData(out const BulletHitInfoUploadDataInReplay HitData);// 0x3a1c1b4
	void ConditionAddTickPrerequisite();// 0x3a1c1a0
	void ClearWeaponAttrModifier();// 0x3a1c18c
	void ClampBulletInClip(int MinCount, int MaxCount);// 0x3a1c0d0
	bool CheckShootInterval();// 0x3a1c0a8
	void CheckReloadAttr();// 0x3a1c094
	bool CheckNeedClientSetMaxBulletNum();// 0x3a1c06c
	bool CheckClientBulletInClipIsValid(out const BulletInClip ClientBulletInClip);// 0x3a1bf90
	bool CanVehicleShoot();// 0x3a1bf60
	bool CanSwitchToGrenade();// 0x3a1bf44
	float CalcReloadAnimRate(AnimMontage* ReloadMontage, byte WeaponReloadMethod);// 0x3a1be80
	void BP_OnSyncSimulatedClientsCurBullets();// 0x4a51734
	bool AutoFireCheck();// 0x362cb1c
	void AttrRemovedCB(out const AttrAffected[] AffectedAttrS);// 0x3a1bd4c
	void AttrModifiedCB(out const AttrAffected[] AffectedAttrS);// 0x3a1bd4c
	void AddWeaponDurability(int AddAmount);// 0x3a1bcd4
	bool AddWeaponAttrModifierConfig(FString ConfigId, out const WeaponAttrModifyData[] AttrModifiers, int UnquieID);// 0x3a1bacc
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x3a1ba48
	void AddFillGas(float AddTime);// 0x3a1b9d0
	void AddBulletInClip(BulletInWeapon[] InCurBulletList, int Count);// 0x3a1b834

--------------------------------
Class: STExtraWeapon.LuaActor.Actor.Object
	int iRegionWeapon;//[Offset: 0x3e8, Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x3ec, Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f3, Size: 1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x3f8, Size: 16]
	Transform WeaponAttachMeshOffset;//[Offset: 0x410, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x440, Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x470, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x4a0, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x4d0, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x500, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x530, Size: 48]
	int CrossHairType;//[Offset: 0x560, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x564, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x568, Size: 4]
	PredictLineComponent* PredictLine;//[Offset: 0x56c, Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x570, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x578, Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x57c, Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x588, Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x594, Size: 12]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x5a0, Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x5ac, Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x5b8, Size: 12]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x5c4, Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x5d0, Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x5dc, Size: 12]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x5e8, Size: 12]
	delegate OnWeaponBaseEquipDelegate;//[Offset: 0x5f4, Size: 12]
	delegate OnWeaponBaseUnEquipDelegate;//[Offset: 0x600, Size: 12]
	delegate OnEquipOrUnEuipAttachmentDelegate;//[Offset: 0x60c, Size: 12]
	delegate OnPressingWeaponFuncBtnDelegate;//[Offset: 0x618, Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x624, Size: 4]
	WeaponSpecificHandler* WeaponSpecHandler;//[Offset: 0x628, Size: 4]
	byte CurFreshWeaponState;//[Offset: 0x62c, Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x630, Size: 12]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x63c, Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x640, Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649, Size: 1]
	float StartReconnectTime;//[Offset: 0x64c, Size: 4]
	int ReconnectOpIndex;//[Offset: 0x650, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x658, Size: 104]
	enum WeaponAttachState;//[Offset: 0x6c8, Size: 1]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x6cc, Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x6e0, Size: 88]
	float ServerStartCreateWeaponTime;//[Offset: 0x738, Size: 4]
	float ServerFinishCreateWeaponTime;//[Offset: 0x73c, Size: 4]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x744, Size: 4]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x74c, Size: 4]
	byte CurWeaponState;//[Offset: 0x750, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x754, Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x758, Size: 4]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x760, Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x7a8, Size: 4]
	MeshSynData[] synData;//[Offset: 0x7b0, Size: 12]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x7c0, Size: 4]
	float WaitMeshInitTime;//[Offset: 0x7c4, Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x7cc, Size: 12]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x7e4, Size: 4]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e9, Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x7ec, Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 1]
	bool bNeedHiddenWhenOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x7fc, Size: 12]
	byte WeaponUIType;//[Offset: 0x808, Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x810, Size: 48]
	Rotator RotForSimulate;//[Offset: 0x840, Size: 12]
	int FuncFlag;//[Offset: 0x84c, Size: 4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	byte AppActiveWeaponAction;//[Offset: 0x855, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> WeaponCompOutOfVisionOptimizationDataMap;//[Offset: 0x858, Size: 60]
	FString[] ComponentTickWhiteList;//[Offset: 0x894, Size: 12]
	<ActorComponent*,bool> CompTickStateMap;//[Offset: 0x8a0, Size: 60]
	bool bIsInValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	bool bForceDisableHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 1]
	bool bSkipPostReloadAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8de, Size: 1]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x4a51734
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x4a51734
	void UpdateWeaponAvatar(float DeltaTime);// 0x4a51734
	void TriggerWeaponEvent(enum Event);// 0x3a628e4
	bool StartScopeFilter();// 0x39774f0
	void SpecialResetForWeaponCrosshair();// 0x4a51734
	void SetCharacterAttrModifiers(out const FString[] ModifierNames, bool bNewEnable);// 0x3a62758
	void SetCharacterAttrModifier(FString ModifierName, bool IsEnable);// 0x3a62648
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x3a62594
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x3a624e0
	void RespawnData();// 0x4a51734
	void ResetData();// 0x4a51734
	void ReceivedUseWeapon();// 0x4a51734
	void ReceivedDisuseWeapon();// 0x4a51734
	void PlayLocalShellDropFX();// 0x4a51734
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x4a51734
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x4a51734
	void OnWeaponBaseUnEquipDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponBaseEquipDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x4a51734
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x4a51734
	void OnRepReplayData();// 0x3a624cc
	void OnRep_WeaponReconnectReplicateData();// 0x3a624b8
	void OnRep_WeaponAttachSocketName();// 0x3a624a4
	void OnRep_SimulatedOwnerPawn();// 0x3a62490
	void OnRep_OwnerClientCreateWeaponData();// 0x3a6247c
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x3a62468
	void OnRep_AvatarMeshChanged();// 0x3a62454
	void OnRep_AttachmentReplication();// 0x37d58ec
	void OnReleaseTrigger();// 0x364bca4
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x4a51734
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x4a51734
	void OnPushTrigger();// 0x3a62438
	void OnPressingWeaponFuncBtnDelegate__DelegateSignature();// 0x4a51734
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x4a51734
	void OnEquipOrUnEuipAttachmentDelegate__DelegateSignature(bool IsEquip, BackpackWeaponAttachHandle* AttachHandle);// 0x4a51734
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x4a51734
	void NotifyServerChangeState(byte State);// 0x3a623c0
	void NewInitWeapon();// 0x3a623ac
	bool NeedCreateAttachHandTimer();// 0x3a6237c
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x3a622fc
	bool IsValidToCheckAttach();// 0x3a622cc
	bool IsValidSwitchWeaponOPCondition(enum InTriggerType);// 0x3a62244
	bool IsUseAttrModify();// 0x3a62214
	bool IsSimulated();// 0x3a621ec
	bool IsLocalOrSpectorPlayer();// 0x3a621c4
	bool IsForceNeedIK();// 0x3a62194
	bool IsForceDisableHandIK();// 0x3a6216c
	bool IsAutonomous();// 0x3a62144
	void InitWeapon();// 0x3a62130
	void InitProxyBP(Actor* OwnerTarget);// 0x4a51734
	bool HasComponentSlot(byte Slot);// 0x3a620b0
	void HandleReconnectNew(Actor* WeaponOwner);// 0x3a62038
	enum GetWeaponWantsMode();// 0x3a62008
	byte GetWeaponTypeNew();// 0x3a61fe0
	byte GetWeaponType();// 0x3a61fb8
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x3a61f90
	byte GetWeaponStateType();// 0x3a61f68
	byte GetWeaponSlot();// 0x3a61f40
	int GetWeaponSkillID();// 0x3a61f18
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x3a61ef0
	enum GetWeaponOwnerObserverType();// 0x3a61ec8
	FString GetWeaponName();// 0x3a61e08
	SceneComponent* GetWeaponMuzzleEffectAttachComp();// 0x37d4b48
	MeshComponent* GetWeaponMeshComponent();// 0x3a61dd8
	int GetWeaponMainAvatarID();// 0x3a61db0
	int GetWeaponID();// 0x3a1e6ec
	byte GetWeaponHoldType();// 0x3a61d88
	byte GetWeaponFireMode();// 0x3a50f98
	WeaponEntity* GetWeaponEntityComponent();// 0x3a61d60
	FString GetWeaponDetailInfo();// 0x3a61ca0
	Transform GetWeaponAttachToBackRelativeTransformByBagLevel(int Level, int SideType);// 0x3a61bb4
	FName GetWeaponAttachSocket();// 0x3a61b6c
	WeaponSpecificHandler* GetSpecificHandler();// 0x3a61b44
	float GetSpecialScopeFov();// 0x3a61b14
	int GetScopeID(bool bIsAngledOpticalSight);// 0x3a1e04c
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x3a1df28
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x3a1de10
	byte GetOwnerRoleSafety(bool RemoteFlag);// 0x3a61a8c
	FString GetOwnerPlayerName();// 0x3a619cc
	PlayerController* GetOwnerPlayerController();// 0x3a6199c
	Pawn* GetOwnerPawn();// 0x3a61974
	FString GetOwnerName();// 0x3a618b4
	Controller* GetOwnerController();// 0x37c3644
	Actor* GetOwnerActor();// 0x3a61884
	ItemDefineID GetItemDefineID();// 0x3a61838
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x3a61810
	byte GetCurSightType();// 0x3a1cd3c
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x3a616cc
	LinearColor GetColorByTeamID(int TeamID);// 0x4a51734
	ItemHandleBase* GetBackpackItemHandle();// 0x3a616a4
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x4a51734
	void ExeAttachHandTimer();// 0x3a61690
	void DelayHandleAvatarMeshChanged();// 0x3a6167c
	void CreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x3a615b0
	void ConditionDestroyAttachHandTimer(bool ExecuteTimer);// 0x3a61530
	bool ConditionCreateAttachHandTimer();// 0x3a61508
	void ClientLoadDefaultMesh();// 0x3a614f4
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x3a6147c
	bool CheckHasFuncByInt(int Func);// 0x3a613fc
	bool CheckHasFunc(enum Func);// 0x3a613fc
	void CheckCurrentMeshInHand(out const FName InAttachSocketName);// 0x3a61368
	void ChangeSequenceStateInner(byte StateType);// 0x3a612e8
	bool ChangeSequenceState(byte StateType);// 0x3a61260
	void CallForceHideWeaponWidgetDel();// 0x3a6124c
	void AttachToCharacter(SceneComponent* Parent, FName SocketName);// 0x3a61188
	void AttachSelfToCharacterHand(SkeletalMeshComponent* InParentMesh, out const FName InWeaponAttachSocket);// 0x3a610b8
	bool AttachHandTimerIsValid();// 0x3a61090

--------------------------------
Class: LuaActor.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x350, Size: 60]
	FString LuaFilePath;//[Offset: 0x38c, Size: 12]
	void UnRegistLuaTick();// 0x78911b4
	void RegistLuaTick(float TickInterval);// 0x789113c

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	int[] SkillIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
	bool SetAutonomousLoadRes();// 0x35b093c
	void SelectWeaponGunOnePart(int WeaponGunPart);// 0x3b66394
	void EnableDIYPatternMirro(bool bMirro, bool bLeftToRight);// 0x3b662c4

--------------------------------
Class: WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x490, Size: 4]
	bool EnablePhotoShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	delegate OnScopeEquipDelegate;//[Offset: 0x498, Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x4a4, Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x4b0, Size: 12]
	delegate OnWeaponAvatarLoaded2;//[Offset: 0x4bc, Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x4c8, Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x4d4, Size: 12]
	delegate OnWeaponAvatarPutOnSlot;//[Offset: 0x4e0, Size: 12]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x4f0, Size: 12]
	delegate OnWeaponPartsRender;//[Offset: 0x4fc, Size: 12]
	delegate OnWeaponEffectParticleCreate;//[Offset: 0x508, Size: 12]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x52c, Size: 60]
	<int,HandleMeshPack> DefaultAttachmentMeshOverride;//[Offset: 0x568, Size: 60]
	MeshSynData[] DefaultSynData;//[Offset: 0x5a4, Size: 12]
	FString OwnerPlayerUID;//[Offset: 0x5b4, Size: 12]
	WeaponDIYData WeaponDIYData;//[Offset: 0x5c4, Size: 60]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x608, Size: 12]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	ItemDefineID WeaponDefineID;//[Offset: 0x618, Size: 24]
	bool ShouldDisplayByQuality(int SlotID);// 0x3b68c64
	void SetPendantSocketType(enum SocketType);// 0x3b68bec
	bool SetAutonomousLoadRes();// 0x35b093c
	void ResponWeaponDIYData(FString InPlayerUID, int WeaponAvatarID);// 0x3b68a50
	void ResetAttachmentSocket();// 0x3b68a3c
	void ResetAttachmentParent();// 0x3b68a28
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x3b688e4
	void RequestDIYPlan(int WeaponAvatarID, int InDIYPlanID);// 0x4a51734
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x35a9d18
	void ReportAvatarInfo(out const int[] RequestItemIDS);// 0x3b68818
	void RemoveDefaultAttachmentOverride(int SlotID);// 0x3b687a0
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* InHandle);// 0x3b68720
	void RefreshAvatarStateChanged();// 0x35b05a4
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x3b686a8
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* WeaponHandle);// 0x3b68628
	void PutOnEquipmentDIYData(int WeaponAvatarID, int InDIYPlanID);// 0x3b6856c
	bool PutOnEquipmentByResID(int resID);// 0x3b684e4
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle);// 0x3b68464
	bool PutOffEquimentByResID(int resID);// 0x3b683dc
	void ProcessWeaponDIYDataAction(out const WeaponDIYData InWeaponDIYData);// 0x3b68318
	void ProcessLoadAllMesh();// 0x35b0588
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData OutSyncData);// 0x3b6823c
	void OnWeaponPartsRenderEvent__DelegateSignature(int WeaponSlotID);// 0x4a51734
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x4a51734
	void OnWeaponAvatarPutOnSlot__DelegateSignature(int SlotID);// 0x4a51734
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x4a51734
	void OnWeaponAvatarLoaded2__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x4a51734
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x4a51734
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x4a51734
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x4a51734
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x4a51734
	void OnRespawned();// 0x355a034
	void OnRep_NetAvatarDataChanged(out const MeshSynData[] InSyncData);// 0x3b68170
	void OnRecycled();// 0x35a9cfc
	void OnEffectParticleCreate__DelegateSignature();// 0x4a51734
	void OnAsyncLoadBattleHandlesDone(int AsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x3b67fc0
	void NetSyncData(int InSlotID, enum InOperationType, BattleItemHandleBase* InHandle);// 0x35b01f8
	bool LoadMeshListAsync(out BattleItemHandleBase*[] InHandleList, bool bNeedDirectLoad);// 0x3b67e94
	bool IsTeammate();// 0x35a9ccc
	bool IsSelf();// 0x35a9c74
	void InitMasterComponent();// 0x3b67e80
	void InitialAvatarParam();// 0x3b67e6c
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x3b67df4
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x3b67d7c
	void InitDefaultAttachment(BattleItemHandleBase* WeaponHandle);// 0x3b67d04
	int GetWeaponParentID(int InSlotID, out const ItemDefineID InItemDefineID);// 0x3b67c28
	Controller* GetWeaponController();// 0x3b67c00
	STExtraWeapon* GetOwnerWeapon();// 0x3575bb4
	STExtraBaseCharacter* GetOwnerCharacter();// 0x3b67bd8
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x3b67b44
	BattleItemHandleBase* GetEquippedHandle(int InSlotID);// 0x3b67ac4
	bool GetEquipmentMeshBySlot(int InSlotID, out MeshData OutMeshPack);// 0x3b679cc
	AvatarDIYEntityFactory* GetEntityFactory();// 0x35afd88
	MeshComponent* GetAttachmentSocketTransform(int InSlotID);// 0x3b6794c
	AnimationAsset* GetAttachmentAnim(enum InSlotType, int AnimIdx);// 0x3b67888
	WeaponAvatarDIYEntity* FindAvatarEntityByMesh(MeshComponent* InMeshComp);// 0x3b67808
	void DestroyWeapon();// 0x3b677f4
	void ClearMeshBySlot(int SlotID, bool putDefault, bool bClearMesh);// 0x3b676d8
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x3b67658
	bool CheckSlotIsEquipped(int InSlotID, bool bIncludingDefault);// 0x3b6758c
	bool CheckIsAlreadyEquipped(ItemDefineID InDefineID);// 0x3b674fc
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs);// 0x3b67430
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x35a985c
	void ApplyAttachmentOverride(BattleItemHandleBase* InAttachHandle);// 0x3b673b8
	void ApplyAttachment(BattleItemHandleBase* InAttachHandle);// 0x3b67340
	void AddUnlockWeaponAttachmentAvatarList(int WeaponBPID, out <int,int> OutAttachmentSkinIDList);// 0x3b671f0
	void AddDefaultAttachmentOverride(int AttchmentID);// 0x3b67178
	int AddAction_SampleCurveToMPC(int SlotID, CurveFloat* Curve, MaterialParameterCollection* MPC);// 0x3b67070
	int AddAction_ParticleByName(int SlotID, out const FName ParticleName);// 0x3b66f98
	int AddAction_MatParamModify2(int SlotID, WeaponEffect_TickMatParam* InCfg);// 0x3b66ed4
	int AddAction_MatParamModify(int SlotID, int CfgIndex);// 0x3b66e10

--------------------------------
Class: AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x22c, Size: 12]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x238, Size: 60]
	int[] PendingDeleteSlotID;//[Offset: 0x274, Size: 12]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x280, Size: 4]
	<int,FName> SlotToSocket;//[Offset: 0x284, Size: 60]
	int StepCount;//[Offset: 0x2c0, Size: 4]
	delegate AsyncLoadAvatarAllMeshDone;//[Offset: 0x2c4, Size: 12]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x2d0, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x378, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x37c, Size: 4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	enum DisplayQuality;//[Offset: 0x391, Size: 1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x394, Size: 60]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	<int,bool> OutlineEnableList;//[Offset: 0x3f8, Size: 60]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x438, Size: 60]
	int CurrentDecalBakingRequestID;//[Offset: 0x474, Size: 4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x478, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x484, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x35b0ce0
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x35b0c0c
	bool SetMeshVisibleByID(int InSlotID, bool bIsVisible, bool bForceShow);// 0x35b0ae8
	void SetMaster(MeshComponent* InComponent, FName InName, enum InType);// 0x35b09e0
	void SetDisplayQuality(enum Quality);// 0x35b096c
	bool SetAutonomousLoadRes();// 0x35b093c
	void RequestSyncLoadMeshes();// 0x35b0928
	void RequestSyncLoadHandles();// 0x35b0914
	void RequestAsyncLoadMeshes();// 0x35b08f8
	void RequestAsyncLoadHandles();// 0x35b08dc
	void RemoveDIYRTCacheInBattle(int InSlotID);// 0x35b0864
	void RemoveAllDIYRTCacheInBattle();// 0x35b0850
	void RemoveActionByType(int SlotID, enum InActionType, bool bDelayClear);// 0x35b0748
	void RemoveAction(int SlotID, int ActionInstanceID, bool bDelayClear);// 0x35b0640
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x35b05c0
	void RefreshAvatarStateChanged();// 0x35b05a4
	void ProcessLoadAllMesh();// 0x35b0588
	void PreProcessBeforeLoadMesh();// 0x35b056c
	void PostProcessAfterLoadMesh();// 0x35b0550
	void OnRespawned();// 0x355a034
	void OnRecycled();// 0x35a9cfc
	void OnEngineDecalBakingFinished(out const DecalBakingRequest InRequestStruct);// 0x35b0470
	void OnAvatarDIYDecalBakingFinished__DelegateSignature(int RequestID, TextureRenderTarget2D* RenderTarget);// 0x4a51734
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x4a51734
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x35b03f0
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x35b031c
	void OnAllAvatarHandleLoadedDone();// 0x35b0300
	void NetSyncData(int SlotID, enum OperationType, BattleItemHandleBase* Handle);// 0x35b01f8
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x35b012c
	bool IsAutonomousAvatar();// 0x35b0104
	AvatarDIYEntity* GetOrCreateAvatarEntity(int SlotID, int SubSlotID);// 0x35b0040
	<int,MeshComponent*> GetMeshComponentList();// 0x35afeb0
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x35afe28
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x35afdb8
	AvatarDIYEntityFactory* GetEntityFactory();// 0x35afd88
	TextureRenderTarget2D* GetDIYRTCacheInLobby(int InSlotID);// 0x35afd08
	enum GetDisplayQuality();// 0x35afcec
	void GetCurMeshComponents(out MeshComponent*[] OutMeshComponets);// 0x35afc18
	AvatarDIYEntity* GetAvatarEntity(int SlotID, int SubSlotID);// 0x35afb54
	void EnableSyncLoadDIYDecal(bool bInSyncDIYDecal, int InMaxDecalProcessPreFrame);// 0x35afa8c
	void EnableSyncLoadAvatar(bool bInSyncAvatar);// 0x35afa0c
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x35af93c
	AvatarDIYEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x35af878
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x35af7a4
	void AsyncLoadAvatarAllMeshDone__DelegateSignature(AvatarDIYComponent* AvatarDIYComponent);// 0x4a51734
	void AddDIYRTCacheInBattle(int InSlotID, TextureRenderTarget2D* InTexture2D);// 0x35af6e8
	int AddAction_Modle(int SlotID, int ModleID);// 0x35af624
	int AddAction_Material(int SlotID, int MaterialID);// 0x35af560
	int AddAction_DIYSlotMatParam(out const int[] InSlotMatParam);// 0x35af48c
	int AddAction_DIYPattern(int SlotID, out const DIYMergedTexData[] InDIYMergeData);// 0x35af30c
	int AddAction_DIYMirroParam(int SlotID, out const int[] InMirroParam);// 0x35af1f4
	int AddAction_DIYMatParam(int SlotID, out const int[] InMatIDList);// 0x35af0dc
	int AddAction(int SlotID, out const AvatarActionBase InActionBase);// 0x35aefe8

--------------------------------
Class: AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x1b0, Size: 4]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b6, Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7, Size: 1]
	FName LightVectorName;//[Offset: 0x1b8, Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x1c0, Size: 4]
	delegate OnItemDownloadDelegate;//[Offset: 0x1c8, Size: 16]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x1d8, Size: 16]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x1e8, Size: 60]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	enum AvatarEnum;//[Offset: 0x225, Size: 1]
	void RequestDownloadItemInBattle(int InItemID);// 0x35a9dec
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x35a9d18
	void OnRespawned();// 0x355a034
	void OnRecycled();// 0x35a9cfc
	bool IsTeammate();// 0x35a9ccc
	bool IsServerMode();// 0x35a9ca4
	bool IsSelf();// 0x35a9c74
	bool IsLogicRunningMode();// 0x35a9c4c
	bool IsLobbyAvatar();// 0x35a9c30
	bool IsLobbyActor();// 0x35a9c14
	bool IsForceClientMode();// 0x35a9bf8
	uint32 GetPlayerKey();// 0x35a9bc8
	GameInstance* GetGameInstance();// 0x35a9b98
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x35a9ad4
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x35a985c

--------------------------------
Class: AvatarDIYEntity.Object
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x1c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x20, Size: 4]
	MeshGroup MeshGroup;//[Offset: 0x24, Size: 36]
	ItemDefineID ParentDefineID;//[Offset: 0x48, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x60, Size: 60]
	int SlotID;//[Offset: 0xb4, Size: 4]
	int SubSlotID;//[Offset: 0xb8, Size: 4]
	FName SocketName;//[Offset: 0xc0, Size: 8]
	enum meshType;//[Offset: 0xc8, Size: 1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0xcc, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0xd0, Size: 4]
	MeshData EntityMeshData;//[Offset: 0xd8, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x138, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b, Size: 1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x1a0, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x1b0, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x1c8, Size: 60]
	void UpdateVisibility();// 0x35b2ce8
	void UnRegisterTick();// 0x35b2ccc
	void TickEntity(float DeltaTime);// 0x35b2c4c
	void SetSocketName(FName InName);// 0x35b2bcc
	void SetParentDefineID(ItemDefineID ParentID);// 0x35b2b40
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x35b2ac0
	void SetAvatarVisibility(bool bIsVisible, bool bForce);// 0x35b29e8
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x35b2960
	void RevertEntityMeshData();// 0x35b294c
	void RenderEntity();// 0x35b2930
	void RegisterTick();// 0x35b2914
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x35b288c
	void PutOnDefaultEquipment(int InSlotID);// 0x35b280c
	void PrepareEntity();// 0x35b27f0
	void OnPreRender();// 0x35b27d4
	void OnPostRender();// 0x35b27b8
	void MaskActionDirty(bool bFlag);// 0x35b2738
	bool IsEntityAvailable(enum VisibilityType);// 0x35b26b0
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x35b25e4
	void Init(int InSlotID, int InSubSlotID, AvatarDIYComponent* InAvatarComponent);// 0x35b24dc
	bool HasSomeAction(enum InActionType);// 0x35b245c
	bool HasMainAction();// 0x35b2434
	FName GetSocketName();// 0x35b23ec
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x35b2364
	ItemDefineID GetParentDefineID();// 0x35b2310
	MeshData GetMeshData();// 0x35b22ac
	BattleItemHandleBase* GetLoadedHandle();// 0x35b2284
	ItemDefineID GetDefineID();// 0x35b2230
	void EnterRenderPipeline();// 0x3572120
	void EnterLogicPipeline();// 0x35b2214
	void DrawOutline(bool bEnable);// 0x35b218c
	bool CreateAndApplyResource();// 0x35b215c
	void ClearRenderEntity();// 0x35b2140
	void ClearEquipmentRenderData(int CurrSlotID, bool bPutDefault);// 0x35b2074
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x35b1f9c
	void ClearEntity(bool ForceClear);// 0x35b1f14

--------------------------------
Class: MeshGroup
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 12]
	Object*[] MeshObjectList;//[Offset: 0xc, Size: 12]
	MeshComponent*[] MeshCompList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MeshAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 40]
	FName AttachSocket;//[Offset: 0x80, Size: 8]
	enum meshType;//[Offset: 0x88, Size: 1]
	bool bKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	class AnimInstance* animBP;//[Offset: 0x8c, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x90, Size: 40]
	bool bAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bUpdateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	FString LuaFilePath;//[Offset: 0xc4, Size: 12]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	enum ItemStoreArea;//[Offset: 0xd1, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0xd4, Size: 12]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	float UnitWeight;//[Offset: 0xe4, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 1]
	int ItemAttrsFlag;//[Offset: 0xec, Size: 4]
	void UpdateAttributeModify(bool bEnable);// 0x3670bc4
	bool UnEquip();// 0x3c738f8
	bool HanldePickupAssociationData(out const BattleItemAdditionalData[] PickupAdditionalData);// 0x3c737b4
	bool HanldeDropAssociationData();// 0x3c73784
	bool HanldeCleared();// 0x37a0750
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x35d02ac
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x35cfe8c
	bool HandleEnable(bool bEnable);// 0x35cf974
	bool HandleDrop(int InCount, enum Reason);// 0x35cf8a8
	bool HandleDisuse(enum Reason);// 0x35b6124
	bool HandleChangeItemStoreArea(enum InItemStoreArea);// 0x3c736fc
	bool HandleBindToTargetItem();// 0x3716028
	World* GetWorldInternal();// 0x3c736cc
	World* GetCurrentWorld();// 0x3c736a4
	BattleItemData ExtractItemData();// 0x35d8ec8
	void ClearAdditionalData();// 0x3c73690
	bool CheckCanUse(out const interface classNone ItemContainer, BattleItemUseTarget Target, enum Reason);// 0x3c7353c

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x1c, Size: 4]
	int MaxCount;//[Offset: 0x20, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	<int,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68, Size: 24]
	void SetAssociation(int AssociationType, ItemAssociation Association);// 0x3c7b86c
	void RemoveAssociation(int AssociationType);// 0x3c7b7f4
	void Init(ItemDefineID InDefineID);// 0x3c7b764
	ItemDefineID GetDefineID();// 0x3c7b720
	<int,ItemAssociation> GetAssociationMap();// 0x3c7b5a0
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x3c7b490
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x3c7b3e4
	ItemAssociation GetAssociation(int AssociationType);// 0x3c7b348
	void Constuct(out const ItemDefineID InDefineID);// 0x3c7b2b0
	void AddAssociation(int AssociationType, ItemAssociation Association);// 0x3c7b1bc

--------------------------------
Class: BattleItemAdditionalData
	enum EDataType;//[Offset: 0x0, Size: 1]
	int IntData;//[Offset: 0x4, Size: 4]
	FString StringData;//[Offset: 0x8, Size: 12]
	float FloatData;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ItemAssociation
	int AssociationType;//[Offset: 0x0, Size: 4]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	int TargetAssociationType;//[Offset: 0x18, Size: 4]
	Actor* TargetActor;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 32]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x48, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50, Size: 12]
	int Durability;//[Offset: 0x5c, Size: 4]
	enum ItemStoreArea;//[Offset: 0x60, Size: 1]
	BattleItemFeatureData FeatureData;//[Offset: 0x64, Size: 44]
	ItemAssociation[] Associations;//[Offset: 0x90, Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 24]
	FString Name;//[Offset: 0x20, Size: 12]
	FString Desc;//[Offset: 0x2c, Size: 12]
	FString Icon;//[Offset: 0x38, Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44, Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	int CountLimit;//[Offset: 0x8, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemAttrsFlag;//[Offset: 0x14, Size: 4]
	int SortingPriority;//[Offset: 0x18, Size: 4]
	int Worth;//[Offset: 0x1c, Size: 4]
	int ItemCapacity;//[Offset: 0x20, Size: 4]
	int ItemDurability;//[Offset: 0x24, Size: 4]
	int itemType;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4, Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8, Size: 4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc, Size: 12]
	enum meshType;//[Offset: 0x18, Size: 1]
	int[] hiddenSlots;//[Offset: 0x1c, Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28, Size: 12]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34, Size: 12]
	ItemDefineID definedID;//[Offset: 0x40, Size: 24]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x78c, Size: 4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x790, Size: 4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x794, Size: 4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x798, Size: 4]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x36923d0
	Actor* GetBindOwner();// 0x36923ac
	MeshComponent* GetAttachedMeshComponent();// 0x3692390
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x36921e0
	void BindOwner(Actor* Owner);// 0x369216c
	void BindEvent(bool bShowWidget);// 0x36920e4

--------------------------------
Class: AvatarDIYEntityFactory.Object
	AvatarDIYEntity* CreateEntity(int SlotID, int SubSlotID);// 0x35b38a0

--------------------------------
Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x4, Size: 4]
	DecalParameter[] DecalParams;//[Offset: 0xc, Size: 12]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DecalParameter
	Texture2D* DecalTexture;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AvatarActionBase

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 4]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 328]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 40]
	FName MeshMatSlotName;//[Offset: 0xc8, Size: 8]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xd0, Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0x100, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x128, Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x134, Size: 12]
	enum meshType;//[Offset: 0x140, Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector2D DrawSize;//[Offset: 0x40, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	int AdditionalItemID;//[Offset: 0x20, Size: 4]
	int DIYPlanID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: DIYEnableLevel
	int DeviceLevel;//[Offset: 0x0, Size: 4]
	int EnableLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponAvatarDIYEntity.AvatarDIYEntity.Object
	void SetWeaponEntityVisibility(bool visibie);// 0x3b6a118
	void SetSocketName(FName InName);// 0x35b2bcc
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x35b2ac0
	void RenderEntity();// 0x35b2930
	void RemoveParticleEffect();// 0x3b6a0fc
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x35b288c
	void PrepareEntity();// 0x35b27f0
	void OnPreRender();// 0x35b27d4
	void OnPostRender();// 0x35b27b8
	bool IsForceEnableAnim();// 0x3b6a0cc
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x35b2364
	ItemDefineID GetDefineID();// 0x35b2230
	void EnterLogicPipeline();// 0x35b2214
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x35b1f9c
	void BroadcastWeaponRenderEvent();// 0x3b6a0b8
	void BroadcastWeaponEquipEvent(bool IsEquipped);// 0x3b6a038
	void ApplyParticleEffect();// 0x3b6a01c
	void AddWeaponHandleAction();// 0x3b6a008

--------------------------------
Class: WeaponEffect_TickMatParam.WeaponEffectCfgBase.Object
	MatParamModifyCfg ParamCfg;//[Offset: 0x48, Size: 184]
	void RemoveEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x35bccf4
	bool ApplyEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x3657288

--------------------------------
Class: WeaponEffectCfgBase.Object
	enum TriggerCondition;//[Offset: 0x1c, Size: 1]
	int ConditionTriggerNum;//[Offset: 0x20, Size: 4]
	int MaxApplyCount;//[Offset: 0x24, Size: 4]
	enum ValidScene;//[Offset: 0x28, Size: 1]
	bool EnableAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	float LoopInterval;//[Offset: 0x2c, Size: 4]
	float ApplyTime;//[Offset: 0x30, Size: 4]
	bool EnableLowDeviceOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	void RemoveEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x35bccf4
	bool ReachedMaxTriggerTime();// 0x3658268
	void Init();// 0x365824c
	bool ApplyEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x3657288

--------------------------------
Class: MatParamModifyCfg
	SoftObjectPath CurveAsset;//[Offset: 0x0, Size: 24]
	FName ParamName;//[Offset: 0x18, Size: 8]
	FName ParticleTag;//[Offset: 0x20, Size: 8]
	float FxWaitTime;//[Offset: 0x28, Size: 4]
	int[] RelatedSlots;//[Offset: 0x2c, Size: 12]
	CurveFloat* CachedCurve;//[Offset: 0x38, Size: 4]
	FName ReplaceMatSlotName;//[Offset: 0x40, Size: 8]
	SoftObjectPath NormalMat;//[Offset: 0x48, Size: 24]
	SoftObjectPath ReplaceMat;//[Offset: 0x60, Size: 24]
	<FName,CurveFloat*> AdditionalParams;//[Offset: 0x78, Size: 60]

--------------------------------
Class: PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bCharacterComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	class Actor* PredictActorTemplate;//[Offset: 0x780, Size: 4]
	StaticMesh* MeshTemplate;//[Offset: 0x788, Size: 40]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x7b0, Size: 40]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x7d8, Size: 40]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x800, Size: 112]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x870, Size: 12]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x880, Size: 16]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x890, Size: 16]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x8a0, Size: 16]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0x8b0, Size: 16]
	LinearColor PredictLineColor;//[Offset: 0x8c0, Size: 16]
	PredictLineConfigParams PredictLineConfigParams;//[Offset: 0x8d0, Size: 12]
	PredictProjectilePathResult PredictResult;//[Offset: 0x8e8, Size: 184]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0x9a0, Size: 4]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0x9a4, Size: 4]
	StaticMesh* SplineMeshTemplate;//[Offset: 0x9a8, Size: 4]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0x9b0, Size: 12]
	int RedrawCounter;//[Offset: 0x9bc, Size: 4]
	FString LuaFilePath;//[Offset: 0x9c0, Size: 12]
	void SetPredictParams(out const Vector InStartPoint, out const Vector InVelocity, out const Vector InAcceleration);// 0x3812928
	void SetPredictLineColor(out const LinearColor NewColor);// 0x38128a4
	void SetPredictActorTemplate(class Actor InActorTemplate);// 0x381282c
	void LoadPredictDefaultRes();// 0x3812818
	Actor* GetBindPredictLineTarget();// 0x36656f8
	void EnableRedrawPredictLine();// 0x3812804
	void BindPredictLineTarget(Actor* InCachedTarget);// 0x3665678

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x674, Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x6c4, Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x6d8, Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x6ec, Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x700, Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x718, Size: 4]
	float Duration;//[Offset: 0x71c, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x722, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x723, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x726, Size: 1]
	float LoopPosition;//[Offset: 0x728, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x72c, Size: 12]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	bool bIgnorePositionDerivative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x739, Size: 1]
	void UpdateSpline();// 0x67bbe08
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x67bbd34
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x67bbbd4
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x6784e84
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x67bba20
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x67bb8c0
	void SetSplineWorldPoints(out const Vector[] Points);// 0x67bb7ec
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x67bb6e4
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x67bb584
	void SetSplineLocalPoints(out const Vector[] Points);// 0x67bb4b0
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x6784e84
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x67bb350
	void SetDrawDebug(bool bShow);// 0x67bb2d0
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x67bb204
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x67bb0f0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x67bb020
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x67baf5c
	bool IsClosedLoop();// 0x67baf34
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x67baea0
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x67badbc
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x67bad28
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x67bac44
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x67babb0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x67bab1c
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x67baa38
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x67ba9a4
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67ba880
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67ba7ac
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67ba6d8
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x67ba54c
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x67ba410
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x67ba2d4
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67ba1b0
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67b8fb4
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67ba0dc
	byte GetSplinePointType(int PointIndex);// 0x67ba05c
	float GetSplineLength();// 0x67ba034
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x67b9f58
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x67b9ec8
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x67b9e38
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67b9d14
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67b9c40
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67b9b6c
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67b9a5c
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67b9998
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67b98d4
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67b97b0
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67b96dc
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67b9608
	int GetNumberOfSplinePoints();// 0x67b95e0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67b94bc
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67b93e8
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67b9314
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x67b91ac
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x67b9088
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67b8fb4
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x67b8f34
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x67b8eb4
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x67b8e34
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x67b8d10
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67b8c3c
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x67b8b68
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x67b8ad8
	float GetCurvatureAtSplinePoint(int PointIndex);// 0x67b8a58
	float GetCurvatureAtDistance(float Distance);// 0x67b89d8
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x67b8904
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67b8820
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x67b86d4
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67b85f0
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x67b8554
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67b8470
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67b839c
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67b82b8
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67b81d4
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x67b8148
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x67b8064
	void ClearSplinePoints(bool bUpdateSpline);// 0x67b7fe4
	void AddSplineWorldPoint(out const Vector Position);// 0x67b7f58
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x67b7df8
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x67b7ce0
	void AddSplineLocalPoint(out const Vector Position);// 0x67b7c54
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x67b7b38
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x67b7a30

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 20]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 12]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 12]
	Vector LaunchAcceleration;//[Offset: 0x18, Size: 12]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float ProjectileRadius;//[Offset: 0x28, Size: 4]
	float MaxSimTime;//[Offset: 0x2c, Size: 4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	byte TraceChannel;//[Offset: 0x31, Size: 1]
	byte[] ObjectTypes;//[Offset: 0x34, Size: 12]
	Actor*[] ActorsToIgnore;//[Offset: 0x40, Size: 12]
	float SimFrequency;//[Offset: 0x4c, Size: 4]
	float OverrideGravityZ;//[Offset: 0x50, Size: 4]
	float GravityScale;//[Offset: 0x54, Size: 4]
	float IgnoreGravityDis;//[Offset: 0x58, Size: 4]
	byte DrawDebugType;//[Offset: 0x5c, Size: 1]
	float DrawDebugTime;//[Offset: 0x60, Size: 4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: PredictLineMaterialParams
	MaterialParameterCollection* MaterialParamCollection;//[Offset: 0x0, Size: 4]
	FName ParamName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PredictLineConfigParams
	bool bShowEndPointEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ShowSplineCount;//[Offset: 0x4, Size: 4]
	float ShowSplineCountPercent;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 12]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0xc, Size: 28]
	HitResult HitResult;//[Offset: 0x28, Size: 144]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector Velocity;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x7a8, Size: 88]
	Vector SplineUpDir;//[Offset: 0x800, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80c, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80c, Size: 1]
	byte ForwardAxis;//[Offset: 0x80d, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x810, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x814, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x818, Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x81c, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82c, Size: 1]
	void UpdateMesh();// 0x67c0aa4
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x67c09e0
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x67c0920
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x67c085c
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x67c0798
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x67c06d8
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x67c0538
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x67c0464
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x67c03a0
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x67c02dc
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x67c021c
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x67c0158
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x67c0094
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x67bffd4
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x67bff10
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x67bfe4c
	Vector GetStartTangent();// 0x67bfe04
	Vector2D GetStartScale();// 0x67bfdc4
	float GetStartRoll();// 0x67bfd9c
	Vector GetStartPosition();// 0x67bfd54
	Vector2D GetStartOffset();// 0x67bfd14
	Vector GetSplineUpDir();// 0x67bfccc
	byte GetForwardAxis();// 0x67bfca4
	Vector GetEndTangent();// 0x67bfc5c
	Vector2D GetEndScale();// 0x67bfc1c
	float GetEndRoll();// 0x398f658
	Vector GetEndPosition();// 0x67bfbd4
	Vector2D GetEndOffset();// 0x67bfb94
	float GetBoundaryMin();// 0x67bfb6c
	float GetBoundaryMax();// 0x38ee8b4

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: WeaponOwnerProxy.Object
	delegate OnWeaponStopFireDelegate;//[Offset: 0x1c, Size: 12]
	delegate OnWeaponInitProxyDelegate;//[Offset: 0x28, Size: 12]
	Actor* OwnerActor;//[Offset: 0x34, Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x38, Size: 4]
	Controller* OwnerController;//[Offset: 0x3c, Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x40, Size: 4]
	void WeaponInitProxyDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x4a51734
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x4a51734
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x3b7d1bc
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x3b7d100
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x3b7d0d8
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x3b7d0b0
	PlayerController* GetOwnerPlayerController();// 0x3b7d088
	Pawn* GetOwnerPawn();// 0x3b7d060
	Controller* GetOwnerController();// 0x3b7d038
	Actor* GetOwnerActor();// 0x3b7d01c

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponId;//[Offset: 0x108, Size: 4]
	int SkillID;//[Offset: 0x10c, Size: 4]
	byte WeaponType;//[Offset: 0x110, Size: 1]
	byte weaponTypeNew;//[Offset: 0x111, Size: 1]
	byte WeaponHoldType;//[Offset: 0x112, Size: 1]
	byte WeaponSingleHandType;//[Offset: 0x113, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0x118, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x128, Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x134, Size: 4]
	float LaunchGravityScale;//[Offset: 0x138, Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bUseAnimWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool bForceFinishPreviousSwitchWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x140, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 1]
	bool bEnableVaultHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	bool bPendingKillAttrModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x14c, Size: 4]
	int UnableVehicleHoldingTipID;//[Offset: 0x150, Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	int UnablePeekTipID;//[Offset: 0x158, Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x160, Size: 60]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x19c, Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x1d8, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x1dc, Size: 4]
	float BackToIdleAttachMeshTimePer;//[Offset: 0x1e0, Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x1e4, Size: 12]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x1f0, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x1f4, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x200, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x230, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x260, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x290, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x2c0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2f0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x320, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x350, Size: 48]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x380, Size: 60]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x3bc, Size: 60]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x3f8, Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 1]
	float StandbyAnimTimeInterval;//[Offset: 0x400, Size: 4]
	byte[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x404, Size: 12]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xfc, Size: 4]
	STExtraPlayerController* GlobalController;//[Offset: 0x104, Size: 4]
	void UpdateComponentTick();// 0x3682e70
	STExtraWeapon* TryGetOwnerWeapon();// 0x3b715cc
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x3b715a4
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x3b714e0
	bool IsWeaponOwnerOBTarget();// 0x3b714b8
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x3b71438
	bool IsWeaponLogicComponentTickEnabled();// 0x3b71410
	bool IsLocalOrSpectorPlayer();// 0x3b713e8
	FString GetWeaponDetailInfo();// 0x3b71328
	byte GetOwnerPawnRole();// 0x3b71300

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 352]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x160, Size: 24]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10, Size: 152]
	SlateBrush LargerProfileImage;//[Offset: 0xa8, Size: 152]
	FString Name;//[Offset: 0x140, Size: 12]
	FString Description;//[Offset: 0x14c, Size: 12]
	int DisplayPriority;//[Offset: 0x158, Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4, Size: 4]
	int PickUpSoundID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc, Size: 4]
	byte Type;//[Offset: 0x10, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0x108, Size: 24]
	FName LogicSocket;//[Offset: 0x120, Size: 8]
	FName AttachSocket;//[Offset: 0x128, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0x130, Size: 1]
	float AIMinAttackDist;//[Offset: 0x134, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x138, Size: 4]
	float AIAttackDist;//[Offset: 0x13c, Size: 4]
	ItemHandleBase* GetBackpackItemHandle();// 0x3b7e5e4
	int GetAvailableBulletsNumInBackpack();// 0x3b7e5bc

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4, Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc, Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18, Size: 8]
	BulletInClip WeaponBulletInClip;//[Offset: 0x20, Size: 16]
	uint32 WeaponShootID;//[Offset: 0x30, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x34, Size: 4]
	byte CurWeaponState;//[Offset: 0x38, Size: 1]
	byte CurShootType;//[Offset: 0x39, Size: 1]
	int CurShootTotalType;//[Offset: 0x3c, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x40, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x58, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int OperationIndex;//[Offset: 0x60, Size: 4]

--------------------------------
Class: BulletInClip
	int CurBulletNumInClip;//[Offset: 0x0, Size: 4]
	BulletInWeapon[] CurBulletIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BulletInWeapon
	int BulletID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x3c, Size: 4]
	FString OwnerCharacterName;//[Offset: 0x40, Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int SyncTicket;//[Offset: 0x50, Size: 4]
	bool bHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x38ddde0
	static int GetWeaponSkillID(STExtraWeapon* Weapon);// 0x3b800a8

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x38ddde0
	void ProcessTriggerEvent(enum Event);// 0x3869d48

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]
	bool bVerifyRpgShootInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bVerifyRpgShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0x108, Size: 60]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x144, Size: 12]
	LinearColor MainTargetColor;//[Offset: 0x150, Size: 16]
	LinearColor SecondaryTargetColor;//[Offset: 0x160, Size: 16]
	LinearColor WeaponSightLockColor;//[Offset: 0x170, Size: 16]
	LinearColor WeaponSightLockHDRColor;//[Offset: 0x180, Size: 16]
	<int,int> SightTypeToIndex;//[Offset: 0x190, Size: 60]
	WeaponCrossHairPerformData[] CrossHairDataOverride;//[Offset: 0x1cc, Size: 12]
	float PistolCenterDownDis;//[Offset: 0x1d8, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x1e0, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x1e8, Size: 4]
	bool bForceHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	float RotateAngle;//[Offset: 0x1f0, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x1f4, Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x1fc, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x200, Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x204, Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x208, Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x20c, Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x210, Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x214, Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x218, Size: 4]
	bool bInitAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237, Size: 1]
	void UpdateComponentTick();// 0x3682e70
	void SetPureCrossHairColor(bool Enable);// 0x3682df0
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x3682d2c
	void DrawSpreadEnd();// 0x3682d18
	void DrawDebugPointEnd();// 0x3682d04

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 12]
	enum SpreadType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 20]
	float Offset;//[Offset: 0x14, Size: 4]
	Vector2D IconOffset;//[Offset: 0x18, Size: 8]
	float Alpha;//[Offset: 0x20, Size: 4]
	float Scale;//[Offset: 0x24, Size: 4]
	float IconRotate;//[Offset: 0x28, Size: 4]
	float LogicRotate;//[Offset: 0x2c, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x34, Size: 4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x414, Size: 4]
	float BulletFireSpeed;//[Offset: 0x418, Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x424, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x428, Size: 4]
	int ExtraBulletNumInOneClip;//[Offset: 0x42c, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x430, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x434, Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x438, Size: 12]
	float ShootInterval;//[Offset: 0x444, Size: 4]
	int ShootIntervalShowNumber;//[Offset: 0x448, Size: 4]
	float ExtraShootInterval;//[Offset: 0x44c, Size: 4]
	int ExtraShootIntervalShowNumber;//[Offset: 0x450, Size: 4]
	<int,float> VolatileShootIntervalMap;//[Offset: 0x454, Size: 60]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 1]
	bool bIsReasonable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x498, Size: 4]
	FName[] ExtraAvailableMuzzleSocketNameList;//[Offset: 0x49c, Size: 12]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0x4ac, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0x4b0, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x4b4, Size: 12]
	float BurstShootInterval;//[Offset: 0x4c0, Size: 4]
	float BurstShootCD;//[Offset: 0x4c4, Size: 4]
	int BulletNumSingleShot;//[Offset: 0x4c8, Size: 4]
	FName MuzzleSocketName;//[Offset: 0x4d0, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x4d8, Size: 8]
	FName SilencerSocketName;//[Offset: 0x4e0, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x4e8, Size: 8]
	FName ShellDropSocketName;//[Offset: 0x4f0, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x4f8, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x500, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x504, Size: 4]
	byte ShootType;//[Offset: 0x508, Size: 1]
	int ShootTotalType;//[Offset: 0x50c, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x514, Size: 4]
	bool ClientShootIntervalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool ClientPreVerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x51c, Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x530, Size: 20]
	float BaseImpactDamage;//[Offset: 0x544, Size: 4]
	float VehicleDamageScale;//[Offset: 0x548, Size: 4]
	float BulletMomentum;//[Offset: 0x54c, Size: 4]
	float MomentumAdditionScale;//[Offset: 0x550, Size: 4]
	float MomentumAdditionFixed;//[Offset: 0x554, Size: 4]
	float BreakDurabilityExtraRatio;//[Offset: 0x558, Size: 4]
	float BulletRange;//[Offset: 0x55c, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x560, Size: 4]
	byte ImpactDirType;//[Offset: 0x564, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x568, Size: 12]
	float RangeModifier;//[Offset: 0x574, Size: 4]
	float ReferenceDistance;//[Offset: 0x578, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x57c, Size: 4]
	class DamageType* DamageType;//[Offset: 0x580, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x588, Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x5a0, Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	int InitBulletInClip;//[Offset: 0x5bc, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	float TraceDistance;//[Offset: 0x5c4, Size: 4]
	float MaxValidHitTime;//[Offset: 0x5c8, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x5cc, Size: 60]
	FName SpesificWeaponBulletCanBreakThroughTargetTag;//[Offset: 0x608, Size: 8]
	float MaxDamageRate;//[Offset: 0x610, Size: 4]
	<byte,int> BreakThroughMaxNumConfig;//[Offset: 0x614, Size: 60]
	BulletThroughBodyConfig BulletThroughBodyCfg;//[Offset: 0x650, Size: 68]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x698, Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x69c, Size: 88]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x6f4, Size: 8]
	Vector2D LocalSimulateBulletLaunchRangeFromMuzzle;//[Offset: 0x6fc, Size: 8]
	float BulletTrackDistanceFix;//[Offset: 0x704, Size: 4]
	float DamageImpulse;//[Offset: 0x708, Size: 4]
	byte ReloadType;//[Offset: 0x70c, Size: 1]
	float PreFireTime;//[Offset: 0x710, Size: 4]
	float PreFireAnimScale;//[Offset: 0x714, Size: 4]
	float PostFireTime;//[Offset: 0x718, Size: 4]
	float PostReloadTime;//[Offset: 0x71c, Size: 4]
	bool bNeedMagAnimationWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	float ReloadDurationStart;//[Offset: 0x724, Size: 4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x728, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x72c, Size: 4]
	float ReloadDurationEnd;//[Offset: 0x730, Size: 4]
	float ReloadTime;//[Offset: 0x734, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x738, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x73c, Size: 4]
	float ReloadTimeMagOutTactical;//[Offset: 0x740, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x744, Size: 4]
	float ReloadTimeMagInTactical;//[Offset: 0x748, Size: 4]
	float ReloadRate;//[Offset: 0x74c, Size: 4]
	<byte,WeaponReloadCfg> SpecialReloadCfgData;//[Offset: 0x750, Size: 60]
	FName ReloadAllTIDName;//[Offset: 0x790, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x798, Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x7a4, Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7aa, Size: 1]
	bool bAutoSwitchWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ab, Size: 1]
	float DropDuration;//[Offset: 0x7ac, Size: 4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x7b4, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x7b8, Size: 252]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0x8b4, Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x8c4, Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x928, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x92c, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x930, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x940, Size: 68]
	float ShotGunCenterPerc;//[Offset: 0x984, Size: 4]
	float ShotGunVerticalSpread;//[Offset: 0x988, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x98c, Size: 4]
	float GameDeviationFactor;//[Offset: 0x990, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x994, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x998, Size: 4]
	byte CrossHairType;//[Offset: 0x99c, Size: 1]
	float CrossHairInitialSize;//[Offset: 0x9a0, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x9a4, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x9a8, Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x9ac, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x9b8, Size: 8]
	FName DefaultGripSocket;//[Offset: 0x9c0, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x9c8, Size: 8]
	FName DefaultMagSocket;//[Offset: 0x9d0, Size: 8]
	float WeaponBodyLength;//[Offset: 0x9d8, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x9dc, Size: 12]
	float WeaponAimFOV;//[Offset: 0x9ec, Size: 4]
	float WeaponAimInTime;//[Offset: 0x9f0, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x9f4, Size: 4]
	float WeaponAimYawRate;//[Offset: 0x9f8, Size: 4]
	float GameMotionYawRate;//[Offset: 0x9fc, Size: 4]
	float GameMotionPitchRate;//[Offset: 0xa00, Size: 4]
	float ForegripParam;//[Offset: 0xa04, Size: 4]
	float MagParam;//[Offset: 0xa08, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0c, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0xa10, Size: 4]
	byte SightType;//[Offset: 0xa14, Size: 1]
	float SensitiveFirePitchRate;//[Offset: 0xa18, Size: 4]
	byte SightVisionType;//[Offset: 0xa1c, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0xa20, Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0xa38, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0xa3c, Size: 4]
	float RecoilKickADS;//[Offset: 0xa40, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0xa44, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0xa48, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 1]
	enum ReleaseFireType;//[Offset: 0xa4d, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4e, Size: 1]
	bool bEnableShoulderScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4f, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0xa54, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0xa58, Size: 4]
	float AnimationKick;//[Offset: 0xa5c, Size: 4]
	int ReloadAnimSlot;//[Offset: 0xa60, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa64, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa65, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0xa68, Size: 4]
	float SwitchAimAnimTime;//[Offset: 0xa6c, Size: 4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa71, Size: 1]
	int ConstantWeaponDurability;//[Offset: 0xa74, Size: 4]
	float ShootReduceDurabilityAmount;//[Offset: 0xa78, Size: 4]
	Rotator[] RearSightRotConfig;//[Offset: 0xa7c, Size: 12]
	FName[] RearSightSocketConfig;//[Offset: 0xa88, Size: 12]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xa94, Size: 12]
	int RearSightRotIndex;//[Offset: 0xaa0, Size: 4]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa4, Size: 1]
	int MaxFireNumPerFrame;//[Offset: 0xaa8, Size: 4]
	OpenCollisionLODAngle[] ShootCollisionDistSqAngles;//[Offset: 0xaac, Size: 12]
	bool bCachedDefaultConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 1]
	byte[] CoronaEffectCfg;//[Offset: 0xe64, Size: 12]
	ItemDefineID GetBulletType();// 0x386a7a4

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x348, Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool bUseSimulateOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x350, Size: 4]
	float LaunchGravityScale;//[Offset: 0x354, Size: 4]
	int PunctureTimes;//[Offset: 0x358, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x35c, Size: 4]
	class DamageType* DamageType;//[Offset: 0x360, Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x364, Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x36c, Size: 4]
	Vector RootScale;//[Offset: 0x370, Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	Vector ShootDir;//[Offset: 0x380, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	float ShowBulletEffectMinDistance;//[Offset: 0x390, Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x480, Size: 4]
	delegate OnRecycleBullet;//[Offset: 0x484, Size: 12]
	delegate OnResetBullet;//[Offset: 0x490, Size: 12]
	delegate OnBulletImpact;//[Offset: 0x49c, Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x4a8, Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x4b4, Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x4b8, Size: 4]
	int ThroughBoneCount;//[Offset: 0x56c, Size: 4]
	float WeaponFloorHeight;//[Offset: 0x570, Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x574, Size: 12]
	byte CachedOwnerRole;//[Offset: 0x580, Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x584, Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	int MaxTraceTimes;//[Offset: 0x58c, Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 1]
	bool VerityBlock(out const Vector StartPos, out const Vector EndPos, STExtraShootWeapon* Weapon, Actor* ImpactActor, out HitResult OutHit);// 0x3a28b08
	void ResetBulletDelegate__DelegateSignature();// 0x4a51734
	void ReloadNoEncodeAttr();// 0x357447c
	void OnShowBulletEffect();// 0x4a51734
	void OnRecycleBulletDelegate__DelegateSignature();// 0x4a51734
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x3629ef4
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x4a51734
	void OnImpact(out const HitResult _ImpactResult);// 0x3629e14
	bool NeedCheckBulletFlySound();// 0x3698e70
	void LaunchBulletDelegate__DelegateSignature();// 0x4a51734
	void LaunchBP(float Speed, out Transform InTrans, Actor* InOwningWeapon, Actor* InInstigator, out Transform OutTrans);// 0x4a51734
	int GetShootID();// 0x39bf068
	float GetMaxNoGravityRange();// 0x3a28ad8
	float GetMaxBulletFlySpeed();// 0x36c2c9c
	float GetLaunchGravityScale();// 0x357ede8
	Controller* GetInstigatorControllerSafe();// 0x3a28ab0
	STExtraBaseCharacter* GetInstigatorCharacter();// 0x3a28a88
	bool ConditionalDestroyBullet(out const HitResult _ImpactResult);// 0x3a289a8
	bool ClientVerifyBlock(out const Vector MuzzlePos, out const Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x3a28838

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x164, Size: 4]
	void ResumeMoveAfterImpactWithNoLost();// 0x363aef8
	void ResetTickDelay();// 0x363aedc
	void IgnoreBounceReflectOnce();// 0x363aec0
	void ForceStop();// 0x363aeac

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xfc, Size: 4]
	float MaxSpeed;//[Offset: 0x100, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x104, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x104, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x104, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x104, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x104, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x104, Size: 1]
	float PreviousHitTime;//[Offset: 0x108, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x10c, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x118, Size: 4]
	float Buoyancy;//[Offset: 0x11c, Size: 4]
	float Bounciness;//[Offset: 0x120, Size: 4]
	float Friction;//[Offset: 0x124, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x128, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x12c, Size: 12]
	delegate OnProjectileStop;//[Offset: 0x138, Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x144, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x148, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x150, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x154, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x158, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x678c0d0
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x678c058
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x4a51734
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x4a51734
	Vector LimitVelocity(Vector NewVelocity);// 0x678bfc4

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x310, Size: 60]
	ParticleSystem* DefaultFX;//[Offset: 0x34c, Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x350, Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x354, Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x358, Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x35c, Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x360, Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x364, Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x368, Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x36c, Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x370, Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x374, Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x378, Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x37c, Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x380, Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x384, Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x388, Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x38c, Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x390, Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x394, Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x398, Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x39c, Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x3a0, Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x3a4, Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x3a8, Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x3ac, Size: 4]
	ParticleSystem* BallCarFX;//[Offset: 0x3b0, Size: 4]
	ParticleSystem* FleshFXNormal;//[Offset: 0x3b4, Size: 4]
	ParticleSystem* FleshFXExpand;//[Offset: 0x3b8, Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x3c0, Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x3c4, Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x3c8, Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x3cc, Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x3d0, Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x3d4, Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x3d8, Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x3dc, Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x3e0, Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x3e4, Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x3e8, Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x3ec, Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x3f0, Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x3f4, Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x3f8, Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x3fc, Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x400, Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x404, Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x408, Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x40c, Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x410, Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x414, Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x418, Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x41c, Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x420, Size: 4]
	AkAudioEvent* WindBreakSound;//[Offset: 0x424, Size: 4]
	AkAudioEvent* BallCarSound;//[Offset: 0x428, Size: 4]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x42c, Size: 4]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x430, Size: 4]
	DecalData DefaultDecal;//[Offset: 0x434, Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x450, Size: 28]
	DecalData DirtDecal;//[Offset: 0x46c, Size: 28]
	DecalData WaterDecal;//[Offset: 0x488, Size: 28]
	DecalData MetalDecal;//[Offset: 0x4a4, Size: 28]
	DecalData WoodDecal;//[Offset: 0x4c0, Size: 28]
	DecalData GrassDecal;//[Offset: 0x4dc, Size: 28]
	DecalData GlassDecal;//[Offset: 0x4f8, Size: 28]
	DecalData FleshDecal;//[Offset: 0x514, Size: 28]
	DecalData SteelDecal;//[Offset: 0x530, Size: 28]
	DecalData SandbagDecal;//[Offset: 0x54c, Size: 28]
	DecalData SandDecal;//[Offset: 0x568, Size: 28]
	DecalData ClothDecal;//[Offset: 0x584, Size: 28]
	DecalData PlasticDecal;//[Offset: 0x5a0, Size: 28]
	DecalData LeatherDecal;//[Offset: 0x5bc, Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x5d8, Size: 28]
	DecalData PaperDecal;//[Offset: 0x5f4, Size: 28]
	DecalData StoneDecal;//[Offset: 0x610, Size: 28]
	DecalData SnowDecal;//[Offset: 0x62c, Size: 28]
	DecalData PopCanDecal;//[Offset: 0x648, Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x664, Size: 28]
	DecalData LeafDecal;//[Offset: 0x680, Size: 28]
	DecalData CarDecal;//[Offset: 0x69c, Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x6b8, Size: 28]
	DecalData IceDecal;//[Offset: 0x6d4, Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x6f0, Size: 216]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ca, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x7cc, Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x7d0, Size: 4]
	Vector DecalScale;//[Offset: 0x7d8, Size: 12]
	SceneComponent* TargetImpactComp;//[Offset: 0x7f8, Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x86c, Size: 4]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0x870, Size: 60]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 1]
	void TimerHideDecal();// 0x38f0f80
	void OnLoadImpactFxAsyncCallBack(SoftObjectPath ImpactFxPath, float DistanceScaler, byte HitSurfaceType);// 0x38f0d8c
	void OnHandleImpactFx(ParticleSystem* ImpactFX, float DistanceScaler, byte HitSurfaceType);// 0x38f0c8c
	SoftObjectPath GetDirectionImpactFXPath(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x38f0aa0
	bool GetDirectionImpactFXAsync(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x38f0904

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize VictimLocation;//[Offset: 0x24, Size: 12]
	Vector_NetQuantize BulletPos;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x3c, Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	uint32 ShootID;//[Offset: 0x54, Size: 4]
	int BulletTypeSpecialID;//[Offset: 0x58, Size: 4]
	uint16 CompensationTime;//[Offset: 0x5c, Size: 2]
	Actor* Actor;//[Offset: 0x60, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x68, Size: 8]
	int TimeStamp;//[Offset: 0x70, Size: 4]
	int ClientShootTime;//[Offset: 0x74, Size: 4]
	byte SpecialBulletID;//[Offset: 0x78, Size: 1]
	byte HitBodyType;//[Offset: 0x79, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x7c, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x80, Size: 4]
	Vector_NetQuantize WeaponOwnerHeadPos;//[Offset: 0x84, Size: 12]
	float DamageRate;//[Offset: 0x90, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	Vector_NetQuantize GunTailPos;//[Offset: 0x98, Size: 12]
	FName BoneName;//[Offset: 0xa8, Size: 8]
	byte ImpactEffectMask;//[Offset: 0xb0, Size: 1]
	byte DataSub;//[Offset: 0xb1, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2c0, Size: 4]
	int SortOrder;//[Offset: 0x2c4, Size: 4]
	float FadeScreenSize;//[Offset: 0x2c8, Size: 4]
	float FadeStartDelay;//[Offset: 0x2cc, Size: 4]
	float FadeDuration;//[Offset: 0x2d0, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 1]
	Vector DecalSize;//[Offset: 0x2d8, Size: 12]
	void SetSortOrder(int Value);// 0x66634f0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x6663478
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x6663370
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x66632f8
	float GetFadeStartDelay();// 0x3f4a73c
	float GetFadeDuration();// 0x66632d0
	MaterialInterface* GetDecalMaterial();// 0x66632a8
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x6663278

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BulletThroughBodyConfig
	<enum,bool> BodyMap;//[Offset: 0x0, Size: 60]
	float Attenuation;//[Offset: 0x3c, Size: 4]
	int MaxTime;//[Offset: 0x40, Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletCameraModeConfig ReplayPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x48, Size: 8]
	WeaponVisualBulletItemConfig ReplayDefaultSetting;//[Offset: 0x50, Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8, Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponReloadCfg
	float Time;//[Offset: 0x0, Size: 4]
	float TimeMagOut;//[Offset: 0x4, Size: 4]
	float TimeMagIn;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 76]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c, Size: 76]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98, Size: 76]
	float followTimeMax;//[Offset: 0xe4, Size: 4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	CurveFloat* SpeedCurve;//[Offset: 0xec, Size: 4]
	CurveFloat* DistanceSpeedCurve;//[Offset: 0xf0, Size: 4]
	CurveFloat* SensitiveSpeedCurve;//[Offset: 0xf4, Size: 4]
	float MaxAngle;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 4]
	float CenterSpeedRate;//[Offset: 0x4, Size: 4]
	float RangeRate;//[Offset: 0x8, Size: 4]
	float SpeedRate;//[Offset: 0xc, Size: 4]
	float RangeRateSight;//[Offset: 0x10, Size: 4]
	float SpeedRateSight;//[Offset: 0x14, Size: 4]
	float CrouchRate;//[Offset: 0x18, Size: 4]
	float ProneRate;//[Offset: 0x1c, Size: 4]
	float DyingRate;//[Offset: 0x20, Size: 4]
	float DriveVehicleRate;//[Offset: 0x24, Size: 4]
	float InVehicleRate;//[Offset: 0x28, Size: 4]
	float FreeFallRate;//[Offset: 0x2c, Size: 4]
	float OpeningRate;//[Offset: 0x30, Size: 4]
	float LandingRate;//[Offset: 0x34, Size: 4]
	float adsorbMaxRange;//[Offset: 0x38, Size: 4]
	float adsorbMinRange;//[Offset: 0x3c, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x44, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x48, Size: 4]

--------------------------------
Class: AutoAimingConfigByGameMode
	class GameStateBase* GameStateClass;//[Offset: 0x0, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x4, Size: 252]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24, Size: 4]
	int BulletPerSwitch;//[Offset: 0x28, Size: 4]
	float TimePerSwitch;//[Offset: 0x2c, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilValueClimb;//[Offset: 0x40, Size: 4]
	float RecoilValueFail;//[Offset: 0x44, Size: 4]
	float RecoilModifierStand;//[Offset: 0x48, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c, Size: 4]
	float RecoilModifierProne;//[Offset: 0x50, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60, Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x40, Size: 4]

--------------------------------
Class: OpenCollisionLODAngle
	float DistSq;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x108, Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x10c, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x110, Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x180, Size: 100]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x1e4, Size: 68]
	void SetUseTss(bool bUse);// 0x363b278
	void OnWeaponStopFire();// 0x363b264
	void OnWeaponStartFire();// 0x363b250
	void OnWeaponShoot();// 0x363b23c
	void GetDataFromWeaponEntity();// 0x363b228
	Vector GetCurRecoilInfo();// 0x363b1e0
	float GetCurDeviation();// 0x363b1b0
	void CheckComponentTick();// 0x363b19c

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c, Size: 4]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	Vector2D Size;//[Offset: 0x28, Size: 8]
	Vector2D Origin;//[Offset: 0x30, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x38, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float Opacity;//[Offset: 0x44, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c, Size: 4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50, Size: 4]
	Pawn* CharacterOwner;//[Offset: 0x54, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float LastRenderTime;//[Offset: 0x5c, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x60, Size: 8]
	Vector2D RenderSize;//[Offset: 0x68, Size: 8]
	float RenderScale;//[Offset: 0x70, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x74, Size: 8]
	Canvas* Canvas;//[Offset: 0x7c, Size: 4]
	float AspectScale;//[Offset: 0x80, Size: 4]
	Vector2D CanvasClip;//[Offset: 0x84, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0x8c, Size: 12]
	bool ShouldDraw(bool bShowScores);// 0x37305e4
	void SetHidden(bool bIsHidden);// 0x373055c
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x37302ec
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x3730158
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x3730004
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x372fef8
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x372fa6c
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x372f300
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x372eed4
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x372ee18
	void Draw(float DeltaTime);// 0x36f091c
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x372ed7c

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	FString LuaFilePath;//[Offset: 0x3f4, Size: 12]
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 1]
	Vector MarkerPosition;//[Offset: 0x404, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 1]
	bool OBShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x414, Size: 120]
	bool bDrawHitIconEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	Texture2D* HUDMainTexture;//[Offset: 0x490, Size: 4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x494, Size: 4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x498, Size: 4]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x4a0, Size: 12]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x4ac, Size: 12]
	SimpleCrossHairData[] PriorCrossHairList;//[Offset: 0x4b8, Size: 12]
	Texture2D* HUDPlayerTexture;//[Offset: 0x4d0, Size: 4]
	CanvasIcon Crosshair;//[Offset: 0x4d4, Size: 20]
	CanvasIcon ProgreesBar;//[Offset: 0x538, Size: 20]
	CanvasIcon BKProgreesBar;//[Offset: 0x54c, Size: 20]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x560, Size: 20]
	CanvasIcon Marker;//[Offset: 0x588, Size: 20]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x59c, Size: 4]
	CanvasIcon WORLDMAP;//[Offset: 0x5a0, Size: 20]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x5b4, Size: 4]
	Actor* CacheLockRecastTarget;//[Offset: 0x5b8, Size: 4]
	float DateDrawOffsetX;//[Offset: 0x5ec, Size: 4]
	void ShowDebug(FName DebugType);// 0x3a77ea4
	void SetShowDebugInfo(bool bNewDebugShow);// 0x3a77e24
	void SetHitPerformColor(byte Type, out const LinearColor Color);// 0x3a77d5c
	void SetDrawDisableIcon(bool IsDrawDisableIcon);// 0x3a77cd4
	void OnAsyncLoadingFinished();// 0x3a77cc0
	bool IsValidDamageNumber(const Actor* DamageCauser, int DamageTypeId);// 0x3a77bf4
	bool IsHitPerformDependDamageType(int DamageTypeId, Actor* HitActor);// 0x3a77b28
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x3a77a94
	AkAudioEvent* GetHitSound(float Damage, bool IsHeadshot);// 0x3a779c0
	FString GetDateString();// 0x3a77900
	LinearColor GetColorByTeamID(int TeamID);// 0x3a7786c
	FString[] GetCharacterAnimInfo(Character* InCharacter);// 0x3a776c8
	void EnableCrosshair(bool bEnable);// 0x3a7764c
	void DrawScreenString(FText Text, float X, float Y);// 0x3a7731c
	void DrawPickupInfo(float X, float Y);// 0x3663a7c
	void DrawCircleUFunction(Vector2D Center, float Radius, LinearColor Color);// 0x3a77210
	void AddHitDamageNumberWithConfig(float Damage, const Actor* HitTarget, const STExtraPlayerController* PC, int ConfigIndex, bool bIsHeadshot, bool bIsDeadlyShot, bool bIsCareTeam);// 0x3a76fe0
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadshot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x3a76e04
	void AddHitDamage(float Damage, bool IsHeadshot, out const DamageEvent DamageEvent, Actor* HitActor, bool bIgnoreDamageType);// 0x3a76c3c

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 12]
	float DefaultSpread;//[Offset: 0xc, Size: 4]
	float SpreadMax;//[Offset: 0x10, Size: 4]
	float HeadExtraScale;//[Offset: 0x14, Size: 4]
	float AddSpreadScale;//[Offset: 0x18, Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x1c, Size: 4]
	float DefaultOffset;//[Offset: 0x20, Size: 4]
	float DefaultAlpha;//[Offset: 0x24, Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x28, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x30, Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x40, Size: 16]
	LinearColor HitToDeathDrawColor;//[Offset: 0x50, Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x60, Size: 4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x64, Size: 4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x68, Size: 4]
	float CurCrosshairSpread;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: SimpleCrossHairData
	FString Tag;//[Offset: 0x0, Size: 12]
	Texture2D* CrossHairTexture;//[Offset: 0xc, Size: 4]
	float Scale;//[Offset: 0x10, Size: 4]
	int Priority;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30, Size: 4]
	TextureUVs UVs;//[Offset: 0x34, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48, Size: 12]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x58, Size: 8]
	float Rotation;//[Offset: 0x60, Size: 4]
	Vector2D RotPivot;//[Offset: 0x64, Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float RenderPriority;//[Offset: 0x8, Size: 4]
	Vector2D Position;//[Offset: 0xc, Size: 8]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	LinearColor RenderColor;//[Offset: 0x1c, Size: 16]
	float RenderOpacity;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 4]
	float V;//[Offset: 0x4, Size: 4]
	float UL;//[Offset: 0x8, Size: 4]
	float VL;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float TextScale;//[Offset: 0x48, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x50, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x58, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x6c, Size: 16]
	byte HorzPosition;//[Offset: 0x7c, Size: 1]
	byte VertPosition;//[Offset: 0x7d, Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0x108, Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x114, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x170, Size: 4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	void HandleOnWeaponStopFire();// 0x3592f9c
	void HandleOnWeaponStartFire();// 0x3639ec8
	bool CheckCloseDSTick();// 0x3639ea0

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float LastCalcShootTime;//[Offset: 0x10c, Size: 4]
	HitResult CalcShootHitRet;//[Offset: 0x110, Size: 144]
	bool bShootIDNotMatchReportKillflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1a4, Size: 4]
	<byte,ShootWeaponCustomDamageList> CustomBulletDamage;//[Offset: 0x1a8, Size: 60]
	FName NormalBulletsTrackCompTag;//[Offset: 0x1e8, Size: 8]
	bool bJumpInitClipIDAndShootID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bUseMuzzleRotWhenHandFolder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	bool bChangeShootStartWhenReversedDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 1]
	float UseCameraRotReverBlockDistance;//[Offset: 0x1f4, Size: 4]
	bool bSkipVerifyShootIDValidity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool bSkipVerifyStartFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x1fc, Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x200, Size: 4]
	delegate OnShoot;//[Offset: 0x204, Size: 12]
	delegate OnBulletHitConstRefDelegate;//[Offset: 0x210, Size: 12]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x710, Size: 12]
	AIActingComponent* CacheAIActingComp;//[Offset: 0x738, Size: 4]
	int LastFireID;//[Offset: 0x748, Size: 4]
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x3a29ebc
	void ShootDelegate__DelegateSignature();// 0x4a51734
	void OnWeaponClipMaxBulletChanged();// 0x3a29ea8
	void OnWeaponBulletChanged();// 0x3a29e94
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x4a51734
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x4a51734
	void OnBulletHitConstRefDelegate__DelegateSignature(out const BulletHitInfoUploadData Data, STExtraShootWeapon* Weapon);// 0x4a51734
	bool IsBulletHasShotFlag(int ShootID, enum ShotFlag);// 0x3a29dd0
	float GetThroughCharacterAttenuation(out const BulletHitInfoUploadData Data);// 0x3a29d34
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity, bool bRefreshCollison);// 0x3a29c0c
	HitResult ConditionPreCalcShootHitRet(bool WithDeviation, float ToleranceTime);// 0x3a29a98
	bool CanBulletThroughBody(Actor* HitActor, byte HitBodyType, uint32 ShootID);// 0x3a29990
	void AfterThroughCharacter(out const BulletHitInfoUploadData Data);// 0x3a298fc

--------------------------------
Class: ShootWeaponCustomDamageList
	<enum,ShootWeaponCustomDamage> Data;//[Offset: 0x0, Size: 60]
	float RangeModifier;//[Offset: 0x3c, Size: 4]
	float ReferenceDistance;//[Offset: 0x40, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x44, Size: 4]
	float BaseImpactDamage;//[Offset: 0x48, Size: 4]
	class STExtraShootWeaponBulletBase* BulletClass;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: ShootWeaponCustomDamage
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 40]
	float DamageRate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AIActingComponent.LuaInstancedActorComponent.ActorComponent.Object
	FString AIActingLuaConfig;//[Offset: 0x114, Size: 12]
	FString DefaultLuaFilePath;//[Offset: 0x120, Size: 12]
	int WillKilledBotNum;//[Offset: 0x12c, Size: 4]
	int PlayersOnSquare;//[Offset: 0x130, Size: 4]
	int OriginalTotalAINum;//[Offset: 0x134, Size: 4]
	int OriginalTotalCandidateAINum;//[Offset: 0x138, Size: 4]
	int OriginalTotalCandidateMLAINum;//[Offset: 0x13c, Size: 4]
	bool bSimulateKillConsiderMLAINum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int[] SimulateKillNums;//[Offset: 0x144, Size: 12]
	int OriginalDeliveryMLAINum;//[Offset: 0x150, Size: 4]
	int OriginalFakePlayerMLAINum;//[Offset: 0x154, Size: 4]
	AIWayPointActor*[] WayPointActorList;//[Offset: 0x160, Size: 12]
	bool bUseCacheWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0x170, Size: 12]
	AIActingCandidateData[] CandidateMLDeliveryList;//[Offset: 0x17c, Size: 12]
	bool bCheckTeleportLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	float AverageRating;//[Offset: 0x220, Size: 4]
	bool bUseMlAICondCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float MlAIHpCheckValue;//[Offset: 0x228, Size: 4]
	float AIDeliveryWaveInterval;//[Offset: 0x22c, Size: 4]
	bool bNewPrepareBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool bSimulateKilledByServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	bool bForceExitPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 1]
	int MaxActiveAI;//[Offset: 0x234, Size: 4]
	int ActiveAI_n;//[Offset: 0x238, Size: 4]
	int ActiveAI_m;//[Offset: 0x23c, Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x240, Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x244, Size: 4]
	float SelectActionPeriod;//[Offset: 0x248, Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x24c, Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x250, Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x254, Size: 12]
	int[] SuicideDamagesType;//[Offset: 0x29c, Size: 12]
	int[] HomicideDamagesType;//[Offset: 0x2a8, Size: 12]
	int[] NoKillerDamagesType;//[Offset: 0x2b4, Size: 12]
	int SimulateKillMinIntervalNum;//[Offset: 0x2c4, Size: 4]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x2c8, Size: 12]
	float MinKilledFreqScale;//[Offset: 0x2d4, Size: 4]
	float MaxKilledFreqScale;//[Offset: 0x2d8, Size: 4]
	bool bEnableClassicDeliveryAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	bool bEnableHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 1]
	int FullFeedLimit;//[Offset: 0x2e0, Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x2e4, Size: 12]
	float DeliveryBeginTime;//[Offset: 0x2f0, Size: 4]
	float DeliveryFreq;//[Offset: 0x2f4, Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x2f8, Size: 4]
	float MinimumWarmScore;//[Offset: 0x2fc, Size: 4]
	float SpecialAIHpCondition;//[Offset: 0x300, Size: 4]
	float SpecialAICircleDistanceScale;//[Offset: 0x304, Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x308, Size: 12]
	DeliveryCondition[] DeliveryChecks;//[Offset: 0x314, Size: 12]
	float TeammateDistanceThresholdSqr;//[Offset: 0x320, Size: 4]
	float EnemyDistanceThresholdSqr;//[Offset: 0x324, Size: 4]
	float DeliveryCoolDown;//[Offset: 0x328, Size: 4]
	SpecialAIDeliveryNumContainer[] SpAINumWitmTeammateCfg;//[Offset: 0x32c, Size: 12]
	FString HotValuePrefix;//[Offset: 0x338, Size: 12]
	HotValueAttenuation HotValueAttenuation;//[Offset: 0x344, Size: 12]
	HotValueScale HotValueScale;//[Offset: 0x350, Size: 12]
	float DeliveryHotValueThreshold;//[Offset: 0x35c, Size: 4]
	float HotValueUpdateBeginTime;//[Offset: 0x360, Size: 4]
	float HotValueUpdateDeltaTime;//[Offset: 0x364, Size: 4]
	bool bDebugHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	Vector2D HotValueLocationOffset;//[Offset: 0x374, Size: 8]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x394, Size: 12]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x3a0, Size: 12]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x3ac, Size: 12]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x3b8, Size: 12]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x3c4, Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x3c8, Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x3cc, Size: 4]
	int CommonAIDeliverInWave;//[Offset: 0x3d0, Size: 4]
	float DeliveryWaveCD;//[Offset: 0x3d4, Size: 4]
	<enum,int> StrategyLimit;//[Offset: 0x3d8, Size: 60]
	<enum,int> StrategyNums;//[Offset: 0x414, Size: 60]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x450, Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x454, Size: 4]
	STExtraPlayerCharacter*[] CachedCandidatePlayers;//[Offset: 0x458, Size: 12]
	FakePlayerAIController*[] CachedCandidateAICs;//[Offset: 0x4b8, Size: 12]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x4f8, Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x4fc, Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool bCheckTargetLocationDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	float TargetLocationDistanceThreshold;//[Offset: 0x51c, Size: 4]
	float MaxAILocationTraceHeightZ;//[Offset: 0x520, Size: 4]
	AIActingBPAssit* m_BPAssit;//[Offset: 0x530, Size: 4]
	FString AIActingBPAssitClassPath;//[Offset: 0x534, Size: 12]
	Actor*[] WaterSwimActors;//[Offset: 0x540, Size: 12]
	bool bEnableAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	delegate CustomDeliveryActDelegate;//[Offset: 0x550, Size: 12]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x59c, Size: 12]
	void UpdateCachedCandidates();// 0x355f4d0
	void UpdateCachedCandidatePlayers();// 0x355f4bc
	void UpdateCachedCandidateAICs();// 0x355f4a8
	void TickClassicDeliver(float DeltaTime);// 0x355f430
	void StrategyChange(const enum StrategyType, const bool bAdd);// 0x355f36c
	void SimulateKilledFakeAI(out const AIActingCandidateData Killer, out const AIActingCandidateData Killed, int WeapID, out int InWillKilled, byte SpecialDamageType, SpecifyDamageInfo SpecifyDamageInfo);// 0x355f024
	void SimulateKillAllFakeAI();// 0x355f010
	void SetMaxActiveAINum(int Num);// 0x355ef98
	bool SetAIRatingLevel(FakePlayerAIController* AIC, int Level);// 0x355eed4
	void SetAIControllerDeleverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x355ee18
	void SetActiveAINumM(int Num);// 0x355eda0
	void RemoveCandidateAI(int PlayerKey, bool bMLAI);// 0x355ecdc
	void OnSetDeliverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x4a51734
	void OnNotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x355ebc0
	void OnDeliverWaveBegin(int CurWave);// 0x4a51734
	void InitBornLandStrategyNum();// 0x355a034
	void GMOnBehaviorTreeLoaded(AIController* InAIController);// 0x355eb48
	void GMModidyAIEquipSpawnGroupData(out AIEquipSpawnGroupDataBase[] OutGroupData);// 0x355ea9c
	int GetWaveCD();// 0x355ea7c
	Vector GetSpawnRandomLocation(out bool OutSuccess, bool IsCheckWater);// 0x355e98c
	STExtraPlayerCharacter* GetOneDeliveryTarget();// 0x355e964
	float GetNoWhiteCirclesRadius();// 0x355e948
	void GetNotLimitStrategy(out enum[] NotLimitStrategy);// 0x355e87c
	int GetNonInstancedAICNum();// 0x355e858
	float GetHotValueByRowCol(const int InRow, const int InCol);// 0x355e794
	float GetHotValue(const Vector InLocation);// 0x355e71c
	int GetCurrentActing();// 0x355e6f4
	STExtraBaseCharacter*[] GetAllPlayerPawns();// 0x355e634
	STExtraBaseCharacter*[] GetAllAIPawnNoParam();// 0x355e574
	STExtraBaseCharacter*[] GetAllAIPawn(bool bMLAI, bool bDelivery);// 0x355e414
	STExtraBaseCharacter* CreateCharacter(AIActingCandidateData SpawnCandidateAI, Vector InLocation);// 0x355e240
	void CollectAndReportAIStrategyInfo();// 0x355e22c
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponId, FString KillerNation, FString KilledNation);// 0x355dd3c
	bool AdjustAIAttackAnimalRatingDamage(BasicAIController* AIC);// 0x355dcbc
	void AddAICCache(uint32 InPlayerKey, FakePlayerAIController* InAIC);// 0x355dc00

--------------------------------
Class: LuaInstancedActorComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x104, Size: 12]
	void UnRegistLuaTick();// 0x78911b4
	void RegistLuaTick(float TickInterval);// 0x7891f40

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x310, Size: 4]
	bool bOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x318, Size: 12]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x324, Size: 4]
	BillboardComponent* ShowSprite;//[Offset: 0x328, Size: 4]
	Vector GetNextWayPointLocation(int TeamID, int ExcludeID);// 0x357d948

--------------------------------
Class: TeamWayPointLink
	int TeamID;//[Offset: 0x0, Size: 4]
	WayPointLink[] Links;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIActingCandidateData
	int TeamID;//[Offset: 0x0, Size: 4]
	uint32 AIPlayerKey;//[Offset: 0x4, Size: 4]
	FString AIPlayerName;//[Offset: 0x8, Size: 12]
	FString AIPlayerNation;//[Offset: 0x14, Size: 12]
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x20, Size: 4]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	GameModePlayerItem[] InitialAIWeaponAvatarList;//[Offset: 0xc24, Size: 12]
	<int,int> AIWeaponAvatarItemList;//[Offset: 0xc6c, Size: 60]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0xca8, Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0xcb4, Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0xcc0, Size: 60]
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0xcfc, Size: 4]
	delegate OnEnterJumping;//[Offset: 0xd00, Size: 12]
	delegate OnFakePlayerRespawn;//[Offset: 0xd0c, Size: 12]
	delegate FakeAIJumpFromPlane;//[Offset: 0xd18, Size: 12]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0xd44, Size: 4]
	int PlayerTeamId;//[Offset: 0xd48, Size: 4]
	uint32 PlayerKey;//[Offset: 0xd4c, Size: 4]
	FString PlayerName;//[Offset: 0xd50, Size: 12]
	byte AIType;//[Offset: 0xd5c, Size: 1]
	int resID;//[Offset: 0xd60, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd64, Size: 1]
	bool bForceRecordKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd65, Size: 1]
	float TeleportRandomAngle;//[Offset: 0xd68, Size: 4]
	bool bUnPossessStopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6c, Size: 1]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6d, Size: 1]
	FString DropItemCfgTableName;//[Offset: 0xd70, Size: 12]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0xd7c, Size: 4]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	GameModePlayerItem[] OverrideInitialItemList;//[Offset: 0xd8c, Size: 12]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0xd98, Size: 4]
	int CurWeaponSchemeIndex;//[Offset: 0xd9c, Size: 4]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0xda0, Size: 12]
	bool EnableAIAttachItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdac, Size: 1]
	void SetPlane(Actor* InPlane);// 0x36eacb4
	void SetLiveState(enum InLiveState);// 0x36eac3c
	void SetDeliveryActingTarget(STExtraBaseCharacter* DeliveryActingTarget);// 0x36eabc4
	void SetDeliverTarget(STExtraPlayerCharacter* DeliverTargetPlayer);// 0x36eab4c
	void SetCanJump(bool CanJump);// 0x36eaacc
	bool IsInPlane();// 0x36eaaa4
	bool IsDeliver();// 0x36eaa7c
	void InitVehicleAvatarList();// 0x36eaa60
	void InitAIWeaponAvatarItems();// 0x36eaa44
	int GetResId();// 0x36eaa28
	Actor* GetPlane();// 0x36eaa00
	STExtraPlayerCharacter* GetDeliverTarget();// 0x36ea9d8
	PlayerSecurityInfoCollector* GetAIPlayerSecurityInfoCollector();// 0x36ea9bc
	void ForceJump();// 0x36ea9a8
	void ForceDropItems(int itemType);// 0x36ea930
	void ExitPlane();// 0x36ea914
	void EnterPlane(const bool bRespawn);// 0x36ea894
	void DebugBlackboardKey(out const FName KeyName, bool bShouldShow);// 0x36ea7b8
	void ClearDeliver();// 0x3612fb4
	bool ChecCanChangeWeaponScheme();// 0x36ea790
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x36ea710
	void ChangeToNewPrepareBehaviorTree();// 0x36ea6fc
	void ChangeToFightingBehaviorTree();// 0x36ea6e8
	void ChangeBehaviorTree(int Index, const bool bUseNewTree);// 0x36ea624
	void AddItemToFakePlayer(int ID, int Count, int PickupType);// 0x36ea524
	void AddItemAttachListForFakePlayer(int ItemId);// 0x36ea4ac

--------------------------------
Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	delegate OnCustomSpawnItemDelegate;//[Offset: 0x5b8, Size: 16]
	float CheckPeriod;//[Offset: 0x5c8, Size: 4]
	float RandomDeviation;//[Offset: 0x5cc, Size: 4]
	float ProtectCountdownTime;//[Offset: 0x5d0, Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x5d4, Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x5d8, Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x5dc, Size: 8]
	float TurnVelocity;//[Offset: 0x5e4, Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x5e8, Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x5f0, Size: 60]
	bool bSyncViewRotationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	bool bAimOffsetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 1]
	GameModeAIPlayerParams AIParams;//[Offset: 0x638, Size: 824]
	byte AIActionType;//[Offset: 0x9ac, Size: 1]
	byte FakePlayerBornType;//[Offset: 0x9ad, Size: 1]
	bool IsVaultBreakWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ae, Size: 1]
	float ValidPlayerControllerDist;//[Offset: 0x9b0, Size: 4]
	float DelayAIVaultBreakWindowTime;//[Offset: 0x9b4, Size: 4]
	int AIParachuteStyle;//[Offset: 0x9b8, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x9bc, Size: 4]
	SpectatorComponent* SpectatorComponent;//[Offset: 0x9c0, Size: 4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x9c4, Size: 56]
	AIShootMissInfo AIShootMissInfo;//[Offset: 0x9fc, Size: 24]
	AIConditionHearingComponent* AIConditionHearingComponent;//[Offset: 0xa14, Size: 4]
	AIParachuteJumpComponent* AIParachuteComp;//[Offset: 0xa18, Size: 4]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0xa5c, Size: 4]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0xa60, Size: 4]
	bool IsRespawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6d, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0xa70, Size: 12]
	Actor* Plane;//[Offset: 0xa7c, Size: 4]
	int FlightNo;//[Offset: 0xa80, Size: 4]
	int DefaultAIFeatureConfigID;//[Offset: 0xa84, Size: 4]
	AIFeatureInfo AIFeatureInfo;//[Offset: 0xa88, Size: 320]
	bool IsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04, Size: 1]
	STExtraBaseCharacter* RescuedByWho;//[Offset: 0xc08, Size: 8]
	uint32 CurAILevel;//[Offset: 0xc14, Size: 4]
	int MLAIStyle;//[Offset: 0xc18, Size: 4]
	bool bSkipCreateBackpackEveryTimePossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1c, Size: 1]
	bool bFullyRandomEveryTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1d, Size: 1]
	bool bConsiderBlueCircleWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1e, Size: 1]
	bool bConsiderWaterWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1f, Size: 1]
	bool bSkipUpdateRotationDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 1]
	void UpdateAIMissShootInfo(float CurrentTime, Vector2D MissRange, float MissOnPurposeCD);// 0x3613d50
	void StopBehaviorTreeAndSetNull();// 0x3613d3c
	void SetRatingDamageScale(float InRating);// 0x3613cc8
	void SetPlayerStatePlayerId(int InPlayerId);// 0x3613c50
	void SetMLAIType(int Type);// 0x3613bd8
	void SetIsMLAI(bool InIsMLAI);// 0x3613b50
	void SetGlobalAverageRating(float RatingValue);// 0x3613ad8
	void SetAILevel(uint32 NewAILevel);// 0x3613a60
	void Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x3613930
	void Respawn();// 0x361390c
	bool IsMLAIPlayerParam();// 0x36138f0
	bool IsInWater();// 0x36138d4
	bool IsDead();// 0x36138ac
	bool IsBeSpectated();// 0x3613884
	bool IsAvailableBackpacItemType(ItemDefineID DefineID);// 0x36137ec
	void InitSpectatorComponentWithParams(out const GameModeAIPlayerParams Params, bool bIsForce);// 0x36136e0
	void InitSpectatorComponent(bool bIsForce);// 0x3613660
	void InitAIFeatureInfo(int InID);// 0x36135e0
	bool InitAI(int InFeatureID);// 0x3613558
	float GetRatingDamageScale(STExtraPlayerController* PlayerController);// 0x36134d8
	float GetRatingDamageFiringAccuRadius(STExtraPlayerController* PlayerController);// 0x3613458
	Pawn* GetPossessedBaseCharacter();// 0x3613430
	uint32 GetMLBotTypeParam();// 0x3613414
	uint32 GetInitAILevelParam();// 0x36133f8
	float GetGlobalAverageRating();// 0x36133d0
	<float,float> GetEnemyHpDamageRateMap(STExtraBaseCharacter* InEnemy);// 0x3613200
	Pawn* GetCurEnemy();// 0x36131c8
	GameModeAIPlayerParams GetAIParams();// 0x3613184
	uint32 GetAILevel();// 0x3613168
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x361309c
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x3612fd0
	void CustomSpawnItemDelegate__DelegateSignature(BaseAIController* AIController);// 0x4a51734
	void ClearDeliver();// 0x3612fb4
	void ClearAIControllerCachedData();// 0x3612fa0
	void CheckOverConstructing(Actor* InActor, int TotoalAmountAllowed, int InBuildingID);// 0x3612ea0
	void ChangeAIActionType(byte InAIActionType);// 0x3612e20
	void AutoSpawnItem();// 0x3612e0c
	void AddItemForAIWithFullCheck(AIEquipSpawnItem[] DataSet, AIEquipSpawnItem[] AIMustPickUpItemList);// 0x3612b8c
	void AddItemForAI(int ItemId, int Count, bool bDropOnDead, bool bRollOnDead);// 0x3612a28

--------------------------------
Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x404, Size: 4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x408, Size: 4]
	SpawnerBase* TeamZoneSpawner;//[Offset: 0x40c, Size: 4]
	SpawnerBase* CurSpawner;//[Offset: 0x410, Size: 4]
	uint32 OwnedSpawnerID;//[Offset: 0x414, Size: 4]
	bool bAsyncLoadBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	enum AIAttackType;//[Offset: 0x419, Size: 1]
	bool IsAdvancedAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 1]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x41c, Size: 12]
	BehaviorTree*[] NewBehaviorTreePath;//[Offset: 0x428, Size: 12]
	BehaviorTree*[] AdvancedBehaviorTreePath;//[Offset: 0x434, Size: 12]
	int BehaviorTreeIndexRunWhenPossess;//[Offset: 0x440, Size: 4]
	float ActorLocationTetherDistance;//[Offset: 0x444, Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x448, Size: 4]
	FString AIFeatureInfoTableName;//[Offset: 0x44c, Size: 12]
	FString AIWeaponRangeTableName;//[Offset: 0x458, Size: 12]
	int HitRateConfigNum;//[Offset: 0x464, Size: 4]
	int AIFeatureID;//[Offset: 0x468, Size: 4]
	AITargetInViewOffset AITargetInViewOffset;//[Offset: 0x46c, Size: 44]
	delegate OnBehaviorTreeLoaded;//[Offset: 0x4e4, Size: 12]
	AIShootingPoseOffsetInfo shootingPoseOffsetInfo;//[Offset: 0x4f0, Size: 84]
	delegate OnCollectionHearSoundDelegate;//[Offset: 0x544, Size: 12]
	bool InterpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	enum AICharacterRotateInterpType;//[Offset: 0x551, Size: 1]
	float RotationSpeedOfInterpControlRotation;//[Offset: 0x554, Size: 4]
	Pawn* DebugWatcher;//[Offset: 0x560, Size: 4]
	FString LuaFilePath;//[Offset: 0x564, Size: 12]
	bool UseAIFeatureInfo();// 0x361c6b4
	void SetCurShootingPose(enum InAIShootingPose);// 0x361c63c
	void OpenPathDebug(Pawn* Requester);// 0x361c5c8
	void OnAIEnterDarkArea(bool bInEnter, Actor* DarkArea, bool bAtLeastInOne);// 0x361c4ac
	void InitAIFeatureInfo(int InID);// 0x36135e0
	bool InitAI(int InFeatureID);// 0x3613558
	Pawn*[] GetTeammates();// 0x361c3ec
	int GetTeammateCount();// 0x361c3c4
	int GetCurrentOrder();// 0x361c39c
	Pawn* GetCurEnemy();// 0x36131c8
	BlackboardComponent* GetBlackboardComponent();// 0x361c380
	BehaviorTree*[] GetBehaviorTreePath();// 0x361c228
	enum GetAIAttackType();// 0x361c20c
	void ClearCurEnemy();// 0x361c1f0

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x380, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x380, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x380, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x380, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x380, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x384, Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x388, Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x38c, Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x390, Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x394, Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x398, Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x39c, Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x3a0, Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ae, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x3b0, Size: 12]
	bool bEnableActiveRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x5b73f64
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x5b73eec
	void SetMoveBlockDetection(bool bEnable);// 0x5b73e6c
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x5b73de4
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x4a51734
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x4a51734
	void OnPossess(Pawn* PossessedPawn);// 0x4a51734
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x5b73d20
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x5b73a78
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x5b73830
	void K2_SetFocus(Actor* NewFocus);// 0x5b737b8
	void K2_SetFocalPoint(Vector FP);// 0x5b73748
	void K2_ClearFocus();// 0x5b73734
	bool HasPartialPath();// 0x5b7370c
	PathFollowingComponent* GetPathFollowingComponent();// 0x5b736f0
	byte GetMoveStatus();// 0x5b736c8
	Vector GetImmediateMoveDestination();// 0x5b73680
	Actor* GetFocusActor();// 0x5b73658
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x5b735c0
	Vector GetFocalPoint();// 0x5b73578
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x5b7355c
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x5b734e4

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf8, Size: 4]
	NavigationData* MyNavData;//[Offset: 0x104, Size: 4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x5b9a218
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x5b9a06c
	Vector GetPathDestination();// 0x5b9a024
	byte GetPathActionType();// 0x5b99ffc

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc8, Size: 4]
	AIController* AIOwner;//[Offset: 0xcc, Size: 4]
	void StopLogic(FString Reason);// 0x5b8211c
	void RestartLogic();// 0x355a034
	bool IsRunning();// 0x4314604
	bool IsPaused();// 0x37f5a28

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xc4, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc8, Size: 4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe4, Size: 12]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x5b80624
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x5b80468
	void SetValueAsRotator(out const FName KeyName, Rotator RotatorValue);// 0x5b8038c
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x5b802b0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x5b801d4
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x5b800f8
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x5b8001c
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x5b7ff40
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x5b7fe64
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x5b7fd80
	bool IsVectorValueSet(out const FName KeyName);// 0x5b7fcec
	Vector GetValueAsVector(out const FName KeyName);// 0x5b7fc48
	FString GetValueAsString(out const FName KeyName);// 0x5b7fb2c
	Rotator GetValueAsRotator(out const FName KeyName);// 0x5b7fa88
	Object* GetValueAsObject(out const FName KeyName);// 0x5b7f9f4
	FName GetValueAsName(out const FName KeyName);// 0x5b7f958
	int GetValueAsInt(out const FName KeyName);// 0x5b7f8c4
	float GetValueAsFloat(out const FName KeyName);// 0x5b7f830
	byte GetValueAsEnum(out const FName KeyName);// 0x5b7f79c
	class Object GetValueAsClass(out const FName KeyName);// 0x5b7f708
	bool GetValueAsBool(out const FName KeyName);// 0x5b7f674
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x5b7f58c
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x5b7f4a4
	void ClearValue(out const FName KeyName);// 0x5b7f418

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x118, Size: 12]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x5b7ea7c
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x5b7e9fc
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x5b7e8e8

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 12]
	BTService*[] Services;//[Offset: 0x48, Size: 12]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c, Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x3c, Size: 4]
	float RandomDeviation;//[Offset: 0x40, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SpawnerBase.Actor.Object
	UnitTransformGenerator* TransformGenerator;//[Offset: 0x350, Size: 4]
	UnitSpeciesGenerator* SpeciesGenerator;//[Offset: 0x354, Size: 4]
	FString LuaFilePath;//[Offset: 0x358, Size: 12]
	Pawn*[] AliveBots;//[Offset: 0x364, Size: 12]
	SpawnerInfo SpawnerInfo;//[Offset: 0x370, Size: 52]
	void Stop();// 0x357b710
	Actor* SpawnUnit();// 0x357ede8
	void Run();// 0x3590e5c
	void RemoveAliveBot(Pawn* BotPawn);// 0x3899890
	GameLevelManagerComponent* GetGameLevelManager();// 0x3899868
	Pawn*[] GetAliveBots();// 0x38997a8
	void AddAliveBot(Pawn* BotPawn);// 0x3899730

--------------------------------
Class: UnitTransformGenerator.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	SpawnerBase* GetSpawner();// 0x3aef8ac
	Transform Generate();// 0x3aefd34

--------------------------------
Class: UnitSpeciesGenerator.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	FString SpeciesConfigLuaPath;//[Offset: 0x6c, Size: 12]
	void PostConfig(Actor* Actor);// 0x36f091c
	SpawnerBase* GetSpawner();// 0x3aef8ac

--------------------------------
Class: SpawnerInfo
	Guid SpawnerID;//[Offset: 0x0, Size: 16]
	int ConfigId;//[Offset: 0x10, Size: 4]
	FString State;//[Offset: 0x14, Size: 12]
	bool bAutoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	FString OwnerZone;//[Offset: 0x28, Size: 12]

--------------------------------
Class: GameLevelManagerComponent.ActorComponent.Object
	delegate OnAppendEliteGroup;//[Offset: 0xc4, Size: 12]
	delegate OnRemoveEliteGroup;//[Offset: 0xd0, Size: 12]
	int EliteWarningItemIconID;//[Offset: 0xdc, Size: 4]
	<int,int> EliteWarningItemInstanceIDMap;//[Offset: 0xe0, Size: 60]
	GameLevelDesc[] CurActiveGameLevelList;//[Offset: 0x11c, Size: 12]
	LevelData[] CurActiveGameLevelDataList;//[Offset: 0x128, Size: 12]
	int TotalAliveMonsterNum;//[Offset: 0x134, Size: 4]
	int BornLevelMonsterNum;//[Offset: 0x138, Size: 4]
	int BornShitMonsterNum;//[Offset: 0x13c, Size: 4]
	<FString,SingleLevelObjArray> LevelObjs;//[Offset: 0x140, Size: 60]
	AliveMonsterNum[] AliveMonsterNumList;//[Offset: 0x17c, Size: 12]
	GameLevelDesc CurCompletedGameLevel;//[Offset: 0x188, Size: 20]
	float LevelBeginTime;//[Offset: 0x19c, Size: 4]
	float LevelEndTime;//[Offset: 0x1a0, Size: 4]
	int GM_Diffcult;//[Offset: 0x1a4, Size: 4]
	bool GM_UnLoadLevelData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool GM_UnLoadDynamicLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 1]
	float NavTickInterval;//[Offset: 0x1ac, Size: 4]
	LevelData[] LevelDataList;//[Offset: 0x1b0, Size: 12]
	LevelRelifePointInfo[] LevelRelifePointList;//[Offset: 0x1c0, Size: 12]
	FString MonsterTableName;//[Offset: 0x1cc, Size: 12]
	FString MonsterBPTableName;//[Offset: 0x1d8, Size: 12]
	FString MonsterSpecialStateTableName;//[Offset: 0x1e4, Size: 12]
	FString DecoratorTableName;//[Offset: 0x1f0, Size: 12]
	FString MonsterDropTableName;//[Offset: 0x1fc, Size: 12]
	int RelifePosOffsetZ;//[Offset: 0x208, Size: 4]
	Actor* SpawnPickup(int ID, out const Transform Transform, const int ContentNum);// 0x36f8d30
	Actor* SpawnMonster(int ID, out const Transform Transform, out const MonsterParams Params);// 0x36f8b40
	void RemoveRelifePoint(out GameLevelDesc LevelDesc);// 0x36f8a64
	void RegisterGameEvent();// 0x36f8a50
	void OnRep_CurGameLevelChanged();// 0x3592f9c
	void OnMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x36f8930
	void OnGameStart();// 0x36f891c
	void OnGameEnd();// 0x36f8908
	void OnBotDied(Actor* Actor, Actor* Killer);// 0x36f884c
	void OnBotBorn(Actor* Actor);// 0x36f87d4
	void OnActorUniqueIdRemove(uint32 SId);// 0x36f875c
	void OnActorUniqueIdAdd(Actor* Actor, uint32 SId);// 0x36f86a0
	void OnActorSpawn(Actor* Actor);// 0x36f8628
	void OnActorDespawn(Actor* Actor);// 0x36f85b0
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);// 0x36f84e4
	bool KillUnitBySelf(Actor* TActor);// 0x36f8464
	bool KillUnit(byte BotCat, int BotType, bool ForbidenReborn);// 0x36f8354
	bool KillCategoryUnit(byte BotCat, bool ForbidenReborn);// 0x36f8288
	void InitUnit(Actor* TActor, byte Category);// 0x36f81cc
	void InitRelifePoint(out GameLevelDesc LevelDesc, RelifePoint[] PVERelifePoints);// 0x36f7f8c
	void InitLuaLevelActors();// 0x36f7f78
	void InitLevelAddObjs(out LevelData LevelData);// 0x36f7e70
	void Init();// 0x36f7e5c
	void HandleGameLevelEnd(out GameLevelDesc LevelDesc);// 0x36f7d84
	void HandleEnterLevel(out GameLevelDesc InLevelDesc, Actor* OffsetActor);// 0x36f7c64
	Actor* GetUnit(byte Category, int TypeId);// 0x36f7ba0
	bool GetRelifeTrans(out const Vector NearVector, out Transform RelifeTrans);// 0x36f7a70
	LevelData[] GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, Vector NearPos);// 0x36f783c
	bool GetNearPosLevel(Vector NearPos, int ChapterType, LevelData[] AvoidLevelList, out LevelData OutLevelData);// 0x36f74d4
	LevelData GetLoadedLevelData(out GameLevelDesc LevelDesc);// 0x36f73d0
	int GetAliveMonsterNum(byte SourceType);// 0x36f7350
	LevelData GetActiveLevelDataByLevelDesc(out GameLevelDesc LevelDesc);// 0x36f724c
	void EndLevelAddObjs(out LevelData LevelData);// 0x36f7144
	void ChangeAliveMonsterNumList(byte SourceType, int Addition);// 0x36f7088
	void BroadRemoveEliteGroup(int LevelID, Vector Pos);// 0x36f6fc4
	void BroadAppendEliteGroup(int LevelID, Vector Pos);// 0x36f6f00
	void AdjustPosByOffsetActor(out LevelData LevelData, Transform OffsetTrans);// 0x36f6d40
	void ActiveRelifePoint(out GameLevelDesc LevelDesc, int ID, bool ActivePoint);// 0x36f6bcc

--------------------------------
Class: GameLevelDesc
	int ChapterID;//[Offset: 0x0, Size: 4]
	int LevelID;//[Offset: 0x4, Size: 4]
	FString Desc;//[Offset: 0x8, Size: 12]

--------------------------------
Class: LevelData
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	FString[] TargetClassPaths;//[Offset: 0x14, Size: 12]
	FString LeveDirectorFilePath;//[Offset: 0x20, Size: 12]
	byte EndCondType;//[Offset: 0x2c, Size: 1]
	FString EndCondPar;//[Offset: 0x30, Size: 12]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int DiffcultPerc;//[Offset: 0x40, Size: 4]
	Vector[] TaskPointLocations;//[Offset: 0x44, Size: 12]
	RelifePoint[] PVERelifePointsInfo;//[Offset: 0x50, Size: 12]
	PVECircle[] PVECircleInfo;//[Offset: 0x5c, Size: 12]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x68, Size: 12]
	Vector Pos;//[Offset: 0x74, Size: 12]
	LevelObjets[] LevelAddObjs;//[Offset: 0x80, Size: 12]

--------------------------------
Class: RelifePoint
	int ID;//[Offset: 0x0, Size: 4]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: PVECircle
	int CircleID;//[Offset: 0x0, Size: 4]
	Vector2D targetPos;//[Offset: 0x4, Size: 8]
	float Radius;//[Offset: 0xc, Size: 4]
	float MoveTime;//[Offset: 0x10, Size: 4]
	float Pain;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MonsterWave
	float WaveDelayTime;//[Offset: 0x0, Size: 4]
	MonsterGroup[] MonsterGroupList;//[Offset: 0x4, Size: 12]
	FString Desc;//[Offset: 0x10, Size: 12]
	byte EndCondType;//[Offset: 0x1c, Size: 1]
	int EndCondPar;//[Offset: 0x20, Size: 4]
	int ID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MonsterGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	byte ChooseGroupSpotType;//[Offset: 0xc, Size: 1]
	int NearPlayTeamIdx;//[Offset: 0x10, Size: 4]
	ZMonsterSpotGroup*[] SpotGroupChooseList;//[Offset: 0x14, Size: 12]
	MonsterSpotGroup[] MonsterSpotGroupChooseList;//[Offset: 0x20, Size: 12]
	MonsterGeneratePlan[] PlanList;//[Offset: 0x2c, Size: 12]
	int ID;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ZMonsterSpotGroup.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x2c0, Size: 12]
	ZMonsterSpot*[] SpotList;//[Offset: 0x2cc, Size: 12]

--------------------------------
Class: ZMonsterSpot.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x2c0, Size: 12]
	byte MonsterSpotType;//[Offset: 0x2cc, Size: 1]
	ZMonsterRoadPoint*[] RoadPointList;//[Offset: 0x2d0, Size: 12]
	byte SpotRadius;//[Offset: 0x2dc, Size: 1]

--------------------------------
Class: ZSpotSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ZMonsterRoadPoint.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x2c0, Size: 4]
	int Radius;//[Offset: 0x2c4, Size: 4]

--------------------------------
Class: MonsterSpotGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	Vector Pos;//[Offset: 0xc, Size: 12]
	MonsterSpot[] SpotList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MonsterSpot
	FString Desc;//[Offset: 0x0, Size: 12]
	byte MonsterSpotType;//[Offset: 0xc, Size: 1]
	Vector Pos;//[Offset: 0x10, Size: 12]
	RoadPointInfo[] RoadPointList;//[Offset: 0x1c, Size: 12]
	byte SpotRadius;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RoadPointInfo
	int ID;//[Offset: 0x0, Size: 4]
	int Radius;//[Offset: 0x4, Size: 4]
	Vector Pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: MonsterGeneratePlan
	FString Desc;//[Offset: 0x0, Size: 12]
	int PlanWeight;//[Offset: 0xc, Size: 4]
	MonsterGenerateCfg[] PlanDetail;//[Offset: 0x10, Size: 12]
	int ID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MonsterGenerateCfg
	int MonsterID;//[Offset: 0x0, Size: 4]
	FString Desc;//[Offset: 0x4, Size: 12]
	byte SpotType;//[Offset: 0x10, Size: 1]
	int MonsterNum;//[Offset: 0x14, Size: 4]
	float RandomGenerateDelayTime;//[Offset: 0x18, Size: 4]
	int ReBornTimes;//[Offset: 0x1c, Size: 4]
	int ReBornDelay;//[Offset: 0x20, Size: 4]
	float GenerateDelayTime;//[Offset: 0x24, Size: 4]
	int ID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: LevelObjets
	class Object* Objects;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: SingleLevelObjArray
	Actor*[] LevelObjs;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AliveMonsterNum
	int Num;//[Offset: 0x0, Size: 4]
	byte SourceType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LevelRelifePointInfo
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	RelifePointInfo[] RelifePointList;//[Offset: 0x14, Size: 12]

--------------------------------
Class: RelifePointInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform RelifeTrans;//[Offset: 0x10, Size: 48]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: MonsterParams
	int MonsterID;//[Offset: 0x0, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int ProduceID;//[Offset: 0x54, Size: 4]

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0xc4, Size: 60]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0x100, Size: 12]

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0xc4, Size: 1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xc4, Size: 12]
	class AISense* DominantSense;//[Offset: 0xd0, Size: 4]
	AIController* AIOwner;//[Offset: 0xe8, Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x148, Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x154, Size: 12]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x5b75dc0
	void RequestStimuliListenerUpdate();// 0x5b75dac
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x5b75cf0
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x5b75c24
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5b75b14
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5b75a04
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5b758f4
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x5b757cc

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c, Size: 4]
	float MaxAge;//[Offset: 0x20, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 4]
	enum NotifyType;//[Offset: 0x20, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c, Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x5b76d78
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x5b76d00
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x5b76c00
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x5b76b44
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x5b76970

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x28, Size: 8]
	int iExtraData;//[Offset: 0x40, Size: 4]
	int iExtraData;//[Offset: 0x44, Size: 4]
	int iExtraData;//[Offset: 0x48, Size: 4]
	float fExtraData;//[Offset: 0x4c, Size: 4]
	float fExtraData;//[Offset: 0x50, Size: 4]
	float fExtraData;//[Offset: 0x54, Size: 4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 12]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xc4, Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xc8, Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xd4, Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xe0, Size: 4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x5b9ba18
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x5b9b910
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x5b9b890
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x5b9b810

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 4]
	Object* Instigator;//[Offset: 0x28, Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 1]
	byte GetActionPriority();// 0x5b9a8f4
	void Finish(byte WithResult);// 0x5b9a86c
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x5b9a7b0

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc8, Size: 12]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd4, Size: 12]
	GameplayTask*[] TickingTasks;//[Offset: 0xec, Size: 12]
	GameplayTask*[] KnownTasks;//[Offset: 0xf8, Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x108, Size: 12]
	void OnRep_SimulatedTasks();// 0x5ac37d4
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x5ac3460

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 4]
	void ReadyForActivation();// 0x5ac1ae0
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x4a51734
	void EndTask();// 0x5ac1acc

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AITargetInViewOffset
	Vector[] Offset;//[Offset: 0x0, Size: 12]
	Vector[] CrouchOffset;//[Offset: 0xc, Size: 12]
	Vector TargetLoc;//[Offset: 0x18, Size: 12]
	int CurrentOffsetIndex;//[Offset: 0x24, Size: 4]
	bool bTargetInViewDueToOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum TargetPawnState;//[Offset: 0x29, Size: 1]

--------------------------------
Class: AIShootingPoseOffsetInfo
	AIShootingPoseOffsetDetailInfo[] ShootingPoseShootPointOffsetArray;//[Offset: 0x0, Size: 12]
	float CrouchToStandHeightOffset;//[Offset: 0xc, Size: 4]
	float ProneToStandHeightOffset;//[Offset: 0x10, Size: 4]
	<enum,Vector> ShootingPoseShootPointOffsetMap;//[Offset: 0x18, Size: 60]

--------------------------------
Class: AIShootingPoseOffsetDetailInfo
	enum shootingPose;//[Offset: 0x0, Size: 1]
	Vector offsetInfo;//[Offset: 0x4, Size: 12]

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bPathDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bUpdatePathOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	float maxCheckDis;//[Offset: 0x278, Size: 4]
	float maxCheckDisTime;//[Offset: 0x27c, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x288, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x28c, Size: 4]
	float MaxTransferDis;//[Offset: 0x290, Size: 4]

--------------------------------
Class: PlayerSecurityInfoCollector.ActorComponent.Object
	int[] EnergyItemIDList;//[Offset: 0xc4, Size: 12]
	int[] EnergySpeedUpPhaseIndexList;//[Offset: 0xd0, Size: 12]
	bool bEnableDetailFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool bEnableDetailHurtFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	ClientCircleFlow CurCircleFlow;//[Offset: 0xe0, Size: 304]
	ClientCircleFlow CollectCircleFlow;//[Offset: 0x210, Size: 304]
	DSCircleFlow CurDSCircleFlow;//[Offset: 0x340, Size: 40]
	DSCircleFlow CollectDSCircleFlow;//[Offset: 0x368, Size: 40]
	HurtFlow CurHurtFlow;//[Offset: 0x390, Size: 256]
	ClientJumpFlow JumpFlow;//[Offset: 0x490, Size: 168]
	ClientSecPlayerKillFlow SecPlayerKillFlow;//[Offset: 0x538, Size: 136]
	InexistentAvatarFlow InexistentAvatarFlow;//[Offset: 0xeb0, Size: 360]
	void StartOnPlane();// 0x37fdaf4
	void ReportDSPlayerDieCircleFlow();// 0x37fdae0
	void RecordAirDropCount();// 0x37fdacc
	void PlayerCanJump();// 0x37fdab8
	void HandleSyncCircleInfo(int Index);// 0x37fda40
	void HandleDSCharacterWin();// 0x37fda2c
	void HandleCharacterSafeZoneTips(float SafeZoneTime);// 0x37fd9b4
	void HandleCharacterDSCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x37fd8ac
	void HandleCharacterCircleWaveOver(int Index);// 0x37fd834
	void HandleCharacterCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x37fd72c
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);// 0x37fd6b4
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);// 0x37fd63c
	void HandleCharacterAttrChangedWithDetail(Actor* nowActor, FString AttrName, float ValueDelta, float ResultValue);// 0x37fd4b0
	void ExitParachute();// 0x37fd49c
	void EnterParachute();// 0x37fd488
	void EnterJumping();// 0x37fd474
	void DSStartOnPlane();// 0x37fd460
	void CalculatePlayerMoveData();// 0x37fd44c
	void AddRecoveryItemFlow(uint32 ItemId);// 0x37fd3d4

--------------------------------
Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString PicUrl;//[Offset: 0x14, Size: 12]
	uint32 GameStartTime;//[Offset: 0x20, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x24, Size: 4]
	int NewCirclePositionX;//[Offset: 0x28, Size: 4]
	int NewCirclePositionY;//[Offset: 0x2c, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x30, Size: 4]
	int NewCircleCount;//[Offset: 0x34, Size: 4]
	int PlayerPositionX;//[Offset: 0x38, Size: 4]
	int PlayerPositionY;//[Offset: 0x3c, Size: 4]
	int PlayerPositionZ;//[Offset: 0x40, Size: 4]
	int PlayerHP;//[Offset: 0x44, Size: 4]
	uint32 OldCircleMoveTime;//[Offset: 0x48, Size: 4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x4c, Size: 4]
	uint32 PlayerOutTime;//[Offset: 0x50, Size: 4]
	int CirclePoisonCount;//[Offset: 0x54, Size: 4]
	int CirclePoisonMin;//[Offset: 0x58, Size: 4]
	int CirclePoisonMax;//[Offset: 0x5c, Size: 4]
	int CirclePoisonAvg;//[Offset: 0x60, Size: 4]
	int CirclePoisonTotal;//[Offset: 0x64, Size: 4]
	int CirclePoisonDrop;//[Offset: 0x68, Size: 4]
	int CirclePoisonDead;//[Offset: 0x6c, Size: 4]
	int RecoveryCount;//[Offset: 0x70, Size: 4]
	int RecoveryMin;//[Offset: 0x74, Size: 4]
	int RecoveryMax;//[Offset: 0x78, Size: 4]
	int RecoveryTotal;//[Offset: 0x7c, Size: 4]
	int EnergyRecoveryCount;//[Offset: 0x80, Size: 4]
	RecoveryItemCount[] RecoveryItemCounts;//[Offset: 0x84, Size: 12]
	int EnergyRecoveryMin;//[Offset: 0x90, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x94, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x98, Size: 4]
	int EnergyStartLv;//[Offset: 0x9c, Size: 4]
	int EnergyStartTime;//[Offset: 0xa0, Size: 4]
	FString EnergyItemUse;//[Offset: 0xa4, Size: 12]
	int EnergyLvTimeInfo;//[Offset: 0xb0, Size: 4]
	FString EnergyRunFastTime;//[Offset: 0xb4, Size: 12]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xc0, Size: 12]
	int EnergyEndLv;//[Offset: 0xcc, Size: 4]
	int EnergyEndTime;//[Offset: 0xd0, Size: 4]
	int PlayerMoveDis;//[Offset: 0xd4, Size: 4]
	int PlayerSpeedMax;//[Offset: 0xd8, Size: 4]
	int PlayerSpeedAvg;//[Offset: 0xdc, Size: 4]
	int PlayerCarSpeedMax;//[Offset: 0xe0, Size: 4]
	int PlayerCarSpeedAvg;//[Offset: 0xe4, Size: 4]
	int PlayerSquatMoveDis;//[Offset: 0xe8, Size: 4]
	int PlayerSquatMoveTime;//[Offset: 0xec, Size: 4]
	int PlayerCreepMoveDis;//[Offset: 0xf0, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0xf4, Size: 4]
	int PlayerRunMoveDis;//[Offset: 0xf8, Size: 4]
	int PlayerRunMoveTime;//[Offset: 0xfc, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0x100, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0x104, Size: 4]
	int PlayerCar;//[Offset: 0x108, Size: 4]
	int PlayerCameraDistanceMax;//[Offset: 0x10c, Size: 4]
	uint32 SecCircleFlowID;//[Offset: 0x110, Size: 4]
	int RecordType;//[Offset: 0x114, Size: 4]
	byte AutoAimType;//[Offset: 0x118, Size: 1]
	int AutoAimTime;//[Offset: 0x11c, Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0x120, Size: 12]

--------------------------------
Class: RecoveryItemCount
	uint32 ItemId;//[Offset: 0x0, Size: 4]
	uint32 Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DSCircleFlow
	uint32 GameStartTime;//[Offset: 0x0, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x4, Size: 4]
	int NewCircleCount;//[Offset: 0x8, Size: 4]
	int RecoveryTotal;//[Offset: 0xc, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x10, Size: 4]
	int PlayerMoveDis;//[Offset: 0x14, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0x18, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0x1c, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0x20, Size: 4]
	int RecordType;//[Offset: 0x24, Size: 4]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString EnemyOpenID;//[Offset: 0x7c, Size: 12]
	FString EnemyUserName;//[Offset: 0x88, Size: 12]
	uint64 EnemyRoleID;//[Offset: 0x98, Size: 8]
	int EnemyRoleType;//[Offset: 0xa0, Size: 4]
	uint32 HurtTime;//[Offset: 0xa4, Size: 4]
	int HurtType;//[Offset: 0xa8, Size: 4]
	int HitType;//[Offset: 0xac, Size: 4]
	int DamageStart;//[Offset: 0xb0, Size: 4]
	int DamageReduce;//[Offset: 0xb4, Size: 4]
	int ArmorDef;//[Offset: 0xb8, Size: 4]
	int HPstart;//[Offset: 0xbc, Size: 4]
	int HPEnd;//[Offset: 0xc0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xc4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xc8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xcc, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xd0, Size: 4]
	int CarHPStart;//[Offset: 0xd4, Size: 4]
	int CarHPEnd;//[Offset: 0xd8, Size: 4]
	int FallHeight;//[Offset: 0xdc, Size: 4]
	int HypoxiaTime;//[Offset: 0xe0, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0xe4, Size: 4]
	int PlayerKilled;//[Offset: 0xe8, Size: 4]
	int ArmorKill;//[Offset: 0xec, Size: 4]
	int CarKill;//[Offset: 0xf0, Size: 4]
	int IfIsAI;//[Offset: 0xf4, Size: 4]
	int CircleIndex;//[Offset: 0xf8, Size: 4]
	uint32 HurtFlowID;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherId;//[Offset: 0x20, Size: 1]
	int64 GameStartTime;//[Offset: 0x28, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x30, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x34, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x38, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x40, Size: 4]
	FString FollowPlayerUID;//[Offset: 0x44, Size: 12]
	uint32 ExitFollowTime;//[Offset: 0x50, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x54, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x58, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x5c, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x60, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x64, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x68, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x6c, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x70, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x74, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x78, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x7c, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x80, Size: 4]
	FString AntsVoiceTeamID;//[Offset: 0x84, Size: 12]
	FString AntsVoiceRoomID;//[Offset: 0x90, Size: 12]
	int AntsVoiceTeamMemberID;//[Offset: 0x9c, Size: 4]
	int AntsVoiceRoomMemberID;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]
	int LocationX;//[Offset: 0x4c, Size: 4]
	int LocationY;//[Offset: 0x50, Size: 4]
	int LocationZ;//[Offset: 0x54, Size: 4]
	int KilledLocationX;//[Offset: 0x58, Size: 4]
	int KilledLocationY;//[Offset: 0x5c, Size: 4]
	int KilledLocationZ;//[Offset: 0x60, Size: 4]
	int KilledTeamID;//[Offset: 0x64, Size: 4]
	int TeamID;//[Offset: 0x68, Size: 4]
	FString GameModeID;//[Offset: 0x6c, Size: 12]
	uint64 PawnState;//[Offset: 0x78, Size: 8]
	uint64 KilledPawnState;//[Offset: 0x80, Size: 8]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]

--------------------------------
Class: InexistentAvatarFlow

--------------------------------
Class: BackpackComponent.LuaActorComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0x158, Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x164, Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0x170, Size: 12]
	delegate BatchItemUpdateDelegate;//[Offset: 0x17c, Size: 12]
	delegate BatchItemDeleteDelegate;//[Offset: 0x188, Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0x194, Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0x1a0, Size: 12]
	delegate ItemOperationInfoDelegate;//[Offset: 0x1ac, Size: 12]
	delegate AssociationOperationDelegate;//[Offset: 0x1b8, Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x1c4, Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x1d0, Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x1dc, Size: 12]
	delegate ItemHandleAddDelegate;//[Offset: 0x1e8, Size: 12]
	<int,int> PickupLimitSetting;//[Offset: 0x1f4, Size: 60]
	delegate ItemUpdatedDelegate;//[Offset: 0x230, Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x23c, Size: 12]
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0x248, Size: 12]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x254, Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x260, Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x278, Size: 24]
	IncNetArray ItemListNetCache;//[Offset: 0x290, Size: 24]
	<int,BattleItemData> CacheBattleItemMap;//[Offset: 0x2a8, Size: 60]
	ItemDefineID[] BroadcastInsertItemList;//[Offset: 0x2e4, Size: 12]
	ItemDefineID[] BroadcastUpdateItemList;//[Offset: 0x2f0, Size: 12]
	ItemDefineID[] BroadcastDeleteItemList;//[Offset: 0x2fc, Size: 12]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x30c, Size: 12]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x318, Size: 60]
	int CapacityThreshold;//[Offset: 0x354, Size: 4]
	float Capacity;//[Offset: 0x358, Size: 4]
	float OccupiedCapacity;//[Offset: 0x35c, Size: 4]
	float SafetyBoxCapacity;//[Offset: 0x360, Size: 4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x364, Size: 4]
	int virtualitemid;//[Offset: 0x378, Size: 4]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	int[] NeedToShowTypeList;//[Offset: 0x388, Size: 12]
	bool bVerifyWeaponPackageData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x398, Size: 12]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x4115544
	float UpdateStoreAreaOccupiedCapacity(out float StoreAreaOccupiedCapacity, enum InItemStoreArea);// 0x4115464
	void UpdateOccupiedCapacity();// 0x3673918
	float UpdateCapacity();// 0x4115434
	void UnlockUpdateItemListReceive();// 0x4115420
	void TryMergeItemHandles(out const ItemDefineID DefineID, enum InItemStoreArea);// 0x411534c
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x4115228
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x411513c
	void ServerSetShowBounty(bool bInShowBounty);// 0x4115074
	void ServerSetCustomAccessories(int WeaponItemID, int Index, int ItemId);// 0x4114f30
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x4114e00
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x4114cdc
	bool RemoveItemHandle(out const ItemDefineID DefineID);// 0x4114c3c
	void ReceiveItemList();// 0x379e09c
	void ReceiveCapacity();// 0x36b2500
	int PreCheckCanPickupBagAvatar(BattleItemHandleBase* NewHandle, BattleItemHandleBase* OldHandle, enum reson);// 0x4114b2c
	void PostItemHandleEquippingState(out const ItemDefineID DefineID, bool bEquipping);// 0x4114a50
	bool PickupItemFromWrapperDetail(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x41147a4
	bool PickUpItem_Default(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason);// 0x4114540
	bool PickupItem(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x4114294
	void PickupBattleItemOnPlane();// 0x4114280
	bool PickItem_IntoSafetyBox(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason);// 0x411401c
	bool PickItem_IntoBackpack(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason);// 0x4113db8
	void OnRep_specialCountLimit();// 0x4113da4
	void OnRep_ItemListNet();// 0x4113d90
	void OnRep_Capacity();// 0x4113d7c
	void NotifyItemUpdated(out const ItemDefineID DefineID);// 0x4113ce4
	void NotifyItemRemoved(out const ItemDefineID DefineID);// 0x4113c4c
	void NotifyItemListUpdated();// 0x3b020c8
	void NotifyCapacityUpdated();// 0x4113c30
	BattleItemHandleBase* NewItemHandle(out const ItemDefineID DefineID);// 0x4113b90
	ItemDefineID NewItemDefineID(out const ItemDefineID DefineID);// 0x4113adc
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x4113a18
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x411395c
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x41138a8
	void ModifyAimNotAutoUse(bool bAdd);// 0x41137e0
	void LockUpdateItemListReceive();// 0x41137cc
	BattleItemData ItemNet2Data(out const NetArrayUnit NetItem);// 0x4113610
	bool IsNeedToShowInBackpack(int TypeDefineID);// 0x4113590
	bool IsItemListUpdatedHasSomeItemTypes(out const int[] ItemTypes);// 0x41134bc
	bool IsItemListUpdatedHasSomeItemSubTypes(out const int[] ItemSubTypes);// 0x41133e8
	bool IsItemListUpdatedHasSomeItems(out const int[] ItemTypeSpecificIDs);// 0x4113314
	bool IsItemListUpdatedHasOneItemType(int itemType);// 0x4113294
	bool IsItemListUpdatedHasOneItemSubType(int ItemSubType);// 0x4113214
	bool IsItemListUpdatedHasOneItem(int ItemTypeSpecificID);// 0x4113194
	bool IsItemExist(out const ItemDefineID DefineID);// 0x41130f4
	bool IsEnableWeaponAttachmentBindToWeapon();// 0x41130c4
	bool IsEnableBackpackRepActor();// 0x411309c
	bool IsCustomIgnoreAccessories(int WeaponId, int Index);// 0x4112fd8
	bool IsCustomAccessories(int WeaponId, int ItemId);// 0x4112f14
	bool IsBackPackContainItemId(int ItemId);// 0x4112e94
	bool IsAutoUse(int ItemId);// 0x4a51734
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x4112dd0
	bool HasTagSub(int ItemId, out const FName TagName);// 0x4a51734
	bool HasItemBySubType(int SubType);// 0x4112d50
	bool HasItemByDefineID(out const ItemDefineID DefineID);// 0x4112cb8
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x4112bf4
	void HandleDropInDisuse(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle, enum Reason, float OccupiedCapacityBeforeDisuse);// 0x4112a8c
	World* GetWorld_BP();// 0x4112a64
	int GetUnEquipItemNumByItemId(int ItemId);// 0x41129e4
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x4112944
	SpecialPickInfo GetSpecialItemBefore(int ItemResId);// 0x41128b4
	float GetSafetyBoxCapacity();// 0x363b1b0
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, enum AdditionalDataNameType);// 0x41127b4
	int GetItemSubType(int ItemId);// 0x4a51734
	BattleItemData[] GetItemListByDefineID(out const ItemDefineID DefineID);// 0x4112644
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x411260c
	ItemHandleBase*[] GetItemHandleList();// 0x411259c
	int GetItemCountByType(int InItemType);// 0x411251c
	int GetItemCountByItemSpecialID(int InItemSpecialID);// 0x411249c
	BattleItemData GetItemByDefineID(out const ItemDefineID DefineID);// 0x41123d8
	float GetItemAssociateWeights(out const BattleItemData InItemData);// 0x4112320
	BattleItemData GetFirstItemBySubType(int SubType);// 0x4112274
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(out const ItemDefineID DefineID);// 0x41121b0
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x41120ec
	BattleItemData[] GetAllItemList(enum InItemStoreArea);// 0x4111f94
	enum GetAIPickupType(int ItemId);// 0x3661e94
	void ForceNetUpdate();// 0x37d4afc
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x4111e74
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x4111d98
	BattleItemHandleBase* CreateItemHandleInternal(out const ItemDefineID DefineID);// 0x4111cf8
	ItemHandleBase* CreateItemHandle(out const ItemDefineID DefineID);// 0x4111c58
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x4111b84
	void ClientBroadcastItemOperationFailedDelegate(const ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x4111a7c
	void ClientBroadcastItemOperationDelegate(const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x4111974
	int CheckSpecialMaxCountForItem(out const ItemDefineID DefineID, int Count);// 0x4111898
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x41117b8
	bool CheckPickUpItemDefaultSuccess(out const ItemDefineID DefineID, bool bPickupSucc, bool bAutoEquip);// 0x411167c
	int CheckLeftLimitCountForItem(int InItemID, int InCount);// 0x41115b0
	void CheckItemEmptyInBackpack(int InItemID);// 0x4111538
	int CheckCapacityForItem(out const ItemDefineID DefineID, int Count, enum InItemStoreArea);// 0x4111410
	bool ChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x41112f0
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x4111258
	bool CacheItemAssociationBeforeDisuse(ItemDefineID DefineID, enum Reason);// 0x411117c
	void BroadcastItemOperCountDelegate(out const ItemDefineID DefineID, enum OperationType, int Count);// 0x4111064
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x4110fc8
	void BroadcastItemOperationFailedDelegate(out const ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x4110eb0
	void BroadcastItemOperationDelegate(out const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x4110d98
	bool AlternativePickupItem(out ItemDefineID DefineID);// 0x4110cf8
	bool AddItemHandle(out const ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x4110c14
	void AddBattleItemPickupOnPlane(out ItemDefineID DefineID, out BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x4110978

--------------------------------
Class: CustomAccessoriesData
	int WeaponId;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int ItemId;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleItemPickupAfterLand
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	BattleItemPickupInfo PickupInfo;//[Offset: 0x18, Size: 64]
	enum Reason;//[Offset: 0x58, Size: 1]
	enum BattleItemClientPickupType;//[Offset: 0x59, Size: 1]

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] IncArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 64]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	enum ItemStoreArea;//[Offset: 0x1d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x2c, Size: 12]
	int Durability;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 1]
	byte Reason;//[Offset: 0x19, Size: 1]
	int Count;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SpectatorComponent.LuaActorComponent.ActorComponent.Object
	bool bCheckNetSaturate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	float CheckNetSaturateInterval;//[Offset: 0x150, Size: 4]
	float ReportNetSaturateInterval;//[Offset: 0x154, Size: 4]
	delegate OnServerSpectatorChange;//[Offset: 0x184, Size: 12]
	int MinExtraLocDeviceLevel;//[Offset: 0x190, Size: 4]
	uint32 MinTotalMemInGB;//[Offset: 0x194, Size: 4]
	float ExtraRadius;//[Offset: 0x198, Size: 4]
	float MinDisFromMyLoc;//[Offset: 0x19c, Size: 4]
	float MinDisFromExtraLoc;//[Offset: 0x1a0, Size: 4]
	float DelayReportTime;//[Offset: 0x1a4, Size: 4]
	float MaxDeltaReceiveTime;//[Offset: 0x1a8, Size: 4]
	int64 MinDeltaUTCTime;//[Offset: 0x1b0, Size: 8]
	uint64 MinDeltaFrameNum;//[Offset: 0x1b8, Size: 8]
	int MaxInvalidCnt;//[Offset: 0x1c4, Size: 4]
	void NotifyObserversSetViewTarget(Actor* NewViewTarget);// 0x389a6b8
	bool IsOwnerBeSpectated();// 0x389a690
	void HawkEyeFreeView(enum OperateType, float ExtraParam);// 0x389a5d4
	FString GetOwnerPlayerName();// 0x389a514
	STExtraPlayerController*[] GetOwnerObservers();// 0x389a4ac
	enum GetObserverType();// 0x389a484

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 4]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool TargetIsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	STExtraPlayerController* CacheNearPlayerController;//[Offset: 0x2c, Size: 4]
	STExtraBaseCharacter* CacheDeliveryActingTarget;//[Offset: 0x30, Size: 4]

--------------------------------
Class: AIShootMissInfo
	float MissMaxRangeTime;//[Offset: 0x0, Size: 4]
	float MissMinRangeTime;//[Offset: 0x4, Size: 4]
	float MissCDTime;//[Offset: 0x8, Size: 4]
	float MissResetTime;//[Offset: 0xc, Size: 4]
	float MissResetConfig;//[Offset: 0x10, Size: 4]
	bool bCanMissShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: AIConditionHearingComponent.ActorComponent.Object
	SoundShieldForAI* CurrentSoundShield;//[Offset: 0xc4, Size: 8]
	bool CanHearingInBox(Actor* TargetActor, Actor* SourceActor);// 0x3564f6c

--------------------------------
Class: SoundShieldForAI.Actor.Object
	Actor*[] PlayerPawns;//[Offset: 0x310, Size: 12]
	Actor*[] AIPawns;//[Offset: 0x31c, Size: 12]
	int MaxCacheNum;//[Offset: 0x328, Size: 4]
	void OnPlayerPawnsOverlap(Actor* InActor, bool bEnter);// 0x3899224
	void OnAIPawnsOverlap(Actor* InActor, bool bEnter);// 0x3899160
	bool InSameSoundShield(Actor* InAIPawn, Actor* InPlayerPawn);// 0x3899094

--------------------------------
Class: AIParachuteJumpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	Vector FocusTargetPos;//[Offset: 0xcc, Size: 12]
	enum JumpStrategy;//[Offset: 0xd8, Size: 1]
	float JumpTime;//[Offset: 0xdc, Size: 4]
	bool bUseSpecificInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bOpenParachuteNotClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	bool bLandingPhaseSetControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 1]
	bool bOpenDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 1]
	float TargetDistanceThresholdForInput;//[Offset: 0xe4, Size: 4]
	float MoveForwardInputValue;//[Offset: 0xe8, Size: 4]
	float MoveRightInputValue;//[Offset: 0xec, Size: 4]
	float ClearFocusHeight;//[Offset: 0xf0, Size: 4]
	float OpenParachuteHeight;//[Offset: 0xf4, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0xf8, Size: 4]
	FString TargetCityName;//[Offset: 0xfc, Size: 12]
	float TargetDistance2Route;//[Offset: 0x108, Size: 4]
	int CityLevel;//[Offset: 0x10c, Size: 4]
	float Deviation;//[Offset: 0x110, Size: 4]
	int[] Groups;//[Offset: 0x114, Size: 12]
	int AIStyle;//[Offset: 0x120, Size: 4]
	float ChangeTargetHeight;//[Offset: 0x128, Size: 4]
	Vector ChangeTargetPos;//[Offset: 0x12c, Size: 12]
	bool bTargetPosChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	int PlayerNumThresholdForChangeTarget;//[Offset: 0x13c, Size: 4]
	float AroundPlayerRange;//[Offset: 0x140, Size: 4]
	int CheckChangeTargetRemainTimes;//[Offset: 0x144, Size: 4]
	float TickShowDebugInfoDeltaTime;//[Offset: 0x148, Size: 4]
	float CurTickShowDebugInfoTime;//[Offset: 0x14c, Size: 4]
	Color DebugLineColor;//[Offset: 0x150, Size: 4]
	float JumpTimePassed;//[Offset: 0x154, Size: 4]
	STExtraPlayerCharacter* FollowTarget;//[Offset: 0x158, Size: 4]
	float FollowDelayTime;//[Offset: 0x15c, Size: 4]
	float ForwardDelayTime;//[Offset: 0x160, Size: 4]
	bool IsSmoothFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	float TurnVelocity;//[Offset: 0x168, Size: 4]
	bool JumpFromFixedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	Vector JumpPoint;//[Offset: 0x170, Size: 12]

--------------------------------
Class: AIAbilityComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x2dc0, Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x2dcc, Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x2dd8, Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x2de4, Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x2df0, Size: 12]
	delegate OnNewWeaponDelegate;//[Offset: 0x2dfc, Size: 12]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x2e08, Size: 12]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x2e14, Size: 12]
	delegate OnParachuteStateChanged;//[Offset: 0x2e20, Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x2e2c, Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x2e30, Size: 4]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x2e34, Size: 12]
	delegate HandleParachuteStateChangedOver;//[Offset: 0x2e40, Size: 12]
	BoxComponent* BoxEar;//[Offset: 0x2e4c, Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x2e50, Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x2e54, Size: 4]
	float IndoorCheckDistance;//[Offset: 0x2e58, Size: 4]
	float IndoorCheckTime;//[Offset: 0x2e5c, Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x2e60, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x2e64, Size: 4]
	class CameraShake* VehicleHitSimpleCharacterShaker;//[Offset: 0x2e68, Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e6c, Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x2e70, Size: 4]
	float fTickDuration;//[Offset: 0x2e74, Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x2e78, Size: 24]
	class PlayerGunCollosionComp* PlayerGunCollisionComponentClass;//[Offset: 0x2e90, Size: 4]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e94, Size: 1]
	bool IgnoreGliderOneTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e95, Size: 1]
	enum ParachuteState;//[Offset: 0x2ea4, Size: 1]
	bool bClientParachuteLandedFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec4, Size: 1]
	float LandDistanceCanAjustWhenParachuteLanded;//[Offset: 0x2ec8, Size: 4]
	float CheckCanLandMaxSeconds;//[Offset: 0x2eec, Size: 4]
	byte MoveUploadTimeout;//[Offset: 0x2ef4, Size: 1]
	float DSParachuteLandedFinishTimeMax;//[Offset: 0x2f00, Size: 4]
	bool bIsPendingCaptived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f04, Size: 1]
	enum LastParachuteState;//[Offset: 0x2f05, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x2f08, Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0c, Size: 1]
	float SwimZDir;//[Offset: 0x2f10, Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f14, Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f15, Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x2f18, Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x2f1c, Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x2f20, Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x2f24, Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x2f28, Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x2f2c, Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x2f30, Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x2f34, Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x2f38, Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x2f3c, Size: 4]
	AkAudioEvent* AK_ParachuteLocalOverride;//[Offset: 0x2f40, Size: 4]
	AkAudioEvent* AK_ParachuteRemoteOverride;//[Offset: 0x2f44, Size: 4]
	AkAudioEvent* AK_LandingLocalOverride;//[Offset: 0x2f48, Size: 4]
	AkAudioEvent* AK_LandingRemotelOverride;//[Offset: 0x2f4c, Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x2f50, Size: 80]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x2fa0, Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x2ff0, Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x3040, Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x30a8, Size: 4]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30ac, Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30ad, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x30b0, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x30b4, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b8, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x30c4, Size: 4]
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x30d0, Size: 1392]
	float CameraInfoAdditiveWeight;//[Offset: 0x3640, Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x3698, Size: 4]
	bool bUsingVehicleParachuteProp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b3, Size: 1]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b4, Size: 1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b5, Size: 1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x36b8, Size: 4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36bc, Size: 1]
	enum GoldenSuitSlot;//[Offset: 0x36bd, Size: 1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x36c0, Size: 4]
	float GoldenSuitCheckDelta;//[Offset: 0x36c4, Size: 4]
	float GoldenSuitTestFistDamage;//[Offset: 0x36c8, Size: 4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x36cc, Size: 72]
	FName FeatureActorName;//[Offset: 0x3730, Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3738, Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3739, Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373a, Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x373c, Size: 4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x3748, Size: 4]
	InteractiveComponentBase*[] InteractiveComponentList;//[Offset: 0x3750, Size: 12]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375c, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375d, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x375e, Size: 2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x3760, Size: 4]
	int TrySightCorrectionTime;//[Offset: 0x376c, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x3770, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3774, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3775, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x3778, Size: 4]
	bool ForceSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3784, Size: 1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378c, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x3790, Size: 12]
	int CurrentActivityID;//[Offset: 0x379c, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x37a0, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x37a4, Size: 4]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a8, Size: 1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x37b0, Size: 16]
	int[] InjuryFreeData;//[Offset: 0x37c0, Size: 12]
	float RecentlyGunADSOrProneTimeThresholdInSeconds;//[Offset: 0x3824, Size: 4]
	void UseCameraParamForVehicleParachute(bool InEnable);// 0x39c8c38
	void UpdateRecentAutonomousAttackTime();// 0x39c8c24
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x39c8b58
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x39c8ae0
	void UpdateIndoorState(bool IsInDoor);// 0x39c8a18
	void UpdateEnableGoldenSuitCheck();// 0x39c89fc
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x39c8934
	void UpdateAroundPickup();// 0x39c8920
	void TriggerParachuteLandVoice();// 0x39c8904
	void TriggerAutoAimCheck(float DeltaTime);// 0x39c888c
	void TouchCancelSkillLock();// 0x39c8878
	void SyncLatestPlayerStatus(enum LatestParachuteState);// 0x39c87c4
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x39314f0
	void SwitchSightAngledServer(byte InAngledSightType, bool IsOnlyTurn);// 0x39c86b4
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x39c85e8
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x39c8524
	void SwitchCameraToParachuteOpening();// 0x39c8508
	void SwitchCameraToParachuteFalling();// 0x39c84ec
	void SwitchCameraToNormal();// 0x39c84d0
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x39c8458
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x4a51734
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x39c8444
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x4a51734
	void StopCamShake();// 0x39c8428
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x39c83b0
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x39c8338
	void StartCamShake();// 0x39c831c
	void ShowNightVisionFrame();// 0x392f3f4
	void ShowConfirmDialogOfMisKill();// 0x392f360
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x39c827c
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x39c8204
	void SetSpecifiedItemConsumed(int ItemId);// 0x4a51734
	void SetSelfAndVehicleShadow(bool IsShow);// 0x39c8184
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x39c80c8
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x39c7fbc
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x39c7ef8
	void SetParachuteState(enum State);// 0x39c7e78
	void SetInjuryFreeRateData(out const int[] InInjuryFreeData);// 0x39c7dac
	void SetIgnoreGliderOneTime(bool bFlag);// 0x39c7d24
	void SetFPPDeafultFov(float InFov);// 0x39c7cac
	void SetFovInTPPSpringArm(float FieldOfView);// 0x39c7c34
	void SetEnableStandalonePickUpTick(bool bEnableTick);// 0x39c7bb4
	void SetBodyIndoor(bool IsInDoor);// 0x39c7b34
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x39c7884
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd);// 0x39c7658
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x39c74fc
	void ServerRPCOnClickInteractiveButton(InteractiveComponentBase* pComponent, int Flag);// 0x39c7400
	void ServerOnApplicationactivated(bool bAppActive);// 0x39c7338
	void ResetCharacter();// 0x39279f0
	void RequestLoadParachuteAnim(bool bHasNewChildComponent);// 0x39c72b0
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x39c71e8
	void RemoveParachuteAnim();// 0x39c71d4
	void ReleaseTrigger(enum Hand);// 0x39c7154
	void ReinitAbilitySystemComponentAvatar();// 0x39c7140
	void RefreshParachuteAnim();// 0x39c7124
	void RefreshBearerFramingTick();// 0x39c7110
	void PushTrigger(enum Hand);// 0x39c7090
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x39c6f3c
	void PostPawnClientRestart();// 0x39c6f20
	void PlayVehicleHitSimpleCharacterCameraShake();// 0x39c6f04
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x4a51734
	void OnTakeDamage(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Causer, out const ExtraDamageInfo ExtraDamageInfo);// 0x39c6d28
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x4a51734
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x4a51734
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x4a51734
	void OnRepParachuteStateDelegate__DelegateSignature();// 0x4a51734
	void OnRep_STPlayerController();// 0x39c6d14
	void OnRep_ParachuteState(enum State);// 0x39c6c8c
	void OnRep_MoveUploadTimeout();// 0x39c6c78
	void OnRep_InteractiveComponentList();// 0x3592f9c
	void OnRep_InjuryFreeData();// 0x39c6c64
	void OnRep_IgnoreGliderOneTime();// 0x39c6c48
	void OnRep_CurrentActivityID();// 0x39c6c34
	void OnRep_bIsPendingCaptived();// 0x39c6c20
	void OnRep_AngleSightStateChanged();// 0x39c6c0c
	void OnRep_ActivityAnimationRepData();// 0x39c6bf8
	void OnRank(int Kills, int Rank);// 0x39c6b3c
	void OnPlayerCurrentWeaponChange(byte CurSlot);// 0x39c6ac4
	void OnParachuteStateChangedDelegate__DelegateSignature(enum LastParachuteState, enum NewParachuteState);// 0x4a51734
	void OnNewWeaponDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x4a51734
	void OnMiniTreeTriggerServerLogicCPP();// 0x39c6aa8
	void OnLockUpdateAroundPickupEnd();// 0x39c6a94
	void OnLoadParachuteAnimCompleted();// 0x39c6a80
	void OnIndoorStateChangeDelegate__DelegateSignature();// 0x4a51734
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x4a51734
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x4a51734
	void OnBPStateCheckIn();// 0x4a51734
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x39c6974
	void OnAllAvatarEquippedSucc();// 0x39c6960
	void NotifyClientParachuteLanded(bool bOK);// 0x39c6898
	bool NeedResetFlyDeviceParachuteAnim();// 0x39c6868
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x39c67e0
	void MiniTreeTriggerServerLogic();// 0x39c6784
	bool IsSwitchCoolingDownFinish();// 0x39c6750
	bool IsSpecifiedItemInCD(int ItemId);// 0x39c66c8
	bool IsLandedWithClientPos();// 0x39c66a0
	bool IsInLaunchSeat();// 0x39c6670
	bool IsGrenadeEmpty();// 0x39c6648
	bool IsBodyIndoorFuc();// 0x39c6628
	bool IsBodyIndoorCheck();// 0x39c6600
	bool IsAllowSyncControllerRotationInActived();// 0x370390c
	bool IsAllowPickupActor();// 0x37c7168
	void InitAirAttackLocatorComponent();// 0x39c65ec
	void HideNightVisionFrame();// 0x391facc
	bool HaveAvailableTombBoxes();// 0x39c65cc
	bool HaveAvailablePickupProps();// 0x39c65ac
	bool HasParachuteAnimLoaded();// 0x39c6584
	void HandleParachuteStateChangedOver__DelegateSignature(enum ParachuteState);// 0x4a51734
	void HandleParachuteStateChanged(enum NewState);// 0x39c6504
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x39c62ec
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x39c60d4
	SpringArmComponent* GetThirdPersonSpringArm();// 0x4a51734
	CameraComponent* GetThirdPersonCamera();// 0x4a51734
	float GetSwimRotateX_Ex();// 0x39c60ac
	int GetSkillIndexByActivityID();// 0x4a51734
	SpringArmComponent* GetScopeSpringArm();// 0x4a51734
	CameraComponent* GetScopeCamera();// 0x4a51734
	bool GetPlayerVisibile();// 0x39c6084
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x39c6004
	STExtraPlayerController* GetPlayerControllerSafety();// 0x391e0a4
	void GetOnVehicleDelegate__DelegateSignature();// 0x4a51734
	SceneComponent* GetMoveableComp();// 0x39c5fdc
	bool GetIsInDoor();// 0x39c5fac
	bool GetIsGunADS();// 0x39c5f7c
	InteractiveComponentBase*[] GetInteractiveComponentList();// 0x39c5f0c
	float GetInjuryFreeRate(int BodyPart);// 0x391d84c
	SpringArmComponent* GetFPPSpringArm();// 0x4a51734
	float GetFPPDeafultFov();// 0x39c5ee4
	CameraComponent* GetFPPCamera();// 0x4a51734
	SpringArmComponent* GetFirstPersonSpringArm();// 0x4a51734
	CameraComponent* GetFirstPersonCamera();// 0x4a51734
	enum[] GetDisallowedStates(int ActivityID);// 0x4a51734
	InteractiveComponentBase* GetCurrentInteractiveComponentBySkillID(int SkillID);// 0x39c5e5c
	InteractiveComponentBase* GetCurrentInteractiveComponent(int SkillID);// 0x39c5dd4
	int GetBuildingAvatarID(int BuildingID);// 0x4a51734
	Vector GetBonePos(FName BoneName, Vector OffsetPos);// 0x39c5cfc
	void FreeFallShakeCam();// 0x39c5ce8
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x39c5c70
	void EnableRegionBaseNetConsideration();// 0x39c5c5c
	void EnablePet(bool Enable);// 0x39c5bd4
	void DynamicCreateComponents();// 0x39c5bc0
	void DisableSimulateAnimUpdateRateOptimization(bool bDisable, float LessThanDistanceSquareCanDisable);// 0x39c5af8
	void DelayStopLandState();// 0x39c5ae4
	void DelayRemoveParachuteAnim();// 0x39c5ad0
	void ClientUserMoveCmdAck(int Sequence);// 0x39c5a50
	void ClientRPCOnOverlapInteractiveComponent(InteractiveComponentBase* pComponent, bool isBeginOverlap);// 0x39c5984
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x39c5880
	void ClientInitParachuteLaunchStatus(Vector Vel);// 0x39c5808
	void ClientCheckCancleFollow(enum InLastState, enum InNewState);// 0x39c574c
	void ClientAckGoodMove(float TimeStamp);// 0x39c56cc
	void ClearHPUI();// 0x3918a5c
	bool CheckServerCanLanded();// 0x39c56a4
	void CheckAttachedOrDetachedVehicle();// 0x39c5690
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x39c5610
	void CallRefreshBPStateCheckIn();// 0x39c55fc
	void AsyncLoadGunCollisionFinish(SoftClassPath GunCollisionPath);// 0x39c5490
	void AnimInstanceCacheParachuteAnimVars(bool bForceRefreshAnim);// 0x39c5410
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x39c5388
	void AdjustServerParachuteLanded(float ClientTimeStamp, int RespawnCount, const Vector Position, const Rotator Rotation);// 0x39c5208
	void AdjustClientParachuteTime(float NeedAdjustTimeconst, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x39c5090

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xd0, Size: 32]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xf0, Size: 32]
	Vector2D AimTargetScreenPos;//[Offset: 0x110, Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	STExtraPlayerController* ExtraPlayerController;//[Offset: 0x11c, Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x120, Size: 4]
	float LastSelectAimEnemyTime;//[Offset: 0x124, Size: 4]
	float LastFindAimEnemyTime;//[Offset: 0x128, Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x12c, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x130, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x134, Size: 4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x138, Size: 4]
	float OPEN_COLLISION_TIME;//[Offset: 0x13c, Size: 4]
	float AIM_CROSSHAIR_CHECK_DELTA;//[Offset: 0x140, Size: 4]
	float LOCK_TARGET_TOLERANCE;//[Offset: 0x144, Size: 4]
	float RANGE_SCALE;//[Offset: 0x148, Size: 4]
	float RANGE_SCALE_MAX;//[Offset: 0x14c, Size: 4]
	float AC_AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x16c, Size: 4]
	float AC_AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x170, Size: 4]
	float AC_DEFAULT_CD_TIME;//[Offset: 0x174, Size: 4]
	float AC_SCOPE_AUTO_AIM_TIME;//[Offset: 0x178, Size: 4]
	float AC_RANGE_SCALE;//[Offset: 0x17c, Size: 4]
	float AC_RANGE_SCALE_MAX;//[Offset: 0x180, Size: 4]
	float AC_AutoAimBreakThroughRatio;//[Offset: 0x184, Size: 4]
	FName[] AC_Bones;//[Offset: 0x188, Size: 12]
	FName[] Bones;//[Offset: 0x194, Size: 12]
	<FName,Vector> BonesOffset;//[Offset: 0x1a0, Size: 60]
	float TargetScreenWidth;//[Offset: 0x1dc, Size: 4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	float AutoAimSensitiveScreenRatio;//[Offset: 0x1e4, Size: 4]
	bool bEnableAimSensitiveOnlyInGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	float AutoAimSensitiveAngle;//[Offset: 0x1ec, Size: 4]
	float AutoAimBreakThroughAngle;//[Offset: 0x1f0, Size: 4]
	float AutoAimBreakThroughRatio;//[Offset: 0x1f4, Size: 4]
	float AutoAimBreakThroughStart;//[Offset: 0x1f8, Size: 4]
	float AutoAimBreakThroughSensitiveScale;//[Offset: 0x1fc, Size: 4]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool bModifyCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	WeaponCrossHairPerformData[] CrossHairDataRifle;//[Offset: 0x3c8, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataPistol;//[Offset: 0x3d4, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataShotGun;//[Offset: 0x3e0, Size: 12]
	void OnUnEquipWeapon();// 0x3b65bb0
	void OnShoot(STExtraWeapon* Weapon);// 0x3b65b38
	void OnEquipWeapon();// 0x3b65b24
	void OnCharacterLeaveState(enum ChangedState);// 0x3b65aac
	void OnCharacterEnterState(enum ChangedState);// 0x3b65a34
	bool IsTriggerBeforeFire();// 0x3b65a0c
	bool IsCurrentWeaponSupportAutoAim();// 0x3b659e4
	void Init(Controller* Controller);// 0x3b6596c
	bool HasEnemyInAutoAimRange(float DeltaTime);// 0x3b658ec
	void GetDataFromWeaponEntity();// 0x3b658d8
	AutoAimEnemyInfo FindEnemyNearScreenCenter(out const Vector RayStart, float Radius, out const FName BoneName, float CollisionTime, bool HitMatchBone);// 0x3b656fc
	bool CheckSmoke(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x3b65570
	bool CheckInAngle(STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x3564f6c
	bool CheckBuffStun();// 0x3b65548
	bool CanEnemeyRaycastReach(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x3b653bc
	bool CanAsynCalcuAimRange();// 0x3b65394
	void BPDrawDebugInfo(out const float[] AutoAimParams);// 0x3b652c0

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xfc, Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0x100, Size: 12]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x10c, Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x110, Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x11c, Size: 12]
	FName ScreenPlane;//[Offset: 0x128, Size: 8]
	bool FollwCameraManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x134, Size: 12]
	delegate OnPlayScreenAppearance;//[Offset: 0x140, Size: 12]
	delegate OnStopScreenAppearance;//[Offset: 0x14c, Size: 12]
	delegate OnPlayScreenParticle;//[Offset: 0x158, Size: 12]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x164, Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x170, Size: 4]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x180, Size: 12]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x3a72ce4
	void StopScreenParticleEffectByName(FString ScreenParticleName);// 0x3a72c28
	void StopScreenParticleEffect(byte EffectType);// 0x3a72bb0
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x3a72aa8
	void StopAllScreenParticleEffect();// 0x3a72a94
	void StopAllScreenAppearance();// 0x3a72a80
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* Tex);// 0x3a7293c
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x3a72880
	bool SetScalarParam(FString AppearanceName, FName ParamName, float ParamValue);// 0x3a7272c
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x3a72600
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x3a72530
	void SetAllAppearanceMeshHiddenInGame(bool bNewHid);// 0x3a724b0
	void PlayScreenParticleWhenCharacterHideInGame(ParticleSystem* PS, out const Transform RelativeTransform, float LifeSeconds);// 0x3a72350
	void PlayScreenParticleEffectByName(FString ScreenParticleName, float InEffectValue);// 0x3a72244
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x3a72188
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x3a72028
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x3a71e48
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x3a71c20
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI, FName InMatInstParamName, CurveFloat* InParamCurve);// 0x3a719f0
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x3a71978
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x3a718b4
	void HandleEffectLoadFinishByName(FString ScreenParticleName);// 0x3a7175c
	void HandleEffectLoadFinish(byte EffectType);// 0x3a716e4
	bool GetScalarParam(FString AppearanceName, FName ParamName, out float ParamValue);// 0x3a71580

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	float LifeSpan;//[Offset: 0xc, Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44, Size: 4]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x50, Size: 48]
	FName MatInstParamName;//[Offset: 0x80, Size: 8]
	CurveFloat* ParamCurve;//[Offset: 0x88, Size: 4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 1]
	FString ScreenParticleEffectName;//[Offset: 0x4, Size: 12]
	ParticleSystem* ParticleEffect;//[Offset: 0x10, Size: 40]
	FName ParticleParamName;//[Offset: 0x38, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x40, Size: 12]
	Vector ScreenParticleEffectLoc;//[Offset: 0x4c, Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x58, Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bNeedReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	float CurrentParamValue;//[Offset: 0x60, Size: 4]
	byte DisableDeviceLevel;//[Offset: 0x64, Size: 1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	FName AppearanceTag;//[Offset: 0x10, Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 4]
	float MatialAlpha;//[Offset: 0x54, Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58, Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c, Size: 4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	float GradualFrag;//[Offset: 0x64, Size: 4]
	float DelayTime;//[Offset: 0x68, Size: 4]

--------------------------------
Class: MultiAppearanceMeshData
	StaticMeshComponent* MultiAppearanceMesh;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x684, Size: 12]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x6643c74
	Vector GetUnscaledBoxExtent();// 0x6643c48
	Vector GetScaledBoxExtent();// 0x6643bf0

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x7b0, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x7e0, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x810, Size: 48]
	void SetActivate(bool _IsActivate);// 0x37abbf0

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xc4, Size: 4]
	int DetectThreshold;//[Offset: 0xc8, Size: 4]
	float FoldFactor;//[Offset: 0xcc, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xd0, Size: 4]
	Vector BoxHalfSize;//[Offset: 0xdc, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe8, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xf4, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0x100, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x10c, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x118, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x11c, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x128, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x134, Size: 12]
	int FoldFactorDelt;//[Offset: 0x140, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x144, Size: 4]
	int TraceDis;//[Offset: 0x148, Size: 4]
	float TickDeltTime;//[Offset: 0x14c, Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x158, Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x37f0494
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x37f035c

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x8c4, Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x368e6bc

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 4]
	FName ParentSocketName;//[Offset: 0x10, Size: 8]
	float TargetArmALength;//[Offset: 0x18, Size: 4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 12]
	Vector TargetOffset;//[Offset: 0x28, Size: 12]
	Vector RelativeLocation;//[Offset: 0x34, Size: 12]
	float ProbeSize;//[Offset: 0x40, Size: 4]
	byte ProbeChannel;//[Offset: 0x44, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0, Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xc4, Size: 4]
	float AALOpenSensibility;//[Offset: 0xc8, Size: 4]
	float OpenAALFOV;//[Offset: 0xcc, Size: 4]
	int MaxDist;//[Offset: 0xd0, Size: 4]
	int minDist;//[Offset: 0xd4, Size: 4]
	int DangerDist;//[Offset: 0xd8, Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xe0, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x108, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x130, Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x134, Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x138, Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x140, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x144, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x148, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x14c, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x150, Size: 4]
	float ShortDis;//[Offset: 0x154, Size: 4]
	byte ChannelType;//[Offset: 0x158, Size: 1]
	Vector TargetLocation;//[Offset: 0x15c, Size: 12]
	void SetItemExsist(bool bExsist);// 0x35710e8
	void SetFinalLocation();// 0x35710d4
	void SetAALFov(bool bOpen);// 0x3571054
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x3570f3c
	void OnFreeArrowLoadFinsh();// 0x3570f28
	void OnCalledActorLoadFinsh(Vector Location);// 0x3570eb8
	float GetTargetDistance();// 0x3570e90
	bool GetAALAvaliable();// 0x3570e68

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x354, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x358, Size: 4]
	int SkillID;//[Offset: 0x35c, Size: 4]
	int IconID;//[Offset: 0x360, Size: 4]
	float AttackAreaRadius;//[Offset: 0x364, Size: 4]

--------------------------------
Class: FanPickerConfigData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float CapsuleRadius;//[Offset: 0x8, Size: 4]
	Vector Offset;//[Offset: 0xc, Size: 12]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsHeadJudgeWithoutOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 12]
	bool bForwardHitAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	enum PickerType;//[Offset: 0x2d, Size: 1]
	enum PickerTargetType;//[Offset: 0x2e, Size: 1]
	int PickerMaxCount;//[Offset: 0x30, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Actor*[] IgnoreTargets;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 4]

--------------------------------
Class: InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnAllowToInteract;//[Offset: 0x150, Size: 16]
	delegate OnAllowToClickButton;//[Offset: 0x160, Size: 16]
	delegate OnInteractionEffective;//[Offset: 0x170, Size: 16]
	delegate OnClientShowInteractiveUI;//[Offset: 0x180, Size: 12]
	delegate OnServerAddOrDeleteComponent;//[Offset: 0x18c, Size: 12]
	delegate OnServerClickInteractiveButton;//[Offset: 0x198, Size: 12]
	delegate OnServerRPCSetOccupied;//[Offset: 0x1a4, Size: 12]
	delegate OnStartCoolDown;//[Offset: 0x1b0, Size: 12]
	delegate OnRepOccupied;//[Offset: 0x1bc, Size: 12]
	delegate OnRepCoolDown;//[Offset: 0x1c8, Size: 12]
	delegate OnRepCurrentCharacter;//[Offset: 0x1d4, Size: 12]
	delegate OnRepCurrentCharacterArray;//[Offset: 0x1e0, Size: 12]
	delegate OnRepEnabled;//[Offset: 0x1ec, Size: 12]
	delegate OnResetSkillAction;//[Offset: 0x1f8, Size: 12]
	delegate OnStartedSkillAction;//[Offset: 0x204, Size: 12]
	delegate OnFinishedSkillAction;//[Offset: 0x210, Size: 12]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x21c, Size: 4]
	PrimitiveComponent*[] PrimitiveComponentArray;//[Offset: 0x220, Size: 12]
	Character* OccupyingCharacter;//[Offset: 0x22c, Size: 8]
	Character*[] OccupyingCharacterArray;//[Offset: 0x234, Size: 12]
	bool bIsCooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	int CoolDownLeftTimeForShow;//[Offset: 0x244, Size: 4]
	bool bOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	FName PrimitiveComponentTag;//[Offset: 0x250, Size: 8]
	int CollisionsNum;//[Offset: 0x258, Size: 4]
	bool bCanInteractMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool bShowedMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	bool bOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	bool bCheckBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 1]
	int CheckBlockCharacterIncrement;//[Offset: 0x260, Size: 4]
	int CheckBlockActorIncrement;//[Offset: 0x264, Size: 4]
	bool bCanInteractInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bCanInteractWhenNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bCanInteractInCarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool bCanInteractInBeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	bool bCanAIInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bAllowWhenCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	int TipsIdWhenClickedInCoolDown;//[Offset: 0x270, Size: 4]
	float CoolDownTime;//[Offset: 0x274, Size: 4]
	float MaxOccupyingTime;//[Offset: 0x278, Size: 4]
	int MaxOccupyingCharacterNum;//[Offset: 0x27c, Size: 4]
	int TLogKey;//[Offset: 0x280, Size: 4]
	bool bTLogCountReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	Volume* CustomTriggerVolume;//[Offset: 0x288, Size: 4]
	int DebugParameter;//[Offset: 0x28c, Size: 4]
	int SkillID;//[Offset: 0x290, Size: 4]
	bool bResetSkillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	float LoadingDuration;//[Offset: 0x298, Size: 4]
	SoftObjectPath LoadingIcon;//[Offset: 0x2a0, Size: 24]
	AnimMontage* FPS_AnimMontage_Stand;//[Offset: 0x2b8, Size: 40]
	AnimMontage* FPS_AnimMontage_Crouch;//[Offset: 0x2e0, Size: 40]
	AnimMontage* FPS_AnimMontage_Prone;//[Offset: 0x308, Size: 40]
	AnimMontage* FPS_AnimMontage_Vehicle;//[Offset: 0x330, Size: 40]
	AnimMontage* TPS_AnimMontage_Stand;//[Offset: 0x358, Size: 40]
	AnimMontage* TPS_AnimMontage_Crouch;//[Offset: 0x380, Size: 40]
	AnimMontage* TPS_AnimMontage_Prone;//[Offset: 0x3a8, Size: 40]
	AnimMontage* TPS_AnimMontage_Vehicle;//[Offset: 0x3d0, Size: 40]
	void StartCoolDown();// 0x373c454
	void SetOccupied(Character* Character, bool bOccupied);// 0x373c390
	void SetEnable(bool bIsEnable);// 0x373c310
	void ServerAddOrDeleteInteractiveComponent(Character* Character, bool bAdd);// 0x373c24c
	void RegisterCollisionsEvent();// 0x373c238
	void OnRep_Occupied();// 0x373c224
	void OnRep_Enabled();// 0x373c210
	void OnRep_CurrentCharacterArray();// 0x373c1fc
	void OnRep_CurrentCharacter();// 0x373c1e8
	void OnRep_CoolDown();// 0x373c1d4
	void OnEndOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex);// 0x373c08c
	void OnBeginOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x373be54
	bool IsOverlappingByCharacter(Character* Character);// 0x373bdd4
	bool IsOccupied();// 0x373bdac
	bool IsInteractionEffective(Character* Character, out enum Reason);// 0x373bcd8
	bool IsEnabled();// 0x373bcb0
	bool IsCoolingDown();// 0x373bc88
	int GetInteractiveCharacterNum();// 0x373bc60
	void GetCurrentOccupyingCharacterArray(out Character*[] OutActors);// 0x373bb94
	Character* GetCurrentOccupyingCharacter();// 0x373bb6c
	int GetCoolDownLeftTimeForShow();// 0x373bb44
	void GetAllInteractiveCharacters(out Character*[] OutActors);// 0x373ba78
	bool AllowToInteract(Character* Character, out enum Reason);// 0x373b9a4
	bool AllowToClickButton(Character* Character, out enum Reason);// 0x373b8d0

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 12]
	int ActivityID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.LuaActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x3f0, Size: 12]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x3fc, Size: 12]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x408, Size: 12]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x418, Size: 12]
	float CurrentScale;//[Offset: 0x424, Size: 4]
	int CurActTime;//[Offset: 0x428, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x42c, Size: 12]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	FName SocketBaseTags;//[Offset: 0x440, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x448, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x44c, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x450, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x454, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x458, Size: 12]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x464, Size: 12]
	int AttachedNumber;//[Offset: 0x474, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x478, Size: 60]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x4b4, Size: 12]
	Vector[] DropOffLocations;//[Offset: 0x4cc, Size: 12]
	enum DropOffLocationType;//[Offset: 0x4d8, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d9, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x4dc, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x4e0, Size: 12]
	byte IsDayTime;//[Offset: 0x4ec, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x4f0, Size: 12]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x4fd, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x500, Size: 12]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool UseDropFixedPosition();// 0x3a50f98
	void StopDancing_Multicast(const Actor*[] Players);// 0x3b5dfc4
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x3b5de88
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x3b5ddd4
	static void SetupMinimapDisplay(UAEPlayerController* PController, out const LoveTreeData[] treeData);// 0x3b5dccc
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x3b5dc54
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x4a51734
	void ResetPCByTime(PlayerController* PlayerController, float cdTime);// 0x3b5db98
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x3b5daf4
	void OnStopDancing(out const Actor*[] Players);// 0x3b5da20
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x3b5d908
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x3b5d888
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x4a51734
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x4a51734
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x3b5d7ec
	void OnRep_SkeletalAnimationSyncData();// 0x3b5d7d8
	void OnRep_ShowRabbitAnim();// 0x3574444
	void OnRep_PawnDoneList();// 0x357447c
	void OnRep_IsDayTime();// 0x3574498
	void OnRep_CurrentScaleCPP();// 0x3b5d7c4
	void OnRep_CurrentScaleBP();// 0x4a51734
	void OnRep_CurrentInteractingPlayerCount();// 0x3b5d770
	void OnRep_CurActTimeCPP();// 0x3b5d71c
	void OnRep_CurActTimeBP();// 0x4a51734
	void OnRep_AttachedNumber();// 0x3b5d6bc
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x3b5d55c
	void OnPlayerNumberChanged(int Number);// 0x4a51734
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x4a51734
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x4a51734
	void OnPCCDCleared(PlayerController* PlayerController);// 0x4a51734
	void OnClientCurrentInteractingPlayerCountChanged();// 0x4a51734
	bool IsDropFixedRelativePositionSetUp();// 0x3b5d52c
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x3b5d4ac
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x3b5d414
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x3b5d290
	bool CanTriggertEvent(Pawn* CurPawn);// 0x4a51734
	int CacheAssociatedSkillIndex();// 0x4a51734

--------------------------------
Class: UAERegionActor.LuaActor.Actor.Object
	byte AutoDormancyType;//[Offset: 0x3a0, Size: 1]
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	enum RegionSize;//[Offset: 0x3a2, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	void ReceivedPlayerActiveRegionsChanged(bool bEnter);// 0x4a51734

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 4]
	Actor* AttachedPlayer;//[Offset: 0xc, Size: 4]
	Vector OffsetLoc;//[Offset: 0x10, Size: 12]
	Rotator OffsetRot;//[Offset: 0x1c, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x28, Size: 4]

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 4]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 4]
	Vector Loc;//[Offset: 0x4, Size: 12]
	float minRate;//[Offset: 0x10, Size: 4]
	float maxRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerTombBox.LuaActor.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x3dc, Size: 12]
	FName TombName;//[Offset: 0x3e8, Size: 8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x3f4, Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x3f8, Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x400, Size: 24]
	int DeadTime;//[Offset: 0x418, Size: 4]
	int BoxLifeSpan;//[Offset: 0x41c, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x424, Size: 12]
	byte AttackRules;//[Offset: 0x430, Size: 1]
	Actor* AttachedActor;//[Offset: 0x434, Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	enum BoxType;//[Offset: 0x439, Size: 1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x43c, Size: 12]
	class PickUpListWrapperActor* CustomPickListWrapperClass;//[Offset: 0x448, Size: 4]
	uint32 OwnerUniqueID;//[Offset: 0x44c, Size: 4]
	int TargetPlayerKey;//[Offset: 0x450, Size: 4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x458, Size: 4]
	float CustomCanPickUpDistance;//[Offset: 0x45c, Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool bAirDropWrapperDynamicRegionNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 1]
	int AvatarID;//[Offset: 0x464, Size: 4]
	Character* BoxOwner;//[Offset: 0x468, Size: 4]
	ProjectileMovementComponent* CacheComp;//[Offset: 0x46c, Size: 4]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x470, Size: 8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x478, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x484, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 1]
	int DropGroupID;//[Offset: 0x48c, Size: 4]
	Vector DropStartLocation;//[Offset: 0x490, Size: 12]
	void SwitchToDeadTombBox();// 0x3574460
	void SetVisible(bool IsVisible);// 0x38003a4
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x380023c
	void RegisterToPlayerPickUpList();// 0x3800228
	void RegisterToCurveAnimComponent();// 0x367c264
	void OpenListenUIEvent(bool bOpen);// 0x4a51734
	void OnRep_VisibilityChange();// 0x3800214
	void OnRep_ItemEffectBoxPickupWrapperActor();// 0x3800200
	void OnRep_ChangeBoxMesh();// 0x3592f9c
	void OnRep_BoxLifeSpan();// 0x38001ec
	void OnRep_AvatarId();// 0x362b88c
	void OnRep_AttachmentReplication();// 0x37d58ec
	void OnRep_AttachedActor();// 0x38001d8
	void OnRefreshItemEffect();// 0x38001c4
	void HideDeadTombApparence();// 0x35738a0
	int GetUniqueInstanceID();// 0x380019c
	int GetTombboxLifespan();// 0x3800174
	PickUpListWrapperActor* GetPickupWrapperActor();// 0x3800158
	void GetDropItemListFromPlayer(out PickUpItemData[] ItemDataList);// 0x38000ac
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x3800080
	int GetAvatarId();// 0x3800058
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x37fff3c
	void GeneratePlayerBackpackWrappers();// 0x37fff28
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x37ffd90
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x37ffc94
	void GenerateBoxWrappersByItemDataList(out const PickUpItemData[] DataList, FName BoxName, bool IsInAirDropBox);// 0x37ffb4c
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxId);// 0x37ff9ec
	int DellGeneratePlayerBackpackWrappers(PickUpListWrapperActor* Wrapper, int MaxItemQuality);// 0x37ff920
	bool CanPickByPawn(Pawn* Pawn);// 0x37ff898
	void AddToAIList(PickUpListWrapperActor* Wrapper);// 0x37ff820

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 4]
	<int> ItemSpecificIDArray;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x6b0, Size: 12]
	enum BoxType;//[Offset: 0x6c8, Size: 1]
	bool bForceNotUsePickUpDataComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	delegate OnSomeonePickItem;//[Offset: 0x6e4, Size: 12]
	float PickUpListDataRelevancyDistanceSqrt;//[Offset: 0x6f4, Size: 4]
	PickUpDataComponent* PickUpDataComponent;//[Offset: 0x6f8, Size: 4]
	uint32[] ForbidPickPlayerKeyList;//[Offset: 0x6fc, Size: 12]
	void SetPickUpDataList(out PickUpItemData[] PickUpItemDatas);// 0x37d099c
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x37d08a0
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x37d07cc
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x4a51734
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey, int TypeSpecificID);// 0x4a51734
	void OnRep_PickUpDataList();// 0x37d07b8
	void OnRep_PickUpDataComponent();// 0x3592f9c
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x4a51734
	void OnBoxEmptyDelegate__DelegateSignature(int BoxId);// 0x4a51734
	PickUpItemData[] GetPickUpDataList();// 0x37d0788
	PickUpItemData[] GetDataList();// 0x37d071c
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x37d05cc

--------------------------------
Class: PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x3ec, Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x3f8, Size: 24]
	int Count;//[Offset: 0x410, Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bAlwaysPickAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417, Size: 1]
	bool bForceDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 1]
	FName OwnerName;//[Offset: 0x420, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x428, Size: 4]
	float OwnerTime;//[Offset: 0x42c, Size: 4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x434, Size: 12]
	Actor* AttachedActor;//[Offset: 0x440, Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x444, Size: 12]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x454, Size: 4]
	float PickUpColdCountDown;//[Offset: 0x458, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x480, Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x488, Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x48c, Size: 4]
	FString ItemValue;//[Offset: 0x490, Size: 12]
	FString ItemCategory;//[Offset: 0x49c, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	int OverridePickupRule;//[Offset: 0x4ac, Size: 4]
	delegate OnWrapperPickedUp;//[Offset: 0x4b4, Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x4c4, Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x4c8, Size: 4]
	int ObjectPoolSize;//[Offset: 0x4cc, Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 1]
	int InBoxEffectDurationTime;//[Offset: 0x4d4, Size: 4]
	FString EffectPath;//[Offset: 0x4d8, Size: 12]
	FString DurationTime;//[Offset: 0x4e4, Size: 12]
	int ItemId;//[Offset: 0x4f0, Size: 4]
	Color DefaultColor;//[Offset: 0x4f4, Size: 4]
	Vector CustomEffectScale;//[Offset: 0x4f8, Size: 12]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x510, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x590, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x610, Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x650, Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x660, Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x678, Size: 4]
	int SpotDataIndex;//[Offset: 0x688, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	int DropGroupID;//[Offset: 0x698, Size: 4]
	Vector DropStartLocation;//[Offset: 0x69c, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x37d60a0
	FString ToDetailString();// 0x37d5fd8
	void ShowMesh(bool bShow);// 0x37d5f58
	void ShowActor();// 0x37d5f44
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x37d5ddc
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x37d5d4c
	void SetDefineID(out const ItemDefineID DID);// 0x37d5cbc
	void SetCountOnServerAfterSpawn(int _Count);// 0x37d5c44
	void SetActorToGround(Actor* IgnoreActor);// 0x37d5b90
	void ServerResetShowActor();// 0x37d5b7c
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x37d5a20
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x37d596c
	void RegisterToCurveAnimComponent();// 0x37d5958
	void PickUpWrapperShow__DelegateSignature();// 0x4a51734
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x4a51734
	void OnWrapperPickedDelegate__DelegateSignature();// 0x4a51734
	void OnSpawned();// 0x367a48c
	void OnRespawnedEvent();// 0x3574444
	void OnRep_PickUpColdCountDown();// 0x37d5944
	void OnRep_OwnerUniqueID();// 0x37d5930
	void OnRep_Owner();// 0x37c5da0
	void OnRep_DropGroundEffectInfo();// 0x37d591c
	void OnRep_DefindID();// 0x37d5908
	void OnRep_Count();// 0x357447c
	void OnRep_AttachmentReplication();// 0x37d58ec
	void OnRep_AttachedActor();// 0x37d58d8
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x37d56c0
	void OnHideActor(bool bHide);// 0x37d5634
	void OnDestroyed();// 0x36cd020
	void OnActorDestroyed();// 0x36c2ccc
	int MoveWrapperContainsAttachment(enum AttachmentAdditionalDataType);// 0x37d55ac
	void ModifyData(int _Count);// 0x37d5534
	void MarkPlayerPlayerInfoByDropped(STExtraBaseCharacter* InDroppedPlayer);// 0x37d54bc
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x37d53f4
	bool LoadDynamicMeshInst(StaticMesh* InStaticMesh);// 0x37d5374
	bool LoadDynamicMesh(FString MeshPath);// 0x37d52b0
	bool LoadDynamicMaterialInst(MaterialInstance* InMaterialInst);// 0x37d5230
	bool LoadDynamicMaterial(FString MaterialPath);// 0x37d516c
	bool IsForbidPick(const STExtraBaseCharacter* Character);// 0x37d50e4
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x37d5000
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x37d4ca8
	int HasWrapperContainsAttachment(enum AttachmentAdditionalDataType);// 0x37d4c20
	StaticMeshComponent* GetPickupMesh();// 0x37d4bf8
	int GetNetGUIDOffsetValue();// 0x37d4bd0
	int GetItemType();// 0x37d4ba0
	uint64 GetItemInstanceId();// 0x37d4b78
	int GetItemId();// 0x37d4b48
	bool GetHasBeenPickedUp();// 0x37d4b18
	PickUpItemData[] GetDataList();// 0x37d071c
	void ForceNetUpdate();// 0x37d4afc
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x37d05cc
	void ColdTimeCountDown();// 0x37d4ae8
	void ClientResetShowActor();// 0x37d4ad4
	bool CheckPickUpDataIsWeapon();// 0x37d4aac
	bool CanBePickedUp(STExtraBaseCharacter* InTryPickUpPlayer);// 0x37d4a24
	void BroadcastResetShowActor();// 0x37d49c8
	void BroadcastDataToAllClients(int Count_New);// 0x37d4914
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x37d4894
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x37d4680

--------------------------------
Class: UAENetActor.LuaActor.Actor.Object
	int iRegionActor;//[Offset: 0x3a0, Size: 4]
	bool bStaticAddNetworkActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	byte AutoDormancyType;//[Offset: 0x3a7, Size: 1]
	void ReceivedPlayerActiveRegionsChanged(bool bEnter);// 0x4a51734

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c, Size: 12]
	int InstanceID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: PickUpDataComponent.ActorComponent.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0xc8, Size: 12]
	void OnRep_PickUpDataList();// 0x37cc9ac

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 12]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x524, Size: 4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a4, Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a4, Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x4a8, Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x4b8, Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x4bc, Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x4c0, Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x4c4, Size: 4]
	float RecreateSocketCooldownTime;//[Offset: 0x514, Size: 4]
	float RecreateSocketMaxTryCount;//[Offset: 0x518, Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ExtraDamageInfo
	int DamageTypeId;//[Offset: 0x0, Size: 4]
	int DamageItemID;//[Offset: 0x4, Size: 4]
	enum DamagePosition;//[Offset: 0x8, Size: 1]
	bool DamageToDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool DamageToDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x2c0, Size: 4]
	Vector SocketOffset;//[Offset: 0x2c4, Size: 12]
	Vector TargetOffset;//[Offset: 0x2d0, Size: 12]
	float ProbeSize;//[Offset: 0x2dc, Size: 4]
	byte ProbeChannel;//[Offset: 0x2e0, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e1, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e1, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e1, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e1, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e1, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e1, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e1, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e1, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e2, Size: 1]
	float CameraLagSpeed;//[Offset: 0x2e4, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x2e8, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x2ec, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x2f0, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x66126b8
	Rotator GetTargetRotation();// 0x3a3c938

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x920, Size: 1088]
	bool CanDumpThisAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	bool bEnableInitializeRecacheCustomAnimAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd63, Size: 1]
	Rotator OwnerAimRotation;//[Offset: 0xd64, Size: 12]
	Rotator C_SightAngledRotOffset;//[Offset: 0xd70, Size: 12]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7c, Size: 1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7d, Size: 1]
	bool C_SkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7e, Size: 1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7f, Size: 1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd81, Size: 1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd82, Size: 1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd83, Size: 1]
	Rotator SwimRotate;//[Offset: 0xd84, Size: 12]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 1]
	float C_HandIKBlendOutParams;//[Offset: 0xd94, Size: 4]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd98, Size: 1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd99, Size: 1]
	float C_SwimSpeed;//[Offset: 0xd9c, Size: 4]
	float C_ProneHandleAlpha;//[Offset: 0xda0, Size: 4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda4, Size: 1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0xda8, Size: 4]
	float LeftHandIKAlpha;//[Offset: 0xdac, Size: 4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	bool C_IsCrouchingOrMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb1, Size: 1]
	bool bAllowRotWithCurStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb2, Size: 1]
	enum C_SeatSpecialType;//[Offset: 0xdb3, Size: 1]
	enum C_EWeaponBoltStatus;//[Offset: 0xdb4, Size: 1]
	int WeaponReloadSlotIndex;//[Offset: 0xdb8, Size: 4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbc, Size: 1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbd, Size: 1]
	bool C_IsMeleeAttacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbe, Size: 1]
	float NeckTurnUILeftAngle;//[Offset: 0xdc0, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0xdc4, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0xdc8, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0xdcc, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0xdd0, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0xdd4, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0xdd8, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0xddc, Size: 4]
	float NeckMapAngleRight;//[Offset: 0xde0, Size: 4]
	float NeckMapAngleUp;//[Offset: 0xde4, Size: 4]
	float NeckMapAngleDown;//[Offset: 0xde8, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xdec, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xdf0, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0xdf4, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0xdf8, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0xdfc, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0xe00, Size: 4]
	float NeckTurnSpeed;//[Offset: 0xe04, Size: 4]
	enum C_ParachuteState;//[Offset: 0xe08, Size: 1]
	Rotator C_HeadRotOffset;//[Offset: 0xe0c, Size: 12]
	Rotator DeltaViewOffset;//[Offset: 0xe18, Size: 12]
	float EnableWeaponModifyAlpha;//[Offset: 0xe24, Size: 4]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe29, Size: 1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2a, Size: 1]
	bool C_IsObstructedAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2b, Size: 1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2c, Size: 1]
	float C_AimOffsetAdditiveAlpha;//[Offset: 0xe30, Size: 4]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe34, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0xe38, Size: 4]
	float C_HoldingShieldAdditive;//[Offset: 0xe3c, Size: 4]
	int[] DisableHandIKAndObstructedSkillID;//[Offset: 0xe40, Size: 12]
	AnimSequence* Anim_DefaultDriveVehiclePose;//[Offset: 0xe4c, Size: 4]
	bool bDefaultDriveVehiclePoseValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe50, Size: 1]
	BlendSpace* C_ObstructedAnim;//[Offset: 0xe54, Size: 4]
	AnimSequence* C_ShieldAddtive;//[Offset: 0xe58, Size: 4]
	AnimMontage* C_RevivalMontage;//[Offset: 0xe5c, Size: 4]
	BlendSpace* C_BSFreeFalling;//[Offset: 0xe60, Size: 4]
	BlendSpace* C_BSFreeFalling_Turn;//[Offset: 0xe64, Size: 4]
	AnimSequence* C_FreeFalling_Shake;//[Offset: 0xe68, Size: 4]
	BlendSpace* C_BSParachute;//[Offset: 0xe6c, Size: 4]
	AnimSequence* C_ParachuteEnter;//[Offset: 0xe70, Size: 4]
	AnimSequence* C_ParachuteLand;//[Offset: 0xe74, Size: 4]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0xe78, Size: 4]
	BlendSpace* SwimAnim;//[Offset: 0xe7c, Size: 4]
	BlendSpace* SwimUpAnim;//[Offset: 0xe80, Size: 4]
	BlendSpace* SwimDownAnim;//[Offset: 0xe84, Size: 4]
	BlendSpace* NearDeathSwimUpAnim;//[Offset: 0xe88, Size: 4]
	BlendSpace* NearDeathSwimDownAnim;//[Offset: 0xe8c, Size: 4]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe91, Size: 1]
	Vector C_MoveDirExt;//[Offset: 0xe94, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0xea0, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xeac, Size: 12]
	Rotator r_C_ComponentRotationRelToControlRotation;//[Offset: 0xeb8, Size: 12]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec4, Size: 1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec5, Size: 1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec6, Size: 1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec7, Size: 1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec9, Size: 1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeca, Size: 1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecb, Size: 1]
	bool b_C_ParachuteState_FreeFallShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecc, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecd, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xece, Size: 1]
	bool b_C_OverrideJumpSM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecf, Size: 1]
	float DefaultLandCDTime;//[Offset: 0xed0, Size: 4]
	float f_Bolt_Aplha;//[Offset: 0xed8, Size: 4]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedc, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedd, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling_OR_HoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xede, Size: 1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xee0, Size: 4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xee4, Size: 4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 1]
	bool b_C_MoveVelocity_SightSlow_High;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee9, Size: 1]
	bool b_C_MoveVelocity_SightSlow_Low;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeea, Size: 1]
	bool b_C_DoingPickup_Or_DoingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeeb, Size: 1]
	bool b_C_IsInFlyDeviceAnimType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeec, Size: 1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0xef0, Size: 12]
	float C_LeanOut_AimAngle;//[Offset: 0xf00, Size: 4]
	AssetPlayerSyncNode* FreeFallSyncNode;//[Offset: 0xf04, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xf0c, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xf10, Size: 4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf14, Size: 1]
	bool bAlwaysLandLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf15, Size: 1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2c, Size: 1]
	bool bEnableStanbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2e, Size: 1]
	bool bEnableArmedStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2f, Size: 1]
	float EnableArmedStandbyAnimPitchMin;//[Offset: 0xf30, Size: 4]
	float EnableArmedStandbyAnimPitchMax;//[Offset: 0xf34, Size: 4]
	float StandbyAnimTimeInterval;//[Offset: 0xf38, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0xf3c, Size: 12]
	int[] ColdGameModeIDList;//[Offset: 0xf48, Size: 12]
	enum[] StandbyGameModeType;//[Offset: 0xf54, Size: 12]
	bool bIsPlayRandomAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 1]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0xf70, Size: 4]
	STExtraBaseCharacter* C_AttachParentCharacter;//[Offset: 0xf74, Size: 4]
	Vector C_AttachParentPawnMoveVelocity;//[Offset: 0xf78, Size: 12]
	bool b_C_CarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf84, Size: 1]
	bool b_C_BeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf85, Size: 1]
	float f_C_CarryBackBSTimeAccumulator;//[Offset: 0xf88, Size: 4]
	float f_C_ParachuteNearDeathBSTimeAccumulator;//[Offset: 0xf8c, Size: 4]
	AnimInstanceContainer* FeatureMoveAnimContainer;//[Offset: 0xf90, Size: 4]
	AnimInstanceContainer* FeatureNearDeathAnimContainer;//[Offset: 0xf94, Size: 4]
	AnimInstanceContainer* FeatureHitAnimContainer;//[Offset: 0xf98, Size: 4]
	bool bEnableAnimMoveContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9c, Size: 1]
	bool bEnableAnimHitContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9d, Size: 1]
	bool bEnableAnimNearDeathContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9e, Size: 1]
	bool bNeedDellFeatureAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9f, Size: 1]
	class AnimInstance* ParachuteAnimDefaultABP;//[Offset: 0xfa0, Size: 4]
	AnimInstanceContainer* ParachuteAnimContainer;//[Offset: 0xfa4, Size: 4]
	bool bSetEnableAnimParachuteContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa8, Size: 1]
	bool bFinalEnableAnimParachuteContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa9, Size: 1]
	float RootAimYaw;//[Offset: 0xfac, Size: 4]
	float SpineTurnLAngleMax;//[Offset: 0xfb4, Size: 4]
	float SpineTurnRAngleMax;//[Offset: 0xfb8, Size: 4]
	void TryToFireFlareGun();// 0x38f8748
	void TryPlayStandbyAnim();// 0x38f8734
	bool ShouldDestoryParachuteAnimAsset();// 0x38f870c
	void SetVelocityZFactor(float NewFactor);// 0x38f8694
	void SetFreeFallSyncNode(AssetPlayerSyncNode* BlendSpaceSyncNode);// 0x38f861c
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x38f8558
	void PostCacheParamList(float DeltaSeconds);// 0x4a51734
	void PlayStandbyAnimAnyWay();// 0x38f853c
	void PendingKillParachuteAnim(Object* InObject);// 0x38f84c4
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x38f8408
	bool IsCastingAnyDisableHandIKAndObstructedSkill();// 0x38f83e0
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x38f8368
	void HandlePlayerPickUp();// 0x38f834c
	void HandlePerspectiveChanged(bool IsFPP);// 0x38f82cc
	FString[] GetAnimUngroupsEntry();// 0x38f8170
	FString[] GetAnimSyncGroupsEntry();// 0x38f8014
	void DumpAllProperties();// 0x38f8000
	void DumpAllAnimInstancesInThisWorld();// 0x3592f9c
	void ClearStandbyAnimState();// 0x38f7fe4
	void ClearParachuteAnimVars();// 0x38f7fd0
	AnimParamList CacheParamList(float DeltaSeconds);// 0x38f7ea8
	void CacheParachuteAnimVars(bool bForceRefresh);// 0x38f7e28
	Object* CacheParachuteAnimVar_Internal(int ParachuteAnimType, class Object TargetClass);// 0x38f7d64
	PlayerAnimList CacheAnimVarList();// 0x38f7c50
	void AsyncAnimStandbyCallback(AnimationAsset* RetAsset);// 0x38f7bd8

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	delegate OnMontageStoppedEvent;//[Offset: 0x388, Size: 12]
	bool bIsFPPAnimInstace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool bLowerArmBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	bool C_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 1]
	bool bDisableTurnPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	bool C_IsSplineMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a7, Size: 1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ae, Size: 1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3af, Size: 1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b3, Size: 1]
	bool b_WeaponState_NEQ_LeftHandSwitchWeaponWhenStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b7, Size: 1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	bool b_C_WithoutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	bool b_C_ChangeMovementAndNotSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	bool b_C_EmptyToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	bool b_C_EmptyToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c6, Size: 1]
	bool b_C_EmptyToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c7, Size: 1]
	bool b_C_StandToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool b_C_StandToCrouchNotMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	bool b_C_StandToProneProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	bool b_C_StandToCrouchOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb, Size: 1]
	bool b_C_StandTo_StandToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool b_C_StandTo_StandToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	bool b_C_CrouchToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ce, Size: 1]
	bool b_C_CrouchToStandNotMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cf, Size: 1]
	bool b_C_CrouchToStandOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	bool b_C_CrouchTo_CrouchToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	bool b_C_CrouchTo_CrouchToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 1]
	bool b_C_ProneToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d3, Size: 1]
	bool b_C_ProneToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool b_C_ProneTo_ProneToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	bool b_C_ProneTo_ProneToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d6, Size: 1]
	bool b_C_ProneToStand_ToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d7, Size: 1]
	bool b_C_StandToProne_ToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool b_C_CrouchToProne_ToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	bool b_C_ProneToCrouch_ToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 1]
	Rotator r_C_ShovelRotator;//[Offset: 0x3dc, Size: 12]
	bool b_C_MoveTurnNoScopeNoPickupNoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool b_C_ShovelScopeAndAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	Vector r_C_AimOffsetTranslation;//[Offset: 0x3ec, Size: 12]
	Rotator r_C_AimOffsetRotator;//[Offset: 0x3f8, Size: 12]
	bool b_C_NearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool b_C_NearDeathOnFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool b_C_NearDeathInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	bool b_C_FreeFallViewOffet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x407, Size: 1]
	bool b_C_FreeFallControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	bool b_C_FreefallingToParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	bool b_C_FreefallingToParachuteEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40a, Size: 1]
	bool b_C_State1_To_NeathDeath_Parchute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40b, Size: 1]
	bool b_C_State1_To_NeathDeath_Enter_Parchute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool b_C_NeathDeath_Parchute_To_State1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	byte C_LODLevel;//[Offset: 0x40e, Size: 1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x410, Size: 4]
	float C_SightSlowBlendStandBaseAlpha;//[Offset: 0x414, Size: 4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x41c, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0x428, Size: 4]
	byte C_PoseType;//[Offset: 0x42c, Size: 1]
	byte C_LastMovementMode;//[Offset: 0x42d, Size: 1]
	byte C_CustomMovementMode;//[Offset: 0x42e, Size: 1]
	byte C_WeaponType;//[Offset: 0x42f, Size: 1]
	byte C_WeaponHoldType;//[Offset: 0x430, Size: 1]
	byte C_WeaponState;//[Offset: 0x431, Size: 1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x434, Size: 4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool b_C_WeaponState_EQ_PreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	enum C_VehicleType;//[Offset: 0x43c, Size: 1]
	bool C_IsShoudlerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x440, Size: 4]
	float C_ReloadAnimAdditiveSpeed;//[Offset: 0x444, Size: 4]
	float C_CharacterYawRotateRate;//[Offset: 0x448, Size: 4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x44c, Size: 4]
	float C_MaxFallingSpeed;//[Offset: 0x450, Size: 4]
	float C_FireAlpha;//[Offset: 0x454, Size: 4]
	float b_WalkAdditiveAlpha;//[Offset: 0x458, Size: 4]
	float f_FallingVelocityZFactor;//[Offset: 0x45c, Size: 4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x460, Size: 4]
	float PeekFrameRate;//[Offset: 0x464, Size: 4]
	float PeekSpeed;//[Offset: 0x468, Size: 4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x46c, Size: 4]
	float C_ForegripAnimParam;//[Offset: 0x470, Size: 4]
	float C_HandleFolderFactor;//[Offset: 0x474, Size: 4]
	float C_HandleFolderAlphaLerp;//[Offset: 0x478, Size: 4]
	float C_HandleFolderAlphaTarget;//[Offset: 0x47c, Size: 4]
	float C_HandleFolderAlphaSpeed;//[Offset: 0x480, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x484, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x488, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x48c, Size: 4]
	Vector C_MoveVelocity;//[Offset: 0x494, Size: 12]
	Vector C_MoveInputVelocity;//[Offset: 0x4a0, Size: 12]
	Vector C_MoveInputVelocityUnit;//[Offset: 0x4ac, Size: 12]
	Vector C_MoveDir;//[Offset: 0x4b8, Size: 12]
	Vector C_HurtDir;//[Offset: 0x4c4, Size: 12]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x4d0, Size: 12]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x4dc, Size: 12]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x4e8, Size: 12]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x4f4, Size: 12]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x500, Size: 12]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x50c, Size: 12]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x518, Size: 12]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x524, Size: 12]
	Rotator C_OwnerRotation;//[Offset: 0x530, Size: 12]
	Rotator C_ControlRotation;//[Offset: 0x53c, Size: 12]
	Rotator C_LastControlRotation;//[Offset: 0x548, Size: 12]
	Rotator C_ViewRotation;//[Offset: 0x554, Size: 12]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x560, Size: 12]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x56c, Size: 12]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x578, Size: 12]
	Rotator RecoilADSRotation_CP;//[Offset: 0x584, Size: 12]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x590, Size: 12]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x59c, Size: 12]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x5a8, Size: 12]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x5b4, Size: 12]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x5c0, Size: 4]
	Rotator OwnerRotation;//[Offset: 0x5c4, Size: 12]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	Rotator ShovelingRotation;//[Offset: 0x5d4, Size: 12]
	float ShovelingRotationoffset;//[Offset: 0x5e0, Size: 4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x5e4, Size: 12]
	Rotator FloorRotation;//[Offset: 0x5f0, Size: 12]
	float FloorRotationPitchSpeed;//[Offset: 0x5fc, Size: 4]
	byte Role;//[Offset: 0x600, Size: 1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x602, Size: 1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x603, Size: 1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 1]
	bool C_ClimbAnimSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 1]
	float C_ClimbAnimTransTime;//[Offset: 0x608, Size: 4]
	float C_ClimbAnimTime_A;//[Offset: 0x60c, Size: 4]
	float C_ClimbAnimTime_B;//[Offset: 0x610, Size: 4]
	AnimParam_Accumulate WeaponAccumulateParam;//[Offset: 0x614, Size: 60]
	float Switch_AimBlendSpace_Time;//[Offset: 0x650, Size: 4]
	float Switch_AimBlendSpace_Counter;//[Offset: 0x654, Size: 4]
	bool bAimBlendSpaceChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x65c, Size: 4]
	AimOffsetBlendSpace* bs_AimBlendSpace_Dest;//[Offset: 0x660, Size: 4]
	AimOffsetBlendSpace* bs_AimBlendSpace_DestLast;//[Offset: 0x664, Size: 4]
	BlendSpace* C_MovementBSCache_Stand;//[Offset: 0x668, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch;//[Offset: 0x66c, Size: 4]
	BlendSpace* C_MovementBSCache_Prone;//[Offset: 0x670, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Crouch;//[Offset: 0x674, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone;//[Offset: 0x678, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand;//[Offset: 0x67c, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone;//[Offset: 0x680, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand;//[Offset: 0x684, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch;//[Offset: 0x688, Size: 4]
	BlendSpace* C_MovementBSCache_Stand_Dest;//[Offset: 0x68c, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch_Dest;//[Offset: 0x690, Size: 4]
	BlendSpace* C_MovementBSCache_Prone_Dest;//[Offset: 0x694, Size: 4]
	<FName,float> C_MovementBS_Stand_SourceTransTime;//[Offset: 0x698, Size: 60]
	<FName,float> C_MovementBS_Stand_SourceTransBackTime;//[Offset: 0x6d4, Size: 60]
	<FName,float> C_MovementBS_Stand_DestTransTime;//[Offset: 0x710, Size: 60]
	<byte,float> C_CustomMovementBlendTimeMap;//[Offset: 0x74c, Size: 60]
	AnimSequence* C_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0x788, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0x78c, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0x790, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0x794, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0x798, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0x79c, Size: 4]
	float StandSwitchToPronePoseAnimDuration;//[Offset: 0x7a0, Size: 4]
	float StandSwitchFromPronePoseAnimDuration;//[Offset: 0x7a4, Size: 4]
	float CrouchSwitchToPronePoseAnimDuration;//[Offset: 0x7a8, Size: 4]
	float CrouchSwitchFromPronePoseAnimDuration;//[Offset: 0x7ac, Size: 4]
	float StandSwitchToPronePoseAnimDelay;//[Offset: 0x7b0, Size: 4]
	float StandSwitchFromPronePoseAnimDelay;//[Offset: 0x7b4, Size: 4]
	float CrouchSwitchToPronePoseAnimDelay;//[Offset: 0x7b8, Size: 4]
	float CrouchSwitchFromPronePoseAnimDelay;//[Offset: 0x7bc, Size: 4]
	float SwitchingPoseTimer;//[Offset: 0x7c0, Size: 4]
	float SwitchingPoseTimerInternal;//[Offset: 0x7c4, Size: 4]
	float SwitchPoseAnimStartPosition;//[Offset: 0x7c8, Size: 4]
	float C_CustomMovementBlendTime;//[Offset: 0x7cc, Size: 4]
	byte C_InterruptCachePose;//[Offset: 0x7d0, Size: 1]
	bool C_UseInterruptPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d1, Size: 1]
	float InterruptPoseInternal;//[Offset: 0x7d4, Size: 4]
	bool C_IsSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	byte C_RecoverCharPose;//[Offset: 0x7d9, Size: 1]
	float SwitchPoseTransTime;//[Offset: 0x7e4, Size: 4]
	float SwitchPoseTransBackTime;//[Offset: 0x7e8, Size: 4]
	bool C_IsPlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ec, Size: 1]
	bool C_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ed, Size: 1]
	bool b_C_MoveVelocity_Turning_NotScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 1]
	AnimSequence* C_IdleAddtive;//[Offset: 0x7fc, Size: 4]
	AnimSequence* C_ShoulderIdleAddtive;//[Offset: 0x800, Size: 4]
	BlendSpace1D* C_FallingBS;//[Offset: 0x804, Size: 4]
	AnimSequence* C_JumpStart;//[Offset: 0x808, Size: 4]
	AnimSequence* C_LandLight;//[Offset: 0x80c, Size: 4]
	AnimSequence* C_LandHeavy;//[Offset: 0x810, Size: 4]
	AnimSequence* GrenadeJumpHigh;//[Offset: 0x814, Size: 4]
	AnimSequence* GrenadeJumpLow;//[Offset: 0x818, Size: 4]
	AnimSequence* GrenadeFallHigh;//[Offset: 0x81c, Size: 4]
	AnimSequence* GrenadeFallLow;//[Offset: 0x820, Size: 4]
	BlendSpace1D* MovementUpBodyOverride;//[Offset: 0x824, Size: 4]
	BlendSpace* MovementLowerBodyOverride;//[Offset: 0x828, Size: 4]
	AnimSequence* C_TurnAnim;//[Offset: 0x82c, Size: 4]
	AnimSequence* C_StandScopeBlendAnim;//[Offset: 0x830, Size: 4]
	AnimSequence* C_CrouchScopeBlendAnim;//[Offset: 0x834, Size: 4]
	AnimSequence* C_ProneScopeBlendAnim;//[Offset: 0x838, Size: 4]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x83c, Size: 4]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x840, Size: 4]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x844, Size: 4]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x848, Size: 4]
	AnimMontage* C_MontageRescue;//[Offset: 0x84c, Size: 4]
	AnimMontage* C_MontageRescueSelf;//[Offset: 0x850, Size: 4]
	AnimMontage* C_MontageDead;//[Offset: 0x854, Size: 4]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x858, Size: 4]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x85c, Size: 4]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x860, Size: 4]
	AnimSequence* C_ShovelPhaseEnter;//[Offset: 0x864, Size: 4]
	AnimSequence* C_ShovePhaseShoveling;//[Offset: 0x868, Size: 4]
	AnimSequence* C_ShovelPhaseLeave;//[Offset: 0x86c, Size: 4]
	AnimSequence* C_Climb_FrameAnim_A;//[Offset: 0x870, Size: 4]
	AnimSequence* C_Climb_FrameAnim_B;//[Offset: 0x874, Size: 4]
	BlendSpace* C_FireBalloonDriverBS;//[Offset: 0x878, Size: 4]
	Vector C_FireBalloonMoveVelocity;//[Offset: 0x87c, Size: 12]
	bool bInMovableEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	float MovableEmoteSpeed;//[Offset: 0x88c, Size: 4]
	enum AnimInstanceType;//[Offset: 0x890, Size: 1]
	bool MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 1]
	bool bUseMotionLowerBodyOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x892, Size: 1]
	enum CharMotionBlendType;//[Offset: 0x893, Size: 1]
	float MovementUpBodyBlentWeight;//[Offset: 0x894, Size: 4]
	bool MovementLowerBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 1]
	float MovementLowerBodyBlentWeight;//[Offset: 0x89c, Size: 4]
	bool C_bSkeletonMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	bool C_IsQuickBow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a1, Size: 1]
	byte LastPoseTypeCache;//[Offset: 0x8a2, Size: 1]
	int ForceLODLevel;//[Offset: 0x8b0, Size: 4]
	float LeaveStateTimerInternal;//[Offset: 0x8d0, Size: 4]
	bool bEnableSplineMoveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 1]
	bool bShouldHandleAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	class AnimInstance* VehicleAnimDefaultABP;//[Offset: 0x8e4, Size: 4]
	AnimInstanceContainer* VehicleAnimContainer;//[Offset: 0x8e8, Size: 4]
	bool bEnableVehicleAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec, Size: 1]
	class AnimInstance* LocomotionAnimDefaultABP;//[Offset: 0x8f0, Size: 4]
	class AnimInstance* LocomotionAnimABP;//[Offset: 0x8f4, Size: 4]
	AnimInstanceContainer* LocomotionAnimContainer;//[Offset: 0x8f8, Size: 4]
	bool bEnableLocomotionAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fc, Size: 1]
	bool bEnableSkillAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fd, Size: 1]
	AnimInstanceContainer* SkillAnimContainer;//[Offset: 0x900, Size: 4]
	bool bShouldUseSkillContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 1]
	class AnimInstance* SwimAnimDefaultABP;//[Offset: 0x908, Size: 4]
	AnimInstanceContainer* SwimAnimContainer;//[Offset: 0x90c, Size: 4]
	bool bEnableSwimAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	static FName Util_GetAnimMontageSlotName(AnimMontage* Montage, int Index);// 0x38fe1b4
	void UpdateVehicleAnimContainer();// 0x38fe1a0
	void UpdateSwimAnimContainer();// 0x38fe184
	void UpdateSkillAnimContainer();// 0x38fe170
	bool UpdateLocomotionContainer();// 0x38fe148
	void UpdateAnimContainer(float DeltaTime);// 0x38fe0d0
	void UnbindSkillStuffDelegate();// 0x38fe0bc
	void SwitchingPoseFinishCallback();// 0x38fe0a8
	void SetInterruptPose(bool bUseInterrupPose, byte InterruptPose);// 0x38fdfe0
	void SetClimbAnimation(AnimSequence* AnimSequence, bool bFlag);// 0x38fdf1c
	void ResetVehicleAnimContainer();// 0x38fdf00
	void ResetSwimAnimContainer();// 0x38fdee4
	void ResetSkillAnimContainer();// 0x38fdec8
	void ResetLocomotionAnimContainer();// 0x38fdeac
	void RefreshPeekState();// 0x38fde98
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x38fde18
	void PlayPostReloadWeaponAnimationOld();// 0x38fde04
	void PlayPostReloadWeaponAnimation(int RemainReloadTimes);// 0x38fdd8c
	void PlayPostFillGasWeaponAnimation();// 0x38fdd78
	void PlayPlayerDeadAnimation();// 0x35869b0
	void PlayAnimationByEventType(byte Type, float SpeedScale);// 0x38fdcbc
	void OnUninitializeAnimContainer();// 0x38fdca8
	void OnRespawned_BP();// 0x38fdc8c
	void OnRecycled_BP();// 0x38fdc70
	void OnInitializeAnimContainer();// 0x38fdc5c
	void OnHandleSkillStarted(Character* OwnerCharacter, int SkillID);// 0x38fdb98
	void OnHandleSkillEnd(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x38fda90
	void LeaveStateCallback();// 0x38fda7c
	bool IsAssetSkeletonMatch(AnimationAsset* CheckAnimAsset, SkeletalMeshComponent* MeshComp);// 0x38fd9b8
	void HandleStateLeave(enum LeaveState);// 0x38fd940
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x38fd8c0
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x38fd7fc
	void HandlePlayerPickUp();// 0x38f834c
	void HandlePlayerEnterRescueState(bool bBeginRescueing, bool bSelfRescue);// 0x38fd724
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x4a51734
	void HandlePlayerAnimMontagePlayExtraDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos, bool bOnlyJumpToSectionWhilePlaying, FName IgnoreStopSection);// 0x38fd4d8
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x38fd330
	void HandleOwnerAnimEvent(FName EventMsg);// 0x38fd2b0
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime, const byte InLoopCount, const float InStartPos, const float LoopStartPos);// 0x38fd02c
	byte GetRole();// 0x38fd004
	FName[] GetPlayingMontageSlot();// 0x38fcf44
	FName GetPlayingMontageSection();// 0x38fcf04
	AnimMontage* GetPlayingMontage();// 0x38fcedc
	void ForceTriggerNotifyEndEvent();// 0x38fcec8
	void FillShovelAnimation(out const PlayerAnimList AnimList);// 0x38fccec
	void EnableAnimFlag(enum PlayFlag);// 0x38fcc74
	void DisableAnimFlag(enum PlayFlag);// 0x38fcbfc
	void DelayLeavaSplineMoveAnim();// 0x38fcbe8
	void ClearStandbyAnimState();// 0x38f7fe4
	bool CanUseSkillContainer();// 0x38fcbc0
	void BindSkillStuffDelegate();// 0x38fcbac

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x378, Size: 4]
	FString LuaFilePath;//[Offset: 0x37c, Size: 12]
	void OnNotifyMontagePlayingEvent_BluePrint(FName NotifyName);// 0x4a51734
	void OnNotifyMontagePlayingEvent(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointPayload);// 0x3a6cbe8
	void HandlePlayerAnimMontagePlayExtraDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos, bool bOnlyJumpToSectionWhilePlaying, FName IgnoreStopSection);// 0x38fd4d8
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x38fd330
	void HandleOwnerAnimEvent(FName EventMsg);// 0x38fd2b0
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime, const byte InLoopCount, const float InStartPos, const float LoopStartPos);// 0x38fd02c

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: AnimParam_Accumulate
	AnimSequence* AccumulateAnimSeq;//[Offset: 0x0, Size: 4]
	AnimSequence* AccumulateAnimSeqNew;//[Offset: 0x4, Size: 4]
	bool bAccumulateAnimSeqChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float AccumulateAnimSeqChangeTimer;//[Offset: 0xc, Size: 4]
	float AccumulateAnimSeqChangeTimerCounter;//[Offset: 0x10, Size: 4]
	float AccumulateRealtime;//[Offset: 0x14, Size: 4]
	bool bAccumulateRealTimeMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float AccumulateRate;//[Offset: 0x1c, Size: 4]
	bool bAccumulateRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAccumulateRateMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bHasAccumulateRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	float BlendInSpeed;//[Offset: 0x24, Size: 4]
	float BlendOutSpeed;//[Offset: 0x28, Size: 4]
	float BlendOutRealSpeed;//[Offset: 0x2c, Size: 4]
	float BlendOutDelayTime;//[Offset: 0x30, Size: 4]
	float BlendOutDelayTime_Counter;//[Offset: 0x34, Size: 4]
	float CacheAccumulateRate;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf9, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float AnimLength;//[Offset: 0x64, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0x84, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88, Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94, Size: 4]
	BlendSample[] SampleData;//[Offset: 0x98, Size: 12]
	EditorElement[] GridSamples;//[Offset: 0xa4, Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0, Size: 24]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 4]
	Vector SampleValue;//[Offset: 0x4, Size: 12]
	float RateScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 12]
	float Min;//[Offset: 0xc, Size: 4]
	float Max;//[Offset: 0x10, Size: 4]
	int GridNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]

--------------------------------
Class: AnimInstanceContainer.Object
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x1c, Size: 4]
	<class AnimInstance,AnimInstance*> CacheAnimInstanceMap;//[Offset: 0x20, Size: 60]
	class AnimInstance* TargetClass;//[Offset: 0x5c, Size: 4]
	AnimInstance* TargetAnimInstance;//[Offset: 0x60, Size: 4]
	AnimInstance* SetTargetAnimInstance(class AnimInstance InstanceClass);// 0x661f678
	bool RemoveCacheAnimInstance(class AnimInstance InstanceClass);// 0x661f5f8
	bool IsRunningTargetAnimInstance(out class AnimInstance InstanceClass);// 0x661f568
	bool IsReceiveInPoseNode();// 0x661f540
	AnimInstance* GetTargetInstance(bool bCheckPendingKill);// 0x661f4b8
	void ClearCacheAnimInstance();// 0x661f4a4
	bool AddCacheAnimInstance(class AnimInstance InstanceClass);// 0x661f424

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4, Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc, Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14, Size: 8]
	PlayerAnimData FillGasAnim;//[Offset: 0x1c, Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x24, Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x2c, Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x34, Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x3c, Size: 8]
	PlayerAnimData FireAccAnim;//[Offset: 0x44, Size: 8]
	PlayerAnimData PostFireAnim;//[Offset: 0x4c, Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x54, Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x5c, Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x64, Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x6c, Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x74, Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x7c, Size: 8]
	PlayerAnimData ShoudlerWeaponIdle;//[Offset: 0x84, Size: 8]
	PlayerAnimData BeCarriedBackMoveAnim;//[Offset: 0x8c, Size: 8]
	PlayerAnimData BeCarriedBackPickUpAnim;//[Offset: 0x94, Size: 8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x9c, Size: 12]
	PlayerAnimData[] ShovelAnimList;//[Offset: 0xa8, Size: 12]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0xb4, Size: 12]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 4]
	float rate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x420, Size: 4]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x424, Size: 4]

--------------------------------
Class: AnimInstanceProxy
	AnimInstance*[] SubAnimInstances;//[Offset: 0x414, Size: 12]

--------------------------------
Class: AssetPlayerSyncNode.Object
	<FName,float> SyncGroupInternalTimerMap;//[Offset: 0x1c, Size: 60]
	void SetGroupTimeAccumulate(FName GroupName, float InternalTime);// 0x3596a10
	float GetOrSetGroupTimeAccumulate_AnyThread(bool bIsLeader, FName GroupName, float InternalTime);// 0x35968f4
	float GetGroupTimeAccumulate(FName GroupName);// 0x3596874

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	Vector Velocity;//[Offset: 0x4, Size: 12]
	Vector movedir;//[Offset: 0x10, Size: 12]
	byte MovementMode;//[Offset: 0x1c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x1d, Size: 1]
	byte PoseType;//[Offset: 0x1e, Size: 1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 12]
	byte WeaponType;//[Offset: 0x38, Size: 1]
	byte WeaponHoldType;//[Offset: 0x39, Size: 1]
	byte WeaponState;//[Offset: 0x3a, Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	byte SightType;//[Offset: 0x3d, Size: 1]
	float RecoilKickADS;//[Offset: 0x40, Size: 4]
	float ForegripParam;//[Offset: 0x44, Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	Vector HurtDir;//[Offset: 0xe4, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	byte JumpType;//[Offset: 0xf2, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	float HandleFolderFactor;//[Offset: 0xf8, Size: 4]
	float CharacterYawRotateRate;//[Offset: 0xfc, Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bCarryBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	bool bParachuteNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 1]
	float CarryBlendTimeAccumulator;//[Offset: 0x104, Size: 4]
	float ParachuteNearDeathBlendTimeAccumulator;//[Offset: 0x108, Size: 4]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bAlwaysLandLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]

--------------------------------
Class: AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0x104, Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x108, Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x10c, Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x110, Size: 4]

--------------------------------
Class: AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	<int,int> CanBuildActorNums;//[Offset: 0xec, Size: 60]
	float TotalCD;//[Offset: 0x128, Size: 4]
	float SoloCD;//[Offset: 0x12c, Size: 4]

--------------------------------
Class: AIFeatureInfo
	float HP;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]
	float TakeDamageScale;//[Offset: 0x8, Size: 4]
	int DropID;//[Offset: 0xc, Size: 4]
	float[] HitRates;//[Offset: 0x10, Size: 12]
	<int,float> ThrownUsingProbability;//[Offset: 0x1c, Size: 60]
	<float,float> EnemyHpHitRateMap;//[Offset: 0x58, Size: 60]
	<float,float> EnemyHpDamageRateMap;//[Offset: 0x94, Size: 60]
	<float,float> ReviveEnemyHpDamageRateMap;//[Offset: 0xd0, Size: 60]
	bool bNeedNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bHasDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	Vector2D MissOnPurposeTimeRange;//[Offset: 0x110, Size: 8]
	Vector2D OutViewMissOnPurposeTimeRange;//[Offset: 0x118, Size: 8]
	float MissOnPurposeCD;//[Offset: 0x120, Size: 4]
	float MissOnPurposeResetTime;//[Offset: 0x124, Size: 4]
	float MissOnPurposeHitRate;//[Offset: 0x128, Size: 4]
	float NearDeathTargetStopFireTime;//[Offset: 0x12c, Size: 4]
	float NearDeathTargetFixedHitRate;//[Offset: 0x130, Size: 4]
	bool bDoMissOnPurposeWhenNearDeathToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	float NearDeathTargetFixedDamageRate;//[Offset: 0x138, Size: 4]
	float SenseRadiusScale;//[Offset: 0x13c, Size: 4]

--------------------------------
Class: AIEquipSpawnItem
	enum itemType;//[Offset: 0x0, Size: 1]
	int ItemSpecificID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int MaxCount;//[Offset: 0xc, Size: 4]
	Vector2D ExtraConfigValue;//[Offset: 0x10, Size: 8]

--------------------------------
Class: AIActingItem
	float StartSeconds;//[Offset: 0x0, Size: 4]
	float EndSeconds;//[Offset: 0x4, Size: 4]
	float DeadPercent;//[Offset: 0x8, Size: 4]
	int PlayerNumScale;//[Offset: 0xc, Size: 4]
	bool IsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int[] WeaponIdList;//[Offset: 0x14, Size: 12]
	int FinalRestBotNum;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DeliveryCondition
	DeliveryConditionCheck* CheckCnd;//[Offset: 0x0, Size: 4]

--------------------------------
Class: DeliveryConditionCheck.Object
	STExtraBaseCharacter* TargetPawn;//[Offset: 0x1c, Size: 4]
	bool CheckDeliveryForBP(STExtraBaseCharacter* InTargerPawn);// 0x3574a6c
	bool CheckDelivery(STExtraBaseCharacter* InTargetPawn);// 0x3657288

--------------------------------
Class: SpecialAIDeliveryNumContainer
	int TeammateNum;//[Offset: 0x0, Size: 4]
	SpecialAIDeliveryNum[] DeliverNumCfg;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpecialAIDeliveryNum
	int DeliveryNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: HotValueAttenuation
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HotValueScale
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float SpecialRatingDamageScale;//[Offset: 0x4, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x8, Size: 4]
	float SpecialFiringAccuracyRadius;//[Offset: 0xc, Size: 4]
	int AIFeedLimit;//[Offset: 0x10, Size: 4]
	float SectionRightValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 12]
	float RightRatingSection;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DeliveryItem
	int percent;//[Offset: 0x0, Size: 4]
	int DeliveryNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIAttackAnimalRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x310, Size: 4]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bFixMayBeInOcean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	FName AvoidObjectTag;//[Offset: 0x318, Size: 8]
	Vector2D PointInsidePolygon;//[Offset: 0x320, Size: 8]
	Vector2D[] PolygonPointArray;//[Offset: 0x328, Size: 12]
	bool IsInWater(Vector Position);// 0x3678358
	Vector GetRandomPointInArea(Vector Origin, float Radius, bool bTry);// 0x367822c

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x14c, Size: 12]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	bool bUseDIYCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 1]
	int CustomBeginIndex;//[Offset: 0x15c, Size: 4]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x164, Size: 12]
	float DestinyThreshold;//[Offset: 0x170, Size: 4]
	int RoundNum;//[Offset: 0x174, Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	Vector2D LowProbCenter;//[Offset: 0x17c, Size: 8]
	float LowProbCenterRadius;//[Offset: 0x184, Size: 4]
	float LowProbRatio;//[Offset: 0x188, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	class Actor* InnerCircleClass;//[Offset: 0x190, Size: 4]
	float TimeForForbidMakePain;//[Offset: 0x194, Size: 4]
	Actor* InnerCircle;//[Offset: 0x198, Size: 4]
	Vector InnerCircleInfo;//[Offset: 0x19c, Size: 12]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	Vector BlueCircle;//[Offset: 0x1d4, Size: 12]
	Vector WhiteCircle;//[Offset: 0x1e0, Size: 12]
	int CurrentIndex;//[Offset: 0x1ec, Size: 4]
	Actor* ContainActor;//[Offset: 0x1f0, Size: 4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	CirCleCfg[] TempCircleConfigs;//[Offset: 0x264, Size: 12]
	delegate OnCircleBegin;//[Offset: 0x2b4, Size: 12]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x2c0, Size: 12]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x2cc, Size: 12]
	delegate OnCircleInfoChanged;//[Offset: 0x2d8, Size: 12]
	delegate OnWaveEnded;//[Offset: 0x2e4, Size: 12]
	delegate OnCircleEnded;//[Offset: 0x2f0, Size: 12]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x2fc, Size: 4]
	bool bPreCalculateFirstWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	delegate OnFinishedPreCalculateFirstWhiteCircle;//[Offset: 0x304, Size: 12]
	bool WhitCircleIsOutOfBlueCircle();// 0x3674208
	void StartCircleFromBegin();// 0x36741f4
	void SetGMCicleTime(float cdTime, float LastTime);// 0x36740f8
	void SetContainActor(Actor* InContainActor);// 0x3674080
	void RetriveGetCircleInfo(out GetCircleInfo CurInfo);// 0x3673fb8
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x3673ed8
	void PreCalculateCircle(int CircleIndex);// 0x3673e60
	void OverrideDestinyChanceByIndex(bool bOverride, float InChance, int CircleIndex);// 0x3673d54
	void OverrideDestinyChance(bool bOverride, float InChance);// 0x3673c8c
	void MakePain(Actor* _actor, float _desireDamage);// 0x3673bd0
	void MakeDesiredCircle(Vector circleInfo, int CircleType);// 0x3673b18
	bool MakeCurrentWhiteCircle(int InCircleIndex);// 0x36621f0
	bool IsUseCustomWhiteCircle();// 0x3673af0
	bool IsPositionInBlueCircle(out const Vector Position);// 0x3673a64
	bool IsInWhiteCircle(out const Vector Location);// 0x36739b4
	bool IsInBlueCircle(Actor* _actor);// 0x3673934
	void InitCircleTimer();// 0x3673918
	bool HasDoubleCircleEnabled();// 0x36738fc
	void GMBeginCircleWithCustomParam(int CurIndex, float PosX, float PosY, float PosZ, float DelayTime, float LastTime, float SafeZoneTime, float BlueCircleRadius);// 0x3673694
	void GMBeginCircle(int CurIndex, float PosX, float PosY, float PosZ, bool bUseSamePoint);// 0x36734fc
	Vector GetWhiteCircle(int InCircleIndex);// 0x367346c
	Vector[] GetPlayerPositionByDestiny(int CircleIndex);// 0x367335c
	Vector GetOverrideVictimPos(Actor* Victim);// 0x36732cc
	float GetNeedTotalTimeToCircleIndex(int CircleIndex);// 0x367324c
	Vector GetInnerCircleInfo();// 0x3673228
	Vector GetFirstWhiteCircle();// 0x36731e0
	Vector GetCustomWhiteCircleConfigByIndex(int CircleIndex, int RandomIndex);// 0x367310c
	Vector GetCustomBlueCircleConfigByIndex(int CircleIndex);// 0x367307c
	Vector GetCurrentWhiteCircle();// 0x3673058
	int GetCurrentCircleIndex();// 0x3673030
	Vector GetCurrentBlueCircle();// 0x367300c
	int GetCircleIndexByTime(float TimeSeconds);// 0x3672f8c
	bool CalculateWhiteCircleByDestiny(int CircleIndex, bool bInDestiny, out Vector[] Positions);// 0x3672e1c
	float BlueToWhiteLeftTime(bool bConsiderSafeZoneAppeartime);// 0x3672d94
	void ApplyCircleOffset(Vector InOffset);// 0x3672d24

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xc8, Size: 12]
	FString TimerName;//[Offset: 0xd4, Size: 12]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0, Size: 4]
	float DelayTime;//[Offset: 0x4, Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 4]
	bool bIsCircleWarningUseFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float[] BlueCirclePreWarning;//[Offset: 0x14, Size: 12]
	CircleWarningConfig[] BlueCirclePreWarningWithFilter;//[Offset: 0x20, Size: 12]
	float LastTime;//[Offset: 0x2c, Size: 4]
	float Pain;//[Offset: 0x30, Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector2D bluepoint;//[Offset: 0x38, Size: 8]
	float blueradius;//[Offset: 0x40, Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bUseCustomWhiteStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	Vector[] Whitepoints;//[Offset: 0x48, Size: 12]
	float whiteradius;//[Offset: 0x54, Size: 4]
	float Alpha;//[Offset: 0x58, Size: 4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float DestinyChance;//[Offset: 0x60, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x68, Size: 4]
	float ExtraRadius;//[Offset: 0x6c, Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float DamageMagnifierRange;//[Offset: 0x74, Size: 4]
	float DamageMagnifier;//[Offset: 0x78, Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x7c, Size: 4]
	Vector[] AvoidPoints;//[Offset: 0x80, Size: 12]
	float EdgeDistance;//[Offset: 0x8c, Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]

--------------------------------
Class: CircleWarningConfig
	float WarningTime;//[Offset: 0x0, Size: 4]
	enum WarningState;//[Offset: 0x4, Size: 1]

--------------------------------
Class: RegisterTimer
	int waveIndex;//[Offset: 0x0, Size: 4]
	float[] Times;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GetCircleInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	int CurrentCircleIndex;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	enum AirAttackStatus;//[Offset: 0x44, Size: 1]
	Vector AirAttackArea;//[Offset: 0x48, Size: 12]
	int AirAttackWave;//[Offset: 0x54, Size: 4]
	int BossCountDown;//[Offset: 0x58, Size: 4]
	Vector BossBornPos;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: AIActingBPAssit.Object
	bool IsSmokeGrenadeActive(Actor* pSmokeGrenade);// 0x4a51734
	bool IsGrenadeHasBeenThrowedOut(Actor* pGrenade);// 0x4a51734
	float GetRealTimeSeconds();// 0x355c414

--------------------------------
Class: SpecifyDamageInfo
	bool bResultHealthStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int DamageType;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0, Size: 4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x4, Size: 12]
	AIEquipSpawnItem[] AIMustPickUpItemList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
	int FirstAddBulletID;//[Offset: 0x108, Size: 4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0x10c, Size: 12]
	delegate OnFirstBulletChangeDelegate;//[Offset: 0x118, Size: 12]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0x128, Size: 24]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x140, Size: 4]
	void SetFirstAddBullet(int BulletID);// 0x37950f4
	void SetBulletIDListInClip(out BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x3794f4c
	void SetBulletAttr(int ReloadBulletID, float Damage);// 0x3794e90
	void RemoveBulletIDListInClip(int RemoveNum, out BulletInClip CurBulletInClip, bool IsRevert);// 0x3794d30
	void RefreshBulletIDListInClip(int Count, out BulletInClip CurBulletInClip);// 0x3794c20
	void PreSetBulletIDListInClip(out BulletInClip NewBulletInClip, out BulletInClip CurBulletInClip);// 0x3794abc
	void OnRep_FirstAddBulletID();// 0x3794aa0
	void OnFirstBulletChangeDelegate__DelegateSignature();// 0x4a51734
	bool HasMultiBullet();// 0x3794a78
	int GetShootBulletType();// 0x3794a50
	int GetNextCostBulletIDFromBackpack(BackpackComponent* InBackPack);// 0x37949d0
	int GetNextBulletID();// 0x37949a8
	BackpackComponent* GetBackpackComponent();// 0x3794980
	float GetAdjustBulletMomentum();// 0x3794958
	float GetAdjustBulletDamage();// 0x3794930
	int CostBulletFromBackpack(BackpackComponent* BackPack, int WantReloadNum, out BulletInWeapon[] CostBulletList);// 0x37947d4
	void AddBulletIDListInClip(BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x37945a0

--------------------------------
Class: SupportUpBullet
	int UpBulletID;//[Offset: 0x0, Size: 4]
	int DefaultPriority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x108, Size: 4]
	float BulletSpeed;//[Offset: 0x10c, Size: 4]
	int CurBulletNum;//[Offset: 0x110, Size: 4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	int MaxBulletNumInClip;//[Offset: 0x118, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x120, Size: 24]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x13c, Size: 12]
	class CameraShake* ShootCameraShake;//[Offset: 0x148, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x14c, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x150, Size: 4]
	float CameraShakFalloff;//[Offset: 0x154, Size: 4]
	AkAudioEvent* ShootSound;//[Offset: 0x158, Size: 4]
	float ReloadTime;//[Offset: 0x15c, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x160, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x164, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x168, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x16c, Size: 4]
	BackpackComponent* OwnerBackPack;//[Offset: 0x170, Size: 4]
	void ShootGrenadeBullet(Vector StartLoc, Rotator StartRot, uint32 ShootID);// 0x371ff54
	void SetUseGreanadeLaunch(bool bIsUse);// 0x371fed4
	void RemoveBullet(int RemoveNum);// 0x371fe5c
	int ReloadGrenadeLaunch();// 0x371fe34
	void OnRep_UseGrenadeLaunchState();// 0x371fe20
	void OnRep_CurBulletNum();// 0x371fe0c
	void OnRep_CanUseGrenadeLaunch();// 0x371fdf8
	void LaunchGrenadeBullet(Transform Trans, out const ShootTimeData ShootTimeData);// 0x371fc80
	bool JudgeMustReload();// 0x371fc4c
	bool IsUseGreanadeLaunch();// 0x371fc24
	void HandleGrenadeLaunchEquip(bool bIsEquip);// 0x371fba4
	BackpackComponent* GetBackpackComp();// 0x371fb7c
	void DoGrenadeLaunchStartReload();// 0x371fb68
	bool CheckCanReload();// 0x371fb40

--------------------------------
Class: ShootTimeData
	Vector_NetQuantize ShootPos;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	float SkeletonLength;//[Offset: 0x34, Size: 4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 64]
	uint32 UserCmdSequence;//[Offset: 0x80, Size: 4]
	byte ShootTimeConDelta;//[Offset: 0x84, Size: 1]
	float ShootLevelTime;//[Offset: 0x88, Size: 4]
	Vector_NetQuantize GunTailPos;//[Offset: 0x8c, Size: 12]
	byte ShotFlags;//[Offset: 0x98, Size: 1]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: EnergyAccumulateShootComponent.NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float StartAccMinThreshold;//[Offset: 0x8a0, Size: 4]
	float ReachMaxAccTime;//[Offset: 0x8a4, Size: 4]
	int BulletNumPerShoot;//[Offset: 0x8a8, Size: 4]
	int BulletImpactDamageEnergy;//[Offset: 0x8ac, Size: 4]
	float MaxOffsetShootDegree;//[Offset: 0x8b0, Size: 4]
	int BulletNumPerShootMaxEnergy;//[Offset: 0x8b4, Size: 4]
	int ComsumeBulletNumPerShootMaxEnergy;//[Offset: 0x8b8, Size: 4]
	int BulletImpactDamageMaxEnergy;//[Offset: 0x8bc, Size: 4]
	class STExtraShootWeaponBulletBase* EnergyBulletTemplate;//[Offset: 0x8c0, Size: 4]
	class STExtraShootWeaponBulletBase* MaxEnergyBulletTemplate;//[Offset: 0x8c4, Size: 4]
	byte PreShootWeaponStateToChange;//[Offset: 0x8c8, Size: 1]
	bool bSpawnBulletOnSimulateClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	float CurAccEnergyPercent;//[Offset: 0x8cc, Size: 4]
	Actor*[] NormalBulletCacheList;//[Offset: 0x90c, Size: 12]
	Actor*[] EnergyBulletCacheList;//[Offset: 0x918, Size: 12]
	Actor*[] MaxEnergyBulletCacheList;//[Offset: 0x924, Size: 12]
	void RPC_Multicast_ClientShootEnergyAccBullets(const ShootMultiBulletsParam[] LaunchParams, float InCurAccEnergyPercent);// 0x36d72b4
	void RemoveBullet(STExtraShootWeaponBulletBase* Bullet);// 0x36d723c
	bool IsMaxEnergy();// 0x36d7204
	float GetEnergyPercentByShootId(int ShootID);// 0x36d7184
	float GetAccEnergyPercentForAnim();// 0x36d7154

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x794, Size: 4]
	bool bUseBulletCachePool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 1]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x79c, Size: 56]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x7d4, Size: 12]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 1]
	float CurShootLockInterval;//[Offset: 0x7e8, Size: 4]
	float ShooterSpeedPrediction;//[Offset: 0x7ec, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x37ad1c8
	void ShootNormalProjectileInner(Vector StartLoc, Rotator StartRot, int ShootID);// 0x37ad0bc
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x4a51734

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x788, Size: 12]
	void ShootBulletInner(Vector StartLoc, Rotator StartRot, int ShootID);// 0x38f3fa4

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bVerifyImpactPointDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	float VerifyWeaponFireInfoTimeTorelate;//[Offset: 0x24, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x2c, Size: 4]
	bool bVerifyMuzzleBlockTail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bVerifyBulletPosReverseDirBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	float VerifyTailExtend;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ShootMultiBulletsParam
	Vector LaunchBulletPos;//[Offset: 0x0, Size: 12]
	Rotator LaunchBulletRot;//[Offset: 0xc, Size: 12]
	uint32 ShootID;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UpGasSpeed;//[Offset: 0x108, Size: 4]
	float DownGasSpeed;//[Offset: 0x10c, Size: 4]
	float CostGasOneShoot;//[Offset: 0x110, Size: 4]
	float MaxGas;//[Offset: 0x114, Size: 4]
	float GasAddDamageRate;//[Offset: 0x118, Size: 4]
	float MaxGasAngle;//[Offset: 0x11c, Size: 4]
	float PostFillGasTime;//[Offset: 0x120, Size: 4]
	float GasUpdateInterval;//[Offset: 0x124, Size: 4]
	int CurGas;//[Offset: 0x128, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x12c, Size: 4]
	void OnRep_CurGas();// 0x3592f9c
	void CostGassByShoot();// 0x36f1258
	void CheckNeedRep();// 0x36f1244
	void AddFillGass(float AddFillGasTime);// 0x36f11cc

--------------------------------
Class: FireWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x134, Size: 4]
	Pawn* WeaponOwner;//[Offset: 0x158, Size: 4]
	bool OpenPressBtnStay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0x108, Size: 12]
	delegate OnEndState;//[Offset: 0x114, Size: 12]
	bool bCanEnterAnyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	byte FreshWeaponStateType;//[Offset: 0x122, Size: 1]
	byte[] ConditionGateMap;//[Offset: 0x124, Size: 12]
	byte SpesificTargetState;//[Offset: 0x130, Size: 1]
	bool bSyncSpesificStateToServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	bool TryChangeToSpesificTargetState();// 0x35a9ccc

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x158, Size: 60]
	AkAudioEvent* GunAdsShootSound;//[Offset: 0x194, Size: 4]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x198, Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x19c, Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x1a0, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x1a4, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x1a8, Size: 4]
	float CameraShakFalloff;//[Offset: 0x1ac, Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2, Size: 1]
	bool bFixedMuzzleFXScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3, Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x1b4, Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x1b8, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x1c4, Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x1c8, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x1d4, Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x1d8, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x1e4, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x1f4, Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x1f8, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x204, Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x208, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x214, Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x218, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x224, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x234, Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x238, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x244, Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x248, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x254, Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x258, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x264, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x274, Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x278, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x284, Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x288, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x294, Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x298, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x2a8, Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x2ac, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x2b8, Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x2bc, Size: 12]
	float ShootLightCD;//[Offset: 0x2c8, Size: 4]
	float LastShootLightTime;//[Offset: 0x2cc, Size: 4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x2d0, Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x2d4, Size: 4]
	float MaxFlyAngel;//[Offset: 0x2d8, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x2dc, Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x2e0, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2e4, Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x2e8, Size: 4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x2ec, Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x2f8, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x304, Size: 4]
	float LastMuzzleEffectTime;//[Offset: 0x308, Size: 4]
	float MuzzleEffectTimeInterval;//[Offset: 0x30c, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x320, Size: 12]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	Rotator ShellDropRot;//[Offset: 0x330, Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x340, Size: 8]
	bool bSimulateBulletOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float bSimulateBulletMaxDistance;//[Offset: 0x34c, Size: 4]
	float SnipperStayDistance;//[Offset: 0x350, Size: 4]
	float bSimulateBulletRadius;//[Offset: 0x354, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	void ReloadAttr(int WeaponId);// 0x3869e68
	void OnWeaponUnEquiped();// 0x3869e54
	void OnWeaponLoadAvatarAllMeshDone(AvatarDIYComponent* AvatarDIYComponent);// 0x3869ddc
	void OnWeaponEuiped();// 0x3869dc8
	void HandleWeaponAction(byte Action);// 0x3869d48
	STExtraShootWeapon* GetOwnerShootWeapon();// 0x3869d20
	OBEffectBullet* GetOBEffectBullet();// 0x3869cf8
	int GetAvailableOBEffectBulletNum();// 0x3869cd0
	void CheckOptimizeMuzzleFX();// 0x3673918
	void ChangeShellDropFx();// 0x3869cbc
	void ActiveSoundByWeaponAction(byte Action);// 0x3869c44
	void ActiveShootLight();// 0x3869c30
	void ActiveLocalShellDropFX();// 0x3869c1c

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x108, Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0x144, Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x148, Size: 4]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x14c, Size: 4]
	AkAudioEvent* ScopeSound;//[Offset: 0x150, Size: 4]
	AkAudioEvent* ScopeOutSound;//[Offset: 0x154, Size: 4]
	void HandleWeaponAction(byte Action);// 0x3869d48

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x310, Size: 4]
	bool bIgnoreEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x318, Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x328, Size: 4]
	float CurMovingTime;//[Offset: 0x354, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x358, Size: 4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	int ConfigAutoAddAttId;//[Offset: 0x178, Size: 4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x1f8, Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0x204, Size: 4]
	RepAttributeModify DynamicModifierRep;//[Offset: 0x260, Size: 16]
	RepAttributeModify DynamicModifierRepOnlyOwner;//[Offset: 0x270, Size: 16]
	delegate OnAttrModified;//[Offset: 0x294, Size: 12]
	delegate OnAttrRemoved;//[Offset: 0x2a0, Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x2ac, Size: 124]
	AttributeExpand[] AttributeExpands;//[Offset: 0x364, Size: 12]
	bool bAddReserveNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x374, Size: 60]
	enum ActorAttrType;//[Offset: 0x3b0, Size: 1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x478, Size: 12]
	delegate OnNeedSetSpeedOverLimit;//[Offset: 0x54c, Size: 12]
	AttrModifyRecordItem[] ExceptionAttrModifyRecords_DS;//[Offset: 0x614, Size: 12]
	AttrModifyRecordItem[] ExceptionAttrModifyRecords_Client;//[Offset: 0x620, Size: 12]
	void StartTimerToSyncRecordAttrValue(float Time);// 0x3c6f644
	void SetValueToAttributeSafety(FString AttrName, float Value, int ModifyRecordType);// 0x3c6f500
	void SetOrignalValueToAttribute(FString AttrName, float Value);// 0x3c6f400
	void SetAttrModifyStateValue(int Index, bool Value);// 0x3c6f33c
	void SetAttributeMaxValue(FString AttrName, float MaxValue);// 0x3c6f23c
	void ServerSendExceptionType(FString AttrName, int ExceptionType);// 0x3c6f100
	void ServerRequestRecordAttrValue(FString AttrName);// 0x3c6f00c
	void ResponeAttrValue(FString AttrName, float FinalValue);// 0x3c6eed0
	void RequestAttrValue(FString AttrName);// 0x3c6eddc
	bool RemoveModifyItemFromCache(uint32 ModifyUID);// 0x3c6ed5c
	void RemoveAttrListener(FString AttrName, SluaBPVar Listener);// 0x3c6ec08
	void RemoveAllDynamicModifier(bool bForce);// 0x3c6eb88
	bool RegisterModifyAbleAttr(out AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x3c6e9fc
	void RegistAttrModifyRecordList(FString AttrName, int RecordLen);// 0x3c6e8fc
	void PushAttrModifyRecordItem(FString AttrName, float PreValue, float CurValue, int ModifyRecordType, FString ModifyDesc);// 0x3c6e6ec
	void OnRep_ModSimulateSyncList();// 0x3c6e6d8
	void OnRep_ExceptionAttrModifyRecords();// 0x3592f9c
	void OnRep_DynamicModifier();// 0x3c6e6c4
	void OnRep_AttrModifyStateList();// 0x3c6e6b0
	void OnNeedSetSpeedOverLimit__DelegateSignature();// 0x4a51734
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x4a51734
	void LuaSetValueToAttributeSafety(FString AttrName, float Value);// 0x3c6e5b0
	bool IsAttrModifyStateValidIndex(int Index);// 0x3c6e530
	bool HasDynamicModifier(FString AttrModifyId);// 0x3c6e46c
	void HandleExceptionAttrModify(FString AttrName, int ExceptionType);// 0x3c6e36c
	AttrModifyModDataSubsystem* GetSubsystem();// 0x3c6e344
	FString GetMaxAttrName(FString AttrName);// 0x3c6e200
	bool GetAttrModifyStateValue(int Index);// 0x3c6e180
	int GetAttrModifyStateNum();// 0x3c6e164
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x3c6de88
	float GetAttributeValue(FString AttrName);// 0x3c6ddc0
	float GetAttributeOrignalValue(FString AttrName);// 0x3c6dcf8
	bool EnableAttrModifierByIndex(int ModifyConfigIndex);// 0x3c6dc78
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x3c6db18
	bool DisableAttrModifierByIndex(int ModifyConfigIndex);// 0x3c6da98
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x3c6d938
	bool DisableAllAttrModifier(bool bForce);// 0x3c6d8b0
	void ConditionSyncRecordAttrValue();// 0x3c6d89c
	void ClientSyncRecordAttrValue(const AttrDesc[] AttrDescs);// 0x3c6d740
	void ClientSendRecordData(const AttrModifyRecordItem RecordItem, int ExceptionType);// 0x3c6d5d0
	void ClearAllAttrModify();// 0x3c6d5bc
	void AddValueToAttribute(FString AttrName, float Value);// 0x3c6d4bc
	uint32 AddModifyItemAndCache(FString AttrName, enum CModifyType, float CValue, bool bEnable, Object* Causer, bool oldModify);// 0x3c6d28c
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem, bool RepOnlyOwner);// 0x3c6d0e8
	uint32 AddBModifyAndCacheWithCParam(FString AttrName, enum CModifyType, float CValue);// 0x3c6cf9c
	uint32 AddBModifyAndCache(FString AttrName, enum ModifyType, float Value);// 0x3c6ce50
	void AddAttrListener(FString AttrName, SluaBPVar Listener);// 0x3c6ccfc

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 12]
	FString AttrModifyItemName;//[Offset: 0xc, Size: 12]
	FString AttrName;//[Offset: 0x18, Size: 12]
	int AttrId;//[Offset: 0x24, Size: 4]
	int CompareId;//[Offset: 0x28, Size: 4]
	enum ModifierOp;//[Offset: 0x2c, Size: 1]
	float ModifierValue;//[Offset: 0x30, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	float FinalAddValue;//[Offset: 0x8, Size: 4]
	uint32 CModifyUid;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RepAttributeModify

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 60]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c, Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AttrDynamicModifyTarget
	AttrDynamicModifyItem[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AttrDynamicModifyItem
	Object* Causer;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	FString AttrName;//[Offset: 0x4, Size: 12]
	FString LimitAttrName;//[Offset: 0x10, Size: 12]
	FString MaxAttrName;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0, Size: 12]
	FString AttrDesc;//[Offset: 0xc, Size: 12]
	int RelateTypeId;//[Offset: 0x18, Size: 4]
	FString RelateGroup;//[Offset: 0x1c, Size: 12]
	float Value;//[Offset: 0x28, Size: 4]
	int nValue;//[Offset: 0x2c, Size: 4]
	byte bValue;//[Offset: 0x30, Size: 1]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ModAttrSimulateSyncItem
	int AttrId;//[Offset: 0x0, Size: 4]
	float FinalValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttrModifyRecordItem
	AttrDesc AttrDesc;//[Offset: 0x0, Size: 20]
	AttrModifyRecordDetails[] DetailsArray;//[Offset: 0x14, Size: 12]

--------------------------------
Class: AttrDesc
	FString AttrName;//[Offset: 0x0, Size: 12]
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float CurValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AttrModifyRecordDetails
	FString ModifyDesc;//[Offset: 0x0, Size: 12]
	int NextIndex;//[Offset: 0xc, Size: 4]
	AttrModifyRecordDetail[] Data;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AttrModifyRecordDetail
	float PreModifyValue;//[Offset: 0x0, Size: 4]
	float AfterModifyValue;//[Offset: 0x4, Size: 4]
	float WorldTime;//[Offset: 0x8, Size: 4]
	int ModifyType;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SluaBPVar

--------------------------------
Class: AttrRegisterItem
	int AttrId;//[Offset: 0x0, Size: 4]
	FString AttrName;//[Offset: 0x4, Size: 12]
	enum AttrVariableType;//[Offset: 0x10, Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 12]
	Actor* AffectedActor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AttrModifyModDataSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: WeaponAttrModifyConfig
	int ID;//[Offset: 0x0, Size: 4]
	FString ModifyConfigID;//[Offset: 0x4, Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x108, Size: 8]
	float ShootRateCheckInterval;//[Offset: 0x128, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x130, Size: 4]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x134, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x178, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x17c, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x180, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x184, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x188, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x18c, Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x190, Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x194, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x19c, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x1a0, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x1a4, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x1ac, Size: 4]
	float TolerateFlyTime;//[Offset: 0x1b0, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1b4, Size: 4]
	float DeCon6SpanTime;//[Offset: 0x274, Size: 4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x3b649ac

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xad, Size: 1]
	float DamageImpulse;//[Offset: 0xc8, Size: 4]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemId;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x8, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0xc, Size: 12]
	HitResult HitInfo;//[Offset: 0x18, Size: 144]

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 12]
	int AutoAimSpeed;//[Offset: 0x64, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x68, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x70, Size: 4]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector_NetQuantize10 ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize10 ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	Actor* Actor;//[Offset: 0x34, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x3c, Size: 8]
	byte HitBodyType;//[Offset: 0x44, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x45, Size: 1]

--------------------------------
Class: ReplayStartFireInfo
	StartFireInfo ClientStartFire;//[Offset: 0x0, Size: 24]
	enum DsLastRequestFireRet;//[Offset: 0x18, Size: 1]
	uint32 DsNextFireMiniShootID;//[Offset: 0x1c, Size: 4]
	uint32 DsCurClipID;//[Offset: 0x20, Size: 4]
	int DsCurClipNum;//[Offset: 0x24, Size: 4]
	int ClientRequestClipNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	byte ShootMode;//[Offset: 0xc, Size: 1]
	byte ShootType;//[Offset: 0xd, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	int StartFireID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BulletHitInfoUploadDataInReplay
	enum VertifyRes;//[Offset: 0x0, Size: 1]
	enum VertifySubType;//[Offset: 0x1, Size: 1]
	BulletHitInfoUploadData UploadData;//[Offset: 0x8, Size: 216]
	CharacterHistoryData VictimHistoryData;//[Offset: 0xe0, Size: 160]
	ShootTimeData ShootTimeData;//[Offset: 0x180, Size: 160]
	uint32 CurrentUserCmdSequence;//[Offset: 0x220, Size: 4]
	uint32 UniqueId;//[Offset: 0x224, Size: 4]
	float VictimNewestTimeStamp;//[Offset: 0x228, Size: 4]
	float ShooterPing;//[Offset: 0x22c, Size: 4]
	float VictimPing;//[Offset: 0x230, Size: 4]
	enum[] StatData;//[Offset: 0x234, Size: 12]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	Rotator VehicleRotation;//[Offset: 0x60, Size: 12]
	Vector VehicleRotVelocity;//[Offset: 0x6c, Size: 12]
	bool VehicleIsCorrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bUseServerWorldTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	Vector Velocity;//[Offset: 0x7c, Size: 12]
	uint32 UserCmdSequenceNew;//[Offset: 0x88, Size: 4]
	uint32 UserCmdSequenceOld;//[Offset: 0x8c, Size: 4]
	uint32 LastAckBadMoveSequence;//[Offset: 0x90, Size: 4]
	float MoveServerTimeNew;//[Offset: 0x94, Size: 4]
	float MoveServerTimeOld;//[Offset: 0x98, Size: 4]
	byte PoseStateNew;//[Offset: 0x9c, Size: 1]
	byte PoseStateOld;//[Offset: 0x9d, Size: 1]
	enum MoveBaseState;//[Offset: 0x9e, Size: 1]

--------------------------------
Class: NextFireMinShootDataInReplay
	uint32 NextFireMinShootID;//[Offset: 0x0, Size: 4]
	BulletHitInfoUploadData UploadData;//[Offset: 0x8, Size: 216]

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 12]
	BulletHitInfoUploadBinaray[] HitBinarayArray;//[Offset: 0xc, Size: 12]
	BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray;//[Offset: 0x18, Size: 12]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0x24, Size: 12]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x30, Size: 12]
	byte[] CopmpressBinarayData;//[Offset: 0x3c, Size: 12]
	uint32[] CopmpressBinaraySectionLen;//[Offset: 0x48, Size: 12]
	int ShootTimes;//[Offset: 0x54, Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x58, Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0x64, Size: 4]
	int NetworkStatus;//[Offset: 0x68, Size: 4]
	int Sequence;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: BulletHitInfoUploadBinaray
	byte[] Data;//[Offset: 0x0, Size: 12]
	uint16 CompensationTime;//[Offset: 0xc, Size: 2]
	Actor* Actor;//[Offset: 0x10, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x18, Size: 8]

--------------------------------
Class: BulletHitInfoWithoutDamage
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	uint32 ShootID;//[Offset: 0x34, Size: 4]
	Actor* Actor;//[Offset: 0x38, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x40, Size: 8]
	byte HitBodyType;//[Offset: 0x48, Size: 1]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x4a, Size: 1]

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0, Size: 12]
	Vector TargetOffset;//[Offset: 0xc, Size: 12]
	float SpringArmLength;//[Offset: 0x18, Size: 4]
	float AdditiveOffsetFov;//[Offset: 0x1c, Size: 4]
	float FixedFov;//[Offset: 0x20, Size: 4]
	float BeginInterpSpeed;//[Offset: 0x24, Size: 4]
	float EndInterpSpeed;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x310, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x31c, Size: 12]
	byte ThrowMode;//[Offset: 0x328, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x32c, Size: 4]
	float MaxSimTime;//[Offset: 0x330, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x334, Size: 40]
	float GrenadeRadius;//[Offset: 0x35c, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x360, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x36c, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x378, Size: 12]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 12]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector HitActorLocation;//[Offset: 0x10, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponOverHeatingComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float MaxTemperature;//[Offset: 0x108, Size: 4]
	float MinShootInterval;//[Offset: 0x10c, Size: 4]
	float CoolDownSpeed;//[Offset: 0x110, Size: 4]
	float HeatingSpeedPerBullet;//[Offset: 0x114, Size: 4]
	float CoolDownDelay;//[Offset: 0x118, Size: 4]
	float CurrentTemperature;//[Offset: 0x11c, Size: 4]
	CurveFloat* ShootIntervalScaleCurve;//[Offset: 0x120, Size: 4]
	FName MuzzleEffectParam;//[Offset: 0x128, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x130, Size: 4]
	void HandleWeaponOnShoot();// 0x3b79258

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0x108, Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0x10c, Size: 4]
	<byte,WeaponStateBase*> StateMap;//[Offset: 0x110, Size: 60]
	WeaponStateBase* GetWeaponState(byte Type);// 0x3b7ed78
	WeaponStateBase* GetCurrentState();// 0x3b7ed50
	byte GetCurrentFreshWeaponStateType();// 0x3b7ed28

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	int OverrideFXIndex;//[Offset: 0x3ac, Size: 4]
	delegate GrenadeAvatarEqiuped;//[Offset: 0x3b4, Size: 12]
	delegate GrenadeFxOverride;//[Offset: 0x3c0, Size: 12]
	void SetOverrideFxIndex(int InIndex);// 0x371f530
	void PreChangeGrenadeAvatar(int InItemID);// 0x371f4b8
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x367da20
	void OnRep_OverrideFXIndexChanged();// 0x371f4a4
	bool HasOverrideFx();// 0x371f47c
	FString GetItemAvatarHandlePath(int ItemId);// 0x4a51734
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x4a51734
	int GetDefaultAvatarID(int InAvatarID);// 0x4a51734
	int GetCurGrenadeAvatarID();// 0x371f454
	void CheckHasOverrideFx(STExtraPlayerController* PC, int GrenadeSkinID);// 0x4a51734
	void AsyncLoadOverrideFxData(int InOverrideFxIndex);// 0x371f3dc
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x371f2a0

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x228, Size: 12]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x238, Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x254, Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x258, Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x314, Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x318, Size: 4]
	int itemType;//[Offset: 0x31c, Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x320, Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x348, Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x370, Size: 60]
	void VehicleEquipedDefaultAvatar__DelegateSignature(int AvatarID, int DefaultAvatarID);// 0x4a51734
	void SyncChangeItemAvatar(int InItemID);// 0x36a62e0
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x3742dd8
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x3742cd0
	void ResetItemAvatar();// 0x3742cbc
	void RequestDownloadItemInBattle(int InItemID);// 0x35a9dec
	void ReportAvatarInfo(int InItemID);// 0x3742c44
	void PreChangeItemAvatar(int InItemID);// 0x36a624c
	void OnRep_ItemAvatarChanged();// 0x3742c28
	bool IsValidAvatar();// 0x3742c00
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x3742bd0
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x369aafc
	MeshComponent* GetItemBodyMesh();// 0x3742bb4
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance, MaterialInterface* MatBase);// 0x3628e74
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x35a9ad4
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x36a60d4
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x3742ae8
	void AsyncChangeItemAvatar(int InItemID);// 0x36a602c
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x36a5e58
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x36a5d58
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x371f2a0

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0xf0, Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0x100, Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0x128, Size: 40]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x150, Size: 40]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x35d02ac
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x35cfe8c
	bool HandleDrop(int InCount, enum Reason);// 0x35cf8a8
	bool HandleDisuse(enum Reason);// 0x35b6124
	BackpackComponent* GetBackpackComponent();// 0x35d30e4
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x35d3020

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]
	MaterialInterface* LobbyMatInstance;//[Offset: 0x30, Size: 40]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<enum,FName> SlotTypeToSocket;//[Offset: 0x718, Size: 60]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x754, Size: 60]
	int gender;//[Offset: 0x790, Size: 4]
	delegate OnAvatarEquipped;//[Offset: 0x794, Size: 12]
	delegate OnAvatarVisibleChanged;//[Offset: 0x7a0, Size: 12]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0x7ac, Size: 120]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0x824, Size: 60]
	int HeadAvatarID;//[Offset: 0x870, Size: 4]
	int PreHeadAvatarID;//[Offset: 0x874, Size: 4]
	SoftObjectPath HeadMeshSoftPath;//[Offset: 0x878, Size: 24]
	class AnimInstance* HeadAniminstanceClass;//[Offset: 0x890, Size: 4]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x895, Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a5, Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0x8a8, Size: 60]
	enum[] OpenResetHideBone;//[Offset: 0x8e4, Size: 12]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x8f0, Size: 60]
	int[] ignoreSlots;//[Offset: 0x92c, Size: 12]
	int WholeBodyModelID;//[Offset: 0x938, Size: 4]
	int CurrentClothID;//[Offset: 0x93c, Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0x940, Size: 12]
	<enum,int> AvatarRectifyData;//[Offset: 0x94c, Size: 60]
	delegate OnAvatarRectifyDataChange;//[Offset: 0x988, Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x998, Size: 60]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x9d4, Size: 60]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0xa10, Size: 60]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0xa4c, Size: 60]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0xa88, Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0xac4, Size: 12]
	delegate OnClothParticleEquipped;//[Offset: 0xad0, Size: 12]
	delegate OnClothPlaneCutChanged;//[Offset: 0xadc, Size: 12]
	delegate OnEnableEffectTickChanged;//[Offset: 0xae8, Size: 12]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0xaf4, Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0xb30, Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xb34, Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xb38, Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xb3c, Size: 12]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xb48, Size: 12]
	float ConfigBoundScale;//[Offset: 0xb54, Size: 4]
	int EnableEquipAvatarPendant;//[Offset: 0xb58, Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5d, Size: 1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xb60, Size: 60]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xba0, Size: 56]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xbd8, Size: 40]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 1]
	<int,int> OriginEquipCache;//[Offset: 0xc04, Size: 60]
	bool bEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc41, Size: 1]
	bool HasVehicleAjustHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc42, Size: 1]
	int BodySlotStateChangeCount;//[Offset: 0xc44, Size: 4]
	float CutPlaneW;//[Offset: 0xc48, Size: 4]
	bool EnableClothPlaneCut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	SkinnedMeshComponent* ClothSkinMeshTobeCut;//[Offset: 0xc70, Size: 4]
	bool bEnableAvatarReAttachFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 1]
	bool bVisibleChangeRefreshAvatarReAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc75, Size: 1]
	enum[] AlwaysResetReAttachSlotList;//[Offset: 0xc78, Size: 12]
	<enum,AvatarReAttachConfigCollection> PendingAvatarReAttachCollectionMap;//[Offset: 0xc84, Size: 60]
	<enum,ReAttachConfig> FinalWorkingAvatarReAttachMap;//[Offset: 0xcc0, Size: 60]
	int BackAircraftType;//[Offset: 0xcfc, Size: 4]
	int BackSkateType;//[Offset: 0xd00, Size: 4]
	bool EnableEffectTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 1]
	int TypeToInt(enum InSlotType);// 0x364ed4c
	void TemporarySetHidedBonesVisibility(bool Visible);// 0x364eccc
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x364eb90
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x364eabc
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x364e9e8
	bool SetSkinMaterial(int SlotID, out const ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x364e8c8
	void SetPlane();// 0x364e8b4
	void SetNormalMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x364e73c
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x364e5c4
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x364e54c
	void SetForceMeshLodWithVehicle(const int InSlot, const bool bInEnterVehicle);// 0x364e488
	void SetClothParticleVisibility(int SlotID, bool Visible, bool IsForCE);// 0x364e374
	void SetCastPhotonShadow(bool Enable);// 0x364e2f4
	bool SetBodySuitsMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, BackpackAvatarHandle* InAvatarHandle);// 0x364e1b8
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x364e0a4
	void SetAvatarGender(int AGender);// 0x364bc2c
	void SetAvatarForceLOD(enum SlotType, int LODLevel);// 0x364dfe8
	void SetAllMeshCharMode(bool bMainChar);// 0x364df68
	void ResetBackpackPendant(int InSlotID, BackpackAvatarHandle* AvatarHandle);// 0x364deac
	void ResetAnimDynamicsByMeshComp(MeshComponent* MeshComp);// 0x364de2c
	void ResetAllAnimDynamics();// 0x364de10
	void RequestSyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x364dd44
	void ReportAvatarInfo(out <int,int> AvatarInfo);// 0x364dc38
	void RemoveForceReplaceOnVehicle(int SlotID);// 0x364dbc0
	void RemoveClothParticleEffect(int SlotID);// 0x364db48
	void RemoveAvatarReAttach(const enum InTriggerSlot);// 0x364dad0
	void RemoveAttachMesh(int SlotID);// 0x364da58
	void RefreshAvatarReAttachForAssociatedSlot(const enum InScaledSlot, const enum InAssociatedSlot);// 0x364d99c
	void RefreshAvatarReAttach();// 0x364d988
	void RecordTemporarilyEquip(int ItemId);// 0x364d910
	void ProcessUnDownloadHead();// 0x364d8f4
	void ProcessClothSuits();// 0x364d8d8
	void ProcessChangedVehicleSeat();// 0x4a51734
	void ProcessAvatarRectify();// 0x364d8bc
	void PreProcessBeforeLoadMesh();// 0x364d8a0
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x4a51734
	void PostProcessAfterLoadMesh();// 0x364d884
	void OnSyncLoadBattleHandlesDone(out const BattleItemHandleBase*[] AvatarHandles);// 0x364d7b8
	void OnRespawned();// 0x355a034
	void OnRep_VehicleForceReplace();// 0x35b08f8
	void OnRep_EnableClothPlaneCut();// 0x364d7a4
	void OnRep_BodySlotStateChangedInternal();// 0x364d790
	void OnRep_BodySlotStateChanged();// 0x364d774
	void OnRecycled();// 0x35a9cfc
	void OnPlayerLeaveVehicle(STExtraVehicleBase* InVehicle);// 0x364d6fc
	void OnPlayerLeaveState(enum State);// 0x364d684
	void OnPlayerEnterVehicle(STExtraVehicleBase* InVehicle);// 0x364d60c
	void OnPlayerEnterState(enum State);// 0x364d594
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x364d4c0
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x364d3ec
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x364d33c
	void OnEnterOrLeaveVehicle();// 0x4a51734
	void OnEnableEffectTickChanged__DelegateSignature(bool IsEnable);// 0x4a51734
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x364d21c
	void OnClothPlaneCutChanged__DelegateSignature(bool IsEnable);// 0x4a51734
	void OnClothParticleEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x4a51734
	void OnAvatarVisibleChanged__DelegateSignature(enum SlotType, bool bIsVisibile);// 0x4a51734
	void OnAvatarRectifyDataChange__DelegateSignature();// 0x4a51734
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x364d0a8
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x364cfcc
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x364ce94
	void OnAvatarEquippedCall(enum SlotType, bool bEquipped, int ItemId);// 0x364cd88
	void OnAvatarEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x4a51734
	void OnAvatarAttachEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x4a51734
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x364cd08
	void OnAsyncLoadBattleHandlesDone_Download(int InAsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x364cb58
	void OnAsyncLoadBattleHandlesDone(int InBodySlotStateChangeCount, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x364c9a8
	bool NeedVehicleForceReplate(int ItemId);// 0x4a51734
	bool NeedHideParachuteEquipemtInFreeState();// 0x364c978
	void ModifySlotFakeID(enum Slot, int FakeID);// 0x364c8bc
	void ModifyLogicSlotDescID(enum Slot, int ItemId);// 0x364c800
	void MarkAvatarBoneRetargetLODFeature(const enum InAvatarSlot, const bool InIsUseEnable);// 0x364c734
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x364c60c
	bool IsWearingAvatarNeedParachuteWind();// 0x4a51734
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x364c4e4
	bool IsTeammate();// 0x35a9ccc
	bool IsSelf();// 0x35a9c74
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x364c3e8
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x364c2ec
	bool IsPendantExistAndBackpackHided(int SlotType);// 0x364c26c
	bool IsNeedModifyVehicle(int TemplateID);// 0x364c1ec
	bool IsMeshComponentVisible(enum SlotType);// 0x364c16c
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x364c0a0
	bool IsItemHasEquipped_Origin(int ItemId);// 0x364c020
	bool IsItemClothSlotBlueprintExist(out const ItemDefineID InItemID, bool bWithLog);// 0x364bf3c
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x364be0c
	bool IsInVehicleTemplateConfig(int VehicleID, int TemplateID);// 0x364bd48
	bool IsCutPlaneOnVehicleOpen();// 0x4a51734
	enum IntToType(int InSlotID);// 0x364bcd4
	void InitMasterComponent();// 0x364bcc0
	void Initialize();// 0x364bca4
	void InitialAvatarParam(int AGender);// 0x364bc2c
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x364bbb4
	void InitDefaultAvatarByResID(int AGender, int Head, int hair);// 0x364bab4
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x364b9d0
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh);// 0x4a51734
	bool HaveSubTypeMesh(enum SlotType, int SubType);// 0x364b90c
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x364b874
	bool HandleUnEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x364b798
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x364b720
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x364b6a8
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x364b5cc
	bool HandleEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x364b4f0
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x364b43c
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x364b32c
	int GetSlotByItemID(int ItemId);// 0x364b2ac
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x364b1f8
	int GetRepalceIDOnVehicle(int OriginID);// 0x4a51734
	enum GetPendantSlotType();// 0x364b1c8
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x364b140
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x364b07c
	MaterialInstance* GetMaterial(out const MeshPackage MeshPack);// 0x364afc8
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x364af48
	int GetEquipmentSkinItemID(int InItemID);// 0x364aec0
	bool GetEquimentMeshBySlot(int Slot, out MeshData MeshPack);// 0x364adc8
	int[] GetDefaultBodyItemIDList();// 0x364ad08
	FName GetClothMaterialSkinName(enum SlotType, bool bSuit);// 0x364ac34
	FName GetClothMaterialColorName(enum SlotType, bool bSuit);// 0x364ab60
	MaterialInterface* GetCharSkinMaterial(MeshComponent* MasterMesh, enum SlotType, BackpackAvatarHandle* InAvatarHandle);// 0x364aa58
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle);// 0x4a51734
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x364a950
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x364a88c
	int GetAvatarIDBySlotID(int SlotID);// 0x364a80c
	enum GetAttachPartSlotType();// 0x364a7dc
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x364a754
	bool GetAttachMeshResRef(out const AvatarAttachMeshData MeshPack, out SoftObjectPath OutAssetRef);// 0x364a5d0
	void GetAllEquipItemsWithoutFake(out int[] EquipItems);// 0x364a504
	void GetAllEquipItems(out int[] EquipItems);// 0x364a438
	void GenerateVehicleTemplateConfig();// 0x4a51734
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x4a51734
	void ForceReplaceAvatarOnVehicle(int SlotID);// 0x364a3c0
	void FillVehicleTemplateConfig(int TemplateID, int VehicleID);// 0x364a304
	bool EnableEquipAvatarPendantFeature();// 0x364a2dc
	bool DeleteAvatarMeshData(int InSlotID, out const ItemDefineID InOldItemDefineID, bool bDestroyComp);// 0x364a1ac
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x4a51734
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x4a51734
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x364a0c8
	void ClearTemporarilyEquip(int ItemId);// 0x364a050
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x3649fb8
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x3649f30
	bool CheckIsHiddenByOther(int InItemResID);// 0x3649eb0
	bool CheckClothSuitsAllSlotIsExist(out const ItemDefineID InItemID, out const int[] AllSlotItemIDs);// 0x3649d80
	void CheckAvatarReAttachForSlotAssociation(const enum InSlot);// 0x3649d08
	void CheckAvatarReAttachForSlot(const enum InScaledSlot);// 0x3649c90
	void CheckAvatarReAttachCancelForSlotAssociation(const enum InScaledSlot);// 0x3649c18
	void CancelAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x3649a20
	void BPOnRemoveAvatarReAttach();// 0x4a51734
	void BPOnDeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x4a51734
	bool BPIsNeedModifyVehicle(int VehicleID, int TemplateID, int SeatIdx);// 0x4a51734
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x3649964
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x36498a8
	void ApplyMeshCompCollision(int SlotID);// 0x3649830
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x3649764
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x36496a8
	void ApplyAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x36494b0
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x3649360
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x36492a4
	void ApplyAnimListOverride(ItemHandleBase* InItemHandle, bool IsPutOn);// 0x36491d8
	void AddAvatarReAttach(const enum InTriggerSlot, out const AvatarReAttachConfigCollection InAvatarReAttachCollection);// 0x36490e8
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x3649068
	void ActivateLimitEffect(FName ComponentTag, bool bActivate);// 0x3648f94

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<int,FName> SlotToSocket;//[Offset: 0x430, Size: 60]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x46c, Size: 60]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x4a8, Size: 60]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x4e4, Size: 60]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x520, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x52c, Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x538, Size: 12]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x544, Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool IsLoadMeshProcessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x554, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x5fc, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x600, Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x61c, Size: 12]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x628, Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x664, Size: 4]
	delegate OnRegisterEntityTick;//[Offset: 0x668, Size: 12]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	enum[] LoadWithBatchBodyFilterTypes;//[Offset: 0x678, Size: 12]
	int[] LoadWithBatchBodyFilterTemplateIDs;//[Offset: 0x684, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x364eb90
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x364eabc
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x364e9e8
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x364e5c4
	void SetLoadMeshWithBatchBody(bool bFlag);// 0x3889574
	void ResetSlotSyncData();// 0x3889558
	void RequestSyncLoadMeshesWithPath(out const SoftObjectPath[] AssetPathList);// 0x3889424
	void RequestSyncLoadMeshes();// 0x3889410
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x35a9d18
	void RequestAsyncLoadMeshes();// 0x38893fc
	void RequestAsyncLoadHandles();// 0x38893e8
	void RemoveEquippedAvatar(int InSlotID);// 0x3889368
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x38892e0
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x38891d0
	void ReloadAllLogicAvatar(enum ReloadType);// 0x3889150
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x38890d0
	void RegisterEntityTick(AvatarEntity* Entity, bool isRegister);// 0x388900c
	bool PutOnEquipmentByResID(int resID);// 0x3888f84
	bool PutOffEquimentByResID(int resID);// 0x3888efc
	void PreProcessBeforeLoadMesh();// 0x364d8a0
	void PostProcessAfterLoadMesh();// 0x364d884
	void OnSyncLoadMeshesDone();// 0x3888ee8
	void OnRespawned();// 0x355a034
	void OnRep_BodySlotStateChanged();// 0x364d774
	void OnRegisterEntityTick__DelegateSignature();// 0x4a51734
	void OnRecycled();// 0x35a9cfc
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x364d3ec
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x364d33c
	void OnAvatarMeshMaterialApplyed__DelegateSignature(MeshComponent* MeshComponent);// 0x4a51734
	void OnAvatarMeshEquippedEventBP(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x3888d74
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x364d0a8
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemId);// 0x4a51734
	void OnAvatarBeginLoadMesh__DelegateSignature();// 0x4a51734
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x4a51734
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x364cd08
	void OnAsyncLoadHandlesDone_Download(out const ItemHandleBase*[] AvatarHandles);// 0x3888ca0
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x3888bcc
	void OnAllAvatarHandleLoadedDoneSync();// 0x3888bb8
	void OnAllAvatarHandleLoadedDone();// 0x3888ba4
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x38858cc
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x364c60c
	bool IsValidStateToRequestDownload();// 0x3888b7c
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x3888ab0
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x364c0a0
	bool IsItemHasEquipped(int InItemID);// 0x3884e7c
	bool IsForceRecreateMeshBoneRetargetAdaptSlot(const enum InTestSlot);// 0x3888a28
	bool IsEnableItemDownload(int ItemId);// 0x4a51734
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x3884d44
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x38889a0
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x3888918
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x3888854
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x364b32c
	enum GetMeshTypeBySlot(int InSlotID);// 0x38887d4
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x3888754
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x364b140
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x38886e4
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x38885d4
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x38884c4
	AvatarEntityFactory* GetEntityFactory();// 0x3888494
	SoftObjectPath GetBatchDefaultBodyPath();// 0x4a51734
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x38883b0
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x38882a8
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x364a754
	MeshComponent*[] GetAllMeshComponents(bool CheckVisible);// 0x3888198
	int GetAdvanceVehicleInsideSlotID();// 0x3888168
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x4a51734
	bool DeleteAvatarMeshData(int InSlotID, out const ItemDefineID InOldItemDefineID, bool bDestroyComp);// 0x364a1ac
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x364a0c8
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x38880a4
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x3887ebc
	bool CanLoadItemWithBatchBody(out const ItemDefineID InItemID);// 0x3887e24
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x3887d50
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs, out ItemDefineID[] OutRequestItemList);// 0x3887be4
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x3887ad4
	void BPCreateAvatarCustomHandle(int SlotID, int ItemId, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x4a51734
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x35a985c

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x228, Size: 60]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x264, Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x2a0, Size: 24]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x2b8, Size: 12]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x2c4, Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x2d0, Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x2dc, Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x2e8, Size: 12]
	int itemType;//[Offset: 0x2f4, Size: 4]
	enum CustomType;//[Offset: 0x2f8, Size: 1]
	<int,ForceEquipSlotInfo> ForceEquipItemLogic;//[Offset: 0x2fc, Size: 60]
	bool VehicleForceReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 1]
	int SubSlotStartNum;//[Offset: 0x344, Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x348, Size: 4]
	<int,enum> SlotHideStateMap;//[Offset: 0x34c, Size: 60]
	<int,TempAvatarSlotDesc> TempRunningSlotDesc;//[Offset: 0x388, Size: 60]
	int[] AlawysHideResetOperation;//[Offset: 0x40c, Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x41c, Size: 12]
	void SetForceHideStateData(int InSlotID, enum InForceHideState);// 0x3885ca4
	void SetForceHideState(int InSlotID, enum InForceHideState);// 0x3885be8
	void ServerProcessData();// 0x35b0300
	void ResetSyncData();// 0x3885bd4
	void RemoveTempRunningSlotDesc(int SlotID, int Index);// 0x3885b18
	void RemoveForceEquipItem(int SlotID);// 0x3885aa0
	void RemoveAllEquippedItem();// 0x3885a8c
	void OnRespawned();// 0x355a034
	void OnRep_VehicleForceReplace();// 0x35b08f8
	void OnRep_BodySlotStateChanged();// 0x364d774
	void OnRecycled();// 0x35a9cfc
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x364d4c0
	void OnHandleUnequipSlot(int InSlotID);// 0x3885a14
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x388596c
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x364d33c
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x364d21c
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x4a51734
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x364cfcc
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x364ce94
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x4a51734
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x4a51734
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x4a51734
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x38858cc
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x38857bc
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x38856ac
	bool ModifyViewDataByForceHide(int InSlotID, bool bHide);// 0x38855e0
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x38854d0
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x38853c0
	bool ModifySyncDataByForceHide(int InSlotID, enum HideState);// 0x38852fc
	int MakeStateInfo(out const int[] InSlotDesc);// 0x3885228
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x3885180
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x364c3e8
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x388509c
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x364be0c
	bool IsInHideWhiteTable(int SlotID1, int SlotID2);// 0x3884fd0
	bool IsEquippedThoseItemList(out const int[] InItemListID);// 0x3884efc
	bool IsEquippedItemID(int InItemID);// 0x3884e7c
	bool IsEquippedItemDefineID(out const ItemDefineID InItemID);// 0x3884de4
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x3884d44
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x3884cac
	bool HandleUnequipSlot(int InSlotID);// 0x3884c2c
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x3884b94
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x38849b4
	void HandleItemResetOrderDesc();// 0x38849a0
	void HandleItemResetOperation();// 0x388498c
	void HandleItemReplaceRelation();// 0x3884978
	void HandleItemHideRelation();// 0x3884964
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x3884868
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x38846c0
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x3884518
	bool GetViewDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x388443c
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x3884324
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x388417c
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x3883fd4
	bool GetSyncDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x3883ef8
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x3883e04
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x3883d6c
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x3883ccc
	enum GetForceHideState(int InSlotID, int ItemId);// 0x3883c00
	ItemDefineID GetEquippedItemDefineID3(int InSlotID);// 0x3883b6c
	void GetEquippedItemDefineID2(int InSlotID, out ItemDefineID ItemDefineID, out ItemDefineID RealShowItemDefineID);// 0x3883a3c
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x38839a8
	int GetAvatarSlotID(int InSubSlotID);// 0x3883928
	void ClientPostProcessViewDataMiddle();// 0x3626e20
	void ClientPostProcessViewDataBefore();// 0x35aaa1c
	void ClientPostProcessViewDataAfter();// 0x3626e58
	void ClientBuildAvatarRelationData();// 0x3883914
	void ClientBodySlotStateChanged();// 0x3883900
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x38837b8
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x38835d8
	void BPHandleTempRunningSlotDesc();// 0x35b05a4
	bool BPClientPostProcessViewDataMiddle();// 0x38835a8
	bool BPClientPostProcessViewDataBefore();// 0x3883578
	bool BPClientPostProcessViewDataAfter();// 0x3883548
	void AddTempRunningSlotDesc(int SlotID, int InItemType, int Template, bool bForcHideState);// 0x38833f8
	void AddForceEquipItem(int SlotID, int ItemId, enum HideState);// 0x38832f8

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 24]
	int gender;//[Offset: 0x38, Size: 4]
	int HideState;//[Offset: 0x3c, Size: 4]
	int ReplaceState;//[Offset: 0x40, Size: 4]
	bool IsExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x48, Size: 20]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	enum SlotDescDiff;//[Offset: 0x5d, Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 24]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0, Size: 1]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int NumID;//[Offset: 0xc, Size: 4]
	int ParticleID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 12]
	int gender;//[Offset: 0xc, Size: 4]
	int BaseID;//[Offset: 0x10, Size: 4]
	int UpdateFlag;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AvatarSyncData
	int ItemId;//[Offset: 0x0, Size: 4]
	int AdditionalItemID;//[Offset: 0x4, Size: 4]
	int SlotID;//[Offset: 0x8, Size: 4]
	int SubSlotID;//[Offset: 0xc, Size: 4]
	int HideState;//[Offset: 0x10, Size: 4]
	int ReplaceState;//[Offset: 0x14, Size: 4]
	int FakeItemID;//[Offset: 0x18, Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 1]
	enum OperationType;//[Offset: 0x1d, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 20]
	enum ForceHideState;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ForceEquipSlotInfo

--------------------------------
Class: TempAvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	AvatarTableData RelationData;//[Offset: 0x4, Size: 124]
	int[] ReplaceDesc;//[Offset: 0x80, Size: 12]
	int[] HideDesc;//[Offset: 0x8c, Size: 12]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: AvatarTableData
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	int[] HideFlags;//[Offset: 0x8, Size: 12]
	int[] ReplaceFlags;//[Offset: 0x14, Size: 12]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x20, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x2c, Size: 12]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x38, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x44, Size: 12]
	int[] ConflictConfig;//[Offset: 0x50, Size: 12]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x5c, Size: 12]
	int HideBoneSlotID;//[Offset: 0x68, Size: 4]
	int HideBoneType;//[Offset: 0x6c, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x70, Size: 12]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	MeshComponent* MeshComp;//[Offset: 0x4, Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0xc, Size: 36]

--------------------------------
Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 12]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0xc, Size: 12]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x68, Size: 12]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bAutoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]
	bool EnableCullDist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 1]
	float CullDist;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0xc, Size: 12]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18, Size: 24]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x30, Size: 12]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x3685ecc
	void AsyncLoadCustomAssetDone();// 0x3685eb8
	bool ApplyCustomInfo();// 0x36849c8

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20, Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28, Size: 8]
	void SetCustomID(int InCustomID);// 0x3685b40
	MeshComponent* GetOwnerMeshComp();// 0x3685b18
	ActorComponent* GetOwnerComp();// 0x3685af0
	bool ClearCustomInfo();// 0x3684a0c
	bool ApplyCustomInfo();// 0x36849c8

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0, Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 12]
	CustomMatColor[] ColorConfig;//[Offset: 0x14, Size: 12]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	float Scalar;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	LinearColor Color;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	Texture* Textrue;//[Offset: 0x10, Size: 40]
	FString TextruePath;//[Offset: 0x38, Size: 12]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c, Size: 4]
	int SubSlotID;//[Offset: 0x20, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28, Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 1]
	FName SocketName;//[Offset: 0x100, Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x108, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x148, Size: 60]
	void UpdateVisibility();// 0x35b64d4
	void UnRegisterTick();// 0x35b64b8
	void TickEntity();// 0x35b2914
	void SetSocketName();// 0x35b2140
	void SetParentDefineID(ItemDefineID ParentID);// 0x35b642c
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x35b6354
	void RevertEntityMeshData();// 0x35b6340
	void RenderEntity(out SoftObjectPath SoftPath);// 0x35b6264
	void RegisterTick();// 0x35b6248
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x35b52c4
	void PutOnDefaultEquipment(enum SlotType);// 0x35b61c8
	void OnPostRender();// 0x35b61ac
	bool IsEntityAvailable(enum VisibilityType);// 0x35b6124
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x35b6058
	void Init(int SlotID, int SubSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x35b5f50
	enum GetMeshType();// 0x35b5f20
	MeshData GetMeshData();// 0x35b5ebc
	BattleItemHandleBase* GetLoadedHandle();// 0x35b5e94
	ItemDefineID GetDefineID();// 0x35b5e40
	void EnterRenderPipeline();// 0x35b5e24
	void EnterLogicPipeline();// 0x35b5e08
	void DrawOutline(bool bEnable);// 0x35b5d80
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x35b5c9c
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x35b5bd0
	void ClearEquipmentLogic(bool putDefault);// 0x35b5b48
	void ClearEntity(bool ForceClear);// 0x35b5ac0
	void ApplyAnimation();// 0x35b5aa4
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x35b5a24

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0xf0, Size: 1]
	enum SubSlot;//[Offset: 0xf1, Size: 1]
	enum specialType;//[Offset: 0xf2, Size: 1]
	enum ForceMeshType;//[Offset: 0xf3, Size: 1]
	enum ForceLODMeshType;//[Offset: 0xf4, Size: 1]
	<enum,int> SuitConfig;//[Offset: 0xf8, Size: 60]
	MeshPackage MeshPack;//[Offset: 0x138, Size: 568]
	MeshPackage replacedMeshPack;//[Offset: 0x370, Size: 568]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x5a8, Size: 12]
	enum[] hiddenFlags;//[Offset: 0x5b4, Size: 12]
	enum[] subHiddenFlags;//[Offset: 0x5c0, Size: 12]
	enum[] ReplaceFlags;//[Offset: 0x5cc, Size: 12]
	enum[] ignoreFlags;//[Offset: 0x5d8, Size: 12]
	AvatarPostOperation[] postOperation;//[Offset: 0x5e4, Size: 12]
	BackpackComponent* pBackpackComp;//[Offset: 0x5f0, Size: 4]
	int ItemCapacity;//[Offset: 0x5f4, Size: 4]
	int Durability;//[Offset: 0x5f8, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x604, Size: 36]
	enum hideBoneSlot;//[Offset: 0x628, Size: 1]
	FName hideBoneName;//[Offset: 0x630, Size: 8]
	FName[] hideBoneNameArray;//[Offset: 0x638, Size: 12]
	enum HideBoneType;//[Offset: 0x644, Size: 1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x648, Size: 60]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x684, Size: 12]
	int PendantConfigIndex;//[Offset: 0x690, Size: 4]
	float PendantScale;//[Offset: 0x694, Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x698, Size: 4]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x69c, Size: 12]
	byte CharacterAnimOverrideType;//[Offset: 0x6a8, Size: 1]
	AvatarAnimOverrideData[] CharacterAnimListAdditiveOverrideList;//[Offset: 0x6ac, Size: 12]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x6b8, Size: 64]
	BattleItemAdditionalData[] ArmorAttachmentAdditionalDataList;//[Offset: 0x6f8, Size: 12]
	ArmorAttachItemUnit[] CachedArmorAttachmentListBeforeDrop;//[Offset: 0x704, Size: 12]
	AvatarReAttachConfigCollection AvatarReAttachCollection;//[Offset: 0x710, Size: 12]
	bool bForceUseClothAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	CharacterEffectCfgBase*[] SkinEffectCfgs;//[Offset: 0x720, Size: 12]
	bool bEnableSelfForceLODInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	int ForceLODLevelInVehicle;//[Offset: 0x730, Size: 4]
	int RecoverDefaultLODOutVehicle;//[Offset: 0x734, Size: 4]
	void SetItemDurability(int InDurability);// 0x35d060c
	void SetItemCapacity(int InCapacity);// 0x35d0594
	void PreLocalHandleDisuse();// 0x35d0580
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x35d03f4
	bool IsSwimConfig();// 0x4a51734
	bool HasRibbon();// 0x35d03cc
	bool HasCustomInfo();// 0x35d03a4
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x35d02ac
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x35d0194
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x35cfe8c
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x35cfd48
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x35cfc48
	bool HandleMeshpackPostProcess(out const MeshPackage InMeshPack, out MeshPackage OutMeshPack, Object* Outer);// 0x35cfad0
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x35cfa04
	bool HandleEnable(bool bEnable);// 0x35cf974
	bool HandleDrop(int InCount, enum Reason);// 0x35cf8a8
	bool HandleDisuse(enum Reason);// 0x35b6124
	BackpackComponent* GetBackpackComponent();// 0x35cf880
	bool CheckOverrideAvatarAnimList(CharacterAvatarComponent2* InAvatarComp, bool bIsPutOn);// 0x35cf7ac
	bool CheckOverrideAvatarAdditiveAnimList(CharacterAvatarComponent2* InAvatarComp, bool bIsPutOn);// 0x35cf6d8
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity, enum Reason, enum DisuseReason);// 0x35cf580
	bool BPOnCharacterAttrChangedWithDetailEvent(float resultVal);// 0x35cf4f8
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason);// 0x35cf470
	void AutoEquipChips();// 0x35cf454

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* maleLODStMesh;//[Offset: 0x58, Size: 40]
	StaticMesh* femaleLODStMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0xd0, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xf8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0x120, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0x148, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x170, Size: 40]
	MaterialSet[] additionalMaleMats;//[Offset: 0x198, Size: 12]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1a4, Size: 12]
	MaterialInterface* baseMat;//[Offset: 0x1b0, Size: 4]
	class AnimInstance* animBP;//[Offset: 0x1b4, Size: 4]
	AnimSequence* LobbyIdleAnim;//[Offset: 0x1b8, Size: 40]
	bool bForceUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	enum EffectCreateType;//[Offset: 0x1e2, Size: 1]
	AvatarEffectData[] EffectDataList;//[Offset: 0x1e4, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x1f0, Size: 12]
	class AnimInstance* animBPClass;//[Offset: 0x200, Size: 40]

--------------------------------
Class: AssetPackage

--------------------------------
Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0, Size: 40]
	enum targetSlot;//[Offset: 0x28, Size: 1]
	MaterialInterface* targetBaseMat;//[Offset: 0x30, Size: 40]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	enum ValidMethod;//[Offset: 0x68, Size: 1]
	enum ValidDevice;//[Offset: 0x69, Size: 1]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool bIsActivateWithMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 1]
	bool IsLobbyActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x70, Size: 12]
	ParticleSystem* ParticleSystem_F;//[Offset: 0x80, Size: 40]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName AttachSocket;//[Offset: 0x40, Size: 8]
	FName SlotName;//[Offset: 0x48, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]

--------------------------------
Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0, Size: 1]
	enum operationWhenReplaced;//[Offset: 0x1, Size: 1]
	enum operationWhenHidden;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 12]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc, Size: 12]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 12]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x4, Size: 4]
	UAECharAnimListCompBase* AnimListCompInstance;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x17c, Size: 12]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x114, Size: 60]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x150, Size: 12]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x4, Size: 12]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x10, Size: 72]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 12]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0xc, Size: 60]

--------------------------------
Class: ArmorAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum SlotAdditionalType;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AvatarReAttachConfigCollection
	ReAttachConfig[] AvatarReAttachList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ReAttachConfig
	enum ReAttachSlot;//[Offset: 0x0, Size: 1]
	enum TriggerSlot;//[Offset: 0x1, Size: 1]
	int Priority;//[Offset: 0x4, Size: 4]
	bool bForceRecreateAdaptSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum SlotAdaptSpace;//[Offset: 0x9, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	bool bForceRecreateAdaptAssociatedSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	enum AssociatedSlotAdaptSpace;//[Offset: 0x41, Size: 1]
	Transform AssociatedSlotAdaptTransform;//[Offset: 0x50, Size: 48]
	enum[] AssociatedSlotList;//[Offset: 0x80, Size: 12]
	<FName,Transform> WingClothScaleTransformMap;//[Offset: 0x8c, Size: 60]

--------------------------------
Class: CharacterEffectCfgBase.Object
	enum TriggerCondition;//[Offset: 0x1c, Size: 1]
	int MaxApplyCount;//[Offset: 0x20, Size: 4]
	int IntParam1;//[Offset: 0x24, Size: 4]
	enum ValidScene;//[Offset: 0x28, Size: 1]
	bool OnlyValidInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool EnableLowDeviceOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	void RemoveEffect(CharacterAvatarComponent2* InAvatarComp);// 0x35bccf4
	bool ReachedMaxTriggerTime();// 0x3658268
	void Init();// 0x365824c
	bool ApplyEffect(CharacterAvatarComponent2* InAvatarComp);// 0x3657288

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x35b38a0

--------------------------------
Class: AvatarSlotNameConfig
	<enum,FString> MaleSlotName;//[Offset: 0x0, Size: 60]
	<enum,FString> FemaleSlotName;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24, Size: 12]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x35d1f50
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x35d1e94
	void ModifySlotMatColorArray(int ArrayIndex, out const SlotToMatColor InSlotToMatColor);// 0x35d1d1c
	void ModifyMaskGrayTexture(int ArrayIndex, Texture* InTexture);// 0x35d1b54
	void ModifyMaskColor(int ArrayIndex, out const LinearColor[] InColorArray);// 0x35d1a44
	void ModifyGrayScale(int ArrayIndex, float InGrayScale);// 0x35d1988

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c, Size: 8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x35d1374
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x35d126c
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x35d1158
	CharacterAvatarComponent2* GetOwnerComponent();// 0x35d1130

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0, Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x4, Size: 12]
	float GrayScale;//[Offset: 0x10, Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x18, Size: 40]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24, Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30, Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48, Size: 24]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x35d28d4
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x35d2818
	bool IsPatternNumMode();// 0x35d27f0
	void InitPatternNumID(int InNumID);// 0x35d277c
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x4a51734

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0, Size: 1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 40]
	float IconScale;//[Offset: 0x30, Size: 4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 40]
	float IconScale;//[Offset: 0x60, Size: 4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 16]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 12]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int LODLevel;//[Offset: 0x0, Size: 4]
	int SkipFrame;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AdditonalAvatarStruct
	int ItemId;//[Offset: 0x0, Size: 4]
	int[] SlotIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: FakeHeadInfo
	bool bEnableFakeHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SkeletalMesh* SoftFakeHeadMesh;//[Offset: 0x8, Size: 40]
	class AnimInstance* FakeHeadAnimBPClass;//[Offset: 0x30, Size: 4]

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 24]
	int UpdateFlag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0, Size: 8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8, Size: 24]
	SoftObjectPath MatBasePath;//[Offset: 0x20, Size: 24]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0x100, Size: 512]
	class AnimInstance* animBP;//[Offset: 0x300, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x308, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x330, Size: 12]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x33c, Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x348, Size: 4]
	delegate OnEquipOrUnEquipToWeaponDelegate;//[Offset: 0x34c, Size: 12]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x3608414
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x36083f8
	void OnEquipOrUnEquipToWeaponDelegate__DelegateSignature(STExtraWeapon* Weapon, bool bIsEquip);// 0x4a51734
	bool IsVirtualAvatarHandle();// 0x36083c8
	void HandleEquipOrUnEquipToWeaponDelegate(STExtraWeapon* Weapon, bool bIsEquip);// 0x36082fc
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x3608284
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x36081b0
	int GetSubSlotID();// 0x3608180
	int GetSlotID();// 0x357220c
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x3608114
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x3607f4c
	WeaponAttachmentConfig GetAttachmentConfig();// 0x3607ee0
	class Object GetAnimationBP();// 0x3607eb0
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x3607d9c

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc, Size: 1]
	enum SubSlot;//[Offset: 0xd, Size: 1]
	enum SightType;//[Offset: 0xe, Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x14, Size: 12]
	WeaponAttachmentAttrListModifyWrapper[] SpecialWeaponAttachmentAttrModifys;//[Offset: 0x20, Size: 12]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x2c, Size: 12]
	<int,FName> socketTypeToName;//[Offset: 0x38, Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x78, Size: 328]
	WeaponMeshCfg[] ExtMeshList;//[Offset: 0x1c0, Size: 12]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1cc, Size: 12]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x1d8, Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1e8, Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 40]

--------------------------------
Class: WeaponAttachmentAttrListModifyWrapper
	int WeaponId;//[Offset: 0x0, Size: 4]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 12]
	FText DescValue;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 12]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 328]
	WeaponMeshCfg[] ExtReplacedAttachmentCfgList;//[Offset: 0x158, Size: 12]
	int replacedAttachmentMatIndex;//[Offset: 0x164, Size: 4]
	AnimationAsset*[] replacedAttachmentAnimList;//[Offset: 0x168, Size: 12]

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 1]
	int PendantIndex;//[Offset: 0x4, Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 96]

--------------------------------
Class: WeaponPendantMap
	int WeaponId;//[Offset: 0x0, Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VHSeatCharacterCameraOffsetData
	bool bAttachAtRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector SocketOffset;//[Offset: 0x4, Size: 12]
	Vector TargetOffset;//[Offset: 0x10, Size: 12]
	float SpringArmLength;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 12]
	int[] BorrowedSeat;//[Offset: 0xc, Size: 12]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	float HitSelfModifier;//[Offset: 0x324, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x328, Size: 4]
	float HitOthersModifier;//[Offset: 0x32c, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x330, Size: 4]
	float HitCharacterModifier;//[Offset: 0x334, Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x150, Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x154, Size: 4]
	float ImpactModifier;//[Offset: 0x158, Size: 4]
	float ImpactAbsorption;//[Offset: 0x15c, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0x160, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0x164, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x168, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x16c, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x170, Size: 4]
	class Actor[] HitIgnoreClasses;//[Offset: 0x174, Size: 12]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x184, Size: 4]
	float PushCharacterRightVectorStrength;//[Offset: 0x188, Size: 4]
	float PushCharacterTopVectorStrength;//[Offset: 0x18c, Size: 4]
	float ApplyImpluseSpeed;//[Offset: 0x190, Size: 4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x194, Size: 60]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x1d0, Size: 4]
	float DamageCharacterCD;//[Offset: 0x1d4, Size: 4]
	float PassengerProtectTime;//[Offset: 0x1d8, Size: 4]
	float DamageSelfCD;//[Offset: 0x1e0, Size: 4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	float HitDamageSelfMaxFactor;//[Offset: 0x1ec, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x1f0, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x1f8, Size: 4]
	float DamageReduce;//[Offset: 0x1fc, Size: 4]
	float fHitEventInterval;//[Offset: 0x200, Size: 4]
	delegate OnVehicleHitOthers;//[Offset: 0x208, Size: 12]
	bool bEnableVehicleExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	bool bShouldPlayExplosionEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 1]
	float ExplosionBaseDamage;//[Offset: 0x218, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x21c, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x220, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x224, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x228, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x22c, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x230, Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x238, Size: 4]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x23c, Size: 60]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x27c, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x284, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x290, Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x2d4, Size: 4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x2d8, Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x2e0, Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x2e8, Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x2ec, Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x2f0, Size: 4]
	float DotProductRearThreshold;//[Offset: 0x2f4, Size: 4]
	float ImpactModifierFront;//[Offset: 0x2f8, Size: 4]
	float ImpactModifierRear;//[Offset: 0x2fc, Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x300, Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x304, Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x308, Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x310, Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x314, Size: 4]
	bool bDebugVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x31c, Size: 60]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	float CustomImpulseCooldownTime;//[Offset: 0x35c, Size: 4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x360, Size: 60]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x39c, Size: 32]
	float OverlapPushSimpleCharacterMinSpeed;//[Offset: 0x3bc, Size: 4]
	float OverlapHitSimpleCharacterMinSpeed;//[Offset: 0x3c0, Size: 4]
	float ServerValidateDistance;//[Offset: 0x3c4, Size: 4]
	Vector DefaultVehicleHitBoxExtent;//[Offset: 0x3c8, Size: 12]
	<enum,Vector> VehicleHitBoxExtents;//[Offset: 0x3d4, Size: 60]
	float ResponseSimpleCharacterRate;//[Offset: 0x410, Size: 4]
	float ResponseSimpleCharacterAccumulate;//[Offset: 0x414, Size: 4]
	void TickHandleSimpleCharacterOverlap(float DeltaSeconds);// 0x3b1c328
	void ServerHandleOnVehicleResponseSimpleCharacter(STExtraSimpleCharacter* OtherActor, Vector NormalImpulse, float HitSpeed, bool bChangeState);// 0x3b1c174
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x3b1c030
	bool ScriptShouldCauseDamage(float InDamage, PrimitiveComponent* InPrimComp, STExtraBaseCharacter* InCharacter);// 0x4a51734
	void OnVehicleOverlapSimpleCharacter(STExtraSimpleCharacter* OverlappedTarget);// 0x3b1bfb0
	void OnVehicleHitSimpleCharacter(STExtraSimpleCharacter* OtherActor, PrimitiveComponent* PrimVehicle, PrimitiveComponent* PrimOther, Vector NormalImpulse, out const HitResult Hit);// 0x3b1bdc8
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3b1bbd0
	void HandleOnVehicleResponseSimpleCharacter(STExtraSimpleCharacter* OtherActor, Vector NormalImpulse, float HitSpeed, bool bChangeState);// 0x3b1ba78
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3b1b8d4
	bool GetOverlappedSimpleCharacter(out STExtraSimpleCharacter*[] OverlappedSimpleCharacter);// 0x3b1b800

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 12]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0xc, Size: 12]
	class DamageType* DamageType;//[Offset: 0x18, Size: 4]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]

--------------------------------
Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 4]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0x8, Size: 4]
	float MaxImpulseDamage;//[Offset: 0xc, Size: 4]
	float ImpulseStrength;//[Offset: 0x10, Size: 4]
	float RadialImpulseStrength;//[Offset: 0x14, Size: 4]
	float ImpulseRadius;//[Offset: 0x18, Size: 4]
	byte ImpulseFalloffType;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0xd90, Size: 4]
	int ForceLifePeriodTime;//[Offset: 0xd94, Size: 4]
	bool bClientRegionForceClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd98, Size: 1]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd99, Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9a, Size: 1]
	delegate OnDeath;//[Offset: 0xd9c, Size: 12]
	float DelayHideDuration;//[Offset: 0xda8, Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0xdac, Size: 4]
	bool bForcePlayDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	float DelayHideDurationByHeadShoot;//[Offset: 0xdb4, Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0xdb8, Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0xdbc, Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0xdc0, Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0xdc4, Size: 4]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0xdc8, Size: 4]
	class PlayerTombBox* DropTomb;//[Offset: 0xdcc, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdd0, Size: 1]
	int MonsterSpawnTime;//[Offset: 0xdd4, Size: 4]
	int MonsterDeathTime;//[Offset: 0xdd8, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0xddc, Size: 4]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	float AnimBornLifeSpan;//[Offset: 0xde4, Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde8, Size: 1]
	float MaxBehaveRange;//[Offset: 0xdec, Size: 4]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0xdf0, Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0xdf4, Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0xdf8, Size: 4]
	float AnimActiveLifeSpan;//[Offset: 0xdfc, Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0xe14, Size: 88]
	bool bForceUseBPSenseConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6c, Size: 1]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xe70, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xe74, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xe78, Size: 4]
	float SensedRadius;//[Offset: 0xe7c, Size: 4]
	float SensedAngle;//[Offset: 0xe80, Size: 4]
	bool SenseEnemyWithLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe84, Size: 1]
	float MinTimeLockHeardEnemy;//[Offset: 0xe88, Size: 4]
	float HeardRadius;//[Offset: 0xe8c, Size: 4]
	float EnableAnimOnDSDistanceSq;//[Offset: 0xe90, Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xe94, Size: 4]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0xe98, Size: 4]
	MobPerceptionController* MobPerceptionController;//[Offset: 0xe9c, Size: 4]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0xea0, Size: 4]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0xea4, Size: 4]
	CircleMgrComponent* CircleMgr;//[Offset: 0xeb4, Size: 4]
	int SyncAIState;//[Offset: 0xeb8, Size: 4]
	float HitBoxRadius;//[Offset: 0xec0, Size: 4]
	int AIState;//[Offset: 0xec4, Size: 4]
	float StunDuration;//[Offset: 0xed0, Size: 4]
	float HurtAnimTime;//[Offset: 0xed4, Size: 4]
	float BackAnimPerc;//[Offset: 0xed8, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0xedc, Size: 4]
	delegate OnEnterAIState;//[Offset: 0xeec, Size: 12]
	delegate OnLeaveAIState;//[Offset: 0xef8, Size: 12]
	delegate OnBPEnterAIState;//[Offset: 0xf04, Size: 12]
	delegate OnBPLeaveAIState;//[Offset: 0xf10, Size: 12]
	delegate OnChangeAnimParam;//[Offset: 0xf1c, Size: 12]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0xf28, Size: 12]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0xf34, Size: 12]
	delegate OnCharacterHitPointDelgate;//[Offset: 0xf54, Size: 12]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 1]
	int FlowId;//[Offset: 0xf64, Size: 4]
	FString MonsterName;//[Offset: 0xf68, Size: 12]
	FString MonsterNameID;//[Offset: 0xf74, Size: 12]
	int MonsterSyncID;//[Offset: 0xf80, Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf84, Size: 1]
	int Gold;//[Offset: 0xf88, Size: 4]
	int SuperGold;//[Offset: 0xf8c, Size: 4]
	int[] BornSkill;//[Offset: 0xf90, Size: 12]
	int[] AloneSkillIdList;//[Offset: 0xf9c, Size: 12]
	int HealthBarCount;//[Offset: 0xfa8, Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfac, Size: 1]
	int NeedSendAttackFlow;//[Offset: 0xfb0, Size: 4]
	float TakeDamageScale;//[Offset: 0xfb4, Size: 4]
	float DamageScale;//[Offset: 0xfb8, Size: 4]
	Actor* AttackTarget;//[Offset: 0xfbc, Size: 8]
	bool bMobSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc4, Size: 1]
	int[] DecalIndexArray;//[Offset: 0xfc8, Size: 12]
	<byte,ParticleSystem*> ImpactFXMap;//[Offset: 0xfd4, Size: 60]
	<byte,AkAudioEvent*> ImpactSoundMap;//[Offset: 0x1010, Size: 60]
	byte HitPartJudgment;//[Offset: 0x104c, Size: 1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1050, Size: 60]
	BodyTypeDef StandBodyDef;//[Offset: 0x108c, Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0x1094, Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0x1098, Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0x109c, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0x10a0, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0x10a4, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0x10a8, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0x10ac, Size: 4]
	bool bMobIgnoreCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10b0, Size: 1]
	float[] CircleDamageRate;//[Offset: 0x10b4, Size: 12]
	int ObjectPoolSize;//[Offset: 0x10c0, Size: 4]
	int LifePeriodTime;//[Offset: 0x10c4, Size: 4]
	float KilledDisCircleEdge;//[Offset: 0x10c8, Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0x10cc, Size: 4]
	enum CustomMobRegionSize;//[Offset: 0x10d0, Size: 1]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0x10d4, Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d8, Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e0, Size: 1]
	Vector MobSvrBornLocation;//[Offset: 0x10e8, Size: 12]
	int RageLevel;//[Offset: 0x1108, Size: 4]
	float AloneRageTimerRate;//[Offset: 0x1114, Size: 4]
	float ImpluseScale;//[Offset: 0x1118, Size: 4]
	float ImpluseZScale;//[Offset: 0x111c, Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1120, Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1121, Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0x1124, Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0x1128, Size: 4]
	float MinDamageInterval;//[Offset: 0x112c, Size: 4]
	bool bImpulseBySidesWhenOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 1]
	float MovementTickInterval;//[Offset: 0x1134, Size: 4]
	float DsActorTickInterval;//[Offset: 0x1138, Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113c, Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0x1144, Size: 4]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0x1148, Size: 4]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0x114c, Size: 4]
	AkAudioEvent* MonsterRunSound;//[Offset: 0x1150, Size: 4]
	float NoPathToTargetTimer;//[Offset: 0x1154, Size: 4]
	enum AnimGroupMask;//[Offset: 0x1158, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1159, Size: 1]
	bool bEnableDSTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115a, Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1160, Size: 1]
	int ExplodeSkillID;//[Offset: 0x1164, Size: 4]
	float ExplodeSkillDuration;//[Offset: 0x1168, Size: 4]
	bool bDieAfterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116c, Size: 1]
	bool CloseCollisionForMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116d, Size: 1]
	AkComponent* SoundComp;//[Offset: 0x1170, Size: 4]
	float LagCompensationRecordInterval;//[Offset: 0x1240, Size: 4]
	float HearRadius;//[Offset: 0x1248, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0x124c, Size: 4]
	bool bIgnoreNetRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1254, Size: 1]
	bool bSimulateMovementByCharacterMovementComponentOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1255, Size: 1]
	bool bEnableSimulateSyncSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1256, Size: 1]
	bool bNotifyLuaDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1257, Size: 1]
	UAEMonsterAnimListComponentBase* MonsterAnimListComp;//[Offset: 0x1258, Size: 4]
	bool bUseBlockHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1278, Size: 1]
	float DefaultVehicleHitDamage;//[Offset: 0x127c, Size: 4]
	CurveFloat* VehicleSpeedDamageCurve;//[Offset: 0x1280, Size: 4]
	float VehicleHitDamageScale;//[Offset: 0x1284, Size: 4]
	float VehicleHitLaunchVelocityScale;//[Offset: 0x1288, Size: 4]
	float VehicleHitLaunchVelocityZOffset;//[Offset: 0x128c, Size: 4]
	float VehicleHitMinLaunchVelocity;//[Offset: 0x1290, Size: 4]
	float VehicleHitMaxLaunchVelocity;//[Offset: 0x1294, Size: 4]
	float VehicleHitInterval;//[Offset: 0x1298, Size: 4]
	float VehicleHitAccumulate;//[Offset: 0x129c, Size: 4]
	bool bEnableExtraMeleeHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a0, Size: 1]
	float MeleeAttackRecoverDuration;//[Offset: 0x12a4, Size: 4]
	bool bDisableCollisionWhenDisappear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a8, Size: 1]
	<class DamageType,MeleeAttackSetting> MeleeAttackHitSetting;//[Offset: 0x12ac, Size: 60]
	int[] MeleeAttackInterruptSkillID;//[Offset: 0x12e8, Size: 12]
	TimerHandle LeaveLaunchAirGroundHandle;//[Offset: 0x12f8, Size: 8]
	TimerHandle LeaveLaunchAirRiseUpHandle;//[Offset: 0x1300, Size: 8]
	bool bShouldFaceDirectionWhileLaunched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1308, Size: 1]
	byte[] IgnoreChannelOnLaunched;//[Offset: 0x130c, Size: 12]
	float MinLaunchAirGroundTime;//[Offset: 0x1318, Size: 4]
	float MaxLaunchAirGroundTime;//[Offset: 0x131c, Size: 4]
	float DelayCheckLaunchAirState;//[Offset: 0x1320, Size: 4]
	TimerHandle CheckLaunchAirStateTimerHandle;//[Offset: 0x1328, Size: 8]
	MonsterIdleIndex MonsterIdleIndex;//[Offset: 0x1330, Size: 8]
	delegate OnMonsterSetPlayedIdleIndex;//[Offset: 0x1338, Size: 12]
	delegate OnMonsterHurting;//[Offset: 0x1344, Size: 12]
	bool bCharAnimParamHasInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1350, Size: 1]
	MonsterAnimListComponent* MonsterAnimListComponent;//[Offset: 0x1354, Size: 4]
	FName DeadMontageSlotName;//[Offset: 0x1358, Size: 8]
	enum[] PauseLogicAIState;//[Offset: 0x1360, Size: 12]
	delegate OnMonsterSpawned;//[Offset: 0x136c, Size: 12]
	delegate OnMonsterRecycled;//[Offset: 0x1378, Size: 12]
	float ChangeCapsuleSize;//[Offset: 0x1384, Size: 4]
	bool TestPathSyncToLocation(Vector Location);// 0x3a320b0
	bool TestPathSyncToActor(Actor* Actor);// 0x3a32030
	void StopMovementMode();// 0x3a32014
	void StartMovementMode();// 0x3a31ff8
	void ShowHeadShootDeadEffect();// 0x3a31fe4
	void SetReplicateAliveSeconds(bool bReplicate);// 0x3a31f64
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x3a31eec
	bool ResumeAILogic();// 0x3a31ec4
	void ResetCharAnimParam();// 0x3a31eb0
	bool PauseAILogic();// 0x3a31e88
	void OnTakeMeleeAttackDamage(out const MeleeDamageEvent AttackEvent, Pawn* DamageCauser);// 0x3a31ce4
	void OnSmoothComponentSnapshotPreReplicate();// 0x3a31cd0
	void OnRep_SyncAIState();// 0x3a31cbc
	void OnRep_ReplicatedMovement();// 0x36b40f4
	void OnRep_RageLevel();// 0x3a31ca8
	void OnRep_MonsterSyncID();// 0x3a31c94
	void OnRep_MonsterNameID();// 0x3a31c80
	void OnRep_MonsterIdleIndex();// 0x3a31c6c
	void OnRep_IsLeftRightMove();// 0x3a31c50
	void OnRep_IdleBlendSpaceValue();// 0x3a31c3c
	void OnRep_ChangeCapsuleSize();// 0x39bdd80
	void OnLeaveLaunchAirFlyState();// 0x3a31c20
	void OnEnterLaunchAirFlyState();// 0x3a31c04
	void NotifyInitial();// 0x3a31bf0
	void MulticastPlayerSoundByID(int SoundID);// 0x3a31b3c
	void LeaveLaunchAirRiseUp();// 0x3a31b28
	void LeaveLaunchAirGround();// 0x3a31b14
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x3a31a50
	void LaunchCharacterWithParam(Vector LaunchVelocity, bool bChangeState);// 0x3a3198c
	void K2_ClientHandleVehicleResponse(STExtraVehicleBase* OtherVehicle, Vector HitImpulseDirection, float HitSpeed);// 0x3a31880
	bool IsSameTeam(Pawn* Other);// 0x3920a88
	bool IsPlayingDeadMontage();// 0x3a31858
	bool IsInActiveState();// 0x3a31830
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x3a31744
	bool IsCanCopyBone();// 0x3a3171c
	bool IsBoss();// 0x3a316f4
	bool IsBigBoss();// 0x3a316cc
	bool IsBehemoth();// 0x3a316a4
	void InterruptAttackSkill();// 0x3a31690
	void InitVehicleHitStuff();// 0x3a31674
	void InitCharAnimParam();// 0x3a31660
	bool HasAnyAIState(out const enum[] AIStates);// 0x3a3158c
	bool HasAIState(enum NewState);// 0x3a3150c
	bool HandleVehicleHit(STExtraVehicleBase* OtherVehicle, Vector HitImpulseDirection, float HitSpeed, bool bChangeState);// 0x3a313a8
	void HandleRagDollState(Controller* Killer, Actor* DamageCauser, out const HitResult HitInfo, out const Vector HitImpulseDir, out const DamageEvent DamageEvent);// 0x3a31184
	void HandleOnLaunchAirState(byte PrevMovementMode, byte PreviousCustomMode);// 0x3a310c8
	void HandleHitByBullet(Actor* Causer);// 0x3a31050
	void GotoEarthAndDie();// 0x3917ca8
	Vector GetVelocity();// 0x3a31000
	AkComponent* GetSoundComponent();// 0x3a30fd8
	Vector GetServerHeadLocation();// 0x3a30f90
	STExtraPlayerController* GetPlayerControllerSafety();// 0x391e0a4
	int GetMonsterType();// 0x3a30f74
	FString GetMonsterName();// 0x3a30eac
	MonsterAnimListComponent* GetMonsterAnimListComponent();// 0x3a30e84
	float GetHitBoxRadius();// 0x3a30e68
	ExFootIKComponent* GetExFootIKComponent();// 0x3a30e38
	class PlayerTombBox GetDropTomb();// 0x3a30e08
	int GetDeactiveMonsterCount();// 0x3a30de0
	byte GetCurHitPartJugementType();// 0x3a30db8
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x3a30d90
	SimpleCharAnimParamList GetAnimParam();// 0x3a30d04
	int GetAliveTimeSeconds();// 0x3a30ce8
	int GetActiveMonsterCount();// 0x3a30cc0
	void FaceAttackerWithTimeline(Rotator TargetRotation);// 0x3a30c48
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x3a30898
	void EnterAIState(enum NewState, bool bIsNotify);// 0x3a307d4
	void EnableDSAnim(bool bEnable);// 0x3a30754
	void DoHurting(byte HurtType, Vector HurtDir, float CauseDamage, int CauseSkillID);// 0x3a30600
	void DisappearOnDeath();// 0x3a305ec
	void DieAfterExplode();// 0x3a305d8
	void DelayHidden();// 0x391a74c
	void ClearOnDeath(Controller* EventInstigator, out const DamageEvent DamageEvent);// 0x3a304f8
	bool CheckPlayerNeedUpdateAnimation();// 0x3a304d0
	void CheckLaunchAirState();// 0x3a304bc
	bool CheckCanResponseVehicle();// 0x3a30494
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x3a30388
	void ChangeSourceType(byte NewSourceType);// 0x3a30310
	bool CanHearSoundInPos(out const Vector Pos, Actor* SourceActor);// 0x3a30234
	float CalcVehicleHitDamage(STExtraVehicleBase* OtherVehicle, Vector HitImpulseDirection, float HitSpeed);// 0x3a30120
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x3a30010
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x3a2ff00
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2fc24
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2f8cc
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2f5f0
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2f314
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2eff0
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2ed14
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2ea38
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2e75c
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2e440
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x3a2e0e8
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x3a2df54
	void BroadcastClientsDebugSpeed(float Speed);// 0x3a2dea0
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x3a2ddec
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x4a51734
	void BPPreRespawned();// 0x3904398
	void BpOnTakeMeleeAttackDamage(Pawn* Attacker, class DamageType DamageType);// 0x3a2dd28
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4a51734
	void BPNotifyInitial();// 0x4a51734
	void BPNotifyDisappearOnDeath();// 0x4a51734
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4a51734
	void BPMonsterInitTableDone();// 0x4a51734
	bool BpHasAnyAIState(out const enum[] AIStates);// 0x3a2dc54
	byte BPGetReplicatedMovementMode();// 0x3a2dc38
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3a2dac4
	enum BpAIState2AIState(enum InState);// 0x3a2da44
	bool BP_HasAIState(enum NewState);// 0x3a2d9c4
	RoadPointInfo[] BleCallGetRoadPoints();// 0x3a2d8fc
	bool AllowAIState(enum NewState);// 0x3a2d87c
	enum AIState2BpAIState(enum InState);// 0x3a2d7fc
	void AddWeaponDamageAddition(byte WeaponType);// 0x3a2d784

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0, Size: 12]
	Vector movedir;//[Offset: 0xc, Size: 12]
	byte MovementMode;//[Offset: 0x18, Size: 1]
	Rotator ViewRotation;//[Offset: 0x1c, Size: 12]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector HurtDir;//[Offset: 0x2c, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int RandomAnimID;//[Offset: 0x40, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0x44, Size: 4]
	float AdditiveYaw;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xc4, Size: 56]
	RepSnapshot Snapshot;//[Offset: 0xfc, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x134, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x138, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x13c, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x140, Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x144, Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x148, Size: 4]
	float FindFloorUpOffset;//[Offset: 0x14c, Size: 4]
	float FindFloorDownOffset;//[Offset: 0x150, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x154, Size: 4]
	bool bUseFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	byte TraceFloorChannel;//[Offset: 0x159, Size: 1]
	int CurrentDeviceLevel;//[Offset: 0x15c, Size: 4]
	int FindFloorDeviceLevel;//[Offset: 0x160, Size: 4]
	bool bForceRepSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	delegate OnSnapshotPreReplicate;//[Offset: 0x168, Size: 12]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x178, Size: 220]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 1]
	bool bOnlyUpdateLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 1]
	bool bOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool bSimulatedProxyOnlyUpdateLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	bool bSimulatedProxyOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 1]
	bool bAutonomousProxyEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 1]
	bool bIsReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x260, Size: 12]
	bool bEnableTurnAnimationNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	float MoveMaxSpeedWhenTuring;//[Offset: 0x270, Size: 4]
	bool bAutoUpdateVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	float TurnThreshold;//[Offset: 0x29c, Size: 4]
	CurveFloat* TurnTimeCurve;//[Offset: 0x2a0, Size: 4]
	float TurnSpeed;//[Offset: 0x2a4, Size: 4]
	void TeleportNextSync();// 0x387268c
	void StopPredict();// 0x3872678
	void SetVelocity(out const Vector Velocity);// 0x38725f4
	void SetEnable(bool bInEnable, bool bForceReinit);// 0x3872524
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x3872424
	void OnRep_Snapshot();// 0x3872410
	Vector GetVelocity();// 0x38723c8
	bool GetEnable();// 0x38723ac
	Vector FindFloor(const Vector InLocation);// 0x3872318

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 12]
	Rotator_NetQuantize Rotation;//[Offset: 0x10, Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c, Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28, Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: Rotator_NetQuantize.Rotator

--------------------------------
Class: SimulateSyncSmooth
	float LocErrorTolerance;//[Offset: 0x0, Size: 4]
	float RotErrorTolerance;//[Offset: 0x4, Size: 4]
	float MaxPredictMoveTime;//[Offset: 0x8, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0xc, Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x10, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0xc4, Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0xc8, Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0xcc, Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0xd0, Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0xd4, Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0xd8, Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0xdc, Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0xe0, Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0xe4, Size: 4]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0xe8, Size: 4]
	float WallJump_JumpSpeed;//[Offset: 0xec, Size: 4]
	float WallJump_JumpAngle;//[Offset: 0xf0, Size: 4]
	float WallJump_ZVelocity;//[Offset: 0xf4, Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0xf8, Size: 4]
	float Stride_Duration;//[Offset: 0xfc, Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0x100, Size: 4]
	float Stride_HeightOffset;//[Offset: 0x104, Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x108, Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x10c, Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x110, Size: 4]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x114, Size: 4]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	int iWallClimbState;//[Offset: 0x11c, Size: 4]
	int iWallJumpState;//[Offset: 0x120, Size: 4]
	int iStrideState;//[Offset: 0x124, Size: 4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x3775980
	void WallJump(Vector DstLocation);// 0x3775910
	void WallClimbExit();// 0x37758fc
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x37757f4
	void TickWallJump_Turn(float DeltaTime);// 0x377577c
	void TickWallJump(float DeltaTime);// 0x3775704
	void TickWallClimb_Turn(float DeltaTime);// 0x377568c
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x3775614
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x377559c
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x3775524
	void TickWallClimb(float DeltaTime);// 0x37754ac
	void TickStride_Turn(float DeltaTime);// 0x3775434
	void TickStride_Stride(float DeltaTime);// 0x37753bc
	void TickStride_MoveToWall(float DeltaTime);// 0x3775344
	void TickStride(float DeltaTime);// 0x37752cc
	void StrideJump();// 0x37752b8
	void StrideExit();// 0x37752a4
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x37751cc
	void OnMobDie();// 0x37751b8
	void NotifyClientsWallClimbSyncState(Vector Pos, Rotator Rotator, int nowWallClimbState);// 0x37750ac
	void NotifyClientsWallClimbStartClimbToStand(Vector Pos, Rotator Rotator, int nowWallClimbState);// 0x3774fa0
	void NotifyClientsStrideState(Vector Pos, Rotator Rotator, int nowStrideState);// 0x3774e94
	void NotifyClientsStartStride(Vector Pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x3774c40
	bool IsInAdvancedMovement();// 0x3774c18
	int GetWallJumpState();// 0x3774bf0
	int GetWallClimbState();// 0x3774bc8
	int GetStrideState();// 0x3774ba0
	void BPWallJump(Vector DstLocation);// 0x3774b28
	void BPWallClimb(Vector DstLocation);// 0x3774ab0

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0xc4, Size: 4]
	enum[] AcceptableNoiseType;//[Offset: 0xc8, Size: 12]
	enum NoiseAttenuationModel;//[Offset: 0xd4, Size: 1]
	int NoisePoolSize;//[Offset: 0xd8, Size: 4]
	float NoiseRememberTime;//[Offset: 0xdc, Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0xe0, Size: 4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x3777c34
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x3777b24
	void OnMobDie();// 0x3777b10
	void ClearNoisePool();// 0x3777b10
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x3777970
	float Attenuation(out AIStimulus Stimulus);// 0x37777d8
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x37775bc

--------------------------------
Class: NoiseInfo
	enum NoiseType;//[Offset: 0x0, Size: 1]
	Actor* Instigator;//[Offset: 0x4, Size: 8]
	Vector NoiseLocation;//[Offset: 0xc, Size: 12]
	float LoudnessAtStart;//[Offset: 0x18, Size: 4]
	float LoudnessHeard;//[Offset: 0x1c, Size: 4]
	float HeardTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum NoiseType;//[Offset: 0x1, Size: 1]
	float LoudnessHeard;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0xc4, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0xc8, Size: 4]
	float StepHeight;//[Offset: 0xcc, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0xd0, Size: 4]
	float VehicleImpluseScale;//[Offset: 0xd4, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0xd8, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xdc, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x11c, Size: 4]
	bool StopSkillSimulate();// 0x3a3a354
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x3a3a288
	void SetVelocity(Vector InVelocity);// 0x3a3a218
	void SetSimulatePhysics(bool bInEnabled);// 0x3a3a19c
	void SetEnabled(bool InEnabled);// 0x3a3a120
	void SetCharacterMovementActive(bool _bIsActive);// 0x3a3a0a0
	bool IsOnGround();// 0x3715d4c
	Vector GetVelocity();// 0x3a3a058
	bool FindGround();// 0x3a3a030
	void AddVelocity(Vector InVelocity);// 0x3a39fc0
	void ActivatePhysics();// 0x3a39fac

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0xc4, Size: 1]
	byte Type;//[Offset: 0xc5, Size: 1]
	int TypeId;//[Offset: 0xc8, Size: 4]
	void SetActorVisible(bool bEnable);// 0x3616c7c

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool bAutoAdaptShootingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28e8, Size: 1]
	float ShootingBoxScaleFactor;//[Offset: 0x28ec, Size: 4]
	Vector2D MovementProtectFactorXY;//[Offset: 0x28f0, Size: 8]
	Vector2D MovementProtectFactorZ;//[Offset: 0x28f8, Size: 8]
	float SimulatedCharacterServerTime();// 0x363b1b0
	enum ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* Shooter, out const BulletHitInfoUploadData ShootData);// 0x382b8c0
	void AutoAdaptShootingBox();// 0x382b8ac

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float KeepStillMinTime;//[Offset: 0x370, Size: 4]
	float StillMaxSpeed;//[Offset: 0x374, Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x378, Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x384, Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x390, Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x39c, Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x3a8, Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x3b4, Size: 12]
	float WeaponOffsetStillScale;//[Offset: 0x3c0, Size: 4]
	float StandStilDynamicScale;//[Offset: 0x3c4, Size: 4]
	Vector StandStillBoundBoxExtentPicth;//[Offset: 0x3c8, Size: 12]
	Vector StandStillHeadBoundBoxExtentPicth;//[Offset: 0x3d4, Size: 12]
	Vector CrouchStillBoundBoxExtentPicth;//[Offset: 0x3e0, Size: 12]
	Vector CrouchStillHeadBoundBoxExtentPicth;//[Offset: 0x3ec, Size: 12]
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x3f8, Size: 44]
	static void RecordShootVerifyStatType(STExtraCharacter* Shooter, STExtraShootWeapon* Weapon, byte StatType);// 0x374d4c0
	static void RecordShootVerifyFailed(STExtraCharacter* Shooter, byte FailedReason);// 0x374d40c
	void PostServerMoveDelegate();// 0x374d3f8

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool GM_VerifyProjectileBulletPosBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	float TolDistanceBulletPosNoBlock;//[Offset: 0xc8, Size: 4]
	float TolDistanceBulletPosBlock;//[Offset: 0xcc, Size: 4]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool bVerifyMuzzleImpactDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bVerifyMuzzleImpactDirIgnoreCrawl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bVerifyShootPosInHistory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bVerifyMuzzleLocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	bool bVerifyShooterHead2PosIsBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 1]
	int TolerateMuzzleAndCharacterDisSquare;//[Offset: 0xe4, Size: 4]
	int TolerateMuzzleAndVehicleDisSquare;//[Offset: 0xe8, Size: 4]
	float TolerateShootPointDistanceSqured;//[Offset: 0xec, Size: 4]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0xf0, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xf4, Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0xfc, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x100, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x104, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x108, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x10c, Size: 4]
	float MaxGunPosLength;//[Offset: 0x110, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x114, Size: 4]
	float TolerateOwnerAndBulletDist;//[Offset: 0x118, Size: 4]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x11c, Size: 16]
	float TolerateBulletDirCheckDistance;//[Offset: 0x12c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x130, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x138, Size: 4]
	float TolerateShootRange;//[Offset: 0x13c, Size: 4]
	float TolerateHitDataDelayTime;//[Offset: 0x140, Size: 4]
	float TolerateHitDataDelayTimeShootCorner;//[Offset: 0x144, Size: 4]
	PingDifVerifyStr[] PingDifVerifyData;//[Offset: 0x148, Size: 12]
	PingDifVerifyStr[] PingDifVerifyDataAI;//[Offset: 0x154, Size: 12]
	VictimPingVerifyStr[] VictimPingVerifyData;//[Offset: 0x160, Size: 12]
	VictimPingVerifyStr[] VictimPingVerifyDataAI;//[Offset: 0x16c, Size: 12]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	float BonePointTorelate;//[Offset: 0x17c, Size: 4]
	float VerifyMuzImpDirIgnoreDis;//[Offset: 0x180, Size: 4]
	float TolMuzImpDir2BulletDir;//[Offset: 0x184, Size: 4]
	float TolMuzImpDir2ControlRot;//[Offset: 0x188, Size: 4]
	int VerifyMuzImpDirRecordTime;//[Offset: 0x18c, Size: 4]
	float TolShootPos2History;//[Offset: 0x190, Size: 4]
	float TolShootPos2History2;//[Offset: 0x194, Size: 4]
	int VerifyShootPosInHistoryRecordTime;//[Offset: 0x198, Size: 4]
	bool VerifyMuzzleLocusIgnoreFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	bool VerifyMuzzleLocusIgnoreShotGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d, Size: 1]
	float VerifyMuzzleLocusIgnoreDis;//[Offset: 0x1a0, Size: 4]
	float TolMuzLocusXMin;//[Offset: 0x1a4, Size: 4]
	float TolMuzLocusXMax;//[Offset: 0x1a8, Size: 4]
	float TolMuzLocusYMin;//[Offset: 0x1ac, Size: 4]
	float TolMuzLocusYMax;//[Offset: 0x1b0, Size: 4]
	float TolMuzLocusZMin;//[Offset: 0x1b4, Size: 4]
	float TolMuzLocusZMax;//[Offset: 0x1b8, Size: 4]
	float TolMuzLocusLengthMax;//[Offset: 0x1bc, Size: 4]
	float TolHead2ShootPosLength3;//[Offset: 0x1c0, Size: 4]
	float TolHead2ShootPosLength4;//[Offset: 0x1c4, Size: 4]
	float TolGun2ShootPosLength1;//[Offset: 0x1c8, Size: 4]
	float TolGun2ShootPosLength2;//[Offset: 0x1cc, Size: 4]
	float VerifyRecentMovementTorelateTime;//[Offset: 0x1d0, Size: 4]
	int VerifyRecentMovementTorelateNum1;//[Offset: 0x1d4, Size: 4]
	int VerifyRecentMovementTorelateNum2;//[Offset: 0x1d8, Size: 4]
	float ShootCornerMinLagTime;//[Offset: 0x1dc, Size: 4]
	float ShootCornerMaxDotValue;//[Offset: 0x1e0, Size: 4]
	float ShootCornerMinPingDiff;//[Offset: 0x1e4, Size: 4]
	float ShootCornerMinDisDiff;//[Offset: 0x1e8, Size: 4]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x1f0, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1f4, Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x1f8, Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x1fc, Size: 4]
	float TolerateVehicleDis;//[Offset: 0x200, Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x204, Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x208, Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x20c, Size: 4]
	float TolerateCharacterDis;//[Offset: 0x210, Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x214, Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x218, Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x21c, Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x220, Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x224, Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x228, Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x22c, Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x230, Size: 4]
	float TolerateNetDelay;//[Offset: 0x234, Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x238, Size: 4]
	float GrayWeaponAndShootAngle;//[Offset: 0x23c, Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x240, Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x244, Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x248, Size: 4]
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x24c, Size: 12]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0x258, Size: 12]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x264, Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x268, Size: 4]
	float fShootBoxMaxScaleInShootCorner;//[Offset: 0x26c, Size: 4]
	Character* CharacterOwner;//[Offset: 0x270, Size: 4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x274, Size: 24]
	Vector LastImpactPoint;//[Offset: 0x28c, Size: 12]
	bool CacheIsShooterPosBlockVictimPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool CacheIsShootPosBlockImpactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool CacheIsShootCornerSituation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	float CacheShootPingDiff;//[Offset: 0x2a8, Size: 4]
	float ShooterNetDelayMinSeconds;//[Offset: 0x2b0, Size: 4]
	float ShooterNetDelayMaxSeconds;//[Offset: 0x2b4, Size: 4]
	<enum,IndefiniteVerifyCfg> IndefiniteVerifyCfg;//[Offset: 0x2b8, Size: 60]
	<enum,int> IndefiniteVerifyPassCount;//[Offset: 0x2f4, Size: 60]
	<enum,int> IndefiniteVerifyFailCount;//[Offset: 0x330, Size: 60]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d, Size: 1]
	static float Stat_SimulatedCharacterServerTime(const Character* InChara);// 0x374ee0c
	float SimulatedCharacterServerTime();// 0x363b1b0
	void SetIndefiniteVerifyCfg(enum Type, int InCountThreshold, float InPercentThreshold);// 0x374ed0c
	float ServerLatestTransformUpdateTimeStamp();// 0x362c798
	float ServerLatestTimeStamp();// 0x35a9bc8
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x374ec28
	void OnCharacterStartInit();// 0x374ec14
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x374eb3c
	bool GetVictimPingVerifyData(float PingDif, out VictimPingVerifyStr OutData, bool IsAI);// 0x374ea1c
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x374e958
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x374e894
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x374e814
	bool GetPingDifVerifyData(float PingDif, out PingDifVerifyStr OutData, bool IsAI);// 0x374e6f4
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x374e630
	int GetIndefiniteVerifyCount(enum VerifyType, bool IsPass);// 0x374e564
	static float GetCharacterPredictionSeconds(const Character* InChara);// 0x374e4ec
	enum ConditionChanggeIndefiniteVerify(out const ShootVerifyParameter VerifyData, enum VerifyType);// 0x374e40c
	bool CheckIsShootCorner(out const ShootVerifyParameter VerifyData);// 0x374e374
	int ChangeIndefiniteVerifyCount(enum VerifyType, bool IsPass, int Var);// 0x374e260
	float AuthorityCharacterServerTime();// 0x374e238
	void AddVictimPingVerifyData(float MinPing, float MaxPing, float TorLagTime, float ShootCornerBoxScale, bool IsAI);// 0x374e0a0
	void AddPingDifVerifyData(float MinPing, float MaxPing, float TorLagTime, float ShootCornerBoxScale, bool IsAI);// 0x374df08

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0, Size: 4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PingDifVerifyStr
	float MinPingDif;//[Offset: 0x0, Size: 4]
	float MaxPingDif;//[Offset: 0x4, Size: 4]
	float TolLagTime;//[Offset: 0x8, Size: 4]
	float ShootCornerBoxScale;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VictimPingVerifyStr
	float MinPingDif;//[Offset: 0x0, Size: 4]
	float MaxPingDif;//[Offset: 0x4, Size: 4]
	float TolLagTime;//[Offset: 0x8, Size: 4]
	float ShootCornerBoxScale;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 2]
	uint16 NetDelay;//[Offset: 0xc, Size: 2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IndefiniteVerifyCfg
	int CountThreshold;//[Offset: 0x0, Size: 4]
	float PercentThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShootVerifyParameter
	STExtraShootWeapon* Weapon;//[Offset: 0x0, Size: 4]
	STExtraCharacter* Shooter;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UAEMonsterAnimListComponentBase.UAEAnimListComponentBase.ActorComponent.Object
	bool bCacheAnimAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b, Size: 1]
	MonsterAnimPhaseData[] MonsterAnimDatas;//[Offset: 0x17c, Size: 12]
	<byte,AnimationAsset*> MonsterAnimDatasMap;//[Offset: 0x188, Size: 60]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom1;//[Offset: 0x1c4, Size: 12]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom2;//[Offset: 0x1d0, Size: 12]
	delegate OnAnimLoadedFinished;//[Offset: 0x1dc, Size: 12]
	int RandomAnimID;//[Offset: 0x1e8, Size: 4]
	void OnAsyncLoadingFinished(MonsterAsyncloadAnimParams loadAnimParams);// 0x3a9de14
	MonsterAnimPhaseData GetMonsterAnimPhaseDataByType(byte PoseType);// 0x3a9dd28
	AnimationAsset* GetMonsterAnimByType(byte PoseType);// 0x3a9dca8

--------------------------------
Class: MonsterAnimPhaseData
	byte PosType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: MonsterAsyncloadAnimParams
	byte PosType;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MeleeAttackSetting
	float ImpulseLaunchScale;//[Offset: 0x0, Size: 4]
	float ImpulseLaunchZOffset;//[Offset: 0x4, Size: 4]
	bool bConsiderAttackerVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float MinAttackerVelocity;//[Offset: 0xc, Size: 4]
	float MaxAttackerVelocity;//[Offset: 0x10, Size: 4]
	float MaxVelocityInfluenceScale;//[Offset: 0x14, Size: 4]
	bool bShouldAffectZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: MonsterIdleIndex
	int PlayedIdleIndex;//[Offset: 0x0, Size: 4]
	int ForceReplicateTag;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MonsterAnimListComponent.CachedAnimListComponentBase.LuaActorComponent.ActorComponent.Object
	bool bEnableAutoCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f, Size: 1]
	MonsterAnimData* MonsterAnimDataAsset;//[Offset: 0x150, Size: 4]
	<FName,MonsterAnimCache> CachedAsset;//[Offset: 0x154, Size: 60]
	bool bIsLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bHasLoadingFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	void OnMonsterOwnerRespawned(STExtraSimpleCharacter* Monster);// 0x377ede4
	bool GetIsLoadingAnimAssets();// 0x377edc8
	void AutoCacheInstanceAnimVars(AnimInstance* Instance);// 0x377ed50

--------------------------------
Class: CachedAnimListComponentBase.LuaActorComponent.ActorComponent.Object
	bool bLoadAnimAssetsBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	bool bLoadAnimAssetsOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 1]
	void RequestLoadAnimAssets(FString Reason);// 0x363de74
	void OnAnimAssetsLoadingFinished(const FString Reason);// 0x363dd14
	BlendSpace1D* GetBlendSpace1D(FString AnimAssetName);// 0x363dc50
	BlendSpace* GetBlendSpace(FString AnimAssetName);// 0x363db8c
	AnimSequence* GetAnimSequence(FString AnimAssetName);// 0x363dac8
	AnimMontage* GetAnimMontage(FString AnimAssetName);// 0x363da04
	AnimationAsset* GetAnimAsset(out const FName AnimAssetName, FString Reason);// 0x363d8dc
	void ClearCachedAssets();// 0x363d8c0
	void CacheAnimInstanceAnimAssetVars(FString Reason);// 0x363d7fc

--------------------------------
Class: MonsterAnimData.DataAsset.Object
	MonsterAnimVarName[] AnimVarNames;//[Offset: 0x24, Size: 12]
	MonsterAnimAsset[] AnimAssets;//[Offset: 0x30, Size: 12]

--------------------------------
Class: MonsterAnimVarName
	FName AnimVarName;//[Offset: 0x0, Size: 8]
	FString Description;//[Offset: 0x8, Size: 12]

--------------------------------
Class: MonsterAnimAsset
	UAEBlackboardKeySelector AnimVarName;//[Offset: 0x0, Size: 8]
	AnimationAsset*[] AnimSoftPtr;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: MonsterAnimCache
	int LoadedIndex;//[Offset: 0x0, Size: 4]
	AnimationAsset* Asset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ExFootIKComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	float UpwardDetectionDistance;//[Offset: 0x678, Size: 4]
	float DownwardDetectionDistance;//[Offset: 0x67c, Size: 4]
	float DetectionSphereRadius;//[Offset: 0x680, Size: 4]
	byte DetectionCollisionChannel;//[Offset: 0x684, Size: 1]
	float InterpSpeed;//[Offset: 0x688, Size: 4]
	bool bEnableIKEffectorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool bEnableKEffectorOffsetMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	float ScaleOfPawn;//[Offset: 0x690, Size: 4]
	<FName,ExFootIKInfo> FootIKInfos;//[Offset: 0x694, Size: 60]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	float TickFrequencyPerSecond;//[Offset: 0x6d4, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	Vector IKEffectorOffsetMinValue;//[Offset: 0x6dc, Size: 12]
	void GetIKEffectorRotation(out Rotator OutIKEffectorRotation, out bool bOutIsValid, out const FName InFootIKName);// 0x36de9f0
	Vector GetIKEffectorOffsetMinValue();// 0x36de9c4
	void GetIKEffectorOffset(out Vector OutIKEffectorOffset, out bool bOutIsValid, out const FName InFootIKName);// 0x36de7e0

--------------------------------
Class: ExFootIKInfo
	FName IKBoneOrSocketName;//[Offset: 0x0, Size: 8]
	FName FixedBoneOrSocketName;//[Offset: 0x8, Size: 8]
	Vector IKBoneOrSocketOffset;//[Offset: 0x10, Size: 12]
	Vector IKEffectorOffset;//[Offset: 0x1c, Size: 12]
	Rotator IKEffectorRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x8, Size: 20]
	Vector Origin;//[Offset: 0x1c, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x28, Size: 12]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 4]
	float MinimumDamage;//[Offset: 0x4, Size: 4]
	float InnerRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	float DamageFalloff;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x150, Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x15c, Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x168, Size: 12]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x174, Size: 12]
	delegate OnHPPreChange;//[Offset: 0x180, Size: 12]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x18c, Size: 12]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x198, Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	<int,float> DamageFactor;//[Offset: 0x1a8, Size: 60]
	float HPMax;//[Offset: 0x1e4, Size: 4]
	float HP;//[Offset: 0x1e8, Size: 4]
	<enum,float> DamageScaleMap;//[Offset: 0x1ec, Size: 60]
	bool ShowHealthUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	int UGCHUDStatus;//[Offset: 0x22c, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x230, Size: 12]
	bool CanMaintained;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool CanGasCan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 1]
	float FuelMax;//[Offset: 0x240, Size: 4]
	float Fuel;//[Offset: 0x244, Size: 4]
	bool bCanOilInStation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool ShowFuelUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	int FuelIntervalCount;//[Offset: 0x24c, Size: 4]
	float DelayDestroySeconds;//[Offset: 0x254, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x258, Size: 4]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x25c, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x26c, Size: 12]
	VehicleDamageRecord[] DamageRecords;//[Offset: 0x278, Size: 12]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3b15788
	void TranslateFuelToReplicatedRatio();// 0x3b15774
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3b15568
	void TakeDamageByBoneNameInner(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3b1534c
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3b15130
	void SetUGCHUDStatus(int Status);// 0x3b150b8
	void SetHPMax(float InHPmax, bool bChangeHP);// 0x3b14ff4
	void SetHPFuel(float InHP, float InFuel);// 0x3b14f38
	void SetHP(float InHP);// 0x38169e8
	void SetFuelMax(float InFuelmax, bool bChangeFuel);// 0x3b14e74
	void SetFuel(float InFuel);// 0x3b14dfc
	void SetDelayDestroySeconds(float InSeconds);// 0x3b14d84
	void RPC_Multicast_VehicleTakeDamage(float Damage, int LeftHP, int DamageType, Actor* DamageCauser);// 0x3b14c34
	void RefreshWheelState();// 0x3b14c20
	void OnRep_WheelsCurrentHP();// 0x3b14c0c
	void OnRep_HP();// 0x3b14bf8
	void OnRep_Fuel();// 0x3b14be4
	bool NoFuel();// 0x3b14bbc
	void Maintenance(float addpercenthp, bool fixtire);// 0x3b14af8
	bool IsDontDamage();// 0x3b14adc
	bool IsDontConsumeFuel();// 0x3b14ac0
	bool IsDestroyed();// 0x3b14a98
	int GetWheelsHPNum();// 0x3b14a70
	float GetWheelHPMax(int WheelIdx);// 0x3b149f0
	float GetWheelHP(int WheelIdx);// 0x3b14970
	float GetVehicleHPMax();// 0x3b14948
	float GetVehicleHP();// 0x3b14920
	int GetUGCHUDStatus();// 0x3b148f8
	float GetFuelMax();// 0x3b148d0
	float GetFuelConsumeFactor();// 0x3b148a8
	float GetFuel();// 0x373bb44
	float GetDelayDestroySeconds();// 0x39b6644
	bool CanVehicleBeMaintence();// 0x3b1488c
	bool CanVehicleBeGasCan();// 0x3b14870
	void CalculateDestroyVehicleWheelFlow(Controller* Instigator);// 0x3b147f8

--------------------------------
Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleDamageRecord
	Controller* Instigator;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int DamageType;//[Offset: 0xc, Size: 4]
	int AdditionalParam;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	delegate OnContactWater;//[Offset: 0x2c0, Size: 12]
	delegate OnEnterWater;//[Offset: 0x2cc, Size: 12]
	bool bUseBuoyancyEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	OceanManager* OceanManager;//[Offset: 0x2dc, Size: 4]
	float MeshDensity;//[Offset: 0x2e0, Size: 4]
	float FluidDensity;//[Offset: 0x2e4, Size: 4]
	float FluidLinearDamping;//[Offset: 0x2e8, Size: 4]
	float FluidAngularDamping;//[Offset: 0x2ec, Size: 4]
	Vector VelocityDamper;//[Offset: 0x2f0, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x300, Size: 4]
	float TestPointRadius;//[Offset: 0x304, Size: 4]
	Vector[] TestPoints;//[Offset: 0x308, Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	bool SnapToSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x318, Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x324, Size: 12]
	bool bEnableZOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 1]
	float StayUprightStiffness;//[Offset: 0x334, Size: 4]
	float StayUprightDamping;//[Offset: 0x338, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x33c, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x34c, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x350, Size: 4]
	byte TickGroup;//[Offset: 0x354, Size: 1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x358, Size: 12]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x364, Size: 12]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x510, Size: 4]
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x748ee60
	void OnEnterWaterDelegate__DelegateSignature(bool IsUnderWater);// 0x4a51734
	void OnContactWaterDelegate__DelegateSignature(bool IsContactingWater);// 0x4a51734
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x748ede0
	bool IsFloatingOnWater();// 0x748edb8
	bool IsEntirelyUnderWater();// 0x748ed80
	bool IsContactedWater();// 0x748ed58
	void EndableUprightConstraint(bool bEnable);// 0x748ecd8
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x748ec0c

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	Vector GlobalWaveDirection;//[Offset: 0x314, Size: 12]
	float GlobalWaveSpeed;//[Offset: 0x320, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x324, Size: 4]
	float DistanceCheckAbove;//[Offset: 0x328, Size: 4]
	float DistanceCheckBelow;//[Offset: 0x32c, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x330, Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x33c, Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x348, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	float ModulationStartHeight;//[Offset: 0x350, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x354, Size: 4]
	float ModulationPower;//[Offset: 0x358, Size: 4]
	Landscape* Landscape;//[Offset: 0x35c, Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x360, Size: 4]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x388, Size: 12]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x39c, Size: 12]
	Vector[] WaterBoxExtends;//[Offset: 0x3a8, Size: 12]
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x7490224
	LinearColor GetHeightmapPixel(float U, float V);// 0x7490154

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x330, Size: 4]
	Guid LandscapeGuid;//[Offset: 0x334, Size: 16]
	Guid BoundingGuid;//[Offset: 0x344, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x354, Size: 8]
	int MaxLODLevel;//[Offset: 0x35c, Size: 4]
	float LODDistanceFactor;//[Offset: 0x360, Size: 4]
	byte LODFalloff;//[Offset: 0x364, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x368, Size: 4]
	float LODDistributionSetting;//[Offset: 0x36c, Size: 4]
	byte NearMaxLOD_Baked;//[Offset: 0x370, Size: 1]
	float NearFactor_Baked;//[Offset: 0x374, Size: 4]
	float NearExtent_Baked;//[Offset: 0x378, Size: 4]
	float FarFactor_Baked;//[Offset: 0x37c, Size: 4]
	float LandscapeRoughness;//[Offset: 0x380, Size: 4]
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	float[] ImproveLODValues;//[Offset: 0x388, Size: 12]
	byte NearMaxLOD;//[Offset: 0x394, Size: 1]
	float NearFactor;//[Offset: 0x398, Size: 4]
	float NearExtent;//[Offset: 0x39c, Size: 4]
	float FarFactor;//[Offset: 0x3a0, Size: 4]
	int StaticLightingLOD;//[Offset: 0x3a4, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x3a8, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x3ac, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b0, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x3b4, Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x3b8, Size: 4]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x3bc, Size: 60]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x3fc, Size: 12]
	float MinGrassWeightThreshold;//[Offset: 0x408, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x40c, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x410, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x414, Size: 4]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x418, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x420, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x428, Size: 12]
	LandscapeAOTextureDataAsset* LandscapeAOTextureDataAsset;//[Offset: 0x434, Size: 4]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x438, Size: 12]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x444, Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	float StaticLightingResolution;//[Offset: 0x49c, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a0, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a0, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4a0, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x4a1, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a2, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a2, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x4a4, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4a8, Size: 24]
	int CollisionMipLevel;//[Offset: 0x4c0, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x4c4, Size: 4]
	float CollisionThickness;//[Offset: 0x4c8, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x4d0, Size: 320]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x610, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x610, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x610, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x614, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x618, Size: 4]
	int NumSubsections;//[Offset: 0x61c, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x620, Size: 1]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x620, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x621, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x622, Size: 1]
	bool bUseLandscapeVT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x623, Size: 1]
	Texture2D* MaskTextureUsedByGrassClear;//[Offset: 0x624, Size: 4]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x5759aa8
	void ChangeLODDistributionSettingConsoleVariable();// 0x3628fb8
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x36ed0dc
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x3598478
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x5759a20

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x674, Size: 12]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x680, Size: 12]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x68c, Size: 12]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	float Width;//[Offset: 0x34, Size: 4]
	float SideFalloff;//[Offset: 0x38, Size: 4]
	float EndFalloff;//[Offset: 0x3c, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40, Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c, Size: 12]
	Box Bounds;//[Offset: 0x58, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74, Size: 4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20, Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40, Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54, Size: 12]
	Box Bounds;//[Offset: 0x60, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 4]
	float TangentLen;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x1c, Size: 12]
	StaticMesh* GrassMesh;//[Offset: 0x28, Size: 4]
	float GrassDensity;//[Offset: 0x2c, Size: 4]
	float PlacementJitter;//[Offset: 0x30, Size: 4]
	int StartCullDistance;//[Offset: 0x34, Size: 4]
	int EndCullDistance;//[Offset: 0x38, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 4]
	float GrassDensity;//[Offset: 0x4, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float PlacementJitter;//[Offset: 0xc, Size: 4]
	int StartCullDistance;//[Offset: 0x10, Size: 4]
	int EndCullDistance;//[Offset: 0x14, Size: 4]
	int MinLOD;//[Offset: 0x18, Size: 4]
	enum Scaling;//[Offset: 0x1c, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x20, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x28, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x30, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3b, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x674, Size: 4]
	int SectionBaseY;//[Offset: 0x678, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x67c, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x680, Size: 4]
	int NumSubsections;//[Offset: 0x684, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x688, Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x68c, Size: 4]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x690, Size: 60]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x6cc, Size: 24]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e4, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x6e8, Size: 12]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x6f4, Size: 12]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x700, Size: 60]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x73c, Size: 12]
	Texture2D*[] WeightmapTextures;//[Offset: 0x748, Size: 12]
	int VisibilityLayerChannel;//[Offset: 0x754, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x758, Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x760, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x770, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x780, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x790, Size: 4]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x794, Size: 60]
	FString VisibleVisibilityLayer;//[Offset: 0x7d0, Size: 12]
	Box CachedLocalBox;//[Offset: 0x7dc, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x7f8, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x814, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x824, Size: 12]
	int CollisionMipLevel;//[Offset: 0x830, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x834, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x838, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x83c, Size: 4]
	float StaticLightingResolution;//[Offset: 0x840, Size: 4]
	int ForcedLOD;//[Offset: 0x844, Size: 4]
	int LODBias;//[Offset: 0x848, Size: 4]
	int MobileVertexHoleMaxLOD;//[Offset: 0x84c, Size: 4]
	float[] LODDeltaVertex;//[Offset: 0x85c, Size: 12]
	float MaxDeltaVertex;//[Offset: 0x868, Size: 4]
	Guid stateID;//[Offset: 0x86c, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x87c, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x88c, Size: 4]
	FString OccluderMeshDataPath;//[Offset: 0x890, Size: 12]
	byte MobileBlendableLayerMask;//[Offset: 0x89c, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x8a0, Size: 4]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x8a4, Size: 60]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x8e0, Size: 12]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x8ec, Size: 4]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8f0, Size: 1]
	uint16[] CachedHeightData;//[Offset: 0x8f4, Size: 12]
	bool bUseLandscapeVT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900, Size: 1]
	bool bLandscapeVTNeedHeightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x901, Size: 1]
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x948, Size: 1]
	FName UsedOtherMaterialName;//[Offset: 0x960, Size: 8]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 12]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 4]
	byte WeightmapTextureIndex;//[Offset: 0x4, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x5, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28, Size: 4]
	float Hardness;//[Offset: 0x2c, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x674, Size: 12]
	int SectionBaseX;//[Offset: 0x680, Size: 4]
	int SectionBaseY;//[Offset: 0x684, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x688, Size: 4]
	float CollisionScale;//[Offset: 0x68c, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x690, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x694, Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x6a0, Size: 16]
	Box CachedLocalBox;//[Offset: 0x6b0, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x6cc, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x6f4, Size: 12]

--------------------------------
Class: LandscapeAOTextureDataAsset.DataAsset.Object
	uint32 DataSize;//[Offset: 0x20, Size: 4]
	byte[] LandscapeAOPlatformData;//[Offset: 0x24, Size: 12]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x898, Size: 12]
	int NumBuiltInstances;//[Offset: 0x8a4, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x8ac, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x8c8, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x8e4, Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x8f0, Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8fc, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x91c, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x920, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x941, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x944, Size: 4]
	bool ShowInstances(out const int[] InstanceIndices, out const Transform[] InstanceTransforms);// 0x669b7ac
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x669b6d0

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x7a4, Size: 12]
	int InstancingRandomSeed;//[Offset: 0x7b0, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x7b4, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x7b8, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x7bc, Size: 12]
	int[] RemovedInstances;//[Offset: 0x7c8, Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d5, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x834, Size: 4]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x838, Size: 60]
	int NumPendingLightmaps;//[Offset: 0x878, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x87c, Size: 12]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x66a7730
	bool ShowInstances(out const int[] InstanceIndices, out const Transform[] InstanceTransforms);// 0x669b7ac
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x66a7668
	int[] ReplaceAllInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0x66a74bc
	bool RemoveInstances(out const int[] InstanceIndices);// 0x669b6d0
	bool RemoveInstance(int InstanceIndex);// 0x396ac30
	bool HideInstance(out const int[] InstanceIndices);// 0x66a73e0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x66a7270
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x66a70b0
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x66a6f18
	int GetInstanceCount();// 0x66a6ef0
	void ClearInstances();// 0x38eea8c
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x66a6e10
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices, bool bMarkRenderStateDirty);// 0x66a6c10
	int AddInstance(out const Transform InstanceTransform);// 0x66a6b20

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x690, Size: 4]
	Vector Direction;//[Offset: 0x694, Size: 12]
	float SpeedValue;//[Offset: 0x6a0, Size: 4]
	float WaveForceMultiplier;//[Offset: 0x6a4, Size: 4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x6a8, Size: 12]
	float TimeScaleOffset;//[Offset: 0x6b4, Size: 4]
	float Offset;//[Offset: 0x6b8, Size: 4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	float SpeedAttenuationFromSpline;//[Offset: 0x6c0, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	float ZOffset;//[Offset: 0x6c8, Size: 4]
	float CellSizeX;//[Offset: 0x6cc, Size: 4]
	float CellSizeY;//[Offset: 0x6d0, Size: 4]
	<float,WaterBoxCell> Cells;//[Offset: 0x6d4, Size: 60]
	int KeyFactor;//[Offset: 0x710, Size: 4]

--------------------------------
Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 20]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 20]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 20]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 12]
	float WaveZ;//[Offset: 0xc, Size: 4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 12]
	float Speed;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x2c0, Size: 4]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2c8, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x2d0, Size: 4]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2d8, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x2f0, Size: 4]
	delegate OnConstraintBroken;//[Offset: 0x2f4, Size: 12]
	ConstraintInstance ConstraintInstance;//[Offset: 0x300, Size: 416]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x6766438
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x67663b8
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x67662fc
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x6766240
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x6766184
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x6766100
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x6765fe0
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x6765f5c
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x6765e3c
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x6765d3c
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x6765c74
	void SetDisableCollision(bool bDisableCollision);// 0x6765bf4
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x6765b2c
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x6765a10
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x67658f0
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x6765794
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x6765710
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x6765640
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x67655c0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x67654f0
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x6765434
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x6765378
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x67652bc
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x6765238
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x6765168
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x6765068
	void SetAngularDriveMode(byte DriveMode);// 0x6764ff0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x6764f28
	bool IsBroken();// 0x6764f00
	float GetCurrentTwist();// 0x6764ed8
	float GetCurrentSwing2();// 0x6764eb0
	float GetCurrentSwing1();// 0x6764e88
	Transform GetConstraintWorldTransform(byte Frame);// 0x6764de0
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x6764d08
	void BreakConstraint();// 0x6764cf4

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x150, Size: 12]
	delegate OnActorHitFromClient;//[Offset: 0x15c, Size: 12]
	float MinCorrectionInterval;//[Offset: 0x168, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x16c, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x170, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x174, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0x178, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0x17c, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x180, Size: 4]
	float AllowMaxLandDiffSqAtServer;//[Offset: 0x184, Size: 4]
	float AllowMaxLinearSpeedRatio;//[Offset: 0x188, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x18c, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x190, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x194, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x198, Size: 4]
	float MinCorrectionDistanceSqAtClientLessDrag;//[Offset: 0x19c, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x1a0, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x1a4, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x1a8, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x1ac, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	float StaticFixLocation;//[Offset: 0x1b4, Size: 4]
	float StaticFixAngel;//[Offset: 0x1b8, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x1bc, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x1c0, Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c6, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c7, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x1c8, Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x1cc, Size: 4]
	float MaxAllowJumpHeight;//[Offset: 0x1d0, Size: 4]
	float MaxSyncSpeedZDelta;//[Offset: 0x1d4, Size: 4]
	float MaxSyncSpeedZDeltaStep1;//[Offset: 0x1d8, Size: 4]
	ClientSmoothCorrection ClientSmoothData;//[Offset: 0x1dc, Size: 52]
	STExtraVehicleBase* VehicleOwner;//[Offset: 0x230, Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x36c, Size: 60]
	VehicleHitRewindThreshold VehicleHitRewindThreshold;//[Offset: 0x3e8, Size: 24]
	bool bEnableValidateVelNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	float VelZThreshold_ValidateGround;//[Offset: 0x404, Size: 4]
	float GroundSinTolerance;//[Offset: 0x408, Size: 4]
	VehicleStuntComponent* VehicleStunt;//[Offset: 0x500, Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x3b38a4c
	void ServerMoveUnreliably_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetMovement4W Movement);// 0x3b38870
	void ServerMoveReliably_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetMovement4W Movement);// 0x3b38694
	void ServerHit_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetHit4W Movement);// 0x3b38500
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x3b3833c
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x3b38144
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x3b37f4c
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x3b37cf0
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x3b37ae4
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x3b378d4
	void SendClientHitPointToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, PrimitiveComponent* HitActorComponent, const Vector_NetQuantize100 NormalImpulse, const Vector_NetQuantize100 HitPoint);// 0x3b375b0
	void SendClientHitCharacterToServerReliably(float ServerTimeStamp, const Vector_NetQuantize100 VehicleLocation, const Vector_NetQuantizeNormal VehicleRotator, float VehicleVelocitySize, const Vector_NetQuantize100 AngularVelocity, STExtraBaseCharacter* HitCharacter, float HitTimeStamp, const Vector_NetQuantize100 HitLocation);// 0x3b37304
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3b37160
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3b36fbc
	void OnDriverRide();// 0x3b36fa8
	void HandleProtectionEnable(bool InEnable);// 0x3b36f28
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3b36e20
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x3b36c88
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3b36b80
	Actor*[] GetRiders();// 0x3b36ac0
	bool GetPrimitiveCompRigidBodyState(PrimitiveComponent* PrimitiveComp, out RigidBodyState OutState, FName BoneName);// 0x3b36950
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x3b368c4
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x3b367e4
	void DragUnderGround();// 0x3b367d0
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x3b366b0
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x3b36540
	bool CheckAndLoadLandscape(float DeltaTime);// 0x3a2d87c
	Vector ApplyRigidBodyState(out RigidBodyState NewState);// 0x3b36450
	bool AdjustFloorPosition(out const Vector ClientLocation, out const Actor*[] Riders, out Vector OutLocation);// 0x3b362d4

--------------------------------
Class: ClientSmoothCorrection
	float ConfigSmoothSeconds;//[Offset: 0x4, Size: 4]
	float ConfigSmoothMinDistanceSq;//[Offset: 0x8, Size: 4]
	float ConfigSmoothMaxDistanceSq;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: VehicleHitRewindThreshold
	float ValidDeltaSeconds;//[Offset: 0x0, Size: 4]
	float VehicleRewindDistance;//[Offset: 0x4, Size: 4]
	float VehicleRewindAngle;//[Offset: 0x8, Size: 4]
	float VelocitySize;//[Offset: 0xc, Size: 4]
	float AngularVelocityInDegreesSize;//[Offset: 0x10, Size: 4]
	float HitCharacterDistance;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleStuntComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	bool bIsHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bEnableJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	delegate OnVehicleJump;//[Offset: 0x15c, Size: 12]
	int[] DisabledWheelsWhenJump;//[Offset: 0x168, Size: 12]
	float DelayToEnableWheelsAfterJump;//[Offset: 0x174, Size: 4]
	int[] LandedWheelsWhenJump;//[Offset: 0x178, Size: 12]
	CurveFloat* JumpSpeedCurve;//[Offset: 0x184, Size: 4]
	CurveFloat* PitchCurveWhenJump;//[Offset: 0x188, Size: 4]
	float MaxJumpDuration;//[Offset: 0x18c, Size: 4]
	bool bEnableSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	float SprintDuration;//[Offset: 0x1ac, Size: 4]
	VehicleSprintProxyBase* SprintProxy;//[Offset: 0x1b0, Size: 4]
	float ServerSprintFactor;//[Offset: 0x1b4, Size: 4]
	void VehicleJumpDelegate__DelegateSignature(float HoldingTime);// 0x4a51734
	void Sprint(bool InEnable);// 0x3b34f84
	void ServerSprint(bool InEnable, float InSprintFactor);// 0x3b34e74
	void ServerJump_Vehicle4W(int CorrectionId, float TimeStamp, const VehicleNetMovement4W Movement4W, float HoldingTime);// 0x3b34c48
	void ServerJump(int CorrectionId, float TimeStamp, Vector_NetQuantize100 ClientLocation, Vector_NetQuantizeNormal ClientRotation, Vector_NetQuantize100 ClientLinearVelocity, Vector_NetQuantize100 ClientAngularVelocity, float InHoldingTime);// 0x3b34924
	void ServerHold(bool bEnable);// 0x3b3485c
	void OnRep_ServerSprintFactor();// 0x3592f9c
	void Jump(float InHoldingTime);// 0x3b347e4
	bool IsInSprint();// 0x3b347bc
	bool IsInJumping();// 0x3b347a0
	void Hold(bool bEnable);// 0x3b34720
	void HandleSeatOccupiersChanged();// 0x3b3470c
	void HandleSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIndex);// 0x3b3460c
	void HandleSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIndex);// 0x3b3450c
	void HandleHealthStateChanged(enum InHealthState);// 0x3b34494
	float GetSprintFactor();// 0x3b3446c
	float GetSprintDuration();// 0x3b34450
	float GetJumpMaxHoldingTime();// 0x3b34428
	void EnableWheelsAfterJump();// 0x3b34414
	void ClearJump();// 0x3b34400

--------------------------------
Class: VehicleSprintProxyBase.Object
	float GetFactor(float InDuration);// 0x3b333d8
	bool CheckFactor(float InSprintFactor);// 0x3657288

--------------------------------
Class: VehicleNetMovement4W
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	RigidVehicleMovement Movement;//[Offset: 0x4, Size: 48]
	RigidVehicleMovement LandMovement;//[Offset: 0x34, Size: 48]

--------------------------------
Class: RigidVehicleMovement
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Vector LinVel;//[Offset: 0x18, Size: 12]
	Vector AngVel;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleNetHit4W
	Actor* OtherActor;//[Offset: 0x0, Size: 4]
	Vector Impulse;//[Offset: 0x4, Size: 12]
	Vector ImpactPoint;//[Offset: 0x10, Size: 12]
	RigidVehicleMovement Movement;//[Offset: 0x1c, Size: 48]

--------------------------------
Class: VehBackpackItem
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0, Size: 4]
	<uint32,float> MapRTPC;//[Offset: 0x4, Size: 60]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 1]
	byte ViewYaw;//[Offset: 0x1, Size: 1]
	byte ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x378, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x37c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x380, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	bool bMeshRootVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 1]
	float ArmOriginProbeSize;//[Offset: 0x388, Size: 4]
	Rotator RelativeToOwnerRotator;//[Offset: 0x38c, Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x398, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	float MinPitch;//[Offset: 0x3b0, Size: 4]
	float MinSmartPitch;//[Offset: 0x3b4, Size: 4]
	float MaxPitch;//[Offset: 0x3b8, Size: 4]
	float SmartPitchInputFactor;//[Offset: 0x3bc, Size: 4]
	float SmartYawInputFactor;//[Offset: 0x3c0, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x3c8, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x3ec, Size: 4]
	bool bKeepCameraLagWhenSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool bNoFixCameraLagWhenSpecator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	float ResultMinPitch;//[Offset: 0x414, Size: 4]
	float ResultMaxPitch;//[Offset: 0x418, Size: 4]
	Vector ArmOriginOffset;//[Offset: 0x41c, Size: 12]
	bool bIsAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	float SocketOffsetInterpSpeed;//[Offset: 0x44c, Size: 4]
	float CurAdditiveOffsetFov;//[Offset: 0x450, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x454, Size: 4]
	float LeaveMaxDistance;//[Offset: 0x458, Size: 4]
	float LeaveMaxTime;//[Offset: 0x45c, Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x468, Size: 4]
	float ApproachTime;//[Offset: 0x470, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x480, Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x484, Size: 4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 1]
	void UseBackupCameraData(bool bUse);// 0x3b32cac
	void SetSteerCameraYaw(float InSteerCameraYaw, bool bRelativeToStartYaw);// 0x3b32be8
	void SetSmartCameraInput(float Yaw, float Pitch);// 0x3b32b2c
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x3b32aac
	void SetFreeCameraInput(Rotator deltaRot);// 0x3b32a3c
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x3b329bc
	void SetBackupCameraData(out const CameraOffsetData CameraData);// 0x3b328f0
	void ResetSmartCamera();// 0x3b328dc
	float GetSteerCameraYaw(bool bRelativeToStartYaw);// 0x3b32854
	Rotator GetLookRotation();// 0x3b3280c
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x3690f78
	void EnableCameraProcess(bool Enable, Vector FSocketOffsetModifier, float fFOVModifier);// 0x3b326f8
	void DelayRotationLagEnabledEnd();// 0x3592f9c
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x3b325ec
	bool BackupCameraDataUsed();// 0x3b325bc
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x3b32500

--------------------------------
Class: VehiclePickableComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	class PickUpWrapperActor* PickupWrapperClass;//[Offset: 0x150, Size: 4]
	bool bEnablePickupInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	PickUpWrapperActor* PickupVehicle;//[Offset: 0x158, Size: 4]
	void PickupBy(STExtraPlayerCharacter* InCharacter);// 0x4a51734
	void OnRep_PickupVehicle();// 0x3b28c1c
	bool CanBePickedUp();// 0x36626d4

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum NoiseType;//[Offset: 0x0, Size: 1]
	float Loudness;//[Offset: 0x4, Size: 4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 4]
	float MaxRange;//[Offset: 0xc, Size: 4]

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	float RPCSyncInterval;//[Offset: 0xc8, Size: 4]
	delegate OnClientAddBuffEvent;//[Offset: 0xcc, Size: 12]
	delegate OnClientRemoveBuffEvent;//[Offset: 0xd8, Size: 12]
	delegate OnClientUpdateBuffEvent;//[Offset: 0xe4, Size: 12]
	delegate OnAddBuffEvent;//[Offset: 0xf0, Size: 12]
	<int,UAEBlackboard*> BuffBlackboardMap;//[Offset: 0xfc, Size: 60]
	BuffIncNetArray SyncBriefs;//[Offset: 0x138, Size: 24]
	BuffIncNetArray SyncRefBriefs;//[Offset: 0x150, Size: 24]
	BuffIncNetArray OwnerSyncBriefs;//[Offset: 0x168, Size: 24]
	BuffIncNetArray OwnerSyncRefBriefs;//[Offset: 0x180, Size: 24]
	<int> BriefRemoveInstIds;//[Offset: 0x198, Size: 60]
	void UpdateClientBuff(ClientSyncBrief Brief);// 0x3c8e3b8
	void RemoveClientBuff(int InstID);// 0x3c8e340
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x3c8e1f8
	void RemoveAllBuffs();// 0x3c8e1e4
	void OnRep_SyncBriefs();// 0x3c8e1d0
	void OnRep_OwnerSyncBriefs();// 0x3c8e1bc
	void OnClientUpdateBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x4a51734
	void OnClientRemoveBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x4a51734
	void OnClientAddBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x4a51734
	void OnAddBuffEvent__DelegateSignature(int BuffID, int SkillID, bool IsExist, Actor* Causer);// 0x4a51734
	bool HasSkillID(int SkillID);// 0x3c8e13c
	bool HasBuff(int BuffID);// 0x3c8e0bc
	BuffConfigSubsystem* GetSubsystem();// 0x3c8e094
	STBuff* GetSTBuffByBuffID(int BuffID);// 0x3c8e014
	byte GetRealOwnerRoleSafety();// 0x37f3590
	int GetBuffLayerCount(int InstID, int CauseSkillID);// 0x3c8df50
	BuffInstInfo[] GetBuffInfoByBuffID(int BuffID);// 0x3c8de48
	bool GetBuffInfo(int InstID, out BuffInstInfo OutBuff);// 0x3c8dd68
	float GetBuffDuration(int InstID, int CauseSkillID);// 0x3c8dca4
	float GetBuffDSEndTime(int InstID, int CauseSkillID);// 0x3c8dbe0
	BuffInstInfo[] GetAllBuffInfo();// 0x3c8db20
	void ClearBuffs(bool bClearAll, bool bImmediately);// 0x3c8da50
	bool ChangeDuration(int InstID, float Duration);// 0x3c8d98c
	int AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID, int Level);// 0x3c8d7f8

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x1c, Size: 720]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x80f3c38
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x80f3b64
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x80f39b0
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x80f38dc
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x80f3808
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x80f3734
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x80f3660
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x80f358c
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x80f34b8
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x80f33e4
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x80f3308
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x80f3274
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x80f31e0
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x80f314c
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x80f30b8
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x80f3024
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x80f2f90
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x80f2efc
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x80f2e68
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x80f2dd4
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x80f2d40
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x80f2cac
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x80f2c18
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x80f2b34
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x80f2a90
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x80f2974
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x80f28d0
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x80f283c
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x80f27a0
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x80f270c
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x80f2678
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x80f25e4
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x80f2550
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x80f24bc
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x80f23d8
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x80f222c

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x3c, Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x78, Size: 60]
	<FName,byte> EnumParamMap;//[Offset: 0xb4, Size: 60]
	<FName,int> IntParamMap;//[Offset: 0xf0, Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x12c, Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x168, Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1a4, Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1e0, Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x21c, Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x258, Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x294, Size: 60]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	byte DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 12]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: BuffIncNetArray
	BuffNetArrayUnit[] IncArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BuffNetArrayUnit
	ClientSyncBrief Unit;//[Offset: 0x0, Size: 32]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0, Size: 4]
	byte LayerCount;//[Offset: 0x4, Size: 1]
	byte Level;//[Offset: 0x5, Size: 1]
	int BuffID;//[Offset: 0x8, Size: 4]
	int CauseSkillID;//[Offset: 0xc, Size: 4]
	Actor* CauseActor;//[Offset: 0x10, Size: 4]
	float SyncTime;//[Offset: 0x14, Size: 4]
	float Duration;//[Offset: 0x18, Size: 4]
	float EndTime;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BuffConfigSubsystem.GameInstanceSubsystem.Subsystem.Object
	<int,BuffTableRow> Table;//[Offset: 0x44, Size: 60]
	<FString,class Object> BuffClassMap;//[Offset: 0x80, Size: 60]

--------------------------------
Class: BuffTableRow
	int BuffID;//[Offset: 0x0, Size: 4]
	int MaxLayer;//[Offset: 0x4, Size: 4]
	float Duration;//[Offset: 0x8, Size: 4]
	FString BuffType;//[Offset: 0xc, Size: 12]
	FString Name;//[Offset: 0x18, Size: 12]
	FString IconPath;//[Offset: 0x24, Size: 12]
	FString BPPath;//[Offset: 0x30, Size: 12]
	FString Desc;//[Offset: 0x3c, Size: 12]
	<FString> MutexBuffTypes;//[Offset: 0x48, Size: 60]
	<FString> ExcludeBuffTypes;//[Offset: 0x84, Size: 60]
	enum RefreshType;//[Offset: 0xc0, Size: 1]
	enum ReActionType;//[Offset: 0xc1, Size: 1]
	enum TargetType;//[Offset: 0xc2, Size: 1]
	enum MultiCauserHanleType;//[Offset: 0xc3, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0xc4, Size: 1]
	enum ClientSyncType;//[Offset: 0xc5, Size: 1]
	float ClientSyncInterval;//[Offset: 0xc8, Size: 4]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool IsOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool bNeedShowInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	int LocalizeDescID;//[Offset: 0xd0, Size: 4]
	int TipsOnAddBuff;//[Offset: 0xd4, Size: 4]
	int ModeOpen;//[Offset: 0xd8, Size: 4]
	FString ModeStrings;//[Offset: 0xdc, Size: 12]

--------------------------------
Class: STBuff.Object
	int BuffID;//[Offset: 0x2c, Size: 4]
	FString BuffName;//[Offset: 0x30, Size: 12]
	FString Desc;//[Offset: 0x3c, Size: 12]
	int LayerMax;//[Offset: 0x48, Size: 4]
	float Duration;//[Offset: 0x4c, Size: 4]
	float ClientSyncInterval;//[Offset: 0x50, Size: 4]
	enum ClientSyncType;//[Offset: 0x54, Size: 1]
	enum TargetType;//[Offset: 0x55, Size: 1]
	enum RefreshType;//[Offset: 0x56, Size: 1]
	enum ReActionType;//[Offset: 0x57, Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x58, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x59, Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	bool RemoveAllLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 1]
	STBuffAction*[] Actions;//[Offset: 0x5c, Size: 12]
	bool bNeedShowBuffInBuffList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	int LocalizeDescID;//[Offset: 0x6c, Size: 4]
	FString IconPath;//[Offset: 0x70, Size: 12]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	int TipsOnAddBuff;//[Offset: 0x80, Size: 4]
	FString TimeFormula;//[Offset: 0x84, Size: 12]
	DataProviderBase*[] DataProviders;//[Offset: 0x90, Size: 12]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x9c, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0xd8, Size: 4]
	void TryGetParams(int CauseSkillID);// 0x3c8a484
	void Tick(ActorComponent* BuffSystemComponent, int InstID, float DetalTime, float TimeSeconds);// 0x3c8a33c
	void ResetActionExecute(ActorComponent* BuffSystemComponent, int InstID);// 0x3c8a280
	void Initialize(ActorComponent* BuffSystemComponent, int InstID);// 0x3c8a1c4
	void End(ActorComponent* BuffSystemComponent, int InstID);// 0x3c8a108
	void Destroy(ActorComponent* BuffSystemComponent, int InstID);// 0x3c8a04c
	bool CopyActions();// 0x3c8a024
	void ChangeNotify(ActorComponent* BuffSystemComponent, int InstID);// 0x3c89f68

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x2c, Size: 4]
	int ArrayIndex;//[Offset: 0x30, Size: 4]
	bool AutoEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	STBuff* OwnerBuff;//[Offset: 0x38, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x40, Size: 4]
	int CurInstID;//[Offset: 0x44, Size: 4]
	void Tick(ActorComponent* BuffSystemComponent, int InstID, float DetalTime);// 0x3c8af74
	void SetEnabled(ActorComponent* BuffSystemComponent, int InstID, bool Enabled);// 0x3c8ae6c
	void ResetExecute(ActorComponent* BuffSystemComponent, int InstID, bool IgnoreEnd);// 0x3c8ad64
	void OnTick(float DetalTime);// 0x38a8e7c
	void OnResetExecute(bool IgnoreEnd);// 0x38aae80
	void OnInitialize();// 0x35b6248
	void OnExecute();// 0x35b64b8
	void OnEnd();// 0x35b2214
	void OnDestroy();// 0x35b5aa4
	void OnCheckLinkActionEnabled();// 0x3601c70
	void OnChangeNotify();// 0x35b5e24
	void Initialize(ActorComponent* BuffSystemComponent, int InstID);// 0x3c8aca8
	byte GetRealOwnerRole();// 0x3c8ac78
	Actor* GetOwner();// 0x38af88c
	Actor* GetCauser();// 0x3c8ac50
	void End(ActorComponent* BuffSystemComponent, int InstID);// 0x3c8ab94
	void Destroy(ActorComponent* BuffSystemComponent, int InstID);// 0x3c8aad8
	void CheckLinkActionEnabled(ActorComponent* BuffSystemComponent, int InstID);// 0x3c8aa1c
	void ChangeNotify(ActorComponent* BuffSystemComponent, int InstID);// 0x3c8a960

--------------------------------
Class: DataProviderBase.Object

--------------------------------
Class: BuffInstInfo
	int BuffID;//[Offset: 0x0, Size: 4]
	int InstID;//[Offset: 0x4, Size: 4]
	int CauseSkillID;//[Offset: 0x8, Size: 4]
	byte LayerCount;//[Offset: 0xc, Size: 1]
	float EndTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x3f0, Size: 12]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x3fc, Size: 12]
	delegate OnEndChangeItemAvatar;//[Offset: 0x408, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x414, Size: 12]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	ParticleGroup AppliedParticlesGroup;//[Offset: 0x424, Size: 36]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool CanChangeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x44c, Size: 12]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x45c, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x468, Size: 8]
	FName TailMatSlotName;//[Offset: 0x470, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x478, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x480, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x484, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x488, Size: 4]
	BackpackVehicleAvatarHandle* VehicleAvatarHandle;//[Offset: 0x48c, Size: 4]
	BackpackVehicleAvatarHandle* DefaultVehicleAvatarHandle;//[Offset: 0x490, Size: 4]
	NetHighTireStruct NetHighTireStruct;//[Offset: 0x494, Size: 8]
	VehicleAvatarPropretyHandle* DefaultPropertyHandle;//[Offset: 0x49c, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x4a0, Size: 4]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	bool ForceLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	WheeledVehicleMovementComponent* VehicleMovementComponent;//[Offset: 0x4d0, Size: 4]
	bool NeedTickModifyMatParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 1]
	float DownDetectLength;//[Offset: 0x4d8, Size: 4]
	float LerpForwardSpeed;//[Offset: 0x4dc, Size: 4]
	PlayerController* LocalPC;//[Offset: 0x4e0, Size: 8]
	bool HasWelComeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	void WakeUpVehicle();// 0x3affb6c
	void VehicleAvatarPreChangeDelegate__DelegateSignature(int AvatarID);// 0x4a51734
	bool TriggerSelectRandomAvatar();// 0x3b09354
	void PreChangeVehicleBrokenAvatar();// 0x3626e3c
	void PreChangeVehicleAvatar(int InItemID);// 0x371f4b8
	void PreChangeAvatarFPP();// 0x3b09340
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x367da20
	void OverrideVehiclePhysX();// 0x3b0932c
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x4a51734
	void OnRep_NetHighTireChanged();// 0x4a51734
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x3b092a8
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x3b09224
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x3b091c0
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x3b09154
	BackpackVehicleAvatarHandle* GetVehicleAvatarHandle();// 0x3b09138
	FName GetReflectionCubeName_Lobby();// 0x4a51734
	FName GetReflectionCubeName();// 0x3b090f8
	SoftObjectPath GetItemDefaultSkeletalMeshPath();// 0x3b0906c
	FString GetItemAvatarHandlePath(int ItemId);// 0x4a51734
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x4a51734
	int GetDefaultAvatarID();// 0x3b09044
	BackpackVehicleAvatarHandle* GetDefaultAvatarHandle();// 0x3b0901c
	int GetCurrentAvatarID();// 0x3b08ff4
	void ExitFPPVehicle();// 0x3b08fe0
	void EnterFPPVehicle(bool InEnterFPPInVehicle);// 0x3b08f60
	void EndChangeItemAvatarDelegate__DelegateSignature();// 0x4a51734
	void DestroyWelcomeLight();// 0x3b08f4c
	void CreateWelcomeLight();// 0x3b08f38
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x36a60d4
	void ClearVehicleLightEffect();// 0x4a51734
	void CheckWelcomeLightConditionIsSatisfy(float DeltaTime);// 0x3b08ec0
	bool CheckIsNeedEnterFPPVehicle();// 0x3b08e98
	bool CheckBrokenMesh();// 0x3b08e70
	bool CheckAvatarChanged();// 0x3b08e48
	void CheckAndOpenWelcomeLight();// 0x3b08e34
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x3742ae8
	bool CanPlayerSee();// 0x3b08e0c
	void BP_PostChangeItemAvatar();// 0x4a51734
	void BP_ChangeItemAvatar(int InItemID);// 0x4a51734
	void AsyncLoadPropertyHandle();// 0x3b08df8
	void ApplyReflectionCubemap(MeshComponent* MeshComp);// 0x3b08d80
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x36a5d58

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0x17c, Size: 12]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x188, Size: 12]
	SkeletalMesh* SkeletalMeshBroken;//[Offset: 0x198, Size: 40]
	StaticMesh* StaticMeshBroken;//[Offset: 0x1c0, Size: 40]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x1e8, Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x210, Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x238, Size: 12]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x244, Size: 60]
	ParticleAsset[] ShowParticles;//[Offset: 0x280, Size: 12]
	ParticleSystem* ExplosionParticle;//[Offset: 0x290, Size: 40]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x2b8, Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x2e0, Size: 40]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x308, Size: 60]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	VehCharAnimDataWrapper[] VehCharAnimData;//[Offset: 0x348, Size: 12]
	<FName,AnimationData*> VehCharAnimDataNew;//[Offset: 0x354, Size: 60]
	class AnimInstance* VehicleAnim;//[Offset: 0x390, Size: 40]
	VehicleMatParamModifyCfg[] MatModifyByVelocityCfg;//[Offset: 0x3b8, Size: 12]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	VehDecalCfg DecalCfg;//[Offset: 0x3c8, Size: 120]
	bool bNeedHideExhaustWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]

--------------------------------
Class: VehCharAnimDataWrapper
	FName AnimCompTag;//[Offset: 0x0, Size: 8]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AnimationData.DataAsset.Object
	AnimVarName[] AnimAssetsName;//[Offset: 0x24, Size: 12]
	EditAnimAsset[] EditAnimAssets;//[Offset: 0x30, Size: 12]
	RuntimeAnimAsset[] RuntimeAnimAssets;//[Offset: 0x3c, Size: 12]
	RuntimeAnimAsset[] GetAnimAssets();// 0x3585eac

--------------------------------
Class: AnimVarName
	FName Description;//[Offset: 0x0, Size: 8]
	FName AnimVarName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: EditAnimAsset
	UAEBlackboardKeySelector AnimAssetDescription;//[Offset: 0x0, Size: 8]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: RuntimeAnimAsset
	FName AnimVarName;//[Offset: 0x0, Size: 8]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: VehicleMatParamModifyCfg
	FName ParamName;//[Offset: 0x0, Size: 8]
	enum ParamType;//[Offset: 0x8, Size: 1]
	enum Usage;//[Offset: 0x9, Size: 1]
	RuntimeFloatCurve ParamModifyCurve;//[Offset: 0xc, Size: 88]
	enum TargetType;//[Offset: 0x64, Size: 1]
	CurveVector* VectorCurve;//[Offset: 0x68, Size: 4]
	float MaxLerpSpeed;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: VehDecalCfg
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float NeedParkTime;//[Offset: 0x4, Size: 4]
	MaterialInterface* DecalMaterial;//[Offset: 0x8, Size: 40]
	Texture* DecalTexture;//[Offset: 0x30, Size: 40]
	Vector2D UVScale;//[Offset: 0x58, Size: 8]
	Vector2D UVOffset;//[Offset: 0x60, Size: 8]
	Vector DecalSize;//[Offset: 0x68, Size: 12]

--------------------------------
Class: NetHighTireStruct
	int ItemId;//[Offset: 0x0, Size: 4]
	bool bEnableHighTire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: VehicleAvatarPropretyHandle.Object
	int AvatarID;//[Offset: 0x20, Size: 4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x28, Size: 264]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0x130, Size: 40]

--------------------------------
Class: VehicleAvatarProperty
	SkeletalMesh* TPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* FPPMesh;//[Offset: 0x28, Size: 40]
	WheelSetup[] WheelSetups;//[Offset: 0x50, Size: 12]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x5c, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x68, Size: 12]
	VehicleTransmissionData GearSetup;//[Offset: 0x74, Size: 40]
	Vector CenterOfMassOffset;//[Offset: 0x9c, Size: 12]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0xa8, Size: 96]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c, Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	Vector Offset;//[Offset: 0x24, Size: 12]
	float ShapeRadius;//[Offset: 0x30, Size: 4]
	float ShapeWidth;//[Offset: 0x34, Size: 4]
	float Mass;//[Offset: 0x38, Size: 4]
	float DampingRate;//[Offset: 0x3c, Size: 4]
	float SteerAngle;//[Offset: 0x40, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	TireType* TireType;//[Offset: 0x48, Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c, Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50, Size: 4]
	float LatStiffValue;//[Offset: 0x54, Size: 4]
	float LongStiffValue;//[Offset: 0x58, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c, Size: 4]
	byte SweepType;//[Offset: 0x70, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c, Size: 4]
	int WheelIndex;//[Offset: 0x80, Size: 4]
	float DebugLongSlip;//[Offset: 0x84, Size: 4]
	float DebugLatSlip;//[Offset: 0x88, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c, Size: 4]
	float DebugWheelTorque;//[Offset: 0x94, Size: 4]
	float DebugLongForce;//[Offset: 0x98, Size: 4]
	float DebugLatForce;//[Offset: 0x9c, Size: 4]
	Vector Location;//[Offset: 0xa0, Size: 12]
	Vector OldLocation;//[Offset: 0xac, Size: 12]
	Vector Velocity;//[Offset: 0xb8, Size: 12]
	bool IsInAir();// 0x79b1820
	float GetSuspensionOffset();// 0x79b17f8
	float GetSteerAngle();// 0x79b17d0
	float GetRotationAngle();// 0x79b17a8

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24, Size: 12]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x134, Size: 12]
	float Mass;//[Offset: 0x140, Size: 4]
	float DragCoefficient;//[Offset: 0x144, Size: 4]
	float ChassisWidth;//[Offset: 0x148, Size: 4]
	float ChassisHeight;//[Offset: 0x14c, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bClientSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool bServerSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	float DragArea;//[Offset: 0x154, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x158, Size: 4]
	float MaxEngineRPM;//[Offset: 0x15c, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x160, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x164, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x170, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x174, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x178, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x17c, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x180, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x184, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x188, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x18c, Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1a8, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1ac, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1b0, Size: 4]
	float RVOSteeringStep;//[Offset: 0x1b4, Size: 4]
	float RVOThrottleStep;//[Offset: 0x1b8, Size: 4]
	int AvoidanceUID;//[Offset: 0x1bc, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1c0, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1c4, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c8, Size: 4]
	float AvoidanceWeight;//[Offset: 0x1cc, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1d0, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1e8, Size: 20]
	float RawSteeringInput;//[Offset: 0x200, Size: 4]
	float RawThrottleInput;//[Offset: 0x204, Size: 4]
	float RawBrakeInput;//[Offset: 0x208, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 1]
	float SteeringInput;//[Offset: 0x210, Size: 4]
	float ThrottleInput;//[Offset: 0x214, Size: 4]
	float BrakeInput;//[Offset: 0x218, Size: 4]
	float HandbrakeInput;//[Offset: 0x21c, Size: 4]
	float IdleBrakeInput;//[Offset: 0x220, Size: 4]
	float StopThreshold;//[Offset: 0x224, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x228, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x22c, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x234, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x23c, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x244, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x79b2c40
	void SetThrottleInput(float Throttle);// 0x79b2bc0
	void SetTargetGear(int GearNum, bool bImmediate);// 0x79b2afc
	void SetSteeringInput(float Steering);// 0x79b2a7c
	void SetPhysActive(bool bActive);// 0x38892e0
	void SetHandbrakeInput(bool bNewHandbrake);// 0x79b29f4
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x79b2970
	void SetGroupsToIgnore(int GroupFlags);// 0x79b28f8
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x79b2874
	void SetGroupsToAvoid(int GroupFlags);// 0x79b27fc
	void SetGearUp(bool bNewGearUp);// 0x79b277c
	void SetGearDown(bool bNewGearDown);// 0x79b26fc
	void SetBrakeInput(float Brake);// 0x79b267c
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x79b25f8
	void SetAvoidanceGroup(int GroupFlags);// 0x79b2580
	void SetAvoidanceEnabled(bool bEnable);// 0x79b2500
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x79b231c
	bool IsSuspensionSweep();// 0x79b22ec
	void GetWheelShapeIndices(out int[] OutWheelShapeIndices);// 0x79b21dc
	bool GetUseAutoGears();// 0x79b21b4
	int GetTargetGear();// 0x79b218c
	float GetForwardSpeed();// 0x79b2164
	float GetEngineRotationSpeed();// 0x79b213c
	float GetEngineMaxRotationSpeed();// 0x79b2114
	int GetCurrentGear();// 0x79b20ec
	void EnableVehicleWheel(int WheelIndex, bool InEnable);// 0x79b2028
	void EnableVehicleSimulation(bool InEnable);// 0x79b1fa8

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandbrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName TireBoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20, Size: 4]
	float ClutchStrength;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleNeutralThrottleConfig
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum DifferentialType;//[Offset: 0x1, Size: 1]
	float CanNeutralThrottleMinSpeed;//[Offset: 0x4, Size: 4]
	float NeutralThrottleToMaxRPMSeconds;//[Offset: 0x8, Size: 4]
	float NeutralThrottleDecelSeconds;//[Offset: 0xc, Size: 4]
	float WheelRPMOverEngineRPMRate;//[Offset: 0x10, Size: 4]
	AkAudioEvent* FrictionAudio;//[Offset: 0x18, Size: 40]
	Vector CameraOffset;//[Offset: 0x40, Size: 12]
	float AccelCameraOffsetSeconds;//[Offset: 0x4c, Size: 4]
	float DecelCameraOffsetSeconds;//[Offset: 0x50, Size: 4]
	class CameraShake* CameraShake;//[Offset: 0x54, Size: 4]
	float CameraShakeDelay;//[Offset: 0x58, Size: 4]
	STVehicleWheelSlipDustConfig* DustConfig;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: STVehicleWheelSlipDustConfig.DataAsset.Object
	STVehicleSlipWheelDust[] SlipWheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleSlipWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	STVehicleSingleWheelFx[] WheelFx;//[Offset: 0x4, Size: 12]

--------------------------------
Class: STVehicleSingleWheelFx
	enum Wheel;//[Offset: 0x0, Size: 1]
	ParticleSystem* WheelFx;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 1]
	int MasterCompLODLevel;//[Offset: 0x6d4, Size: 4]
	int VehicleSkinID;//[Offset: 0x6d8, Size: 4]
	delegate OnNetAvatarDataChanged;//[Offset: 0x6dc, Size: 12]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x6f0, Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x718, Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x740, Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x74c, Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x758, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x764, Size: 12]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x770, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x780, Size: 8]
	FName TailMatSlotName;//[Offset: 0x788, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x790, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x798, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x79c, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x7a0, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x7a4, Size: 4]
	void WakeUpVehicle();// 0x3affb6c
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x3affaf4
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x364eb90
	void SetVehicleAvatarNormalMode();// 0x3affae0
	void SetVehicleAvatarFPPMode();// 0x3affacc
	void SetVehicleAvatarBroken();// 0x3affab8
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x364e5c4
	void SetMasterBaseMeshPath(FString InPath);// 0x3aff9fc
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x3aff940
	void ResetAdvanceVehicleSkinID();// 0x3aff924
	void RemoveAllEquippedStyle();// 0x3aff910
	bool ProcessHandleUnequip(enum InSlotType);// 0x3aff890
	bool ProcessHandleEquip(enum InSlotType);// 0x3aff810
	void PreProcessBeforeLoadMesh();// 0x364d8a0
	void PostProcessAfterLoadMesh();// 0x364d884
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x3aff798
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x3aff720
	void OverrideVehiclePhysX();// 0x3aff70c
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x4a51734
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x4a51734
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x4a51734
	void OnRep_BodySlotStateChanged();// 0x364d774
	void OnNetAvatarDataChanged__DelegateSignature();// 0x4a51734
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x4a51734
	bool IsValidAvatar();// 0x3aff6e4
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x3aff608
	bool IsAvatarFPPMode();// 0x3aff5e0
	bool IsAvatarBroken();// 0x3aff5b8
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x38889a0
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x3888918
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x3aff530
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x3aff4a8
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x3aff39c
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x3aff244
	void InitMasterComponent();// 0x3aff230
	void Initialize();// 0x364bca4
	void InitialAvatarParam();// 0x3592f9c
	int HasStyleEquipped(int InStyleID);// 0x3aff1b0
	int HasEquippedSameStyle(int InStyleID);// 0x3aff130
	bool HandleUnequipStyle(int InStyleID);// 0x3aff0b0
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x3888854
	bool HandleEquipStyle(int InStyleID);// 0x3aff030
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x3aff008
	MeshComponent* GetVehicleBodyMeshComp();// 0x3afefe0
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x364b32c
	FName GetReflectionCubeName_Lobby();// 0x4a51734
	FName GetReflectionCubeName();// 0x3afefa0
	bool CanBeMeshMerge(int SlotID);// 0x3afef20
	void ApplyReflectionCubemap(MeshComponent* MeshComp, ItemHandleBase* InItemHandle);// 0x3afee64

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0, Size: 1]
	int StyleValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x484, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x490, Size: 12]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x49c, Size: 12]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x3b72938
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x3b728c0
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x3b72838
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x3b7277c
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponId, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x3b7253c
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x3b72328
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x3b722a0
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x3b72220
	void OnRep_CurrentWeaponReplicated();// 0x38de28c
	void OnReconnectOnServer();// 0x35b0588
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x3b721a8
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x3b7205c
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x3b71fe4
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x3b71f30
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x3b71e74
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x3b71dfc
	void DelayFire(float DelayTime, byte ShootMode);// 0x3b71d38

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xfc, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x138, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x140, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x148, Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x184, Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x1c0, Size: 4]
	bool ShowMainWeaponModelOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	FName CurUseWeaponLogicSocket;//[Offset: 0x1c8, Size: 8]
	byte CurUseWeaponLogicSocketRep;//[Offset: 0x1d0, Size: 1]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x1d8, Size: 8]
	FName NextUseWeaponLogicSocket;//[Offset: 0x1e0, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x1f0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x1f8, Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 1]
	float ResyncTimeBias;//[Offset: 0x204, Size: 4]
	float NextResyncTimestamp;//[Offset: 0x208, Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x210, Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x21c, Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x228, Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x234, Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x240, Size: 12]
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x24c, Size: 12]
	delegate WeaponSystemAttachDataChangedDelegate;//[Offset: 0x258, Size: 12]
	delegate NextUseWeaponChangedDelegate;//[Offset: 0x270, Size: 12]
	delegate EquipVehicleShootWeaponDelegate;//[Offset: 0x27c, Size: 12]
	byte SwitchSlotAfterFinishCreatingWeapon;//[Offset: 0x288, Size: 1]
	bool bSwitchSlotAfterCreatIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x28c, Size: 60]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x2c8, Size: 12]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x2d8, Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x2e4, Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x2f0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x328, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x360, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x398, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x3d0, Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x40c, Size: 4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x410, Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x414, Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x418, Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x41c, Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x44c, Size: 4]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x4a51734
	void WeaponSystemAttachDataChangedDelegate__DelegateSignature();// 0x4a51734
	void UpdateOwnerClientCreateWeapon();// 0x3b74f3c
	void TickHideWeapon();// 0x3b74f28
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x3b74e64
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x3b74e50
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x4a51734
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x3b72328
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x4a51734
	void SetSwitchSlotAfterFinishCreatingWeapon(byte Slot, bool ignoreState);// 0x3b74d8c
	void SetNextUseWeaponSlot(byte Slot);// 0x3b74d14
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x3b74c50
	void RemoveWeaponInInventory(STExtraWeapon* Weapon);// 0x3b74bd8
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x3b74b60
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param);// 0x3b74a78
	int OverrideShootWeaponInitClip__DelegateSignature(int nWeaponSlot, int nSpecificID);// 0x4a51734
	void OnRepReplayData();// 0x3592f9c
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x3b74a64
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x3b74a50
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x3b74a3c
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x3b74a28
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x3b74a14
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x3b7499c
	void OnRep_NextUseWeaponLogicSocket();// 0x3b74988
	void OnRep_LastUseNoneGrenadeLogicSlotOnSimulateClient();// 0x3b74960
	void OnRep_CurUseWeaponLogicSocketRep();// 0x3b74974
	void OnRep_CurrentWeaponReplicated();// 0x38de28c
	void OnRep_CurrentWeaponLogicSocket();// 0x3b74960
	void OnRep_CurrentShieldWeaponReplicated();// 0x3b7494c
	void OnReconnectOnServer();// 0x35b0588
	void OnReconnectOnClient();// 0x35b056c
	void NextUseWeaponChangedDelegate__DelegateSignature();// 0x4a51734
	void LogInventoryDataInfo();// 0x3b74938
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x3b74828
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x3b71f30
	void LocalForceFinishSwitchWeapon();// 0x3b74814
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x4a51734
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x3b74800
	bool LocalDestroyWeapon(FName SocketName, bool bEnableBroadcast);// 0x3b74724
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x3b74710
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x4a51734
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x3b746e8
	bool IsValidSlotForWeapon(out const ItemDefineID DefineID, byte Slot);// 0x3b74604
	bool IsCreatingWeaponOnServer();// 0x3b745d0
	bool IsCreatingWeaponOnClient();// 0x3b745a8
	void HideAllWeapon(bool Hidden, byte HideMask, STExtraWeapon* IgnoreWeapon);// 0x3b7449c
	bool HasReconnectWeapon();// 0x3b74474
	void HandleGetWeaponFinished(byte Slot);// 0x38576e0
	byte GetWeaponSlotInInventory(STExtraWeapon* Weapon);// 0x3b743f4
	FName GetWeaponAttachSocketFromLogicSocket(FName LogicSocket, STExtraWeapon* BackupWeapon);// 0x3b74320
	byte GetSlotOfMatchState(byte State);// 0x3b742a0
	int GetShowBagLevel();// 0x362c798
	FName GetShieldWeaponSlot();// 0x3b74260
	STExtraWeapon* GetShieldWeapon();// 0x3b74238
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x3b741b8
	byte GetNextUseWeaponSlot();// 0x3b74190
	FName GetLogicSocketSlotByLogicSocketAssociationType(int LogicSocketAssociationType);// 0x3b74108
	FName GetLogicSocketBySlot(byte Slot);// 0x3b74080
	int GetLogicSocketAssociationTypeLogicSocket(FName LogicSocket);// 0x3b74000
	STExtraWeapon* GetLastUsedWeapon();// 0x3b73fd0
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x3b73f50
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x3b73ed0
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x3b73e50
	STExtraWeapon* GetInventoryWeaponByItemID(int ItemId);// 0x3b73dd0
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x3b73d40
	STExtraWeapon* GetCurrentUsingWeapon();// 0x3b73d18
	byte GetCurrentUsingPropSlot();// 0x3b73cf0
	FName GetCurrentUsingLogicSocketOnServer();// 0x3b73cb0
	FName GetCurrentUsingLogicSocket();// 0x3b73cb0
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x3b73c88
	int GetBagLevel();// 0x363b1b0
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x3b73b78
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x3b73a68
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x3b73a54
	void EquipVehicleShootWeaponDelegate__DelegateSignature(bool bEquip);// 0x4a51734
	void EnableAllBroadcast(bool bEnable);// 0x3b739d8
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x3b73914
	void DoWeapnAttachToBack(STExtraWeapon* Weapon, FName LogicSocket);// 0x3b73858
	void DebugReconnectToClientOnServer();// 0x3b73844
	void DebugDisconnetToServerOnClient();// 0x3b73830
	void ConditionClearSwitchHandle();// 0x3b7381c
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x4a51734
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x4a51734
	bool CanSwapWeaponByPropSlot(byte Slot1, byte Slot2);// 0x3b73758
	void AttachCurrentWeaponMeshToBack();// 0x3b73744

--------------------------------
Class: WeaponCreateInstance
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int SyncTicket;//[Offset: 0x18, Size: 4]
	int CreateFrameCount;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	byte PropSocket;//[Offset: 0x10, Size: 1]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	int BagLevel;//[Offset: 0x34, Size: 4]

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 4]
	enum TargetEvent;//[Offset: 0x4, Size: 1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 24]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum[] ForceExitPawnStateList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 104]
	STExtraWeapon* Weapon;//[Offset: 0x68, Size: 4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 4]
	FName WeaponSocket;//[Offset: 0x8, Size: 8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 4]
	int WeaponTypeID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: EffectComponent.ActorComponent.Object
	delegate EffectGraphChangeDelegate;//[Offset: 0x144, Size: 12]
	bool NeedWaitStartFireRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x36c0de8
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x36c0bc4
	void S2A_EndEffectGraph(int UID);// 0x355a050
	int GetGraphsNum();// 0x36c0ba0
	void C2S_SyncWeaponBulletNum(Actor* WeaponActor, int ClientLastFireID, uint32 ClipID, BulletInClip InCurBulletInClip);// 0x36c0860
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x36c05f4

--------------------------------
Class: VehicleAIComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x150, Size: 12]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x15c, Size: 12]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x19c, Size: 4]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x1a0, Size: 4]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x1a4, Size: 44]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x1d4, Size: 4]
	float CheckAllowableDistanceInter;//[Offset: 0x1d8, Size: 4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x1dc, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x1e8, Size: 12]
	void StopMoveByHandrake();// 0x3b00ee4
	void StopAutoDriving();// 0x3b00ed0
	bool StartAutoDriving();// 0x3b00ea8
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x3b00dfc
	void OnRep_AutoDriver_AINavStateData();// 0x3b00de8
	bool IsReachDest();// 0x3b00dc0
	bool IsAutoDriving();// 0x3b00d98
	bool HasAutoDriveTarget();// 0x3b00d70
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x3b00d48
	STExtraVehicleAIController* GetVehicleAIController();// 0x3b00d20
	int GetCurrentTargetWaypointIdx();// 0x3b00cf8
	Vector GetAutoDriveTarget();// 0x3b00cb0
	void EndAutoDriving();// 0x3b00c9c
	void ClearAutoDriveTarget();// 0x3b00c88
	bool CanAutoDrivingNoDriver();// 0x3b00c60
	bool CanAutoDriving();// 0x3b00c38
	bool AllowableDistanceAutoDriving(bool CheckDriveTarget);// 0x3b00bb0

--------------------------------
Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x3c0, Size: 8]
	FName AIPawnTag;//[Offset: 0x3c8, Size: 8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x3d0, Size: 4]
	VehicleAIComponent* VehicleAIComp;//[Offset: 0x3d4, Size: 4]
	void StandaloneSetBTRun(bool runBT);// 0x3a46e10
	void StandaloneRePosses(STExtraWheeledVehicle* Vehicle, bool restartBT);// 0x3a46d4c
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x3a46cd4
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x3a46cac
	VehicleAIComponent* GetVehicleAIComp();// 0x3a46c84

--------------------------------
Class: STExtraVehicleAIManager.Actor.Object
	delegate OnPostVehicleBehaviorInit;//[Offset: 0x310, Size: 12]
	bool bOnlySpawnInSafetyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool bQueueSpawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	DataTable* VehicleSpawnDataTable;//[Offset: 0x320, Size: 40]
	FName AIPawnTag;//[Offset: 0x348, Size: 8]
	int MaxConcurrentVehicles;//[Offset: 0x350, Size: 4]
	int MaxVehiclesPerGame;//[Offset: 0x354, Size: 4]
	float SpawnPointCooldown;//[Offset: 0x35c, Size: 4]
	FName CurrentPathKeyName;//[Offset: 0x360, Size: 8]
	FName CurrentPathInputKeyKeyName;//[Offset: 0x368, Size: 8]
	FName PreviousPathInputKeyKeyName;//[Offset: 0x370, Size: 8]
	FName IsPathingInReverseKeyName;//[Offset: 0x378, Size: 8]
	FName IsStoppedKeyName;//[Offset: 0x380, Size: 8]
	FName IsDebugForceStoppedKeyName;//[Offset: 0x388, Size: 8]
	enum AvoidanceMode;//[Offset: 0x390, Size: 1]
	float InitRetryDelay;//[Offset: 0x394, Size: 4]
	int MaxInitRetries;//[Offset: 0x398, Size: 4]
	QueuedVehicleSpawn[] QueuedVehicleSpawns;//[Offset: 0x3a8, Size: 12]
	STExtraVehicleAISpawner*[] VehicleSpawns;//[Offset: 0x3b4, Size: 12]
	STExtraAIWaypointSegment*[] VehiclePaths;//[Offset: 0x3c0, Size: 12]
	<PathPoint,bool> PathPointPlayZoneStatus;//[Offset: 0x3cc, Size: 60]
	<PathPoint,PathInputPlayZoneDistanceQuery> PathPointPlayZoneDistances;//[Offset: 0x408, Size: 60]
	<STExtraVehicleAISpawner*,float> LastVehicleSpawnTimes;//[Offset: 0x444, Size: 60]
	<FString,float> AllVehiclesDestroyedTimeMap;//[Offset: 0x480, Size: 60]
	float PreviousMatchTime;//[Offset: 0x4bc, Size: 4]
	<FName,Object*> CacheUObjectMap;//[Offset: 0x4c0, Size: 60]
	<FString,ActiveVehicleList> ActiveVehiclesMap;//[Offset: 0x508, Size: 60]
	AutoDriveAIDataRow[] AutoDriveAIADataSet;//[Offset: 0x754, Size: 12]
	STExtraAIWaypointSegment* SegmentStart;//[Offset: 0x760, Size: 4]
	int SegmentPointIdxStart;//[Offset: 0x764, Size: 4]
	STExtraAIWaypointSegment* SegmentEnd;//[Offset: 0x768, Size: 4]
	int SegmentPointIdxEnd;//[Offset: 0x76c, Size: 4]
	bool bVehicleAIForcecNoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool bVehicleAIShowIconInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	float fVehicleHPScaleForTowTeam;//[Offset: 0x774, Size: 4]
	float fVehicleHPScaleForFourTeam;//[Offset: 0x778, Size: 4]
	bool bSyncBuildPathGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	bool bDebugAllWayPointKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77d, Size: 1]
	bool bDebugAllLinkPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77e, Size: 1]
	bool bDebugFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77f, Size: 1]
	int DSSwitchId_SemiTruck;//[Offset: 0x780, Size: 4]
	int DSSwitchId_ModelY;//[Offset: 0x784, Size: 4]
	void ProcessPathPlayZoneStatus();// 0x3a47be0
	void OnPostVehicleBehaviorInit__DelegateSignature(STExtraVehicleAIController* AIController, Pawn* VehiclePawn);// 0x4a51734
	void MulticastDrawPathPointDebug(Vector PointLocation, int ForwardPlayZoneDistance, int ReversePlayZoneDistance);// 0x3a47ad4

--------------------------------
Class: QueuedVehicleSpawn
	Guid ID;//[Offset: 0x0, Size: 16]
	FString SpawnId;//[Offset: 0x10, Size: 12]
	class Pawn* VehicleClass;//[Offset: 0x1c, Size: 4]
	BehaviorTree* BehaviorTree;//[Offset: 0x20, Size: 4]
	BlackboardData* BlackboardData;//[Offset: 0x24, Size: 4]
	SpawnFilter SpawnSettings;//[Offset: 0x28, Size: 28]

--------------------------------
Class: SpawnFilter
	bool bLimitSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName[] ValidSpawnPoints;//[Offset: 0x4, Size: 12]
	FName[] InvalidSpawnPoints;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STExtraVehicleAISpawner.Actor.Object
	Guid ID;//[Offset: 0x310, Size: 16]
	FString SpawnTag;//[Offset: 0x320, Size: 12]
	bool bIsSingleUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	SceneComponent* SpawnPoint;//[Offset: 0x330, Size: 4]
	WaypointNetworkConnection StartingPath;//[Offset: 0x334, Size: 12]
	float InitializeVehicleBehaviorDelay;//[Offset: 0x340, Size: 4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	PathPoint[] spawnWayPaths;//[Offset: 0x348, Size: 12]
	bool bStartEngineWhenSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x358, Size: 4]
	void PostSpawnAI(Pawn* SpawnedVehicle);// 0x3590e78
	void OnSpawnAI(Pawn* SpawnedVehicle);// 0x357b72c

--------------------------------
Class: WaypointNetworkConnection
	STExtraAIWaypointSegment* ConnectedSegment;//[Offset: 0x0, Size: 4]
	int WaypointIndex;//[Offset: 0x4, Size: 4]
	bool bPathSegmentInReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: STExtraAIWaypointSegment.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bAlwaysDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	SplineComponent* WaypointsSpline;//[Offset: 0x314, Size: 4]
	<int,WaypointNetworkConnectionList> ConnectedSegments;//[Offset: 0x318, Size: 60]
	<int,NodeTargetSpeedOverrides> TargetSpeedOverridesMap;//[Offset: 0x354, Size: 60]
	Pawn*[] PawnsOnForwardPath;//[Offset: 0x390, Size: 12]
	Pawn*[] PawnsOnReversePath;//[Offset: 0x39c, Size: 12]
	void DrawDebug(float DrawTime);// 0x36dbb90

--------------------------------
Class: WaypointNetworkConnectionList
	WaypointNetworkConnection[] Connections;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NodeTargetSpeedOverrides
	float ForwardTargetSpeedOverride;//[Offset: 0x0, Size: 4]
	float ForwardMaxSpeedOverride;//[Offset: 0x4, Size: 4]
	float ReverseTargetSpeedOverride;//[Offset: 0x8, Size: 4]
	float ReverseMaxSpeedOverride;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PathPoint
	STExtraAIWaypointSegment* Path;//[Offset: 0x0, Size: 4]
	int InputKey;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PathInputPlayZoneDistanceQuery
	int ForwardDistance;//[Offset: 0x0, Size: 4]
	bool bForwardQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int ReverseDistance;//[Offset: 0x8, Size: 4]
	bool bReverseQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ActiveVehicleList
	Pawn*[] Vehicles;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AutoDriveAIDataRow
	class Pawn* VehicleClass;//[Offset: 0x0, Size: 40]
	BehaviorTree* BehaviorTreeAsset;//[Offset: 0x28, Size: 40]
	BlackboardData* BlackboardDataAsset;//[Offset: 0x50, Size: 40]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0x10c0, Size: 4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0x10c4, Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0x10d0, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0x10f8, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0x1100, Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0x1108, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0x110c, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0x1114, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0x1118, Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0x1124, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0x1128, Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0x113c, Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x1140, Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x1144, Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0x1148, Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x114c, Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x1150, Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x1154, Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x1158, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x115c, Size: 4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x1160, Size: 92]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x11bc, Size: 76]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1208, Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1220, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x1224, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x124c, Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0x1254, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x1264, Size: 4]
	FString LoopSmokeCmpName;//[Offset: 0x1268, Size: 12]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x1274, Size: 12]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 1]
	float ExtraBoostFactor;//[Offset: 0x1284, Size: 4]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x12d8, Size: 8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x12e0, Size: 8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x12e8, Size: 8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x12f0, Size: 8]
	delegate OnVehicleInputMoveDelegate;//[Offset: 0x12fc, Size: 12]
	WheeledNeutralThrottleComponent* NeutralThrottleComp;//[Offset: 0x1308, Size: 4]
	enum RepNeutralThrottleStatus;//[Offset: 0x130c, Size: 1]
	STExtraPlayerCharacter* NeutralThrottleCharacter;//[Offset: 0x1310, Size: 4]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x3a68144
	void ServerSetNeutralThrottleStatus(enum NewStatus);// 0x3a68090
	void PostLoadFPPMesh();// 0x3a51d80
	void PlayerControllerLost();// 0x3a6807c
	void OnWheelsLanded();// 0x3a68068
	void OnRep_ReplicatedState();// 0x3592f9c
	void OnRep_NeutralThrottleStatus(enum PreStatus);// 0x3a67ff0
	void OnGearChanged(bool bIsUp);// 0x3a67f70
	void MulticastDrawNavigationDebug(float DeltaSeconds, Vector TargetLocation, Vector PathingLocation, Vector PathInputLocation);// 0x3a67e18
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x3a67c84
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x3a67af0
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x3a6789c
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x3a67648
	bool IsVehicleInputMove(float InputTolerance);// 0x3a675c8
	float GetVehicleSpeed();// 0x3a675a0
	float GetVehicleSlip();// 0x3a67570
	Vector GetRotationInputDir();// 0x38f6b0c
	float GetBoostFactor();// 0x3a30e38
	void BroadcastClientVehicleWheelDestroyEffect();// 0x3904398

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x4, Size: 4]
	ParticleSystem* SlipFx;//[Offset: 0x8, Size: 4]
	ParticleSystem* HubFx;//[Offset: 0xc, Size: 4]
	float minSpeed;//[Offset: 0x10, Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x310, Size: 4]
	float MaxQuadLength;//[Offset: 0x314, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x318, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x31c, Size: 4]
	float DefaultTrailWidth;//[Offset: 0x320, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float DefaultTrailLength;//[Offset: 0x328, Size: 4]
	float TextureLength;//[Offset: 0x32c, Size: 4]
	int USegmentNum;//[Offset: 0x330, Size: 4]
	int CoordU;//[Offset: 0x334, Size: 4]
	int SlippingCoordU;//[Offset: 0x338, Size: 4]
	int BrokenCoordU;//[Offset: 0x33c, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x344, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x348, Size: 4]
	int AdditionalCoordU;//[Offset: 0x34c, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x350, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x354, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x35c, Size: 4]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x3a90cf4
	void StopUpdate();// 0x3a90ce0
	bool IsUpdating();// 0x3a90cb8

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x698, Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a5, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a6, Size: 1]
	enum CollisionMode;//[Offset: 0x6a7, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x6a8, Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x6cc, Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x6d8, Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x6e4, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x700, Size: 60]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x73c, Size: 12]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x801fa08
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x801f8a8
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x801f7e4
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x801f720
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x801f65c
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x801f4b4
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x4a51734
	bool IsMeshSectionVisible(int SectionIndex);// 0x801f434
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x801f3b4
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x801f334
	int GetNumSections();// 0x801f30c
	int GetLastSectionIndex();// 0x801f2e4
	int FirstAvailableMeshSectionIndex();// 0x801f2bc
	void EndBatchUpdates();// 0x801f2a8
	bool DoesSectionExist(int SectionIndex);// 0x801f228
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x801ec38
	void CookCollisionNow();// 0x801ec24
	void ClearMeshSection(int SectionIndex);// 0x801ebac
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x801eb34
	void ClearCollisionConvexMeshes();// 0x801eb20
	void ClearAllMeshSections();// 0x801eb0c
	void ClearAllMeshCollisionSections();// 0x801eaf8
	bool ChangeRuntimeMeshSectionUVs(int SectionIndex, int Index, <int,Vector2D> UVs);// 0x801e8b4
	void BeginBatchUpdates();// 0x801e898
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x801e73c

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	int[] IndexBuffer;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	Box BoundingBox;//[Offset: 0xc, Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector Normal;//[Offset: 0x40, Size: 12]
	enum Type;//[Offset: 0x4c, Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x384, Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x390, Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x3ac, Size: 4]
	float AntiRollStiffness;//[Offset: 0x3b0, Size: 4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x3b4, Size: 12]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x3c8, Size: 4]
	<uint32,CachedWheelData> mapCachedWheelData;//[Offset: 0x40c, Size: 60]
	float MaxRPMLimit;//[Offset: 0x534, Size: 4]
	float TorqueRate;//[Offset: 0x538, Size: 4]
	byte[] SpecialModifyCollisionList;//[Offset: 0x53c, Size: 12]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x548, Size: 12]
	FName RootBodyName;//[Offset: 0x558, Size: 8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	bool IsInAir_bServerCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 1]
	bool IsInAir_bClientCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 1]
	int IsInAir_ShapeIndexToQuery;//[Offset: 0x564, Size: 4]
	float IsInAir_QueryInterval;//[Offset: 0x568, Size: 4]
	float IsInAir_QueryLength;//[Offset: 0x56c, Size: 4]
	delegate OnIsInAirChange;//[Offset: 0x570, Size: 12]
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	bool DynamicChangeDragCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	float DragCoefficientInAir;//[Offset: 0x588, Size: 4]
	float SmallSpeedIntervalThreshold;//[Offset: 0x598, Size: 4]
	float SmallSpeedThreshold;//[Offset: 0x59c, Size: 4]
	void SetVehicleToRestState();// 0x3a5c6d8
	void SetTransmissionSetup(out const VehicleTransmissionData NewTransmissionSetup);// 0x3a5c60c
	void SetSuspensionIgnoreMask(int InIgnoreMask);// 0x3a5c594
	void SetEngineSetup(out const VehicleEngineData NewEngineSetup);// 0x3a5c42c
	void SetDragCoefficient(float InDragCoefficient);// 0x3a5c3ac
	void SetDifferentialSetup(out const VehicleDifferential4WData NewDifferentialSetup);// 0x3a5c328
	void SetBoosting(float rate);// 0x3a5c2a8
	void RefreshBodyCollision();// 0x3a5c294
	void OnExpoldeStopWheel();// 0x3a5c280
	void MoveWheelShapeHeight(float Height);// 0x3a5c208
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3a5c108
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x3a5bf7c
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3a5be7c
	int GetSuspensionIgnoreMask();// 0x3a5be54
	int GetNumWheelsNotInAir();// 0x3a5be2c
	Vector GetLinearVelocity();// 0x3a5bde4
	Transform GetCMassLocalPose();// 0x3a5bd84
	void ForceWheelsRotate(float DriveTorque);// 0x3a5bd0c
	void ClearDestroyedWheel();// 0x3a5bcf8
	void ChangeDragCoefficientInInAir();// 0x3a5bce4

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x278, Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2e4, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x300, Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x328, Size: 88]
	float AckermannAccuracy;//[Offset: 0x380, Size: 4]

--------------------------------
Class: CachedWheelData
	bool WheelsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float WheelSuspensionOffset;//[Offset: 0x4, Size: 4]
	PhysicalMaterial* WheelContactMaterial;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 88]
	float MaxRPM;//[Offset: 0x58, Size: 4]
	float MOI;//[Offset: 0x5c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68, Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20, Size: 12]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 4]
	AkAudioEvent* EventStart;//[Offset: 0x4, Size: 4]
	AkAudioEvent* EventStop;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44, Size: 4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]
	int Flag;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WheeledNeutralThrottleComponent.VehicleEffectComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate NeutralThrottleInit;//[Offset: 0x160, Size: 12]
	delegate OnNeutralThrottle;//[Offset: 0x16c, Size: 12]
	STExtraVehicleSfxLoop NT_WheelFrictionGroundLoop;//[Offset: 0x188, Size: 92]
	STExtraWheeledVehicle* WheeledVehicle;//[Offset: 0x1e4, Size: 4]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0x1e8, Size: 96]
	enum NeutralThrottleStatus;//[Offset: 0x248, Size: 1]
	AkAudioEvent* NT_FrictionAudio;//[Offset: 0x270, Size: 4]
	void StartNeutralThrottle(enum NewStatus);// 0x3b84174
	void NeutralThrottleRelease();// 0x3b84160
	bool IsStartNeutralThrottle();// 0x3b84138
	void HandleVehicleWheelDestory();// 0x3b84124
	void HandleVehicleMove(bool bMove);// 0x3b840a4
	void HandleSeatOccupiersChanged();// 0x3b84090
	void HandleOnDSSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3b83f90
	float GetSimulateRPM();// 0x3b83f68
	bool CanNeutralThrottle();// 0x3b83f40
	void CameraShakeInternal();// 0x3b83f2c

--------------------------------
Class: VehicleEffectComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	void HandleAvatarEquiped();// 0x363d8c0
	void CreateDynamicMaterialInstance();// 0x3659294

--------------------------------
Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 4]
	Vector TargetPosition;//[Offset: 0x4, Size: 12]
	Vector StartPosition;//[Offset: 0x10, Size: 12]
	int[] PathWayPoints;//[Offset: 0x1c, Size: 12]
	int PathWayPointNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TrailerRepMovement
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x310, Size: 4]
	int DecalId;//[Offset: 0x314, Size: 4]
	int TeamID;//[Offset: 0x318, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x320, Size: 176]
	STExtraPlayerState* OwnerPS;//[Offset: 0x3d0, Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x3d4, Size: 8]
	AkComponent* AkComponent;//[Offset: 0x3dc, Size: 4]
	int PostEventID;//[Offset: 0x3e0, Size: 4]
	void RemoveSelfByParent();// 0x3735524
	void OnRep_DecalInfo();// 0x3735510
	void OnDamageableActorDestroyed(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x373544c

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	int TranslucentSortPriority;//[Offset: 0x60, Size: 4]
	int ClipPlaneNum;//[Offset: 0x64, Size: 4]
	float DynamicDeepScale;//[Offset: 0x68, Size: 4]
	FName SocketName;//[Offset: 0x70, Size: 8]
	enum ParentType;//[Offset: 0x78, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x7c, Size: 8]
	FName CollisionProfileName;//[Offset: 0x90, Size: 8]
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	FName DecalTag;//[Offset: 0xa0, Size: 8]

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0xec8, Size: 4]
	enum LiveState;//[Offset: 0xecc, Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xed0, Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xed8, Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0xedc, Size: 4]
	STExtraPetSpectatorCharacter* PetSpectatingCharacterOwner;//[Offset: 0xee0, Size: 4]
	bool bIsRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee4, Size: 1]
	float PlayerHealth;//[Offset: 0xee8, Size: 4]
	float PlayerHealthMax;//[Offset: 0xeec, Size: 4]
	float PlayerTemperature;//[Offset: 0xef0, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xef4, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xef8, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xf10, Size: 24]
	enum EUAVUseType;//[Offset: 0xf28, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf29, Size: 1]
	enum eCurVehicleType;//[Offset: 0xf2a, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xf2b, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xf2c, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xf38, Size: 12]
	Vector MapMark;//[Offset: 0xf44, Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 1]
	Vector RestartLocation;//[Offset: 0xf54, Size: 12]
	Rotator RestartRotate;//[Offset: 0xf60, Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0xf6c, Size: 60]
	<int,int> UseWheelMsgMap;//[Offset: 0xfa8, Size: 60]
	byte PlayerUseQuickSight;//[Offset: 0xfe4, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0xfe5, Size: 1]
	byte ShowMsgCnt;//[Offset: 0xfe6, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xfe7, Size: 1]
	byte UserCancelCnt;//[Offset: 0xfe8, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xfe9, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xfec, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xff0, Size: 4]
	RescueTime RescueTime;//[Offset: 0xff4, Size: 12]
	int AirDropBoxFirstPickUpNum;//[Offset: 0x1018, Size: 4]
	SyncTeamMatePlayerState[] TeamMatePlayerStateList;//[Offset: 0x101c, Size: 12]
	byte InTeamIndex;//[Offset: 0x1028, Size: 1]
	HistoricalTeammateInfo[] HistoricalTeammateInfoArray;//[Offset: 0x102c, Size: 12]
	HistoricalTeammateInfo[] CurrentNotInTeamHistoricalTeammateInfoArray;//[Offset: 0x1038, Size: 12]
	int PlayerLayerID;//[Offset: 0x1080, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0x1084, Size: 16]
	int Breath;//[Offset: 0x1094, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0x1098, Size: 12]
	float EnegyBuffStage1;//[Offset: 0x10a4, Size: 4]
	float EnegyBuffStage2;//[Offset: 0x10a8, Size: 4]
	float EnegyBuffStage3;//[Offset: 0x10ac, Size: 4]
	float EnegyBuffStage4;//[Offset: 0x10b0, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x10b4, Size: 4]
	float CurEnegyBuff;//[Offset: 0x10b8, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x10bc, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x10c0, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x10c4, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x10c8, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x10cc, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x10d0, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x10d4, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x10d8, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x10dc, Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x10e8, Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f5, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1114, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1115, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0x1118, Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1124, Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1125, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1126, Size: 1]
	uint32 LastInstigatorEnemyKey;//[Offset: 0x112c, Size: 4]
	int PlayersCountOnPlane;//[Offset: 0x1130, Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0x1134, Size: 12]
	float SingleRoundTotalDamage;//[Offset: 0x1140, Size: 4]
	int ContinuousKillsNum;//[Offset: 0x1144, Size: 4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0x1148, Size: 12]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0x1154, Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0x1160, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x1164, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0x1168, Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116c, Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0x1170, Size: 12]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0x117c, Size: 12]
	int MaxDecalCount;//[Offset: 0x11a0, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0x11a4, Size: 12]
	float LeanOutL_AimAngle;//[Offset: 0x1204, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0x1208, Size: 4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0x120c, Size: 12]
	int RemainingRevivalTime;//[Offset: 0x1218, Size: 4]
	int RemainingRevivalCount;//[Offset: 0x121c, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1220, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1221, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1222, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1223, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1224, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0x1228, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122c, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0x1230, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0x1238, Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0x1244, Size: 12]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x1250, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x125c, Size: 12]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0x1268, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0x1274, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x1280, Size: 12]
	<int> LastMarkInstanceID;//[Offset: 0x128c, Size: 60]
	<int> CurrentMarkInstanceID;//[Offset: 0x12c8, Size: 60]
	<int,MarkSyncData> CurrentMarkInstanceIDMap;//[Offset: 0x1304, Size: 60]
	<int,MarkSyncData> LastMarkInstanceIDMap;//[Offset: 0x1340, Size: 60]
	float KdValue;//[Offset: 0x137c, Size: 4]
	Vector LastVehicleLocation;//[Offset: 0x1394, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0x13a8, Size: 12]
	delegate OnPlayerUnderAttack;//[Offset: 0x13b4, Size: 12]
	delegate OnSetPlane;//[Offset: 0x13c0, Size: 12]
	Vector[] MapMultiMark;//[Offset: 0x13cc, Size: 12]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1414, Size: 1]
	Vector AirplaneStartLoc;//[Offset: 0x1418, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x1424, Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x1430, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x143c, Size: 12]
	Vector LastValidAirplaneCanJumpLoc;//[Offset: 0x1448, Size: 12]
	Vector LastValidAirplaneForceJumpLoc;//[Offset: 0x1454, Size: 12]
	Actor* Plane;//[Offset: 0x1460, Size: 4]
	int FlightNo;//[Offset: 0x1464, Size: 4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1468, Size: 1]
	FName[] CurMapTags;//[Offset: 0x146c, Size: 12]
	FName[] ShowingMapTags;//[Offset: 0x1478, Size: 12]
	delegate OnMapTagsChangedDelegate;//[Offset: 0x1484, Size: 12]
	int TeammateDisappearReportCount;//[Offset: 0x1490, Size: 4]
	float TeammateDisappearReportDistance;//[Offset: 0x1498, Size: 4]
	TeamMateDisappearInfo SelfDisappearInfo;//[Offset: 0x149c, Size: 68]
	<uint64> TeammateKillUIDSet;//[Offset: 0x14e0, Size: 60]
	uint64 LastKnockOutPlayerUID;//[Offset: 0x1520, Size: 8]
	bool bInAFK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1528, Size: 1]
	void UpdateSelfHealthDataOnServer();// 0x3a13820
	void UpdateDeliveryData(uint32 InDeliverPlayerKey, byte DeliveryAIType);// 0x3a1375c
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x3a1360c
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x3a134b4
	void SetPlayerGiveUp(bool InGiveUp);// 0x3a13434
	void SetLastValidAirplaneInfo();// 0x3a13420
	void SetInTeamIndex(int Index);// 0x3a133a8
	void SetForceSyncTeammateData(bool IsForCE);// 0x3a13328
	void SetCurMapTags(const FName[] mapTags);// 0x3a13234
	void SetCharacterStringProperty_Replay(uint32 InPlayerKey, FString KeyName, FString InValue);// 0x3a130a8
	void SetCharacterIntProperty_Replay(uint32 InPlayerKey, FString KeyName, int InValue);// 0x3a12f5c
	void SetAirplaneStopLoc(Vector StopLoc);// 0x3a12edc
	void SetAirplaneStartLoc(Vector StarLoc);// 0x3a12e5c
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x3a12ddc
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x3a12d5c
	void SaveBuffData();// 0x3a12d40
	void RPC_RspTeammateDisappearInfo(STExtraPlayerState* InPlayerState, enum RelevantStatus, Vector ServerLoc, uint32 PawnNetGUID, STExtraBaseCharacter* ReportCharacter);// 0x3a12b48
	void RPC_ReqTeammateDisappearInfo(uint32 nPlayerKey);// 0x3a12a94
	void RPC_OnPlayerUnderAttack();// 0x3a12a78
	void RestoreBuffData();// 0x37769d0
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, float RemainingRescueTotleTime, bool IsFirstPlayerHelper);// 0x3a1288c
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x3a12784
	void RespondToPawnCanCarryOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x3a1267c
	void RespondToPawnCanCaptivateOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool bIsBegged);// 0x3a12574
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* Param2);// 0x3a12474
	void RemovePaintDecal(IdeaDecalActor* DecalActor);// 0x3a123fc
	void RefreshRevivalState();// 0x3a123e8
	void RefreshFollowMark();// 0x3a123d4
	void RefreshAirplaneRoute();// 0x3a123c0
	void QuickSignClientReceiveMsgForReplay(const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey);// 0x3a12218
	void QuickSignClientDelMsgForReplay(FString MsgID);// 0x3a12154
	void PlayerStateSetPlane__DelegateSignature(Actor* Plane);// 0x4a51734
	int PlayersCountOnMyPlane();// 0x3a1212c
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x4a51734
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x4a51734
	void OnRep_VisualFieldInfo();// 0x3a12118
	void OnRep_UpdateKillMonsterNum();// 0x364d8f4
	void OnRep_UID();// 0x3a120fc
	void OnRep_TeamMatePlayerStateList();// 0x3a120e8
	void OnRep_SingleRoundTotalDamage();// 0x3a120d4
	void OnRep_RescueTime();// 0x3a120c0
	void OnRep_RemainingRevivalTime();// 0x3a120ac
	void OnRep_RemainingRevivalCount();// 0x4a51734
	void OnRep_RankNotify();// 0x3a12098
	void OnRep_PlayerTemperatureChanged();// 0x3a12084
	void OnRep_PlayersCountOnPlane();// 0x3a12070
	void OnRep_PlayerReconnectEvent();// 0x3a1205c
	void OnRep_PlayerName();// 0x357b710
	void OnRep_PlayerLostConnectionEvent();// 0x3a12048
	void OnRep_PlayerLiveStateInternal();// 0x3a12034
	void OnRep_PlayerLiveState();// 0x3a12018
	void OnRep_PlayerKillsChange();// 0x3a11ffc
	void OnRep_PlayerIsFollowing();// 0x3a11fe8
	void OnRep_PlayerGiveUp();// 0x39906cc
	void OnRep_PlayerGameOver();// 0x3a11fd4
	void OnRep_PlayerExitGameEvent();// 0x3a11fc0
	void OnRep_PlayerAliasShowInfoList();// 0x3a11fac
	void OnRep_Plane();// 0x3a11f98
	void OnRep_PetSpectatingCharacterOwner();// 0x3a11f84
	void OnRep_MarkSyncData();// 0x3a11f70
	void OnRep_MarkSelfSyncData();// 0x3a11f5c
	void OnRep_MapMarkNotify();// 0x3a11f48
	void OnRep_LastVehicleLocation();// 0x3a11f34
	void OnRep_IsIDCardCaptured();// 0x3a11f20
	void OnRep_InTeamIndex();// 0x3a11f0c
	void OnRep_HPChanged();// 0x3592f9c
	void OnRep_HasRevivalSign();// 0x3a11ef0
	void OnRep_HasEscaped();// 0x3a11edc
	void OnRep_CurMapTags();// 0x3a11ec8
	void OnRep_ChangeRevivalState();// 0x3a11eac
	void OnRep_ChangeInRevivingState();// 0x3a11e98
	void OnRep_BreathChanged();// 0x3a11e84
	void OnRep_BPS();// 0x3a11e70
	void OnRep_AirplaneStopLoc();// 0x3a11e5c
	void OnRep_AirplaneStartLoc();// 0x3a11e48
	void OnRep_AirplaneForceJumpLoc();// 0x3a11e34
	void OnRep_AirplaneCanJumpLoc();// 0x3a11e20
	void OnPlayerUnderAttack__DelegateSignature(FString PUID);// 0x4a51734
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x4a51734
	void OnNewRound();// 0x382a8e4
	void OnMapTagsChangedDelegate__DelegateSignature(STExtraPlayerState* CurPlayerState);// 0x4a51734
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x4a51734
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x4a51734
	void OnClientVeteranRecruitIndexUpdated();// 0x3a11e04
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x382a7dc
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x382a6d4
	void LuaReceiveBeginPlay();// 0x3a11de8
	void LocalNotifyRescueStateChanged(bool bRescued);// 0x3a11d68
	void Kill(int ScoreNum, Character* VictimPawn);// 0x3a11ca4
	bool IsTeamMateListContainsPlayer(STExtraPlayerState* InPlayState);// 0x3a11c24
	bool IsSinglePlayer();// 0x3a11bfc
	bool IsLocalPlayerState();// 0x3a11bd4
	bool IsInGame();// 0x3a11ba4
	bool IsInBetrayState();// 0x3a11b74
	bool IsAlive();// 0x3a11b4c
	void HandleSetCharacterStringProperty(FString StrPlayerKey, FString KeyName, FString InValue);// 0x3a11980
	void HandleSetCharacterIntProperty(FString StrPlayerKey, FString KeyName, int InValue);// 0x3a117f4
	void HandleRescueStateChanged();// 0x3a117d8
	uint32 GetUserIDByMemberID(int memberID);// 0x3a11750
	void GetTeamMatePlayerUIDList(out FString[] OutList, bool bIsExcludeMyself);// 0x3a115c4
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x3a114a0
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x3a11420
	STExtraPlayerState* GetTeammatePlayerState(int TeammateIndex);// 0x3a11060
	int GetTeamMateIndexByName(FString TeammateName);// 0x3a1135c
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x3a112dc
	int GetTeammateCount();// 0x3a112b4
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x3a111f0
	FString GetStringPlayerKey();// 0x3a11130
	float GetPlayerTemperature();// 0x3a11108
	int GetPlayerTeamIndex();// 0x3a110e0
	STExtraPlayerState* GetPlayerStateByInTeamIndex(const int Index);// 0x3a11060
	float GetPlayerMaxTemperature();// 0x3a11038
	float GetPlayerMaxHealth();// 0x3a11010
	byte GetPlayerInTeamIndexByPlayerState(STExtraPlayerState* TeammatePlayerState);// 0x3a10f90
	byte GetPlayerInTeamIndex();// 0x3a10f68
	int GetPlayerIndexInTeam();// 0x3a10f40
	float GetPlayerHealthPercent();// 0x3a10f18
	float GetPlayerHealth();// 0x3a10ef0
	Vector GetPlayerCurLoc();// 0x3a10ea8
	STExtraBaseCharacter* GetPlayerCharacter();// 0x3a10e80
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x3a10dd4
	STExtraPetSpectatorCharacter* GetPetSpectatingPawn();// 0x3a10dac
	float GetMaxEnegyBuff();// 0x3a10d58
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x3a10bfc
	Vector GetMapMark3DLocation();// 0x3a10bb4
	Vector GetLastValidAirplaneForceJumpLoc();// 0x3a10b84
	Vector GetLastValidAirplaneCanJumpLoc();// 0x3a10b54
	int GetHelpRevivalCount();// 0x3a10b24
	Vector GetForceJumpLoc();// 0x3a10af4
	Vector GetCanJumpLoc();// 0x3a10ac4
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x3a109a8
	float GetBreathPercentage();// 0x3a10980
	int GetBountyGold();// 0x4a51734
	Vector2D GetAutoParachuteJumpPlaneLoc();// 0x3a10940
	MarkSyncData[] GetAllSelfMarkData();// 0x3a108dc
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x3a10810
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x3a106ec
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x3a10640
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x3a1046c
	Vector GetAirplaneStopLoc();// 0x3a1043c
	Vector GetAirplaneStartLoc();// 0x3a1040c
	Vector2D GetAirplaneForward2D();// 0x3a103cc
	void ForceNotifyAlertUpdate();// 0x3a103b8
	bool FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x3a10258
	void FadeTeammatesMapMark();// 0x3a10244
	void DispatchPlayerExitEvent();// 0x361390c
	Vector Convert2DMarkTo3D(Vector MarkLoc2D);// 0x3a101b0
	Vector2D ConverMapMarkTo2D(out const Vector MapMark3D);// 0x3a1011c
	void ClientSyncRoute(Vector StartLoc, Vector StopLoc);// 0x3a10054
	void ClientReportTeammateDisappearInfo();// 0x4a51734
	void ClientDisplayGameTipWithMsgID(int ID, FString Param1, FString Param2);// 0x3a0fe90
	void ChangeFadeMapMarkDist(float NewDist);// 0x3a0fe10
	bool CanSelfRevive();// 0x3a0fde0
	bool CanRevivalTeammate();// 0x3a0fdb8
	bool CanBeRevival();// 0x3a0fd88
	byte CalculateEnegyStage();// 0x3a0fd60
	void BroadcastFatalDamageToClientWithStructForReplay(const FatalDamageParameter FatalDamageParameter);// 0x3a0fc4c
	void BPKill(Character* VictimPawn);// 0x3a0fbcc
	void AppendTeamMatePlayerStateList(out STExtraPlayerState*[] InTeamMatePlayerStateList);// 0x3a0fb00
	void AddOneAssist(int VictimKey);// 0x3a0fa80
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x3a0f9bc
	void AddEnegySafety(float AddVal);// 0x3a0f944
	void AddDamager(STExtraBaseCharacter* Damager, int DamageType);// 0x3a0f880
	void AddDamageAmount(Character* VictimPawn, float FinalDamage, bool bHitHead);// 0x3a0f770

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraPetSpectatorCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnMovementBaseChanged;//[Offset: 0xcc8, Size: 12]
	PetLevelInfo PetLevelInfo;//[Offset: 0xcd4, Size: 8]
	delegate PetSpectatorStateChangeDelegate;//[Offset: 0xcf4, Size: 12]
	SpectatorPetStateInfo CurrentStateInfo;//[Offset: 0xd00, Size: 8]
	FName FeatureActorName;//[Offset: 0xd08, Size: 8]
	float BornMaxHight;//[Offset: 0xd10, Size: 4]
	float BornMinHight;//[Offset: 0xd14, Size: 4]
	float BornCamerHight;//[Offset: 0xd18, Size: 4]
	float BornMaxForwardDis;//[Offset: 0xd1c, Size: 4]
	float BornMinForwardDis;//[Offset: 0xd20, Size: 4]
	float WarterBornMoreHight;//[Offset: 0xd24, Size: 4]
	PlayerPetMovementComponent* PetMovementComponent;//[Offset: 0xd28, Size: 4]
	float MaxSpecDistance;//[Offset: 0xd2c, Size: 4]
	STExtraPetSpectatorAnimInstance* PetAnimInstance;//[Offset: 0xd34, Size: 4]
	delegate OnSwimStateChange;//[Offset: 0xd38, Size: 12]
	bool TeleportToPointSafety(Vector Location, Rotator Rotation);// 0x39c057c
	bool SpectatorPetLeaveState(enum State);// 0x39c04f4
	bool SpectatorPetHasState(enum State);// 0x39c046c
	bool SpectatorPetEnterState(enum State, int Params);// 0x39c03a0
	bool SpectatorPetBornRightPostion(STExtraPlayerCharacter* SpectatorPawn, out const ResolvePenetrationParams ResolveParams, out Vector backLocation);// 0x39c017c
	void ServerHandleSpectatorPetStateMsg(enum MsgType, int Params);// 0x39c0080
	void OnRep_PetLevelInfo();// 0x39c0064
	void OnRep_CurrentStateInfo();// 0x39c0048
	bool LocalHandleSpectatorPetStateMsg(enum MsgType, int Params);// 0x4a51734
	void ClientOnPossessedBy();// 0x3974658
	void BPOnRespawned();// 0x4a51734
	void BPOnRecycled();// 0x4a51734

--------------------------------
Class: PetLevelInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpectatorPetStateInfo
	enum CurrentState;//[Offset: 0x0, Size: 1]
	int Param;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerPetMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float ClearIgnoredActorsTime;//[Offset: 0x680, Size: 4]
	STExtraPetSpectatorCharacter* PetOwner;//[Offset: 0x688, Size: 4]
	bool bFollowMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool bEnableSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	float TraceWaterHalfHeight;//[Offset: 0x690, Size: 4]
	float TraceWaterMaxHalfHeight;//[Offset: 0x694, Size: 4]
	bool bEnableServerAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	float SecurityAllowedMoveSpeedRatio;//[Offset: 0x69c, Size: 4]
	float SecurityAllowedJumpHeightRatio;//[Offset: 0x6a0, Size: 4]
	bool ShouldRecordPosition();// 0x37f9ae8
	STExtraPetSpectatorCharacter* GetPetOwner();// 0x37f9ac0

--------------------------------
Class: STExtraPetSpectatorAnimInstance.AnimInstance.Object
	STExtraPetSpectatorCharacter* C_PetCharacter;//[Offset: 0x300, Size: 4]
	int C_DeviceLevel;//[Offset: 0x304, Size: 4]
	bool bIsPetAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	Vector Velocity;//[Offset: 0x30c, Size: 12]
	float PetMoveSpeed;//[Offset: 0x318, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool bIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 1]
	float SwimmingAnimRate;//[Offset: 0x320, Size: 4]
	AnimSequenceBase* C_AppearAnim;//[Offset: 0x324, Size: 4]
	AnimSequenceBase* C_DisppearAnim;//[Offset: 0x328, Size: 4]
	AnimSequenceBase* C_IdleAnim;//[Offset: 0x32c, Size: 4]
	AnimSequenceBase* C_FreeFallAnim;//[Offset: 0x330, Size: 4]
	AnimSequenceBase* C_FastFreeFallAnim;//[Offset: 0x334, Size: 4]
	AnimSequenceBase* C_FollowAnim;//[Offset: 0x338, Size: 4]
	AnimSequenceBase* C_FlyAroundAnim;//[Offset: 0x33c, Size: 4]
	AnimSequenceBase* C_SwimmingAnim;//[Offset: 0x340, Size: 4]
	BlendSpaceBase* C_SwimmingBS;//[Offset: 0x344, Size: 4]
	BlendSpaceBase* C_MovementBS;//[Offset: 0x348, Size: 4]
	AnimSequence* C_JumpAnim;//[Offset: 0x34c, Size: 4]
	AnimSequence* C_InAirAnim;//[Offset: 0x350, Size: 4]
	AnimSequence* C_LandingAnim;//[Offset: 0x354, Size: 4]
	void ResetJump();// 0x39bf838
	void OnPetSpectatorStateChange(enum State, FString Param);// 0x39bf730
	void OnPetMontageStarted(AnimMontage* InMontage);// 0x35b5a24
	void OnPetMontageEnded(AnimMontage* InMontage, bool bInterrupted);// 0x39bcf30
	void OnJumped();// 0x39bf71c
	void DestroySubAnimations();// 0x39bcd54

--------------------------------
Class: ResolvePenetrationParams
	bool bLineTracePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bBackDirAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int IterationRounds;//[Offset: 0x4, Size: 4]
	int IterationDirections;//[Offset: 0x8, Size: 4]
	float AdjustRadius;//[Offset: 0xc, Size: 4]
	float AdjustMaxHeight;//[Offset: 0x10, Size: 4]
	FName IgnoreTag;//[Offset: 0x18, Size: 8]
	FName PushupTag;//[Offset: 0x20, Size: 8]
	float OverlapShapeInflation;//[Offset: 0x28, Size: 4]
	float PassWallShapeInflation;//[Offset: 0x2c, Size: 4]
	World* InWorld;//[Offset: 0x30, Size: 4]
	Actor*[] OverlapIgnoreActors;//[Offset: 0x34, Size: 12]
	Actor*[] PassWallIgnoreActors;//[Offset: 0x40, Size: 12]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RescueTime
	bool bBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float RescueStartTime;//[Offset: 0x4, Size: 4]
	float RescueExpectedEndTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SyncTeamMatePlayerState
	STExtraPlayerState* TeammatePlayerState;//[Offset: 0x0, Size: 8]
	byte PlayerInTeamIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HistoricalTeammateInfo
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bIsDeliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	uint64 OriginalUID;//[Offset: 0x28, Size: 8]
	int InTeamIndex;//[Offset: 0x30, Size: 4]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 52]
	FString PlayerName;//[Offset: 0x34, Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterBuffRecord
	int BuffID;//[Offset: 0x0, Size: 4]
	int CauseSkillID;//[Offset: 0x4, Size: 4]
	int LayerCount;//[Offset: 0x8, Size: 4]
	Actor* Causer;//[Offset: 0xc, Size: 8]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 1]
	enum MapAdded;//[Offset: 0x1, Size: 1]
	byte InstanceID;//[Offset: 0x2, Size: 1]
	int TypeId;//[Offset: 0x4, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x8, Size: 24]
	Vector_NetQuantize Location;//[Offset: 0x20, Size: 12]
	Actor* Actor;//[Offset: 0x2c, Size: 8]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CustomMarkEventData
	enum InWhichMap;//[Offset: 0x0, Size: 1]
	float CreateTime;//[Offset: 0x4, Size: 4]
	int CustomState;//[Offset: 0x8, Size: 4]
	FString CustomString;//[Offset: 0xc, Size: 12]

--------------------------------
Class: TeamMateDisappearInfo
	bool bHasPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bCanGetPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bMovementCompTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bMovementActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAvatarHeadVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	enum SerializeStatus;//[Offset: 0x6, Size: 1]
	enum NetRelevantStatus;//[Offset: 0x7, Size: 1]
	float PawnCreateTime;//[Offset: 0x8, Size: 4]
	float PawnDestroyTime;//[Offset: 0xc, Size: 4]
	float ReportTime;//[Offset: 0x10, Size: 4]
	Vector Location;//[Offset: 0x14, Size: 12]
	Vector MeshLocation;//[Offset: 0x20, Size: 12]
	Vector ServerLocation;//[Offset: 0x2c, Size: 12]
	FString PlayerUID;//[Offset: 0x38, Size: 12]

--------------------------------
Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString PlayerName;//[Offset: 0xc, Size: 12]
	Vector HitPos;//[Offset: 0x18, Size: 12]
	FString ConfigKey;//[Offset: 0x24, Size: 12]
	int audioID;//[Offset: 0x30, Size: 4]
	FString ParamString;//[Offset: 0x34, Size: 12]
	int BindActorGUID;//[Offset: 0x40, Size: 4]
	int RelationID;//[Offset: 0x44, Size: 4]
	uint32 PlayerKey;//[Offset: 0x48, Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x4c, Size: 4]
	enum MsgType;//[Offset: 0x50, Size: 1]

--------------------------------
Class: FatalDamageParameter
	FatalDamageStringParameter String;//[Offset: 0x0, Size: 84]
	int DamageType;//[Offset: 0x54, Size: 4]
	int AdditionalParam;//[Offset: 0x58, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int ResultHealthStatus;//[Offset: 0x60, Size: 4]
	int Relationship;//[Offset: 0x64, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x68, Size: 4]
	int realKillerNewKillNum;//[Offset: 0x6c, Size: 4]
	uint32 CauserKey;//[Offset: 0x70, Size: 4]
	uint32 VictimKey;//[Offset: 0x74, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x78, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x7c, Size: 4]
	int CauserType;//[Offset: 0x80, Size: 4]
	int VictimType;//[Offset: 0x84, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0x88, Size: 12]
	int AssistNum;//[Offset: 0x94, Size: 4]
	bool isCausedByDevliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: FatalDamageStringParameter
	FString CauserName;//[Offset: 0x0, Size: 12]
	FString VictimName;//[Offset: 0xc, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x18, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x24, Size: 12]
	FString RealKillerName;//[Offset: 0x30, Size: 12]
	FString CauserNation;//[Offset: 0x3c, Size: 12]
	FString VictimNation;//[Offset: 0x48, Size: 12]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x2c0, Size: 4]
	float TriggerInterval;//[Offset: 0x2c4, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x2c8, Size: 4]
	void OnTriggered();// 0x4a51734

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector ImpactNormal;//[Offset: 0xc, Size: 12]
	Vector ImpactVelocity;//[Offset: 0x18, Size: 12]
	Actor* HitActor;//[Offset: 0x24, Size: 8]
	PrimitiveComponent* HitComponent;//[Offset: 0x2c, Size: 8]
	float BulletHitTime;//[Offset: 0x34, Size: 4]
	float BulletLaunchTime;//[Offset: 0x38, Size: 4]
	float BulletMovedDistance;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	bool bUseBulletLocReplaceImpactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e2, Size: 1]
	bool bUseCachePool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e3, Size: 1]
	Vector ServerShootPos;//[Offset: 0x5e4, Size: 12]
	Vector ImpactVelocity;//[Offset: 0x5f0, Size: 12]
	float bFixDistanceToShooter;//[Offset: 0x5fc, Size: 4]
	float ServerShootTime;//[Offset: 0x600, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x610, Size: 80]
	float VerifyBlockTolDis;//[Offset: 0x660, Size: 4]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x684, Size: 4]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x3629fe0
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x38184a8
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x3818390
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x3629ef4
	void OnImpact(out const HitResult _ImpactResult);// 0x3629e14
	bool IsValidRoleToImpact();// 0x36ad170
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3818158

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 4]
	Actor* Instigator;//[Offset: 0x44, Size: 4]
	uint32 ShootID;//[Offset: 0x48, Size: 4]

--------------------------------
Class: VehicleTrailerComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnLinkStateChange;//[Offset: 0x150, Size: 12]
	delegate OnTrailerLinkStateChange;//[Offset: 0x15c, Size: 12]
	int MaxTrailerNum;//[Offset: 0x178, Size: 4]
	<enum,int> LinkFailedTips;//[Offset: 0x17c, Size: 60]
	float Timer_TrailerPoll;//[Offset: 0x1b8, Size: 4]
	Vector LinkerPoint;//[Offset: 0x1bc, Size: 12]
	float ExtentTimes4Distance;//[Offset: 0x1c8, Size: 4]
	float RepDistanceErrorSq;//[Offset: 0x1cc, Size: 4]
	float LowSpeedRepDistanceErrorSq;//[Offset: 0x1d0, Size: 4]
	float LowSpeed4RepDistanceError;//[Offset: 0x1d4, Size: 4]
	RepTrailerLinkState ReplicatedLinkState;//[Offset: 0x1d8, Size: 8]
	VehicleTrailerComponent* CandidatePrev;//[Offset: 0x1e0, Size: 4]
	CameraOffsetData CameraDta;//[Offset: 0x208, Size: 44]
	void TryUnlink();// 0x3b3dc40
	void TryLink();// 0x3b3dc2c
	void TrailerPoll();// 0x3b3dc18
	void TrailerLinkStateChangeDelegate__DelegateSignature(VehicleTrailerComponent* Trailer, enum LinkState);// 0x4a51734
	void ServerUnlink();// 0x3b3dbbc
	void ServerLink();// 0x3b3db60
	void ServerForceLinkTo(VehicleTrailerComponent* PrevTrailer);// 0x3b3dae8
	void OnRep_LinkState(out const RepTrailerLinkState LastLinkState);// 0x3b3da5c
	void OnMeshPhysicsCreated();// 0x3b3da48
	void OnLinkConstraintBroken(int ConstraintIndex);// 0x3b3d9d0
	void OnHealthStateChanged(enum HealthState);// 0x3b3d958
	void OnDriverChanged(STExtraPlayerCharacter* OldDriver, STExtraPlayerCharacter* NewDriver);// 0x3b3d89c
	void LinkStateChangeDelegate__DelegateSignature(enum LinkState);// 0x4a51734
	bool IsTrailer();// 0x3b3d870
	bool HasTrailer();// 0x3b3d844
	int GetTrailerNum();// 0x3b3d81c
	VehicleTrailerComponent* GetPrev();// 0x3b3d7f0
	VehicleTrailerComponent* GetNext();// 0x3b3d7c4
	enum GetLinkState();// 0x3b3d7a8
	VehicleTrailerComponent* GetHead();// 0x3b3d780

--------------------------------
Class: RepTrailerLinkState
	enum LinkState;//[Offset: 0x0, Size: 1]
	VehicleTrailerComponent* Prev;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0x108, Size: 12]
	float SeekAreaPixelSize;//[Offset: 0x114, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0x118, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0x120, Size: 8]
	float ScopeInDelayTime;//[Offset: 0x128, Size: 4]
	float InitialLockFrameLength;//[Offset: 0x12c, Size: 4]
	float FinalLockFrameLength;//[Offset: 0x130, Size: 4]
	float MaxSeekDeistance;//[Offset: 0x134, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x138, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x13c, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x140, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x144, Size: 4]
	float TraceTargetInterval;//[Offset: 0x148, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x14c, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x150, Size: 60]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x18c, Size: 60]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x1c8, Size: 60]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x204, Size: 4]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x208, Size: 4]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x20c, Size: 4]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x210, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x214, Size: 4]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x21c, Size: 12]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x228, Size: 12]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x234, Size: 12]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x250, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x254, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x258, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool bSeekAndLockAlwaysValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	bool bSeekAndLockWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	bool bSeekAndLockToVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 1]
	bool bSeekAndLockToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	Actor* LastLockSoundTaget;//[Offset: 0x2c4, Size: 8]
	void ShowEnemyLaunchRocketTips();// 0x3794aa0
	void SetCurrentLockTarget(Actor* InTarget);// 0x3863d40
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x3863c44
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x3863b90
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x3863a94
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x38639e0
	void RemoveTargetList(Actor*[] TargetList);// 0x3863888
	void RemoveTarget(Actor* Target);// 0x3863810
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x4a51734
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x4a51734
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x4a51734
	void InitComplete();// 0x3592f9c
	void HandleTargetOutOfSeekArea();// 0x38637fc
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x3754fa8
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x386377c
	enum GetCurrentSeekAndLockStage();// 0x386374c
	Actor* GetCurrentLockTarget();// 0x3863724
	bool CheckTargetIsVisible(Actor* Target);// 0x3754ddc
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x38636a4
	void AddTarget(Actor* Target);// 0x386362c

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	float TolerateDistanceFractor;//[Offset: 0xc8, Size: 4]
	float MaxPacketLossRate;//[Offset: 0xcc, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xd0, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xd4, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xd8, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xdc, Size: 4]
	float SecondsSinceLastTeleport2SkipCheckDSAverageSpeed;//[Offset: 0xe0, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xe8, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xec, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xf0, Size: 4]
	int MaxLocusFailTime;//[Offset: 0xf4, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xf8, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0xfc, Size: 4]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x100, Size: 32]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x18c, Size: 140]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x218, Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x290, Size: 60]
	ClientMoveSpeedCheck ClientMoveSpeedCheck;//[Offset: 0x2d0, Size: 40]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x2f8, Size: 36]
	float MaxJumpHeight;//[Offset: 0x320, Size: 4]
	Character* CharacterOwner;//[Offset: 0x324, Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	void SetJumpLimitorJumpDistanceScale(const float InValue);// 0x36dbb90
	void SetJumpLimitorCheckLowSpeedThreshold(const float SpeedThreshold);// 0x36dbb90
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x3793d00
	void RefreshRealMaxJumpHeight();// 0x3592f9c
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x3793b74
	void Ping2Client(float ServerTime);// 0x3644b58
	void OnPreReconnectOnServer();// 0x3793b60
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x37938b8
	void DebugDrawLine(const Vector Start, const Vector End);// 0x379380c
	void ClearJumpLimit();// 0x37937f8

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x4, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bRecordOnlyIfReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	int VerifyFailedCnt;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	uint32 bIgnoreCheck;//[Offset: 0x4, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x8, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0xc, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x10, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x14, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x18, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x1c, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x20, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x24, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x28, Size: 4]
	float MaxClientSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74, Size: 4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ClientMoveSpeedCheck
	float ThresholdScale;//[Offset: 0x20, Size: 4]

--------------------------------
Class: RealtimeMoveSpeedCheck

--------------------------------
Class: ShovelInfo

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xc4, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc8, Size: 4]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x3614ee4

--------------------------------
Class: CharacterParachuteComponent.LuaInstancedActorComponent.ActorComponent.Object
	float CurrentFallSpeed;//[Offset: 0x14c, Size: 4]
	float CurrentDiveRate;//[Offset: 0x158, Size: 4]
	float FreeFall_InputForwardTriggerThreshold;//[Offset: 0x16c, Size: 4]
	float FreeFall_InputRightTriggerThreshold;//[Offset: 0x170, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x174, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x178, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x17c, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x180, Size: 4]
	float FreeFall_MinForwardSpeed;//[Offset: 0x184, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x188, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x18c, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x190, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x194, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x198, Size: 4]
	float FreeFall_MinPitchForwardAngle;//[Offset: 0x19c, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x1a0, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x1a4, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x1a8, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x1ac, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x1b0, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x1b4, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x1b8, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	float Opened_AcceFall;//[Offset: 0x1c0, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x1c4, Size: 4]
	float Opened_AcceForward;//[Offset: 0x1c8, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x1cc, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x1d0, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x1d4, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x1d8, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x1dc, Size: 4]
	float Opened_AcceRight;//[Offset: 0x1e0, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x1e4, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x1e8, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x1ec, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x1f0, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x1f4, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x1f8, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x1fc, Size: 4]
	float ReliableRPCInterval;//[Offset: 0x200, Size: 4]
	float UseNewVerifyHeightInParachuteOpen;//[Offset: 0x204, Size: 4]
	float OpenRealMoveAndWallCheckHight;//[Offset: 0x208, Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x21c, Size: 12]
	float Launch_Time;//[Offset: 0x228, Size: 4]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x22c, Size: 12]
	Vector Launch_Accel;//[Offset: 0x238, Size: 12]
	bool Launch_AutoExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	float Launch_YawRandomDelta;//[Offset: 0x248, Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x24c, Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x250, Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x254, Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x258, Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x25c, Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x260, Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x264, Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x268, Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x26c, Size: 4]
	delegate OnInitLaunch;//[Offset: 0x270, Size: 12]
	delegate OnResetLaunch;//[Offset: 0x27c, Size: 12]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x288, Size: 12]
	delegate OnLanded;//[Offset: 0x294, Size: 12]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x2a0, Size: 4]
	float AllowMaxDistanceSqInParachuteOpen;//[Offset: 0x2a4, Size: 4]
	float AllowMaxVelocitySqAtServer;//[Offset: 0x2a8, Size: 4]
	float MaxZAllowDistance;//[Offset: 0x2ac, Size: 4]
	float MaxZAllowDistanceNew;//[Offset: 0x2b0, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	float FollowerDist;//[Offset: 0x2d8, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x2dc, Size: 4]
	bool bLuaSetCheckClientPosVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bGmSetUseServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	bool bGmSetUseMaxForwardInputValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 1]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x358, Size: 40]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x380, Size: 4]
	float DistanceToJumpPlaneLoc;//[Offset: 0x388, Size: 4]
	float AutoParachuteStopMoveForwardDistance;//[Offset: 0x38c, Size: 4]
	float AutoParachuteMoveForwardRate;//[Offset: 0x390, Size: 4]
	float AutoParachuteOpenMoveForwardRate;//[Offset: 0x394, Size: 4]
	float AutoParachutePitchOffset;//[Offset: 0x398, Size: 4]
	float ParachuteContinuTime;//[Offset: 0x3c8, Size: 4]
	float ParachuteContinuTimeDsMore;//[Offset: 0x3cc, Size: 4]
	float ParachuteContinuStartTime;//[Offset: 0x3d0, Size: 4]
	bool ParachuteStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	float CanbeMoreOpened_MaxForwardSpeed;//[Offset: 0x3d8, Size: 4]
	int ParachuteMoveListLength;//[Offset: 0x3dc, Size: 4]
	float AdjustParachuteTimeGap;//[Offset: 0x3e0, Size: 4]
	int ErrorMoveTimeSendMaxTime;//[Offset: 0x3e4, Size: 4]
	ParachuteMoveState[] ParachuteMoveList;//[Offset: 0x3ec, Size: 12]
	bool VerifyClientTimeStamp(float TimeStamp, out const Vector Position, out const Vector Velocity);// 0x365da10
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x365d874
	void UpdateRadiouBlurState(float DeltaTime, float ThrottleInput, float SteerInput, enum State);// 0x365d72c
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x365d590
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x365d490
	void UpdateLaunchRotation(float InputForward, float InputRight, float DeltaTime);// 0x365d390
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x365d244
	void TriggerInputUtil(float InputForward, float InputRight, out int InputForwardTriggered, out int InputRightTriggered);// 0x365d0d8
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x365cf84
	void StopParachute();// 0x365cf70
	void StartParachute();// 0x365cf5c
	void SetParachuteVelocity(out const Vector NewVelocity);// 0x365ced8
	void SetAutoParachuteLocation(out const Vector Location);// 0x365ce54
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x365cdd4
	void SendServerMoveAckToClientInternal(float TimeStamp, bool bAckGoodMove, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x365cc10
	void SendClientMoveToServerAccurateInternal(float TimeStamp, float ThrottleInput, float SteerInput, float GlidingSpeed, enum State, Rotator CameraRotation, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x365c93c
	void ResetVelocity();// 0x365c928
	void RemoveRadiouBlur();// 0x365c914
	void PostNetReceiveNewState();// 0x365c900
	Vector ParachuteMoveAfterVelocity(STExtraBaseCharacter* Character, float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation, out const Rotator CurrentRotation, out const Vector CurrentVelocity, out const Vector CurrentPosition, float GlidingSpeed, out Vector OutCurrentVelocity, out float OutCurrentGlidingSpeed);// 0x365c510
	Rotator ParachuteMoveAfterRotation(STExtraBaseCharacter* Character, float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation, out const Rotator CurrentRotation, out const Vector CurrentVelocity);// 0x365c268
	Vector ParachuteMoveAfterPosition(STExtraBaseCharacter* Character, float DeltaTime, out const Vector CurrentVelocity, out const Vector CurrentPosition);// 0x365c0ec
	Vector ParachuteGetAfterPosition(STExtraBaseCharacter* Character, float DeltaTime, out const Vector CurrentVelocity, out const Vector CurrentPosition);// 0x365bf70
	void OnPreReconnectOnServer();// 0x365bf5c
	void OnAsyncLoadRadiouBlurDone();// 0x365bf48
	static bool IsParachuteWindEnable();// 0x365bf20
	bool IsAutoParachutePathPlanningEnable();// 0x365bef8
	bool IsAutoParachuteEnable();// 0x365bed0
	void InvalidateAdjustFollowerLocation();// 0x365bebc
	void InitRadiouBlurMat();// 0x365bea8
	void InitParachuteContinuStart();// 0x365be94
	void GMParachuteAddServerPos(float X, float Y, float Z);// 0x365bd94
	float GetReplicatedRightInput();// 0x365bd6c
	float GetReplicatedForwardInput();// 0x365bd44
	Vector GetParachuteVelocity();// 0x365bcfc
	Vector GetLaunchInitVelocity();// 0x365bcac
	Vector GetCurVelocity();// 0x365bc64
	float GetAutoParachuteMoveForwardRate();// 0x365bc3c
	Vector GetAutoParachuteLocation();// 0x365bbf4
	void EnableAutoParachutePathPlanning(bool bEnable);// 0x365bb74
	void EnableAutoParachute(bool bEnable);// 0x365baf4
	void DebugParachuteDetail(FString Caller, out const Vector OldLocation, out const Rotator OldRotation, float DeltaSeconds);// 0x365b948
	void ClearParachuteStatusCache();// 0x365b934
	void CharacterSetParachuteState(enum State);// 0x359abd8
	Vector CalWingUpVelocityUtil(Vector InCurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x365b728
	Vector CalWingUpVelocity(float InputForward, float InputRight, float DeltaTime);// 0x365b604
	Vector CalParachuteOpenedVelocityUtil(STExtraBaseCharacter* Character, Vector InCurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, float GlidingSpeed, out Vector OutCurrentVelocity, out float OutCurrentGlidingSpeed);// 0x365b318
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x365b1fc
	Vector CalLaunchVelocityUtil(Vector InCurVelocity, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x365b03c
	Vector CalLaunchVelocity(float InputForward, float InputRight, float DeltaTime);// 0x365af18
	Vector CalFreeFallVelocityUtil(Vector InCurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x365ad0c
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x365abf0
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x365aaa0
	void AdjustFollowerLocation();// 0x365aa8c
	void AdjustClientParachuteTime(float NeedAdjustTimeconst, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x365a910
	void AddRadiouBlur(float InWeight);// 0x365a898

--------------------------------
Class: ParachuteMoveState
	float TimeStamp;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float SteerInput;//[Offset: 0x8, Size: 4]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]
	Vector Position;//[Offset: 0x18, Size: 12]
	Vector Velocity;//[Offset: 0x24, Size: 12]
	Rotator Rotation;//[Offset: 0x30, Size: 12]
	enum State;//[Offset: 0x3c, Size: 1]
	float GlidingSpeed;//[Offset: 0x40, Size: 4]

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xc4, Size: 4]
	float TileRemovalRadius;//[Offset: 0xc8, Size: 4]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0x190, Size: 4]
	bool bEnableSkillCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	bool bEnableSkillBlackboradIDSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 1]
	bool bEnableSkillEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1b0, Size: 4]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x1b8, Size: 60]
	<int,UAEBlackboard*> SkillIDBlackboardMap;//[Offset: 0x1f4, Size: 60]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x230, Size: 60]
	delegate ChangeActorBlackboard;//[Offset: 0x26c, Size: 12]
	<int,UTSkillRuntimeData> SkillBaseDataMaps;//[Offset: 0x278, Size: 60]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x2b4, Size: 12]
	delegate OnSkillCast;//[Offset: 0x2c0, Size: 12]
	<int,int> IDToSyncSkillActiveStateData;//[Offset: 0x2cc, Size: 60]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x308, Size: 12]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x314, Size: 60]
	<int,int> ButtonSlotToSkillID;//[Offset: 0x350, Size: 60]
	TeammateSkillCDRepData TeammateSkillCDRepData;//[Offset: 0x38c, Size: 16]
	SkillDynamicRepData SyncDynamicRepData;//[Offset: 0x39c, Size: 12]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x3a8, Size: 12]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x410, Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x438, Size: 40]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x460, Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x470, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x474, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x47c, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x480, Size: 60]
	SkillParamater[] SkillParamaters;//[Offset: 0x4c8, Size: 12]
	delegate OnSkillInitSignature;//[Offset: 0x4d4, Size: 12]
	delegate SkillStartEvent;//[Offset: 0x4e0, Size: 12]
	delegate SkillStopEvent;//[Offset: 0x4ec, Size: 12]
	delegate SkillPhaseChangeEvent;//[Offset: 0x4f8, Size: 12]
	delegate SkillLevelChangeEvent;//[Offset: 0x504, Size: 12]
	int[] PendingRemoveSkillID;//[Offset: 0x510, Size: 12]
	<int,byte> CurSkillLevels;//[Offset: 0x51c, Size: 60]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x558, Size: 12]
	<int,SkillDisableKeySet> DisableSkillTagsMap;//[Offset: 0x564, Size: 60]
	MutilSkillSynData NewSkillSynData;//[Offset: 0x5a0, Size: 36]
	SkillSinglePhaseData NewSkillSinglePhaseData;//[Offset: 0x5c4, Size: 36]
	<uint64,UTSkillSimulateData> SkillSimulateDataMap;//[Offset: 0x5e8, Size: 60]
	<uint64> AsyncLoadingSkillInst;//[Offset: 0x624, Size: 60]
	UTSkillExecQueue SkillExecQueue;//[Offset: 0x660, Size: 132]
	uint64 NetClientSimulateInstID;//[Offset: 0x6e8, Size: 8]
	void UpdateSyncSkillCDData(int SkillID);// 0x693cba4
	void UpdateSyncSkillActiveState(int SkillID);// 0x693cb2c
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x693cab4
	void TryDeleteOneSkill(int SkillID, bool IsImmediately, bool bResetCD);// 0x693c9a0
	void TryAddOneSkill(int SkillID, bool bActive, int ButtonSlot);// 0x693c894
	bool TriggerSkillWithParams(int SkillID, out const FString[] InKeyStrings, bool bEnable);// 0x693c6b4
	bool TriggerSkillWithID(int SkillID, bool bEnable);// 0x693c5e0
	bool TriggerLocalEventWithID(byte SkillEventType, int SkillID);// 0x693c514
	bool TriggerEventWithID(byte SkillEventType, int SkillID);// 0x693c448
	void TriggerEvent(int SkillID, byte EventType);// 0x3a9a880
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x693c28c
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestID);// 0x693c174
	void StopSkillSpecific(UTSkill* Skill, enum StopReason);// 0x693c0b8
	void StopSkillAll(enum StopReason);// 0x36beabc
	void StopSkill_WithID(int SkillID, enum StopReason);// 0x693bff4
	void StopSkill(int SkillID, enum StopReason);// 0x693bf30
	bool SetupOwnerAndSystem();// 0x693bf08
	void SetSkillTagsDisable(int[] SkillTags, bool bDisable, out FString TriggerKey);// 0x693bcc8
	void SetSkillTagDisable(int SkillTag, bool bDisable, out FString TriggerKey);// 0x693bb68
	void SetSkillState(out const UTSkillStateSyncData[] InSyncStateDatas);// 0x693babc
	void SetSkillOwner(Actor* tempActor);// 0x3a9a73c
	void SetSkillLevel(int SkillID, int SkillLevel);// 0x693ba00
	bool SetSkillActive(int SkillID, bool bActive, bool bForceSet, int ButtonSlot);// 0x693b890
	void SetAutoSkillID(int InSkillID);// 0x693b818
	void ServerTriggerEvent_WithParamsAndTssData(int SkillID, byte EventType, uint64 InstID, const byte[] Content, const byte[] TssData);// 0x693b5ac
	void ServerTriggerEvent_WithParams(int SkillID, byte EventType, uint64 InstID, const byte[] Content);// 0x693b3cc
	void ServerTriggerEvent_WithIDAndTssData(int SkillID, byte EventType, uint64 InstID, const byte[] TssData);// 0x693b1ec
	void ServerTriggerEvent_WithID(int SkillID, byte EventType, uint64 InstID);// 0x693b094
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x693af98
	void ServerStopAllSkill(enum Reason);// 0x693aee4
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x693ae10
	void ServerNotifyRandomSeed(int Seed);// 0x693ad5c
	void ResetTeammateSkillCDData();// 0x693ad48
	void ResetSkillCoolDown(int SkillID, int CDIndex);// 0x693ac84
	void ResetAllSkillCoolDown();// 0x3590e5c
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState);// 0x693ab60
	void RepSkillHitInfo();// 0x693ab4c
	void RepLastCastTime();// 0x3592f9c
	void ReplaceSkill(int OldSkillID, int NewSkillID);// 0x693aa90
	void RemoveReplacedSkill(int OldSkillID);// 0x693aa18
	void RemoveAllSkillUIWidget();// 0x693aa04
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x693a948
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x693a810
	UTSkill* QuerySkill(int SkillID, bool bOnlyQuery);// 0x693a73c
	void PreTriggerSkillEvent(int InSkillID);// 0x355a050
	void PostTriggerSkillEvent(int InSkillID);// 0x3644ad8
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x693a588
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x693a4c4
	void OnRespawned();// 0x367a48c
	void OnRep_SkillHitInfo();// 0x357c654
	void OnRep_SkillCDDatas();// 0x693a4b0
	void OnRep_SkillActiveState();// 0x693a49c
	void OnRep_ReplaceSkill();// 0x3592f9c
	void OnRep_NewSkillSynData();// 0x693a488
	void OnRep_NewSkillSinglePhaseData();// 0x693a474
	void OnRep_NetClientSimulateInstID();// 0x693a460
	void OnRep_EnableSkillEncrypt();// 0x3592f9c
	void OnRep_DynamicRepData();// 0x693a44c
	void OnRecycled();// 0x3864510
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x693a388
	void NewUAEBlackboard(int SkillID);// 0x693a310
	void LocalTriggerNewSkillFail(UTSkill* InNewSkill, uint64 InstID);// 0x693a250
	bool IsSkillTagDisable(int InSkillID);// 0x692c564
	bool IsSkillCanUse();// 0x693a228
	bool IsSkillActived(int SkillID);// 0x693a1a8
	bool IsReadyToCastSkill(int SkillID);// 0x693a120
	bool IsEnableSkillCoolDown();// 0x3b1721c
	bool IsCurrentUseSkillID(int InSkillID);// 0x693a0a0
	bool IsCastingSkillID(int InSkillID);// 0x693a018
	bool IsCastingSkill();// 0x6939fe8
	void HandleTriggerParamsEventSuccess(int SkillID, byte EventType);// 0x4a51734
	void HandleTriggerParamsEventFail(int SkillID, byte EventType);// 0x4a51734
	bool HandleTriggerParamsEvent(int SkillID, byte EventType);// 0x4a51734
	void HandleSkillStop(int SkillID, enum StopReason);// 0x3ad3e0c
	void HandleSkillStart(int SkillID);// 0x3ad3d8c
	UAEBlackboard* GetUAEBlackboardBySkillID(int SkillID);// 0x6939f60
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x6939ee0
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x3ad3d04
	UTSkillStateSyncData[] GetSkillState();// 0x6939e7c
	int GetSkillSlotBySkillID(int SkillID);// 0x6939dfc
	int GetSkillSlotBySkill(UTSkill* Skill);// 0x6939d7c
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x6939c68
	int GetSkillLevel(int SkillID);// 0x6939be8
	int GetSkillIDByClass(class Object SkillClass);// 0x6939b60
	FString[] GetSkillExecString();// 0x6939a04
	int GetSkillCurPhase(UTSkill* Skill);// 0x6939984
	UTSkill* GetSkillByName(FString SkillName);// 0x693981c
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x69396b4
	int GetSkillButtonSlot(int SkillID);// 0x6939634
	UTSkillRuntimeData GetSkillBaseData(int SkillID);// 0x6939558
	UTSkill* GetSkill(int SkillID);// 0x69394d0
	int GetReplacedSkill(int OldSkillID);// 0x6939450
	byte GetRealOwnerRoleSafety();// 0x3ad3acc
	byte GetMutexRelation(UTSkill* CurSkill, UTSkill* NewSkill);// 0x6939384
	float GetLastCastTime(int SkillID);// 0x6939304
	float GetLastCastFinishTime(int SkillID);// 0x6939284
	UTSkill*[] GetCurSkills();// 0x69391c4
	UTSkillPhase* GetCurSkillPhase();// 0x693919c
	int GetCurSkillID(UTSkill* Skill);// 0x693911c
	UTSkill* GetCurSkill();// 0x69390f4
	int[] GetCurMonopolizeSkills();// 0x6939034
	UTSkillPhase* GetCurMonopolizedSkillPhase();// 0x693900c
	UTSkill* GetCurMonopolizedSkill();// 0x6938fe4
	int[] GetCurAllSkillIDs();// 0x6938f28
	float GetCoolDownTime(int SkillID, int CoolDownIndex);// 0x6938e64
	int GetButtonSlotSkillID(int ButtonSlot);// 0x6938de4
	void DynamicRemoveSkill(int InSkillID);// 0x36a624c
	void DynamicAddSkill(int InSkillID);// 0x3754fa8
	void ClientStopPreActionSkill(int SkillID, uint64 InstID);// 0x6938d1c
	void ClientStopOneSkill(uint64 InstID, bool bSinglePhaseRep);// 0x6938c4c
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x6938b80
	void ClientSimulateOneSkill(uint64 InstID, int SkillID, int PhaseIndex, bool bSinglePhaseRep);// 0x6938a24
	void ClearSkill(bool bStopAllSkill, bool bDeactivateAllSkill, bool bResetSkillCD);// 0x69388fc
	void ClearRepParams();// 0x36cd020
	void ClearInitParams();// 0x36c2ccc
	void CacheSkillWidget(int SkillID, UTSkillWidget* Widget);// 0x3ad3a08

--------------------------------
Class: UTSkill.LuaActor.Actor.Object
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	FString SkillName;//[Offset: 0x3b4, Size: 12]
	FName SkillGroup;//[Offset: 0x3c0, Size: 8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	enum SkillCastType;//[Offset: 0x3c9, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb, Size: 1]
	int SkillID;//[Offset: 0x3cc, Size: 4]
	int SkillTemplateID;//[Offset: 0x3d0, Size: 4]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bMoveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d6, Size: 1]
	bool bNeedCheckSimulateCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d7, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x3dc, Size: 68]
	bool bCoolDownWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	int CoolDownWhenStopIndex;//[Offset: 0x424, Size: 4]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	UTSkillBlackboardParameter[] SkillBlackboardParamList;//[Offset: 0x42c, Size: 12]
	bool bSetBlackboardDefaultData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool bRecycleWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool bHasBlackboradSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	FString SkillTimeScaleAttrName;//[Offset: 0x43c, Size: 12]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x448, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x484, Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x488, Size: 12]
	int CurComponentNameIndex;//[Offset: 0x494, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x4d8, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x4e0, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x3a9efb4
	void ResetSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x692c5ec
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x3a99b3c
	bool JumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x3a77b28
	bool IsEnableSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x692c564
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x692c4dc
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x692c4b4
	UAEBlackboard* GetSpecificBlackboard();// 0x692c48c
	UTSkillPhase* GetSkillPhaseByName(FString PhaseName);// 0x692c3c0
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x692c338
	UTSkillBaseWidget* GetSkillEffectByPhaseName(FString PhaseName, FString EffectName);// 0x692c1e8
	UTSkillBaseWidget* GetSkillEffectByPhaseIndex(int PhaseIndex, FString EffectName);// 0x692c0d8
	float GetSkillDurationScale(UTSkillManagerComponent* SkillManagerComponent);// 0x3a9ef2c
	UTSkillPhase* GetCurSkillPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x692c050
	float GetCoolDownTime(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x692bf84
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x3a9ee68
	enum CanBePlayed(UTSkillManagerComponent* SkillManagerComponent);// 0x66848fc

--------------------------------
Class: UTSkillCreateData
	int SkillGroupIndex;//[Offset: 0x0, Size: 4]
	float Interval;//[Offset: 0x4, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0x8, Size: 4]
	FString CoolDownMessage;//[Offset: 0xc, Size: 12]
	int CoolDownMessageID;//[Offset: 0x18, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x1c, Size: 12]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x28, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x38, Size: 12]

--------------------------------
Class: UTSkillPhase.Object
	FString PhaseName;//[Offset: 0x2c, Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0x3c, Size: 8]
	int PhaseIndex;//[Offset: 0x44, Size: 4]
	int ActionsTopHalfCount;//[Offset: 0x4c, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x50, Size: 100]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0xb4, Size: 4]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x6945230
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x69451b0
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x3ad6028
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x435e940
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x69450e4
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x6945018
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x435e6b4
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x6944f4c
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x6944e80
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x6944e00
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x3ad5fa0
	bool ClearAttachments();// 0x37c7168
	void AfterStartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x435e520

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x4, Size: 12]
	float AltPhaseDuration;//[Offset: 0x10, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	int CoolDownIndex;//[Offset: 0x18, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x1c, Size: 12]
	UTSkillPicker* Picker;//[Offset: 0x28, Size: 4]
	UTSkillEffect*[] Actions;//[Offset: 0x2c, Size: 12]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x38, Size: 12]
	enum PhaseType;//[Offset: 0x44, Size: 1]
	int JumpPhaseIndex;//[Offset: 0x48, Size: 4]
	UAEBlackboardKeySelector[] SyncBBKArray;//[Offset: 0x4c, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x58, Size: 12]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.Object
	bool bTickCheckCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x5ac2708
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x69322b4
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x3608414
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x69321e8
	bool IsOK_Internal();// 0x69321b8
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x6932130
	UTSkill* GetOwnerSkill();// 0x69320e8

--------------------------------
Class: UTSkillBaseWidget.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	FString EffectName;//[Offset: 0x34, Size: 12]
	Actor* BuffTargetActor;//[Offset: 0x40, Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0x44, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x4c, Size: 4]
	UAEBlackboard* GetUAEBlackboard();// 0x6934ac8
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x6934a98
	Actor* GetOwnerPawn();// 0x669837c

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x50, Size: 32]
	class Object[] FilterTemplates;//[Offset: 0x70, Size: 12]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x88, Size: 12]
	UTSkillPickerFilter*[] Filters;//[Offset: 0x94, Size: 12]
	bool PickTargetsInner(Vector OriginPoint);// 0x69461cc
	bool PickTargets(Vector OriginPoint);// 0x6946154

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	enum PickerTargetRole;//[Offset: 0x11, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	float HitAngleCos;//[Offset: 0x2c, Size: 4]
	byte HitPhysMatType;//[Offset: 0x30, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: UTSkillPickerFilter.Object
	void HandleFilterArray(out UTSkillPickedTarget[] inArray, Actor* Owner);// 0x6945da0

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.Object
	float fADScale;//[Offset: 0x50, Size: 4]
	float fAPScale;//[Offset: 0x54, Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0x58, Size: 12]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x35ffd24
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x38b5ec0
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x6935018
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x3aac754
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x3a9be2c
	void OnAsyncLoadSoftPathDone();// 0x6935004
	UTSkill* GetOwnerSkill();// 0x6934fdc
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x69322b4
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x36e92f0

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte SkillEventType;//[Offset: 0x50, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0x54, Size: 12]
	FName PreEventActionTag;//[Offset: 0x60, Size: 8]
	UTSkillEffect* SkillEffect;//[Offset: 0x68, Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0x6c, Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x78, Size: 12]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UTSkillCDBase.LuaObject.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x68, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x70, Size: 8]
	byte[] SyncContent;//[Offset: 0x78, Size: 12]
	bool bIgnoreCastSkillCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	enum CDRole;//[Offset: 0x85, Size: 1]
	void BindLua(FString luaPath);// 0x69317e4

--------------------------------
Class: LuaObject.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: UTSkillBlackboardParameter.UAEBlackboardParameter
	enum[] ResetRuleArray;//[Offset: 0x98, Size: 12]

--------------------------------
Class: UTSkillRuntimeData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int SkillButtonSlot;//[Offset: 0x4, Size: 4]
	bool bShowSkillMainWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0, Size: 4]
	float LastCastTime;//[Offset: 0x4, Size: 4]
	float LastCastFinishTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkillActiveRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	int SkillLevel;//[Offset: 0x4, Size: 4]
	int SkillButtonSlot;//[Offset: 0x8, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TeammateSkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	float CDStartTime;//[Offset: 0x4, Size: 4]
	float CDEndTime;//[Offset: 0x8, Size: 4]
	int UseCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SkillDynamicRepData
	SkillDynamicState[] SkillData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkillDynamicState
	int SkillID;//[Offset: 0x0, Size: 4]
	bool bAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: SkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillSyncData_CD
	int SkillCDIndex;//[Offset: 0x0, Size: 4]
	byte[] SkillSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	byte HitSurfaceType;//[Offset: 0x18, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: UTReplaceSkillData
	int OldSkillID;//[Offset: 0x0, Size: 4]
	int NewSkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SkillDisableKeySet
	<FString> DisableKeySet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: MutilSkillSynData
	UTMutilSkillSynData[] DataList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UTMutilSkillSynData
	bool bEnableRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	uint64 CurInstanceID;//[Offset: 0x8, Size: 8]
	int CurSkillID;//[Offset: 0x10, Size: 4]
	int PhaseIndexes;//[Offset: 0x14, Size: 4]
	byte[] PhaseIndexArray;//[Offset: 0x18, Size: 12]
	byte[] BlackboardContent;//[Offset: 0x24, Size: 12]

--------------------------------
Class: SkillSinglePhaseData
	UTSkillSynSinglePhaseData[] DataList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UTSkillSynSinglePhaseData
	uint64 CurInstanceID;//[Offset: 0x0, Size: 8]
	int CurSkillID;//[Offset: 0x8, Size: 4]
	int CurSkillPhase;//[Offset: 0xc, Size: 4]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte[] BlackboardContent;//[Offset: 0x14, Size: 12]

--------------------------------
Class: UTSkillSimulateData
	uint64 InstanceID;//[Offset: 0x0, Size: 8]
	int SkillID;//[Offset: 0x8, Size: 4]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStopSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	int[] SimlatePhaseIndexs;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UTSkillExecQueue

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam SyncParam;//[Offset: 0x0, Size: 2]
	int SkillID;//[Offset: 0x4, Size: 4]
	int SkillButtonSlot;//[Offset: 0x8, Size: 4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: UTSkillWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x3a4, Size: 4]
	int SkillID;//[Offset: 0x3a8, Size: 4]
	float TickInterval;//[Offset: 0x3ac, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	void SetSkillManager(UTSkillManagerComponent* Manager);// 0x694721c
	void SetSkillID(int InSkillID);// 0x6653170
	void RemoveSelf();// 0x6947208
	UTSkillManagerComponent* GetSkillManager();// 0x4182ab0
	int GetSkillID();// 0x69471e0
	UTSkillCDBase*[] GetSkillCDBases();// 0x6947178
	UTSkill* GetSkill();// 0x6947150
	PlayerController* GetLocalPlayerController();// 0x6947128
	void BindLua(FString luaPath);// 0x6946fd0

--------------------------------
Class: LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x394, Size: 12]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 4]
	FString SwitchGroupName;//[Offset: 0x4, Size: 12]
	FString SwitchValue;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	bool bHasFallInWaterFully;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf9, Size: 1]
	float BreathMax;//[Offset: 0x10c, Size: 4]
	float AssistAccountableDuration;//[Offset: 0x110, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x114, Size: 4]
	bool bNearDeathOnSinglePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x11c, Size: 4]
	int MaxDeathTimes;//[Offset: 0x120, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	int NDStatusEnterTimes;//[Offset: 0x128, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x12c, Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0x130, Size: 4]
	float Breath;//[Offset: 0x134, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x138, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x13c, Size: 4]
	float NDDecreaseRate;//[Offset: 0x140, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x148, Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x14c, Size: 4]
	DamageEvent DamageEventRecorded;//[Offset: 0x150, Size: 8]
	delegate OnPreEnterNearDeath;//[Offset: 0x15c, Size: 12]
	delegate OnEnterNearDeathState;//[Offset: 0x168, Size: 12]
	delegate OnLeaveNearDeathState;//[Offset: 0x174, Size: 12]
	float BeCarriedReduceRate;//[Offset: 0x180, Size: 4]
	float BeEnemyCarriedReduceRate;//[Offset: 0x184, Size: 4]
	bool bEnableSwimWhileDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	bool bIsBeingRemotelyRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 1]
	float SetHealthSafety(float AddVal);// 0x38eb7ec
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime, float RemainingRescueTotleTime);// 0x38eb690
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime, float RemainingRescueTotleTime);// 0x38eb534
	void ResetDataOnRespawn();// 0x38eb520
	void RescueFinishSuccessfully();// 0x38eb50c
	void OnRep_BreathChanged();// 0x38eb130
	bool IsNearDeathInvincible();// 0x38eb4e4
	bool IsHealthAlive();// 0x38eb4bc
	bool IsHaveLastBreathStatus();// 0x38eb494
	bool IsFinishedLastBreathStatus();// 0x38eb46c
	void InitializeOwner(Pawn* TempPawn);// 0x38eb3f4
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadshot);// 0x38eb22c
	Controller* GetRecordedEventInstigator();// 0x38eb210
	float GetBreathMax();// 0x38eb1f4
	float GetBreath();// 0x38eb1d8
	void EnterSwimWhileDying();// 0x38eb1c4
	void EnableDirectlyDie(bool bEnable);// 0x38eb144
	void DoFinishLastBreath();// 0x38eb130
	void DidFinishLastBreath();// 0x38eb11c
	void ClearNearDeathTeammate();// 0x38eb108
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x38eb03c
	void AddDeadBuff();// 0x38eb028

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xfc, Size: 4]
	int SelfRescueWanderingRadius;//[Offset: 0x100, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0x104, Size: 4]
	anPickerData FanData;//[Offset: 0x108, Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x138, Size: 4]
	STExtraBaseCharacter* CarryWho;//[Offset: 0x13c, Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x140, Size: 4]
	float RestoringDuration;//[Offset: 0x15c, Size: 4]
	float SelfRestoringDuration;//[Offset: 0x160, Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x164, Size: 12]
	FString SelfDurationAttrModifyRef;//[Offset: 0x170, Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x17c, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x184, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x38ec808
	void WaitingConfirmState_ActOnUnsatisfied();// 0x38ec7f4
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x36dbb90
	bool WaitingConfirmCarryState_IsConditionSatisfied();// 0x38ec7cc
	void WaitingConfirmCarryState_ActOnUnsatisfied();// 0x38ec7b8
	void WaitingConfirmCarryState_ActOnSatisfied(float DeltaTime);// 0x36dbb90
	void TickAsHelper(float DeltaTime);// 0x38ec740
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x38ec68c
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x38ec614
	void SelectedCarryEnemyTargetChangeNotifyHUD(Pawn* previousTarget);// 0x38ec59c
	bool RescueingState_IsConditionSatisfied();// 0x38ec574
	void RescueingState_ActOnUnsatisfied();// 0x38ec560
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x36dbb90
	void RescueingProcessFinished();// 0x38ec54c
	void RefreshTargetChangeNotifyHUD();// 0x38ec538
	bool PlayerConfirmToRescueClientSide();// 0x38ec510
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x38ec43c
	void OnRep_IsRescueingOtherStatusChange();// 0x38ec428
	bool IsInRescueingStatus();// 0x38ec400
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x38ec344
	float GetRestoringDuration();// 0x38ec31c
	void DrawDebugFan();// 0x3592f9c
	void ClearTimerWaitingRescueProcessToFinish();// 0x38ec308

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xc4, Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc8, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xd0, Size: 4]
	float CanFollowDist;//[Offset: 0xd4, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xd8, Size: 4]
	float QuitFollowDist;//[Offset: 0xdc, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xe0, Size: 4]
	float DistThrehold;//[Offset: 0xe4, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xec, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xf4, Size: 4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x12c, Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x138, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x38e0234
	void WaitingConfirmState_ActOnUnsatisfied();// 0x38e0220
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x36dbb90
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x38e01a8
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x38e0130
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x38e00b8
	bool PlayerStopFollow();// 0x38e0090
	bool PlayerConfirmToFollow();// 0x38e0068
	void InitializeOwner(Pawn* _TempPawn);// 0x38dfff0
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x36dbb90
	bool FollowingState_IsConditionSatisfied();// 0x38dffc8
	void FollowingState_ActOnUnsatisfied();// 0x38dffb4
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x38dff3c

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x37c5da0
	byte Start();// 0x36849c8
	bool IsValidate();// 0x37a0750
	void DebugDraw(Color DebugColor, bool isPersist);// 0x3a7effc
	void Awake();// 0x37c5d84

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x7c, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x80, Size: 4]
	byte Update(float DeltaTime);// 0x3657288
	FString ToString();// 0x3a7f0c0
	void TaskRemoved();// 0x37c5da0
	byte Start();// 0x36849c8
	bool IsValidate();// 0x37a0750
	bool IsReachable();// 0x3716028
	byte Finish();// 0x371617c
	void DebugDraw(Color DebugColor, bool isPersist);// 0x3a7effc
	void Awake();// 0x37c5d84

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x480, Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x484, Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x488, Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x48c, Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bb, Size: 1]
	float ResultMinPitch;//[Offset: 0x4bc, Size: 4]
	float ResultMaxPitch;//[Offset: 0x4c0, Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	bool bCameraTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c5, Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x4d8, Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x4dc, Size: 44]
	CameraOffsetData ProneCameraData;//[Offset: 0x508, Size: 44]
	CameraOffsetData IndoorCameraData;//[Offset: 0x534, Size: 44]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x560, Size: 44]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x58c, Size: 44]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x5b8, Size: 44]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x5e4, Size: 44]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x610, Size: 44]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x63c, Size: 44]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x668, Size: 44]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x694, Size: 44]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x6c0, Size: 44]
	CameraOffsetData VaultCameraData;//[Offset: 0x6ec, Size: 44]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x718, Size: 44]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x744, Size: 44]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x770, Size: 44]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x79c, Size: 44]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x7c8, Size: 44]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x7f4, Size: 44]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x820, Size: 44]
	CameraOffsetData SplineMoveCameraData;//[Offset: 0x84c, Size: 44]
	CameraOffsetData AirBorneStartCameraData;//[Offset: 0x878, Size: 44]
	CameraOffsetData AirBorneFlyingCameraData;//[Offset: 0x8a4, Size: 44]
	CameraOffsetData AirBorneSuperFlyingCameraData;//[Offset: 0x8d0, Size: 44]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x8fc, Size: 4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x900, Size: 4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x904, Size: 4]
	CameraOffsetData InsectCameraData;//[Offset: 0x908, Size: 44]
	CameraOffsetData SkillCameraData;//[Offset: 0x934, Size: 44]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x961, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x964, Size: 44]
	CameraOffsetData CustomCameraData;//[Offset: 0x990, Size: 44]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc, Size: 1]
	bool bUseFixedTraceTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bd, Size: 1]
	bool bAllwaysDoTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9be, Size: 1]
	bool bTraceRealCameraLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bf, Size: 1]
	Vector TraceTagetLocation;//[Offset: 0x9c0, Size: 12]
	float AdditionalSocketOffetZMax;//[Offset: 0x9d0, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x9d4, Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x9dc, Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x9e0, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x9e4, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 1]
	bool bNoFixCameraLagWhenSpecator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f3, Size: 1]
	float OffsetCountTime;//[Offset: 0x9f4, Size: 4]
	float OffSetDurTime;//[Offset: 0x9f8, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x9fc, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0xa00, Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0xa10, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0xa40, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0xa50, Size: 16]
	void SetSelfieCameraDefRotation();// 0x369148c
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x369140c
	void SetCustomCameraDataValueEnable(CameraOffsetData InCustomCameraData, bool IsEnable);// 0x36912d4
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x36911bc
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x36910f8
	void ResetFreeCamera();// 0x36910e4
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x3690f78
	void DelayRotationLagEnabledEnd();// 0x3690f64
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x3690e9c
	void DelayRotationBackLagEnabledEnd();// 0x3690e88
	void DelayRotationBackLagEnabled(bool bEnabled, float Time, out const Rotator InRotation);// 0x3690d70
	void AddAdditiveCameraOffset(out const Transform Transform, float FOV, bool bAdd);// 0x3690c00

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bForceUseTargetArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float GlobalTargetArmLength;//[Offset: 0x37c, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0x380, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x384, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x388, Size: 4]
	float SpringArmInterpSpeedScale;//[Offset: 0x38c, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x390, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x3dc, Size: 44]
	CameraOffsetData DefaultCameraData;//[Offset: 0x408, Size: 44]
	float CurAdditiveOffsetFov;//[Offset: 0x434, Size: 4]
	<byte,bool> CurActiveDataMap;//[Offset: 0x438, Size: 60]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x478, Size: 4]
	void OnRespawned();// 0x3626e3c
	bool HasActiveCameraOffsetData(byte InDataType);// 0x3a3c988
	Rotator GetTargetRotation();// 0x3a3c938
	float GetCameraTargetArmLength();// 0x3a3c908
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x3690f78
	void ClearCameraData();// 0x3a3c8ec

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 4]
	Vector AkLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int StatusChangeMargin;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int WeaponId;//[Offset: 0x1c, Size: 4]
	int FloorType;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float ServerAccumulateErrorBurstSliceSize;//[Offset: 0x6e0, Size: 4]
	float ServerAccumulateErrorBurstDistance3DThreshold;//[Offset: 0x6f8, Size: 4]
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x700, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x704, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x708, Size: 4]
	bool bUGCServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 1]
	bool bServerMoveCheckPassBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 1]
	Box PassBound;//[Offset: 0x710, Size: 28]
	bool bAbandonReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	float MaxPrisonmentMove;//[Offset: 0x730, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 1]
	bool bPlatformIgnoreNullBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x736, Size: 1]
	float MaxFollowPlatformDistance;//[Offset: 0x738, Size: 4]
	bool bFixedMoveByCurveVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 1]
	bool bDisableResetWhenSimulateNoReceive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73d, Size: 1]
	float fStopParachuteForbbitClientAdjustSeconds;//[Offset: 0x740, Size: 4]
	bool bAdjustZErrorForLandscapeFirstLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	float AdjustZErrorForLandscapeFirstLoadZMax;//[Offset: 0x758, Size: 4]
	float AdjustZErrorForLandscapeFirstLoadDelay;//[Offset: 0x75c, Size: 4]
	float StopActiveMoveSeconds;//[Offset: 0x760, Size: 4]
	float DeactiveSeconds;//[Offset: 0x764, Size: 4]
	Vector LastNotZeroInputVector;//[Offset: 0x768, Size: 12]
	bool bForbiddenDragOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 1]
	bool bUnderGroundForbiddenDragOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78d, Size: 1]
	bool bDragOnHistoryWalkingPosAndRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78e, Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78f, Size: 1]
	bool bNotUseClientMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	bool bNotUseClientCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x791, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x794, Size: 4]
	float EnterShovelCD;//[Offset: 0x798, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x79c, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x7a0, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x7a4, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x7a8, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x7ac, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x7b0, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x7b4, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x7b8, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x7bc, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x7c0, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x7c4, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x7c8, Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x7cc, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x7d0, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x7d8, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x7dc, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x7e0, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x7e4, Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x7e8, Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x7ec, Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x7f0, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x7f4, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x7f8, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x7fc, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x800, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x804, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x808, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x80c, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x810, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x818, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x830, Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x834, Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x838, Size: 4]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83c, Size: 1]
	bool bIgnoreClientMovementModeSkillChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83c, Size: 1]
	float nowShovelingSpeed;//[Offset: 0x840, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x844, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x853, Size: 1]
	float PreShovelFov;//[Offset: 0x854, Size: 4]
	delegate OnClientAdjustPosition;//[Offset: 0x86c, Size: 12]
	delegate OnPhysicsFlyForwordAdjust;//[Offset: 0x878, Size: 12]
	delegate OnCharacterServerMoveDelegate;//[Offset: 0x884, Size: 12]
	delegate OnShovelStateChangeForBP;//[Offset: 0x890, Size: 12]
	delegate PostServerMoveDelegate;//[Offset: 0x89c, Size: 12]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x8b0, Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x8b8, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bd, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8be, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x8c0, Size: 4]
	bool bIgnoreMovementBaseMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	float JumpOffVelocityFactor;//[Offset: 0x8c8, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cd, Size: 1]
	bool bUseCacheResolveWhenPenetrationVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ce, Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x8d0, Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d4, Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d4, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x8d8, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x8dc, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x8e0, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x8e4, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x8e8, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x8ec, Size: 4]
	HitResult WalkHit;//[Offset: 0x8f0, Size: 144]
	float WalkSpeedCurveScale;//[Offset: 0x980, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x984, Size: 4]
	float ProneFloorAngle;//[Offset: 0x988, Size: 4]
	float ProneFloorZ;//[Offset: 0x98c, Size: 4]
	float JumpFloorAngle;//[Offset: 0x990, Size: 4]
	float JumpFloorZ;//[Offset: 0x994, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x998, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x99c, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x9a4, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x9a8, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c4, Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c5, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c6, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x9c8, Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cc, Size: 1]
	float AdjustRotationWhenProneFailedThrehold;//[Offset: 0x9d0, Size: 4]
	bool bUGCDragOnGroundEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	float CurrentEnterShovelCD;//[Offset: 0xab8, Size: 4]
	bool bRejectUnResolveRelativeAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabc, Size: 1]
	float ClientAndDSDiffLocSizeMax;//[Offset: 0xac0, Size: 4]
	float UnResolveRelativeLocSize;//[Offset: 0xac4, Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 1]
	float CheckDistanceAhead;//[Offset: 0xacc, Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0xad4, Size: 4]
	float BaseSolvedWallCheckDistance;//[Offset: 0xae8, Size: 4]
	float BaseSolvedWallTraceDistance;//[Offset: 0xaec, Size: 4]
	float BaseSolvedWallOutDistance;//[Offset: 0xaf0, Size: 4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0xaf4, Size: 4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 1]
	float fStepDownEdgeToleranceRate;//[Offset: 0xafc, Size: 4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0xb00, Size: 4]
	float MaxBaseStepUpHeight;//[Offset: 0xb04, Size: 4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0xb0c, Size: 12]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1c, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0xb24, Size: 12]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0xb30, Size: 4]
	float AIMovementSimulatePredictTime;//[Offset: 0xb48, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0xb50, Size: 4]
	float SimulateNotReceiveMoveResetSeconds;//[Offset: 0xb64, Size: 4]
	bool bResetSimulateWhenObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	float ResetSimulateXYDist;//[Offset: 0xb6c, Size: 4]
	float ResetSimulateZDist;//[Offset: 0xb70, Size: 4]
	float SimulateNotReceiveStopPredictionSeconds;//[Offset: 0xb74, Size: 4]
	float MaxFlyAcceleration;//[Offset: 0xb88, Size: 4]
	bool bOverrideAirControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb99, Size: 1]
	bool bOverrideGravityScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9a, Size: 1]
	bool bSimulateWeakNetworkOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbad, Size: 1]
	uint32 LastAckBadMoveSequence;//[Offset: 0xbb0, Size: 4]
	bool bAdjustAllowablePositionWithSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4, Size: 1]
	float ResetAllowablePositionMaxSpeedTime;//[Offset: 0xbb8, Size: 4]
	float DefaultMaxWalkSpeed;//[Offset: 0xbc8, Size: 4]
	SimulateRepData[] CacheSimulateRepMoves;//[Offset: 0xbcc, Size: 12]
	float SimulateInterpolateSmoothAccelerateNum;//[Offset: 0xbe0, Size: 4]
	int nMaxSimulateCacheNum;//[Offset: 0xc1c, Size: 4]
	float fServerMoveNetLagScaleSecMin;//[Offset: 0xc24, Size: 4]
	float fServerMoveNetLagScaleSecMax;//[Offset: 0xc28, Size: 4]
	float fServerMoveAllowDiscrepancySquare;//[Offset: 0xc2c, Size: 4]
	float fSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xc30, Size: 4]
	float fNoSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xc34, Size: 4]
	float fLessThanSkipProxyPredictionOnNetUpdateCosTheta;//[Offset: 0xc38, Size: 4]
	float fSimulatePredictionNoAttenuationSec;//[Offset: 0xc3c, Size: 4]
	float fSimulatePredictionAttenuationSecMax;//[Offset: 0xc40, Size: 4]
	float fSimulatePredictionAttenuationRate;//[Offset: 0xc44, Size: 4]
	float fSimulatePredictionAttenuationRateNearlyNoChg;//[Offset: 0xc48, Size: 4]
	float ResetSimulateCacheTimeCD;//[Offset: 0xc54, Size: 4]
	SimulateDragThesholds[] SimulateDragThesholds;//[Offset: 0xc58, Size: 12]
	ServerMoveData[] CacheServerMoves;//[Offset: 0xc64, Size: 12]
	ServerMoveData[] BatchServerMoves;//[Offset: 0xc70, Size: 12]
	ServerMoveData LastServerMove;//[Offset: 0xc88, Size: 72]
	ServerMoveData ProcessServerMove;//[Offset: 0xcd0, Size: 72]
	float ServerBatchMoveDeltaTimeRateMax;//[Offset: 0xd18, Size: 4]
	float ServerBatchMoveDeltaMax;//[Offset: 0xd1c, Size: 4]
	ServerReceiveMove LastServerReceiveMove;//[Offset: 0xd38, Size: 28]
	float ServerMoveNetErrorInternal;//[Offset: 0xd54, Size: 4]
	float DSMoveSpeedLimitOverMaxSpeedTimes;//[Offset: 0xd5c, Size: 4]
	float DSMoveSpeedLimitDeltaSecondsMax;//[Offset: 0xd60, Size: 4]
	float DSMoveSpeedLimitIsWeakNetPingMSec;//[Offset: 0xd64, Size: 4]
	float DSMoveSpeedLimitLowFPSRate;//[Offset: 0xd68, Size: 4]
	bool bAllowDSSpeedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 1]
	bool bShouldChekckSpeedOverLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 1]
	ResolvePenetrationMoveData ResolvePenetrationData;//[Offset: 0xdc8, Size: 136]
	ResolvePenetrationMoveData ResolvePenetrationWalkingData;//[Offset: 0xe50, Size: 136]
	delegate OnResolvePenetrationDelegate;//[Offset: 0xed8, Size: 12]
	float CacheLastValidMoveDistanceSq;//[Offset: 0xee4, Size: 4]
	float CacheLastValidMaxDistance;//[Offset: 0xee8, Size: 4]
	float CacheLastValidMaxDistanceWalking;//[Offset: 0xeec, Size: 4]
	ResolvePenetrationParams ResolvePenetrationParams;//[Offset: 0xef0, Size: 80]
	float EngineResolvePenetrationMaxDistanceSq;//[Offset: 0xf40, Size: 4]
	float ResolvePenetrationVehicleMaxDistance;//[Offset: 0xf44, Size: 4]
	float PushAwayForbidSetBaseSeconds;//[Offset: 0xf48, Size: 4]
	int PenetrationUnResolveCount;//[Offset: 0xf4c, Size: 4]
	float PenetrationUnResolveDistanceSq;//[Offset: 0xf50, Size: 4]
	bool bResolvePenetrationAdjustClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf54, Size: 1]
	float CheckResolvePenetrationSeconds;//[Offset: 0xf58, Size: 4]
	float ResolvePenetrationSwitchPoseCD;//[Offset: 0xf64, Size: 4]
	float CheckResolvePenetrationDepth;//[Offset: 0xf70, Size: 4]
	float CheckResolvePenetrationDistance;//[Offset: 0xf74, Size: 4]
	DirectMoveData DirectMoveData;//[Offset: 0xf8c, Size: 56]
	CustomSkillMoveData AirJumpData;//[Offset: 0xfc4, Size: 48]
	PrimitiveComponent* CurrentClientMovementBase;//[Offset: 0x1008, Size: 4]
	float ComputeFloorConsiderClientPosDiffSizeSqMax;//[Offset: 0x1018, Size: 4]
	float SkilAirJumpJoystickForceSize;//[Offset: 0x1038, Size: 4]
	SimulateDragData SimulateDragData;//[Offset: 0x103c, Size: 40]
	float CanntMoveAdjustFlySpeedSize;//[Offset: 0x1078, Size: 4]
	bool bTrustClientLandingOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 1]
	bool bPassWallCheckOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108d, Size: 1]
	bool bAllowBeBlewUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108e, Size: 1]
	float BlewSpeedRatio;//[Offset: 0x1090, Size: 4]
	float IgnoreAllBlowTime;//[Offset: 0x1094, Size: 4]
	float IgnoreLastBlowTime;//[Offset: 0x1098, Size: 4]
	float BlendingAdjustTime;//[Offset: 0x109c, Size: 4]
	bool bAllowBePushedAway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a0, Size: 1]
	float NearPushBaseDistance;//[Offset: 0x10a4, Size: 4]
	float TangentialSpeedRatio;//[Offset: 0x10a8, Size: 4]
	float NormalSpeedRatio;//[Offset: 0x10ac, Size: 4]
	bool bBlockedByStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	bool bIgnoreSelfBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 1]
	float MinMoveDeltaTime;//[Offset: 0x10e0, Size: 4]
	float MaxServerMoveDistFrame;//[Offset: 0x10e4, Size: 4]
	float MaxServerMoveSpanTimeFrame;//[Offset: 0x10e8, Size: 4]
	float MaxServerBurstMoveFrameTime;//[Offset: 0x10ec, Size: 4]
	float MaxServerBurstMoveInterval;//[Offset: 0x10f0, Size: 4]
	float MaxServerBurstMoveStaticsInterval;//[Offset: 0x10f4, Size: 4]
	float BurstQueryAroundCharacterRange;//[Offset: 0x10f8, Size: 4]
	float MovableBaseVelocityThreshold;//[Offset: 0x1134, Size: 4]
	bool bUseNewActorMarkTeleportTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1138, Size: 1]
	float SkipMarkTeleportTimeVehicleSpeed;//[Offset: 0x113c, Size: 4]
	<enum,FString> SpecialMovePaths;//[Offset: 0x1140, Size: 60]
	<byte,enum> CustomMoveModeToSpecialMoveType;//[Offset: 0x117c, Size: 60]
	<enum,SpecialMoveBaseObj*> SpecialObjes;//[Offset: 0x11b8, Size: 60]
	bool UpdatedComponentWithBase(float DeltaSeconds, Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x38e5494
	void ToggleUserCmdDelta(bool Val);// 0x38e53dc
	void TimeSpeedCheck(bool Val);// 0x38e5324
	void SeverReportSimulateDrag(int OldDragCount, int DragCount, int ShakeCount);// 0x38e51e0
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x38e5134
	void SetSimulateWeakNetworkOptimize(bool bEnable);// 0x38e50b4
	void SetPushBase(PrimitiveComponent* NewBase, const FName BoneName, bool bPushedByBase, bool bNotifyActor);// 0x38e4f4c
	void SetProneFloorZ(float InProneFloorZ);// 0x38e4ed4
	void SetProneFloorAngle(float InProneFloorAngle);// 0x38e4e5c
	void SetPassBoundBox(out Vector BoxMin, out Vector BoxMax);// 0x38e4d84
	void SetOpenServerControlPunish(const bool bIsOpen, float RemainingSeconds);// 0x38e4cbc
	void SetLastTickFrameCounter(uint64 Frame);// 0x38e4c40
	void SetJumpFloorZ(float InJumpFloorZ);// 0x38e4bc8
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x38e4b50
	void SetImmedSendMoveFrameCounter(uint64 Frame);// 0x38e4ad4
	void SetClientReceiveServerStateTimestamp(float TimeStamp);// 0x38e4a5c
	void SetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x38e4944
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x38e4818
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x38e457c
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd);// 0x38e436c
	void ServerStartBlowUpCharacter(float TimeStamp, int BlowID, Vector_NetQuantize10 LaunchVel, Actor* HitActor, PrimitiveComponent* HitComponent);// 0x38e4174
	void SendClientPenetrationToServer();// 0x38e4118
	void ResetSimulateMoveCaches(bool bDestroy);// 0x38e4098
	void ReleaseServerMoveCache();// 0x38e4084
	void RefreshCharacterWithBase();// 0x38e4070
	void ProcessCacheSimulateRepMove(float DeltaSeconds, bool bReset);// 0x38e3fac
	void Ping2Server(float ServerTime, float ClientTime);// 0x38e3ec0
	void Ping2Client(float ServerTime);// 0x38e3e48
	bool PhysMoveByCurve(out const Vector DeltaMove, float DeltaSeconds);// 0x38e3d74
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x38e3cac
	bool PhysDeltaMove(out const Vector DeltaMove, float DeltaSeconds);// 0x38e3bd8
	void OnRespawned();// 0x38e3bbc
	void OnRecycled();// 0x38e3ba0
	void OnRecoverOnServer();// 0x38e3b84
	void OnPreReconnectOnServer();// 0x38e3b70
	void OnClientCloseUserCmdDelta();// 0x38e3b5c
	void MaybeGotoFalling();// 0x38e3b48
	void LocalResolvePenatration();// 0x38e3b34
	void K2_SaveBaseLocation();// 0x38e3b20
	float K2_GetProneFloorZ();// 0x38e3af8
	float K2_GetProneFloorAngle();// 0x383f6ec
	FString K2_GetMovementName();// 0x38e3a30
	float K2_GetJumpFloorZ();// 0x38e3a08
	float K2_GetJumpFloorAngle();// 0x38e39e0
	bool IsWalkable(out const HitResult Hit);// 0x38e38f8
	bool IsTargetBase(PrimitiveComponent* Base);// 0x38e3878
	bool IsStandingOnBase();// 0x38e3850
	bool IsSpecialMoveCanCombine();// 0x38e3828
	bool IsSimulateWeakNetworkOptimize();// 0x38e3800
	bool IsRecentlyBlock(float fInternal);// 0x38e3780
	bool IsProning();// 0x38e3758
	bool IsOpenServerControlPunish();// 0x38e373c
	bool IsNearPushBase();// 0x38e3714
	bool IsInImmedSendMoveFrame();// 0x38e36ec
	bool IsBeingPushed();// 0x38e36c4
	bool IsBeingBlew();// 0x38e369c
	bool IsAutonomousWeakNetworkOptimize();// 0x38e3674
	bool IsActorShouldMarkTeleportTime(Actor* PtrActor);// 0x38e35f4
	uint32 GetUserCmdSequence();// 0x38e35cc
	STExtraBaseCharacter* GetSTCharacter();// 0x38e35a4
	enum GetSpecialMoveTypebyCustomMovemode(byte CustomMovmentMode);// 0x38e3524
	SpecialMoveBaseObj* GetSpecialMoveObjBySpecialMoveType(enum specialMoveType);// 0x38e34a4
	SpecialMoveBaseObj* GetSpecialMoveObjByCustomMovementMode(byte CustomMovmentMode);// 0x38e3424
	Vector GetSpecialMoveInputByCustomMoveMode(byte InCustomMovementMode, Vector OriginalInput, bool bUseCache);// 0x38e32fc
	Rotator GetSpecialMoveControlRotationByCustomMoveMode(byte InCustomMovementMode, Rotator OriginalInput);// 0x38e3224
	PrimitiveComponent* GetRealStandingBase();// 0x38e31fc
	Vector GetPendingImpulse();// 0x38e31d8
	Vector GetMovableBaseVelocityAtPoint(Vector Position);// 0x38e3144
	float GetMaxSpeedOnGround();// 0x38e311c
	float GetMaxBrakingDeceleration();// 0x38e30ec
	Vector GetLocationOffsetToBase();// 0x38e30a4
	uint64 GetLastTickFrameCounter();// 0x38e307c
	float GetLastServerMoveTime();// 0x38e3054
	uint32 GetLastAckBadMoveSequence();// 0x38e302c
	float GetJogFactor();// 0x35d30e4
	bool GetIsOpenShovelingAbility();// 0x38e3004
	Vector GetImpartedMovementBaseVelocity();// 0x38e2fb4
	uint64 GetImmedSendMoveFrameCounter();// 0x38e2f8c
	bool GetHistoryValidLocationAndRotation(out Vector OutLoc, out Rotator OutRot, enum MoveIndex);// 0x38e2e64
	float GetHasPredictionSeconds(Vector PredictionDeltaLoc, Vector PredictionVelocity);// 0x38e2d9c
	Vector GetComputeFloorDistStartLocation();// 0x38e2d54
	float GetClientCurrentSeconds();// 0x38e2d2c
	Vector GetBaseLocation();// 0x38e2ce4
	AirBorneMoveObj* GetAirBornMoveObj();// 0x38e2cbc
	Vector GetAcceleration();// 0x38e2c74
	void ForceClientUpdateMovementData();// 0x38e2c60
	bool FindResolvePenetrationHistoryMove(out Vector FindLoc, out Rotator FindRot, enum HistoryIndex);// 0x38e2b38
	void ExitMultipleMove(float CompensateTime);// 0x38e2ab8
	void EnterDirectMove(out const DirectMoveData InDirectMoveData);// 0x38e29d0
	void EnterAirJump(out const CustomSkillMoveData InMoveData);// 0x38e2900
	bool DragOnGround(float DeltaTime);// 0x38e2880
	bool DoJump(bool bReplayingMoves);// 0x38e27f0
	void DisableSimulateCorrection(bool bDisable);// 0x38e2770
	void DelayCheckResolvePenatration(float DelayTime);// 0x38e26f8
	void DebugMovementDetail(FString Caller, out const Vector OldLocation, out const Rotator OldRotation, float DeltaSeconds, bool bForceLog);// 0x38e24fc
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x38e2254
	void ClientUserMoveCmdAck(int Sequence);// 0x38e21dc
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x38e1ed4
	void CheckResolvePenatration(float DeltaTime);// 0x38e1e5c
	void ChangePhysxShapeFlag();// 0x3592f9c
	bool CannotWalkOffLedges();// 0x38e1e34
	Vector CalcBlowUpVelocity(Vector HitNormal, Vector HitCompVelocity);// 0x38e1d58
	float CalcAllowablePositionErrorScaleWithSpeed();// 0x38e1d30
	void CacheSimulateRepMove(out const RepMovement RepMove, float ServerTimeStamp);// 0x38e1c5c
	void BPSetDefaultMovementMode();// 0x38e1c48
	void ApplyImpulse(Vector ImpulseVelocity);// 0x38e1bd0
	void AllowDSSpeedCheck(bool bAllow);// 0x38e1b50
	bool AllowClientLocationWithDSPrediction(out const Vector InClientLoc, float NetLagDiffScale);// 0x38e1a7c

--------------------------------
Class: CharacterDistanceSquareTickInternal
	float DistanceSquare;//[Offset: 0x0, Size: 4]
	float TickInternal;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimulateRepData
	RepMovement RepMovement;//[Offset: 0x18, Size: 72]

--------------------------------
Class: SimulateDragThesholds
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float DragDistanceSq;//[Offset: 0x4, Size: 4]
	float ShakeVelocityDiffSize;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ServerMoveData
	PrimitiveComponent* ClientMovementBase;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ServerReceiveMove

--------------------------------
Class: ResolvePenetrationMoveData
	PrimitiveComponent* PushAwayBase;//[Offset: 0xc, Size: 4]
	ResolvePenetrationHistoryMoveData HistoryMoveData;//[Offset: 0x10, Size: 28]

--------------------------------
Class: ResolvePenetrationHistoryMoveData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector ValidLocation;//[Offset: 0x4, Size: 12]
	Rotator ValidRotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: DirectMoveData.CustomSkillMoveData
	bool bOverrideZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bHandleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	float InertiaRatio;//[Offset: 0x34, Size: 4]

--------------------------------
Class: CustomSkillMoveData
	bool bManualExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Distance;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimulateDragData
	float ReportSimulateDragConfigSeconds;//[Offset: 0x0, Size: 4]
	float ReportSimulateDragSeconds;//[Offset: 0x4, Size: 4]
	float ReportSimulateDragTimer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialMoveBaseObj.LuaObject.Object
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x68, Size: 4]

--------------------------------
Class: AirBorneMoveObj.SpecialMoveBaseObj.LuaObject.Object
	float FlyForwordMaxSpeed;//[Offset: 0x70, Size: 4]
	float FlyRightMaxSpeed;//[Offset: 0x74, Size: 4]
	float FlyBackMaxSpeed;//[Offset: 0x78, Size: 4]
	float ForwardAccel;//[Offset: 0x7c, Size: 4]
	float RightAccel;//[Offset: 0x80, Size: 4]
	float MaxBrakingDeceleration;//[Offset: 0x84, Size: 4]
	float FlyUpStartSpeed;//[Offset: 0x88, Size: 4]
	float FlyUpStartDecel;//[Offset: 0x8c, Size: 4]
	float FlyUpStartTime;//[Offset: 0x90, Size: 4]
	float FlyMaxUpHeight;//[Offset: 0x94, Size: 4]
	float FlyUpUniformSpeed;//[Offset: 0x98, Size: 4]
	float FlyDownUniformSpeed;//[Offset: 0x9c, Size: 4]
	float FlyQucikExitSpeed;//[Offset: 0xa0, Size: 4]
	float LandHeight;//[Offset: 0xa4, Size: 4]
	float WindFieldDecel;//[Offset: 0xa8, Size: 4]
	float WindFieldDecelDuration;//[Offset: 0xac, Size: 4]
	float SuperFlyMaxSpeed;//[Offset: 0xb0, Size: 4]
	float SuperFlyMaxAccel;//[Offset: 0xb4, Size: 4]
	float SuperFlyMaxBrakingDeceleration;//[Offset: 0xb8, Size: 4]
	float SuperFlyUpMaxAngle;//[Offset: 0xbc, Size: 4]
	float FlyMaxHight;//[Offset: 0xc0, Size: 4]
	float SuperFlyMaxHight;//[Offset: 0xc4, Size: 4]
	float FlyAbsoluteMaxHight;//[Offset: 0xc8, Size: 4]
	bool bEnableHorVerMut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	float ModGravityScale;//[Offset: 0xd0, Size: 4]
	bool UseModeGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	FString ModFlySpeedScaleAttrName;//[Offset: 0xd8, Size: 12]
	bool bQuickExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	bool bBuff2VelocityXY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 1]
	bool bBuff2VelocityZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 1]
	delegate OnPreFlyStateChange;//[Offset: 0xe8, Size: 12]
	delegate OnFlyStateChange;//[Offset: 0xf4, Size: 12]
	delegate OnFlyLanded;//[Offset: 0x100, Size: 12]
	delegate OnFlyMoveingStateChange;//[Offset: 0x10c, Size: 12]
	delegate OnMoveMentStateChange;//[Offset: 0x118, Size: 12]
	bool CurrentFlyMoveing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	void StopFly();// 0x3572474
	void SkillAddImpulse(Vector ImpulseVelocity);// 0x3572404
	void SetWindFieldVelocity(Vector InVelocity);// 0x3572394
	void SetState(byte FlyState);// 0x357231c
	void RealSetState(byte FlyState, bool ForceChange);// 0x3572250
	void OnCharacterJumped();// 0x357223c
	float GetRealTimePawnHeiht();// 0x357220c
	enum GetFlyMoveState();// 0x35721e4
	byte GetCustomMoveStateByFlyState(byte FlyState);// 0x3572164
	byte GetCurrentFlyState();// 0x357213c
	void EnterFly();// 0x3572120
	void DoubleTerminalFlySetState(byte FlyState, bool ForceChange);// 0x3572054
	bool BeforeApplyNetworkMovementModeDell(const byte ReceivedMode);// 0x3571fcc

--------------------------------
Class: SimLocalViewData
	float ViewPitch;//[Offset: 0x0, Size: 4]
	float ViewYaw;//[Offset: 0x4, Size: 4]
	float ViewRoll;//[Offset: 0x8, Size: 4]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	byte ViewRoll;//[Offset: 0x4, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: InteractiveMoveActor.LuaActor.Actor.Object
	class InteractiveActorMoveComponent* MoveComponent;//[Offset: 0x39c, Size: 4]
	byte InteractiveMoveType;//[Offset: 0x3a0, Size: 1]
	bool InFPPViewPitchLimitMaxEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	float InFPPViewPitchLimitMin;//[Offset: 0x3a4, Size: 4]
	float InFPPViewPitchLimitMax;//[Offset: 0x3a8, Size: 4]
	float InFPPViewYawLimit;//[Offset: 0x3ac, Size: 4]

--------------------------------
Class: InteractiveActorMoveComponent.MovementComponent.ActorComponent.Object
	InteractiveMoveActor* TargetActor;//[Offset: 0xfc, Size: 4]
	void OnRep_TargetActorNotify(InteractiveMoveActor* IMActor);// 0x373b264
	bool IsTakeOverJump();// 0x373b234
	bool IsInInteractiveState();// 0x373b204
	void HandleJumpInput();// 0x373b1e8
	void HandleEnterInput();// 0x35aaa1c

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x108, Size: 12]
	float OnVehicleWaterSufaceOffset;//[Offset: 0x114, Size: 4]
	float MaxBreathAmount;//[Offset: 0x118, Size: 4]
	float DrowningHurtHight;//[Offset: 0x11c, Size: 4]
	float SwimWaterNearHeight;//[Offset: 0x120, Size: 4]
	float SwimWaterBodyOffset;//[Offset: 0x124, Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0x128, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x12c, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x130, Size: 4]
	float BreathDeltaTime;//[Offset: 0x134, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x138, Size: 4]
	float MinSpeedScale;//[Offset: 0x13c, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x140, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x144, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x148, Size: 4]
	float RollMaxAngle;//[Offset: 0x14c, Size: 4]
	float DistoVolume;//[Offset: 0x150, Size: 4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float DefaultWaterHeight;//[Offset: 0x158, Size: 4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x174, Size: 4]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	float CheckCharacterInWaterInternal;//[Offset: 0x17c, Size: 4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x180, Size: 4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x188, Size: 4]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x18c, Size: 4]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x190, Size: 4]
	float DyingSwimSpeedRate;//[Offset: 0x194, Size: 4]
	bool bDyingSwimChangeCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bAutoSyncSwimSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bAutoStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	void UpdateSwimCollisionHeightCpp();// 0x37fed40
	void SyncSwimSpeedFromCharacter();// 0x37fed2c
	void SetPawnStateToSwim();// 0x37fed18
	void PlayerHealthStatusChange();// 0x37fed04
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x37fec8c
	void OnPawnExitParachute();// 0x37fec78
	void LeaveWater();// 0x37fec64
	bool IsEnterWaterSuface();// 0x37fec3c
	Actor* GetWaterObject();// 0x37fec14
	void EnterWater_BluePrint();// 0x4a51734
	void EnterWater(Actor* WaterObject);// 0x37feb9c
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x4a51734

--------------------------------
Class: WeaponRecordDataForReplay
	int WeaponId;//[Offset: 0x0, Size: 4]
	byte HeadShoot;//[Offset: 0x4, Size: 1]
	byte LimbsShoot;//[Offset: 0x5, Size: 1]
	byte BodyShoot;//[Offset: 0x6, Size: 1]
	byte HandShoot;//[Offset: 0x7, Size: 1]
	byte FootShoot;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xfc, Size: 4]
	float PickUpZLimit;//[Offset: 0x100, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x108, Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x114, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0x118, Size: 4]
	float FindPutDownPointZHalfHeightAdjust;//[Offset: 0x11c, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x120, Size: 4]
	Vector2D RegionXRange;//[Offset: 0x124, Size: 8]
	Vector2D RegionYRange;//[Offset: 0x12c, Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x138, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x144, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x148, Size: 4]
	float DrawTime;//[Offset: 0x14c, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x154, Size: 4]
	<SearchedPickUpItemResult,float> RecentAutoPickupMap;//[Offset: 0x158, Size: 60]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x194, Size: 12]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x1a0, Size: 12]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x37d3098
	void ServerPutDownTarget(Actor* Target);// 0x37d2fe4
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x37d2e50
	void ServerPickUpAttachmentTarget(Actor* Target, const PickUpItemData ItemData, enum PickupAttachmentAdditionalDataType, ItemDefineID TargetDefineID);// 0x37d2bd8
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x37d2b18
	void PutDownTarget(Actor* Target);// 0x37d2aa0
	void PickUpTargetAttachment(Actor* Target, out const PickUpItemData ItemData, enum PickupAttachmentAdditionalDataType, ItemDefineID TargetDefineID);// 0x37d286c
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x37d2724
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x37d26ac
	void NotifyMeetPickupAvailableActor(Actor* Target, bool bUpdatePickupManager);// 0x37d25e8
	void MarkRecentAutoPickUp(SearchedPickUpItemResult PickUpResult);// 0x37d2384
	bool IsItemBlueprintExist(out const ItemDefineID InItemID, Actor* PickUpOwner);// 0x37d22a8
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x37d2218
	Vector[] GetNearItemLocationList(out const Vector TargetLoc, float Radius, float IgnoreDist, uint32[] ItemIDs);// 0x37d1f48
	int GetItemPickupRule(int ItemTypeSpecificID);// 0x37d1ec8
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x37d1dbc
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x37d1cb8
	void ControlClientPutDownTarget(Actor* Target);// 0x37d1c04
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x37d1b08
	void ControlClientPickUpAttachmentTarget(Actor* Target, int AdditionalParam, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x37d1954
	void ClearItemPickupRuleCache(int ItemTypeSpecificID);// 0x37d18dc
	void ClearItemBlueprintExistCache(int ItemTypeSpecificID);// 0x37d1864
	void ClampWorldLocation(out Vector OutVector);// 0x37d17e0
	bool CheckRecentAutoPickUp(SearchedPickUpItemResult PickUpResult, float OverTime);// 0x37d1530

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 48]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x4c8, Size: 4]
	float AttachCheckDistance;//[Offset: 0x4cc, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x4d0, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x4d4, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4d8, Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4f4, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x500, Size: 12]
	int LastCreateFailedWeaponID;//[Offset: 0x514, Size: 4]
	ItemDefineID LastClientDestroyWeaponID;//[Offset: 0x518, Size: 24]
	int WeaponReconnectOpIndex;//[Offset: 0x530, Size: 4]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x36675fc
	void UpdateDataWhenBagChangedOnAutonomous();// 0x36675e8
	void RPC_Server_MarkWeaponDestroy(const ItemDefineID ID);// 0x3667534
	void RPC_Client_ResyncWeaponSpawnData(const SpawnAndBackpackWeaponReplicatedData[] SpawnWeaponData);// 0x36673d8
	void OnRecoverOnServer();// 0x36673bc
	void OnReconnectOnServer();// 0x35b0588
	void OnReconnectOnClient();// 0x35b056c
	void OnPawnEquipmentsVisibleChanged(enum SlotType, bool IsVisible);// 0x36672f8
	void OnPawnEquipmentsChanged(enum SlotType, bool IsEquipped, int ItemId);// 0x36671ec
	void OnDisconnectToClientOnServer();// 0x36671d8
	int GetShowBagLevel();// 0x362c798
	int GetBagLevel();// 0x363b1b0

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4, Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0xc, Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x10, Size: 4]
	AnimationAsset* IdleMotorBikeDirverLeaningAnim;//[Offset: 0x14, Size: 4]
	AnimationAsset* IdleMotorBikeDirverLeaningLowSpeedAnim;//[Offset: 0x18, Size: 4]
	AnimationAsset* MotorBikeDirverLeaningGroundPitchAnim;//[Offset: 0x1c, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOffAnim;//[Offset: 0x20, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOffAnim;//[Offset: 0x24, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOffAnim;//[Offset: 0x28, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOffAnim;//[Offset: 0x2c, Size: 4]
	AnimationAsset* PassengerDriverOffAimAim;//[Offset: 0x30, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleLeaningAnim;//[Offset: 0x34, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOnAnim;//[Offset: 0x38, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOnAnim;//[Offset: 0x3c, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOnAnim;//[Offset: 0x40, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOnAnim;//[Offset: 0x44, Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x48, Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x4c, Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x50, Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x54, Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x58, Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x5c, Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x60, Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x64, Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x68, Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x6c, Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x70, Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x74, Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x78, Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x7c, Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x80, Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x84, Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x88, Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x8c, Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x90, Size: 4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x94, Size: 4]
	AnimationAsset* VehicleWeaponEquipAnim;//[Offset: 0x98, Size: 4]
	AnimationAsset* VehicleWeaponUnEquipAnim;//[Offset: 0x9c, Size: 4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0xa0, Size: 4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0xa4, Size: 4]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0xa8, Size: 4]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0xac, Size: 4]
	AnimationAsset* VehicleDriverForwardAnim;//[Offset: 0xb0, Size: 4]
	AnimationAsset* DyingInVehicleIdleAnim;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	float VacateHight;//[Offset: 0x8, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 12]
	enum SeatWeaponHoldType;//[Offset: 0x28, Size: 1]
	enum SeatSpecialType;//[Offset: 0x29, Size: 1]
	enum VehicleType;//[Offset: 0x2a, Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	float DamageReduceScaleExtra;//[Offset: 0xc, Size: 4]
	float DamageReduceScaleIgnoreDurability;//[Offset: 0x10, Size: 4]
	float BrokenArmorDamageReduceScale;//[Offset: 0x14, Size: 4]
	float DurabilityReduceScale;//[Offset: 0x18, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x1c, Size: 12]
	float MomentumResistance;//[Offset: 0x28, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BackpackReplayData
	float OccupiedCapacity;//[Offset: 0x0, Size: 4]
	float BackpackCapacity;//[Offset: 0x4, Size: 4]
	BackpackReplayItem[] ReplayItems;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BackpackReplayItem
	int ItemId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]
	uint64 ItemState;//[Offset: 0x10, Size: 8]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 12]
	float EnergyMax;//[Offset: 0xc, Size: 4]
	float EnergyCurrent;//[Offset: 0x10, Size: 4]
	float EnergyPredict;//[Offset: 0x14, Size: 4]
	float AttenuationPeriod;//[Offset: 0x18, Size: 4]
	float AttenuationAmount;//[Offset: 0x1c, Size: 4]
	float PassedDeltaTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FString BuffName;//[Offset: 0x4, Size: 12]
	int BuffID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140, Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 12]
	byte ShowType;//[Offset: 0xc, Size: 1]
	float Value;//[Offset: 0x10, Size: 4]
	float LimitValue;//[Offset: 0x14, Size: 4]
	FString MaxAttrName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	GameBaseInfo GameBaseInfo;//[Offset: 0x138, Size: 120]
	UAEGameMode* UAEGM;//[Offset: 0x1b0, Size: 4]
	void ServerSendGameStartFlow(out const ClientGameStartFlow ClientGameStartFlow);// 0x385b0e4
	void ServerSendGameEndFlow(out const ClientGameEndFlow ClientGameEndFlow);// 0x385b034
	void ReportVoiceTeamQuit(const VoiceTeamQuit teamQuit);// 0x385af04
	void ReportVoiceTeamCreate(const VoiceTeamCreate teamCreate);// 0x385add4
	void ReportVerifyInfoFlow();// 0x385ad78
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x385aca8
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x385abb8
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x385aac8
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x385a9f8
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x385a928
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x385a824
	void ReportGameSetting(const GameSetting GameSetting);// 0x385a734
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x385a664
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x385a55c
	void ReportDSCircleFlow(out const DSCircleFlow CircleFlow);// 0x385a4bc
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x385a3ec
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x385a31c
	void ReportAimFlow(const AimFlow AimFlow);// 0x385a24c
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x385a1bc
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponId, out int BulletID, out int BulletNum);// 0x3859ff8
	void CheckSendGameStartFlow();// 0x3859fe4
	void CheckSendGameEndFlow();// 0x3859fd0
	FString BuildRecoveryItemCountString(out const RecoveryItemCount[] RecoveryItemCounts);// 0x3859e7c

--------------------------------
Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherId;//[Offset: 0x20, Size: 1]
	FString ItemList;//[Offset: 0x24, Size: 12]
	int8 TeamType;//[Offset: 0x30, Size: 1]
	int TeamID;//[Offset: 0x34, Size: 4]
	FString TeamPlayer1;//[Offset: 0x38, Size: 12]
	FString TeamPlayer2;//[Offset: 0x44, Size: 12]
	FString TeamPlayer3;//[Offset: 0x50, Size: 12]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x5c, Size: 4]
	FString AntsVoiceTeamID;//[Offset: 0x60, Size: 12]
	FString AntsVoiceRoomID;//[Offset: 0x6c, Size: 12]
	int AntsVoiceTeamMemberID;//[Offset: 0x78, Size: 4]
	int AntsVoiceRoomMemberID;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString ClientVersion;//[Offset: 0x14, Size: 12]
	uint32 OverTime;//[Offset: 0x20, Size: 4]
	int8 EndType;//[Offset: 0x24, Size: 1]
	byte KillCount;//[Offset: 0x25, Size: 1]
	byte AssistsCount;//[Offset: 0x26, Size: 1]
	byte DropCount;//[Offset: 0x27, Size: 1]
	byte SaveCount;//[Offset: 0x28, Size: 1]
	byte RebornCount;//[Offset: 0x29, Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]
	int GoldGet;//[Offset: 0x2c, Size: 4]
	int DiamondGet;//[Offset: 0x30, Size: 4]
	int ExpGet;//[Offset: 0x34, Size: 4]
	byte WinRank;//[Offset: 0x38, Size: 1]
	byte TotalPlayers;//[Offset: 0x39, Size: 1]
	int PlayerRank;//[Offset: 0x3c, Size: 4]
	int RankEnd;//[Offset: 0x40, Size: 4]
	int TeamID;//[Offset: 0x44, Size: 4]
	FString TeamPlayer1;//[Offset: 0x48, Size: 12]
	FString TeamPlayer2;//[Offset: 0x54, Size: 12]
	FString TeamPlayer3;//[Offset: 0x60, Size: 12]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x6d, Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x6e, Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x6f, Size: 1]
	uint32 GameEndFlowID;//[Offset: 0x70, Size: 4]
	byte RoundCircleCount;//[Offset: 0x74, Size: 1]
	int[] UseQuickMsgIDArray;//[Offset: 0x78, Size: 12]
	int[] UseQuickMsgCountArray;//[Offset: 0x84, Size: 12]
	int[] UseWheelMsgIDArray;//[Offset: 0x90, Size: 12]
	int[] UseWheelMsgCountArray;//[Offset: 0x9c, Size: 12]
	int[] InexistentAvatarStat;//[Offset: 0xa8, Size: 12]
	int[] InexistentAvatarInBornStat;//[Offset: 0xb4, Size: 12]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xc0, Size: 12]
	int[] InexistentVehicleAvatarStat;//[Offset: 0xcc, Size: 12]
	int InexistentPlaneAvatarStat;//[Offset: 0xd8, Size: 4]
	int InexistentEmoteAvatarStat;//[Offset: 0xdc, Size: 4]
	byte ShowMsgCnt;//[Offset: 0xe0, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xe1, Size: 1]
	byte UserCancelCnt;//[Offset: 0xe2, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xe3, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xe4, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xe8, Size: 4]
	float TeammateMicrophoneTime;//[Offset: 0xec, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xf0, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xf4, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xf8, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xfc, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x100, Size: 4]
	byte PlayerUseQuickSight;//[Offset: 0x104, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0x105, Size: 1]
	int PlayerMoveSpeedMax;//[Offset: 0x108, Size: 4]

--------------------------------
Class: VoiceTeamQuit
	FString AntsVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString AntsVoiceRoomID;//[Offset: 0xc, Size: 12]
	int AntsVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int AntsVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UID;//[Offset: 0x20, Size: 8]

--------------------------------
Class: VoiceTeamCreate
	FString AntsVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString AntsVoiceRoomID;//[Offset: 0xc, Size: 12]
	int AntsVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int AntsVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UID;//[Offset: 0x20, Size: 8]

--------------------------------
Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	FString TargetUserName;//[Offset: 0x58, Size: 12]
	FString TargetOpenID;//[Offset: 0x64, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x70, Size: 8]
	FString HitPart;//[Offset: 0x78, Size: 12]
	int GunID;//[Offset: 0x84, Size: 4]
	byte PlayerKill;//[Offset: 0x88, Size: 1]
	uint64 AttackFlowID;//[Offset: 0x90, Size: 8]
	int KillAICnt;//[Offset: 0x98, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x9c, Size: 4]
	int16 BulletDown;//[Offset: 0xa0, Size: 2]

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 44]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x34, Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x3c, Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x44, Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x4c, Size: 136]
	GameSetting_PickUp PickUp;//[Offset: 0xd4, Size: 56]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int LRShootMode;//[Offset: 0x14, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int LeftHandFire;//[Offset: 0x1c, Size: 4]
	int Gyroscope;//[Offset: 0x20, Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool ShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0, Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 4]
	int DrivingViewMode;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 40]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x38, Size: 40]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x60, Size: 40]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 4]
	float ParachuteEye;//[Offset: 0x4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float CamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float CamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float FireCamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float FireCamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 4]
	float GyroscopeShoulderSniper;//[Offset: 0x20, Size: 4]
	float GyroscopeShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4, Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c, Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 4]
	int Bandage;//[Offset: 0x4, Size: 4]
	int PainKiller;//[Offset: 0x8, Size: 4]
	int Adrenaline;//[Offset: 0xc, Size: 4]
	int EnergyDrink;//[Offset: 0x10, Size: 4]
	int FirstAidKit;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 4]
	int ShockBomb;//[Offset: 0x4, Size: 4]
	int SmokeBomb;//[Offset: 0x8, Size: 4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponId;//[Offset: 0x0, Size: 4]
	int BulletCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString TargetOpenID;//[Offset: 0x7c, Size: 12]
	FString TargetUserName;//[Offset: 0x88, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x98, Size: 8]
	int8 TargetRoleType;//[Offset: 0xa0, Size: 1]
	FString GunName;//[Offset: 0xa4, Size: 12]
	FString GunPartsType;//[Offset: 0xb0, Size: 12]
	int8 SightType;//[Offset: 0xbc, Size: 1]
	int BulletSpeed;//[Offset: 0xc0, Size: 4]
	int8 MagazineMax;//[Offset: 0xc4, Size: 1]
	int8 MagazineLeft;//[Offset: 0xc5, Size: 1]
	int ShotFrequency;//[Offset: 0xc8, Size: 4]
	int BulletDamage;//[Offset: 0xcc, Size: 4]
	int16 BulletDown;//[Offset: 0xd0, Size: 2]
	byte BulletDamageReduce;//[Offset: 0xd2, Size: 1]
	int Recoil;//[Offset: 0xd4, Size: 4]
	int ReloadTime;//[Offset: 0xd8, Size: 4]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	byte ShotPose;//[Offset: 0xe8, Size: 1]
	byte FireType;//[Offset: 0xe9, Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 1]
	byte Sideways;//[Offset: 0xeb, Size: 1]
	int ShootingDeviationX;//[Offset: 0xec, Size: 4]
	int ShootingDeviationY;//[Offset: 0xf0, Size: 4]
	uint32 ZeroDistance;//[Offset: 0xf4, Size: 4]
	uint32 ShotTime;//[Offset: 0xf8, Size: 4]
	int HitTime;//[Offset: 0xfc, Size: 4]
	int PlayerPositionX;//[Offset: 0x100, Size: 4]
	int PlayerPositionY;//[Offset: 0x104, Size: 4]
	int PlayerPositionZ;//[Offset: 0x108, Size: 4]
	int GunPositionX;//[Offset: 0x10c, Size: 4]
	int GunPositionY;//[Offset: 0x110, Size: 4]
	int GunPositionZ;//[Offset: 0x114, Size: 4]
	int BulletsBornPositionX;//[Offset: 0x118, Size: 4]
	int BulletsBornPositionY;//[Offset: 0x11c, Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x120, Size: 4]
	uint32 LastHitTime;//[Offset: 0x124, Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x128, Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x12c, Size: 4]
	int HitPositionX;//[Offset: 0x130, Size: 4]
	int HitPositionY;//[Offset: 0x134, Size: 4]
	int HitPositionZ;//[Offset: 0x138, Size: 4]
	byte HitPart;//[Offset: 0x13c, Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 1]
	byte BulletCost;//[Offset: 0x13e, Size: 1]
	int HPstart;//[Offset: 0x140, Size: 4]
	int HPEnd;//[Offset: 0x144, Size: 4]
	int ArmorHPStart;//[Offset: 0x148, Size: 4]
	int ArmorHPEnd;//[Offset: 0x14c, Size: 4]
	int CarHPStart;//[Offset: 0x150, Size: 4]
	int CarHPEnd;//[Offset: 0x154, Size: 4]
	byte PlayerKill;//[Offset: 0x158, Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 1]
	int RecoilMoveX;//[Offset: 0x15c, Size: 4]
	int RecoilMoveY;//[Offset: 0x160, Size: 4]
	int WeaponAimFOV;//[Offset: 0x164, Size: 4]
	int BulletDamageDebuff;//[Offset: 0x168, Size: 4]
	int BulletDamageBuff;//[Offset: 0x16c, Size: 4]
	int BulletType;//[Offset: 0x170, Size: 4]
	uint32 AtackFlowID;//[Offset: 0x174, Size: 4]
	int AutoAimSpeed;//[Offset: 0x178, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x17c, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x180, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x184, Size: 4]
	int GunID;//[Offset: 0x188, Size: 4]
	int IfIsOnCar;//[Offset: 0x18c, Size: 4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	int KillAICnt;//[Offset: 0x194, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x198, Size: 4]
	float CameraRotationX;//[Offset: 0x19c, Size: 4]
	float CameraRotationY;//[Offset: 0x1a0, Size: 4]
	float CameraRotationZ;//[Offset: 0x1a4, Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	int AimTime;//[Offset: 0x7c, Size: 4]
	FString ShotCDTime;//[Offset: 0x80, Size: 12]
	int ShotCount;//[Offset: 0x8c, Size: 4]
	int ShotHitCount;//[Offset: 0x90, Size: 4]
	int ShotHeadHitCount;//[Offset: 0x94, Size: 4]
	int ShotPersonHitCount;//[Offset: 0x98, Size: 4]
	int ShotPersonKillCount;//[Offset: 0x9c, Size: 4]
	FString HitDistance;//[Offset: 0xa0, Size: 12]
	FString HitEachDistance;//[Offset: 0xac, Size: 12]
	FString HitAngle;//[Offset: 0xb8, Size: 12]
	FString HitEachCdTime;//[Offset: 0xc4, Size: 12]
	FString HitPartInfo;//[Offset: 0xd0, Size: 12]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	int8 SightType;//[Offset: 0xe9, Size: 1]
	uint32 AimFlowID;//[Offset: 0xec, Size: 4]

--------------------------------
Class: RepVehicleAttachment
	STExtraVehicleBase* Vehicle;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	byte SeatIndex;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PlayEmoteComponent.LuaActorComponent.ActorComponent.Object
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x150, Size: 4]
	CharacterFormationComponent* FormationComponent;//[Offset: 0x154, Size: 4]
	int CurrentPlayEmoteId;//[Offset: 0x158, Size: 4]
	bool IsHandedWeaponBeforePlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	Vector EmoteColBox;//[Offset: 0x198, Size: 12]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x1a4, Size: 60]
	int CurrentEmoteIndex;//[Offset: 0x214, Size: 4]
	float EmoteAnimLastTime;//[Offset: 0x218, Size: 4]
	delegate StartEmoteMontageEvent;//[Offset: 0x21c, Size: 12]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x228, Size: 12]
	delegate EmoteReadyToPlayNext;//[Offset: 0x234, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x240, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x24c, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x258, Size: 40]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bStopEmoteLoadCallbackWhenCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x284, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x288, Size: 4]
	bool EnablePlayEmoteAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 1]
	float DefaultEmoteFollowCheckTime;//[Offset: 0x290, Size: 4]
	float DefaultEmoteFollowCheckRange;//[Offset: 0x294, Size: 4]
	float DefaultCoopEmoteCheckInterval;//[Offset: 0x298, Size: 4]
	float DefaultCoopEmoteCheckRange;//[Offset: 0x29c, Size: 4]
	float CoopEmoteTargetOffset;//[Offset: 0x2a0, Size: 4]
	float CoopEmoteCheckGroundHeight;//[Offset: 0x2a4, Size: 4]
	bool bFollowEmoteNeedRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	delegate OnAutonomousCharacterPlayEmote;//[Offset: 0x2b0, Size: 12]
	float DelayReInitTime;//[Offset: 0x2c8, Size: 4]
	STExtraBaseCharacter* CachedCoopEmotePlayer;//[Offset: 0x2d8, Size: 8]
	void UpdateCurrentEmoteState();// 0x37e2ebc
	void TryRecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x37e2e00
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x37e2d80
	void StopLastEmoteParticle();// 0x37e2d6c
	bool StartPlayEmoteAnim(int EmoteIndex, uint32 FollowPlayerKey);// 0x37e2ca8
	void SimulatedPlayEmote(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x37e2b58
	void RPC_Server_SetCoopEmotePhase(int CoopPhase);// 0x37e2aa4
	void RPC_Server_JoinCoopEmote(EmotePlayer EmotePlayer);// 0x37e2994
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x37e27f0
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x37e273c
	void ReqEmotePlayFinished(int EmoteIndex);// 0x37e2688
	void RefreshEmote();// 0x37e2674
	void RecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x37e25b8
	void PlayEmoteSoundByEmoteId(int EmoteId);// 0x37e2540
	bool PlayEmote_Autonomous(int EmoteId);// 0x37e24c0
	void OnStateEnter(enum EnteredState);// 0x37e2440
	bool OnPlayFollowEmote(int EmoteId, int FollowPlayerKey, bool bKeepFollowState);// 0x37e2330
	void OnPlayEmoteStop(int EmoteIndex);// 0x37e22b8
	void OnPlayEmoteEnd(int EmoteIndex);// 0x37e2240
	bool OnPlayEmote(int EmoteId);// 0x37e21c0
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x37e20c0
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x37e1f04
	void OnLeaveFormationState();// 0x3592f9c
	void OnInterruptCurrentEmote();// 0x37e1ef0
	void OnFollowNearPlayerEmote();// 0x37e1edc
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x37e1e20
	void OnCharacterWeaponEquipped(STExtraWeapon* InWeapon, byte InSlot);// 0x37e1d5c
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x37e1b0c
	void MulticastStartPlayEmoteWithRandReliable(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x37e1968
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x37e17c4
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x37e1710
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x37e165c
	bool LocalStartPlayEmote(int EmoteIndex, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x37e154c
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x37e14cc
	bool IsPlayingEmotes();// 0x37e14a4
	bool IsCommonFollowTeam(EmotePlayer EmotePlayer);// 0x37e13dc
	bool IsCanPlayEmote(int EmoteId, bool ShowTips);// 0x37e1310
	bool IsCanFollowed();// 0x35a9ccc
	void InterruptAutonomousFollowEmote(int EmoteId);// 0x37e1298
	void InterrupEmoteSoundByEmoteId(int EmoteId);// 0x37e1220
	bool HasStateExceptStandOrPlayEmote();// 0x37e11f8
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x37e1180
	void HandleEmoteTick(float DeltaTime);// 0x37e1108
	bool GetIsPlayingEmote();// 0x37e10ec
	float GetEmoteStartPosition(int CharacterPlayerKey);// 0x37e106c
	float GetEmotePlayRate();// 0x37e1044
	FString GetEmoteHandlePath(int ItemId);// 0x4a51734
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x4a51734
	int GetCurrentEmoteId();// 0x37e101c
	AnimMontage* GetCurPlayingEmote();// 0x37e0ff4
	STExtraBaseCharacter* GetCharacterOwner();// 0x3658f20
	STExtraBaseCharacter* GetCachedCoopEmotePlayer();// 0x37e0fac
	bool ForceUseLodZeroAnim();// 0x35a9c74
	EmotePlayer FindNearPlayingEmote();// 0x37e0f58
	bool EmoteAnimFinishedSuccessfully();// 0x37e0f30
	void ClientPlayInteractEmote(int EmoteId);// 0x37e0eb0
	void ClearEmotePlayer();// 0x37e0e9c
	void CheckStateChangedInterruptEmoteState();// 0x37e0e88
	void CheckNeedPlayReliableEmote();// 0x37e0e74
	void CheckNeedClearEmotePlayer();// 0x37e0e60
	void CheckNearPlayingEmote();// 0x37e0e4c
	void CheckNearPlayingCoopEmote();// 0x37e0e38
	bool CheckIsValidXSuitBornIslandAction(int EmoteIndex);// 0x37e0db0
	bool CheckEmoteNeedUseReliableRPC(int EmoteIndex);// 0x37e0d28
	void CheckEmoteFollow(float DeltaTime);// 0x37e0cb0
	bool CheckEmoteCollision(int EmoteId);// 0x37e0c30
	bool CheckCanShowFollowPlayEmote(EmotePlayer EmotePlayer);// 0x37e0b64
	void CheckCanInterruptCurrentEmote();// 0x37e0b50
	bool CheckCanFollowPlayEmote(const int EmoteId);// 0x36621f0
	bool CheckCanBeginPlayCoopEmote();// 0x37e0b28
	void CheckAutonomousNeedFollowEmote(int EmoteId);// 0x36449d8
	void BindDelegate();// 0x37e0b14

--------------------------------
Class: CharacterFormationComponent.LuaActorComponent.ActorComponent.Object
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x150, Size: 4]
	STCharacterMovementComponent* MovementComponent;//[Offset: 0x154, Size: 4]
	float RightValueThreshold;//[Offset: 0x164, Size: 4]
	delegate OnCharacterJoinFormation;//[Offset: 0x168, Size: 12]
	delegate OnCharacterLeaveFormation;//[Offset: 0x174, Size: 12]
	float MaxAllowedDistance;//[Offset: 0x180, Size: 4]
	STExtraBaseCharacter*[] Followers;//[Offset: 0x190, Size: 12]
	bool bDisableForwardMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bDisableRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	float MoveInputSampleInterval;//[Offset: 0x1a4, Size: 4]
	int MoveInputCacheNum;//[Offset: 0x1a8, Size: 4]
	CharacterFormationComponent* LeaderFormationComp;//[Offset: 0x1ac, Size: 4]
	FormationInfo FormationInfo;//[Offset: 0x1b0, Size: 32]
	FormationInfo ReplicatedFormationInfo;//[Offset: 0x1d0, Size: 32]
	FormationMoveInput NetSyncMoveInput;//[Offset: 0x1f8, Size: 16]
	bool bFollowLeaderMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	float SmoothUpdateTime;//[Offset: 0x20c, Size: 4]
	bool bStopMovementReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool bStopClientMeshSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	bool bStopClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 1]
	bool bUseRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213, Size: 1]
	float MaxAdjustFormationSpeed;//[Offset: 0x214, Size: 4]
	bool ShouldUpdateRelativePosition();// 0x3658ff0
	void ServerLeaveFormation();// 0x36592e0
	void ResetBlockedByObstacle();// 0x36592cc
	void ReceiveOnLeaveFormation();// 0x36592b0
	void ReceiveOnJoinFormation();// 0x3659294
	void PlayerMoveRight(float rate);// 0x365921c
	void PlayerMoveForward(float rate);// 0x36591a4
	void OnRep_MoveInput();// 0x3592f9c
	void OnRep_FormationInfo();// 0x3659190
	bool LeaveFormation(STExtraBaseCharacter* FormationLeader);// 0x3659110
	bool JoinFormation(STExtraBaseCharacter* FormationLeader);// 0x3659090
	bool IsPlayerControlled();// 0x3659068
	bool IsLeader();// 0x3659040
	bool IsFollower();// 0x3659018
	bool IsBlockedByObstacle();// 0x3658ff0
	bool InMyFormation(STExtraBaseCharacter* InCharacter);// 0x3658f70
	STCharacterMovementComponent* InitMovementComponent();// 0x3658f48
	STExtraBaseCharacter* InitCharacterOwner();// 0x3658f20
	void IgnoreLeaderWhenMoving();// 0x3658f0c
	void IgnoreFollowersWhenMoving();// 0x3658ef8
	bool HasAuthority();// 0x3658ed0
	void HandleCharacterOnBlocked(STExtraBaseCharacter* Character, out const HitResult InHit);// 0x3658db4
	Vector GetVelocity();// 0x3658d6c
	Rotator GetRelativeRotation();// 0x3658d24
	Vector GetRelativePosition();// 0x3658cdc
	STCharacterMovementComponent* GetLeaderMovement();// 0x3658cb4
	CharacterFormationComponent* GetLeaderFormationComp();// 0x3658c8c
	STExtraBaseCharacter* GetLeader();// 0x3658c64
	Rotator GetFormationWorldRotation();// 0x3658c1c
	Vector GetFormationWorldPosition();// 0x3658bd4
	FormationInfo GetFormation();// 0x3658b88
	void GatherPlayerInput(float DeltaTime);// 0x3658b10
	void FormationNotifyLeader(bool bJoin);// 0x3658a90
	void FormationLeaveHandler(enum State);// 0x3658a18
	void ClearLeaderFormationComp();// 0x3658a04
	Rotator CalcRelativeRotation();// 0x36589bc
	Vector CalcRelativePosition();// 0x3658974

--------------------------------
Class: FormationInfo
	bool bIsFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Leader;//[Offset: 0x4, Size: 4]
	Vector RelativeLocation;//[Offset: 0x8, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FormationMoveInput
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector movedir;//[Offset: 0x4, Size: 12]

--------------------------------
Class: EmotePlayer
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	uint32 FollowPlayer;//[Offset: 0x4, Size: 4]
	int EmoteId;//[Offset: 0x8, Size: 4]
	Vector Pos;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xf0, Size: 40]
	byte LoopCount;//[Offset: 0x118, Size: 1]
	float LoopStartTime;//[Offset: 0x11c, Size: 4]
	float blendTime;//[Offset: 0x120, Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x128, Size: 12]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x134, Size: 12]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0x140, Size: 12]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0x14c, Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x158, Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x15c, Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x164, Size: 12]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x170, Size: 12]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x35d02ac
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x35cfe8c
	bool HandleDrop(int InCount, enum Reason);// 0x35cf8a8
	bool HandleDisuse(enum Reason);// 0x35b6124
	BackpackComponent* GetBackpackComponent();// 0x35d30e4
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x35d3020

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]

--------------------------------
Class: EmoteAnimConfig
	FName GenderStr;//[Offset: 0x0, Size: 8]
	class Character* MainCharacter;//[Offset: 0x8, Size: 40]
	AnimationAsset* MainCharacterAnimAsset;//[Offset: 0x30, Size: 40]
	bool CanRotateMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	Transform MainCharacterTransform;//[Offset: 0x60, Size: 48]
	bool RotateBackToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	LevelSequence* EmoteLevelSequence;//[Offset: 0x94, Size: 4]
	EmoteAnimCharacterConfig[] MultiFollowerCharacters;//[Offset: 0x98, Size: 12]
	class Character* FollowerCharacter;//[Offset: 0xa8, Size: 40]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: EmoteAnimCharacterConfig
	class Character* Character;//[Offset: 0x0, Size: 40]
	Transform Transform;//[Offset: 0x30, Size: 48]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: EmoteActionBase.Object
	float PropStartShowTime;//[Offset: 0x1c, Size: 4]
	float PropEndShowTime;//[Offset: 0x20, Size: 4]
	bool bOnlyInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bOnlyOneInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	int[] AssociateEmoteIDs;//[Offset: 0x28, Size: 12]
	bool bOnlyInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	delegate OnActionReady;//[Offset: 0x48, Size: 12]
	void SetExecuteFlag(bool IsExecute);// 0x36d5ecc
	void SetEmotePlayRate(Object* InOuter, BackpackEmoteHandle* InHandle, float OldEmoteRate, float NewEmoteRate);// 0x36d5d84
	void SetActionDelayTimeHandle(Object* InOuter, BackpackEmoteHandle* InHandle);// 0x36d5cc8
	Object* GetSoftRefObj(out const SoftObjectPath AssetRef);// 0x36d5bec
	class Object GetSoftRefClass(out const SoftObjectPath AssetRef);// 0x36d5b10
	bool GetIsExecuting();// 0x36d5af4
	float GetFollowerEmotePosition(Object* InOuter, uint32 FollowPlayerKey);// 0x36d5a28
	void Destroy();// 0x363ef50
	void DelayShow();// 0x35b64b8

--------------------------------
Class: CharacterPlayEmoteComponent.InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x410, Size: 4]
	CharacterFormationComponent* FormationComponent;//[Offset: 0x414, Size: 4]
	int CurrentPlayEmoteId;//[Offset: 0x41c, Size: 4]
	bool IsHandedWeaponBeforePlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	Vector EmoteColBox;//[Offset: 0x458, Size: 12]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x464, Size: 60]
	int CurrentEmoteIndex;//[Offset: 0x4d4, Size: 4]
	int ReplicatedLeaderEmoteIndex;//[Offset: 0x4d8, Size: 4]
	float EmoteAnimLastTime;//[Offset: 0x4dc, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x4e0, Size: 12]
	delegate EmoteReadyToPlayNext;//[Offset: 0x4ec, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x4f8, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x504, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x510, Size: 40]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	bool bStopEmoteLoadCallbackWhenCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x53c, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x540, Size: 4]
	bool EnablePlayEmoteAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 1]
	float DefaultEmoteFollowCheckTime;//[Offset: 0x548, Size: 4]
	float DefaultEmoteFollowCheckRange;//[Offset: 0x54c, Size: 4]
	bool bFollowEmoteNeedRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	float DelayReInitTime;//[Offset: 0x560, Size: 4]
	TimerHandle UpdateTimerHandle;//[Offset: 0x570, Size: 8]
	float UpdateDeltaTime;//[Offset: 0x578, Size: 4]
	void TryRecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x3663a7c
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x366406c
	bool StartPlayEmoteAnim(int EmoteIndex, uint32 FollowPlayerKey);// 0x3663fa8
	void SimulatedPlayEmote(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3663e58
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3663cb4
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x3663c00
	void ReqEmotePlayFinished(int EmoteIndex);// 0x3663b4c
	void RefreshEmote();// 0x3663b38
	void RecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x3663a7c
	STExtraBaseCharacter* QueryNearestPlayingEmoteTeammate(float InRange);// 0x36639fc
	STExtraBaseCharacter* QueryNearestPlayingEmoteCharacter(float InRange);// 0x366397c
	void PlayEmoteSoundByEmoteId(int EmoteId);// 0x3663904
	bool PlayEmote_Autonomous(int EmoteId);// 0x366387c
	void OnStateEnter(enum EnteredState);// 0x36637fc
	void OnRep_ReplicatedLeaderEmoteIndex();// 0x3592f9c
	bool OnPlayFollowEmote(int EmoteId, int FollowPlayerKey, bool bKeepFollowState);// 0x36636ec
	void OnPlayEmoteStop(int EmoteIndex);// 0x3663674
	void OnPlayEmoteEnd(int EmoteIndex);// 0x36635fc
	bool OnPlayEmote(int EmoteId);// 0x366357c
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x366347c
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x36632c0
	void OnLeaveFormationState();// 0x3592f9c
	void OnInterruptCurrentEmote();// 0x36632ac
	void OnFollowNearPlayerEmote();// 0x3663298
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x36631dc
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x3662f8c
	void MulticastStartPlayEmoteWithRandReliable(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3662de8
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x3662c44
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x3662b90
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x3662adc
	bool LocalStartPlayEmote(int EmoteIndex, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x36629cc
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x366294c
	void LeaveMovableEmoteFormation();// 0x3662938
	void JoinFollowFormation(uint32 FollowPlayerKey);// 0x36628c0
	bool IsPlayingEmotes();// 0x3662898
	bool IsCommonFollowTeam(EmotePlayer EmotePlayer);// 0x36627d0
	bool IsCanPlayEmote(int EmoteId, bool ShowTips);// 0x3662704
	bool IsCanFollowed();// 0x36626d4
	void InterruptAutonomousFollowEmote(int EmoteId);// 0x366265c
	void InterrupEmoteSoundByEmoteId(int EmoteId);// 0x36625e4
	bool HasStateExceptStandOrPlayEmote();// 0x36625bc
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x3662544
	bool GetIsPlayingEmote();// 0x3662528
	float GetEmoteStartPosition(int CharacterPlayerKey);// 0x36624a8
	float GetEmotePlayRate();// 0x3662480
	FString GetEmoteHandlePath(int ItemId);// 0x4a51734
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x4a51734
	int GetCurrentEmoteId();// 0x3662458
	AnimMontage* GetCurPlayingEmote();// 0x3662430
	STExtraBaseCharacter* GetCharacterOwner();// 0x3662408
	bool ForceUseLodZeroAnim();// 0x36623d8
	EmotePlayer FindNearPlayingEmote();// 0x3662384
	bool EmoteAnimFinishedSuccessfully();// 0x366235c
	void ClientPlayInteractEmote(int EmoteId);// 0x36622dc
	void ClearEmotePlayer();// 0x36622c8
	void CheckStateChangedInterruptEmoteState();// 0x36622b4
	void CheckNeedPlayReliableEmote();// 0x36622a0
	void CheckNeedClearEmotePlayer();// 0x366228c
	void CheckNearPlayingEmote();// 0x3662278
	bool CheckIsValidXSuitBornIslandAction(int EmoteIndex);// 0x36621f0
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x3662168
	bool CheckEmoteNeedUseReliableRPC(int EmoteIndex);// 0x36620e0
	void CheckEmoteFollow(float DeltaTime);// 0x3662068
	bool CheckEmoteCollision(int EmoteId);// 0x3661fe8
	bool CheckCanShowFollowPlayEmote(EmotePlayer EmotePlayer);// 0x3661f1c
	bool CheckCanFollowPlayEmote(const int EmoteId);// 0x3661e94
	void CheckAutonomousNeedFollowEmote(int EmoteId);// 0x3644ad8
	void BindDelegate();// 0x3661e80

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x2c0, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x2c8, Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x2d0, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x300, Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x304, Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x308, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x30c, Size: 4]
	float HDRUnderWaterFogDensity;//[Offset: 0x310, Size: 4]
	float NormalUnderWaterFogDensity;//[Offset: 0x314, Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x318, Size: 4]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x31c, Size: 12]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x328, Size: 12]
	<ExponentialHeightFogComponent*,bool> SceneFogOriginalStates;//[Offset: 0x334, Size: 60]
	CameraComponent* LastActiveCamComp;//[Offset: 0x370, Size: 4]
	PostProcessVolume* UnderWaterPPV;//[Offset: 0x378, Size: 4]
	void RefreshUnderWaterEffect(bool bUnderWater);// 0x3a4681c
	void OnToggleUnderWaterPPV(bool bUseCacheUnderWater);// 0x3a4679c
	void OnExponentialHeightFogComponentCreate(ExponentialHeightFogComponent* Component);// 0x3a46724
	bool IsCameraUnderWater();// 0x3a466fc
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x3a46684
	void AddSceneFogComponent(ExponentialHeightFog* SceneFogActor);// 0x3a4660c

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2c0, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x2c4, Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x2d4, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x2d8, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x2dc, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x2ec, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x2f0, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x2f4, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x304, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x314, Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x318, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x31c, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x32c, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x330, Size: 4]
	float DirectionalInscatteringGapControl;//[Offset: 0x334, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x338, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x33c, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x340, Size: 16]
	float FogHeightFalloff;//[Offset: 0x350, Size: 4]
	float FogMaxOpacity;//[Offset: 0x354, Size: 4]
	float StartDistance;//[Offset: 0x358, Size: 4]
	float FogCutoffDistance;//[Offset: 0x35c, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x364, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x368, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x36c, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x37c, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x380, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x384, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x38c, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x390, Size: 4]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x3a0, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x667fc88
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x667fc10
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x667fb30
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x667fab8
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x667fa40
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x667f9c4
	void SetVolumetricFogDistance(float NewValue);// 0x667f94c
	void SetVolumetricFogAlbedo(Color NewValue);// 0x667f8dc
	void SetVolumetricFog(bool bNewValue);// 0x667f85c
	void SetStartDistance(float Value);// 0x667f7e4
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x667f76c
	void SetInscatteringTextureTint(LinearColor Value);// 0x667f6f0
	void SetInscatteringColorCubemapAngle(float Value);// 0x667f678
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x667f600
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x667f588
	void SetFogMaxOpacity(float Value);// 0x667f510
	void SetFogInscatteringColor(LinearColor Value);// 0x667f494
	void SetFogHeightFalloff(float Value);// 0x667f41c
	void SetFogDensity(float Value);// 0x6631524
	void SetFogCutoffDistance(float Value);// 0x667f3a4
	void SetDirectionalInscatteringStartDistance(float Value);// 0x667f32c
	void SetDirectionalInscatteringGapControl(float Value);// 0x667f2b4
	void SetDirectionalInscatteringExponent(float Value);// 0x667f23c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x667f1c0
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x667f100
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x667f044

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x310, Size: 4]
	float Interval;//[Offset: 0x314, Size: 4]
	class DamageType* DamageType;//[Offset: 0x318, Size: 4]
	class Pawn[] DamageFilters;//[Offset: 0x31c, Size: 12]
	int[] BuffIDs;//[Offset: 0x328, Size: 12]
	int[] SkillBuffIDs;//[Offset: 0x334, Size: 12]
	BoxComponent* WaterBoxComp;//[Offset: 0x340, Size: 4]
	bool IsLocationInWater(out const Vector Location);// 0x3b5ee4c
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x3b5ed64

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x340, Size: 1312]
	float Priority;//[Offset: 0x860, Size: 4]
	float BlendRadius;//[Offset: 0x864, Size: 4]
	float BlendWeight;//[Offset: 0x868, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 1]
	void RemoveBlendable(interface classNone InBlendableObject);// 0x677ff84
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x677fe54

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x310, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	void OnRep_bEnabled();// 0x357c654

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xc4, Size: 12]
	void UpdateAttribute(int TemplateID);// 0x355a050
	void InitializeFollow();// 0x355a034
	void Initialize(Actor* Actor);// 0x3559fb4

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xc4, Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc8, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	Transform[] StandHitBoxesTransform;//[Offset: 0xd0, Size: 12]
	Transform[] ProneHitBoxesTransform;//[Offset: 0xdc, Size: 12]
	PrimitiveComponent*[] StandHitBoxes;//[Offset: 0xe8, Size: 12]
	PrimitiveComponent*[] ProneHitBoxes;//[Offset: 0xf4, Size: 12]
	FString HitBox_Stand_Tag;//[Offset: 0x104, Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x110, Size: 12]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x120, Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x130, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x134, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x138, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x13c, Size: 4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x144, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x14c, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x154, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x15c, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x164, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x16c, Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x1a8, Size: 4]
	bool bRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x1b0, Size: 4]
	bool bRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	delegate OnOpenCollision;//[Offset: 0x1b8, Size: 12]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x359abd8
	void UpdateAllInstanceBodyTransform(int Type);// 0x37bb5e4
	void OpenCollisonDelegate__DelegateSignature();// 0x4a51734
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x37bb564
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x37bb4d0
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x37bb404
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x37bb290
	byte GetCurHitPartJudgementType();// 0x37bb268
	void CloseBodyBulletCollision();// 0x355a034
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef BodyDef);// 0x37bb0cc

--------------------------------
Class: TurnAroundViewComponent.ActorComponent.Object
	FocusTargetItem FocusTurnData;//[Offset: 0x108, Size: 52]
	bool bTurnOnlyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bUseBPConfigMeshRelativeRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	Rotator ConfigMeshRelativeRot;//[Offset: 0x140, Size: 12]
	Character* MyChar;//[Offset: 0x174, Size: 4]
	void OnRep_FocusTurnTargetChange();// 0x3a94700

--------------------------------
Class: FocusTargetItem
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	bool IsStartTurnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float TurnTargetVelocity;//[Offset: 0x18, Size: 4]
	Rotator LastActorRotation;//[Offset: 0x1c, Size: 12]
	FString CurveName;//[Offset: 0x28, Size: 12]

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0xc4, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0xc8, Size: 60]
	TickListItem[] NeedTickComponentList;//[Offset: 0x104, Size: 12]
	byte RoleBits;//[Offset: 0x110, Size: 1]

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 4]
	enum RoleType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CharacterMaterialComponent.ActorComponent.Object

--------------------------------
Class: CharacterHasGunBodyOffsetList
	CharacterPeekBodyOffsetList NormalBodyOffsetList;//[Offset: 0x0, Size: 216]
	CharacterPeekBodyOffsetList HasGunGunBodyOffsetList;//[Offset: 0xd8, Size: 216]

--------------------------------
Class: CharacterPeekBodyOffsetList
	CharacterBodyOffset NormalBodyOffsetList;//[Offset: 0x0, Size: 72]
	CharacterBodyOffset LeftPeekBodyOffsetList;//[Offset: 0x48, Size: 72]
	CharacterBodyOffset RightPeekBodyOffsetList;//[Offset: 0x90, Size: 72]

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector FootOffset;//[Offset: 0xc, Size: 12]
	Vector TPPCameraOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]
	Vector UpperArmL;//[Offset: 0x30, Size: 12]
	Vector UpperArmR;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SlideMoveData
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	Vector LocalVelocity;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x188, Size: 12]
	void ReleaseParachuteAnimAssets();// 0x41570d0
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x3980388
	void OnAnimListAsyncLoadingFinished();// 0x41570bc
	bool HasAnimAsyncLoadingFinished();// 0x4157094
	void HandleAsyncLoadingFinishedEvent();// 0x4157080
	FString GetOwnerName();// 0x4156618
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType, int AnimOverrideType);// 0x4156fbc

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantizeWithDelta Location;//[Offset: 0x0, Size: 20]
	byte Roll;//[Offset: 0x14, Size: 1]
	uint32 View;//[Offset: 0x18, Size: 4]
	Vector_NetQuantizeWithDelta Velocity;//[Offset: 0x1c, Size: 20]

--------------------------------
Class: Vector_NetQuantizeWithDelta.Vector

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0x108, Size: 4]
	FName ScopeAimCameraSocketName;//[Offset: 0x110, Size: 8]
	FName FPPSocketName;//[Offset: 0x118, Size: 8]
	FName BoltActionCurveName;//[Offset: 0x120, Size: 8]
	bool bResetScopeCameraTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	float ScopeZoomSpringArmLength;//[Offset: 0x12c, Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0x134, Size: 4]
	float BoltActionFov;//[Offset: 0x138, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0x13c, Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x140, Size: 60]
	float ScopeZoomSpeed;//[Offset: 0x17c, Size: 4]
	<int,ScopeZoomConfig> ScopeZoomConfigMap;//[Offset: 0x180, Size: 60]
	float ScopeFovMin;//[Offset: 0x1bc, Size: 4]
	float ScopeFovMax;//[Offset: 0x1c0, Size: 4]
	int CurrentPlayAnimIndex;//[Offset: 0x1c4, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x1c8, Size: 12]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x1d8, Size: 60]
	<FName,float> ScopeZoomMap;//[Offset: 0x214, Size: 60]
	float TanHalfFOV;//[Offset: 0x254, Size: 4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool IsRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x260, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x268, Size: 8]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight);// 0x3616e6c
	float SwitchSightConfigMaterial();// 0x4a51734
	void SwitchScopeMeshAnim(byte Type);// 0x3616df4
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x3616d7c
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x3616d04
	void SwitchRearSight(bool IsBegin);// 0x3616c7c
	void SwitchCameraMode(byte Mode);// 0x3616c04
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0x4a51734
	void StopScopeIn();// 0x4a51734
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0x4a51734
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0x4a51734
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x3616b38
	void SetTagCulling(bool IsUse);// 0x4a51734
	void SetNearClipPlane(bool EnableNearClip);// 0x3616ab8
	void ScopingChange(bool InValue);// 0x3616a38
	void Scoping(byte NewType);// 0x36169c0
	void ScopeZoomUpdate(float Alpha);// 0x3616948
	void ScopeZoomTick(float DeltaTime);// 0x36168d0
	void ScopeTimelineUpdate(float Alpha);// 0x3616858
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* Entity);// 0x361679c
	void ScopeOutLogic();// 0x3616788
	void ScopeOutEnd();// 0x4a51734
	void ScopeOut(byte NewType);// 0x3616710
	void ScopeNotHandFold();// 0x36166fc
	void ScopeInterrupt(byte NewType);// 0x3616684
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* Entity);// 0x36165c8
	void ScopeInLogic();// 0x36165b4
	void ScopeInEnd();// 0x4a51734
	void ScopeInContinue();// 0x36165a0
	void ScopeInAfterTimeline();// 0x361658c
	void ScopeIn(byte NewType);// 0x3616514
	void ScopeHandFold();// 0x3616500
	void PlayScopeInTimeline();// 0x4a51734
	bool IsUseZoomScope();// 0x36164d8
	bool IsRPGScopeIn();// 0x36164b0
	bool IsCurWeaponAttachedAngledSight();// 0x3616288
	bool IsAngledSightBySlot(byte Slot);// 0x3616430
	bool IsAngledSight();// 0x3616400
	void InterruptBoltAction();// 0x36163ec
	void InitScopeZoom(int WeaponId, int ScopeID);// 0x3616330
	bool HaveAngledSightBySlot(byte Slot);// 0x36162b0
	bool HaveAngledSight();// 0x3616288
	byte GetSightType();// 0x3616260
	float GetScopeZoomValue(int WeaponId, int ScopeID);// 0x361619c
	FName GetScopeZoomKey(int WeaponId, int ScopeID);// 0x36160d0
	MaterialInstance* GetScopeMaterialOverride(STExtraShootWeapon* Weapon);// 0x4a51734
	float GetScopeFov(STExtraWeapon* Weapon, bool bIsAngled);// 0x4a51734
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x3616040
	FName GetScopeAimCameraSocketName();// 0x3616000
	ScopeZoomConfig GetCurScopeZoomConfig();// 0x3615fb8
	STExtraWeapon* GetCurScopeWeapon();// 0x3615f90
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov);// 0x3615eb0
	byte GetCurrentESTEScopeState();// 0x3615e94
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x3615d34
	void BoltAction(float DeltaSeconds);// 0x3615cbc
	void AttachToSightKeepTransform();// 0x4a51734
	void AttachToSight();// 0x4a51734
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x3615bdc
	void ActiveComponentTickable();// 0x3615bc8

--------------------------------
Class: ScopeZoomConfig
	int DisplayMaxScale;//[Offset: 0x0, Size: 4]
	int DisplayMinScale;//[Offset: 0x4, Size: 4]
	CurveFloat* FovCurve;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 4]
	float Scale;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x188, Size: 12]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x194, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x1a0, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x1ac, Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x1b8, Size: 4]
	CharacterShovelAnimData[] CharacterShovelEditList;//[Offset: 0x1bc, Size: 12]
	CharacterShovelAnimData[] CharacterShovelEditListFPP;//[Offset: 0x1c8, Size: 12]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x1d4, Size: 12]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x1e0, Size: 12]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 1]
	GetAnimUtil GetAnimUtil;//[Offset: 0x1f4, Size: 20]
	void SetAnimListMapValueData(out const AnimationAsset* AnimPtr, out AnimListMapValueData AnimListValue);// 0x4160078
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x415fdd0
	void OnAsyncLoadingFinishedNew2(AsyncLoadCharAnimParams LoadingParam);// 0x415fb34
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x415f898
	void InitAnimListMap(bool IsFPP);// 0x415f818
	PlayerAnimData[] GetCharacterShovelAnim();// 0x415f758
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x415f650
	AnimationAsset* GetAnimationAsset(out const AnimationAsset* AnimPtr);// 0x415f558

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 1]
	FName JumpTypeName;//[Offset: 0x8, Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeJump;//[Offset: 0x100, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeJump;//[Offset: 0x130, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeFall;//[Offset: 0x160, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeFall;//[Offset: 0x190, Size: 48]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterShovelAnimData
	CharacterShovelPhaseData ShovelPhase_Enter;//[Offset: 0x0, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Shoveling;//[Offset: 0x30, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Leave;//[Offset: 0x60, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Crouch_Leave;//[Offset: 0x90, Size: 48]

--------------------------------
Class: CharacterShovelPhaseData
	enum ShovelPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 1]
	byte AnimType;//[Offset: 0x5, Size: 1]
	byte PoseType;//[Offset: 0x6, Size: 1]
	byte JumpType;//[Offset: 0x7, Size: 1]
	byte JumpPhase;//[Offset: 0x8, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 1]
	int SeatIdx;//[Offset: 0x4, Size: 4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: GetAnimUtil
	SoftObjectPath[] PendingList;//[Offset: 0x0, Size: 12]
	UAECharacterAnimListSubSystem* AnimListSubSystem;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAECharacterAnimListSubSystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: UAEChaCustomAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool bLoadAnimOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	int CharacterAnimOverrideType;//[Offset: 0x190, Size: 4]
	<FString,FName> CharAnimEnumName;//[Offset: 0x194, Size: 60]
	CharCustomAnimData[] CharCustomAnimDataList;//[Offset: 0x1d0, Size: 12]
	<FString,FName> CharFeatureAnimInstanceEnumName;//[Offset: 0x1dc, Size: 60]
	CharCustomAnimInstacneData[] CharCustomAnimInstanceDataList;//[Offset: 0x218, Size: 12]
	void SetCharacterAnimOverrideType(int AnimOverrideType);// 0x415671c
	void ReleaseCustomAnimAssets();// 0x4156708
	bool HasAnimAsyncLoadingFinished();// 0x41566e0
	FString GetOwnerName();// 0x4156618
	class AnimInstance GetCharacterCustomAnimInstance(FString AnimName);// 0x4156554
	AnimationAsset* GetCharacterCustomAnim(FString AnimName);// 0x4156490
	BlendSpace1D* GetBlendSpace1D(FString AnimAssetName);// 0x41563cc
	BlendSpace* GetBlendSpace(FString AnimAssetName);// 0x4156308
	AnimSequence* GetAnimSequence(FString AnimAssetName);// 0x4156244
	AnimMontage* GetAnimMontage(FString AnimAssetName);// 0x4156180
	AimOffsetBlendSpace* GetAimOffsetBlendSpace(FString AnimAssetName);// 0x41560bc
	void CallRequestLoadAnimAssets();// 0x41560a8

--------------------------------
Class: CharCustomAnimData
	UAEBlackboardKeySelector CustomAnimType;//[Offset: 0x0, Size: 8]
	AnimationAsset* CustomAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* CustomAnim;//[Offset: 0x30, Size: 4]
	FString CustomAnimName;//[Offset: 0x34, Size: 12]

--------------------------------
Class: CharCustomAnimInstacneData
	UAEBlackboardKeySelector CustomAnimInstacneType;//[Offset: 0x0, Size: 8]
	class AnimInstance* CustomAnimInstacneSoftPtr;//[Offset: 0x8, Size: 4]
	FString CustomAnimInstanceName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0, Size: 4]
	int OtherEmoteId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: CharacterHide
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bStopCharacterTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bCloseCharacterCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte nRepFlag;//[Offset: 0x3, Size: 1]
	float fScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerMantleComponent.LuaActorComponent.ActorComponent.Object
	bool bPrintLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bCheckState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool bHoldingVaultButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	float NowBlockDis;//[Offset: 0x1cc, Size: 4]
	float NowBlockHeight;//[Offset: 0x1d0, Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x1d4, Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0x1d8, Size: 4]
	float NowBlockLength;//[Offset: 0x1dc, Size: 4]
	Actor* checkActor;//[Offset: 0x1e0, Size: 4]
	Vector HitPoint;//[Offset: 0x1e4, Size: 12]
	PrimitiveComponent* VaultingComponent;//[Offset: 0x1f0, Size: 4]
	Vector BlockDir;//[Offset: 0x1f4, Size: 12]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	float CapsuleRadius;//[Offset: 0x204, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x208, Size: 4]
	float maxCheckDis;//[Offset: 0x20c, Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0x210, Size: 4]
	float UnActiveMaxAngle;//[Offset: 0x214, Size: 4]
	float MaxCheckHeight;//[Offset: 0x218, Size: 4]
	float MaxJumpLength;//[Offset: 0x21c, Size: 4]
	float heightoffsetcheck;//[Offset: 0x220, Size: 4]
	float HeightForwardCheck;//[Offset: 0x224, Size: 4]
	float minVaultHeight;//[Offset: 0x228, Size: 4]
	float minCheckHeight;//[Offset: 0x22c, Size: 4]
	float JumpValueMinDisToland;//[Offset: 0x230, Size: 4]
	float SpeedDisRatio;//[Offset: 0x234, Size: 4]
	bool bCrossBlockCheckDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	float JumpOverMinHeightDiff;//[Offset: 0x23c, Size: 4]
	float MinCrossBlockDis;//[Offset: 0x240, Size: 4]
	float MinCrossBlockDisForSlide;//[Offset: 0x244, Size: 4]
	float ExtraCheckFallingHeight;//[Offset: 0x248, Size: 4]
	float OppositeExtraOffset;//[Offset: 0x24c, Size: 4]
	bool bAllowGrabWhenUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool bAllowVaultOnMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	float nowMaxX;//[Offset: 0x254, Size: 4]
	float nowMinFallingY;//[Offset: 0x258, Size: 4]
	float realStartZ;//[Offset: 0x25c, Size: 4]
	Vector oppositeHitPoint;//[Offset: 0x260, Size: 12]
	Vector upHitPoint;//[Offset: 0x26c, Size: 12]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x278, Size: 4]
	float blockledgeZ;//[Offset: 0x27c, Size: 4]
	float CurHeightToLand;//[Offset: 0x280, Size: 4]
	Actor*[] VaultingIgnoredActors;//[Offset: 0x284, Size: 12]
	Vector PlayerStartPosition;//[Offset: 0x290, Size: 12]
	Rotator PlayerRotation;//[Offset: 0x29c, Size: 12]
	Vector PlayerStartDir;//[Offset: 0x2a8, Size: 12]
	float LastStandDis;//[Offset: 0x2b4, Size: 4]
	float lastwalkDis;//[Offset: 0x2b8, Size: 4]
	float lastsprintDis;//[Offset: 0x2bc, Size: 4]
	float DeltaTime;//[Offset: 0x2c0, Size: 4]
	float CountTime;//[Offset: 0x2c4, Size: 4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	float realStartTime;//[Offset: 0x2cc, Size: 4]
	bool IsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	float offsetSpeed;//[Offset: 0x2d4, Size: 4]
	float nowAnimSpeed;//[Offset: 0x2d8, Size: 4]
	float animSpeedChangeTime;//[Offset: 0x2dc, Size: 4]
	float animChangeSpeedRate;//[Offset: 0x2e0, Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool waitStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	float stopVaultOppDis;//[Offset: 0x2e8, Size: 4]
	Vector DataStartPos;//[Offset: 0x2ec, Size: 12]
	FString NowVaultKey;//[Offset: 0x2f8, Size: 12]
	bool bClimbMovableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	STExtraPlayerCharacter* PlayerPawn;//[Offset: 0x308, Size: 4]
	byte NowDrawDebugType;//[Offset: 0x30c, Size: 1]
	byte gunSlot;//[Offset: 0x30d, Size: 1]
	bool IsPreUseSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 1]
	byte PreUseSkillWeaponSlot;//[Offset: 0x30f, Size: 1]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool IsChangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x314, Size: 4]
	float ShouldAdjustHeight;//[Offset: 0x318, Size: 4]
	float MoveSeconds;//[Offset: 0x31c, Size: 4]
	Vector StartOffsetToBase;//[Offset: 0x320, Size: 12]
	float StartZToBase;//[Offset: 0x32c, Size: 4]
	<FString,VaultDataParam> VaultDataMap;//[Offset: 0x330, Size: 60]
	VaultDataParam NowVaultData;//[Offset: 0x36c, Size: 88]
	VaultCheckRule[] CheckRuleListCPP;//[Offset: 0x3c4, Size: 12]
	UAEWindowComponent*[] VaultWindows;//[Offset: 0x3d0, Size: 12]
	bool bEnableFaceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool bEnableSimulatedFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	float FaceCameraSpeed;//[Offset: 0x3e0, Size: 4]
	bool bEnableNowDisNegative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	bool bEnableStartPositionSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 1]
	float StartPositionSmoothTime;//[Offset: 0x3e8, Size: 4]
	bool bZeroSpeedWhenVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool bControlCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	float CameraUpperThanBlock;//[Offset: 0x408, Size: 4]
	bool bLowerDownCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	float LowerCameraRecoverTime;//[Offset: 0x418, Size: 4]
	FString[] CameraLowerDownKeys;//[Offset: 0x41c, Size: 12]
	bool bEnableClimbingMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool bEnableAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	bool bAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 1]
	float AutoVaultMaxHeightToLand;//[Offset: 0x42c, Size: 4]
	bool bCheckObstacleNotZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	float EndVaultingYaw;//[Offset: 0x454, Size: 4]
	float EndVaultingTime;//[Offset: 0x458, Size: 4]
	float EndVaultingInterpTime;//[Offset: 0x45c, Size: 4]
	bool bJustEndedVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool bResetCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 1]
	bool bUseEndPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	float EndPositionTolerance;//[Offset: 0x468, Size: 4]
	bool bEnableVaultOnMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	bool bEnableVaultFollowMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46d, Size: 1]
	float VaultCheckInterval;//[Offset: 0x470, Size: 4]
	delegate OnVaultCheckFlagChange;//[Offset: 0x498, Size: 12]
	delegate OnVaultFailFromDS;//[Offset: 0x4a4, Size: 12]
	<byte,VaultAnimDataPath> VaultAnimPathMap;//[Offset: 0x4b0, Size: 60]
	AnimMontage* VaultMontage;//[Offset: 0x4ec, Size: 4]
	AnimMontage* TeamVaultMontage;//[Offset: 0x4f0, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4f8, Size: 4]
	bool VaultOnBase();// 0x37f5ad0
	void VaultLeave(enum State);// 0x37f5a58
	bool VaultFromCPP();// 0x37f5a28
	bool VaultFollowBase();// 0x37f5a00
	void VaultFail();// 0x37f59e4
	bool VaultCheckCPP();// 0x37f59bc
	void UpdateVault_BluePrint();// 0x3794aa0
	void UpdatePosition();// 0x36592b0
	void UpdateMontageSpeed();// 0x37f59a8
	void TpsVaultUpdate();// 0x37f5994
	void StopVaultAndReverse();// 0x37f5980
	void StartVault();// 0x37f596c
	void StartLoadVaultAnim();// 0x37f5958
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x37f58d8
	void StartAsyncLoadTeamVaultAnimRes();// 0x35b0550
	bool ShouldSmoothStartPosition();// 0x37f58b0
	void SetVaultData(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossmaxFalling, float crossmaxDis, Vector InHitPoint, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x37f5448
	void SetPlayerStartPositionInternal(Vector InStartPosition, bool UseInputStart);// 0x37f5384
	void SetLimitPostion(float XValue, float ZValue);// 0x37f52c8
	void SetEnd();// 0x37f52b4
	void ServerRPC_VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x37f4dc8
	void ServerRPC_StopVault();// 0x37f4d6c
	void ServerRPC_RequestVault(float dis, float Height, float Length, const int VaultId, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x37f48c0
	void ServerCrossingBlockCheck(Vector StartPos, float blockdis, float blockheight, Rotator movedir, out bool Result);// 0x37f4720
	void ServerBlockDisCheck(Vector InHitPoint, FString Key, Vector StartPos, float blockdis, float blockheight, float blocklength, Actor* InCheckActor, out bool Result);// 0x37f4458
	void ResetCheck();// 0x37f4444
	void ReceiveStartVault();// 0x3659294
	void ReceiveEndVault();// 0x363d8c0
	void OnRespawned_BlueprintImpl();// 0x4a51734
	void MulticastRPC_VaultFail();// 0x3673918
	void MulticastRPC_VaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x37f4084
	void MulticastRPC_StopVault();// 0x37e98a8
	void MulticastRPC_DoVault(float dis, float Height, float Length, const int VaultId, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x37f3d08
	void LeaveAvoidSimulateCharacterShake();// 0x37f3cf4
	void JumpVaultCheck(out bool Result);// 0x37f3c6c
	void jumpFromUI();// 0x37f3c58
	void IsValidVault(out bool IsValid);// 0x37f3bd0
	FString GetVaultKeyByBlockHeight(float Height);// 0x37f3ac0
	void GetRealStartZHeight(out float ResStartZ);// 0x37f3a38
	void GetPlayerStartPositionInternal(bool bRelationLoc, out Vector StartPos);// 0x37f3964
	void GetNowOppSideDis(out float Result);// 0x37f38dc
	void GetNowData(bool IsInFalling, out bool IsGet);// 0x37f3804
	void GetDataStartPosition(out Vector StartPos);// 0x37f3780
	float GetCurHeightToLand();// 0x37f3758
	void GetCrossMaxBlockDisOffset(out bool Result);// 0x37f36d0
	void GetCrossMaxBlockDisForward(out bool Result);// 0x37f3648
	void GetCrossBlockMaxFallingHeight(out bool Result);// 0x37f35c0
	byte GetCharacterSubTypeForAnim();// 0x37f3590
	void ForwardTestObjectType(Actor* Actor, ActorComponent* Comp, out bool Result);// 0x37f3480
	void FindWindowGlass(Vector CheckStart, Vector CheckEnd);// 0x37f33c0
	void EnterAvoidSimulateCharacterShake();// 0x37f33ac
	void EndVaultCPP();// 0x37f3398
	void EncodeVaultKeyToNumber(FString VaultKey, out int VaultId);// 0x37f3288
	void EnableCulling(bool bEnable);// 0x37f3208
	void DoVaultIgnoreStateCPP();// 0x37f31f4
	void DoVaultCPP();// 0x37f31e0
	void DecodeNumberToVaultKey(out const int VaultId, out FString VaultKey);// 0x37f30bc
	void DealBrokenWindows();// 0x37f30a8
	void CheckVaultingWindow();// 0x37f3094
	void CheckUpLengthBlock(out bool Result);// 0x37f300c
	void CheckNowisJumpAnimation(float Height, float thcikLength, out bool Result, out bool ishasAnimation);// 0x37f2ea0
	void CheckIsValidByHeightCheckDis(float nowheight, float checkDis, out bool IsValid);// 0x37f2d90
	void CheckHeight(float Height, out bool IsActive, out Vector Point);// 0x37f2c70
	void CheckForward(out bool IsActive);// 0x37f2be8
	void CheckCanVault(out bool IsActive);// 0x37f2b58
	bool CheckCanStandOn();// 0x37f2b30
	void CancelVaultCPP();// 0x37f2b1c
	void CacultLimitData();// 0x37f2b08
	void AutoVaultInternal();// 0x37f2af4
	void AutoVault(STExtraBaseCharacter* Char, out const HitResult Impact);// 0x37f29d8
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x37f2960

--------------------------------
Class: VaultDataParam
	int ID;//[Offset: 0x0, Size: 4]
	FString montageSectionName;//[Offset: 0x4, Size: 12]
	CurveFloat* upCurve;//[Offset: 0x10, Size: 4]
	CurveFloat* forwardCurve;//[Offset: 0x14, Size: 4]
	float blockdis;//[Offset: 0x18, Size: 4]
	float blockheight;//[Offset: 0x1c, Size: 4]
	float blokcThicklength;//[Offset: 0x20, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool forceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	float CountTime;//[Offset: 0x28, Size: 4]
	float playSpeed;//[Offset: 0x2c, Size: 4]
	float speedChangeTime;//[Offset: 0x30, Size: 4]
	float changeSpeedRate;//[Offset: 0x34, Size: 4]
	float StartFaceCameraTime;//[Offset: 0x38, Size: 4]
	bool standState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool walkState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool SprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	bool isPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 1]
	float BreakWindowDelayTime;//[Offset: 0x40, Size: 4]
	bool isCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float MinCancelVTimer;//[Offset: 0x48, Size: 4]
	float MaxCancelVTimer;//[Offset: 0x4c, Size: 4]
	bool fallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	float fallingvaultMinHeight;//[Offset: 0x54, Size: 4]

--------------------------------
Class: VaultCheckRule
	float CheckHeight;//[Offset: 0x0, Size: 4]
	float standCheckDis;//[Offset: 0x4, Size: 4]
	float walkCheckDis;//[Offset: 0x8, Size: 4]
	float sprintCheckDis;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x7a4, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x7ac, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x7b0, Size: 4]
	ParticleSystem* BrokenEffect;//[Offset: 0x7b4, Size: 4]
	void NotifyServerBroken(PlayerController* Instigator);// 0x4a51734
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x41817f0
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x4a51734
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x4181720
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x418165c
	UAEWindowRepData GetRepData();// 0x4181524

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 48]
	FString PathToLoad;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44, Size: 4]

--------------------------------
Class: VaultAnimDataPath
	FString VaultAnimPath;//[Offset: 0x0, Size: 12]
	FString TeamVaultAnimPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: CharacterAnimShareParamsComp.DataDriverAnimShareParamsComp.LuaActorComponent.ActorComponent.Object
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x378, Size: 4]
	AnimInstanceContainer* LocomotionAnimContainer;//[Offset: 0x37c, Size: 4]
	AnimInstanceContainer* FeatureMoveAnimContainer;//[Offset: 0x380, Size: 4]
	AnimInstanceContainer* FeatureSwimAnimContainer;//[Offset: 0x384, Size: 4]
	AnimInstanceContainer* FeatureNearDeathAnimContainer;//[Offset: 0x388, Size: 4]
	AnimInstanceContainer* FeatureHitAnimContainer;//[Offset: 0x38c, Size: 4]
	AnimInstanceContainer* VehicleAnimContainer;//[Offset: 0x390, Size: 4]
	AnimInstanceContainer* SkillAnimContainer;//[Offset: 0x394, Size: 4]
	AnimInstanceContainer* ParachuteAnimContainer;//[Offset: 0x398, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x3f0, Size: 4]
	void HandleOnPlayerPoseChange(byte LastPose, byte NewPose);// 0x3646c28
	void HandleOnPlayerPerspectiveModeChanged(bool bisFPP);// 0x3646ba8
	void HandleOnPlayerCameraModeChange(byte InCameraMode);// 0x3646b30
	AnimInstanceContainer* GetVehicleAnimContainer();// 0x3646b08
	AnimInstanceContainer* GetSwimAnimContainer();// 0x3646ae0
	AnimInstanceContainer* GetSkillAnimContainer();// 0x3646ab8
	AnimInstanceContainer* GetParachuteAnimContainer();// 0x3646a90
	AnimInstanceContainer* GetLocomotionAnimContainer();// 0x3646a68
	AnimInstanceContainer* GetFeatureNearDeathAnimContainer();// 0x3646a40
	AnimInstanceContainer* GetFeatureMoveAnimContainer();// 0x3646a18
	AnimInstanceContainer* GetFeatureHitAnimContainer();// 0x36469f0

--------------------------------
Class: DataDriverAnimShareParamsComp.LuaActorComponent.ActorComponent.Object
	CurveFloat*[] AnimParamSourceCurveFloatValues;//[Offset: 0x1d0, Size: 12]
	DataDriverAnimDataSubSystem* AnimDataSubSystem;//[Offset: 0x290, Size: 4]
	int ReserveDynamicBoolSourceDataNum;//[Offset: 0x294, Size: 4]
	int ReserveDynamicEnumSourceDataNum;//[Offset: 0x298, Size: 4]
	int ReserveDynamicIntSourceDataNum;//[Offset: 0x29c, Size: 4]
	int ReserveDynamicFloatSourceDataNum;//[Offset: 0x2a0, Size: 4]
	int ReserveDynamicVectorSourceDataNum;//[Offset: 0x2a4, Size: 4]
	int ReserveDynamicRotatorSourceDataNum;//[Offset: 0x2a8, Size: 4]
	int ReserveDynamicCurveFloatSourceDataNum;//[Offset: 0x2ac, Size: 4]
	void SetAnimParamVectorValue(out const FName InTag, Vector vValue);// 0x369eeb0
	void SetAnimParamRotatorValue(out const FName InTag, Rotator rValue);// 0x369eddc
	void SetAnimParamIntValue(out const FName InTag, int iValue);// 0x369ed08
	void SetAnimParamFloatValue(out const FName InTag, float fValue);// 0x369ec34
	void SetAnimParamEnumValue(out const FName InTag, byte eValue);// 0x369eb60
	void SetAnimParamCurveFloatValue(out const FName InTag, CurveFloat* pCurveFloat);// 0x369ea8c
	void SetAnimParamBoolValue(out const FName InTag, bool bValue);// 0x369e9b0
	void SetAnimAssetValue(out const FName InTag, AnimationAsset* AnimAsset);// 0x369e8dc
	Vector GetAnimParamVectorValue(out const FName InTag);// 0x369e838
	Rotator GetAnimParamRotatorValue(out const FName InTag);// 0x369e794
	int GetAnimParamIntValue(out const FName InTag);// 0x369e700
	float GetAnimParamFloatValue(out const FName InTag);// 0x369e66c
	byte GetAnimParamEnumValue(out const FName InTag);// 0x369e5d8
	CurveFloat* GetAnimParamCurveFloatValue(out const FName InTag);// 0x369e544
	bool GetAnimParamBoolValue(out const FName InTag);// 0x369e4b0
	AnimationAsset* GetAnimAssetValue(out const FName InTag);// 0x369e41c

--------------------------------
Class: DataDriverAnimDataSubSystem.WorldSubsystem.Subsystem.Object
	FString[] AnimParamsListPath;//[Offset: 0x20, Size: 12]
	<GameplayTag,AnimParamValuePrerequisites> AnimParamToPrerequisiteMap;//[Offset: 0x2c, Size: 60]
	void AnimParamsListLoadComplete(SoftObjectPath[] ParamPaths);// 0x369c05c

--------------------------------
Class: AnimParamValuePrerequisites
	<int,AnimParamPrerequisites> ValuePrerequisite;//[Offset: 0x0, Size: 60]

--------------------------------
Class: AnimParamPrerequisites
	GameplayTag[] AssetTags;//[Offset: 0x0, Size: 12]

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	byte AttachLocationType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: NetCarryBackState
	enum State;//[Offset: 0x0, Size: 1]
	enum DetachMethod;//[Offset: 0x1, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
	FString ActorComponentName;//[Offset: 0x150, Size: 12]
	int CarryBackSkillID;//[Offset: 0x15c, Size: 4]
	int PutDownSkillID;//[Offset: 0x160, Size: 4]
	int DSSwitchId;//[Offset: 0x164, Size: 4]
	enum State;//[Offset: 0x168, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x16c, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x170, Size: 4]
	enum DetachMethod;//[Offset: 0x174, Size: 1]
	delegate OnEnterCarryBackState;//[Offset: 0x178, Size: 12]
	delegate OnExitCarryBackState;//[Offset: 0x184, Size: 12]
	delegate OnEnterBeCarriedBackState;//[Offset: 0x190, Size: 12]
	delegate OnExitBeCarriedBackState;//[Offset: 0x19c, Size: 12]
	bool bEnableBPInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x1c4, Size: 12]
	float CorrectTickInterval;//[Offset: 0x1d0, Size: 4]
	bool bEnableTranformCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bEnableCollisionCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	float FrontAngleRangeThreshold;//[Offset: 0x1d8, Size: 4]
	float BackAngleRangeThreshold;//[Offset: 0x1dc, Size: 4]
	delegate OnStartCorrectCarryBack;//[Offset: 0x1e4, Size: 12]
	STExtraVehicleBase* CarryToTargetVehicle;//[Offset: 0x1f0, Size: 4]
	void TryPreLoadVehicleCharAnim(const byte InAnimType);// 0x38deaa0
	void StopPutDown();// 0x38dddb8
	void StopCarryBack(enum InDetachMethod);// 0x38dea20
	void StopBePutDown();// 0x3592f9c
	void StopBeCarriedBack(enum InDetachMethod);// 0x38de9a0
	void StartPrePutDown();// 0x37b9640
	void StartPrepareCarryToVehicle();// 0x369ac9c
	void StartPrepareBeCarriedToVehicle();// 0x379e09c
	void StartPreCarryBack(STExtraBaseCharacter* InCharacter);// 0x38de920
	void StartPreBePutDown();// 0x35b08dc
	void StartPreBeCarriedBack(STExtraBaseCharacter* InCharacter);// 0x38de8a0
	void StartCorrectBeCarriedState(bool bInEnableTranformCorrect, bool bInEnableCollisionCorrect);// 0x38de7d0
	void SetCarryToTargetVehicle(STExtraVehicleBase* InVehicleActor);// 0x3644a58
	void SetCarryBackState(enum InState, STExtraBaseCharacter* InCarryBackCharacter, STExtraBaseCharacter* InBeCarriedBackCharacter);// 0x38de6d0
	void ResetCarryBackState();// 0x38de6bc
	void ReplaceCharacterAnimation(bool bReplace);// 0x38de63c
	void PutDownSomebody(bool bFront);// 0x38de5bc
	void PutDownFailed();// 0x38de5a8
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x38de4a8
	void LocalPutDownFailed();// 0x383e73c
	void LocalExitCarryToVehicleState(enum InDetachMethod);// 0x38de428
	void LocalExitCarryBackState(enum InDetachMethod);// 0x38de3a8
	void LocalExitBeCarriedToVehicle(enum InDetachMethod);// 0x38de328
	void LocalExitBeCarriedBackState(enum InDetachMethod);// 0x38de2a8
	void LocalEnterPutDownState();// 0x38de28c
	void LocalEnterCarryToVehicleState();// 0x3671a08
	void LocalEnterCarryBackState();// 0x3754f14
	void LocalEnterBePutDownState();// 0x35b08f8
	void LocalEnterBeCarriedToVehicleState();// 0x36b2500
	void LocalEnterBeCarriedBackState();// 0x35b056c
	void LocalCompleteCarryBackState();// 0x3742c28
	void LocalCompleteBeCarriedBackState();// 0x35b0588
	void LocalCarryToVehicleFailed();// 0x38de270
	void LocalCarryBackFailed();// 0x35b0300
	bool IsValidToVehicle();// 0x37f3590
	bool IsInCarryBackState();// 0x38de248
	bool IsInBeCarriedBackState();// 0x38de220
	bool IsCarryBackEnable();// 0x38de1f8
	void HandleCarrySkillEndEvent(enum StopReason, int SkillID);// 0x38de134
	STExtraVehicleBase* GetCarryToTargetVehicle();// 0x38de104
	void ExecuteCarryToVehicle(const enum InDirType);// 0x38de08c
	void ExecuteBeCarriedToVehicle(const enum InDirType);// 0x38de014
	void CompletePutDown(bool bFront);// 0x38ddf8c
	void CompleteCarryBack();// 0x364d774
	void CompleteBePutDown(bool bFront);// 0x38ddf04
	void CompleteBeCarriedBack();// 0x38ddee8
	bool CheckCanCarryBack(STExtraBaseCharacter* InCharacter);// 0x38dde60
	void CarryToVehicleFinished(const enum InDirType);// 0x38ddde0
	void CarryToVehicleFailed();// 0x38dddcc
	void CarryBackStateDelegate__DelegateSignature();// 0x4a51734
	void CarryBackSomebody();// 0x38dddb8
	void CarryBackFailed();// 0x38ddda4
	bool CanCarryToVehicle(STExtraVehicleBase* InVehicleActor);// 0x3661e94
	int CalculateDirOfCarryToVehInternal(Actor* InVehicleActor);// 0x38ddd1c
	int CalculateDirOfCarryToVeh();// 0x38ddcec
	void BPOnCarryBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x4a51734
	void BPOnBeCarriedBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x4a51734
	void BePutDownBySomebody(bool bFront);// 0x363b278
	void BeCarriedToVehicleFinished(const enum InDirType);// 0x3869d48
	void BeCarriedBackBySomebody();// 0x3592f9c

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x4, Size: 12]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: DynamicOptimizeActorComponents.LuaActorComponent.ActorComponent.Object
	<ActorComponent*,DynamicOptimizeComponentFull> DormantFullComponents;//[Offset: 0x188, Size: 60]
	<ActorComponent*,DynamicOptimizeComponentTick> DormantTickComponents;//[Offset: 0x1c4, Size: 60]
	ActorComponent*[] DormantFullForDebug;//[Offset: 0x200, Size: 12]
	ActorComponent*[] DormantTickForDebug;//[Offset: 0x20c, Size: 12]
	FName NotDestroy;//[Offset: 0x228, Size: 8]
	void SetComponentTickDirectly(ActorComponent* InComponent, bool bTick);// 0x36b87b8
	void OnRespawned();// 0x355a034
	bool IsComponentDormant(ActorComponent* InComponent, enum DormantType);// 0x36b86f4
	FString[] GetDestoryComponentNames();// 0x36b8598
	FString GetComponentName(ActorComponent* InComponent);// 0x36b8490
	void DormantComponent(ActorComponent* InComponent, enum DormantType, FString Reason);// 0x36b834c
	void DestroyUnuseComponent(ActorComponent* InComponent, FString Reason);// 0x36b824c
	void AwakeComponent(ActorComponent* InComponent, enum DormantType, FString Reason, bool bForceRelateTransform);// 0x36b80b8
	void AwakeAllComponents();// 0x36b80a4

--------------------------------
Class: DynamicOptimizeComponentFull
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bSkipUpdateChildTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	byte CollisionType;//[Offset: 0x7, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bReplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bTickEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	FString Reason;//[Offset: 0x14, Size: 12]

--------------------------------
Class: DynamicOptimizeComponentTick
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString Reason;//[Offset: 0x4, Size: 12]
	bool bTickEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x1788, Size: 12]
	delegate OnGameModeExitFlying;//[Offset: 0x1794, Size: 12]
	FString LogicAreaDataPath;//[Offset: 0x17a0, Size: 12]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b8, Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c4, Size: 1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c5, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c6, Size: 1]
	bool bOpenMonsterDamageTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c7, Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x17c8, Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17cc, Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x17d0, Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x17d4, Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x17d8, Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x17dc, Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e0, Size: 1]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x17f8, Size: 4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17fc, Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x1800, Size: 12]
	float GameModeStateReadyEnterTime;//[Offset: 0x1818, Size: 4]

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee1, Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee2, Size: 1]
	int DefaultRevivalCount;//[Offset: 0xee4, Size: 4]
	bool ReducePlayersNumAfterDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 1]
	int DefaultBuyLifeCount;//[Offset: 0xeec, Size: 4]
	bool EnableTeamMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	GameModeParms GameModeParms;//[Offset: 0xef4, Size: 216]
	STExtraPlayerStart*[] STEPlayerStartsList;//[Offset: 0xfcc, Size: 12]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0xfd8, Size: 60]
	enum GameModeType;//[Offset: 0x1014, Size: 1]
	enum GameModeSubType;//[Offset: 0x1015, Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0x1018, Size: 4]
	GameStatisComponent* GameStatisComp;//[Offset: 0x101c, Size: 4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0x1020, Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0x1024, Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1028, Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0x102c, Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0x1030, Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0x1034, Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 1]
	FString SubAISuffix;//[Offset: 0x103c, Size: 12]
	int MlAIType;//[Offset: 0x1048, Size: 4]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0x104c, Size: 4]
	class AIController* AIControllerClass;//[Offset: 0x1050, Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0x1054, Size: 4]
	byte WorldLoadedType;//[Offset: 0x1058, Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0x105c, Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0x1060, Size: 4]
	int PlayerNumPerTeam;//[Offset: 0x1064, Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1068, Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1069, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x106c, Size: 12]
	float CircleSpeedMultiplicator;//[Offset: 0x1078, Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107c, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107d, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107e, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107f, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1081, Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1082, Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1083, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1085, Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1086, Size: 1]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1087, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1088, Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0x108c, Size: 12]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0x1098, Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109c, Size: 1]
	bool bEnableArmorEquipmentToBeAutoDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109d, Size: 1]
	FString GameModeConfigPath;//[Offset: 0x10a0, Size: 12]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ac, Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ad, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ae, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10af, Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0x10b4, Size: 80]
	Vector BornLocation;//[Offset: 0x1104, Size: 12]
	Vector AIBornLocation;//[Offset: 0x1110, Size: 12]
	float BornRadius;//[Offset: 0x111c, Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0x1120, Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0x1121, Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0x1124, Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0x1128, Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x112c, Size: 4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0x1148, Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0x114c, Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1150, Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0x1154, Size: 4]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1158, Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1159, Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0x115c, Size: 4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0x1160, Size: 4]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0x1164, Size: 4]
	float OverrideBackpackCapacity;//[Offset: 0x1168, Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116c, Size: 1]
	FString LuaModPath;//[Offset: 0x1170, Size: 12]
	FString LuaSubMod;//[Offset: 0x117c, Size: 12]
	FString[] CustomWidgets;//[Offset: 0x1188, Size: 12]
	FString CustomUIName;//[Offset: 0x1194, Size: 12]
	GameModeState* CurrentState;//[Offset: 0x11a0, Size: 4]
	GameModeState*[] AllGameModeStates;//[Offset: 0x11a4, Size: 12]
	GameModeState* GameModeStateActive;//[Offset: 0x11b0, Size: 4]
	GameModeState* GameModeStateReady;//[Offset: 0x11b4, Size: 4]
	GameModeState* GameModeStateFighting;//[Offset: 0x11b8, Size: 4]
	GameModeState* GameModeStateFinished;//[Offset: 0x11bc, Size: 4]
	FName CurGameModeState;//[Offset: 0x11c0, Size: 8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d4, Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x11d8, Size: 4]
	Actor* PlanePawn;//[Offset: 0x11dc, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e0, Size: 1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0x11e4, Size: 12]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0x11f0, Size: 4]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0x11f4, Size: 4]
	float OutBoundDamage;//[Offset: 0x11f8, Size: 4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0x127c, Size: 4]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0x1280, Size: 4]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0x1284, Size: 60]
	PlaneComponent* PlaneComp;//[Offset: 0x12c0, Size: 4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x12c4, Size: 4]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0x12c8, Size: 4]
	ShowVehicleComponent* ShowVehicle;//[Offset: 0x12cc, Size: 4]
	delegate OnVehicleDamageInfo;//[Offset: 0x12d0, Size: 12]
	delegate OnSpawnAISuccessDelegate;//[Offset: 0x12fc, Size: 12]
	delegate OnTerminatorEndGameDelegate;//[Offset: 0x1370, Size: 12]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x137c, Size: 12]
	int MatchGoal;//[Offset: 0x13cc, Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d0, Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x13e8, Size: 56]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0x1420, Size: 12]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142c, Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x1430, Size: 12]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x143c, Size: 4]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x1440, Size: 4]
	FName FeatureDefaultPawnName;//[Offset: 0x1448, Size: 8]
	FName FeaturePlayerControllerName;//[Offset: 0x1450, Size: 8]
	FName FeatureWeaponName;//[Offset: 0x1458, Size: 8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1460, Size: 1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1461, Size: 1]
	int VehicleExplosionLifeSpan;//[Offset: 0x1464, Size: 4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1468, Size: 1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1469, Size: 1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146a, Size: 1]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146b, Size: 1]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146c, Size: 1]
	bool bEnableDSAITickRateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146d, Size: 1]
	DSTickRateOptimize DSTickRateOptimizeConfig;//[Offset: 0x1470, Size: 16]
	float DelaySpawnVehicleTime;//[Offset: 0x1480, Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0x1484, Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x1488, Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148c, Size: 1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0x1490, Size: 60]
	int MaxVehiclesInReady;//[Offset: 0x14cc, Size: 4]
	int MaxVehiclesPerGroupInReady;//[Offset: 0x14d0, Size: 4]
	int MaxWingmanInReady;//[Offset: 0x14d4, Size: 4]
	int MaxWingmanPerGroupInReady;//[Offset: 0x14d8, Size: 4]
	bool EnableSuperCarPreTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14dc, Size: 1]
	int SuperCarNum;//[Offset: 0x14e0, Size: 4]
	int MaxGroups;//[Offset: 0x14e4, Size: 4]
	int MaxPlayersPerGroup;//[Offset: 0x14e8, Size: 4]
	<int,GroupPlayers> PlayersInGroup;//[Offset: 0x14ec, Size: 60]
	PVSNetRelevantHelper* PVSNetRelevantHelper;//[Offset: 0x169c, Size: 4]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a0, Size: 1]
	bool bMLAIAsHuman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a1, Size: 1]
	STExtraPlayerController*[] WaitAddWeaponPlayerList;//[Offset: 0x16a4, Size: 12]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x16b0, Size: 12]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16bc, Size: 1]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0x16c0, Size: 60]
	bool bNeedBroadcastFatalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fc, Size: 1]
	bool bNeedBroadcastLastBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fd, Size: 1]
	<int,AIControllerList> AIDeathResIDToControllerList;//[Offset: 0x1700, Size: 60]
	AIPawnPoolItem[] AILivingPawnForPool;//[Offset: 0x173c, Size: 12]
	bool bEnablePacketSimulationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1748, Size: 1]
	int MinPacketSimulationLag;//[Offset: 0x174c, Size: 4]
	float CaculateConnectionsAvgLagTimer;//[Offset: 0x1750, Size: 4]
	int ConnectionsAvgLag;//[Offset: 0x1754, Size: 4]
	float CaculateConnectionsAvgLagTime;//[Offset: 0x1758, Size: 4]
	FString[] ReasonsToSend;//[Offset: 0x175c, Size: 12]
	bool bAIDropBulletInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1768, Size: 1]
	bool bDropAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1769, Size: 1]
	bool bOnlyDropMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176a, Size: 1]
	float DistanceCullFactor;//[Offset: 0x176c, Size: 4]
	float CheckDestoryActorTime;//[Offset: 0x1770, Size: 4]
	bool bReCalcCharacterNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1774, Size: 1]
	bool bInvincibleIgnorePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1775, Size: 1]
	float RemainReadyStateTimeForceSpawnMLAI;//[Offset: 0x1778, Size: 4]
	Vector2D TimerSpawnMLAITime;//[Offset: 0x177c, Size: 8]
	bool IsRegisterDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1784, Size: 1]
	bool bMlAITraining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1785, Size: 1]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x3621384
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x3621224
	void StopAllFakePlayerAIBehaviorTree();// 0x3621210
	void StatisticsVehicleDamage(float Damage, int DamageTypeId, Actor* DamageCauser, Controller* InstigatorController, Controller* VictimController, bool bIsFatalHealthCost, Actor* VictimVehicle);// 0x3620fe8
	bool SpawnTeammateAIWithPlayerKey(uint32 PlayerKey);// 0x3620f68
	bool SpawnMLAIWithPlayerKeyRet(uint32 PlayerKey, int TeamID, uint32 Level, bool bDelivery, bool bTeammate);// 0x3620dc0
	void SpawnAllAI();// 0x3620dac
	bool SpawnAIAtPosiotn(int TeamID, float PosiX, float PosiY, float PosiZ, int WeaponId);// 0x3620c14
	void SpawnAI(int Num);// 0x3620b9c
	bool ShouldDisableRoomCircleConfig();// 0x3620b6c
	void SetStateLeftTime(int leftTime);// 0x3620aec
	void SetGameEndReportData();// 0x3620ad0
	void SetCharacterCustomEnd(UAECharacter* Character);// 0x3620a58
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x362099c
	void RevisePlayerTombBoxDropWrapperList(STExtraBaseCharacter* Character, out PickUpItemData[] OutItemDataList, STExtraBaseCharacter* DamageCauser, int InstanceIDCnt);// 0x3620814
	void RestartPlayer(Controller* NewPlayer);// 0x3620794
	void ResetGameMode();// 0x3620778
	void RemoveUnuseComponent(SubSystemConfig InSubSystemConfig);// 0x36206c4
	void RegisterComponentInternal(enum InSubSystemId, ActorComponent* NewComp, bool bAddToRoot);// 0x36205b4
	void RefreshNetworkObject(Actor* Actor, Vector Loction);// 0x36204f0
	void OnVehicleKill(int DamageTypeId, Actor* DamageCauser);// 0x362042c
	void OnReportNetworkData();// 0x3620410
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x3620390
	void OnGameModeStateChange();// 0x3620374
	void OnGameEnterReady();// 0x3620358
	void OnGameEnterFinish();// 0x362033c
	void OnGameEnterFight();// 0x3620320
	void OnGameEnterActive();// 0x3620304
	void OnAirDropBoxDestroy(int BoxId);// 0x362028c
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x3620168
	bool IsVisualFieldFeatureSupported();// 0x3620140
	bool IsRevivalGameMode(STExtraPlayerState* PlayerState);// 0x36200b8
	bool IsRestartPlayerUsePawnRotation();// 0x3620088
	bool IsPlayerCanSelfRevival(STExtraPlayerState* PlayerState);// 0x3620000
	bool IsFeatureSupported(enum SubSystemType);// 0x361ff80
	bool IsCanJump(PlayerController* PC);// 0x361fef8
	void InitlializeRespawnItemConfig();// 0x361fee4
	void InitialGameModeState();// 0x361fed0
	void HandleGameEnd();// 0x361feb4
	void GotoReadyState();// 0x361fea0
	void GotoFinishedState();// 0x361fe84
	void GotoFightingState();// 0x361fe68
	void GotoActiveState();// 0x361fe54
	void GMGameModeGotoFightingState();// 0x361fe40
	void GetPlayerRealtimeVerifyInfo(uint32 PlayerKey, out RealtimeVerifyInfo RealtimeVerifyInfo);// 0x361fcfc
	int GetMonsterCount();// 0x361fcd4
	class Object GetGlobalOverrideClass(class Object InComponentClass);// 0x361fc54
	STExtraBaseCharacter* GetFirstAlivePlayerCharacter();// 0x361fc24
	byte GetDefaultAIType(uint32 PlayerKey);// 0x361fba4
	int GetCurWeatherPhaseIndex();// 0x361fb74
	GameModeState* GetCurrentState();// 0x361fb4c
	GameModeParam GetCurPlaneRouteData();// 0x361fa14
	FName GetCurGameModeState();// 0x361f9e8
	void GetClassicPlaneActorList(out Actor*[] PlaneList);// 0x361f91c
	GameModeState*[] GetAllGameModeStates();// 0x361f85c
	AIWorldVolume* GetAIWorldVolume();// 0x361f834
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x361f80c
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x361f740
	void GetAirPlaneCharacterList(out Actor*[] PlaneList);// 0x361f674
	void GenerateRespawnItemsForAllPlayers();// 0x361f660
	PlayerController* FindPlayerControllerByUId(uint64 UID);// 0x361f5d4
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x361f554
	void ExecuteCVarConfig();// 0x361f540
	void EditorTriggerCoronaLabVerify(const uint64 PlayerUID, out const byte[] Data, int CrcCheckRet, out const byte[] RawProofData);// 0x361f348
	void DropItemRegisterAIPickupPoint(Actor* PickUpActor);// 0x361f2d0
	void CreatePVSNetRelevant();// 0x361f2bc
	void CreateGameModeComponents();// 0x361f2a0
	STExtraBaseCharacter* CreateBaseCharacter(FakePlayerAIController* InAIController);// 0x361f218
	ActorComponent* CreateAndRegisterComponent(SubSystemConfig InSubSystemConfig);// 0x361f15c
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x361f0d4
	bool CheckNoHumanExist();// 0x361f0a4
	bool CheckMatchGoalAchieved();// 0x361f074
	void CheckInitGameTriggerEnv();// 0x361f060
	bool CheckGameEnd();// 0x361f030
	void ChangeStateGM(FName TargetGameModeState);// 0x361efb8
	bool CanFinishWhenAllNearDeathInSelfRevival(STExtraPlayerState* PlayerState);// 0x361ef30
	bool CanEnterObserve(STExtraPlayerState* PlayerState);// 0x361eea8
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x361ede4
	void CaculateConnectionsAvgLag(float DeltaTime);// 0x361ed6c
	void BPSpawnAI(int Num);// 0x361ecf4

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	bool bUseTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString AIEquipmentTableName;//[Offset: 0x24, Size: 12]
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x30, Size: 12]
	bool bUseSpecificEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int SpecificEquipId;//[Offset: 0x40, Size: 4]
	float RandomStartJumpTime;//[Offset: 0x44, Size: 4]
	float RandomEndJumpTime;//[Offset: 0x48, Size: 4]
	float JumpRadius;//[Offset: 0x4c, Size: 4]
	float JumpHeight;//[Offset: 0x50, Size: 4]
	float RandomAccelerateStart;//[Offset: 0x54, Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x58, Size: 4]
	float OpenParachuteHeight;//[Offset: 0x5c, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x60, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x64, Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x68, Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x6c, Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x70, Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x74, Size: 4]
	float StopdeliverTime;//[Offset: 0x78, Size: 4]
	float NoCirlceRadius;//[Offset: 0x7c, Size: 4]
	float TraceHeight;//[Offset: 0x80, Size: 4]
	float RangeMin;//[Offset: 0x84, Size: 4]
	float RangeMax;//[Offset: 0x88, Size: 4]
	float OriginCheckSquare;//[Offset: 0x8c, Size: 4]
	float DestCheckSquare;//[Offset: 0x90, Size: 4]
	int HouseCheckTimes;//[Offset: 0x94, Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x98, Size: 8]
	float FlyToCircleRadius;//[Offset: 0xa0, Size: 4]
	float FlyToCircleOutRadius;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0xc4, Size: 4]
	float AvoidanceWeight;//[Offset: 0xc8, Size: 4]
	float CohesionWeight;//[Offset: 0xcc, Size: 4]
	float AlignmentWeight;//[Offset: 0xd0, Size: 4]
	float ArriveWeight;//[Offset: 0xd4, Size: 4]
	float PushedWeight;//[Offset: 0xd8, Size: 4]
	float SeparationWeight;//[Offset: 0xdc, Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0xe4, Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0xe8, Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0xec, Size: 4]
	<Actor*,int> actor2AgentIndex;//[Offset: 0x504, Size: 60]
	void SetQueryInterfaceBlueprint(AIWorldVolume* Query);// 0x3683cb8
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x3683c40
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x3683b30
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float SegmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x36838c8

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x340, Size: 12]
	FString HousePathFilePath;//[Offset: 0x34c, Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	FString LogicAreaFilePath;//[Offset: 0x35c, Size: 12]
	bool bTestOccupiedOcclusionPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x3a4, Size: 60]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x41c, Size: 4]
	<Actor*,STBuffApplifierSpreading*> AllBuffApplifierSpreadings;//[Offset: 0x59c, Size: 60]
	void RemoveDamageableActor(DamageableActor* DamageableActor);// 0x357ffe8
	Vector GetSpreadingCenter(Actor* InActor);// 0x357ff58
	void BreakWall(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x357fe94
	void BreakHouse(Vector LogicAreaLoc);// 0x357fe24
	void AddDamageableActor(DamageableActor* DamageableActor);// 0x357fdac

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x338, Size: 4]

--------------------------------
Class: STBuffApplifierSpreading.Actor.Object
	Actor* ParentGrenade;//[Offset: 0x310, Size: 4]
	SceneComponent* SceneRoot;//[Offset: 0x320, Size: 4]
	Rotator[] InitialTraceArray;//[Offset: 0x324, Size: 12]
	int StepsPerTick;//[Offset: 0x330, Size: 4]
	int SpreadDirectionCount;//[Offset: 0x334, Size: 4]
	int MaxInstanceCount;//[Offset: 0x338, Size: 4]
	int MaxMaterialAdditiveInstanceCount;//[Offset: 0x33c, Size: 4]
	float InitialTraceLenClamp;//[Offset: 0x340, Size: 4]
	FName BlockingTag;//[Offset: 0x348, Size: 8]
	float NormalLimitZ;//[Offset: 0x350, Size: 4]
	float GroundTraceNormalScale_Start;//[Offset: 0x354, Size: 4]
	float InitialGroundTraceHeightZ;//[Offset: 0x358, Size: 4]
	float ConcurrentGroundTraceHeightZ;//[Offset: 0x35c, Size: 4]
	float ProcessedHitLenClamp;//[Offset: 0x360, Size: 4]
	float SphereRadius;//[Offset: 0x364, Size: 4]
	float SpreadXY;//[Offset: 0x368, Size: 4]
	float SpreadZ;//[Offset: 0x36c, Size: 4]
	class TslDamageField* DamageFieldClass;//[Offset: 0x370, Size: 4]
	float DamageTickInterval;//[Offset: 0x374, Size: 4]
	bool bModifyEffectLifetime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float InitialEffectLifetime;//[Offset: 0x37c, Size: 4]
	float MinEffectLifetimeForStart;//[Offset: 0x380, Size: 4]
	float EffectLifetimeVariation;//[Offset: 0x384, Size: 4]
	byte[] InterestedSurfaceTypes;//[Offset: 0x388, Size: 12]
	float DamageFieldOffGround;//[Offset: 0x394, Size: 4]
	bool bMergeTwoBurningGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	SphereComponent*[] BlockerArray;//[Offset: 0x3ac, Size: 12]
	SphereComponent*[] MaterialBlockerArray;//[Offset: 0x3b8, Size: 12]
	TslDamageField*[] DamageFieldArray;//[Offset: 0x3c4, Size: 12]
	STExtraBaseCharacter*[] CharacterInEffectArray;//[Offset: 0x3d0, Size: 12]
	float VehicleWarOverlapCheckInternal;//[Offset: 0x454, Size: 4]
	int VehicleWarInnerSkillID;//[Offset: 0x458, Size: 4]
	int VehicleWarOuterSkillID;//[Offset: 0x45c, Size: 4]
	void TickDamageFields();// 0x38ca0b0
	void SetParentGrenade(Actor* Val);// 0x38ca038
	void SetMaxMaterialAdditiveInstanceCount(int Val);// 0x38c9fc4
	void SetLastImpactVelocity(Vector InVelocity);// 0x38c9f54
	void SetInitialEffectLifetime(float Val);// 0x38c9ee0
	Vector GetSpreadingCenter();// 0x38c9e98
	Actor* GetParentGrenade();// 0x36285b8
	int GetMaxMaterialAdditiveInstanceCount();// 0x38c9e7c
	float GetInitialEffectLifetime();// 0x38c9e60
	TslDamageField*[] GetDamageFields();// 0x38c9da0
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x38c9bcc
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x38c9a80
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x38c9934

--------------------------------
Class: TslDamageField.Actor.Object
	Actor* ParentGrenade;//[Offset: 0x314, Size: 4]
	void SetParentGrenade(Actor* Val);// 0x38c950c
	Actor* GetParentGrenade();// 0x38c94f0

--------------------------------
Class: DamageableActor.UAERegionActor.LuaActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x36939e0
	int GetVehicleDamagedSpeed();// 0x4a51734
	int GetVehicleDamagedCoefficient();// 0x4a51734
	<enum,float> GetTargetDamageRateMap();// 0x3693860
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x36936dc
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x3693654
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x36934bc
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x3693410
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x3693388
	enum[] CPP_GetDamageableGameObjectType();// 0x36932c0
	bool CPP_GetCanBePicked();// 0x3693290
	FName CPP_GetBulletBlockComponentTag();// 0x3693248
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x369319c
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x36930d0
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x3692fdc
	void BroadcastDamageState(int DState);// 0x3692f28
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x4a51734
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x4a51734
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x4a51734
	float BP_GetMaxHP();// 0x4a51734
	Vector BP_GetHurtApperanceOffset();// 0x4a51734
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x4a51734
	float BP_GetDamageRateByTarget(Actor* Target);// 0x4a51734
	enum[] BP_GetDamageableGameObjectType();// 0x4a51734
	float BP_GetCurrentHP();// 0x4a51734
	bool BP_GetCanBePicked();// 0x4a51734
	FName BP_GetBulletBlockComponentTag();// 0x4a51734
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x4a51734
	void BP_DamageStateChange(int DState);// 0x4a51734
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x4a51734
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x4a51734

--------------------------------
Class: GameModeParms
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0, Size: 24]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x18, Size: 24]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x30, Size: 24]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x48, Size: 24]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0x60, Size: 24]
	SubSystemConfig SSC_VisualField;//[Offset: 0x78, Size: 24]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x90, Size: 24]
	SubSystemConfig SSC_SuperCold;//[Offset: 0xa8, Size: 24]
	SubSystemConfig SSC_ARWeaponManager;//[Offset: 0xc0, Size: 24]

--------------------------------
Class: SubSystemConfig
	enum SubSystemId;//[Offset: 0x0, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum ConstructType;//[Offset: 0x2, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x4, Size: 4]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x8, Size: 8]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x10, Size: 8]

--------------------------------
Class: DynamicCompConfig
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x334, Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	int PlayerBornPointID;//[Offset: 0x33c, Size: 4]
	bool CheckEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	int CampID;//[Offset: 0x344, Size: 4]
	int TeamID;//[Offset: 0x348, Size: 4]
	bool IsEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool CreativeModeCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	void SetMarkOccupied();// 0x3a0d790
	void ReSetMarkOccupied();// 0x3a0d77c
	bool IsMarkOccupied();// 0x3a0d754

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x328, Size: 8]

--------------------------------
Class: BornPlayerStartData
	int BornPointID;//[Offset: 0x0, Size: 4]
	STExtraPlayerStart*[] PlayerStarts;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameStatisComponent.ActorComponent.Object
	bool IsIngameLikeManagerRevenge(uint64 FriendUID, uint64 OpponentUID);// 0x371cb68
	void InitTLogDamageToPlayerCount();// 0x371cb54
	void InitPlayerHatredStatis();// 0x371cb40
	void InitIngameTeammateLabelDamageCheck(float DamgeTriggerMin, float DamgeTriggerMax);// 0x371ca84
	void InitCarryBackDamageStatis();// 0x371ca70
	void InitAchievementDamageCount();// 0x371ca5c
	int GetTLogDamageToPlayerCount(uint64 UID);// 0x371c9d8
	float GetDamageTakenWhenCarrying(uint64 UID);// 0x371c954
	float GetDamageTakenWhenBeingCarried(uint64 UID);// 0x371c8d0
	float GetDamageTakenAchievement(uint64 UID);// 0x371c84c
	void ClearDamageTakenWhenCarrying(uint64 UID);// 0x371c7d0
	void ClearDamageTakenWhenBeingCarried(uint64 UID);// 0x371c754

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x20, Size: 4]
	FString TablePath;//[Offset: 0x24, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x30, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x3c, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x48, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] UAVAirDropBoxGroupConfigs;//[Offset: 0x54, Size: 12]
	AirDropBoxGenerateWrapperItemData[] GetUAVAirDropBoxGenerateDataList(int GroupIndex);// 0x374c268
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x374c088
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x374bea8
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x374bde8
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x374bd28

--------------------------------
Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0, Size: 12]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0, Size: 4]
	FString CategoryFilter;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0, Size: 4]
	float Radius1;//[Offset: 0x4, Size: 4]
	float Radius3;//[Offset: 0x8, Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float Radius2;//[Offset: 0x10, Size: 4]
	Vector2D[] PolygonPoints;//[Offset: 0x14, Size: 12]
	float BlueCircleRadius;//[Offset: 0x20, Size: 4]
	Vector MapCenter;//[Offset: 0x24, Size: 12]
	float PlaneSpeed;//[Offset: 0x30, Size: 4]
	float PlaneHeight;//[Offset: 0x34, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x38, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x3c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x40, Size: 4]
	bool bCrossCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float CrossCenterRadius;//[Offset: 0x48, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x20, Size: 12]
	GameModeParam[] GameModeParams;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0xc4, Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0xc8, Size: 12]
	<int,SpawnTableData> PawnTableData;//[Offset: 0xd4, Size: 60]
	void InitialItemTable();// 0x3659294

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0, Size: 4]
	int PawnID;//[Offset: 0x4, Size: 4]
	int PawnPercent;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpawnTableData
	int PawnID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0xd8, Size: 60]
	<enum,SoundConfig> MlAISoundConfig;//[Offset: 0x114, Size: 60]
	enum[] HearSoundCharacterTypes;//[Offset: 0x150, Size: 12]
	FName SoundTypeKey;//[Offset: 0x160, Size: 8]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x168, Size: 8]
	void SetEnableMlAIPlayerHearSound(bool IsEnable);// 0x357fa18
	void ProduceSoundInPos(enum soundType, out const Vector Pos, Actor* SourceActor);// 0x357f908
	void OnProjectileExplode(Actor* Projectile, Actor* Instigator);// 0x357f84c

--------------------------------
Class: SoundConfig
	float TransDist;//[Offset: 0x0, Size: 4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x3856c08

--------------------------------
Class: StatueBaseParam
	FString MatPath;//[Offset: 0x0, Size: 12]
	FString TeamFlag;//[Offset: 0xc, Size: 12]
	FString TeamName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: GameModeState.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	float StateTime;//[Offset: 0x78, Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x7c, Size: 4]
	GameStateBase* OwningGameState;//[Offset: 0x80, Size: 4]
	void SetLeftTime(int InLeftTime);// 0x3711c74
	void ReceiveGotoNextState();// 0x4a51734
	void ReceiveEnter();// 0x4a51734
	int64 GetLeftTime();// 0x3711c4c
	void DSExitGame(enum Reason);// 0x3711bd4

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0xc4, Size: 12]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	void ResetVisibleLevels();// 0x3b8affc
	void OutSetWorldAlwaysVisible(int SetLoadType);// 0x3b8af84
	void OutSetLevelVisibleInfo(Vector[] Center, float[] VisibleRadius);// 0x3b8ad10

--------------------------------
Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig[] AnimalGroupRespawnConfig;//[Offset: 0xc4, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0x148, Size: 8]

--------------------------------
Class: AnimalGroupRespawnConfig
	enum AnimalType;//[Offset: 0x0, Size: 1]
	AnimalGroupRespawnNumProbability[] AnimalGroupRespawnNumProbability;//[Offset: 0x4, Size: 12]
	float NoBlueCircleRadius;//[Offset: 0x10, Size: 4]
	float CheckPlayerRadius;//[Offset: 0x14, Size: 4]
	float EndRespawnTime;//[Offset: 0x18, Size: 4]
	int TryFindSpawnLocNum;//[Offset: 0x1c, Size: 4]
	FString[] ValidTraceActorIncludeName;//[Offset: 0x20, Size: 12]
	Vector AnimalGenerateOffset;//[Offset: 0x2c, Size: 12]
	class STAnimalCharacter* AnimalCharacterClass;//[Offset: 0x38, Size: 40]

--------------------------------
Class: AnimalGroupRespawnNumProbability
	uint32 AnimalNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalCharacter.STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	AnimalStateMutual[] AnimalStateMutuals;//[Offset: 0xd7c, Size: 12]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xd8c, Size: 4]
	InterpMovementComponent* InterpMovement;//[Offset: 0xd90, Size: 4]
	WidgetComponent* AnimalInfoWidget;//[Offset: 0xd94, Size: 4]
	Vector RelativeLocation;//[Offset: 0xd98, Size: 12]
	class UserWidget* WidgetClass;//[Offset: 0xda4, Size: 4]
	bool bUseMediumRegionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 1]
	AnimalAnimListComponent* _AnimListComponent;//[Offset: 0xdac, Size: 4]
	STAnimalAnimInstance* _AnimInstance;//[Offset: 0xdb0, Size: 4]
	ProduceDropItemComponent* ProduceDropItemComponent;//[Offset: 0xdb4, Size: 4]
	int AnimalGroupID;//[Offset: 0xdb8, Size: 4]
	enum AnimalType;//[Offset: 0xdc6, Size: 1]
	<enum,float> AnimalStateSpeeds;//[Offset: 0xdc8, Size: 60]
	float HearRadius;//[Offset: 0xe04, Size: 4]
	bool bAttackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe08, Size: 1]
	SkeletalMesh*[] RandomMeshs;//[Offset: 0xe0c, Size: 12]
	MaterialInterface*[] RandomMaterials;//[Offset: 0xe18, Size: 12]
	delegate CustomObjectEvent;//[Offset: 0xe24, Size: 12]
	ParticleSystem* FootPrintRes;//[Offset: 0xe30, Size: 4]
	ParticleSystemComponent* FootPrintParticleSys;//[Offset: 0xe34, Size: 4]
	FName AttachedSocket;//[Offset: 0xe38, Size: 8]
	float MovementTickInterval;//[Offset: 0xe40, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0xe44, Size: 4]
	delegate OnAnimalChangeAnimParam;//[Offset: 0xe48, Size: 12]
	void ShowFootPrintEffect(bool IsEnabled);// 0x38a67a4
	void SetExtendData(FString Key, int Value);// 0x38a6600
	void OnRep_IdleBlendSpaceValue();// 0x38a65ec
	void LeaveState(enum State);// 0x38a6574
	bool HasState(enum State);// 0x38a64f4
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x38a6424
	WeatherDetailStatus GetCurrentWeatherStatus();// 0x38a63dc
	bool EnterState(enum State);// 0x38a635c
	void DisappearOnDeath();// 0x38a6340
	void ClearOnDeath(Controller* EventInstigator, int DamageType);// 0x361ede4
	void BeforeDestroyed();// 0x38a6324

--------------------------------
Class: STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xcc8, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xccc, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xcd0, Size: 4]
	float SensedRadius;//[Offset: 0xcd4, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xcd8, Size: 4]
	float HeardRadius;//[Offset: 0xcdc, Size: 4]
	float DelayHideDuration;//[Offset: 0xce0, Size: 4]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce4, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce5, Size: 1]
	Vector HurtDir;//[Offset: 0xce8, Size: 12]
	float HurtDistance;//[Offset: 0xcf4, Size: 4]
	float HurtResetDefaultTime;//[Offset: 0xcf8, Size: 4]
	StateMutual[] StateMutuals;//[Offset: 0xd04, Size: 12]
	delegate StateEnterEvent;//[Offset: 0xd10, Size: 12]
	delegate StateLeaveEvent;//[Offset: 0xd1c, Size: 12]
	delegate OnDeath;//[Offset: 0xd3c, Size: 12]
	SimpleDamageRepData SimpleDamageRepData;//[Offset: 0xd48, Size: 24]
	int[] randomIndexes;//[Offset: 0xd60, Size: 12]
	SimpleAnimListBaseComponent* AnimListComponent;//[Offset: 0xd6c, Size: 4]
	STExtraSimpleAnimInstanceBase* AnimInstance;//[Offset: 0xd70, Size: 4]
	byte NetRelevantType;//[Offset: 0xd74, Size: 1]
	void SetNetRelevantType(byte InType);// 0x3a397d4
	void OnRep_SimpleDamageData();// 0x3a397c0
	void DisappearOnDeath();// 0x38a6340
	void CurrentStatesRemove(int State);// 0x3a39740
	void CurrentStatesAdd(int State);// 0x3a396c0
	void ClearOnDeath(Controller* EventInstigator, int DamageType);// 0x361ede4
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3a393e4
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3a3908c
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3a38db0
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3a38ad4
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3a387b0
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3a384d4
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3a381f8
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3a37edc
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3a37b84
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4a51734
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4a51734
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3a37a10

--------------------------------
Class: AnimalStateMutual
	enum state1;//[Offset: 0x0, Size: 1]
	enum state2;//[Offset: 0x1, Size: 1]

--------------------------------
Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxMoveSpeed;//[Offset: 0x12c, Size: 4]
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float ScalePower;//[Offset: 0x134, Size: 4]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 1]
	float AvoidanceWeight;//[Offset: 0x13c, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x140, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x144, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x148, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x14c, Size: 4]
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x154, Size: 12]
	Character* CharacterOwner;//[Offset: 0x160, Size: 4]
	int AvoidanceUID;//[Offset: 0x174, Size: 4]

--------------------------------
Class: StateMutual
	int state1;//[Offset: 0x0, Size: 4]
	int state2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleDamageRepData
	float Damage;//[Offset: 0x0, Size: 4]
	float CurrentHeath;//[Offset: 0x4, Size: 4]
	bool IsFatalHealthCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Pawn* DamageInstigatorPawn;//[Offset: 0xc, Size: 4]
	Pawn* DamageReceiver;//[Offset: 0x10, Size: 4]
	int NetCounter;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x17c, Size: 12]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x188, Size: 4]
	<int,float> moveAnimSpeed;//[Offset: 0x18c, Size: 60]
	float PlayMoveDeathMinimumDist;//[Offset: 0x1c8, Size: 4]
	delegate OnAnimLoadedFinished;//[Offset: 0x1cc, Size: 12]
	void SortAnimations();// 0x386f6bc
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x3570244
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x386f438
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x386f374

--------------------------------
Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AsyncLoadAnimParams

--------------------------------
Class: STExtraSimpleAnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacterBase* OwnerCharacter;//[Offset: 0x300, Size: 4]
	FString OwnerClassPath;//[Offset: 0x314, Size: 12]
	bool EnableAdjustFloorNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	Rotator AdjustFloorRot;//[Offset: 0x330, Size: 12]
	float AdjustFloorDelta;//[Offset: 0x33c, Size: 4]
	void ResetAnimState();// 0x38a5ab8
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsHeadShotDamage);// 0x38a5814
	void OnLeaveState(int State);// 0x38a5794
	void OnEnterState(int State);// 0x377def4
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x38a5508
	void CacheAnimState(float DeltaSeconds);// 0x377dbd4
	void CacheAnimDataList(bool ForceRefreshVar);// 0x38a5480

--------------------------------
Class: AnimalAnimListComponent.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimalAnimData[] AnimalAnimDatas;//[Offset: 0x1e8, Size: 12]
	AnimalMoveAnimSpeed[] AnimalMoveAnimSpeeds;//[Offset: 0x1f4, Size: 12]

--------------------------------
Class: AnimalAnimData
	enum PoseType;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AnimalMoveAnimSpeed
	enum PoseType;//[Offset: 0x0, Size: 4]
	float Speed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalAnimInstance.STExtraSimpleAnimInstanceBase.AnimInstance.Object
	bool b_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool b_Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	bool b_Trot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 1]
	bool b_Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 1]
	float f_MoveRate;//[Offset: 0x348, Size: 4]
	Vector v_HitVector;//[Offset: 0x34c, Size: 12]
	bool b_IsFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	int RandomIdleBlendSpaceIndex;//[Offset: 0x35c, Size: 4]
	AnimSequence* A_Idle;//[Offset: 0x360, Size: 4]
	AnimMontage* A_Idle_Arder;//[Offset: 0x364, Size: 4]
	AnimSequence* A_MoveAnim_Walk;//[Offset: 0x368, Size: 4]
	AnimSequence* A_MoveAnim_Trot;//[Offset: 0x36c, Size: 4]
	AnimSequence* A_MoveAnim_Run;//[Offset: 0x370, Size: 4]
	BlendSpace* A_HitAnim;//[Offset: 0x374, Size: 4]
	AnimMontage* A_DeadAnim;//[Offset: 0x378, Size: 4]
	AnimMontage* A_FearAnim;//[Offset: 0x37c, Size: 4]
	AnimMontage* A_CuteAnim;//[Offset: 0x380, Size: 4]
	BlendSpace1D* A_Random_Idle;//[Offset: 0x384, Size: 4]
	void ResetAnimState();// 0x38a5ab8
	void OnUpdateAnimalAnimParam();// 0x38a5aa4
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsPointDamage);// 0x38a5814
	void OnLeaveState(int State);// 0x38a5794
	void OnEnterState(int State);// 0x377def4
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x38a5508
	void CacheAnimState(float DeltaSeconds);// 0x377dbd4
	void CacheAnimDataList(bool ForceRefreshVar);// 0x38a5480

--------------------------------
Class: ProduceDropItemComponent.LuaActorComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0x154, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0x158, Size: 144]
	int ProduceID;//[Offset: 0x1e8, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x1ec, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x1f4, Size: 12]
	int GridStep;//[Offset: 0x200, Size: 4]
	int StartAngle;//[Offset: 0x204, Size: 4]
	int TotalAngle;//[Offset: 0x208, Size: 4]
	bool bFannedDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	float AngleInterval;//[Offset: 0x210, Size: 4]
	int RadiusIncrement;//[Offset: 0x214, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x218, Size: 4]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	int[] DropPlanIDList;//[Offset: 0x220, Size: 12]
	int[] NightDropPlanIDList;//[Offset: 0x22c, Size: 12]
	int[] DayDropPlanIDList;//[Offset: 0x238, Size: 12]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x244, Size: 4]
	float TombBoxLifeTime;//[Offset: 0x258, Size: 4]
	bool bCheckCriticalDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	AkAudioEvent* CriticalDropAudioEvent;//[Offset: 0x260, Size: 4]
	int CriticalDropCheckPercent;//[Offset: 0x264, Size: 4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x268, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x2a0, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x2d0, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	float startHeight;//[Offset: 0x2d8, Size: 4]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x2e0, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x2e8, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x2f4, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x2f8, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x2fc, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x300, Size: 4]
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x308, Size: 12]
	float TraceGroundPointZOffset;//[Offset: 0x314, Size: 4]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool bHideDeadTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	bool bUseProducerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 1]
	int OpenDropGroundEffect;//[Offset: 0x31c, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x320, Size: 4]
	float MaxTraceDist;//[Offset: 0x324, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	delegate OnItemSpawned;//[Offset: 0x32c, Size: 12]
	delegate OnFinalEffectiveDropRulesGenerated;//[Offset: 0x338, Size: 12]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x344, Size: 4]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	void StartDropWithDropDataByLocation(out const DropPropData[] PropData, Vector Location);// 0x3816db8
	void StartDropWithDropData(Actor* DeadCharacter, Controller* Killer, out const DropPropData[] PropData);// 0x3816c64
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x3816b18
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x3816a5c
	void SetProduceID(int ProduceID);// 0x38169e8
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x3816884
	void SetDropPlanIDList(out int[] IDList);// 0x38167b8
	void SetDropItemLifeSpan(int ItemTime);// 0x3816740
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x3816550
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x3816310
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x38161a0
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x3816074
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x3815fdc
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x3815ec4
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x3815d68
	int GetCountStrNum(FString CountStr);// 0x3746630
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x3815c14
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x3815ac0
	void FannedDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x3815950
	PlayerTombBox* DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset, bool bIsAutoExpand, bool bFixBoxName);// 0x38155d8
	void DropToTombBox(out const PickUpItemData[] PropData, Character* KillerPawn, Character* DeadPawn);// 0x3815498
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x3815380
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x38150d0
	void DropToCommonTreasureBox(Actor* Producer);// 0x37e9120
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, FString BoxName, enum BoxType, CommonTreasureBox* CommonTreasureBox);// 0x3814df0
	void DropOutPropsNearActor(out const DropPropData[] PropDataList, Actor* StartActor);// 0x3814ccc
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn);// 0x3814b6c
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList, out DropItemConfig[] FinalEffectiveDropRules);// 0x381499c
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanID);// 0x3814880

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	bool bUseClientSelfLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	Vector2D RangeHigh;//[Offset: 0xc8, Size: 8]
	Vector CustomStartOffset;//[Offset: 0xd0, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0xe0, Size: 4]
	float CustomGravity;//[Offset: 0xe4, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0xe8, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0xec, Size: 4]
	float ParticleScale;//[Offset: 0xf0, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0xf8, Size: 40]
	ParticleSystem* RareDropTailsParticle;//[Offset: 0x120, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x148, Size: 4]
	ParticleSystem* RareDropTailsParticleSystem;//[Offset: 0x14c, Size: 4]
	<int> RareDropItemSet;//[Offset: 0x150, Size: 60]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x190, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x198, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x1c0, Size: 4]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x1c4, Size: 12]
	CurveFloat* AnimCurve;//[Offset: 0x1d0, Size: 4]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID, bool bRare);// 0x36b4dd8
	void OnDropGroundLoadFinsh();// 0x36b4dc4
	void HandleMonsterRecycled(STExtraSimpleCharacter* Monster);// 0x36b4d4c
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x36b4bfc
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x36b4af8

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 4]
	float GroupTime;//[Offset: 0x4, Size: 4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float DropDuration;//[Offset: 0x4, Size: 4]
	float CurrentTime;//[Offset: 0x8, Size: 4]
	float DropStartSpeed;//[Offset: 0xc, Size: 4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 4]
	float DelayStartTime;//[Offset: 0x14, Size: 4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 4]
	Vector StartPos;//[Offset: 0x1c, Size: 12]
	Vector EndPos;//[Offset: 0x28, Size: 12]
	Actor* TargetActor;//[Offset: 0x34, Size: 8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x3c, Size: 4]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DropPropData
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
	int DropMode;//[Offset: 0x8, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int KeyID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 4]
	int ItemDropRuleID;//[Offset: 0x4, Size: 4]
	int RandomCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CommonTreasureBox.PlayerTombBox.LuaActor.Actor.Object
	void RegisterToCurveAnimComponent();// 0x367c264

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x310, Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x354, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x358, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x374, Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x3b0, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x3cc, Size: 28]
	float ServerElapsedTime;//[Offset: 0x3e8, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3f1, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3f4, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x400, Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x41c, Size: 4]
	enum UICountDownType;//[Offset: 0x432, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 1]
	void StartTransition();// 0x36bebdc
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x36beb64
	void RPCRequireControl();// 0x36beb50
	void RPCRequire();// 0x36beb3c
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x36beabc
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x357c654
	void ReinitInDemoReplay();// 0x36be850
	void RefreshWeatherPredictionUI();// 0x36beaa8
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x36bea1c
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x36be990
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x36be904
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x36be878
	void OnRep_NextWeatherCountDownTime();// 0x36be83c
	void OnRep_ControllerDataForReplay();// 0x36be864
	void OnRep_ControllerData();// 0x36be850
	void OnRep_bEnableWeatherPredictionUI();// 0x36be83c
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x4a51734
	void HandleClientHasReactivated();// 0x36be828
	void GotoSpecificWeather(int WeatherIndex);// 0x36be7b0
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x36be6d4
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x36be640
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x36be5c0
	float GetInProgressElapsedTimeSecWithWeather();// 0x36be598
	float GetGlobalWeatherSystemTimeOnServer();// 0x36be570
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x36be528
	void ForceStopDynamicWeatherChangeOnServer();// 0x36be514
	void ForceStartNextWeatherChangeOnServer();// 0x36be500
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x36be450
	void ClientGotoSpecificWeather(int WeatherIndex);// 0x36be3d8

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24, Size: 12]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30, Size: 12]
	float TimeMultiplier;//[Offset: 0x3c, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xc4, Size: 12]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xd0, Size: 12]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xdc, Size: 12]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xe8, Size: 12]
	delegate WeatherRecover;//[Offset: 0xf4, Size: 12]
	enum DynamicWeatherType;//[Offset: 0x100, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0x104, Size: 4]
	CurveFloat* LightCurve;//[Offset: 0x108, Size: 4]
	float TargetLightValue;//[Offset: 0x10c, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x114, Size: 4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x118, Size: 4]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x11c, Size: 4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x120, Size: 4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x124, Size: 4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x128, Size: 4]
	float UINotifyTimeBeforeStart;//[Offset: 0x12c, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x130, Size: 12]
	int ChangeStartUINotifyID;//[Offset: 0x13c, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x140, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x144, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x148, Size: 4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x14c, Size: 4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x150, Size: 4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x158, Size: 28]
	float RuningDirection;//[Offset: 0x174, Size: 4]
	float RuningTime;//[Offset: 0x178, Size: 4]
	float LerpTotalTime;//[Offset: 0x17c, Size: 4]
	FString WeatherName;//[Offset: 0x180, Size: 12]
	DirectionalLight* MainLight;//[Offset: 0x18c, Size: 4]
	SkyLight* SkyLight;//[Offset: 0x190, Size: 4]
	ExponentialHeightFog* Fog;//[Offset: 0x194, Size: 4]
	WeatherObject ObjectValues;//[Offset: 0x198, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x200, Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x26c, Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x2d4, Size: 12]
	void UINotifyCallbackOnServer();// 0x36bd41c
	void OnUserQualitySettingChanged(int renderlevel);// 0x3559fb4

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	AirDropPathData3D AirDropPathData;//[Offset: 0x450, Size: 60]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	Vector BlueCircle;//[Offset: 0x490, Size: 12]
	Vector WhiteCircle;//[Offset: 0x49c, Size: 12]
	float CirclePain;//[Offset: 0x4a8, Size: 4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	Vector AirAttackArea;//[Offset: 0x4b0, Size: 12]
	delegate OnPlayerDamageInfo;//[Offset: 0x4bc, Size: 12]
	delegate OnSimpleCharacterDamageInfo;//[Offset: 0x4c8, Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x4d4, Size: 12]
	delegate OnHideCircle;//[Offset: 0x4e0, Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x4ec, Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x4f8, Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x504, Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x510, Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x51c, Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x528, Size: 12]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x534, Size: 12]
	delegate STExtraCharacterDestroyed;//[Offset: 0x540, Size: 12]
	int PlayerNum;//[Offset: 0x558, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x560, Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x56c, Size: 12]
	delegate OnGameEnd;//[Offset: 0x578, Size: 12]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x586, Size: 1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x587, Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58b, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58e, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58f, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x592, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x593, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x594, Size: 12]
	int TrainingCountdownTimer;//[Offset: 0x5a0, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x5a8, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6, Size: 1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x5b8, Size: 12]
	uint64 DSOptimGrayPublishFlags;//[Offset: 0x600, Size: 8]
	delegate OnDSOptimGrayPublishFlagsChanged;//[Offset: 0x608, Size: 12]
	delegate OnDSSwitchChanged;//[Offset: 0x614, Size: 12]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x622, Size: 1]
	FString RoomType;//[Offset: 0x624, Size: 12]
	int nSignalGunEffectId;//[Offset: 0x630, Size: 4]
	byte nServerZoneId;//[Offset: 0x634, Size: 1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x676, Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x677, Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x67c, Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x680, Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x684, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x688, Size: 4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68e, Size: 1]
	delegate OnAirAttack;//[Offset: 0x690, Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x69c, Size: 12]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x6a8, Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5, Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b6, Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x6b8, Size: 12]
	FName[] EnableMapLayers;//[Offset: 0x6c4, Size: 12]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x6d0, Size: 4]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x6d4, Size: 4]
	class ModAdapter* ModAdapterClass;//[Offset: 0x6d8, Size: 4]
	ModAdapter* ModAdapter;//[Offset: 0x6dc, Size: 4]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x6e4, Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x6e8, Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x6f0, Size: 48]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x720, Size: 4]
	bool bIsShowCircleWarningTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	int ReadyStateTime;//[Offset: 0x730, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x750, Size: 12]
	delegate RetriveDataAfterReconnectingDelegate;//[Offset: 0x75c, Size: 12]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x76c, Size: 12]
	int CurCircleWave;//[Offset: 0x778, Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77d, Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x780, Size: 4]
	FName GameModeState;//[Offset: 0x798, Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	float timeFromLessen;//[Offset: 0x7a4, Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x7a8, Size: 12]
	Vector CircleLessenTo;//[Offset: 0x7b4, Size: 12]
	float timeForLessen;//[Offset: 0x7c0, Size: 4]
	byte CurCircleStatusInfo;//[Offset: 0x7d0, Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x7d4, Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x7d8, Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x7dc, Size: 4]
	enum CurAirAttackType;//[Offset: 0x7e0, Size: 1]
	int CurAirAttackWave;//[Offset: 0x7e4, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x7ec, Size: 4]
	float ExtraRadius;//[Offset: 0x7f0, Size: 4]
	int AlivePlayerNum;//[Offset: 0x7f4, Size: 4]
	int AliveTeamNum;//[Offset: 0x7f8, Size: 4]
	int NoneAIGameTime;//[Offset: 0x7fc, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x800, Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x80c, Size: 12]
	delegate OnGetPlayerLandAreaList;//[Offset: 0x818, Size: 12]
	delegate OnUICustomBehavior;//[Offset: 0x824, Size: 12]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x830, Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x834, Size: 12]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0x840, Size: 136]
	enum GameModeType;//[Offset: 0xae8, Size: 1]
	enum GameModeConfigType;//[Offset: 0xae9, Size: 1]
	enum GameModeConfigSubType;//[Offset: 0xaea, Size: 1]
	enum GameModeSubType;//[Offset: 0xaeb, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0xaec, Size: 4]
	int MaxPlayersPerGroupInReadyState;//[Offset: 0xaf0, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0xaf4, Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01, Size: 1]
	int WeatherId;//[Offset: 0xb0c, Size: 4]
	FString WeatherLevel;//[Offset: 0xb10, Size: 12]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1c, Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0xb2c, Size: 4]
	float WeatherPhaseIndex;//[Offset: 0xb30, Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0xb34, Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0xb40, Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0xb4c, Size: 12]
	enum CurDynamicWeatherState;//[Offset: 0xb58, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xb5c, Size: 60]
	float InviteCountDownTime;//[Offset: 0xb98, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xb9c, Size: 12]
	Vector[] CircleArray;//[Offset: 0xba8, Size: 12]
	GameDataMining GameDataMining;//[Offset: 0xbb4, Size: 60]
	uint64 GameID;//[Offset: 0xbf0, Size: 8]
	FString GameModeID;//[Offset: 0xbf8, Size: 12]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xc04, Size: 12]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xc10, Size: 12]
	Character* CurCastActorMsgOwner;//[Offset: 0xc1c, Size: 8]
	float StartFlyTime;//[Offset: 0xc24, Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xc28, Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xc30, Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xc38, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc51, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc52, Size: 1]
	int EnableNewStateMachine;//[Offset: 0xc54, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xc5c, Size: 4]
	float BroadcastClientDistance;//[Offset: 0xc60, Size: 4]
	int[] FinalWinTeams;//[Offset: 0xc7c, Size: 12]
	uint32[] FinalWinPlayers;//[Offset: 0xc88, Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xc94, Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc99, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xc9c, Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xca8, Size: 12]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb5, Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb6, Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb7, Size: 1]
	FString GuideImageName;//[Offset: 0xcb8, Size: 12]
	FString GuideLuaTableName;//[Offset: 0xcc4, Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0xcd0, Size: 12]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcdc, Size: 1]
	float PlayerNoOperationTime;//[Offset: 0xce0, Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0xce4, Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0xcec, Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 1]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0xcf8, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xcfc, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xd08, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xd14, Size: 12]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xd20, Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xd30, Size: 4]
	class Actor* PreloadPoolActorClass;//[Offset: 0xd38, Size: 40]
	class Actor* CommonPreloadPoolActorClass;//[Offset: 0xd60, Size: 40]
	FString CommonPrePoolActorPath;//[Offset: 0xd88, Size: 12]
	<FString,ActorExtraComponents> ActorExtraComponents;//[Offset: 0xd94, Size: 60]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0xdd0, Size: 4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0xdd4, Size: 4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd9, Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0xddc, Size: 12]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde8, Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0xdec, Size: 12]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf8, Size: 1]
	FString FServerStartTime;//[Offset: 0xdfc, Size: 12]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08, Size: 1]
	uint32 ServerStartTimestamp;//[Offset: 0xe0c, Size: 4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0xe10, Size: 12]
	FString MainWeaponTableName;//[Offset: 0xe1c, Size: 12]
	class Object[] PlaneAvatarClassArray;//[Offset: 0xe28, Size: 12]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0xe48, Size: 60]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0xe84, Size: 60]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0xec0, Size: 4]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0xec4, Size: 4]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec9, Size: 1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeca, Size: 1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecb, Size: 1]
	int PlayerAddonCount;//[Offset: 0xecc, Size: 4]
	STExtraBaseCharacter*[] DyingCharacters;//[Offset: 0xed8, Size: 12]
	bool bEnableCarryAllCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee4, Size: 1]
	MapUIMarkManager* MarkMgr;//[Offset: 0xee8, Size: 4]
	FString RenderTargetMgrClassPath;//[Offset: 0xeec, Size: 12]
	WidgetToRenderTarget* RenderTargetMgr;//[Offset: 0xef8, Size: 4]
	GameStateWeaponRule WeaponRule;//[Offset: 0xefc, Size: 32]
	bool bHasUnderEarthWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1c, Size: 1]
	<uint32,EmotePlayer> LocalEmotePlayerList;//[Offset: 0xf20, Size: 60]
	ReplayRecordInfo* ReplayRecordInfo;//[Offset: 0xf5c, Size: 4]
	ParallelWorldDebugSummary ParallelWorldDebugSummary;//[Offset: 0xf60, Size: 20]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x4a51734
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x4a51734
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x39926ac
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x39924a0
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x3992118
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x3991f54
	STExtraPlayerState* TryGetOneRealPlayerState();// 0x3991f2c
	STExtraBaseCharacter* TryGetCharacterByPlayerKey(FString PlayerKey);// 0x3991dcc
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x3991ce8
	void SimulateAirAttackOver(int waveIndex);// 0x3991c34
	void ShowGameTips(int PlayerKey, int TipsID, FString Params);// 0x3991af0
	void SetTagCulling(bool IsUse);// 0x363b278
	void SetStandAloneIDSwitch(const int SwitchId, const FString bOpen);// 0x3991950
	void SetServerStartTime(uint32 nServerStartTime);// 0x39918d8
	void SetSendStartFlow(uint32 PlayerKey);// 0x3991860
	void SetSendEndFlow(uint32 PlayerKey);// 0x39917e8
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x39916ec
	static void SetOnGameStateEndPlay(delegate InOnGameStateEndPlay);// 0x3991650
	static void SetOnGameStateBeginPlay(delegate InOnGameStateBeginPlay);// 0x39915b4
	void SetIsLowMatch(int nClientType);// 0x399153c
	void SetCustomRoute(out const Vector2D StartPoint, out const Vector2D EndPoint);// 0x3991464
	void SetCurAirAttackWave(int AirAttackWave);// 0x39913ec
	void SetCurAirAttackType(enum airattacktype);// 0x3991374
	void SetCircleLessening(bool IsLessing);// 0x39912f8
	void SetCircleInfo(GetCircleInfo ReConnectInfo);// 0x39911ec
	void SetAvatarDownloadInBattleClientSwitch(bool bOpen);// 0x399116c
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x39910f4
	void ServerRemoteDestroyAllActor();// 0x39910e0
	void ServerRemoteDestroyActor(int SingleId);// 0x3991068
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x3990f0c
	void RPC_Client_RemoteDestroyAllActor();// 0x3990ef0
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x3990e70
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x3990cdc
	void RoomTypeChanged();// 0x3990cc0
	DeathReplayHitInfo QueryHitData(FString QueryKey, FString HitPlayerKey, float CollectMinimumDuration, int WeaponId);// 0x4a51734
	void PlayPawnActive(FString PlayerKey, Actor* PlayerCharacter);// 0x3990b1c
	void OverrideLevelScriptActorContent(LevelScriptActor* CurrentLevelScriptActor);// 0x3990a9c
	void OnSimpleCharacterTakeDamage(STExtraBaseCharacter* Attacker, Actor* DamageCauser, STExtraSimpleCharacter* VictimSimpleCharacter, float Damage, out const DamageEvent DamageEvent, bool bIsFatalHealthCost, bool IsHeadshot);// 0x3990844
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x4a51734
	void OnRep_WeatherStateChanged();// 0x3990830
	void OnRep_WeatherLevel();// 0x399081c
	void OnRep_WeatherId();// 0x3990808
	void OnRep_VisualFieldFeatureParam();// 0x39907f4
	void OnRep_VeteranRecruitListUpdate();// 0x39907e0
	void OnRep_UpassInfoList();// 0x39907cc
	void OnRep_StartFlyTime();// 0x39907b8
	void OnRep_RoomType();// 0x39907a4
	void OnRep_ResetWeatherPlaySpeed();// 0x3990790
	void OnRep_ReplicatedWorldTimeSeconds();// 0x36ad318
	void OnRep_ReadyStateTime();// 0x3824af4
	void OnRep_ReadyStateCountingDown();// 0x3592f9c
	void OnRep_PlayerNumChange();// 0x3592f9c
	void OnRep_PlayerAddonCount();// 0x3990774
	void OnRep_MarkSyncData();// 0x3990760
	void OnRep_IsTrainingMode();// 0x399074c
	void OnRep_IsShowDeadBox();// 0x3990738
	void OnRep_IsOpenDuelMode();// 0x3592f9c
	void OnRep_IsFPPMode();// 0x3990724
	void OnRep_IsDark();// 0x3990710
	void OnRep_GameTerminatorPlayerKey();// 0x3592f9c
	void OnRep_GameModeType();// 0x39906fc
	void OnRep_GameModeSubType();// 0x39906e8
	void OnRep_GameModeState();// 0x39906cc
	void OnRep_GameModeFeatureSet();// 0x3592f9c
	void OnRep_FinalWinTeams();// 0x3592f9c
	void OnRep_FinalWinPlayers();// 0x3592f9c
	void OnRep_DynamicWeatherState();// 0x39906b8
	void OnRep_DSSwitch();// 0x39906a4
	void OnRep_DSOptimGrayPublishFlags();// 0x3990690
	void OnRep_CircleWaveChanged();// 0x3990674
	void OnRep_CircleArray();// 0x3592f9c
	void OnRep_AliveTeamNum();// 0x3990660
	void OnRep_AlivePlayerNum();// 0x399064c
	void OnRep_AirDropPathData();// 0x3990638
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x3824a08
	void OnPlaneAvatarAsyncLoadComplete(out class Object[] ClassArrays);// 0x399056c
	void OnGameStateEndPlay__DelegateSignature(byte EndPlayReason);// 0x4a51734
	void OnGameStateBeginPlay__DelegateSignature(GameState* GameState);// 0x4a51734
	void OnGameModeDisplayNameChange();// 0x3990558
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x38244f0
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage, out const DamageEvent DamageEvent, float DamageBeforeCalArmor, bool bIsFatalHealthCost, Actor* DamageCauser, bool bIsNearDeathHealthCost);// 0x382424c
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x399049c
	bool IsSendStartFlow(uint32 PlayerKey);// 0x399041c
	bool IsSendEndFlow(uint32 PlayerKey);// 0x399039c
	bool IsRevivalGame();// 0x3990374
	bool IsPVEMode();// 0x399034c
	bool IsNoCircleInfo();// 0x3990324
	bool IsMapUseTeamPattern();// 0x39902f4
	bool IsInWhiteCircle(out const Vector Pos);// 0x3990268
	bool IsInNight();// 0x362cb4c
	bool IsInBlueCircleByCircleMgr(Actor* _actor);// 0x39901e8
	bool IsInBlueCircle(out const Vector Pos);// 0x399015c
	bool IsFeatureSupported(enum SubSystemType);// 0x39900d4
	bool IsEnableObjectPool();// 0x397ef04
	bool IsEnableDamageInfo();// 0x3877ad0
	bool IsCreativeEditor();// 0x39900a4
	FString GetWeatherLevelName();// 0x398ffe4
	int GetWeatherID();// 0x398ffbc
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x398ff94
	int GetServerStartUnixTimestamp();// 0x398ff6c
	FString GetServerStartTime();// 0x398feac
	float GetRepServerWorldTimeSeconds();// 0x398fe84
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x398fe20
	int GetPVEWeatherPhaseIndex();// 0x398fdf8
	STExtraPlayerState* GetPlayerStateByUID(uint64 PlayerUID);// 0x398fd74
	STExtraPlayerState* GetPlayerStateByPlayerName(FString PlayerName);// 0x398fcb0
	STExtraPlayerState* GetPlayerStateByPlayerKey(uint32 PlayerKey);// 0x398fc30
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x398fc08
	bool GetIsReadyStateReport();// 0x398fbd8
	bool GetIsCreative();// 0x362ca8c
	FName GetGameModeState();// 0x398fb98
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x398fb70
	FString GetDSSwitchValueFastWithCache(const int InSwitchId);// 0x398fa68
	FString GetDSSwitchValue(const int InSwitchId);// 0x398f960
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x398f938
	enum GetCurWeatherState();// 0x398f910
	enum GetCurDynamicWeatherState();// 0x398f8e8
	int GetCurCircleWave();// 0x398f8cc
	byte GetCurCircleState();// 0x398f88c
	int GetCurCircleIndex();// 0x398f864
	GetCircleInfo GetCircleStateInfo();// 0x398f7d8
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x398f72c
	MarkSyncData[] GetAllMarkLocalData(byte _TYPE);// 0x398f680
	int GetAlivePlayerNum();// 0x398f658
	AirDropPathData3D GetAirDropPathData();// 0x398f4c0
	STExtraBaseCharacter* FindCharacterByPlayerKey(FString PlayerKey);// 0x398f360
	void ExecuteCVarConfig();// 0x398f34c
	void EnableObjectPool(bool bEnable);// 0x398f2cc
	void DSSwitchChangeDelegate__DelegateSignature();// 0x4a51734
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x398f208
	void ClearAirDropPathData();// 0x398f1f4
	bool CheckIsLowMatch();// 0x398f1cc
	void CheckInitLuaRemoteEvent();// 0x398f1b8
	bool CheckDSSwitchOpen(const int SwitchId);// 0x398f130
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x3892544
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x398f0b8
	void ChangeDynamicWeatherState(enum DayState);// 0x398f040
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x398ef38
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x398ed24
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x398eb58
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x398e98c
	void BroadcastTemporaryMessage(FString Message);// 0x398e8c8
	void BroadcastShowGameTips(int TipsID, FString Params);// 0x398e7c0
	void BroadcastLuaTipsBehaviorWithTime(FString BehaviorTag, int ID, FString Params1, FString Params2, float ControlTime);// 0x398e564
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x398e350
	void BroadcastEndCircle();// 0x398e2f4
	void BroadcastCustomLuaTipsBehavior(FString BehaviorTag, int ID, const byte[] ExpandDataContent);// 0x398e168
	void BroadcastCircleWaveOver(int Index);// 0x398e0b4
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain, bool IsCustomCircle);// 0x398dda0
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex, enum State);// 0x398db88
	void BroadcastAirAttackWarning(const Vector AirAttackAreaSrc, int waveIndex);// 0x398dacc
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackAreaSrc, int waveIndex);// 0x398d8f8
	void AsyncLoadResFinishCallback();// 0x398d8e4
	void AsyncLoadCommonResFinishCallback();// 0x398d8d0
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x3822bfc
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x3822b38
	void AddPveZombieGrenadeCount(int Value);// 0x398d858
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x398d7e0
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x3822830

--------------------------------
Class: UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x42c, Size: 12]
	FString DamageSearchTableName;//[Offset: 0x438, Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x416a924
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x416a7e8
	bool CheckDSSwitchOpen(const int SwitchId);// 0x398f130

--------------------------------
Class: LuaGameState.GameState.GameStateBase.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x3a0, Size: 60]
	FString LuaFilePath;//[Offset: 0x3dc, Size: 12]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x340, Size: 8]
	FName PreviousMatchState;//[Offset: 0x348, Size: 8]
	int ElapsedTime;//[Offset: 0x350, Size: 4]
	void OnRep_MatchState();// 0x668479c
	void OnRep_ElapsedTime();// 0x66848e0

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x1c, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector MapCenter;//[Offset: 0x2c, Size: 12]
	float Radius;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ViewMaskManager.Object
	enum ViewMaskTypeSetting;//[Offset: 0x1c, Size: 1]
	class Actor[] FilterActorClassList;//[Offset: 0x20, Size: 12]
	void SetViewMaskType(enum NewMaskType);// 0x3b54a60
	bool IsPlayerViewMaskValid(STExtraBaseCharacter* BaseCharacter);// 0x3b549e0
	void Init();// 0x3b549cc
	int ClearViewMaskForActor(Actor* MaskActor);// 0x3b5494c
	int ApplyViewMaskForPlayer(STExtraBaseCharacter* BaseCharacter);// 0x3b548cc
	int ApplyViewMaskForActorWithOwnerPlayer(Actor* MaskActor, STExtraBaseCharacter* BaseCharacter);// 0x3b54808

--------------------------------
Class: ModAdapter.Object
	Actor* SpawnPointLightActor(ModAdapterSpawnInfo SpawnInfo);// 0x3778570
	Actor* SpawnModActorByClass(class Actor ActorClass, out const Transform SpawnTransform, Pawn* Instigator, Actor* Owner);// 0x37783c0

--------------------------------
Class: ModAdapterSpawnInfo
	Actor* RelatedActor;//[Offset: 0x0, Size: 4]
	FName LightType;//[Offset: 0x8, Size: 8]
	Transform SpawnTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14, Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x18, Size: 12]
	class Character[] ExcludeCheckCharacterClass;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x50, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x58, Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x94, Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xd0, Size: 8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	int updateTime;//[Offset: 0xc, Size: 4]
	int upassLevel;//[Offset: 0x10, Size: 4]
	int upassScore;//[Offset: 0x14, Size: 4]
	int planeAvatarId;//[Offset: 0x18, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	FString iconUrl;//[Offset: 0x20, Size: 12]
	FString Nation;//[Offset: 0x2c, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38, Size: 52]
	int upassKeepBuy;//[Offset: 0x6c, Size: 4]
	int upassCurValue;//[Offset: 0x70, Size: 4]
	int pass_type;//[Offset: 0x74, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x78, Size: 4]
	FString PlayerUID;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24, Size: 12]
	GameWatchReport[] WatchReport;//[Offset: 0x30, Size: 12]

--------------------------------
Class: GameWatchReport
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	uint64 player_uid;//[Offset: 0x10, Size: 8]
	float total_time;//[Offset: 0x18, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: WatchFlow
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	byte CurrentInstanceCount;//[Offset: 0x100, Size: 1]
	byte CurrentLocalInstanceCount;//[Offset: 0x101, Size: 1]
	MarkDispatchAction[] ActionQueue;//[Offset: 0x104, Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0x110, Size: 12]
	MarkDispatchAction[] FramingDispatchMarkQueue;//[Offset: 0x11c, Size: 12]
	int MarkCountProcessed;//[Offset: 0x128, Size: 4]
	int OverflowFrameCount;//[Offset: 0x12c, Size: 4]
	void SetMarkCountDown(out MarkDispatchAction Data, float CountDown);// 0x3768a94
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x3768a1c
	byte GenerateNewLocalInstanceID();// 0x37689f4
	byte GenerateNewInstanceID();// 0x37689d0
	void DispatchMarkData(MarkDispatchAction Data);// 0x3768818
	void ClearMarkDataByTypeID(int TypeId, enum MarkTypeIDClearType, STExtraPlayerState* WeakPlayerState);// 0x3768718

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4, Size: 68]
	float DispatchDelayTime;//[Offset: 0x48, Size: 4]
	float RangeRad;//[Offset: 0x4c, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x50, Size: 8]
	float DispatchTime;//[Offset: 0x58, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x60, Size: 16]

--------------------------------
Class: ActorExtraComponents
	class ActorComponent[] BPComponents;//[Offset: 0x0, Size: 12]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0xc4, Size: 60]
	float EventCDTime;//[Offset: 0x100, Size: 4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x3b938d0

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c, Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28, Size: 12]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x36f099c
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x36f091c
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x36f0848
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x36f07d0
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x4a51734
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x4a51734

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0xc4, Size: 12]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0xd0, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0xd4, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	enum FieldOfViewNotificationStatus;//[Offset: 0xe0, Size: 1]
	bool IsNotificationWorking();// 0x36ed8e4
	static int IsGlobalDebugLineTraceDrawn();// 0x36ed8b8
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x4a51734
	enum GetFieldOfViewNotificationStatus();// 0x36ed890

--------------------------------
Class: GameModeCVarConfigItem
	FString Key;//[Offset: 0x0, Size: 12]
	FString Value;//[Offset: 0xc, Size: 12]

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x328, Size: 12]
	float DamageFieldUpdatePeriod;//[Offset: 0x38c, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x390, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x3a93f04
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x3a93df4
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x3663a7c
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* Receiver, bool RebuildSphere);// 0x3a93c5c

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 4]
	SimpleCollisionSphere Sphere;//[Offset: 0x4, Size: 16]
	float PassedTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	float Radius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: MapUIMarkManager.LuaActorComponent.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0x17c, Size: 12]
	class ScreenMarkManager* ScreenMarkMgrClass;//[Offset: 0x188, Size: 4]
	class ScreenRotationMarkManager* ScreenRotationMarkMgrClass;//[Offset: 0x18c, Size: 4]
	MapUIBase* m_pMiniMap;//[Offset: 0x190, Size: 4]
	MapUIBase* m_pEntireMap;//[Offset: 0x194, Size: 4]
	ScreenMarkManager* m_ScreenMarkManager;//[Offset: 0x198, Size: 4]
	ScreenRotationMarkManager* m_ScreenRotationMarkManager;//[Offset: 0x19c, Size: 4]
	int[] CurMarkInstList;//[Offset: 0x1a0, Size: 12]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x224, Size: 12]
	delegate OnMiniMapPointerException;//[Offset: 0x230, Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x23c, Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0x240, Size: 4]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x270, Size: 12]
	float TickRate_Internal;//[Offset: 0x29c, Size: 4]
	float TickRate_Callback;//[Offset: 0x2a0, Size: 4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x2a4, Size: 60]
	void RemoveExternMiniMapUI(MapUIBase* MiniMapUI);// 0x376e1b8
	void RemoveExternEntireMapUI(MapUIBase* EntireMapUI);// 0x376e140
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x376dfd8
	void OnShowOrHideLegendMarkWidget(FString Tag, bool bIsShow);// 0x376de30
	void OnMiniMapPointerExceptionDelegate__DelegateSignature();// 0x4a51734
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x4a51734
	void AddExternMiniMapUI(MapUIBase* MiniMapUI);// 0x376ddb8
	void AddExternEntireMapUI(MapUIBase* EntireMapUI);// 0x376dd40

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 4]
	FString UIBPSoftPtr;//[Offset: 0x4, Size: 12]
	FString UIDescription;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ScreenMarkManager.LuaObject.Object
	<int,ScreenMarkGroupData> ScreenMarkGroupMap;//[Offset: 0x68, Size: 60]
	<FString,ScreenMarkPriorityGroup> ScreenMarkPriorityGroupMap;//[Offset: 0xa4, Size: 60]
	bool bDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bUseLuaWorldOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	Vector2D LimitXY;//[Offset: 0xe4, Size: 8]
	Vector2D LimitZW;//[Offset: 0xec, Size: 8]
	Vector2D UIOffset;//[Offset: 0xf4, Size: 8]
	byte[] CheckObjectTypes;//[Offset: 0xfc, Size: 12]
	ActorVectorPair[] ActorVectorHeapToBind;//[Offset: 0x230, Size: 12]
	ActorVectorPair[] ActorVectorArrayToUnBind;//[Offset: 0x23c, Size: 12]
	void UpdateScreenMarkState(int TypeId, int InstanceID, out const CustomMarkEventData EventData);// 0x3852f38
	void UpdateBindingWidgetByPanel(int ID);// 0x3852ec0
	void UpdateBindingLocationWidget(int ID);// 0x3852e48
	void UpdateBindingActorWidget(int ID);// 0x3852dd0
	void ResetGroupQueryTime(out ScreenMarkGroupData GroupData);// 0x3852cb0
	void RemoveScreenMark(int TypeId, int InstanceID);// 0x3852bf4
	bool RemoveBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x3852b30
	void ReleaseGroupByID(int ID);// 0x3852ab8
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x38529f4
	bool PushScreenMark(int InstanceID, out const MarkSyncData MarkData);// 0x3852854
	void OnLocationUnbindUI(Widget* BindWidget, int ID);// 0x3852790
	void OnLocationBindUI(Widget* BindWidget, int ID);// 0x36dc970
	void OnInitMarkGroupData(int ID);// 0x35bccf4
	void OnInit();// 0x3852774
	void OnActorUnbindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x385266c
	void OnActorBindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x3852564
	bool IsInBindingRange(out const Vector PlayerToCharacter, int ID);// 0x3852490
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x38523c4
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x3852300
	Widget* FetchUI(int ID);// 0x3852280
	void ClearMarkGroupByTypeID(int ID);// 0x3852208
	bool CheckShouldShow(Actor* Actor, out const ScreenMarkGroupData GroupData);// 0x385209c
	bool CheckGroupNeedExist(int TypeId);// 0x385201c
	bool AddBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x3851f58

--------------------------------
Class: ScreenMarkGroupData
	ScreenMarkGroupConfig Config;//[Offset: 0x0, Size: 120]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x78, Size: 4]
	<int,ScreenMarkInstanceData> MarkInstanceDataMap;//[Offset: 0x7c, Size: 60]
	Widget*[] HidingUIArr;//[Offset: 0xb8, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0xc4, Size: 12]
	<int,Widget*> MarkBindingUIMap;//[Offset: 0xd0, Size: 60]
	UAEUserWidget* ScreenMarkPanel;//[Offset: 0x114, Size: 4]
	CanvasPanel* AddToPanel;//[Offset: 0x118, Size: 4]
	Actor*[] IgnoreBlockArr;//[Offset: 0x11c, Size: 12]

--------------------------------
Class: ScreenMarkGroupConfig
	int MaxWidgetNum;//[Offset: 0x0, Size: 4]
	float MaxShowDistance;//[Offset: 0x4, Size: 4]
	float MinShowDistance;//[Offset: 0x8, Size: 4]
	float UpdateBindingInterval;//[Offset: 0xc, Size: 4]
	float UpdateBindingIntervalMax;//[Offset: 0x10, Size: 4]
	float ReduseBindingVelocityThreshold;//[Offset: 0x14, Size: 4]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bIsUpdatedByPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bBindOutScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bBindBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	int[] ExtraCheckObjectTypes;//[Offset: 0x1c, Size: 12]
	class Actor[] ExtraCheckClasses;//[Offset: 0x28, Size: 12]
	FString UIPathName;//[Offset: 0x34, Size: 12]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	FName SkeletaSocketName;//[Offset: 0x48, Size: 8]
	Vector WorldPositionOffset;//[Offset: 0x50, Size: 12]
	Vector2D UIOffset;//[Offset: 0x5c, Size: 8]
	bool bNeedUpdateState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	FString PriorityGroupTag;//[Offset: 0x68, Size: 12]
	byte Priority;//[Offset: 0x74, Size: 1]
	bool bNeedOBShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bNeedReplayShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: UIDuplicatedItemPool.Object
	delegate OnAsyncFinishedDelegate;//[Offset: 0x38, Size: 12]
	bool bActiveItemListHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	FString[] TagArray;//[Offset: 0x48, Size: 12]
	FString ItemBPClassPath;//[Offset: 0x54, Size: 12]
	class Object* ItemClass;//[Offset: 0x60, Size: 4]
	UserWidget*[] UsedItemList;//[Offset: 0x64, Size: 12]
	UserWidget*[] IdleItemList;//[Offset: 0x70, Size: 12]
	UserWidget*[] IdleItemListHold;//[Offset: 0x7c, Size: 12]
	void RemoveTagFromItemPool(FString TagName);// 0x3ae8144
	void RemoveAllTagFromItemPool();// 0x3ae8130
	void RecycleUnusedItem();// 0x3ae811c
	void RecycleAllItems();// 0x3ae8108
	void OnAsyncLoadWidgetFinished(UserWidget* Widget, int InstID);// 0x3ae804c
	bool ItemPoolHasTag(FString TagName);// 0x3ae7f88
	bool ItemPoolHasOneTagAtLeast(out const FString[] TagNameList);// 0x3ae7e4c
	bool ItemPoolHasAllTag(out const FString[] TagNameList);// 0x3ae7d10
	void InitItemPool(FString ClassPath, int DefaultItemCounts, bool bAsync);// 0x3ae7bc4
	UserWidget* GetOneItem();// 0x3ae7b9c
	void GetAllUsedItem(out UserWidget*[] ItemList);// 0x3ae7ad0
	void GetAllTagFromItemPool(out FString[] tagList);// 0x3ae799c
	void FreeOneItem(UserWidget* IdleItem);// 0x3ae7924
	void AddTagToItemPool(FString TagName);// 0x3ae7868
	void AddMultiTagToItemPool(out const FString[] TagNameList);// 0x3ae7734

--------------------------------
Class: ScreenMarkInstanceData
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	int CustomInt;//[Offset: 0x14, Size: 4]
	float CustomFloat;//[Offset: 0x18, Size: 4]
	FString CustomString;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x59b0aa4
	bool GetDontPaintWhenChildEmpty();// 0x59b0a7c
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x59b09fc

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	int ZOrder;//[Offset: 0x50, Size: 4]
	void SetZOrder(int InZOrder);// 0x59b16f4
	void SetSupportNotch(bool InSupportNotch);// 0x59b1674
	void SetSize(Vector2D InSize);// 0x59b1604
	void SetPosition(Vector2D InPosition);// 0x59b1594
	void SetOffsets(Margin InOffset);// 0x59b150c
	void SetMinimum(Vector2D InMinimumAnchors);// 0x59b149c
	void SetMaximum(Vector2D InMaximumAnchors);// 0x59b142c
	void SetLayout(out const AnchorData InLayoutData);// 0x59b1394
	void SetAutoSize(bool InbAutoSize);// 0x59b1314
	void SetAnchors(Anchors InAnchors);// 0x59b128c
	void SetAlignment(Vector2D InAlignment);// 0x59b121c
	int GetZOrder();// 0x59b11f4
	Vector2D GetSize();// 0x59b11b4
	Vector2D GetPosition();// 0x59b1174
	Margin GetOffsets();// 0x59b1130
	AnchorData GetLayout();// 0x59b10dc
	bool GetAutoSize();// 0x59b10b4
	Anchors GetAnchors();// 0x59b1070
	Vector2D GetAlignment();// 0x59b1030
	bool GeSupportNotch();// 0x59b1008

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ScreenMarkPriorityGroup
	int MaxShowNum;//[Offset: 0x0, Size: 4]
	int CurShowNum;//[Offset: 0x4, Size: 4]
	int[] GroupTypeArray;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ActorVectorPair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]
	int InstanceID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ScreenRotationMarkManager.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	<int,ScreenRotationMarkGroupData> ScreenRotationMarkGroupMap;//[Offset: 0x68, Size: 60]
	Vector PlayerLoc;//[Offset: 0xa4, Size: 12]
	Vector PlayerDir;//[Offset: 0xb0, Size: 12]
	class Widget* ImageType;//[Offset: 0x1b8, Size: 4]
	void UpdateBindingLocationWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x3854ad4
	void UpdateBindingLocationWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x3854960
	void UpdateBindingActorWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x38547ec
	void UpdateBindingActorWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x3854678
	void UnbindLocation(out const Vector BingdingLoction, int ID);// 0x38545ac
	void UnbindActor(Actor* BindingObject, int ID);// 0x38544f0
	void ReleaseGroupByID(int ID);// 0x3854478
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x38543b4
	void OnInit();// 0x38543a0
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x38542d4
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x3854210
	Widget* FetchUI(int ID, out ScreenRotationMarkGroupData GroupData);// 0x3854094
	enum CheckWidgetDisAndAngleValid(Vector TargetLoc, out ScreenRotationMarkGroupData GroupData, out float Angle, out float Distance);// 0x3853e6c
	bool BindToLoc(out const Vector BingdingLoction, int ID);// 0x3853d98
	bool BindToActor(Actor* BindingObject, int ID);// 0x3853cd4

--------------------------------
Class: ScreenRotationMarkGroupData
	ScreenRotationMarkConfig Config;//[Offset: 0x0, Size: 72]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x48, Size: 4]
	Actor*[] WorldObjectArr;//[Offset: 0x4c, Size: 12]
	Vector[] WorldLocationArr;//[Offset: 0x58, Size: 12]
	Widget*[] HidingUIArr;//[Offset: 0x64, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0x70, Size: 12]
	<Actor*,Widget*> BindingActorUIMap;//[Offset: 0x7c, Size: 60]
	<Vector,Widget*> BindingLocationUIMap;//[Offset: 0xb8, Size: 60]
	CanvasPanel* RootPanel;//[Offset: 0xf4, Size: 4]

--------------------------------
Class: ScreenRotationMarkConfig
	ScreenRotationRangeValue DistanceRange;//[Offset: 0x0, Size: 16]
	ScreenRotationRangeValue AngleRange;//[Offset: 0x10, Size: 16]
	Actor* BindActor;//[Offset: 0x20, Size: 8]
	FString UIPathName;//[Offset: 0x28, Size: 12]
	float AngleOffset;//[Offset: 0x34, Size: 4]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float UpdateBindingInterval;//[Offset: 0x3c, Size: 4]
	int DefaultNum;//[Offset: 0x40, Size: 4]
	float Radius;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ScreenRotationRangeValue
	float MaxValue;//[Offset: 0x0, Size: 4]
	bool IsCloseOutMaxValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float MinValue;//[Offset: 0x8, Size: 4]
	bool IsCloseInMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: MapUIBase.Object
	delegate OnSetupUIMarkRoot;//[Offset: 0x1c, Size: 12]
	delegate OnUpdateMark;//[Offset: 0x28, Size: 12]
	delegate OnUpdateMultiMark;//[Offset: 0x34, Size: 12]
	delegate OnRepositionItemOnMap;//[Offset: 0x40, Size: 12]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x4c, Size: 4]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x50, Size: 12]
	<FString,CanvasPanel*> DynamaicCustomPanelMap;//[Offset: 0x5c, Size: 60]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x98, Size: 60]
	<int,MapImageMarkData> AllImageMarks;//[Offset: 0xd4, Size: 60]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bRepositionMarkerAndPinDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	int UpdateMarkFreq;//[Offset: 0x24c, Size: 4]
	Vector LevelLandScapeCenterC;//[Offset: 0x250, Size: 12]
	Vector2D SelfMarkerAligmentC;//[Offset: 0x25c, Size: 8]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x264, Size: 12]
	float TickRate_Internal;//[Offset: 0x278, Size: 4]
	float TickRate_Callback;//[Offset: 0x27c, Size: 4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x280, Size: 60]
	int[] CurMarkInstList;//[Offset: 0x2bc, Size: 12]
	CanvasPanel* CanvasPanel_ShowAirPlaneRoute;//[Offset: 0x304, Size: 4]
	bool bIsShowAirPlaneRouteAfteHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0x30c, Size: 12]
	FakeRadiationCircle* InnerCircle;//[Offset: 0x318, Size: 4]
	float ImageBlueCircleScale;//[Offset: 0x31c, Size: 4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x320, Size: 240]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x410, Size: 240]
	MapDataBase* CurrentMapData;//[Offset: 0x500, Size: 8]
	UserWidget* BindWidget;//[Offset: 0x508, Size: 8]
	MapObjct* ParentMapObject;//[Offset: 0x510, Size: 8]
	Vector LandscapeCenterCpp;//[Offset: 0x518, Size: 12]
	float LevelToMapScaleC;//[Offset: 0x524, Size: 4]
	float MapScaleCpp;//[Offset: 0x528, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x52c, Size: 8]
	float MapScalingRadio;//[Offset: 0x534, Size: 4]
	int LocalPlayerIndexC;//[Offset: 0x538, Size: 4]
	float MapImageExtentC;//[Offset: 0x53c, Size: 4]
	float MapWindowExtentC;//[Offset: 0x540, Size: 4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 1]
	bool bNeedDrawSelfGuideLineOutC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 1]
	LinearColor GuideLineColor;//[Offset: 0x548, Size: 16]
	LinearColor WhiteCircleColorC;//[Offset: 0x558, Size: 16]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	float GuideLineDashSizeC;//[Offset: 0x56c, Size: 4]
	float DefaultLineThicknessC;//[Offset: 0x570, Size: 4]
	bool bNeedDrawWhiteCircleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool bNeedDrawCircleGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	Vector2D MapAdjustLocation;//[Offset: 0x578, Size: 8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x580, Size: 8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x588, Size: 8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x590, Size: 8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	int AirDropIndex;//[Offset: 0x59c, Size: 4]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x5a4, Size: 8]
	void UpdateUIMarkBinding();// 0x376ada8
	void UpdatePlayersLocAndRotC(STExtraPlayerController* STEPC, STExtraPlayerState* STEPS, STExtraGameStateBase* STEGS);// 0x35b24dc
	void UpdateMultiMarkC(int Index, out const Vector2D[] MultiMarkLocs, bool IsShow, float Opacity);// 0x376abfc
	void UpdateMarkC(int Index, Vector2D FLoc, bool IsShow, float Opacity);// 0x376aaac
	void UpdateImageMarkBinding();// 0x376aa98
	void TickWidget(out const Geometry MyGeometry, float InDeltaTime);// 0x36dca84
	void ShowOrHideLegendMarks(FString Tag, bool bIsShow);// 0x376a8f0
	void SetupUIMarkRoot();// 0x376a8dc
	void RepositionMapMultiMarkC(int playerIndex, Vector2D CurSize);// 0x376a828
	void RepositionMapMarkC(int FIndex, int LocalPlayerIndex, Vector2D CurSize);// 0x376a728
	void RedrawAllMapMarkC(Vector2D CurSize);// 0x376a6b8
	void ReCalMapInfoC();// 0x376a6a4
	void OnUpdateUIMarks();// 0x365824c
	void OnUpdateImageMarks();// 0x3602490
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x376a53c
	void OnPaint(PaintContext InContext);// 0x376a4a8
	void InitMap(MapDataBase* InMapData, UserWidget* InUserWidget);// 0x36dc970
	World* GetWorldInternal();// 0x376a480
	float GetLevelToMapScale();// 0x36dc940
	STExtraGameStateBase* GetGameState();// 0x376a438
	bool CheckMarkDistance(Widget* Widget, Vector Location, float MaxDistance);// 0x376a328

--------------------------------
Class: MapUIMarkBaseWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x3c4, Size: 8]
	int DefaultZOrder;//[Offset: 0x3cc, Size: 4]
	bool bIsNeedRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	Actor* BindingActor;//[Offset: 0x3d4, Size: 8]
	float MaxShowDistance;//[Offset: 0x3dc, Size: 4]
	TextBlock* CountDownText;//[Offset: 0x3e0, Size: 4]
	FString CountDownFormat;//[Offset: 0x3e4, Size: 12]
	CanvasPanelSlot* ChangeSizeSlot;//[Offset: 0x408, Size: 4]
	float OriginSizeX;//[Offset: 0x410, Size: 4]
	float OriginSizeY;//[Offset: 0x414, Size: 4]
	UpdateStateChangePorperty[] UpdateStatePropertyArray;//[Offset: 0x41c, Size: 12]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x376ce44
	void UpdateMarkSize(float inScale);// 0x3671a24
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x376ccf4
	bool ShouldLimitedInMinimap();// 0x376cccc
	void SetWidgetCurPostion(Vector WorldPos3D);// 0x376cc5c
	void SetUpdatePropertyArray(out const UpdateStateChangePorperty[] PropertyArray, int InitState);// 0x376cb10
	void SetCountDownText(TextBlock* TextBlock, int TotalSecond, bool IsShowZero, FString Format);// 0x376c8d4
	void SetChangeSizePanel(float SizeX, float SizeY, bool IsChangeSize, bool IsChangeInUpdate, float Ratio);// 0x376c730
	void RefreshPanelScale(float Scale);// 0x376c6b8
	void RefreshCountDownText();// 0x376c6a4
	void OnWidgetShow(out const CustomMarkEventData InState);// 0x376c5c8
	void OnUpdateState(out const CustomMarkEventData InState);// 0x376c4ec
	void OnUpdateMarkSize(float Scale, float Ratio);// 0x376c430
	void OnUpdateIconMap(int NewState);// 0x376c3b8
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x376c2d4
	void OnUIBPDestroy();// 0x369ac9c
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x376c1ac
	void OnEnterEntireMap();// 0x4a51734
	Vector GetWidgetCurWorldPos();// 0x376c164

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf4, Size: 12]
	delegate TextDelegate;//[Offset: 0x100, Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x110, Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130, Size: 16]
	SlateColor SelectColorAndOpacity;//[Offset: 0x140, Size: 28]
	SlateColor NoSelectColorAndOpacity;//[Offset: 0x15c, Size: 28]
	bool bHaveSelectColorAndOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	SlateFontInfo Font;//[Offset: 0x180, Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x1c0, Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x1c8, Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1d8, Size: 16]
	float MinDesiredWidth;//[Offset: 0x1e8, Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	void SetVerticalJustification(byte InJustification);// 0x59cddec
	void SetText(FText InText);// 0x59cdb3c
	void SetShadowOffset(Vector2D InShadowOffset);// 0x59cdacc
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x59cda50
	void SetSelectColor(bool bIsSelect);// 0x59cd9d0
	void SetOpacity(float InOpacity);// 0x59cd958
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x59cd8e0
	void SetJustification(byte InJustification);// 0x59cd868
	void SetFont(SlateFontInfo InFontInfo);// 0x59cd550
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x59cd230
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x59cd1a8
	FText GetText();// 0x59cd04c

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xd0, Size: 4]
	byte Justification;//[Offset: 0xd4, Size: 1]
	byte VerticalJustification;//[Offset: 0xd5, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	float WrapTextAt;//[Offset: 0xd8, Size: 4]
	enum WrappingPolicy;//[Offset: 0xdc, Size: 1]
	Margin Margin;//[Offset: 0xe0, Size: 16]
	float LineHeightPercentage;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 4]
	Object* FontMaterial;//[Offset: 0x4, Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8, Size: 28]
	FName TypefaceFontName;//[Offset: 0x30, Size: 8]
	int Size;//[Offset: 0x38, Size: 4]
	bool IsBold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4, Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8, Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: UpdateStateChangePorperty
	Widget* UpdateWidget;//[Offset: 0x0, Size: 4]
	FString[] IconPathArray;//[Offset: 0x4, Size: 12]
	enum[] IconVisibleArray;//[Offset: 0x10, Size: 12]
	LinearColor[] IconColorArray;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MapImageMarkData
	int ConfigId;//[Offset: 0x0, Size: 4]
	Image* Image;//[Offset: 0x4, Size: 4]
	Vector CurrentWorldPos;//[Offset: 0x8, Size: 12]
	Vector2D OriginalSize;//[Offset: 0x14, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Vector2D MaxSize;//[Offset: 0x20, Size: 8]
	Actor* BindingActor;//[Offset: 0x28, Size: 8]
	float MaxShowDistance;//[Offset: 0x30, Size: 4]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: UIBPAsyncParams
	MarkSyncData MarkData;//[Offset: 0x4, Size: 68]
	class Widget* UIIconSoftPtr;//[Offset: 0x50, Size: 40]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x78, Size: 40]
	class Object* UIClass;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: MapMarkConfig
	int ConfigId;//[Offset: 0x0, Size: 4]
	FString UIPath;//[Offset: 0x4, Size: 12]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Vector2D MaxSize;//[Offset: 0x20, Size: 8]
	int ZOrder;//[Offset: 0x28, Size: 4]
	bool bIsControlByLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	FString LegendTags;//[Offset: 0x30, Size: 12]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float MaxShowDistance;//[Offset: 0x40, Size: 4]

--------------------------------
Class: FakeRadiationCircle.Actor.Object

--------------------------------
Class: MapRealTimeInfo
	Vector2D MapCenterToPlayer;//[Offset: 0x0, Size: 8]
	Vector MapCenterToBlueCircle;//[Offset: 0x8, Size: 12]
	Vector MapCenterToWhiteCircle;//[Offset: 0x14, Size: 12]
	Vector2D PlayerCoord;//[Offset: 0x20, Size: 8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x28, Size: 8]
	Vector2D WhiteCircleCoord;//[Offset: 0x30, Size: 8]
	Vector2D BlueCircleCoord;//[Offset: 0x38, Size: 8]
	float WhiteCircleRadius;//[Offset: 0x40, Size: 4]
	float BlueCircleRadius;//[Offset: 0x44, Size: 4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x48, Size: 8]
	enum LastDriveVehicleType;//[Offset: 0x50, Size: 1]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x54, Size: 100]
	AirDropPathData AirDropPathData;//[Offset: 0xb8, Size: 56]

--------------------------------
Class: AirplaneRouteData
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 8]
	float PlaneRotation;//[Offset: 0x24, Size: 4]
	AirDropPathData[] AirDropPaths;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLocInMapForCamp;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLocInMapForCamp;//[Offset: 0x3c, Size: 8]
	float CampRouteLengthInMap;//[Offset: 0x44, Size: 4]
	float CampRouteWidgetRotateAngle;//[Offset: 0x48, Size: 4]
	Vector2D LastValidCanJumpLocInMap;//[Offset: 0x4c, Size: 8]
	Vector2D LastValidForceJumpLocInMap;//[Offset: 0x54, Size: 8]
	float LastValidRouteWidgetRotateAngle;//[Offset: 0x5c, Size: 4]
	float LastValidRouteLengthInMap;//[Offset: 0x60, Size: 4]

--------------------------------
Class: AirDropPathData
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector2D StartLoc;//[Offset: 0x4, Size: 8]
	Vector2D TargetLoc;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D[] AirDropLocs;//[Offset: 0x1c, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x28, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: MapDataBase.Object
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x1c, Size: 12]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x28, Size: 12]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x34, Size: 12]
	MapUIBase* CurrentMapUI;//[Offset: 0x40, Size: 4]
	Vector PlayerLocOffset;//[Offset: 0x44, Size: 12]
	delegate FinaleChangeCurLocDelegate;//[Offset: 0x50, Size: 12]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x5c, Size: 8]
	void Init(MapUIBase* INMapUI);// 0x3768f7c
	World* GetWorldInternal();// 0x3768f54
	STExtraGameStateBase* GetGameState();// 0x3768f0c

--------------------------------
Class: MapObjct.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	MapUIBase* CurrentHoldMapUI;//[Offset: 0x68, Size: 8]
	World* GetWorldInternal();// 0x376b9d8
	void DrawCircle(Vector2D CircleCenter, LinearColor CircleColor, float CircleRadius, float MapWindowExtent, Vector2D PlayerCoord, byte MapType, bool bAntiAlias);// 0x376b798

--------------------------------
Class: WidgetToRenderTarget.Object
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x1c, Size: 60]
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x58, Size: 12]
	void ReleaseCachedParams();// 0x3b86600
	bool ReceivePreDrawTextToTextureRenderTarget2DAsync(out DrawTextToTextureRenderTarget2DParams Params);// 0x4a51734
	void ReceivePostDrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params);// 0x4a51734
	void DrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params, out const delegate OnWidgetToRenderTargetDrawn);// 0x3b86300

--------------------------------
Class: TextureRenderTarget2DManagerWidgetInfo
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 40]
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 4]
	UserWidget* UserWidget;//[Offset: 0x2c, Size: 4]
	FName UpdateWidgetFunctionName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DrawTextToTextureRenderTarget2DParams
	FText Text;//[Offset: 0x0, Size: 12]
	FName WidgetName;//[Offset: 0x10, Size: 8]
	int DrawWidth;//[Offset: 0x18, Size: 4]
	int DrawHeight;//[Offset: 0x1c, Size: 4]
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0x20, Size: 4]
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x28, Size: 40]
	FName TextureParameterName;//[Offset: 0x50, Size: 8]
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x58, Size: 4]
	FString Payload;//[Offset: 0x5c, Size: 12]
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: GameStateWeaponRule
	bool bForbidShootTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CheckForbidShootTime;//[Offset: 0x4, Size: 4]
	class Actor[] ForbidShootClassArray;//[Offset: 0x8, Size: 12]
	class Actor[] SwallowBulletClassArray;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ReplayRecordInfo.Actor.Object
	float WorldTimeSecondsForReplay;//[Offset: 0x310, Size: 4]
	void SaveExternalData(FString InData);// 0x383d06c

--------------------------------
Class: ParallelWorldDebugSummary
	int WorldNum;//[Offset: 0x0, Size: 4]
	int MaxPlayerNumPerPW;//[Offset: 0x4, Size: 4]
	ParallelWorldDebugEntry[] DebugData;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParallelWorldDebugEntry
	int ParallelWorldId;//[Offset: 0x0, Size: 4]
	int PlayerNum;//[Offset: 0x4, Size: 4]
	int AINum;//[Offset: 0x8, Size: 4]
	int TeamNum;//[Offset: 0xc, Size: 4]
	int[] TeamIds;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AirAttackOrder
	enum Msg;//[Offset: 0x0, Size: 1]
	uint16 waveIndex;//[Offset: 0x2, Size: 2]
	float FlightHeight;//[Offset: 0x4, Size: 4]
	float SeaLevelHeight;//[Offset: 0x8, Size: 4]
	uint32[] bombsInterval;//[Offset: 0xc, Size: 12]
	uint16 BombBaseDamage;//[Offset: 0x18, Size: 2]
	uint16 BombMinDamage;//[Offset: 0x1a, Size: 2]
	Vector AirAttackArea;//[Offset: 0x1c, Size: 12]
	Vector2D[] bombsPosition2D;//[Offset: 0x28, Size: 12]
	Vector[] bombsPosition;//[Offset: 0x34, Size: 12]

--------------------------------
Class: AnimalTeleportComponent.ActorComponent.Object
	bool bDeliverToInDoorPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	AnimalDeliverRatingConfig[] ChickDeliverConfig;//[Offset: 0xc8, Size: 12]
	AnimalDeliverRatingConfig[] DeerDeliverConfig;//[Offset: 0xd4, Size: 12]
	AnimalDeliverRatingConfig[] GoblinDeliverConfig;//[Offset: 0xe0, Size: 12]
	AnimalDeliverRatingConfig[] IceDeliverConfig;//[Offset: 0xec, Size: 12]
	AnimalDeliverAreaLimit[] DeliveryAreaLimit;//[Offset: 0xf8, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0x104, Size: 8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x10c, Size: 8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x114, Size: 4]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x118, Size: 4]
	<STExtraPlayerCharacter*> DeliveredGoblinPlayers;//[Offset: 0x11c, Size: 60]
	<STExtraPlayerCharacter*> DeliveredIcePlayers;//[Offset: 0x158, Size: 60]
	<enum,int> DeleverCountPerWave;//[Offset: 0x29c, Size: 60]

--------------------------------
Class: AnimalDeliverRatingConfig
	float RightRatingSection;//[Offset: 0x0, Size: 4]
	uint32 DeliverGroupNumPerWave;//[Offset: 0x4, Size: 4]
	float DeliverBeginTime;//[Offset: 0x8, Size: 4]
	float DeliveryWaveInterval;//[Offset: 0xc, Size: 4]
	float DeliverEndTime;//[Offset: 0x10, Size: 4]
	uint32 FullFeedLimit;//[Offset: 0x14, Size: 4]
	float DeliverFreqInterval;//[Offset: 0x18, Size: 4]
	int DeliverNumEachFreq;//[Offset: 0x1c, Size: 4]
	<int,int> DeliverCountByPlayerNum;//[Offset: 0x20, Size: 60]

--------------------------------
Class: AnimalDeliverAreaLimit
	Vector TopLeft;//[Offset: 0x0, Size: 12]
	Vector BottomRight;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AnimalDeliverConfiguration.Object
	AnimalDeliverStrategy*[] TeamDeliverStrategies;//[Offset: 0x1c, Size: 12]
	AnimalDeliverStrategy*[] IndividualDeliverStrategies;//[Offset: 0x28, Size: 12]

--------------------------------
Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x1c, Size: 1]
	enum SortStrategy;//[Offset: 0x5c, Size: 1]
	enum SelectStrategy;//[Offset: 0x5d, Size: 1]

--------------------------------
Class: PlaneComponent.LuaInstancedActorComponent.ActorComponent.Object
	int ClassicFlightNo;//[Offset: 0x114, Size: 4]
	<int,PlaneData> PlaneDataMap;//[Offset: 0x118, Size: 60]
	class Pawn* PlaneClass;//[Offset: 0x154, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bEnableClassic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bSyncRouteAfterFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x15c, Size: 12]
	AIController*[] CachedTotalAI;//[Offset: 0x168, Size: 12]
	int FlightTimes;//[Offset: 0x174, Size: 4]
	int NotifyEndFlightDelayTime;//[Offset: 0x178, Size: 4]
	int CustomFlightTimes;//[Offset: 0x188, Size: 4]
	void StartFlight(int FlightNo);// 0x37de740
	void SetPlaneClassPath(FString PlaneClassPath);// 0x37de684
	void SetFlight(int FlightNo, out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x37de430
	int SetCustomFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x37de214
	void NotifyEndFlight();// 0x37de200
	PlaneData GetPlaneDataByFlightNo(int FlightNo);// 0x37de05c
	void GetClassicPlanes(out Actor*[] PlaneList);// 0x37ddf90
	void EndPlaneFlightByFlightNo(int FlightNo);// 0x37ddf18
	void BPCalFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc);// 0x37ddd8c
	bool AddPlayerToFlight(PlayerController* PC, int FlightNo);// 0x37ddcc8

--------------------------------
Class: PlaneData
	int FlightNo;//[Offset: 0x0, Size: 4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Actor* ThePlane;//[Offset: 0x8, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector PlaneVelocity;//[Offset: 0x10, Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x1c, Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x3c, Size: 8]
	float PlaneHeight;//[Offset: 0x44, Size: 4]
	int TotalPlayerNum;//[Offset: 0x48, Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x4c, Size: 12]
	PlayerController*[] CurPlayers;//[Offset: 0x58, Size: 12]
	int TotalAINum;//[Offset: 0x64, Size: 4]
	AIController*[] TotalAIs;//[Offset: 0x68, Size: 12]
	AIController*[] CurAIs;//[Offset: 0x74, Size: 12]
	int CurAINum;//[Offset: 0x80, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x84, Size: 4]
	bool bCanFixedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0xc8, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xcc, Size: 4]
	enum RespawnPointType;//[Offset: 0xd0, Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0xd4, Size: 12]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0xe0, Size: 12]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0xec, Size: 12]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0xf8, Size: 60]
	<uint32,RespawnIgnoreItemType> PlayerRespawnIgnoreItemTypes;//[Offset: 0x134, Size: 60]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x170, Size: 24]
	int[] DefaultWeaponList;//[Offset: 0x188, Size: 12]
	float bRestoreDataDelay;//[Offset: 0x194, Size: 4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	delegate OnGlobalRespawnedDelegate;//[Offset: 0x19c, Size: 12]
	delegate OnRespawnedPlayerDelegate;//[Offset: 0x1a8, Size: 12]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x2a4, Size: 4]
	Pawn* RespawningPlayerPawn;//[Offset: 0x2a8, Size: 4]
	void SetRespawnInvincibleTime(float DefaultRespawnInvincibleTimeIn);// 0x37fbad0
	void RespawnAllPlayer();// 0x37fbabc
	void RemovePlayerRespawnTimer(uint32 PlayerKey, bool bAI);// 0x37fb9f8
	void PlayerDelayAddItem(uint32 PlayerKey, int ItemId);// 0x37fb93c
	void OnCharacterStartFire(STExtraWeapon* _, STExtraBaseCharacter* Character);// 0x37fb880
	bool IsContainPlayerTimer(uint32 PlayerKey);// 0x37fb800
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x37fb730
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x37fb674
	int GetRespawnWeaponBulletNum(out const RespawnKeepAllItemData RespawnKeepAllItemData, int SlotType, int SpecificID);// 0x37fb51c
	bool GetPlayerRespawnKeepAllItemData(uint32 PlayerKey, bool bAI, out RespawnKeepAllItemData OutRespawnKeepAllItemData, bool bKeepBullet);// 0x37fb368
	float GetDefaultPlayerRespawnTime();// 0x37fb340
	void GenerateRespawnKeepItems(uint32 PlayerKey, bool bAI, out const RespawnKeepAllItemData RespawnKeepAllItemData, bool bForceKeepItems);// 0x37fb194
	void DealWithDelayAddItem(uint32 PlayerKey, bool bAddAll, bool bClearAll);// 0x37fb080
	void ClearDelayAddItems(uint32 PlayerKey);// 0x37fb008
	void ClearAllPlayerRespawnTimer();// 0x37faff4
	void ChangeWeaponSchemeIndex(int InIndex);// 0x3559fb4
	void AddPlayerRespawnIgnoreKeepItemType(uint32 PlayerKey, bool IsAdd, int itemType);// 0x37faee8

--------------------------------
Class: ReplaceWeaponDataMap
	<byte,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ReplaceWeaponData
	int WeaponId;//[Offset: 0x0, Size: 4]
	BattleItemData WeaponItemData;//[Offset: 0x8, Size: 160]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0xa8, Size: 12]

--------------------------------
Class: RespawnIgnoreItemType

--------------------------------
Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 12]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x18, Size: 1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x1c, Size: 12]
	int ClipBulletNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0, Size: 4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0, Size: 4]
	RespawnItem[] ItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShowVehicleComponent.LuaInstancedActorComponent.ActorComponent.Object
	class Actor* VehicleSpotClass;//[Offset: 0x114, Size: 4]
	float DropHeightOffset;//[Offset: 0x118, Size: 4]
	float LeftTimeToDestroyVehicles;//[Offset: 0x11c, Size: 4]
	float TimerHzToDestroyVehicles;//[Offset: 0x120, Size: 4]
	bool bUseNewVehicleSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	float LeftTimeToDestroyWingman;//[Offset: 0x128, Size: 4]
	float TimerHzToDestroyWingman;//[Offset: 0x12c, Size: 4]
	int MaxVehicles;//[Offset: 0x130, Size: 4]
	int MaxVehiclesPerGroup;//[Offset: 0x134, Size: 4]
	Actor*[] VehicleSpotActors;//[Offset: 0x138, Size: 12]
	VehicleSpots[] VehicleSpotGroup;//[Offset: 0x15c, Size: 12]
	<uint32,Actor*> VehicleContainers;//[Offset: 0x168, Size: 60]
	<int,Actor*> WingmanMap;//[Offset: 0x1e8, Size: 60]
	void ShowWingmanFor(uint32 InPlayerKey, FString InWingmanClassPath, out const Transform InWingmanSpawnTransform);// 0x386ec80
	void ShowVehicleFor(uint32 InPlayerKey, FString InVehiclePath, FString InVehicleContainerPath, int InAvatarID);// 0x386eaac
	void SetVehicleSpotsInfo();// 0x355a034
	void RemoveVehicleInfo(uint32 InPlayerKey);// 0x386ea34
	void OnGameModeStateChanged(out const GameModeStateChangedParams InParams);// 0x386e9a4
	void DestroyWingman();// 0x386e990
	void DestroyVehicleFor(uint32 InPlayerKey);// 0x386e918

--------------------------------
Class: VehicleSpots
	Transform[] Spots;//[Offset: 0x0, Size: 12]
	<int> UsedSpot;//[Offset: 0xc, Size: 60]
	<int,UsedVehicleSpots> GroupIndexUsedVehicleSpotsMap;//[Offset: 0x48, Size: 60]

--------------------------------
Class: UsedVehicleSpots
	<int> UsedSpot;//[Offset: 0x0, Size: 60]

--------------------------------
Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0, Size: 4]
	FString PlaneClassFullPath;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4, Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14, Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 12]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4, Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ItemAttach
	int BaseItemID;//[Offset: 0x0, Size: 4]
	AddItemInfo[] AttachItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AddItemInfo
	int AddItemID;//[Offset: 0x0, Size: 4]
	int AddItemNum;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0, Size: 4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xc4, Size: 12]
	FString FakePlayerCampNameTableName;//[Offset: 0xd0, Size: 12]
	FString FakePlayerRandomNameTableName;//[Offset: 0xdc, Size: 12]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0xe8, Size: 60]
	<int,FString> FakePlayerCampNameMap;//[Offset: 0x124, Size: 60]
	FString[] FakePlayerRandomNamePrefixArray;//[Offset: 0x160, Size: 12]
	FString[] FakePlayerRandomNameArray;//[Offset: 0x16c, Size: 12]
	void InitRowDataMap();// 0x36eb9f0
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x36eb8ec
	FString GetControllerPath(int resID);// 0x36eb7e4

--------------------------------
Class: FakePlayerCustomRow
	int ID;//[Offset: 0x0, Size: 4]
	FString ControllerPath;//[Offset: 0x4, Size: 12]
	FString Name;//[Offset: 0x10, Size: 12]
	int gender;//[Offset: 0x1c, Size: 4]
	FString ItemStr;//[Offset: 0x20, Size: 12]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x2c, Size: 12]
	int IsUseRandomName;//[Offset: 0x38, Size: 4]
	int NameLocalizeId;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DSTickRateOptimize
	float TickFrequency;//[Offset: 0x0, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x4, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x8, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GroupPlayers
	uint32[] Players;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PVSNetRelevantHelper.Object
	float MaxVoiceSyncDissquaredDeathMatch;//[Offset: 0x9c, Size: 4]
	float MaxVoiceSyncDissquaredBR;//[Offset: 0xa0, Size: 4]
	float MaxVoiceSyncDissquared;//[Offset: 0xa4, Size: 4]
	bool bEnableVoiceLODSector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int VoiceLODSectorCircleDivideCount;//[Offset: 0xbc, Size: 4]
	int VoiceLODSectorBeginDistance;//[Offset: 0xc0, Size: 4]
	int VoiceLODSectorBeginThickness;//[Offset: 0xc4, Size: 4]
	enum GameModeModType;//[Offset: 0xc8, Size: 4]
	bool bEnableLandscapeRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bEnableCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	float ModdedMinJudgeDistanceSquared;//[Offset: 0xd0, Size: 4]
	float BaseModMinJudgeDistanceSquared;//[Offset: 0xd4, Size: 4]
	float MinJudgeDisquared;//[Offset: 0xd8, Size: 4]
	float MinSprintFootVoiceNeedVelocitySquared;//[Offset: 0xdc, Size: 4]
	bool bAIVoiceSyncSpecial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bHasDecidedMinJudgeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	float RayVisibilityMoveUpDistance;//[Offset: 0x2a4, Size: 4]
	float RayVisibilityPerSecondTimeLimit;//[Offset: 0x2a8, Size: 4]
	float RayVisibilityCheckIntervalWhenVisible;//[Offset: 0x2ac, Size: 4]
	int RayVisibilityMaxHidePerViewer;//[Offset: 0x2b0, Size: 4]
	float CameraStayStillButCharacterMoveDistanceThreshold;//[Offset: 0x2b4, Size: 4]
	void RegisterObfuscateSync(const UAEPlayerController* PlayerController);// 0x3834168
	void EnableCell();// 0x3834154

--------------------------------
Class: AIControllerList

--------------------------------
Class: AIPawnPoolItem
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: RoomCustomParams
	int CircleSpeedMultiplicator;//[Offset: 0x0, Size: 4]
	bool bAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bShowSkull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bGunRemoveBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int BlueCircleDamageMultiplicator;//[Offset: 0xc, Size: 4]
	bool bUseFirstWhiteCircleDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bUseFirstSafeZoneAppearTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bUseFirstWhiteCircleRadiusMultiplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int FirstWhiteCircleDelayTime;//[Offset: 0x14, Size: 4]
	int FirstSafeZoneAppearTime;//[Offset: 0x18, Size: 4]
	int FirstWhiteCircleRadiusMultiplicator;//[Offset: 0x1c, Size: 4]
	bool EnableRedZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	CustomCircleParams[] CustomCircleParamsList;//[Offset: 0x24, Size: 12]
	bool bFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: CustomCircleParams
	int Stage;//[Offset: 0x0, Size: 4]
	int DelayTime;//[Offset: 0x4, Size: 4]
	int SafeZoneAppeartime;//[Offset: 0x8, Size: 4]
	int LastTime;//[Offset: 0xc, Size: 4]
	int CircleDamage;//[Offset: 0x10, Size: 4]
	int BlueCircleRadius;//[Offset: 0x14, Size: 4]
	int WhiteCircleRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlowUpData
	float TimeStamp;//[Offset: 0x0, Size: 4]
	int InternalBlowUpID;//[Offset: 0x4, Size: 4]
	bool bIsBeingBlew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float InternalTime;//[Offset: 0xc, Size: 4]
	Vector LaunchVelocity;//[Offset: 0x10, Size: 12]
	Actor* HitActor;//[Offset: 0x1c, Size: 8]
	PrimitiveComponent* HitComponent;//[Offset: 0x24, Size: 8]

--------------------------------
Class: NetMoveSpeedParameter
	float MaxWalkSpeed;//[Offset: 0x0, Size: 4]
	float WalkCurveSpeed;//[Offset: 0x4, Size: 4]
	float SpeedValue;//[Offset: 0x8, Size: 4]
	byte SpeedScale;//[Offset: 0xc, Size: 1]
	byte SpeedRate;//[Offset: 0xd, Size: 1]
	byte SwimSpeedDynamicScale;//[Offset: 0xe, Size: 1]
	byte EnergySpeedScale;//[Offset: 0xf, Size: 1]
	int WalkSpeedCurveScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SplineMoveInfo
	SplineComponent* MoveAlongSpline;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 4]
	Transform DecalTransform;//[Offset: 0x10, Size: 48]
	int DecalInstanceId;//[Offset: 0x40, Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x44, Size: 12]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: PlayerPosMarkerParam
	Character* Player;//[Offset: 0x0, Size: 4]
	float MarkTimeLen;//[Offset: 0x4, Size: 4]
	int MarkIcon;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PUBGDoor.UAENetActor.LuaActor.Actor.Object
	int iRegionDoor;//[Offset: 0x424, Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x42c, Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x434, Size: 4]
	float autoOpenAngel;//[Offset: 0x438, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x43c, Size: 4]
	int DoorState;//[Offset: 0x440, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	float DoorOperateTime;//[Offset: 0x448, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x44c, Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x450, Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x454, Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	int DoorStateEx;//[Offset: 0x45c, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x464, Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x468, Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x46c, Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 1]
	delegate OnDoorBrokenDelegate;//[Offset: 0x474, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x480, Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x48c, Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x498, Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x49c, Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x4a8, Size: 4]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x4b0, Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x4b8, Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x4c8, Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	DoorOpenConfig DoorOpenConfig;//[Offset: 0x4ec, Size: 8]
	ExDoorOpenConfig ExDoorOpenConfig;//[Offset: 0x4f4, Size: 8]
	void SetDoorBroken(bool bExtraDoor, Controller* EventInstigator);// 0x381f090
	void RefreshUIOnClient();// 0x381f07c
	void RecordBreakDoorTlog(PlayerController* EventInstigator);// 0x381f004
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x381ef40
	void OnRep_RepDoorStateEx();// 0x381ef2c
	void OnRep_RepDoorState();// 0x381ef18
	void OnRep_RepDoorBrokenEx();// 0x381ef04
	void OnRep_RepDoorBroken();// 0x381eef0
	void OnRep_ExDoorOpenConfig();// 0x381eedc
	void OnRep_DoorOpenConfig();// 0x381eec8
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x381ed80
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x381ec38
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x381eb74
	void OnBPRespawned();// 0x3574444
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x381e93c
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x381e704
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x381e640
	bool IsSameDoorState(int ClientState);// 0x381e5c0
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x381e39c
	enum[] GetDamageableGameObjectType();// 0x381e2d4
	void ForceNetUpdate();// 0x37d4afc
	void DeCodeKey();// 0x367a48c
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x381e210
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x381e0ac
	void BPSetObjectPoolInitialData();// 0x357447c
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x4a51734
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x4a51734
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x4a51734

--------------------------------
Class: DoorOpenConfig
	int DoorState;//[Offset: 0x0, Size: 4]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ExDoorOpenConfig
	int DoorStateEx;//[Offset: 0x0, Size: 4]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraProp.Actor.Object
	bool bKeepRelevantWhenHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	STExtraBaseCharacter* OwnerPlayer;//[Offset: 0x314, Size: 4]
	STExtraBaseCharacter* LastOwnerPlayer;//[Offset: 0x318, Size: 4]
	Transform OriginTrans;//[Offset: 0x320, Size: 48]
	FName PropAttachSocket;//[Offset: 0x350, Size: 8]
	AkAudioEvent* EquipSound;//[Offset: 0x358, Size: 4]
	AkAudioEvent* UnEquipSound;//[Offset: 0x35c, Size: 4]

--------------------------------
Class: MovementRecordData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Vector Velocity;//[Offset: 0x18, Size: 12]
	Vector ControllerNormalRot;//[Offset: 0x24, Size: 12]
	Vector SimulateViewNormalRot;//[Offset: 0x30, Size: 12]
	float ServerTimeStamp;//[Offset: 0x3c, Size: 4]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Vector VehicleLocation;//[Offset: 0x44, Size: 12]
	Rotator VehicleRotation;//[Offset: 0x50, Size: 12]
	Vector VehicleRotVelocity;//[Offset: 0x5c, Size: 12]
	bool VehicleIsCorrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	byte PoseState;//[Offset: 0x69, Size: 1]
	enum MoveBaseState;//[Offset: 0x6a, Size: 1]
	float PingMillisecond;//[Offset: 0x6c, Size: 4]
	bool IsCustomMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	uint64 PawnStates;//[Offset: 0x78, Size: 8]
	uint32 UserCmdSequence;//[Offset: 0x80, Size: 4]
	uint32 LastAckBadMoveSequence;//[Offset: 0x84, Size: 4]
	bool bHasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool bUseServerWorldTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]

--------------------------------
Class: ShootDamageTipsStr
	STExtraBaseCharacter* DamageTarget;//[Offset: 0x0, Size: 4]
	float Damage;//[Offset: 0x4, Size: 4]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 1]
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0, Size: 12]
	FString CauserNation;//[Offset: 0xc, Size: 12]
	FString VictimName;//[Offset: 0x18, Size: 12]
	FString VictimNation;//[Offset: 0x24, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x30, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x3c, Size: 12]
	int DamageType;//[Offset: 0x48, Size: 4]
	int AdditionalParam;//[Offset: 0x4c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x50, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x54, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ResultHealthStatus;//[Offset: 0x5c, Size: 4]
	byte RecordRelationShip;//[Offset: 0x60, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x64, Size: 4]
	FString RealKillerName;//[Offset: 0x68, Size: 12]
	int RealKillNum;//[Offset: 0x74, Size: 4]
	byte CauserType;//[Offset: 0x78, Size: 1]
	byte VictimType;//[Offset: 0x79, Size: 1]
	int CauserTeamID;//[Offset: 0x7c, Size: 4]
	int VictimTeamID;//[Offset: 0x80, Size: 4]
	bool IsUseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	LinearColor UseColor;//[Offset: 0x88, Size: 16]
	byte[] ExpandDataContent;//[Offset: 0x98, Size: 12]

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	bool bPlayHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]

--------------------------------
Class: DotDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ValidTouchMoveFrameConfig
	FString DeviceName;//[Offset: 0x0, Size: 12]
	int Enable;//[Offset: 0xc, Size: 4]
	int Frame;//[Offset: 0x10, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc, Size: 12]
	int PlayerGender;//[Offset: 0x18, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20, Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 40]
	SensibilityMode FireMode;//[Offset: 0x28, Size: 40]
	SensibilityMode MotionMode;//[Offset: 0x50, Size: 40]
	SensibilityMode MotionFireMode;//[Offset: 0x78, Size: 40]
	float VehicleEye;//[Offset: 0xa0, Size: 4]
	float ParachuteEye;//[Offset: 0xa4, Size: 4]
	float FPPEye;//[Offset: 0xa8, Size: 4]
	int SideMirrorModeC;//[Offset: 0xac, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]
	float Shoulder;//[Offset: 0x20, Size: 4]
	float ShoulderFPP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x4, Size: 12]
	FString AttackName;//[Offset: 0x10, Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int KillNum;//[Offset: 0x20, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bHideKillIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	FString FullMsg;//[Offset: 0x28, Size: 12]
	FString VictimPlayerName;//[Offset: 0x34, Size: 12]
	FString CauserPlayerName;//[Offset: 0x40, Size: 12]
	FString CauserRealPlayerName;//[Offset: 0x4c, Size: 12]
	bool bIsCauserTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bIsVictimTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bIamCauser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	bool bIamVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 1]
	int ResultHealthStatus;//[Offset: 0x5c, Size: 4]
	int CauserType;//[Offset: 0x60, Size: 4]
	int DamageType;//[Offset: 0x64, Size: 4]
	int AdditionalParam;//[Offset: 0x68, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x6c, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0x70, Size: 12]
	int AssistNum;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xc4, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	float GuideInterval;//[Offset: 0xcc, Size: 4]
	int MaxGuideLevel;//[Offset: 0xd0, Size: 4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0xd8, Size: 40]
	class Object[] tGuideConfigClassArray;//[Offset: 0x100, Size: 12]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x10c, Size: 12]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x118, Size: 40]
	NewbieGuideItem[] tItems;//[Offset: 0x140, Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0x14c, Size: 4]
	int[] FinishedTips;//[Offset: 0x150, Size: 12]
	int[] FinishedCounts;//[Offset: 0x15c, Size: 12]
	int PlayerLevel;//[Offset: 0x168, Size: 4]
	byte curPlayerCategory;//[Offset: 0x16c, Size: 1]
	void TriggerNewbieEvent(FString NewbieEvent);// 0x37a16d0
	void ShowHideGuide(int TipsID, bool bShow);// 0x37a160c
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x37a1500
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x37a1484
	void OnNewbieEventMapUpdate__DelegateSignature();// 0x4a51734
	void OnLoadGuideConfigFinish(LoadGuideConfig inFinishRet);// 0x37a1304
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte _curPlayerCategory, int _PlayerLevel);// 0x37a0fc0
	void HandleNewbieGuideEnd(FString GuideID, FString EndType);// 0x37a0e80
	void HandleNewbieGuideBegin(FString GuideID);// 0x37a0dc4
	bool GetIsAllowNewGuide();// 0x37a0d9c
	bool GetIsAllowLuaNewGuide();// 0x37a0d74
	void AddGuidItem(class STNewBieGuideConfig Config);// 0x37a0bf4

--------------------------------
Class: STNewBieGuideConfig.Object
	NewbieGuideItem[] tItems;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	byte Type;//[Offset: 0x10, Size: 1]
	int MaxGuideCounts;//[Offset: 0x14, Size: 4]
	int MaxGuideLevel;//[Offset: 0x18, Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x1c, Size: 12]
	int Priority;//[Offset: 0x28, Size: 4]
	int MuteFlag;//[Offset: 0x2c, Size: 4]
	int PreconditionID;//[Offset: 0x30, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x34, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x38, Size: 12]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44, Size: 4]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListenerList;//[Offset: 0x48, Size: 12]
	float Duration;//[Offset: 0x54, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x58, Size: 12]
	bool UseNewEdition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x5c, Size: 8]
	FString LuaFilePath;//[Offset: 0x64, Size: 12]
	bool ReconnectRecover();// 0x36849c8
	bool IsOK();// 0x3684a0c

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x37a0750

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x1c, Size: 12]
	Controller* OwnerController;//[Offset: 0x28, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float DelayTime;//[Offset: 0x34, Size: 4]
	bool ReconnectRecover();// 0x36849c8
	void OnEventTrigger();// 0x35b5e08
	Actor* GetCurrentEventOwnerActor();// 0x357e648
	bool EnableListener();// 0x371617c
	bool DisableListener();// 0x3684a0c

--------------------------------
Class: NewbieGuideUIInfo
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString MountName;//[Offset: 0x2c, Size: 12]
	FString MountOuterName;//[Offset: 0x38, Size: 12]
	AnchorData LayoutData;//[Offset: 0x44, Size: 40]
	FString LogicManagerNames;//[Offset: 0x6c, Size: 12]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	int ZOrder;//[Offset: 0x7c, Size: 4]
	Widget* UIWidget;//[Offset: 0x80, Size: 4]
	class Object* UIWidgetClass;//[Offset: 0x84, Size: 4]

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: LoadGuideConfig

--------------------------------
Class: PVSComponent.ActorComponent.Object
	void SyncVoiceLODSector(STExtraBaseCharacter* PtrChar, float InVoice1, float InVoice2, float InVoice3, const int Index);// 0x3833a4c
	void SyncVoiceCellInfo(STExtraBaseCharacter* PtrChar, const int InVoice1, const int InVoice2, const float InVoice3);// 0x3833904
	void SyncVisibilityFor(STExtraBaseCharacter* PtrChar, const bool bVisible);// 0x3833840
	void SyncPosition(STExtraBaseCharacter* PtrChar, const Vector Position);// 0x383378c
	void SyncFootVoice(STExtraBaseCharacter* PtrChar, const byte FootStepState, const Vector_NetQuantize100 VoiceCheckVector);// 0x3833694
	void ReportPVSException(const Vector OwnPos, const Vector OtherPos, const Vector Vel, const Vector OuterLoc);// 0x3833534
	void ForceSyncPosition(STExtraBaseCharacter* PtrChar, const RepMovement RepMovement);// 0x3833478
	void AlertPopInDev(FString Message, FString SimulateProxyUID);// 0x383330c

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	float TimeStartDelay;//[Offset: 0xc8, Size: 4]
	float SyncInterval;//[Offset: 0xcc, Size: 4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x3a8c888
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x355a050
	void OnTimeInspectorColdMove_Vehicle();// 0x3a8c874
	void OnTimeInspectorColdMove_Own();// 0x3a8c860
	void OnServerAboutToReconnect();// 0x3a8c84c
	void CheckTimeLine();// 0x3a8c838

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch CheatStateData2TotalCheatTimes;//[Offset: 0xd0, Size: 32]
	VerifySwitch MoveCheatAntiStrategy3TotalCheatTimes;//[Offset: 0xf4, Size: 32]
	VerifySwitch VsNoHitDetail;//[Offset: 0x12c, Size: 32]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x14c, Size: 32]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x16c, Size: 32]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x18c, Size: 32]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x1ac, Size: 32]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x1cc, Size: 32]
	VerifySwitch VsBoneScale;//[Offset: 0x1ec, Size: 32]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x20c, Size: 32]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x22c, Size: 32]
	VerifySwitch VsBulletID;//[Offset: 0x24c, Size: 32]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x26c, Size: 32]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x28c, Size: 32]
	int MaxShootPointPassWall;//[Offset: 0x2ac, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x2b0, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x2b4, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2b8, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x2bc, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x2c0, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2c4, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2c8, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2cc, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2d0, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2d4, Size: 32]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x2f4, Size: 32]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x314, Size: 32]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x334, Size: 32]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x354, Size: 32]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x374, Size: 32]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x394, Size: 32]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x3b4, Size: 32]
	int MaxMergedStrategy1;//[Offset: 0x3d4, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x3d8, Size: 4]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3dc, Size: 32]
	VerifySwitch VsClientNotConnectShoot;//[Offset: 0x3fc, Size: 32]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x41c, Size: 32]
	VerifySwitch VsShootRpgShootIntervalVerify;//[Offset: 0x43c, Size: 32]
	float MaxFuelConsume;//[Offset: 0x45c, Size: 4]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x4dc, Size: 32]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x4fc, Size: 32]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x520, Size: 32]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x540, Size: 32]
	VerifySwitch VsClientBulletDir;//[Offset: 0x560, Size: 32]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x580, Size: 32]
	VerifySwitch VsClientDownShoot;//[Offset: 0x5a0, Size: 32]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x5c0, Size: 32]
	VerifySwitch FarJump;//[Offset: 0x5e0, Size: 32]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x600, Size: 32]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x620, Size: 32]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x640, Size: 32]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x660, Size: 32]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x680, Size: 32]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x6a0, Size: 32]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x6c0, Size: 32]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x6e0, Size: 32]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x700, Size: 28]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x71c, Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x720, Size: 32]
	float ClientTimeTotalAcc;//[Offset: 0x740, Size: 4]
	float ServerAccumulateErrors;//[Offset: 0x748, Size: 4]
	float ServerAvgErrors;//[Offset: 0x74c, Size: 4]
	VerifySwitch ServerAccumulateErrorReplay;//[Offset: 0x758, Size: 32]
	BurstVerifySwitch ServerAccumulateErrorBurst;//[Offset: 0x778, Size: 100]
	BurstVerifySwitch ServerAccumulateErrorBurstTrial;//[Offset: 0x7dc, Size: 100]
	VerifySwitch DSSpeedOver10FailedCnt;//[Offset: 0x840, Size: 32]
	VerifySwitch DSSpeedOver15FailedCnt;//[Offset: 0x860, Size: 32]
	VerifySwitch DSSpeedOver20FailedCnt;//[Offset: 0x880, Size: 32]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x8a0, Size: 32]
	VerifySwitch BulletDirError;//[Offset: 0x8c0, Size: 32]
	VerifySwitch MuzzleAndOwnerDisOpti;//[Offset: 0x8e0, Size: 32]
	VerifySwitch ImpactAndEnemyDisOpti;//[Offset: 0x900, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirError1;//[Offset: 0x920, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirError2;//[Offset: 0x940, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirSkipPunish1;//[Offset: 0x960, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirSkipPunish2;//[Offset: 0x980, Size: 32]
	VerifySwitch SwitchShootPosHistoryLocusError2;//[Offset: 0x9a0, Size: 32]
	VerifySwitch SwitchShootPosHistoryLocusError3;//[Offset: 0x9c0, Size: 32]
	VerifySwitch SwitchMuzzleLocusError;//[Offset: 0x9e0, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorX;//[Offset: 0xa00, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorY;//[Offset: 0xa20, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorZ;//[Offset: 0xa40, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorLength;//[Offset: 0xa60, Size: 32]
	VerifySwitch SwitchShooterMovementError1;//[Offset: 0xa80, Size: 32]
	VerifySwitch SwitchShooterMovementError2;//[Offset: 0xaa0, Size: 32]
	VerifySwitch SwitchHeadLocusError3;//[Offset: 0xac0, Size: 32]
	VerifySwitch Gun2ShooterPosError1;//[Offset: 0xae0, Size: 32]
	VerifySwitch ShooterHead2PosBlock;//[Offset: 0xb00, Size: 32]
	float MaxUseOptiArguPing;//[Offset: 0xb20, Size: 4]
	int ShootVerifyTimes;//[Offset: 0xb24, Size: 4]
	float VehicleSpeedZDeltaTotal;//[Offset: 0xb6c, Size: 4]
	int VehicleSpeedZDeltaOver10Times;//[Offset: 0xb70, Size: 4]
	VerifySwitch VehicleSpeedZDeltaOver10TimesWhenNoXY;//[Offset: 0xb74, Size: 32]
	VerifySwitch VehicleVelZCheck1;//[Offset: 0xb94, Size: 32]
	VerifySwitch VehicleVelZCheck2;//[Offset: 0xbb4, Size: 32]
	VerifySwitch VehicleHitMuzzleCheck;//[Offset: 0xbd4, Size: 32]
	VerifySwitch VehicleHitImpactPointCheck;//[Offset: 0xbf4, Size: 32]
	VerifySwitch VehicleHitBlockWall;//[Offset: 0xc14, Size: 32]
	VerifySwitch FarShootInMidAirVehicleExceedThreshold;//[Offset: 0xc34, Size: 32]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceTrial;//[Offset: 0xc54, Size: 32]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceFurtherTrial;//[Offset: 0xc74, Size: 32]
	VerifySwitch FarShootInMidAirVehicleHeightTrial;//[Offset: 0xc94, Size: 32]
	VerifySwitch FarShootInMidAirVehicleHeightFurtherTrial;//[Offset: 0xcb4, Size: 32]
	VerifySwitch FarShootInMidAirPawnExceedThreshold;//[Offset: 0xcd4, Size: 32]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceTrial;//[Offset: 0xcf4, Size: 32]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceFurtherTrial;//[Offset: 0xd14, Size: 32]
	VerifySwitch FarShootInMidAirPawnHeightTrial;//[Offset: 0xd34, Size: 32]
	VerifySwitch FarShootInMidAirPawnHeightFurtherTrial;//[Offset: 0xd54, Size: 32]
	VerifySwitch DSLongTimeMoveDistanceExceedThresholdCount;//[Offset: 0xd74, Size: 32]
	VerifySwitch DSRunning2DSpeedExceededCount;//[Offset: 0xd94, Size: 32]
	VerifySwitch DSRunning2DSpeedTrial;//[Offset: 0xdb4, Size: 32]
	VerifySwitch DSRunning2DSpeedFurtherTrial;//[Offset: 0xdd4, Size: 32]
	VerifySwitch DSIgnoreNetworkDying2DSpeedExceededCount;//[Offset: 0xdf4, Size: 32]
	VerifySwitch DSProneMoveSpeedExceedCount;//[Offset: 0xe14, Size: 32]
	VerifySwitch DSDyingMoveSpeedExceedCount;//[Offset: 0xe34, Size: 32]
	VerifySwitch DSSprintCrouchMoveSpeedExceedCount;//[Offset: 0xe54, Size: 32]
	VerifySwitch DSAimCrouchMoveSpeedExceedCount;//[Offset: 0xe74, Size: 32]
	VerifySwitch DSNonSprintNonAimCrouchMoveSpeedExceedCount;//[Offset: 0xe94, Size: 32]
	VerifySwitch NonGunADSFarShootCount;//[Offset: 0xeb4, Size: 32]
	VerifySwitch NonGunADSFarShootFromClientBulletDataCount;//[Offset: 0xed4, Size: 32]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceTrialCount;//[Offset: 0xef4, Size: 32]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceFurtherTrialCount;//[Offset: 0xf14, Size: 32]
	VerifySwitch ClientUploadFuzzyObjectVerifyFail;//[Offset: 0xf34, Size: 32]
	VerifySwitch ClientMoveTimeStampResetFrequencyExceedThreshold;//[Offset: 0xf54, Size: 32]
	VerifySwitch ShootBirdNonGunADSExceedThreshold;//[Offset: 0xf74, Size: 32]
	VerifySwitch ShootBirdNonGunADSDistanceTrial;//[Offset: 0xf94, Size: 32]
	VerifySwitch ShootBirdNonGunADSDistanceFurtherTrial;//[Offset: 0xfb4, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedExceedThreshold;//[Offset: 0xfd4, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceTrial;//[Offset: 0xff4, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceFurtherTrial;//[Offset: 0x1014, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedTrial;//[Offset: 0x1034, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedFurtherTrial;//[Offset: 0x1054, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKill;//[Offset: 0x1074, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillDistanceTrial;//[Offset: 0x1094, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillTimeTrial;//[Offset: 0x10b4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillMaxTime;//[Offset: 0x10d4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItem;//[Offset: 0x10f4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemDistanceTrial;//[Offset: 0x1114, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemTimeTrial;//[Offset: 0x1134, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemMaxTime;//[Offset: 0x1154, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKill;//[Offset: 0x1174, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillDistanceTrial;//[Offset: 0x1194, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillTimeTrial;//[Offset: 0x11b4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillMaxTime;//[Offset: 0x11d4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicle;//[Offset: 0x11f4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleDistanceTrial;//[Offset: 0x1214, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleTimeTrial;//[Offset: 0x1234, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleMaxTime;//[Offset: 0x1254, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicle;//[Offset: 0x1274, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleTimeTrial;//[Offset: 0x1294, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleMaxTime;//[Offset: 0x12b4, Size: 32]
	VerifySwitch IllegalTeamUpUseObjectTogether;//[Offset: 0x12d4, Size: 32]
	VerifySwitch IllegalTeamUpGetOnEnemyVehicleCount;//[Offset: 0x12f4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFoot;//[Offset: 0x1314, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFootDistanceTrial;//[Offset: 0x1334, Size: 32]
	VerifySwitch IllegalTeamUpStayOnEnemyVehicle;//[Offset: 0x1354, Size: 32]
	VerifySwitch KillBird;//[Offset: 0x1374, Size: 32]
	VerifySwitch ParachuteLandingSecondsExceedThreshold;//[Offset: 0x1394, Size: 32]
	VerifySwitch ParachuteObliqueLandingSecondsExceedThreshold;//[Offset: 0x13b4, Size: 32]
	VerifySwitch ShootBird;//[Offset: 0x13dc, Size: 32]
	VerifySwitch DSFallingSpeedFailCount;//[Offset: 0x13fc, Size: 32]
	VerifySwitch DSFallingHeightFailCount;//[Offset: 0x141c, Size: 32]
	int PVSInCityKillCount;//[Offset: 0x143c, Size: 4]
	int PVSNotInCityKillCount;//[Offset: 0x1440, Size: 4]
	float PVSInCityKillTotalTime;//[Offset: 0x1444, Size: 4]
	float PVSNotInCityKillTotalTime;//[Offset: 0x1448, Size: 4]
	float PVSInCityKillerTotalMoveDistance;//[Offset: 0x144c, Size: 4]
	float PVSNotInCityKillerTotalMoveDistance;//[Offset: 0x1450, Size: 4]
	int PVSRayUseTimeRatio;//[Offset: 0x1454, Size: 4]
	int PVSRayTaskFinishPercent;//[Offset: 0x1458, Size: 4]
	int PVSRayHidePercent;//[Offset: 0x145c, Size: 4]
	int PVSCellHidePercent;//[Offset: 0x1460, Size: 4]
	int PVSTotalHidePercent;//[Offset: 0x1464, Size: 4]
	VerifySwitch ShooterCapsuleCollided;//[Offset: 0x1470, Size: 32]
	VerifySwitch JumpReviewHighJumpExceed;//[Offset: 0x1490, Size: 32]
	VerifySwitch JumpReviewFarJumpExceed;//[Offset: 0x14b0, Size: 32]
	VerifySwitch JumpReviewLowerFarJump;//[Offset: 0x14d0, Size: 32]
	float ActorTimeDilation;//[Offset: 0x14f0, Size: 4]
	VerifySwitch SmallActorTimeDilationCount;//[Offset: 0x14f4, Size: 32]
	VerifySwitch LargeRotateLockShooting;//[Offset: 0x1514, Size: 32]
	VerifySwitch SmallRotateLockShooting;//[Offset: 0x1534, Size: 32]
	VerifySwitch OneClipShootCount;//[Offset: 0x1554, Size: 32]
	VerifySwitch ClientWeaponFastReload;//[Offset: 0x1574, Size: 32]
	VerifySwitch WalkSpeedFailedCnt;//[Offset: 0x1594, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistance2D;//[Offset: 0x16d4, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistance2DTrial;//[Offset: 0x16f4, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistance2DFurther;//[Offset: 0x1714, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistanceZ;//[Offset: 0x1734, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistanceZTrial;//[Offset: 0x1754, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistanceZFurther;//[Offset: 0x1774, Size: 32]
	float MaxFallingSustainTime;//[Offset: 0x1794, Size: 4]
	VerifySwitch ReplayMaxFallingSustainTime;//[Offset: 0x1798, Size: 32]
	float MaxCustomMoveModeSustainTime;//[Offset: 0x17b8, Size: 4]
	VerifySwitch ReplayMaxCustomMoveModeSustainTime;//[Offset: 0x17bc, Size: 32]
	float MaxMoveDistance2DPerSecond;//[Offset: 0x17dc, Size: 4]
	float MaxDistanceToGround;//[Offset: 0x17e0, Size: 4]
	float MaxSingleShotDamage;//[Offset: 0x17e4, Size: 4]
	VerifySwitch ReplayMaxSingleShotDamage;//[Offset: 0x17e8, Size: 32]
	VerifySwitch UndergroundCount;//[Offset: 0x1808, Size: 32]
	VerifySwitch MoveDistance2DPerSecondAnomaly;//[Offset: 0x1828, Size: 32]
	VerifySwitch DistanceToGroundAnomaly;//[Offset: 0x1848, Size: 32]
	VerifySwitch SingleShotDamageAnomaly;//[Offset: 0x1868, Size: 32]
	BurstVerifySwitch DSSpeedOver10BurstCount;//[Offset: 0x1888, Size: 100]
	VerifySwitch KillBeforeSearchNearbyHouse;//[Offset: 0x18ec, Size: 32]
	VerifySwitch BandaCount;//[Offset: 0x190c, Size: 32]
	VerifySwitch LargeInstantAimShoot;//[Offset: 0x192c, Size: 32]
	VerifySwitch SmallInstantAimShoot;//[Offset: 0x194c, Size: 32]
	VerifySwitch LargeInstantAimHit;//[Offset: 0x196c, Size: 32]
	VerifySwitch SmallInstantAimHit;//[Offset: 0x198c, Size: 32]
	BurstVerifySwitch ParachuteSpeedBurst;//[Offset: 0x19ac, Size: 100]
	BurstVerifySwitch ParachuteSpeedBurstTrial;//[Offset: 0x1a10, Size: 100]
	BurstVerifySwitch ClientTimestampBurst;//[Offset: 0x1a74, Size: 100]
	BurstVerifySwitch ClientTimestampBurstTrial;//[Offset: 0x1ad8, Size: 100]
	float ParachuteStartTime;//[Offset: 0x1bb8, Size: 4]
	float ParachuteOpenTime;//[Offset: 0x1bbc, Size: 4]
	float ParachuteCloseTime;//[Offset: 0x1bc0, Size: 4]
	float ParachuteStartHight;//[Offset: 0x1bc4, Size: 4]
	float ParachuteOpenHight;//[Offset: 0x1bc8, Size: 4]
	float ParachuteCloseHight;//[Offset: 0x1bcc, Size: 4]
	<enum,uint32> ReportMiscMap;//[Offset: 0x1c48, Size: 60]
	int PlayerBadPingTimes;//[Offset: 0x1c84, Size: 4]
	int BulletTrackComponentUseTss;//[Offset: 0x1c98, Size: 4]
	VerifySwitch VsPetJumpHeightLimiter;//[Offset: 0x1c9c, Size: 32]
	VerifySwitch VsPetMoveSpeedLimiter;//[Offset: 0x1cbc, Size: 32]
	VerifySwitch VsBioVehicleMoveSpeedLimiter;//[Offset: 0x1cdc, Size: 32]
	VerifySwitch ServerMoveCacheCountOver;//[Offset: 0x1cfc, Size: 32]
	VerifySwitch ServerMoveBurst;//[Offset: 0x1d1c, Size: 32]
	VerifySwitch KillOtherAfterBurst;//[Offset: 0x1d3c, Size: 32]
	void ReportAntiCheatDetailData();// 0x37e80ac
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x37e8010
	void OnRecoverOnServer();// 0x37e7ffc
	void OnPreReconnectOnServer();// 0x37e7ffc
	FString GetWHCString(int StartInclusive, int EndInclusive);// 0x37e7eb0
	int GetWHCountByID(const int ID);// 0x37e7e30
	FString GetAACString(int StartInclusive, int EndInclusive);// 0x37e7ce4
	int GetAACCountByID(const int ID);// 0x37e7c64
	void ExitParachute();// 0x37e7c50
	void EnterParachute();// 0x37e7c3c
	void EnterJumping();// 0x37e7c28

--------------------------------
Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BurstVerifySwitch.VerifySwitch
	float BurstTime;//[Offset: 0x5c, Size: 4]
	int BurstCount;//[Offset: 0x60, Size: 4]

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 4]
	uint32 EventID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x8, Size: 8]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: TeamMateStateInfo
	byte DirtyFlags;//[Offset: 0x0, Size: 1]
	STExtraPlayerState* PlayerState;//[Offset: 0x4, Size: 4]
	Vector_NetQuantize10 Location;//[Offset: 0x8, Size: 12]
	Rotator Rotation;//[Offset: 0x14, Size: 12]
	float PlayerHealth;//[Offset: 0x20, Size: 4]
	float PlayerHealthMax;//[Offset: 0x24, Size: 4]
	int MemberIdInVoiceRoom;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	byte uavType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: BackpackRepActor.PlayerReliableSequentialSyncActor.PlayerActorChannelExActor.Actor.Object
	BackpackComponent* BackpackComp;//[Offset: 0x31c, Size: 4]
	IncNetArray ItemListNet;//[Offset: 0x320, Size: 24]
	void OnRep_ItemListNet();// 0x4119668
	void NotifyItemUpdated(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x4119560
	void NotifyItemRemoved(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x4119458
	void NotifyItemEmpty(int Slack);// 0x41193e0
	void NotifyItemAdded(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x41192d8

--------------------------------
Class: PlayerReliableSequentialSyncActor.PlayerActorChannelExActor.Actor.Object
	PlayerController* OwningController;//[Offset: 0x318, Size: 4]
	void OnActorSpawned(Actor* Actor);// 0x3c8065c

--------------------------------
Class: PlayerActorChannelExActor.Actor.Object

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0xc4, Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0xc8, Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xcc, Size: 4]
	void SetAutoOpenDoorMode(int Mode);// 0x367bd2c
	void SetAutoOpenDoorEnable(bool bEnable);// 0x367bcac
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x367bbb0
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int DoorState);// 0x367bab4
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x367ba34
	PUBGDoor* GetPriorityDoor();// 0x367ba0c
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x367b8b4
	void BP_SimulateUIClick(bool bExtraDoor);// 0x4a51734
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x4a51734

--------------------------------
Class: ChatComponent.LuaActorComponent.ActorComponent.Object
	int end_time;//[Offset: 0x154, Size: 4]
	FString Reason;//[Offset: 0x158, Size: 12]
	int[] audioChat;//[Offset: 0x164, Size: 12]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0x170, Size: 12]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0x17c, Size: 12]
	QuickChatOption[] allChatOption;//[Offset: 0x188, Size: 12]
	int MinTraceDist;//[Offset: 0x194, Size: 4]
	FString TeammateColor;//[Offset: 0x198, Size: 12]
	FString MyColor;//[Offset: 0x1a4, Size: 12]
	<int,FString> ActorNameList;//[Offset: 0x1b0, Size: 60]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x1ec, Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x228, Size: 12]
	float SendMsgCD;//[Offset: 0x234, Size: 4]
	ReportChatMsgInfo ChatMsgInfo;//[Offset: 0x238, Size: 28]
	float lastShowChatTime;//[Offset: 0x254, Size: 4]
	float ShowChatDuration;//[Offset: 0x258, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x25c, Size: 12]
	FString EndChar;//[Offset: 0x268, Size: 12]
	FString ColonChar;//[Offset: 0x274, Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x280, Size: 60]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x2bc, Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x2c8, Size: 4]
	byte[] ExtendParamsCache;//[Offset: 0x2d0, Size: 12]
	int itemIDOnGround;//[Offset: 0x324, Size: 4]
	int itemOnGroundNetGUID;//[Offset: 0x328, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x32c, Size: 4]
	Vector hitItemPosition;//[Offset: 0x330, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x340, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x34c, Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x358, Size: 12]
	InGameChatMsg CurrMsg;//[Offset: 0x364, Size: 88]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool AutoLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x4a51734
	void TransformMsgAndSend(FString Msg, int MsgID, int ItemId, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x366ee28
	void ShowTeamMsg(out const InGameChatMsg MsgItem, bool isMe, bool ShowChat, bool PlaySound, bool bControlByMaxShowDis);// 0x366ec08
	void ShowQuickPanel(bool bShow);// 0x366eb88
	void SetReportChatMsgInfo(out const InGameChatMsg OriginalChatMsg);// 0x366eaa8
	void SetExtendParamsCache(out const byte[] Content);// 0x366e9dc
	void ServerSendMsgToSameCamp(const InGameChatMsg MsgItem, byte CheckSetting);// 0x366e88c
	void ServerSendMsgToAll(const InGameChatMsg MsgItem, byte CheckSetting);// 0x366e73c
	void ServerSendMsg(const InGameChatMsg MsgItem, byte CheckSetting, bool bIncludeTeammates);// 0x366e590
	void ServerSendGift(const InGameChatMsg MsgItem);// 0x366e488
	void SendToSameCamp(FString Msg);// 0x366e3cc
	void SendToAllPlayer(FString Msg);// 0x366e310
	void SendDirtyFilterContent(FString Content);// 0x4a51734
	void SendDirtyFilter(FString Name, FString Content, bool isMe, bool bSTTMsg);// 0x4a51734
	void SendCustomMsgToSameCamp(FString Message, int MsgExtraParam, bool bSpeechToText);// 0x366e1c4
	void SendCustomMsgToAll(FString Message, int MsgExtraParam, bool bSpeechToText);// 0x366e078
	void ReportBattleChat(int MsgID, FString Msg, int MsgExtraParam);// 0x4a51734
	void OnPreFilterFinish(FString Name, FString Content, bool isMe, bool bSTTMsg);// 0x4a51734
	void OnInviteNextBattle(FString gid, FString Name);// 0x366df38
	void OnFinishPreFilter(FString filterText, FString OriText);// 0x366ddf8
	void OnFilterFinishWithMsgID(FString filterText, int MsgID, FString Name);// 0x4a51734
	void OnFilterFinish(FString filterText);// 0x4a51734
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x4a51734
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x4a51734
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x4a51734
	void MakeQuickSignMark(out const InGameChatMsg MsgItem, bool isMe, enum flagType, bool bControlByMaxShowDis);// 0x366dc34
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x366daf4
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x366d968
	ReportChatMsgInfo GetReportChatMsgInfo();// 0x366d888
	void ForceClearitemIDOnGround();// 0x366d874
	void FindTextIDByAudioID();// 0x4a51734
	void CloseChatHistoryList();// 0x4a51734
	void ClientReceiveMsg(const InGameChatMsg MsgItem, bool isMe, byte CheckSetting);// 0x366d708
	void ClientReceiveGift(const InGameChatMsg MsgItem, bool isMe);// 0x366d5e4
	bool CheckSpecialChatCD(int MsgID);// 0x366d564
	bool CheckNeedReportChatMsgInfo();// 0x366d53c
	byte CheckIsNeedShow(byte CheckSetting);// 0x366d4b4
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x366d3f8
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x4a51734
	void AddOneMarkToUI(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x4a51734
	void AddFriendChat(FString gid, FString Name, FString Content, bool IsSelf);// 0x366d020

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 4]
	int RealTextID;//[Offset: 0x4, Size: 4]
	int AlternateTextID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0, Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 12]
	FString Content;//[Offset: 0xc, Size: 12]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int MsgType;//[Offset: 0x1c, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 1]
	int[] chatIDList;//[Offset: 0x4, Size: 12]
	int AlternateChatID;//[Offset: 0x10, Size: 4]
	int FlagIndex;//[Offset: 0x14, Size: 4]
	int traceDist;//[Offset: 0x18, Size: 4]
	float minDist;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ReportChatMsgInfo
	FString msgContent;//[Offset: 0x0, Size: 12]
	uint32 ItemId;//[Offset: 0xc, Size: 4]
	Vector hitPosition;//[Offset: 0x10, Size: 12]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0, Size: 4]
	int flagID;//[Offset: 0x4, Size: 4]
	Vector hitPosition;//[Offset: 0x8, Size: 12]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	uint32 playerIdentifier;//[Offset: 0xc, Size: 4]
	FString msgContent;//[Offset: 0x10, Size: 12]
	int MsgID;//[Offset: 0x1c, Size: 4]
	int audioID;//[Offset: 0x20, Size: 4]
	int ItemId;//[Offset: 0x24, Size: 4]
	FString PlayerKeyString;//[Offset: 0x28, Size: 12]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector hitPosition;//[Offset: 0x38, Size: 12]
	int itemIDOnGround;//[Offset: 0x44, Size: 4]
	bool bSTTMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	byte[] ExtendParams;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0xc4, Size: 12]
	Widget* MaskWidget;//[Offset: 0xd0, Size: 8]
	void SetMaskWidgetOnTop(bool bTop);// 0x372aae0
	void CreateGuideUI();// 0x4a51734

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0, Size: 4]
	int guildUI;//[Offset: 0x4, Size: 4]
	Vector2D Offset;//[Offset: 0x8, Size: 8]
	Vector2D Size;//[Offset: 0x10, Size: 8]
	int childData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignComponent.LuaActorComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0x150, Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0x15c, Size: 12]
	delegate OnDangerousQuickSignDelegate;//[Offset: 0x168, Size: 12]
	delegate FOnSignPickUpActoDelegate;//[Offset: 0x174, Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	int TextID_OutRange;//[Offset: 0x184, Size: 4]
	FString PreFix_Command;//[Offset: 0x188, Size: 12]
	FString PreFix_Command_Res;//[Offset: 0x194, Size: 12]
	FString PreFix_Mark;//[Offset: 0x1a0, Size: 12]
	FString PreFix_MarkBox;//[Offset: 0x1ac, Size: 12]
	FName IgnoreTag;//[Offset: 0x1b8, Size: 8]
	int MinTraceDist;//[Offset: 0x1c0, Size: 4]
	int MaxTraceDist;//[Offset: 0x1c4, Size: 4]
	int ItemTraceDist;//[Offset: 0x1c8, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x1cc, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x1d0, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x1d4, Size: 4]
	float MinHighLightDangerousTime;//[Offset: 0x1d8, Size: 4]
	float MinHighLightDangerousDistance;//[Offset: 0x1dc, Size: 4]
	float DangerousMarkLifeSpan;//[Offset: 0x1e0, Size: 4]
	<int,DangerousSignInfo> LastDangerousID;//[Offset: 0x1e4, Size: 60]
	int MarkMaxNum;//[Offset: 0x220, Size: 4]
	float ReplyDelayTime;//[Offset: 0x224, Size: 4]
	bool bHasSendLongPressTLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x22c, Size: 4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x230, Size: 60]
	<class Object,FString> MarkNameClassMap;//[Offset: 0x26c, Size: 60]
	<int,FString> BoxTypeNameMap;//[Offset: 0x2a8, Size: 60]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x2e4, Size: 60]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x320, Size: 60]
	FString[] HasReplyMsg;//[Offset: 0x35c, Size: 12]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x368, Size: 60]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x3a4, Size: 60]
	int[] ServerCachedNetGUIDs;//[Offset: 0x3e0, Size: 12]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x3ec, Size: 12]
	FString[] TempIDArray;//[Offset: 0x3f8, Size: 12]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x404, Size: 60]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x440, Size: 60]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x4c4, Size: 60]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x500, Size: 60]
	byte MaxSendCountPerSecond;//[Offset: 0x53c, Size: 1]
	ReportQuickSignMsg SignMsgInfo;//[Offset: 0x540, Size: 20]
	<FString,QuickSignMark> CustomMarkInfoMap;//[Offset: 0x590, Size: 60]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x383788c
	void SpectatorActorMark(out const QuickSignMsg OriMarkInfo, out QuickSignMsg MarkInfo, Actor* Actor);// 0x4a51734
	void ShowMsgTipsVoice(out const QuickSignMsg MsgItem, bool IsSelf, FString PlayerKey);// 0x4a51734
	void SetReportSignMsgInfo(out const QuickSignMsg OriginalSignMsg);// 0x38377b0
	void ServerSendMsg(const QuickSignMsg MsgItem, byte SignType);// 0x3837664
	void ServerMarkCustom(out const QuickSignMsg MsgItem, float ShareDistance, bool ShareWithTeammates);// 0x38374f8
	void ServerDelNetGuid(int Guid);// 0x3837480
	void ServerDelMsg(FString MsgID);// 0x383738c
	void ServerDelCustomMark(FString MsgID, bool ShareWithTeammates);// 0x383723c
	void ServerAddNetGuid(int Guid);// 0x38371c4
	void ReportQuickSign(out const QuickSignMsg MsgItem);// 0x4a51734
	void RemoveActorMask(int ActorNetGUID);// 0x3837110
	void OperMark(FString MsgID);// 0x3837054
	void OnPickUpActor(int Guid);// 0x3836fdc
	void MakeQuickNeed(enum SignSubType);// 0x3836f64
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor, int RelationID, bool bNeedTransform);// 0x3836e5c
	void MakeQuickMark(Actor* SpecificActor);// 0x3836de4
	void MakeQuickCommand(byte SignType);// 0x3836d6c
	void MakeCustomMark(Vector targetPos, FString SignConfigKey);// 0x3836c6c
	bool IsSelfMark(FString MsgID);// 0x3836ba8
	bool IsContainMark(FString MsgID);// 0x3836ae4
	int GetVoiceAudioID(enum MsgType);// 0x4a51734
	ReportQuickSignMsg GetReportChatSignInfo();// 0x3836a98
	bool GetRelationActorMsg(int ActorGUID, int RelationID, out QuickSignMsg MsgItem);// 0x383692c
	bool GenerateMarkInfo(out const QuickSignMsg MsgItem, out QuickSignMark MarkInfo);// 0x4a51734
	FString FindMarkNameClassKey(class Object uMarkClass);// 0x3836828
	void DelSpecialReplyMsg(out const QuickSignMark MsgItem);// 0x3836730
	void DelMarkFromPool(FString MsgMark, bool bIsCheckSenderMap);// 0x3836628
	void DelAllMarkMsgForReplay();// 0x3836614
	void DealWithNewMsg(out const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey, bool ShowChat, bool bControlByMaxShowDis);// 0x383632c
	void DealWithMarkCustomMsg(out const QuickSignMsg MsgItem, bool IsSelf);// 0x3836204
	void ClientReceiveMsg(const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey);// 0x383605c
	void ClientMarkCustomMsg(const QuickSignMsg MsgItem, bool IsSelf);// 0x3835f3c
	void ClientDelMsg(FString MsgID);// 0x3835e78
	void ClientDelCustomMarkMsg(FString MsgID);// 0x363de74
	bool CheckNeedReportSignMsgInfo();// 0x3835e50
	void CheckMsgValid();// 0x3835e3c
	void AnalysisConfigKeyClass(FString ConfigId, FString ConfigScriptParam);// 0x3835cfc
	void AddSpecialReplyMsg(out const QuickSignMark MsgItem);// 0x3835c04
	void AddRelationActorMap(out const QuickSignMsg MsgItem);// 0x3835b28
	void AddNewMark(out const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey, bool bControlByMaxShowDis);// 0x383588c
	void AddMarkToPool(out const QuickSignMark MsgMark, FString SenderPlayerKey);// 0x3835674
	void AddActorMask(int ActorNetGUID);// 0x38355c0

--------------------------------
Class: DangerousSignInfo
	FString MsgID;//[Offset: 0x0, Size: 12]
	Vector LastDangerousLocation;//[Offset: 0xc, Size: 12]
	float LastMarkDangerousTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString MarkType;//[Offset: 0xc, Size: 12]
	FString IconPath;//[Offset: 0x18, Size: 12]
	FString IconBGPath;//[Offset: 0x24, Size: 12]
	FString IconOuterPath;//[Offset: 0x30, Size: 12]
	FString IconOuterBGPath;//[Offset: 0x3c, Size: 12]
	FString IconOutScreenIconPath;//[Offset: 0x48, Size: 12]
	FString IconOutScreenBGPath;//[Offset: 0x54, Size: 12]
	FString IconOutScreenArrowPath;//[Offset: 0x60, Size: 12]
	FString ReplyID;//[Offset: 0x6c, Size: 12]
	Vector Loc;//[Offset: 0x78, Size: 12]
	int MaxNum;//[Offset: 0x84, Size: 4]
	int LifeSpan;//[Offset: 0x88, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	FString SenderPlayerKey;//[Offset: 0x90, Size: 12]
	bool bControlByMaxShowDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ReportQuickSignMsg
	Vector HitPos;//[Offset: 0x0, Size: 12]
	uint32 ItemId;//[Offset: 0xc, Size: 4]
	enum MsgType;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xc4, Size: 4]
	FString OwningPlayerName;//[Offset: 0xc8, Size: 12]
	int RetrieveUseItemAreaType(int ItemId, Vector PlayerLocation);// 0x3618d90
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x3618d18
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x3618c0c
	int RetrieveLandLocType(FString TargetName);// 0x3618aac
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x36186c4
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x4a51734
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x4a51734
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x4a51734
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x4a51734
	FString GetOwningPlayerName();// 0x3618604
	FString GetMapName();// 0x3618544
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x4a51734
	int GetItemUseAreaIDFromDataTable(int ItemId, Vector InPlayerLocation);// 0x4a51734

--------------------------------
Class: BattleItemSpectatingData
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int AdditionalData;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 12]
	byte gender;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SyncOBDataActor.Actor.Object
	PlayerStaticInfoInOB[] TotalPlayersStatic;//[Offset: 0x310, Size: 12]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x31c, Size: 12]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x328, Size: 12]
	PlayerBreathInfoList PlayerBreathInfoList;//[Offset: 0x338, Size: 32]
	PlayerFiringList PlayerFiringList;//[Offset: 0x358, Size: 16]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x368, Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x374, Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x380, Size: 12]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x38c, Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x398, Size: 60]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bRefreshPosWhenDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	void OnRep_TotalPlayersStaticInfo();// 0x3a7c250
	void OnRep_RefreshTotalPlayers();// 0x3a7c23c
	void OnRep_RefreshAirDropBox();// 0x3a7c228
	void OnRep_PlayerFiringList();// 0x3a7c214
	void OnRep_PlayerBreathInfoList();// 0x3a7c200
	Vector GetNewestAirDropBoxPos();// 0x3a7c1b8
	PlayerInfoInOB[] GetNearPlayerList();// 0x3a7c0a8
	float GetBreath(uint32 InPlayerKey);// 0x3a7c028
	AirDropBoxInOb[] GetAirDropBoxList();// 0x3a7bfbc

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerOpenID;//[Offset: 0xc, Size: 12]
	FString PicUrl;//[Offset: 0x18, Size: 12]
	int TeamID;//[Offset: 0x24, Size: 4]
	byte IndexInMap;//[Offset: 0x28, Size: 1]
	uint64 UID;//[Offset: 0x30, Size: 8]
	uint32 PlayerKey;//[Offset: 0x38, Size: 4]

--------------------------------
Class: PlayerBaseInfoInOB
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 4]
	uint32 PlayerKey;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PlayerBreathInfoList
	uint64 PlayerIndexLow;//[Offset: 0x0, Size: 8]
	uint64 PlayerIndexHigh;//[Offset: 0x8, Size: 8]
	byte[] BreathList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: PlayerFiringList
	uint64 PlayerFiringIndexLow;//[Offset: 0x0, Size: 8]
	uint64 PlayerFiringIndexHigh;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	uint64 UID;//[Offset: 0x28, Size: 8]
	FString PlayerName;//[Offset: 0x30, Size: 12]
	FString PlayerOpenID;//[Offset: 0x3c, Size: 12]
	FString PicUrl;//[Offset: 0x48, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	int TeamID;//[Offset: 0x58, Size: 4]
	FString TeamName;//[Offset: 0x5c, Size: 12]
	Pawn* Character;//[Offset: 0x68, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 4]
	FString TeamName;//[Offset: 0x4, Size: 12]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString LogoPicUrl;//[Offset: 0x14, Size: 12]
	int KillNum;//[Offset: 0x20, Size: 4]
	int LiveMemberNum;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPlayerInfoInOB
	FString PlayerKey;//[Offset: 0x0, Size: 12]
	int TeamID;//[Offset: 0xc, Size: 4]
	Pawn* Character;//[Offset: 0x10, Size: 8]

--------------------------------
Class: AllStarReportData
	bool bShowReportFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int BeReportedNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PicUrl;//[Offset: 0xc, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int TeamID;//[Offset: 0x1c, Size: 4]
	uint64 UID;//[Offset: 0x20, Size: 8]
	Vector[] PosList;//[Offset: 0x28, Size: 12]
	uint32 PlayerKey;//[Offset: 0x34, Size: 4]

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 12]
	uint32 CharacterGUID;//[Offset: 0xc, Size: 4]
	int SyncTicket;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 12]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc, Size: 4]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x310, Size: 4]
	Rotator TargetKillerRotation;//[Offset: 0x314, Size: 12]
	Actor* ReturnActor;//[Offset: 0x320, Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x350, Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x354, Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x358, Size: 12]
	float MinMovingSpeed;//[Offset: 0x364, Size: 4]
	float MaxMovingTime;//[Offset: 0x368, Size: 4]
	float ObservingTime;//[Offset: 0x36c, Size: 4]
	float TrackingDelay;//[Offset: 0x370, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x374, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x378, Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x380, Size: 4]
	float DriverArmLenth;//[Offset: 0x384, Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x38c, Size: 4]
	void TargetChangeForPCOB();// 0x3592f9c
	static KillerTracker* StartTrackingKiller(class KillerTracker Template, Actor* Killer, PlayerController* PC, Vector InitLocation, Rotator InitRotation);// 0x374cce8
	void ForceEnd();// 0x374ccd4

--------------------------------
Class: VehicleUserComponent.VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
	ItemDefineID LastUsedItemDefineID;//[Offset: 0x1b0, Size: 24]
	float LastFinishCD;//[Offset: 0x1c8, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool bReconnectSkipFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	delegate OnAtomicStateChanged;//[Offset: 0x1d0, Size: 12]
	delegate OnClosestVehicleChanged;//[Offset: 0x1dc, Size: 12]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0x1e8, Size: 4]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x1ec, Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x1f0, Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0x1f8, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x204, Size: 12]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x210, Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x21c, Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x230, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x244, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x254, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x258, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x25c, Size: 4]
	float MaxCanAimAngle;//[Offset: 0x260, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x268, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x26c, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x270, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x274, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x27c, Size: 4]
	float LastSpeed;//[Offset: 0x288, Size: 4]
	float LastHeight;//[Offset: 0x28c, Size: 4]
	float LastLandHeight;//[Offset: 0x290, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x298, Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x29c, Size: 4]
	Rotator InputExtraRot;//[Offset: 0x2a0, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x2ac, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x2bc, Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x2f8, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x300, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x308, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x30c, Size: 4]
	enum CurrentSeatType;//[Offset: 0x310, Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x33c, Size: 4]
	float FastestAllowDistance;//[Offset: 0x340, Size: 4]
	float NearVehicleTickRate;//[Offset: 0x344, Size: 4]
	int VehicleIconID;//[Offset: 0x348, Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x364, Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x374, Size: 12]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x380, Size: 12]
	delegate OnRefuseExchangeVehicleSeat;//[Offset: 0x38c, Size: 12]
	bool bDebugResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	float EnterVehicleCheatingCheckDis;//[Offset: 0x3a0, Size: 4]
	void UseVehicleWeaponOrNot();// 0x3b430b8
	void UpdateVehWeaponPassengerViewLimit();// 0x3b430a4
	void UpdatePassengerViewPitchLimit();// 0x3b43090
	void TurnVehicle(float rate);// 0x37b965c
	void TryUseHorn(bool bUse);// 0x3b43010
	void TryShutDownUnmannedVehicle();// 0x3b42ffc
	void TryPauseUnmannedVehicle();// 0x3b42fe8
	bool TryLeanOutOrIn(bool bAutoLeanOut, bool bForce);// 0x3b42f10
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x3b42e98
	void TryLaunchCurrentUnmannedVehicle();// 0x3b42e78
	void TryExitVehicle();// 0x3b42e64
	void TryEnterVehicleInReady(STExtraVehicleBase* InVehicle, enum SeatType);// 0x3b42da8
	bool TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x3b42ce4
	void TryEnterAttachVehicle(enum InSeatType);// 0x3b42c6c
	void TryChangeVehicleSeat();// 0x3b42c58
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x3b42bd8
	bool TryChangeFreeFireSeatAndScopeIn();// 0x3b42bb0
	bool TryChangeFreeFireSeatAndLeanOut();// 0x3b42b88
	void TryAutonomousDriving(bool bEnable);// 0x3b42b08
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x4a51734
	void TestMoveVehicleUp(float rate);// 0x3b42a90
	void TestMoveVehicleRight(float rate);// 0x3b42a18
	void TestMoveVehicleForward(float rate);// 0x3b429a0
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x3b428dc
	void StopFireVehicleWeapon();// 0x3b428c8
	bool ShowVehicleWeaponUI();// 0x3b428a0
	void SetVehicleUserState(enum UserState);// 0x3b4282c
	void SetVehicleIgnoreLookInput(bool bNewIgnore);// 0x3b427ac
	void SetPlayMusic(bool bEnabled);// 0x3b4272c
	void SetLastDriveVehicle(STExtraVehicleBase* LastVehicle);// 0x3b426b4
	void SetIsAutoMoveForward(bool IsEnable);// 0x3b42634
	void SetClosestVehicle(STExtraVehicleBase* InVehicle);// 0x3b425b8
	void SetBrake(float rate);// 0x3b42538
	void SetBoosting(bool bEnabled);// 0x3b424b0
	void SetAirControlF(float rate);// 0x369aa7c
	void SetAirControlB(float rate);// 0x3b07fac
	void ServerUseVehicleWeaponOrNot(int SeatID, bool bUse);// 0x3b423a0
	void ServerStopFireVehicleWeapon();// 0x3b42344
	void ServerReqQuickSwitchSeat(STExtraPlayerCharacter* ReqTarget);// 0x3b42290
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x3b421cc
	void ServerEquipVehicleWeaponOrNot(int SeatID, bool bEquip);// 0x3b420bc
	bool ServerEnterVehicleWithFailedReason(STExtraVehicleBase* InVehicle, enum SeatType, const int ConditionsIgnore, out enum OutFailedReason);// 0x3b41f5c
	void ServerDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x3b41ee4
	void ServerAgreeQuickSwitchSeat(bool bIsAgree);// 0x3b41e1c
	void Server_JoystickCenterClickHandler();// 0x3b41dc0
	void SendToServerUnmannedVehicleUse();// 0x3b41d64
	void SendToServerUnmannedVehicleRecall();// 0x3b41d08
	void SendToServerUnmannedVehiclePause();// 0x3b41cac
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x3b41c24
	void RspRefuseExchangeVehicleSeat(STExtraPlayerCharacter* acceptPlayer);// 0x3b41ba4
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x3b41ad8
	void RspLeanOut(bool bOut);// 0x3b41a50
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x3b41984
	void RspExitVehicle(bool bSuccess);// 0x3b418fc
	void RspExchangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd);// 0x3b417f0
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x3b41694
	void RspEnterAttachVehicle(STExtraVehicleBase* InVehicle, bool InSuccess, enum InSeatType, int InSeatIndex);// 0x3b414ec
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn, int FailTips);// 0x3b412f0
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x3b41218
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x3b4111c
	void ReqShutDownUnmannedVehicle();// 0x3b410c0
	void ReqQuickSwitchSeat();// 0x3b410ac
	void ReqPauseUnmannedVehicle();// 0x3b41050
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x3b40f54
	void ReqLeanOut(bool IsLeanOut);// 0x3b40e8c
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x3b40dd8
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x3b40d2c
	void ReqExchangeVehicleSeat();// 0x3b40cd0
	void ReqEraseLastDriveVehicle();// 0x3b40c74
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x3b40b78
	void ReqEnterAttachVehicle(STExtraVehicleBase* InVehicle, enum InSeatType);// 0x3b40a7c
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x3b409c8
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x3b40900
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x3b40838
	void ReqAutonomousDriving(bool bEnable);// 0x3b40770
	void ReqAcceptExchangeVehicleSeat(bool IsAccept);// 0x3b406a8
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x3b40630
	void OnUnmannedVehicle_Standby_Reconnet();// 0x4a51734
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x4a51734
	void OnServerReconnected();// 0x3b4061c
	void OnScopeInAfterChangeSeat();// 0x3b40608
	void OnRep_DefineID();// 0x3b405f4
	void OnRep_BornInVehicle();// 0x3b405e0
	void OnRefuseExchangeVehicleSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x4a51734
	void OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x4a51734
	void OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* Driver);// 0x4a51734
	void OnPauseUnmannedVehicleCompleted();// 0x4a51734
	void OnLeanOutAfterChangeSeat();// 0x3b405cc
	void OnLaunchUnmannedVehicleCompleted();// 0x4a51734
	void OnInputAxisMoveRight(float rate);// 0x4a51734
	void OnInputAxisMoveForward(float rate);// 0x4a51734
	void OnExitVehicleCompleted();// 0x4a51734
	void OnEnterVehicleCompleted(enum SeatType);// 0x4a51734
	void OnCurrrentClosestVehicleChanged();// 0x4a51734
	void OnClientReconnected();// 0x3b405b8
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x4a51734
	void OnAtomicStateChanged__DelegateSignature(bool bEnter);// 0x4a51734
	void NotifyLeaveVehicleFailed();// 0x3b4059c
	void MoveVehicleUp(float rate);// 0x3b4051c
	void MoveVehicleRight(float rate);// 0x3a894b4
	void MoveVehicleForward(float rate);// 0x3671a24
	void MaintenanceVehicle(float addpercenthp, bool fixtire);// 0x3b40458
	bool IsControllingUnmannedVehicle();// 0x3b40430
	bool IsAutoDriving();// 0x3b40408
	bool IgnoreVehicleLookInput();// 0x3b403e0
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x3b40368
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x3b40354
	void HandleLocalBackpackCurrentWeaponFinished();// 0x3b40340
	bool HandleClientReconnecting();// 0x3b40318
	enum GetVehicleUserState();// 0x3b402fc
	STExtraVehicleBase* GetVehicle();// 0x3b402e0
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x3b402c4
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x3b4029c
	bool GetAssistantState();// 0x3b40274
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x3b40114
	void ForceEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x3b4000c
	void ForceChangeVehicleSeat(int TargetSeatIndex);// 0x373a784
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x3b3feb0
	void FlipTrackVehicleDirection();// 0x3b3fe9c
	void FireVehicleWeapon();// 0x3b3fe88
	void DoVehicleLeanOut(bool bLeanOut);// 0x3b3fe00
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x3b3fd28
	void DoEquipAction(bool bEquip);// 0x3b3fca8
	void DoEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x3b3fba0
	void ClosestVehicleDelegate__DelegateSignature();// 0x4a51734
	void ClientReqQuickSwitchSeat(STExtraPlayerCharacter* ReqOrign);// 0x3b3faec
	void ClientDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x38de8a0
	void Client_UnbindTouchEvents();// 0x3b3fa90
	void Client_ShouldBindTouchEvents();// 0x3b3fa34
	void CheckVehicleFuel();// 0x3b3fa20
	bool CheckCanLeanOutVehicle();// 0x3b3f9f8
	void ChangeAssistantState(bool bEnter);// 0x3b3f978
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x3b3f8f8
	bool CanUseVehicleHorn();// 0x3b3f8d0
	bool CanShowEnterBtn(STExtraVehicleBase* InVehicle);// 0x4a51734
	bool CanLeanOutVehicle(STExtraVehicleBase* InVehicle, STExtraPlayerCharacter* InCharacter, int InSeatIndex);// 0x3b3f7c8
	bool CanConsumeReconnectSkipFlag();// 0x3b3f7a0
	bool CanChangeSeat(STExtraVehicleBase* InVehicle);// 0x4a51734
	bool CanAutoDriving();// 0x3b3f778
	void BrakeTrackVehicle(bool bIsBrake);// 0x3b3f6f8
	void AgreeQuickSwitchSeat(bool bIsAgree);// 0x3b3f678
	void AddVehicleFuel(float amount);// 0x37bb5e4

--------------------------------
Class: VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnCanEnterVehicleDelegate;//[Offset: 0x150, Size: 16]
	delegate OnCanExitVehicleDelegate;//[Offset: 0x160, Size: 16]
	STExtraVehicleBase* Vehicle;//[Offset: 0x170, Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0x174, Size: 4]
	enum VehicleUserState;//[Offset: 0x178, Size: 1]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x18c, Size: 4]
	void TurnVehicle(float InRate);// 0x37b965c
	void SetUsingHorn(bool bEnabled);// 0x3b486a4
	void SetBrake(float InRate);// 0x3b42538
	void SetBoosting(bool bEnabled);// 0x3b424b0
	void SetAirControlF(float InRate);// 0x369aa7c
	void SetAirControlB(float InRate);// 0x3b07fac
	void ServerVehicleLeanOut(bool bLeanOut);// 0x3b4861c
	void ServerChangeVehicleSeat(int InSeatIndex);// 0x3b4859c
	void OnEnterVehiclePreStopSkill(UAESkill* CurSkill);// 0x4a51734
	void MoveVehicleUp(float InRate);// 0x3b4051c
	void MoveVehicleRight(float InRate);// 0x3a894b4
	void MoveVehicleForward(float InRate);// 0x3671a24
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x3b40114
	void ForceEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x3b4000c
	void ForceChangeVehicleSeat(int TargetSeatIndex);// 0x373a784
	void DoVehicleLeanOut(bool bLeanOut);// 0x3b3fe00
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x3b3fd28
	void DoEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x3b3fba0
	bool DoChangeVehicleSeat(int InSeatIndex);// 0x3b48514
	bool CanLeanOutOrIn(bool bLeanOut);// 0x3b48484
	bool CanExitVehicle(bool bMustExit);// 0x3b483f4
	bool CanEnterVehicle(STExtraVehicleBase* InVehicle, byte SeatType, out int NewSeatIndex);// 0x3b482dc
	bool CanChangeVehicleSeat(out int InSeatIndex);// 0x3b48244
	bool BPCanEnterVehicle(STExtraVehicleBase* InVehicle, byte SeatType);// 0x3b48178
	void AddVehicleFuel(float InAmount);// 0x37bb5e4

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	enum PawnState;//[Offset: 0x4f4, Size: 1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f6, Size: 1]
	<enum,int> CastFailTipsIDMap;//[Offset: 0x4f8, Size: 60]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 1]
	bool IgnoreConnectionCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x536, Size: 1]
	int InteractiveSkillDurationPhase;//[Offset: 0x538, Size: 4]
	float CancelLockDuration;//[Offset: 0x53c, Size: 4]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x3a9efb4
	float GetSkillDurationScale(UTSkillManagerComponent* SkillManagerComponent);// 0x3a9ef2c
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x3a9ee68
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x3a9edf0

--------------------------------
Class: UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x4e8, Size: 12]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x3a99b3c

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xc4, Size: 12]
	enum StartStateType;//[Offset: 0xd0, Size: 1]
	enum FinishStateType;//[Offset: 0xd1, Size: 1]
	State* CurrentState;//[Offset: 0xd4, Size: 4]
	enum CurrentStateType;//[Offset: 0xd8, Size: 1]
	enum LastStateType;//[Offset: 0xd9, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x4ac, Size: 12]
	FString TreasureBoxName;//[Offset: 0x4b8, Size: 12]
	float TotalHP;//[Offset: 0x4c4, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x4c8, Size: 4]
	float TotalTime;//[Offset: 0x4cc, Size: 4]
	int BoxId;//[Offset: 0x4d0, Size: 4]
	Vector GroupLoc;//[Offset: 0x4d4, Size: 12]
	float DestroyTime;//[Offset: 0x4e0, Size: 4]
	float OperationalDistance;//[Offset: 0x4e4, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x4e8, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x4ec, Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x4f0, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x520, Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x530, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x560, Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x570, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x5a0, Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x5b0, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x5e0, Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x5f0, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x620, Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x624, Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x628, Size: 4]
	class Controller[] InstigatorList;//[Offset: 0x62c, Size: 12]
	class Actor[] DamageCauserList;//[Offset: 0x638, Size: 12]
	enum PickUpBoxType;//[Offset: 0x644, Size: 1]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x646, Size: 1]
	int IconID;//[Offset: 0x648, Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	bool bRegisterRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x696, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x697, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x698, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x69c, Size: 4]
	int HideLightColumn;//[Offset: 0x6a0, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x6a4, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x6a8, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x6ac, Size: 4]
	bool GoUpAnimationHightEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	float GoUpAnimationYawSpeed;//[Offset: 0x6b4, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x6b8, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x6bc, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x6c8, Size: 12]
	bool bImmediateOpenBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	bool IsForbidOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d5, Size: 1]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d6, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x6d8, Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x6dc, Size: 4]
	float StartedTime;//[Offset: 0x6f8, Size: 4]
	enum CurState;//[Offset: 0x6fc, Size: 1]
	uint32 StartedPlayerKey;//[Offset: 0x700, Size: 4]
	int StartedTeamId;//[Offset: 0x704, Size: 4]
	float CountdownTime;//[Offset: 0x708, Size: 4]
	float StartDestroytime;//[Offset: 0x70c, Size: 4]
	int MonsterBoxId;//[Offset: 0x710, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x714, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x718, Size: 60]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x758, Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x75c, Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x760, Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x764, Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x768, Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x76c, Size: 4]
	Object* TriggerActionHost;//[Offset: 0x7a0, Size: 4]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x4a51734
	void ShowMonsterTreasureBox(PlayerController* PC);// 0x3782b54
	void SetDropItems(out const DropPropData[] DropItems, STExtraPlayerState* PlayerState);// 0x4a51734
	void SetClientClientAutoActiveBoxCD(int CD);// 0x3782adc
	void SetAutoActiveBoxCD(int leftTime);// 0x3782a64
	void OnTreasureBoxPicked__DelegateSignature();// 0x4a51734
	void OnSomeonePickItem(uint32 InPC, const int TypeSpecificID);// 0x37829a8
	void OnRep_HideLightColumn();// 0x3782994
	void OnRep_CurState();// 0x3782980
	void OnBoxEmpty();// 0x378296c
	void OnAnimationStop();// 0x3782958
	bool IsShowIcon();// 0x3782930
	int GetMonsterBoxId();// 0x3782908
	enum[] GetDamageableGameObjectType();// 0x3782840
	enum GetCurState();// 0x3782818
	int GetClientClientAutoActiveBoxCD();// 0x37827f0
	void DeActiveMonsterTreasureBox();// 0x37827dc
	bool CanBeDamaged();// 0x37827b4
	void BPRepCurState();// 0x4a51734
	void BPOnStopMonsterTreasureBox();// 0x4a51734
	void BPOnStartMonsterTreasureBox();// 0x4a51734
	void BPOnHideLightColumn();// 0x4a51734
	void BPOnCountdownEnd();// 0x4a51734
	void BPOnBreakMonsterTreasureBox();// 0x4a51734
	void BPOnAnimationStop();// 0x4a51734
	void BPOnAnimationAkAudioStop();// 0x4a51734
	void BPOnAnimationAkAudioStart();// 0x4a51734
	FString BPGetTreasureBoxName();// 0x4a51734

--------------------------------
Class: UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int iRegionHouse;//[Offset: 0x3a8, Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x3ac, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x3b0, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x3b4, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x3b8, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x3bc, Size: 12]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x3c8, Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool bShouldConsiderDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 1]
	byte[] SerializeData;//[Offset: 0x458, Size: 12]
	void RecordBreakWindowTlog(PlayerController* EventInstigator);// 0x416b2e4
	static void ProcessWindowCreateList();// 0x416b2d0
	void OnRep_WindowList();// 0x416b2bc
	void ClearWindowList();// 0x416b2a8
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x416b080

--------------------------------
Class: AvatarCapture.LuaActor.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x39c, Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x3a0, Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x3a4, Size: 4]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x3a8, Size: 12]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x3b4, Size: 60]
	class AnimInstance* animBP;//[Offset: 0x3f0, Size: 4]
	<int,class AnimInstance> AnimBP_SpecialMap;//[Offset: 0x3f4, Size: 60]
	class AnimInstance* AnimBP_Real;//[Offset: 0x430, Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x434, Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x440, Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	bool bShowingAvatarModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 1]
	<int,FName> SlotToSocket;//[Offset: 0x448, Size: 60]
	FName OBPlayerName;//[Offset: 0x488, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x490, Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x494, Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x498, Size: 4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x49c, Size: 12]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x4a8, Size: 12]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x4b4, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x4b8, Size: 12]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x4c4, Size: 12]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x4d0, Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x4dc, Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x4e0, Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x35a86b4
	void SetEnable(bool IsEnable);// 0x35a8634
	void ResetWeaponPendant(int WeaponId);// 0x35a85bc
	void ResetBackpackPendant(CharacterAvatarComponent2* AvatarComponent);// 0x35a8544
	void RenderCaptureScene();// 0x35a8530
	void RefreshAvatar();// 0x35a851c
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x35a8470
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x35a83a0
	void OnSimulatedWeaponChanged();// 0x35a838c
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemId);// 0x35a8280
	void OnAvatarAllMeshLoaded();// 0x35a826c
	void ModifyAnimationByEquipWeapon(int WeaponId);// 0x3573578
	void ModifyAnimationByCharAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x35738d0
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x35a8150
	int[] GetWeaponSkinIDs();// 0x35a8090
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x35a8068
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x35a7ef4
	void EquipWeapon();// 0x35a7ee0
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x35a7e68
	void DisplayAvatarWithComponent(bool IsEnable, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x35a7d5c
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x35a7c94
	void CreateWeapon(bool IsSkeletalMesh);// 0x35a7c14
	void BluePrintSetEnable(bool IsEnable);// 0x4a51734
	void ApplyAnimation();// 0x35a7c00

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x324, Size: 1]
	float FOVAngle;//[Offset: 0x328, Size: 4]
	float OrthoWidth;//[Offset: 0x32c, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x330, Size: 4]
	byte CaptureSource;//[Offset: 0x334, Size: 1]
	byte CompositeMode;//[Offset: 0x335, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x340, Size: 1312]
	float PostProcessBlendWeight;//[Offset: 0x860, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x870, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x8b4, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x8c0, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cc, Size: 1]
	void CaptureScene();// 0x6799efc
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x677fe54

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2bd, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2c0, Size: 12]
	Actor*[] HiddenActors;//[Offset: 0x2cc, Size: 12]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2d8, Size: 12]
	Actor*[] ShowOnlyActors;//[Offset: 0x2e4, Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 1]
	float LODDistanceFactor;//[Offset: 0x2f4, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x2f8, Size: 4]
	int CaptureSortPriority;//[Offset: 0x2fc, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x300, Size: 12]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x6799960
	void ShowOnlyActorComponents(Actor* InActor);// 0x67998e8
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x6799870
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x67997f8
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x6799780
	void HideComponent(PrimitiveComponent* InComponent);// 0x6799708
	void HideActorComponents(Actor* InActor);// 0x6799690
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x6799618
	void ClearHiddenComponents();// 0x6799604

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b9, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x3bc, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x3c0, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x3c4, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x3d0, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x3d4, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x3d8, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x3dc, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x3e0, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x3e4, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x3e8, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ec, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x3f0, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x3f4, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x3fc, Size: 4]
	float FarShadowDistance;//[Offset: 0x400, Size: 4]
	LinearColor ShadowEdgeColor;//[Offset: 0x404, Size: 16]
	float DistanceFieldShadowDistance;//[Offset: 0x414, Size: 4]
	float LightSourceAngle;//[Offset: 0x418, Size: 4]
	float TraceDistance;//[Offset: 0x41c, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x420, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x430, Size: 1]
	bool bCastsLandscapeShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x430, Size: 1]
	float LandscapeShadowColor;//[Offset: 0x434, Size: 4]
	float LandscapeShadowOffset;//[Offset: 0x438, Size: 4]
	float LandscapeShadowSoftHeight;//[Offset: 0x43c, Size: 4]
	float LandscapeShadowPixelPrecision;//[Offset: 0x440, Size: 4]
	LandscapeGeometryAsset* LandscapeGeometry;//[Offset: 0x444, Size: 4]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 1]
	float SoftShadowSoftness;//[Offset: 0x44c, Size: 4]
	float ShadowBlendFactor;//[Offset: 0x450, Size: 4]
	float BoundsScale;//[Offset: 0x454, Size: 4]
	float NearPlaneOffset;//[Offset: 0x458, Size: 4]
	float FarPlaneOffset;//[Offset: 0x45c, Size: 4]
	float SplitNearOffset;//[Offset: 0x460, Size: 4]
	float SplitFarOffset;//[Offset: 0x464, Size: 4]
	float ShadowMapResolution;//[Offset: 0x468, Size: 4]
	Color ModulatedShadowColor;//[Offset: 0x46c, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x470, Size: 12]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47c, Size: 1]
	float ShadowControl;//[Offset: 0x480, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 1]
	int AtmosphereSunLightIndex;//[Offset: 0x488, Size: 4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x48c, Size: 16]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49c, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49c, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x4a0, Size: 4]
	float CloudShadowTileSize;//[Offset: 0x4a4, Size: 4]
	float CloudShadowDensity;//[Offset: 0x4a8, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x4ac, Size: 8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x6668f88
	void SetOcclusionMaskDarkness(float NewValue);// 0x6668f10
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x6668ea0
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x6668e20
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x6668da8
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x6668d30
	void SetDynamicShadowCascades(int NewValue);// 0x6668cb8
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x6668c34
	void SetCloudShadowTileSize(float InValue);// 0x6668bbc
	void SetCloudShadowTexture(Texture* InTexture);// 0x6668b44
	void SetCloudShadowDensity(float InDensity);// 0x6668acc
	void SetCastsCloudShadow(bool InValue);// 0x6668a4c
	void SetCascadeTransitionFraction(float NewValue);// 0x66689d4
	void SetCascadeDistributionExponent(float NewValue);// 0x666895c
	void SetAtmosphereSunLight(bool bNewValue);// 0x66688dc

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LandscapeGeometryAsset.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x20, Size: 12]
	Vector[] Normals;//[Offset: 0x2c, Size: 12]
	Vector2D[] UV;//[Offset: 0x38, Size: 12]
	int[] Indices;//[Offset: 0x44, Size: 12]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x50, Size: 60]
	int ComponentIndexCount;//[Offset: 0x8c, Size: 4]
	int ComponentVertexCount;//[Offset: 0x90, Size: 4]
	<FString,LevelComponentMapValue> SubLevelComponentMap;//[Offset: 0x94, Size: 60]
	StaticMesh* HighQualityMesh;//[Offset: 0xd0, Size: 40]
	float HighQualityMeshDestroyHight;//[Offset: 0xf8, Size: 4]
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0xfc, Size: 60]

--------------------------------
Class: LevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 12]
	int[] IndexOffsetArray;//[Offset: 0xc, Size: 12]
	int[] IndexCountArray;//[Offset: 0x18, Size: 12]
	int[] VertexOffsetIndex;//[Offset: 0x24, Size: 12]
	int[] BorderIndex1;//[Offset: 0x30, Size: 12]
	int[] BorderIndex2;//[Offset: 0x3c, Size: 12]
	int[] BorderIndex3;//[Offset: 0x48, Size: 12]
	int[] BorderIndex4;//[Offset: 0x54, Size: 12]
	int[] UnderBorderIndex1;//[Offset: 0x60, Size: 12]
	int[] UnderBorderIndex2;//[Offset: 0x6c, Size: 12]
	int[] UnderBorderIndex3;//[Offset: 0x78, Size: 12]
	int[] UnderBorderIndex4;//[Offset: 0x84, Size: 12]
	int[] BorderIndicesBuffer1;//[Offset: 0x90, Size: 12]
	int[] BorderIndicesBuffer2;//[Offset: 0x9c, Size: 12]
	int[] BorderIndicesBuffer3;//[Offset: 0xa8, Size: 12]
	int[] BorderIndicesBuffer4;//[Offset: 0xb4, Size: 12]
	FString Sibling1Name;//[Offset: 0xc0, Size: 12]
	FString Sibling2Name;//[Offset: 0xcc, Size: 12]
	FString Sibling3Name;//[Offset: 0xd8, Size: 12]
	FString Sibling4Name;//[Offset: 0xe4, Size: 12]
	int Sibling1Idx;//[Offset: 0xf0, Size: 4]
	int Sibling2Idx;//[Offset: 0xf4, Size: 4]
	int Sibling3Idx;//[Offset: 0xf8, Size: 4]
	int Sibling4Idx;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x310, Size: 4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 12]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x310, Size: 60]
	class Actor[] IgnoreActorClass;//[Offset: 0x34c, Size: 12]
	float DecalLongestDistance;//[Offset: 0x358, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x364, Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x370, Size: 4]
	Transform DecalBoundTransform;//[Offset: 0x380, Size: 48]
	void RemoveDecalOnTimer(int[] DecalIdArray);// 0x3736220
	bool RemoveDecal(const int ID, bool NeedUpdate);// 0x3736154
	bool HasDecalId(const int ID);// 0x37360d4
	int[] CreateNewDecal(out const IdeaDecalParam IdeaDecalParam, float AutoDisappearTime);// 0x3735ee0

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 4]
	Texture* DecalTexure;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x758, Size: 4]
	PrimitiveComponent* GetDecalParentComponent();// 0x3735c2c

--------------------------------
Class: IdeaDecalParam
	Transform DecalTrans;//[Offset: 0x0, Size: 48]
	MaterialInstanceDynamic* DecalMaterialInstance;//[Offset: 0x30, Size: 4]
	Vector2D DecalUVOffset;//[Offset: 0x34, Size: 8]
	Vector2D DecalUVScale;//[Offset: 0x3c, Size: 8]
	byte TraceAxis;//[Offset: 0x44, Size: 1]
	bool bNegativeDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	enum DecalTraceTowardsType;//[Offset: 0x46, Size: 1]
	FName CollisionProfileName;//[Offset: 0x48, Size: 8]
	int TranslucentSortPriority;//[Offset: 0x50, Size: 4]
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	int ClipPlaneNum;//[Offset: 0x58, Size: 4]
	FName DecalTag;//[Offset: 0x60, Size: 8]
	bool bOnlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0xf0, Size: 4]
	Texture* DecalTexure;//[Offset: 0xf4, Size: 4]
	int CoordX;//[Offset: 0xf8, Size: 4]
	int CoordY;//[Offset: 0xfc, Size: 4]
	Vector2D DecalSize;//[Offset: 0x100, Size: 8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	int GifDecalFrameNum;//[Offset: 0x10c, Size: 4]
	float GifDecalFrameTime;//[Offset: 0x110, Size: 4]
	AkAudioEvent* DecalSound;//[Offset: 0x114, Size: 4]
	float AttenuationRadius;//[Offset: 0x118, Size: 4]
	float OutputVolume;//[Offset: 0x11c, Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x310, Size: 4]
	int RemainSupplyTimes;//[Offset: 0x314, Size: 4]
	int SupplyBulletNum;//[Offset: 0x318, Size: 4]
	float ValidDistance;//[Offset: 0x31c, Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x320, Size: 12]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x357b72c

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x310, Size: 12]
	int AddMonsterExpNum;//[Offset: 0x31c, Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x320, Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x324, Size: 4]
	int UseSuccessTipsId;//[Offset: 0x328, Size: 4]
	float ValidDistance;//[Offset: 0x32c, Size: 4]
	float SelfResetTime;//[Offset: 0x330, Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	enum EnhancerState;//[Offset: 0x335, Size: 1]
	float ReadyTime;//[Offset: 0x338, Size: 4]
	float FixReadyTime;//[Offset: 0x33c, Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x340, Size: 12]
	void StateChangeDelegate();// 0x3598478
	void SetReadyTime(float SReadyTime);// 0x36d7e40
	void SetEState(enum EState);// 0x36d7dc8
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x36d7ccc
	void ResetTimes();// 0x36d7cb8
	void ResetSelf();// 0x36d7ca4
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x36d7c24
	void ReadyTimeChangeDelegate();// 0x3590e5c
	void OpenEffect();// 0x35738a0
	void OnRep_StateChange();// 0x36d7c10
	void OnRep_ReadyTimeChange();// 0x36d7bfc
	void OnRep_FixReadyTimeChange();// 0x36d7bfc
	enum GetSpotState();// 0x36d7be0
	void DelayResetSelf();// 0x36d7bcc
	void CloseEffect();// 0x3628fb8

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0, Size: 1]
	int SkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRevivalComponent.LuaActorComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x150, Size: 4]
	int GotoSpectatingTime;//[Offset: 0x154, Size: 4]
	int64 FinishRevivalTime;//[Offset: 0x158, Size: 8]
	int64 StartObserverTime;//[Offset: 0x160, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0x168, Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x16c, Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0x178, Size: 120]
	DateTime BePickupTime;//[Offset: 0x1f0, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x37fca88
	void SetRemainingRevivalTime(int InValue);// 0x37fca10
	void SetCaptureIDCardStatus(bool InValue);// 0x37fc990
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x37fc918
	void OnPlayerQuitSpectating();// 0x37fc904
	void OnPlayerGotoSpectating();// 0x37fc8f0
	void OnPlayerExitGame(FName ParamState, FString ParamReason);// 0x37fc744
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x37fc6c4
	void LeaveRevivalState(uint32 SaviorKey);// 0x37fc64c
	bool IsInWaittingRevivalState();// 0x37fc624
	int GetRevivalCountDownTime();// 0x37fc608
	int GetRemainingRevivalTime();// 0x37fc5e0
	bool GetCaptureIDCardStatus();// 0x37fc5b8
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x37fc538
	void EnterRevivalState();// 0x37fc524
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x37fc428
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x37fc32c

--------------------------------
Class: RevivalPointActor.LuaActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x39c, Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x3a4, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x3a8, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x3ac, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x3b0, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	float RevivalCDTime;//[Offset: 0x3b8, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	int RevivalCount;//[Offset: 0x3c0, Size: 4]
	delegate OnHaveRevivedTeammates;//[Offset: 0x3c4, Size: 12]
	int ID;//[Offset: 0x3d0, Size: 4]
	enum CurState;//[Offset: 0x3d4, Size: 1]
	enum preState;//[Offset: 0x3d5, Size: 1]
	int RevivalTime;//[Offset: 0x3d8, Size: 4]
	bool bCanBroadcastFatalDamageInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	int CurRevivalTime;//[Offset: 0x3e0, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	int OperationalDistance;//[Offset: 0x3e8, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x3ec, Size: 60]
	Transform PTowEleTransform;//[Offset: 0x430, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x460, Size: 60]
	FString ExParticleComponentTag;//[Offset: 0x49c, Size: 12]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x4a8, Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x4e4, Size: 4]
	int SmokingdisappearTime;//[Offset: 0x4e8, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	int IconID;//[Offset: 0x4f0, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x4f4, Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x500, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x508, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x520, Size: 8]
	void UpdateRevivalPointEffect();// 0x38413c4
	void StartRevival();// 0x38413b0
	void ShowOperatorUIByState();// 0x3628fb8
	void SetDisableMapUI();// 0x384139c
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x384131c
	bool RecheckCurrentRevivingPlayers();// 0x38412f4
	void OnRep_ShowSmoking();// 0x38412e0
	void OnRep_RevivalPointState(enum LastPreState);// 0x3841260
	void OnRep_RevivalCDTimeCur();// 0x35738a0
	void OnRep_CurrentRevivingPlayers();// 0x384124c
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x38411cc
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x384114c
	float GetRevivalCDTimeCurPercent();// 0x3841124
	float GetRevivalCDTimeCur();// 0x38410fc
	float GetRevivalCDTime();// 0x38410d4
	int GetId();// 0x38410ac
	void DistanceChangedEvent(float Scale);// 0x4a51734
	void CheckOverlap();// 0x3598478
	bool CanOperatorMe(STExtraPlayerController* InPC);// 0x384102c

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 4]
	int64 PickupTime;//[Offset: 0x8, Size: 8]
	int64 DroperTime;//[Offset: 0x10, Size: 8]
	FString PickUpName;//[Offset: 0x18, Size: 12]
	FString DroperPlayerName;//[Offset: 0x24, Size: 12]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0xd8, Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0xdc, Size: 4]
	CurveFloat* OffsetYCurve;//[Offset: 0xe0, Size: 4]
	Vector RandomVector;//[Offset: 0xe4, Size: 12]
	float TextScale;//[Offset: 0xf0, Size: 4]
	LinearColor NormalTextColor;//[Offset: 0xf4, Size: 16]
	float HeadShotTextScale;//[Offset: 0x104, Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x108, Size: 16]
	float BigDamageTextScale;//[Offset: 0x118, Size: 4]
	float BigDamage;//[Offset: 0x11c, Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x120, Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x130, Size: 4]
	int FloatTextZorder;//[Offset: 0x134, Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x13c, Size: 12]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x148, Size: 12]
	float[] RecycleTimeList;//[Offset: 0x154, Size: 12]
	float RecycleTime;//[Offset: 0x160, Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x164, Size: 4]
	void UpdateTextWidgetPos(out ShowTextWidgetData ShowTextWidgetData);// 0x36f232c
	void ShowFloatingText(out const FloatingTextData FloatingTextData);// 0x36f22a0
	void SetFloatingText(UserWidget* FloatingTextWidget, int Damage);// 0x4a51734
	void ReycleFloatingTextWidget();// 0x36f228c
	void PlayFloatingTextAnim(out ShowTextWidgetData ShowTextWidgetData, int Damage, bool IsHeadshot);// 0x36f216c
	void OnFloatingDamageText(float BaseDamage, bool IsHeadshot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x36f1f44
	ShowTextWidgetData GetShowTextWidgetData(out const FloatingTextData FloatingTextData);// 0x36f1e9c
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x36f1da8

--------------------------------
Class: ShowTextWidgetData
	UserWidget* FloatingTextWidget;//[Offset: 0x0, Size: 4]
	float RecycleTime;//[Offset: 0x4, Size: 4]
	Vector ShowWorldPos;//[Offset: 0x8, Size: 12]
	Vector RandomOffset;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParachuteAnimAssetData
	<byte,AnimationAsset*> AnimAssetCache;//[Offset: 0x0, Size: 60]
	bool IsAnimCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	int CircleIndex;//[Offset: 0x438, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x43c, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x458, Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x478, Size: 32]
	float TickOBPlayerCD;//[Offset: 0x498, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x49c, Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x4a0, Size: 4]
	DynamicWeatherController* DstController;//[Offset: 0x4a4, Size: 4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x4a8, Size: 4]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x4b0, Size: 68]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x500, Size: 12]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x50c, Size: 12]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x36bde50
	void BlendToWeather(bool bDstWeather);// 0x36bddd0

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x4, Size: 12]
	byte ParticleType;//[Offset: 0x10, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x14, Size: 4]
	FName ShaderName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 12]
	ExponentialHeightFog* Fog;//[Offset: 0xc, Size: 4]
	WeatherDstFog DstWeatherFog;//[Offset: 0x10, Size: 20]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x24, Size: 12]
	float blendTime;//[Offset: 0x30, Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x38, Size: 12]

--------------------------------
Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float StartDistance;//[Offset: 0x4, Size: 4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0, Size: 4]
	int[] HitNumEveryBodys;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LastGameRemainItemData
	FName TombName;//[Offset: 0x0, Size: 8]
	Vector DropGroundPoint;//[Offset: 0x8, Size: 12]
	FString TargetPlayerUID;//[Offset: 0x14, Size: 12]
	RemainItemData[] RemainItemDataList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RemainItemData
	int ItemId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x8, Size: 12]
	int SlotID;//[Offset: 0x14, Size: 4]
	int8 RemainType;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParachuteData
	uint64 UID;//[Offset: 0x0, Size: 8]
	float SlideDuration;//[Offset: 0x8, Size: 4]
	byte FollowState;//[Offset: 0xc, Size: 1]
	Vector ClientLandLocation;//[Offset: 0x10, Size: 12]
	Vector ClientLocation;//[Offset: 0x1c, Size: 12]
	Vector ServerLandLocation;//[Offset: 0x28, Size: 12]
	float SlideStartTime;//[Offset: 0x34, Size: 4]
	float SlideEndTime;//[Offset: 0x38, Size: 4]
	FString InputCount;//[Offset: 0x3c, Size: 12]
	FString PositionCheck;//[Offset: 0x48, Size: 12]
	FString ClientPositionDiff;//[Offset: 0x54, Size: 12]
	float LastCorrectionTime;//[Offset: 0x60, Size: 4]
	float LastCorrectionHeight;//[Offset: 0x64, Size: 4]
	Vector LastCorrectionLocation;//[Offset: 0x68, Size: 12]
	Vector LastCorrectedLocation;//[Offset: 0x74, Size: 12]

--------------------------------
Class: VehicleMoveDragData
	VehicleMoveDrag[] MoveDrag;//[Offset: 0x0, Size: 12]
	VehicleMoveDrag[] SimulatedMoveDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	byte VehicleType;//[Offset: 0x4, Size: 1]
	byte[] Reasons;//[Offset: 0x8, Size: 12]
	int[] Counters;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ScreenAppearanceActor.Actor.Object
	ScreenAppearanceProvider*[] DefaultScreenAppearanceProviders;//[Offset: 0x310, Size: 12]
	<Actor*,ScreenAppearanceProviders> SavedPlayerScreenAppearances;//[Offset: 0x31c, Size: 60]
	ScreenAppearanceProviders PersistentScreenAppearances;//[Offset: 0x358, Size: 12]
	void StopScreenAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x3849c14
	void StopScreenAppearance(ScreenAppearanceProvider* Provider);// 0x3849b9c
	void StopAllScreenAppearances(const Actor* AppearanceOwner);// 0x3849b24
	void SetScalarParameter(out const FName ParameterName, float ParameterValue);// 0x3849a50
	void SetFloatParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, float NewValue);// 0x3849920
	void SetColorParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, out const LinearColor NewValue);// 0x38497e4
	void SetColorParameter(out const FName ParameterName, out const LinearColor ParameterValue);// 0x3849704
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x3849634
	Actor* ResolveAppearanceOwner(Actor* InOwner);// 0x38495ac
	ScreenAppearanceProvider* PlayDefaultScreenAppearance(const Actor* AppearanceOwner, FName AppearanceName, const Actor* Causer);// 0x38494a4
	bool IsScreenAppearancePlaying(const Actor* AppearanceOwner, FName AppearanceName);// 0x38493e0
	bool HasActiveAppearance();// 0x38493b8
	PlayerController* GetPlayerController();// 0x3849300
	PlayerCameraManager* GetPlayerCameraManager();// 0x384928c
	Actor* GetCurrentViewTarget();// 0x3849264
	ScreenAppearanceProvider* FindDefaultScreenAppearanceProvider(out const FName Name);// 0x38491d0
	ScreenAppearanceProvider* FindAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x384910c

--------------------------------
Class: ScreenAppearanceProvider.Object
	FName AppearanceName;//[Offset: 0x20, Size: 8]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	float TickInterval;//[Offset: 0x2c, Size: 4]
	AppearanceParameter[] MaterialParameterCurve;//[Offset: 0x30, Size: 12]
	float LifeSpan;//[Offset: 0x3c, Size: 4]
	ScreenAppearanceScalarParameter[] AppearanceScalarParamters;//[Offset: 0x40, Size: 12]
	ScreenAppearanceColorParameter[] AppearanceColorParameters;//[Offset: 0x4c, Size: 12]
	bool bLobbyUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	ScreenAppearanceActor* OwnerAppearance;//[Offset: 0x70, Size: 4]
	Actor* OwnerActor;//[Offset: 0x74, Size: 4]
	FName[] HighPriorityProviderNames;//[Offset: 0x80, Size: 12]
	Transform AlignRelationTransform;//[Offset: 0x90, Size: 48]
	bool bAttachToActiveCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	void UpdateRelativeTransform(out const Transform RelativeTrans);// 0x384af70
	void SetVectorParameter(out const FName ParameterName, out const Vector Param);// 0x384ae8c
	void SetLifeSpan(float NewLifeSpan);// 0x384ae18
	void SetFloatParameter(out const FName ParameterName, float Param);// 0x384ad3c
	void SetColorParameter(out const FName ParameterName, out const LinearColor Param);// 0x384ac5c
	void SetAsset(Object* Asset);// 0x384abdc
	void ReceiveTick(float DeltaTime);// 0x4a51734
	void ReceiveEndPlay();// 0x4a51734
	void ReceiveBeginPlay();// 0x4a51734
	MaterialInterface* GetMaterial();// 0x384abac
	void AlignActiveCamera(bool bForceUseActiveCamera);// 0x384ab2c

--------------------------------
Class: AppearanceParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	CurveBase* ControlCurve;//[Offset: 0x8, Size: 40]

--------------------------------
Class: ScreenAppearanceScalarParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ScreenAppearanceColorParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ScreenAppearanceProviders
	ScreenAppearanceProvider*[] ScreenAppearances;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PlayerPetSpectatorComponent.LuaActorComponent.ActorComponent.Object
	STExtraPetSpectatorCharacter* PetSpectatorPawn;//[Offset: 0x150, Size: 4]
	bool bTeammatePetShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	STExtraPetSpectatorCharacter* SpawnPetSpectator(class Actor ActorClass, out const Transform SpawnTransform, Actor* Owner);// 0x37f9e40
	void OnRep_PetSpectatorPawn();// 0x4a51734
	bool CanControlSpectator();// 0x3781684

--------------------------------
Class: CacheSACData
	STExtraShootWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	SACData SACData;//[Offset: 0x4, Size: 112]

--------------------------------
Class: BattleOpenSequencerInfo
	Transform StartPosition;//[Offset: 0x0, Size: 48]
	VehicleWarStartVehicleInfo[] VehicleInfoList;//[Offset: 0x30, Size: 12]
	float Time;//[Offset: 0x3c, Size: 4]
	float ServerStartTimestamp;//[Offset: 0x40, Size: 4]

--------------------------------
Class: VehicleWarStartVehicleInfo
	Vector Position;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	STExtraVehicleBase* Vehicle;//[Offset: 0x18, Size: 4]
	VehicleWarStartVehiclePlayerInfo DriverInfo;//[Offset: 0x1c, Size: 12]
	VehicleWarStartVehiclePlayerInfo PassengerInfo;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleWarStartVehiclePlayerInfo
	int upassLevel;//[Offset: 0x0, Size: 4]
	int upassScore;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BasePlayer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x310, Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x314, Size: 4]
	float NearToFarDistance;//[Offset: 0x318, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x31c, Size: 4]
	float PlayEffectDelayTime;//[Offset: 0x320, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x328, Size: 144]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]

--------------------------------
Class: HitTargetExtraData
	byte PlatForm;//[Offset: 0x0, Size: 1]
	int CharacterReplicatID;//[Offset: 0x4, Size: 4]
	int CharacterMovementReplicatID;//[Offset: 0x8, Size: 4]
	float LastReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xc, Size: 4]
	float LastReplicatedTimePass;//[Offset: 0x10, Size: 4]
	float CapsulePreMoveDistance;//[Offset: 0x14, Size: 4]
	float MeshOffsetDistance;//[Offset: 0x18, Size: 4]
	float AverageFPS;//[Offset: 0x1c, Size: 4]
	float ImpactFrameDeltaTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STExtraFireBalloon.LuaActor.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x3a4, Size: 4]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x3a8, Size: 4]
	FireBalloonMovementComponent* Movement;//[Offset: 0x3ac, Size: 4]
	int MapMarkTypeID;//[Offset: 0x3b0, Size: 4]
	enum MapMarkFlag;//[Offset: 0x3b4, Size: 1]
	Pawn* Driver;//[Offset: 0x3bc, Size: 4]
	float MoveUpValue;//[Offset: 0x3c0, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x400, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x404, Size: 4]
	float MoveUpScale;//[Offset: 0x408, Size: 4]
	float AutoFallOffSpeed;//[Offset: 0x40c, Size: 4]
	bool UseStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	Vector ControlInputVector;//[Offset: 0x414, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x420, Size: 12]
	float TickInterval;//[Offset: 0x42c, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	Vector2D FObservationArea;//[Offset: 0x438, Size: 8]
	bool bIsInObservationArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x3975d78
	void SetMoveUpValue(float InMoveUpValue);// 0x3975d00
	void SetMoveInputValue(float InMoveUpValue, float InMoveForwardValue, float InMoveRightValue);// 0x3975bf8
	void SetDriver(Pawn* InPawn);// 0x35738d0
	void OnRep_Driver(Pawn* PrevDriver);// 0x3975b78
	Pawn* GetDriver();// 0x3975b5c
	void CheckWishTask();// 0x4a51734
	bool CanBeDriver(Pawn* InPawn);// 0x3975ad4
	void BPUpdateUIVisible();// 0x4a51734
	void BPUpdateObservationArea();// 0x4a51734
	void BPSetPlayCameraOffsetData(float FAlpha, bool IsUpdateCameraLocation);// 0x4a51734
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x4a51734

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x13d, Size: 1]
	float InitialMaxTarceDist;//[Offset: 0x140, Size: 4]
	Vector InitialLocation;//[Offset: 0x144, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x150, Size: 12]
	Actor* ActorOwner;//[Offset: 0x15c, Size: 4]
	float MaxFlyHeight;//[Offset: 0x170, Size: 4]
	void SetSkipUpdate(bool bNewValue);// 0x3975694
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x4a51734
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x4a51734
	float GetMaxFlyHeight();// 0x3975664

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x12c, Size: 4]
	float Acceleration;//[Offset: 0x130, Size: 4]
	float Deceleration;//[Offset: 0x134, Size: 4]
	float TurningBoost;//[Offset: 0x138, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13c, Size: 1]

--------------------------------
Class: OBPlayerWeaponRecord
	uint64 OBPlayerWeaponRecord_UID;//[Offset: 0x0, Size: 8]
	OBSingleWeaponRecord[] WeaponReport;//[Offset: 0x8, Size: 12]

--------------------------------
Class: OBSingleWeaponRecord
	int OBSingleWeaponRecord_WeaponID;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockDownCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 12]
	FString GLVersion;//[Offset: 0xc, Size: 12]
	FString OSVersion;//[Offset: 0x18, Size: 12]
	FString DeviceMake;//[Offset: 0x24, Size: 12]
	FString DeviceModel;//[Offset: 0x30, Size: 12]
	FString VulkanVersion;//[Offset: 0x3c, Size: 12]
	FString MemorySizeInGB;//[Offset: 0x48, Size: 12]
	FString OpenID;//[Offset: 0x54, Size: 12]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRemainTombBox.PlayerTombBox.LuaActor.Actor.Object
	FString TargetPlayerUID;//[Offset: 0x49c, Size: 12]
	int MiniMapIconID;//[Offset: 0x4a8, Size: 4]
	int MiniMapInstanceID;//[Offset: 0x4ac, Size: 4]
	bool bIsSearchedRemainBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	void OnRep_IsSearchedRemainBox();// 0x37fa364
	void HandleBoxIsSearched();// 0x37fa348

--------------------------------
Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0, Size: 4]
	int Score;//[Offset: 0x4, Size: 4]
	enum ScoreChangeReason;//[Offset: 0x8, Size: 1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc, Size: 4]
	int HighestScore;//[Offset: 0x10, Size: 4]
	int FollowScore;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 12]
	int8 PlatID;//[Offset: 0x14, Size: 1]
	uint16 AreaID;//[Offset: 0x16, Size: 2]
	FString ZoneID;//[Offset: 0x18, Size: 12]
	VehicleMovePoint[] PointList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0, Size: 4]
	int8 Type;//[Offset: 0x4, Size: 1]
	int X;//[Offset: 0x8, Size: 4]
	int Y;//[Offset: 0xc, Size: 4]
	int Z;//[Offset: 0x10, Size: 4]
	int Speed;//[Offset: 0x14, Size: 4]
	int8 VehicleN2oUse;//[Offset: 0x18, Size: 1]
	int8 VehicleCarPetUse;//[Offset: 0x19, Size: 1]
	int VehicleMoveDistance;//[Offset: 0x1c, Size: 4]
	int TimeStamp;//[Offset: 0x20, Size: 4]
	int8 RoleType;//[Offset: 0x24, Size: 1]

--------------------------------
Class: PlayerPositionFlow
	PlayBaseInfo PlayerBaseInfo;//[Offset: 0x0, Size: 40]
	int FirstPointTimestamp;//[Offset: 0x28, Size: 4]
	IntPosition2D[] PointList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: PlayBaseInfo
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 12]
	int8 PlatID;//[Offset: 0x14, Size: 1]
	uint16 AreaID;//[Offset: 0x16, Size: 2]
	FString ZoneID;//[Offset: 0x18, Size: 12]

--------------------------------
Class: IntPosition2D
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0, Size: 12]
	enum CaculateType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SIslandInactiveClearComponent.ActorComponent.Object
	float ComponentTickInterval;//[Offset: 0xc4, Size: 4]
	float InactiveCheckGap;//[Offset: 0xc8, Size: 4]
	float InactiveTimeForTipPreTime;//[Offset: 0xd0, Size: 4]
	float PreActiveTime;//[Offset: 0xd4, Size: 4]
	float ClientSendActiveRPCGap;//[Offset: 0xdc, Size: 4]
	bool bIsClientActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	enum SIslandActiveType;//[Offset: 0xe1, Size: 1]
	Vector PrePawnLoc;//[Offset: 0xe4, Size: 12]
	Rotator PreControllerRotation;//[Offset: 0xf0, Size: 12]
	delegate OnInactiveTipInSocialIslandDelegate;//[Offset: 0xfc, Size: 12]
	void ServerMarkPlayerActive();// 0x3879c60
	void OnInactiveTipInSocialIslandDelegate__DelegateSignature(float RemainTime);// 0x4a51734
	void MarkPlayerActive();// 0x3879c4c
	void KickOutPlayer();// 0x3879c38
	void ClientShowKickOutTip(float RemainTime);// 0x3559fb4
	void ClientCachedActiveState();// 0x3879c24
	bool CheckForMovement();// 0x3879bfc
	void CheckForInactive();// 0x36592b0

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0x1b8, Size: 12]
	delegate OnKillInfoDownloadComplete;//[Offset: 0x1c4, Size: 12]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x1d0, Size: 4]
	FString ReplayServerURL;//[Offset: 0x200, Size: 12]
	void RequestReplaysFromServer(FString URLString);// 0x37b669c
	void ClearStreams();// 0x37b6688

--------------------------------
Class: DailyTaskReportInfo
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	uint32 TaskSyncToDsTs;//[Offset: 0xc, Size: 4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0x10, Size: 12]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: DailyTaskAwardInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	TaskAwardItemInfo[] AwardList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: TaskAwardItemInfo
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FatalDamageParameterCompress
	FString CauserName;//[Offset: 0x0, Size: 12]
	FString VictimName;//[Offset: 0xc, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x18, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x24, Size: 12]
	FString RealKillerName;//[Offset: 0x30, Size: 12]
	FString CauserNation;//[Offset: 0x3c, Size: 12]
	FString VictimNation;//[Offset: 0x48, Size: 12]
	int DamageType;//[Offset: 0x54, Size: 4]
	int AdditionalParam;//[Offset: 0x58, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int ResultHealthStatus;//[Offset: 0x60, Size: 4]
	int Relationship;//[Offset: 0x64, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x68, Size: 4]
	int realKillerNewKillNum;//[Offset: 0x6c, Size: 4]
	uint32 CauserKey;//[Offset: 0x70, Size: 4]
	uint32 VictimKey;//[Offset: 0x74, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x78, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x7c, Size: 4]
	int CauserType;//[Offset: 0x80, Size: 4]
	int VictimType;//[Offset: 0x84, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0x88, Size: 12]
	int AssistNum;//[Offset: 0x94, Size: 4]
	bool isCausedByDevliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: KillInfoRecordData
	FString Killer;//[Offset: 0x0, Size: 12]
	FString Victim;//[Offset: 0xc, Size: 12]
	bool bKillDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	uint64 KillTimeStampDemoTime;//[Offset: 0x20, Size: 8]
	uint64 KillTimeStampGameTime;//[Offset: 0x28, Size: 8]
	FString SafeLabel;//[Offset: 0x30, Size: 12]
	int SafeParam1;//[Offset: 0x3c, Size: 4]
	int SafeParam2;//[Offset: 0x40, Size: 4]
	float RecordTimestamp;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MLAIInfoRecordData
	float MLAITimeStamp;//[Offset: 0x0, Size: 4]
	uint32 PlayerKey;//[Offset: 0x4, Size: 4]
	uint64 UID;//[Offset: 0x8, Size: 8]
	byte Type;//[Offset: 0x10, Size: 1]
	<FString,FString> AdditionalData;//[Offset: 0x14, Size: 60]

--------------------------------
Class: PlayerEventInfoRecordData
	FString PlayerUID;//[Offset: 0x0, Size: 12]
	uint64 RecordTimestamp;//[Offset: 0x10, Size: 8]
	uint32 EventType;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SingleStrategyRecordFullInfo
	int StrategyTypeInReplay;//[Offset: 0x0, Size: 4]
	SingleStrategyRecordInReplay SingleStrategyRecordInReplay;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SingleStrategyRecordInReplay
	byte CountValue;//[Offset: 0x0, Size: 1]
	uint16 ReplayTimeStampInSeconds;//[Offset: 0x2, Size: 2]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	DeathReplayData DeathReplayData;//[Offset: 0x1b8, Size: 232]
	DeathPlayCameraShot* DeathPlayCameraShot;//[Offset: 0x2a0, Size: 4]
	void SetMurderInfo();// 0x36aa2e0
	void PlayCollectReplay(FString DemoName);// 0x35c75b4
	void OnKillOrPutDownMessageEvent();// 0x36aa2cc
	void OnDeathEvent(STExtraBaseCharacter* BaseCharacter);// 0x36aa254
	void OnClientObserveCharacterEvent();// 0x36aa240
	bool IsSwitchedOffByDevice();// 0x36aa218
	bool IsNewDeathReplay();// 0x36aa1f0
	bool HaveRecordingData_New();// 0x36aa1c8
	FString GetReplayTargetName();// 0x36aa108
	STExtraPlayerCharacter* GetDeadCharacter();// 0x36aa0e0
	float GetBattleDeathPlaybackEndTime();// 0x36aa0b8
	void GetAllCollectReplay(out FString[] OutCollectReplayList);// 0x36a9f84

--------------------------------
Class: DeathPlayCameraShot.Actor.Object
	FString LuaFilePath;//[Offset: 0x350, Size: 12]
	void StopCameraShot();// 0x357c654
	void StartCameraShot(PlayerController* PlayerController);// 0x3590e78

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x218, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x240, Size: 4]
	int MaxHoursForKeepingFiles;//[Offset: 0x244, Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bUsingMapPlayerItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x24c, Size: 12]
	int EnableCheckpointConfig;//[Offset: 0x258, Size: 4]
	float CheckpointUploadDelayConfig;//[Offset: 0x25c, Size: 4]
	float CheckpointSaveMaxMSPerFrameConfig;//[Offset: 0x260, Size: 4]
	int[] DelayStopRecordingGameModes;//[Offset: 0x264, Size: 12]
	float DelayStopRecordingTime;//[Offset: 0x270, Size: 4]
	int DefaultCompressionFlag;//[Offset: 0x274, Size: 4]
	int NewCompressionFlag;//[Offset: 0x278, Size: 4]
	int OodleCompressor;//[Offset: 0x27c, Size: 4]
	int Oodlelevel;//[Offset: 0x280, Size: 4]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x298, Size: 12]
	bool bUseWeseeStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	FString RecordTargetUID;//[Offset: 0x2a8, Size: 12]
	int RecordTargetTeamID;//[Offset: 0x2b4, Size: 4]
	int StrategyRecordMaxSizeInByte;//[Offset: 0x3f4, Size: 4]
	void SetNewCompressionFlag(int InFlag);// 0x367cdd8
	void SetForceAllowFreeView(bool bInValue);// 0x367cd58
	bool PlayDemoWithFilename(FString DemoName);// 0x367cc94
	void OnPlayerKilledOthersPlayer(out const FatalDamageParameter FatalDamageParameter);// 0x367cb78
	bool LoadKillInfo();// 0x367cb50
	FString GetStrategyNameByID(const int ID);// 0x367ca48
	bool GetShowOrHideUIForAntiCheat();// 0x367ca20
	FString GetRealNameByUID(FString PlayerUID);// 0x367c8dc
	FString GetDemoPlayTime();// 0x367c81c
	float GetCurrentTimeInReplay();// 0x367c7f4
	FString DecryptWeirdString(out FString InStr);// 0x367c6a0
	void AddStrategyRecord(FString UID, const int StrategyTypeInReplay, out const SingleStrategyRecordInReplay InSingleStrategyRecordInReplay);// 0x367c548

--------------------------------
Class: WonderfulPlayback.GameReplay.Object
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	enum WonderfulPlayType;//[Offset: 0x1bb, Size: 1]
	bool bWaitFirstPeriodShowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float FirstPeriodUIShowTime;//[Offset: 0x278, Size: 4]
	void SetWonderfulPlayType(enum InWonderfulPlayType);// 0x3b88534
	bool PlayReplayMemory();// 0x3b8850c
	bool PlayReplayFile(FString DemoName);// 0x3b88448
	bool PlayReplayAgain();// 0x3b88420
	bool IsSwitchedOffByDevice();// 0x3b883f8
	void GetUserWonderfulList(out FString[] OutWonderfulList, FString InRoleId);// 0x3b88234
	uint64 GetTargetUID();// 0x3b8820c
	FString GetTargetPlayerName();// 0x3b8814c
	FString GetTargetOpenID();// 0x3b8808c
	uint64 GetTargetGameID();// 0x3b88064
	FString GetReplayFileNamePart();// 0x3b87fa4
	WonderfulTypeInfo GetCurWonderfulTypeInfo();// 0x3b87edc
	void GetAllWonderfulList(out FString[] OutWonderfulList);// 0x3b87da8
	void FetchBattleWonderfulInfo();// 0x3b87d94
	uint64[] DecryptFileName(FString DemoFullPathName);// 0x3b87c50
	FString BPGetTargetUID();// 0x3b87b90
	FString BPGetTargetGameID();// 0x3b87ad0
	enum AnalysizeReplayFile(FString InReplayFileName);// 0x3b87a0c
	LobbyWonderfulInfo AnalysizeInfoFile(FString InInfoFileName);// 0x3b87924

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x1c, Size: 12]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 12]
	int bUseFeatureSet;//[Offset: 0xc, Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x10, Size: 12]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x1c, Size: 12]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x28, Size: 12]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x34, Size: 12]
	FString[] ExcludeComponentsList_DSAI;//[Offset: 0x40, Size: 12]
	FString[] ExcludeComponentsList_DSMLAI;//[Offset: 0x4c, Size: 12]
	FString[] ExcludeComponentsList_ClientAI;//[Offset: 0x58, Size: 12]
	FString[] ExcludeComponentsList_Standalone;//[Offset: 0x64, Size: 12]
	FString[] ExcludeComponentsList_StandaloneAI;//[Offset: 0x70, Size: 12]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarItemDownload.Object
	int DisableInBattleThreshold;//[Offset: 0x1c, Size: 4]
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate OnItemDownloadDelegate);// 0x35bcf88
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x35bcd74
	void SetDisableInBattleThreshold(uint32 InThreshold);// 0x35bccf4
	int GetDisableInBattleThreshold();// 0x357e618

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	void ConditionSetFireGyroData(bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue3, bool CallFunc_EqualEqual_FloatFloat_ReturnValue4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue5, bool CallFunc_EqualEqual_FloatFloat_ReturnValue6, bool CallFunc_EqualEqual_FloatFloat_ReturnValue7, bool CallFunc_EqualEqual_FloatFloat_ReturnValue8, bool CallFunc_EqualEqual_FloatFloat_ReturnValue9, bool CallFunc_EqualEqual_FloatFloat_ReturnValue10);// 0x4a51734
	void Init(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x4a51734
	int CrossHairColor;//[Offset: 0x20, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	int LeftHandFire;//[Offset: 0x28, Size: 4]
	int Gyroscope;//[Offset: 0x2c, Size: 4]
	int ArtQuality;//[Offset: 0x30, Size: 4]
	float ViewPercentage;//[Offset: 0x34, Size: 4]
	int FireMode;//[Offset: 0x38, Size: 4]
	int VehicleControlMode;//[Offset: 0x3c, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	int CameraLensSensibility;//[Offset: 0x44, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float MainVolumValue;//[Offset: 0x90, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float EffectVolumValue;//[Offset: 0x98, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float UIVolumValue;//[Offset: 0xa0, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float BGMVolumValue;//[Offset: 0xa8, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int VoiceChannel;//[Offset: 0xb0, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float SocialIslandOtherVolume;//[Offset: 0xc0, Size: 4]
	float SpeakerVolumValue;//[Offset: 0xc4, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	int LimitBandage;//[Offset: 0xdc, Size: 4]
	int LimitMedical;//[Offset: 0xe0, Size: 4]
	int LimitAnodyne;//[Offset: 0xe4, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xe8, Size: 4]
	int LimitAdrenaline;//[Offset: 0xec, Size: 4]
	int LimitShouliudan;//[Offset: 0xf0, Size: 4]
	int LimitYanwudan;//[Offset: 0xf4, Size: 4]
	int LimitZhenbaodan;//[Offset: 0xf8, Size: 4]
	int LimitRanshaodan;//[Offset: 0xfc, Size: 4]
	int LimitBullet9mm;//[Offset: 0x100, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x104, Size: 4]
	int Limit12koujing;//[Offset: 0x108, Size: 4]
	int Limit45koujing;//[Offset: 0x10c, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x110, Size: 4]
	int Limitbolt;//[Offset: 0x114, Size: 4]
	int LimitBullet5;//[Offset: 0x118, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int FPSLevel;//[Offset: 0x120, Size: 4]
	int ArtStyle;//[Offset: 0x124, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x128, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x12c, Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x168, Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a8, Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	int[] DefaultPlayerChatQuickTextIDList;//[Offset: 0x1e8, Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1f4, Size: 12]
	int LRShootMode;//[Offset: 0x200, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x208, Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x214, Size: 12]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	int NewGetActorID;//[Offset: 0x224, Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	float 3DTouchValue;//[Offset: 0x22c, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	int ShotGunShootMode;//[Offset: 0x234, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x238, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x23c, Size: 4]
	float VehicleEye;//[Offset: 0x240, Size: 4]
	float ParachuteEye;//[Offset: 0x244, Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x248, Size: 12]
	int RepeatingWeaponShootMode;//[Offset: 0x254, Size: 4]
	int DrivingViewMode;//[Offset: 0x258, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	int FpViewValue;//[Offset: 0x260, Size: 4]
	float CamFpFreeEye;//[Offset: 0x264, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x268, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x26c, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x270, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x278, Size: 4]
	FString currentLanguage;//[Offset: 0x27c, Size: 12]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	FString lastViewDayTime;//[Offset: 0x28c, Size: 12]
	FString lastViewWeekTime;//[Offset: 0x298, Size: 12]
	bool DoblySwitch2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool DoblySwitch1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x2a8, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x2ac, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x2b0, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b4, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b8, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x2bc, Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	int RedDotCHColor;//[Offset: 0x2c4, Size: 4]
	int RedDotCHType;//[Offset: 0x2c8, Size: 4]
	int HolographicCHColor;//[Offset: 0x2cc, Size: 4]
	int HolographicCHType;//[Offset: 0x2d0, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x2d4, Size: 4]
	int Sinper2xCHType;//[Offset: 0x2d8, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2dc, Size: 4]
	int Sniper3xCHType;//[Offset: 0x2e0, Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e8, Size: 60]
	int LimitFirstAidKit;//[Offset: 0x324, Size: 4]
	FString XGLanguageTag;//[Offset: 0x328, Size: 12]
	FString XGTimezoneTag;//[Offset: 0x334, Size: 12]
	FString XGPushNightTag;//[Offset: 0x340, Size: 12]
	FString XGPushDayTag;//[Offset: 0x34c, Size: 12]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x35c, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x360, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x364, Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	int LimitSniper2X;//[Offset: 0x36c, Size: 4]
	int LimitSniper3X;//[Offset: 0x370, Size: 4]
	int LimitSniper4X;//[Offset: 0x374, Size: 4]
	int LimitSniper6X;//[Offset: 0x378, Size: 4]
	int LimitSniper8X;//[Offset: 0x37c, Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	int SidewaysMode;//[Offset: 0x384, Size: 4]
	int OpenMirrorMode;//[Offset: 0x388, Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool OBSTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool OBSPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool OBSBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	int LobbyStyleID;//[Offset: 0x394, Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	float ScreenLightness;//[Offset: 0x39c, Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	FString FirstChargeVersion;//[Offset: 0x3a4, Size: 12]
	FString RechargePosSave;//[Offset: 0x3b0, Size: 12]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3c0, Size: 60]
	int LimitViscidityBomb;//[Offset: 0x3fc, Size: 4]
	int LimitZombieGrenade;//[Offset: 0x400, Size: 4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x408, Size: 4]
	int SideMirrorMode;//[Offset: 0x40c, Size: 4]
	int[] DefaultPlayerWheelChatQuickTextIDList;//[Offset: 0x410, Size: 12]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41f, Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x420, Size: 4]
	int LimitAntidote;//[Offset: 0x424, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x42c, Size: 12]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x43c, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	int FPPFireMode;//[Offset: 0x444, Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x448, Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x44c, Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x450, Size: 4]
	byte TurboLastQuality;//[Offset: 0x454, Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x458, Size: 60]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x494, Size: 60]
	int[] UselessWeakGuidIDs;//[Offset: 0x4d0, Size: 12]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de, Size: 1]
	int[] ChatOptiongList5;//[Offset: 0x4e0, Size: 12]
	int[] ChatOptiongList6;//[Offset: 0x4ec, Size: 12]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	int TD_FireMode;//[Offset: 0x4fc, Size: 4]
	int TD_FPPFireMode;//[Offset: 0x500, Size: 4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	float TD_3DTouchValue;//[Offset: 0x508, Size: 4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x510, Size: 4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	int LimitSnowMan;//[Offset: 0x518, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
	int ColorBlindnessType;//[Offset: 0x520, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x528, Size: 4]
	float UAVScopePercent;//[Offset: 0x52c, Size: 4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	int SideMirrorType;//[Offset: 0x534, Size: 4]
	int SideMirrorColor;//[Offset: 0x538, Size: 4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x540, Size: 12]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	bool DisableAutoPickDropMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	int AutoPickClipType;//[Offset: 0x558, Size: 4]
	int[] QuickSignIDList;//[Offset: 0x55c, Size: 12]
	int[] QuickSignWheelIDList;//[Offset: 0x568, Size: 12]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 1]
	int HitEffectColor;//[Offset: 0x578, Size: 4]
	int HurtEffectColor;//[Offset: 0x57c, Size: 4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	int ProfiledScreenSwitch;//[Offset: 0x584, Size: 4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	int BuildDoubleClick;//[Offset: 0x58c, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x590, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x594, Size: 4]
	int DoubleClickDistance;//[Offset: 0x598, Size: 4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	int BattleFPS;//[Offset: 0x5a0, Size: 4]
	int BattleRenderStyle;//[Offset: 0x5a4, Size: 4]
	int BattleRenderQuality;//[Offset: 0x5a8, Size: 4]
	int LobbyFPS;//[Offset: 0x5ac, Size: 4]
	int LobbyRenderStyle;//[Offset: 0x5b0, Size: 4]
	int LobbyRenderQuality;//[Offset: 0x5b4, Size: 4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 1]
	bool OBSLogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bb, Size: 1]
	bool OBSHitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x5c0, Size: 60]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x5fc, Size: 60]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x638, Size: 60]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x674, Size: 60]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x6b0, Size: 60]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x6ec, Size: 60]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72f, Size: 1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x734, Size: 60]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x770, Size: 60]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x7ac, Size: 60]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x7e8, Size: 60]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool OBSCustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x826, Size: 1]
	bool SettingDisableAutoPickupDropMirrorRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x827, Size: 1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	float CamLensSenShoulderTPP;//[Offset: 0x82c, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x830, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x834, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x838, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x83c, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x840, Size: 4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	int ShoulderMode;//[Offset: 0x848, Size: 4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	bool OBSSmokeGrenadeCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84e, Size: 1]
	bool OBSSmokeGrenadeAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84f, Size: 1]
	bool bGunAccessoriesAddDefauleM4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool bGunAccessoriesGuidedRemoveSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	bool bGunAccessoriesGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x852, Size: 1]
	bool bGunAccessoriesGuidedSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x853, Size: 1]
	bool bGunAccessoriesGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	bool bAddedGunAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 1]
	bool bGunSensitivityGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x856, Size: 1]
	bool bGunSensitivityGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x857, Size: 1]
	bool bGunSensitivityGuidedCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	int GunSensitivitySingleTrainingGuideCount;//[Offset: 0x85c, Size: 4]
	bool bGunSensitivitySingleTrainingGuideTiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	bool OBSShowOwnWeaponKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	bool isCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 1]
	FString CloudSensitivityPlayerId_Custom;//[Offset: 0x864, Size: 12]
	bool isOtherCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	bool IsCloudAndLocalSame_SensitivityCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 1]
	bool isCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x872, Size: 1]
	FString CloudAccessoriesPlayerId_Custom;//[Offset: 0x874, Size: 12]
	bool isOtherCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	bool IsCloudAndLocalSame_AccessoriesCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 1]
	int TpViewValue;//[Offset: 0x884, Size: 4]
	bool bHasCloudCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	int PickUpListMode;//[Offset: 0x88c, Size: 4]
	bool GyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	bool bHasCloudCustomAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 1]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x894, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x898, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x89c, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x8a0, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x8a4, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x8a8, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x8ac, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x8b0, Size: 4]
	bool AutoParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 1]
	bool MapMarkEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b5, Size: 1]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x8b8, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x8bc, Size: 4]
	bool FireGyroscopeRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	bool HasOperateRingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 1]
	bool HasOperatedRingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c2, Size: 1]
	bool SettingBasicGyroRverseRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c3, Size: 1]
	bool bLbsNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bLbsWarZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	bool AutoContinueHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c6, Size: 1]
	bool FocalLengthModifySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c7, Size: 1]
	bool FocalLengthModifySwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool bRecordWonderfulReplayOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	int AntiAliasingValue;//[Offset: 0x8cc, Size: 4]
	bool OneKeyProneAndCrouchSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	bool HasOperateOneKeyProneAndCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 1]
	bool bLbsMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d2, Size: 1]
	bool bLbsChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d3, Size: 1]
	bool bOpenBattleNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 1]
	bool bOpenLobbyNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d5, Size: 1]
	int JoystickSprintSensitity;//[Offset: 0x8d8, Size: 4]
	bool bHideIngameUIAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	bool bCloseHitHeadAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 1]
	int HightLightReshowAirLineTimes;//[Offset: 0x8e0, Size: 4]
	bool bHasSetWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	bool bIsShowedHideUIGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e5, Size: 1]
	bool bAmericanCustomSettingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e6, Size: 1]
	float CamLensSenNoneSniper;//[Offset: 0x8e8, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8ec, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x8f0, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x8f4, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x8f8, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x8fc, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x900, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x904, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x908, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x90c, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x910, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x914, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x918, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x91c, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x920, Size: 4]
	float VehicleEye;//[Offset: 0x924, Size: 4]
	float ParachuteEye;//[Offset: 0x928, Size: 4]
	float CamFpFreeEye;//[Offset: 0x92c, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x930, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x934, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x938, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x93c, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x940, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x944, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x948, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x94c, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x950, Size: 4]
	float CamLensSenShoulderTPP;//[Offset: 0x954, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x958, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x95c, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x960, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x964, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x968, Size: 4]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x96c, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x970, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x974, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x978, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x97c, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x980, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x984, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x988, Size: 4]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x98c, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x990, Size: 4]
	bool bInitedCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 1]
	bool bFireGyroSenUseGryo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x995, Size: 1]
	bool bFireCamSenUseCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x996, Size: 1]
	bool AutoHitMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x997, Size: 1]
	bool bResetDeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998, Size: 1]
	bool SwitchSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x999, Size: 1]
	bool bConsumeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99a, Size: 1]
	int[] MaxACCount;//[Offset: 0x99c, Size: 12]
	int[] DefaultACCount;//[Offset: 0x9a8, Size: 12]
	bool HasOperateSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 1]
	bool UseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 1]
	<FString,int> OpenStoreTimes;//[Offset: 0x9b8, Size: 60]
	<int,int> setting_ver_info;//[Offset: 0x9f4, Size: 60]
	bool bIsBackpackExpand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	bool OpenMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 1]
	int HapticSwitch;//[Offset: 0xa34, Size: 4]
	int HapticVoiceSwitch;//[Offset: 0xa38, Size: 4]
	int HapticCharacterSwitch;//[Offset: 0xa3c, Size: 4]
	int HapticWeaponSwitch;//[Offset: 0xa40, Size: 4]
	int HapticVehicleSwitch;//[Offset: 0xa44, Size: 4]
	bool bHapticVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 1]
	bool bHapticVoiceGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa49, Size: 1]
	bool bHapticVoiceGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4a, Size: 1]
	bool bHapticVoiceVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4b, Size: 1]
	bool bHapticCharacterBeGunAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 1]
	bool bHapticCharacterBeOtherAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4d, Size: 1]
	bool bHapticCharacterFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4e, Size: 1]
	bool bHapticWeaponAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4f, Size: 1]
	bool bHapticWeaponAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	bool bHapticWeaponSemiAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa51, Size: 1]
	bool bHapticWeaponSniper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa52, Size: 1]
	bool bHapticWeaponOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa53, Size: 1]
	bool bHapticVehicleDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa54, Size: 1]
	bool bHapticVehicleBeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa55, Size: 1]
	bool bHapticVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa56, Size: 1]
	bool bIsOpenMapTaskUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa57, Size: 1]
	bool AmmoRemain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	bool ReshowAirlineRouteBtnChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa59, Size: 1]
	bool OBMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5a, Size: 1]
	bool OBTeammateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5b, Size: 1]
	bool OBPlayerInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa60, Size: 12]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa6c, Size: 12]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa78, Size: 12]
	int PlayerChatIndex;//[Offset: 0xa84, Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xa88, Size: 12]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xa94, Size: 12]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xaa0, Size: 12]
	int PlayerChatActorID;//[Offset: 0xaac, Size: 4]
	bool bHasCloudBasicSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 1]
	bool isCloudSettingBasicUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab1, Size: 1]
	FString NewbieGuideDailyLimit;//[Offset: 0xab4, Size: 12]
	int LastSaveSettingBasicTM;//[Offset: 0xac0, Size: 4]
	bool OpenSilentChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 1]
	bool DoubleIntimacyHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac5, Size: 1]
	bool backgroundChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac6, Size: 1]
	bool bCanMapLongPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac7, Size: 1]
	float NoUIOpacity;//[Offset: 0xac8, Size: 4]
	int OldMarkStyle;//[Offset: 0xacc, Size: 4]
	<FString,FString> PlayerFeatureVoiceCfg;//[Offset: 0xad0, Size: 60]
	int SoundVisualizationType;//[Offset: 0xb0c, Size: 4]
	bool OBSSwitchOBHttpComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 1]
	bool LocalHideMetroArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb11, Size: 1]
	int TargetNameGuideTimes;//[Offset: 0xb14, Size: 4]
	int DangerousGuideTimes;//[Offset: 0xb18, Size: 4]
	int HunterTaskGuideTimes;//[Offset: 0xb1c, Size: 4]
	FString SynthesizeFormula;//[Offset: 0xb20, Size: 12]
	bool GrenadeSettingPredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	bool AutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2d, Size: 1]
	bool LocalHideMetroBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2e, Size: 1]
	int LevelPreLoadSetting;//[Offset: 0xb30, Size: 4]
	bool bSpectatingPetVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 1]
	int DBCollectGuideNum;//[Offset: 0xb38, Size: 4]
	int preTeamUpChat;//[Offset: 0xb3c, Size: 4]
	bool bLastIsPreTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 1]
	bool bLastMicPreTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb42, Size: 1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb43, Size: 1]
	int NewVar;//[Offset: 0xb44, Size: 4]
	int AutoPickMeleeType;//[Offset: 0xb48, Size: 4]
	bool AutoUseMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4c, Size: 1]
	int AuxiliaryVoice;//[Offset: 0xb50, Size: 4]
	int InterruptReloadType;//[Offset: 0xb54, Size: 4]
	bool OpenPetSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb58, Size: 1]
	int DefaultMeleeWeaponType;//[Offset: 0xb5c, Size: 4]
	float WeaponVolumValue;//[Offset: 0xb60, Size: 4]
	float VehicleVolumValue;//[Offset: 0xb64, Size: 4]
	float VoiceVolumValue;//[Offset: 0xb68, Size: 4]
	bool ShowMapGunLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 1]
	bool PCOBHotKeyF7LeftLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6d, Size: 1]
	bool PCOBHotKeyF7RightLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6e, Size: 1]
	bool PCOBHotKeyF7Center;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6f, Size: 1]
	bool EntireMapGuideRedDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 1]

--------------------------------
Class: UAELobbyGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
