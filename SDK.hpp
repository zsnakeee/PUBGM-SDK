//Generated by @snakee2019 (telegram)

class World : Object
{
	Level* PersistentLevel;//[Offset: 0x20, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 12]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 12]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60, Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c, Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74, Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78, Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c, Size: 136]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x108, Size: 4]
	Object*[] SyncPreLoadSet;//[Offset: 0x10c, Size: 12]
	NavigationSystem* NavigationSystem;//[Offset: 0x134, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x138, Size: 4]
	GameStateBase* GameState;//[Offset: 0x13c, Size: 4]
	AISystemBase* AISystem;//[Offset: 0x140, Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x144, Size: 4]
	Level*[] Levels;//[Offset: 0x148, Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x154, Size: 12]
	Level* CurrentLevel;//[Offset: 0x164, Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x168, Size: 4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x16c, Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x178, Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x17c, Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x6ec, Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x732, Size: 1]
};

class Object
{
};

class Level.Object
{
	World* OwningWorld;//[Offset: 0x88, Size: 4]
	Model* Model;//[Offset: 0x8c, Size: 4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x254, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x264, Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x268, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274, Size: 1]
	int HighDeviceMemoryTotalSize;//[Offset: 0x2c8, Size: 4]
	int LowDeviceMemoryTotalSize;//[Offset: 0x2cc, Size: 4]
	WorldSettings* WorldSettings;//[Offset: 0x308, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x310, Size: 12]
};

class Model.Object
{
};

class ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	BodySetup* ModelBodySetup;//[Offset: 0x690, Size: 4]
};

class PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	float CullingScreenSize;//[Offset: 0x2c4, Size: 4]
	float MinDrawDistance;//[Offset: 0x2c8, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x2cc, Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x2d0, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x2d4, Size: 4]
	bool UseScopeDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 1]
	unsigned char DepthPriorityGroup;//[Offset: 0x2d9, Size: 1]
	unsigned char ViewOwnerDepthPriorityGroup;//[Offset: 0x2da, Size: 1]
	enum LightmapType;//[Offset: 0x2db, Size: 1]
	bool bForceInjectToHierarchicalSurfel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dc, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dc, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2dc, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2dc, Size: 1]
	bool bAsyncGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dd, Size: 1]
	bool bGenerateOverlapEventsByBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dd, Size: 1]
	bool bGenerateOverlapEventsByRoot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dd, Size: 1]
	bool bGenerateOverlapEventsByBoundsDoubleCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dd, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2dd, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dd, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2dd, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2dd, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2de, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2de, Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2de, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2de, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2de, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2de, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2de, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2de, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2df, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2df, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2df, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2df, Size: 1]
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2df, Size: 1]
	bool bIdeaOutlineNew;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2df, Size: 1]
	bool bIdeaOutlineOcclusionHighlight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2df, Size: 1]
	bool bIdeaOverrideOutlineAndOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2df, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x2e4, Size: 16]
	LinearColor IdeaOutlineOcclusionColor;//[Offset: 0x2f4, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x308, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bDrawHighlight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	bool bHighlightCanBeOccluded;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30c, Size: 1]
	bool bOverrideHighlightColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30c, Size: 1]
	LinearColor HighlightColor;//[Offset: 0x310, Size: 16]
	enum DrawDyeingMode;//[Offset: 0x320, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x324, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x334, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	bool bEnableTransparentZWrite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x344, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x344, Size: 1]
	bool bOnlyAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x344, Size: 1]
	bool bAlwaysAvailableOccluder;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x344, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x344, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x344, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x345, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x345, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x345, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x345, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x345, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x345, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x345, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x345, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x346, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x346, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x346, Size: 1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x346, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x346, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x346, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x346, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x346, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x347, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x347, Size: 1]
	bool bReceiveLandscapeShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x347, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x347, Size: 1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x347, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x347, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x347, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x347, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x348, Size: 1]
	unsigned char bHasCustomNavigableGeometry;//[Offset: 0x349, Size: 1]
	unsigned char CanCharacterStepUpOn;//[Offset: 0x34b, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x34c, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x34d, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x350, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x354, Size: 4]
	int TranslucencySortGroupPriority;//[Offset: 0x358, Size: 4]
	int VisibilityId;//[Offset: 0x35c, Size: 4]
	unsigned char PrimitiveShadingStrategy;//[Offset: 0x364, Size: 1]
	unsigned char ShadingRate;//[Offset: 0x365, Size: 1]
	float FOVAdaptiveShadingFactor;//[Offset: 0x368, Size: 4]
	bool bUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 1]
	bool bAffectAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x36c, Size: 1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x374, Size: 4]
	float BoundsScale;//[Offset: 0x37c, Size: 4]
	float OCBoundsScale;//[Offset: 0x380, Size: 4]
	int OCBoundsExtent;//[Offset: 0x384, Size: 4]
	float LastSubmitTime;//[Offset: 0x388, Size: 4]
	float LastRenderTime;//[Offset: 0x38c, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x390, Size: 4]
	float ShadowLastRenderTime;//[Offset: 0x394, Size: 4]
	bool bFreezeMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x39c, Size: 12]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3a8, Size: 12]
	MaterialInterface*[] LODDefault;//[Offset: 0x3bc, Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x410, Size: 320]
	bool bUseNoCollisionProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	delegate OnComponentHit;//[Offset: 0x554, Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x560, Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x56c, Size: 12]
	delegate OnComponentWake;//[Offset: 0x578, Size: 12]
	delegate OnComponentSleep;//[Offset: 0x584, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x59c, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x5a8, Size: 12]
	delegate OnClicked;//[Offset: 0x5b4, Size: 12]
	delegate OnReleased;//[Offset: 0x5c0, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x5cc, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x5d8, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x5e4, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x5f0, Size: 12]
	<int,MaterialInterface*> LowLevelLODMaterial;//[Offset: 0x608, Size: 60]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x644, Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x648, Size: 60]
};

class SceneComponent.ActorComponent.Object
{
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc8, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xd0, Size: 4]
	FName AttachSocketName;//[Offset: 0xd8, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xe0, Size: 12]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xec, Size: 12]
	Vector RelativeLocation;//[Offset: 0x120, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x12c, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x138, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x200, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x210, Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x218, Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x220, Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x228, Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x230, Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x238, Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	unsigned char Mobility;//[Offset: 0x23d, Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x240, Size: 4]
	unsigned char DetailMode;//[Offset: 0x244, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x290, Size: 12]
};

class ActorComponent.Object
{
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bFastCreation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	bool bCallPreReplication;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x70, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8e, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8e, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8e, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	enum CreationMethod;//[Offset: 0x92, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x94, Size: 12]
	delegate OnComponentActivated;//[Offset: 0xa4, Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xb0, Size: 12]
};

class PhysicsVolume.Volume.Brush.Actor.Object
{
	float TerminalVelocity;//[Offset: 0x338, Size: 4]
	int Priority;//[Offset: 0x33c, Size: 4]
	float FluidFriction;//[Offset: 0x340, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 1]
};

class Volume.Brush.Actor.Object
{
};

class Brush.Actor.Object
{
	unsigned char BrushType;//[Offset: 0x310, Size: 1]
	Color BrushColor;//[Offset: 0x314, Size: 4]
	int PolyFlags;//[Offset: 0x318, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31c, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31c, Size: 1]
	Model* Brush;//[Offset: 0x320, Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x324, Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x32c, Size: 12]
};

class Actor.Object
{
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float CustomTimeDilation;//[Offset: 0x5c, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 1]
	bool bNewPhysicsReplicationImpl;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x61, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x62, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 1]
	unsigned char RemoteRole;//[Offset: 0x64, Size: 1]
	Actor* Owner;//[Offset: 0x68, Size: 4]
	unsigned char WorldParallelismID;//[Offset: 0x6c, Size: 1]
	FName NetDriverName;//[Offset: 0x78, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x80, Size: 72]
	float InitialLifeSpan;//[Offset: 0xc8, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xd0, Size: 56]
	unsigned char Role;//[Offset: 0x108, Size: 1]
	unsigned char NetDormancy;//[Offset: 0x109, Size: 1]
	unsigned char AutoReceiveInput;//[Offset: 0x10a, Size: 1]
	int InputPriority;//[Offset: 0x10c, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x110, Size: 4]
	float NetCullDistanceSquared;//[Offset: 0x114, Size: 4]
	int NetTag;//[Offset: 0x118, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x120, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x124, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x128, Size: 4]
	unsigned char ActorReplicateFreqLODGroupID;//[Offset: 0x12c, Size: 1]
	bool bLowRepFreqOptimizedNAK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12d, Size: 1]
	float NetPriority;//[Offset: 0x130, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x138, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x138, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x138, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x138, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x138, Size: 1]
	bool bNetDormancyForReplay;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x138, Size: 1]
	bool bSkipComparePropertiesForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x139, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x139, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x139, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x139, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x139, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13a, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13a, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x13b, Size: 1]
	Pawn* Instigator;//[Offset: 0x148, Size: 4]
	Actor*[] Children;//[Offset: 0x14c, Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x158, Size: 4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x15c, Size: 12]
	FName[] Layers;//[Offset: 0x170, Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x17c, Size: 8]
	FName[] Tags;//[Offset: 0x184, Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x190, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x198, Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x1a4, Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x1b0, Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x1bc, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1c8, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1d4, Size: 12]
	delegate OnClicked;//[Offset: 0x1e0, Size: 12]
	delegate OnReleased;//[Offset: 0x1ec, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1f8, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x204, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x210, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x21c, Size: 12]
	delegate OnActorHit;//[Offset: 0x228, Size: 12]
	delegate OnDestroyed;//[Offset: 0x234, Size: 12]
	delegate OnEndPlay;//[Offset: 0x240, Size: 12]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2c4, Size: 12]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2d0, Size: 12]
	int ParallelWorldId;//[Offset: 0x2ec, Size: 4]
	bool bAlwaysRelevantToParallelWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	delegate OnActorEnterParallelWorld;//[Offset: 0x2f4, Size: 12]
	delegate OnActorLeaveParallelWorld;//[Offset: 0x300, Size: 12]
	int RealParallelWorldId;//[Offset: 0x30c, Size: 4]
};

class Color
{
	unsigned char B;//[Offset: 0x0, Size: 1]
	unsigned char G;//[Offset: 0x1, Size: 1]
	unsigned char R;//[Offset: 0x2, Size: 1]
	unsigned char A;//[Offset: 0x3, Size: 1]
};

class BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	Model* Brush;//[Offset: 0x684, Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x688, Size: 4]
	Vector PrePivot;//[Offset: 0x68c, Size: 12]
};

class BodySetup.Object
{
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 52]
	FName BoneName;//[Offset: 0x50, Size: 8]
	unsigned char PhysicsType;//[Offset: 0x58, Size: 1]
	bool bCustomizePhysicsBlendWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0x5c, Size: 4]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x64, Size: 4]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x6c, Size: 12]
	unsigned char CollisionReponse;//[Offset: 0x78, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 1]
	unsigned char[] SphereCollisionEnabledList;//[Offset: 0x7c, Size: 12]
	unsigned char[] CapsuleCollisionEnabledList;//[Offset: 0x88, Size: 12]
	unsigned char[] BoxCollisionEnabledList;//[Offset: 0x94, Size: 12]
	unsigned char[] ConvexCollisionEnabledList;//[Offset: 0xa0, Size: 12]
	unsigned char[] TriMeshesCollisionEnabledList;//[Offset: 0xac, Size: 12]
	unsigned char CollisionTraceFlag;//[Offset: 0xb8, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xc0, Size: 320]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x200, Size: 16]
	float BuildScale;//[Offset: 0x210, Size: 4]
	Vector BuildScale3D;//[Offset: 0x214, Size: 12]
};

class KAggregateGeom
{
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 12]
};

class KSphereElem.KShapeElem
{
	Matrix TM;//[Offset: 0x10, Size: 64]
	Vector Center;//[Offset: 0x50, Size: 12]
	float Radius;//[Offset: 0x5c, Size: 4]
};

class KShapeElem
{
};

class Matrix
{
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]
};

class Plane.Vector
{
	float W;//[Offset: 0xc, Size: 4]
};

class Vector
{
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
};

class KBoxElem.KShapeElem
{
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float X;//[Offset: 0x78, Size: 4]
	float Y;//[Offset: 0x7c, Size: 4]
	float Z;//[Offset: 0x80, Size: 4]
};

class Quat
{
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]
};

class Rotator
{
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]
};

class KSphylElem.KShapeElem
{
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float Radius;//[Offset: 0x78, Size: 4]
	float Length;//[Offset: 0x7c, Size: 4]
};

class KConvexElem.KShapeElem
{
	Vector[] VertexData;//[Offset: 0x10, Size: 12]
	Box ElemBox;//[Offset: 0x1c, Size: 28]
	Transform Transform;//[Offset: 0x40, Size: 48]
};

class Box
{
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	unsigned char IsValid;//[Offset: 0x18, Size: 1]
};

class Transform
{
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]
};

class PhysicalMaterial.Object
{
	float Friction;//[Offset: 0x1c, Size: 4]
	unsigned char FrictionCombineMode;//[Offset: 0x20, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float Restitution;//[Offset: 0x24, Size: 4]
	unsigned char RestitutionCombineMode;//[Offset: 0x28, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	Color MaterialColor;//[Offset: 0x2c, Size: 4]
	float Density;//[Offset: 0x30, Size: 4]
	float RaiseMassToPower;//[Offset: 0x34, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x38, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x3c, Size: 4]
	unsigned char SurfaceType;//[Offset: 0x40, Size: 1]
	float TireFrictionScale;//[Offset: 0x44, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x48, Size: 12]
};

class PhysicalMaterialPropertyBase.Object
{
};

class TireFrictionScalePair
{
	TireType* TireType;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]
};

class TireType.DataAsset.Object
{
	float FrictionScale;//[Offset: 0x20, Size: 4]
};

class DataAsset.Object
{
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 4]
};

class StaticMesh.Object
{
	int MinLOD;//[Offset: 0x30, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x34, Size: 12]
	StaticMaterial[] StaticMaterials;//[Offset: 0x40, Size: 12]
	float LightmapUVDensity;//[Offset: 0x4c, Size: 4]
	int LightMapResolution;//[Offset: 0x50, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x54, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x58, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x60, Size: 4]
	int LODForCollision;//[Offset: 0x64, Size: 4]
	float CullingScreenSize;//[Offset: 0x68, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bLazyLoadBulkData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f, Size: 1]
	bool bEnableTransparentRenderOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xa8, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	FString OccluderMeshDataPath;//[Offset: 0xc4, Size: 12]
	StaticMeshSocket*[] Sockets;//[Offset: 0xe4, Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x12c, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x138, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool bEnableMeshletCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	ClusterNode_Mesh[] ClusterNodesTree;//[Offset: 0x148, Size: 12]
	int ElementToIgnoreForTexFactor;//[Offset: 0x154, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x158, Size: 12]
	NavCollision* NavCollision;//[Offset: 0x164, Size: 4]
};

class MaterialInterface.Object
{
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20, Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x40, Size: 12]
};

class SubsurfaceProfile.Object
{
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 36]
};

class SubsurfaceProfileStruct
{
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]
};

class LinearColor
{
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]
};

class LightmassMaterialInterfaceSettings
{
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
};

class MaterialTextureInfo
{
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]
};

class StaticMaterial
{
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]
};

class MeshUVChannelInfo
{
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]
};

class SoftObjectPath
{
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 12]
};

class StaticMeshSocket.Object
{
	FName SocketName;//[Offset: 0x20, Size: 8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 12]
	Vector RelativeScale;//[Offset: 0x40, Size: 12]
	FString Tag;//[Offset: 0x4c, Size: 12]
};

class BoxSphereBounds
{
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]
};

class Vector4
{
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]
};

class ClusterNode_Mesh
{
	Vector BoundMin;//[Offset: 0x0, Size: 12]
	int FirstChild;//[Offset: 0xc, Size: 4]
	Vector BoundMax;//[Offset: 0x10, Size: 12]
	int LastChild;//[Offset: 0x1c, Size: 4]
	int FirstInstance;//[Offset: 0x20, Size: 4]
	int LastInstance;//[Offset: 0x24, Size: 4]
};

class AssetUserData.Object
{
};

class NavCollision.Object
{
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58, Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64, Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70, Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 1]
};

class NavCollisionCylinder
{
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]
};

class NavCollisionBox
{
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]
};

class NavArea.Object
{
	float DefaultCost;//[Offset: 0x1c, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20, Size: 4]
	Color DrawColor;//[Offset: 0x24, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 1]
};

class NavAgentSelector
{
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
};

class BodyInstance
{
	enum SleepFamily;//[Offset: 0x19, Size: 1]
	unsigned char DOFMode;//[Offset: 0x1a, Size: 1]
	unsigned char CollisionEnabled;//[Offset: 0x1b, Size: 1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 4]
	float MassInKgOverride;//[Offset: 0x64, Size: 4]
	float LinearDamping;//[Offset: 0x68, Size: 4]
	float AngularDamping;//[Offset: 0x6c, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 12]
	Vector COMNudge;//[Offset: 0x7c, Size: 12]
	float MassScale;//[Offset: 0x88, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 12]
	unsigned char ObjectType;//[Offset: 0x98, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4, Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8, Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0, Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8, Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0, Size: 4]
};

class CollisionResponse
{
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 12]
};

class CollisionResponseContainer
{
	unsigned char WorldStatic;//[Offset: 0x0, Size: 1]
	unsigned char WorldDynamic;//[Offset: 0x1, Size: 1]
	unsigned char Pawn;//[Offset: 0x2, Size: 1]
	unsigned char Visibility;//[Offset: 0x3, Size: 1]
	unsigned char Camera;//[Offset: 0x4, Size: 1]
	unsigned char PhysicsBody;//[Offset: 0x5, Size: 1]
	unsigned char Vehicle;//[Offset: 0x6, Size: 1]
	unsigned char Destructible;//[Offset: 0x7, Size: 1]
	unsigned char EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	unsigned char EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	unsigned char EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	unsigned char EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	unsigned char EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	unsigned char EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	unsigned char GameTraceChannel1;//[Offset: 0xe, Size: 1]
	unsigned char GameTraceChannel2;//[Offset: 0xf, Size: 1]
	unsigned char GameTraceChannel3;//[Offset: 0x10, Size: 1]
	unsigned char GameTraceChannel4;//[Offset: 0x11, Size: 1]
	unsigned char GameTraceChannel5;//[Offset: 0x12, Size: 1]
	unsigned char GameTraceChannel6;//[Offset: 0x13, Size: 1]
	unsigned char GameTraceChannel7;//[Offset: 0x14, Size: 1]
	unsigned char GameTraceChannel8;//[Offset: 0x15, Size: 1]
	unsigned char GameTraceChannel9;//[Offset: 0x16, Size: 1]
	unsigned char GameTraceChannel10;//[Offset: 0x17, Size: 1]
	unsigned char GameTraceChannel11;//[Offset: 0x18, Size: 1]
	unsigned char GameTraceChannel12;//[Offset: 0x19, Size: 1]
	unsigned char GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	unsigned char GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	unsigned char GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	unsigned char GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	unsigned char GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	unsigned char GameTraceChannel18;//[Offset: 0x1f, Size: 1]
};

class ResponseChannel
{
	FName Channel;//[Offset: 0x0, Size: 8]
	unsigned char Response;//[Offset: 0x8, Size: 1]
};

class WalkableSlopeOverride
{
	unsigned char WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]
};

class ActorTickFunction.TickFunction
{
};

class TickFunction
{
	unsigned char TickGroup;//[Offset: 0x4, Size: 1]
	unsigned char EndTickGroup;//[Offset: 0x5, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	float TickInterval;//[Offset: 0x30, Size: 4]
};

class RepMovement
{
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]
	bool LocationQuantizationLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	FName LocationQuantizationLODGroup;//[Offset: 0x38, Size: 8]
	unsigned char ForcedLocationQuantizationLOD;//[Offset: 0x40, Size: 1]
};

class RepAttachment
{
	Actor* AttachParent;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 12]
	FName AttachSocket;//[Offset: 0x28, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 4]
	unsigned char ExtraData;//[Offset: 0x34, Size: 1]
};

class Vector_NetQuantize100.Vector
{
};

class InputComponent.ActorComponent.Object
{
};

class Pawn.Actor.Object
{
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 1]
	bool bRoleReplicationOptim;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 1]
	float BaseEyeHeight;//[Offset: 0x318, Size: 4]
	unsigned char AutoPossessPlayer;//[Offset: 0x31c, Size: 1]
	enum AutoPossessAI;//[Offset: 0x31d, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x320, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x324, Size: 4]
	unsigned char RemoteViewPitch;//[Offset: 0x328, Size: 1]
	Controller* LastHitBy;//[Offset: 0x32c, Size: 4]
	Controller* Controller;//[Offset: 0x330, Size: 4]
	Vector ControlInputVector;//[Offset: 0x33c, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x348, Size: 12]
};

class Controller.Actor.Object
{
	Pawn* Pawn;//[Offset: 0x314, Size: 4]
	Character* Character;//[Offset: 0x320, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x324, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x328, Size: 4]
	Rotator ControlRotation;//[Offset: 0x32c, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 1]
	FName StateName;//[Offset: 0x348, Size: 8]
	Actor* ObservedActor;//[Offset: 0x350, Size: 4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x354, Size: 12]
};

class Character.Pawn.Actor.Object
{
	SkeletalMeshComponent* Mesh;//[Offset: 0x354, Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x358, Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x35c, Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x360, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x390, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x3c0, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x3c4, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x3d0, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3e0, Size: 4]
	unsigned char ReplicatedMovementMode;//[Offset: 0x3f0, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3f4, Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3f8, Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3fc, Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x400, Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x408, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 1]
	unsigned char Ping;//[Offset: 0x40d, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40e, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40e, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40e, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40e, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40e, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40e, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40e, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40e, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x410, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x414, Size: 4]
	int JumpMaxCount;//[Offset: 0x418, Size: 4]
	int JumpCurrentCount;//[Offset: 0x41c, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x420, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x424, Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x43c, Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x448, Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x454, Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4f0, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x530, Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x540, Size: 224]
};

class SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	unsigned char AnimationMode;//[Offset: 0x824, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x828, Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x82c, Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x830, Size: 4]
	AnimInstance*[] SubInstances;//[Offset: 0x834, Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x840, Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x844, Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x878, Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x884, Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x8a4, Size: 4]
	enum UseAsyncScene;//[Offset: 0x8a8, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a9, Size: 1]
	unsigned char KinematicBonesUpdateType;//[Offset: 0x8aa, Size: 1]
	unsigned char PhysicsTransformUpdateMode;//[Offset: 0x8ab, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ac, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8ac, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8ac, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8ac, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8ac, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8ac, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x8b0, Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8bc, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8bc, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8bc, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8bc, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8bc, Size: 1]
	float ClothBlendWeight;//[Offset: 0x8c0, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x8c8, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d4, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d4, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d4, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d5, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d6, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x8d8, Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8dd, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8dd, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8dd, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8dd, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8dd, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8dd, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8dd, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8dd, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8de, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x8e0, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x8f0, Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x9b8, Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x9bc, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x9c0, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0xab0, Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0xb4c, Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0xb50, Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb54, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb54, Size: 1]
	float DefaultPosition;//[Offset: 0xb58, Size: 4]
	float DefaultPlayRate;//[Offset: 0xb5c, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xb60, Size: 4]
	float LastPoseTickTime;//[Offset: 0xb64, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb92, Size: 1]
};

class SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	SkeletalMesh* SkeletalMesh;//[Offset: 0x6a4, Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x6a8, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x730, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x74c, Size: 4]
	int ForcedLodModel;//[Offset: 0x750, Size: 4]
	int MinLodModel;//[Offset: 0x754, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x764, Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x770, Size: 4]
	Color WireframeColor;//[Offset: 0x774, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x778, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x778, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x778, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x778, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x788, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x788, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x788, Size: 1]
	unsigned char MeshComponentUpdateFlag;//[Offset: 0x789, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78a, Size: 1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78b, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78b, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x798, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x798, Size: 1]
	unsigned char CustomSortAlternateIndexMode;//[Offset: 0x799, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79a, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79a, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x79c, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x7b4, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f1, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f2, Size: 1]
};

class MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x684, Size: 12]
};

class AnimInstance.Object
{
	float DeltaTime;//[Offset: 0x1c, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20, Size: 4]
	unsigned char RootMotionMode;//[Offset: 0x24, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c, Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38, Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44, Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50, Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118, Size: 12]
	bool bDispatchQueuedAnimEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	bool bNeedReInitializeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	FString ShowDebugToggleSubCategoryName;//[Offset: 0x2f0, Size: 12]
	bool bForceParallelUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
};

class Skeleton.Object
{
	BoneNode[] BoneTree;//[Offset: 0x20, Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c, Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124, Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c, Size: 60]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8, Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 12]
};

class BoneNode
{
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	unsigned char TranslationRetargetingMode;//[Offset: 0xc, Size: 1]
};

class Guid
{
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]
};

class VirtualBone
{
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]
};

class SkeletalMeshSocket.Object
{
	FName SocketName;//[Offset: 0x20, Size: 8]
	FName BoneName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
};

class SmartNameContainer
{
};

class BlendProfile.Object
{
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 12]
};

class BlendProfileBoneEntry
{
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]
};

class BoneReference
{
	FName BoneName;//[Offset: 0x0, Size: 8]
};

class AnimSlotGroup
{
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 12]
};

class AnimNotifyEvent.AnimLinkableElement
{
	float DisplayTime;//[Offset: 0x24, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 4]
	FName NotifyName;//[Offset: 0x38, Size: 8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 4]
	float Duration;//[Offset: 0x48, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	unsigned char MontageTickType;//[Offset: 0x71, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 4]
	unsigned char NotifyFilterType;//[Offset: 0x78, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int TrackIndex;//[Offset: 0x84, Size: 4]
};

class AnimLinkableElement
{
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 4]
	int SlotIndex;//[Offset: 0x8, Size: 4]
	int SegmentIndex;//[Offset: 0xc, Size: 4]
	unsigned char LinkMethod;//[Offset: 0x10, Size: 1]
	unsigned char CachedLinkMethod;//[Offset: 0x11, Size: 1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 4]
	float SegmentLength;//[Offset: 0x18, Size: 4]
	float LinkValue;//[Offset: 0x1c, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 4]
};

class AnimNotify.Object
{
};

class AnimNotifyState.Object
{
};

class AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
{
	AlphaBlend BlendIn;//[Offset: 0x7c, Size: 44]
	float BlendInTime;//[Offset: 0xa8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 44]
	float BlendOutTime;//[Offset: 0xd8, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc, Size: 4]
	FName SyncGroup;//[Offset: 0xe0, Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec, Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x104, Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110, Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c, Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	unsigned char RootMotionRootLock;//[Offset: 0x12a, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c, Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138, Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144, Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168, Size: 8]
};

class AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
{
};

class AnimSequenceBase.AnimationAsset.Object
{
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c, Size: 12]
	float SequenceLength;//[Offset: 0x68, Size: 4]
	float RateScale;//[Offset: 0x6c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70, Size: 12]
};

class AnimationAsset.Object
{
	Skeleton* Skeleton;//[Offset: 0x20, Size: 4]
	AnimMetaData*[] MetaData;//[Offset: 0x44, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 12]
};

class AnimMetaData.Object
{
};

class AlphaBlend
{
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 4]
	float blendTime;//[Offset: 0x8, Size: 4]
};

class CurveFloat.CurveBase.Object
{
	RichCurve FloatCurve;//[Offset: 0x20, Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
};

class CurveBase.Object
{
};

class RichCurve.IndexedCurve
{
	unsigned char PreInfinityExtrap;//[Offset: 0x40, Size: 1]
	unsigned char PostInfinityExtrap;//[Offset: 0x41, Size: 1]
	float DefaultValue;//[Offset: 0x44, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 12]
};

class IndexedCurve
{
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 60]
};

class KeyHandleMap
{
};

class RichCurveKey
{
	unsigned char InterpMode;//[Offset: 0x0, Size: 1]
	unsigned char TangentMode;//[Offset: 0x1, Size: 1]
	unsigned char TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]
};

class RawCurveTracks
{
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 12]
};

class FloatCurve.AnimCurveBase
{
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 84]
};

class AnimCurveBase
{
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]
};

class SmartName
{
	FName DisplayName;//[Offset: 0x0, Size: 8]
};

class MarkerSyncData
{
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 12]
};

class AnimSyncMarker
{
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]
};

class CompositeSection.AnimLinkableElement
{
	FName SectionName;//[Offset: 0x28, Size: 8]
	float StartTime;//[Offset: 0x30, Size: 4]
	FName NextSectionName;//[Offset: 0x38, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 12]
};

class SlotAnimationTrack
{
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 12]
};

class AnimTrack
{
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 12]
};

class AnimSegment
{
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 4]
	float StartPos;//[Offset: 0x4, Size: 4]
	float AnimStartTime;//[Offset: 0x8, Size: 4]
	float AnimEndTime;//[Offset: 0xc, Size: 4]
	float AnimPlayRate;//[Offset: 0x10, Size: 4]
	int LoopingCount;//[Offset: 0x14, Size: 4]
};

class BranchingPoint.AnimLinkableElement
{
	FName EventName;//[Offset: 0x28, Size: 8]
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]
};

class BranchingPointMarker
{
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	unsigned char NotifyEventType;//[Offset: 0x8, Size: 1]
};

class TimeStretchCurve
{
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 4]
};

class TimeStretchCurveMarker
{
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]
};

class SkeletalMesh.Object
{
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x5c, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x78, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x94, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xa0, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xac, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 12]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc4, Size: 12]
	unsigned char SkelMirrorAxis;//[Offset: 0xd0, Size: 1]
	unsigned char SkelMirrorFlipAxis;//[Offset: 0xd1, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd4, Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe0, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe0, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe0, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe0, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xe4, Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xe8, Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xec, Size: 4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xf0, Size: 12]
	MorphTarget*[] MorphTargets;//[Offset: 0xfc, Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x218, Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x224, Size: 4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x228, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x234, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x244, Size: 12]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x25c, Size: 12]
};

class SkeletalMaterial
{
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]
};

class BoneMirrorInfo
{
	int SourceIndex;//[Offset: 0x0, Size: 4]
	unsigned char BoneFlipAxis;//[Offset: 0x4, Size: 1]
};

class SkeletalMeshLODInfo
{
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x14, Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20, Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30, Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178, Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204, Size: 532]
	FName[] RemovedBones;//[Offset: 0x418, Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x424, Size: 12]
	AnimSequence* BakePose;//[Offset: 0x430, Size: 4]
	FString SourceImportFilename;//[Offset: 0x434, Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 1]
};

class TriangleSortSettings
{
	unsigned char TriangleSorting;//[Offset: 0x0, Size: 1]
	unsigned char CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]
};

class SkeletalMeshOptimizationSettings
{
	unsigned char ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	unsigned char SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	unsigned char TextureImportance;//[Offset: 0x1d, Size: 1]
	unsigned char ShadingImportance;//[Offset: 0x1e, Size: 1]
	unsigned char SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c, Size: 12]
	int BaseLOD;//[Offset: 0x38, Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44, Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144, Size: 4]
};

class SimplygonMaterialLODSettings
{
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	unsigned char MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	unsigned char TextureWidth;//[Offset: 0x3, Size: 1]
	unsigned char TextureHeight;//[Offset: 0x4, Size: 1]
	unsigned char SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	unsigned char TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24, Size: 68]
};

class SimplygonChannelCastingSettings
{
	unsigned char MaterialChannel;//[Offset: 0x0, Size: 1]
	unsigned char Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	unsigned char ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
};

class OutputMaterialInfo
{
};

class MaterialProxySettings
{
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	unsigned char TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	unsigned char MaterialMergeType;//[Offset: 0x90, Size: 1]
	unsigned char BlendMode;//[Offset: 0x91, Size: 1]
};

class IntPoint
{
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
};

class AnimSequence.AnimSequenceBase.AnimationAsset.Object
{
	int NumFrames;//[Offset: 0x7c, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80, Size: 12]
	float StreamableFirstChunkSecond;//[Offset: 0x98, Size: 4]
	float StreamableFollowingChunkSecond;//[Offset: 0x9c, Size: 4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	unsigned char AdditiveAnimType;//[Offset: 0x108, Size: 1]
	unsigned char RefPoseType;//[Offset: 0x109, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x10c, Size: 4]
	int RefFrameIndex;//[Offset: 0x110, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x114, Size: 4]
	FName RetargetSource;//[Offset: 0x118, Size: 8]
	enum Interpolation;//[Offset: 0x120, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	unsigned char RootMotionRootLock;//[Offset: 0x122, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x128, Size: 12]
};

class TrackToSkeletonMap
{
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]
};

class SimplygonRemeshingSettings
{
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24, Size: 104]
};

class GroupedSkeletalOptimizationSettings
{
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4, Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
};

class MeshProxySettings
{
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	unsigned char LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]
};

class PhysicsAsset.Object
{
	int[] BoundsBodies;//[Offset: 0x1c, Size: 12]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28, Size: 12]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34, Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc, Size: 4]
	BodySetup*[] BodySetup;//[Offset: 0xc0, Size: 12]
};

class SkeletalBodySetup.BodySetup.Object
{
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2b0, Size: 12]
};

class PhysicalAnimationProfile
{
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]
};

class PhysicalAnimationData
{
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]
};

class PhysicsConstraintTemplate.Object
{
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 260]
};

class ConstraintInstance
{
	FName JointName;//[Offset: 0x10, Size: 8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 8]
	Vector Pos1;//[Offset: 0x28, Size: 12]
	Vector PriAxis1;//[Offset: 0x34, Size: 12]
	Vector SecAxis1;//[Offset: 0x40, Size: 12]
	Vector Pos2;//[Offset: 0x4c, Size: 12]
	Vector PriAxis2;//[Offset: 0x58, Size: 12]
	Vector SecAxis2;//[Offset: 0x64, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 260]
};

class ConstraintProfileProperties
{
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]
};

class LinearConstraint.ConstraintBaseParams
{
	float Limit;//[Offset: 0x14, Size: 4]
	unsigned char XMotion;//[Offset: 0x18, Size: 1]
	unsigned char YMotion;//[Offset: 0x19, Size: 1]
	unsigned char ZMotion;//[Offset: 0x1a, Size: 1]
};

class ConstraintBaseParams
{
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
};

class ConeConstraint.ConstraintBaseParams
{
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	unsigned char Swing1Motion;//[Offset: 0x1c, Size: 1]
	unsigned char Swing2Motion;//[Offset: 0x1d, Size: 1]
};

class TwistConstraint.ConstraintBaseParams
{
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	unsigned char TwistMotion;//[Offset: 0x18, Size: 1]
};

class LinearDriveConstraint
{
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
};

class ConstraintDrive
{
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
};

class AngularDriveConstraint
{
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	unsigned char AngularDriveMode;//[Offset: 0x48, Size: 1]
};

class PhysicsConstraintProfileHandle
{
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]
};

class ThumbnailInfo.Object
{
};

class NodeMappingContainer.Object
{
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c, Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58, Size: 40]
};

class NodeMap
{
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]
};

class Blueprint.BlueprintCore.Object
{
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 12]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 4]
	unsigned char BlueprintType;//[Offset: 0x68, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
};

class BlueprintCore.Object
{
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 16]
};

class SimpleConstructionScript.Object
{
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 12]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 12]
};

class SCS_Node.Object
{
	class Object* ComponentClass;//[Offset: 0x1c, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]
	FName VariableName;//[Offset: 0x60, Size: 8]
	FName AttachToName;//[Offset: 0x68, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 12]
	Guid VariableGuid;//[Offset: 0x9c, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 8]
};

class BlueprintCookedComponentInstancingData
{
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 12]
};

class BlueprintComponentChangedPropertyInfo
{
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 4]
};

class Struct.Field.Object
{
};

class Field.Object
{
};

class BPVariableMetaDataEntry
{
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 12]
};

class TimelineTemplate.Object
{
	float TimelineLength;//[Offset: 0x1c, Size: 4]
	unsigned char LengthMode;//[Offset: 0x20, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 12]
	Guid TimelineGuid;//[Offset: 0x60, Size: 16]
};

class TTEventTrack.TTTrackBase
{
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 4]
};

class TTTrackBase
{
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
};

class TTFloatTrack.TTTrackBase
{
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 4]
};

class TTVectorTrack.TTTrackBase
{
	CurveVector* CurveVector;//[Offset: 0xc, Size: 4]
};

class CurveVector.CurveBase.Object
{
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
};

class TTLinearColorTrack.TTTrackBase
{
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 4]
};

class CurveLinearColor.CurveBase.Object
{
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
};

class InheritableComponentHandler.Object
{
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 12]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 12]
};

class ComponentOverrideRecord
{
	class Object* ComponentClass;//[Offset: 0x0, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]
};

class ComponentKey
{
	class Object* OwnerClass;//[Offset: 0x0, Size: 4]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]
};

class MorphTarget.Object
{
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 4]
};

class ClothingAssetData_Legacy
{
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 80]
};

class ClothPhysicsProperties_Legacy
{
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]
};

class ClothingAssetBase.Object
{
	FString ImportedFilePath;//[Offset: 0x1c, Size: 12]
	Guid AssetGuid;//[Offset: 0x28, Size: 16]
};

class SkinWeightProfileInfo
{
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]
};

class SingleAnimationPlayData
{
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	float SavedPosition;//[Offset: 0x8, Size: 4]
	float SavedPlayRate;//[Offset: 0xc, Size: 4]
};

class ClothingSimulationFactory.Object
{
};

class SkelMeshComponentLODInfo
{
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 12]
};

class CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
{
	Character* CharacterOwner;//[Offset: 0x134, Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 1]
	float GravityScale;//[Offset: 0x13c, Size: 4]
	float MaxStepHeight;//[Offset: 0x140, Size: 4]
	float JumpZVelocity;//[Offset: 0x144, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x148, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x14c, Size: 4]
	float WalkableFloorZ;//[Offset: 0x150, Size: 4]
	unsigned char MovementMode;//[Offset: 0x154, Size: 1]
	unsigned char CustomMovementMode;//[Offset: 0x155, Size: 1]
	float GroundFriction;//[Offset: 0x180, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x184, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x188, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x18c, Size: 4]
	float MaxFlySpeed;//[Offset: 0x190, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x194, Size: 4]
	float MaxAcceleration;//[Offset: 0x198, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x19c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x1a0, Size: 4]
	float BrakingFriction;//[Offset: 0x1a4, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1ac, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1b0, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1b4, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1b8, Size: 4]
	float AirControl;//[Offset: 0x1bc, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1c0, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1c4, Size: 4]
	float FallingLateralFriction;//[Offset: 0x1c8, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1cc, Size: 4]
	float Buoyancy;//[Offset: 0x1d0, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1d4, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1d8, Size: 4]
	Rotator RotationRate;//[Offset: 0x1dc, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e8, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e8, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e8, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e8, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e8, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e8, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1e8, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e9, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e9, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e9, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e9, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1e9, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1e9, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1ec, Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1f0, Size: 4]
	float OutofWaterZ;//[Offset: 0x1f4, Size: 4]
	float Mass;//[Offset: 0x1f8, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x204, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x208, Size: 4]
	float PushForceFactor;//[Offset: 0x20c, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x210, Size: 4]
	float TouchForceFactor;//[Offset: 0x214, Size: 4]
	float MinTouchForce;//[Offset: 0x218, Size: 4]
	float MaxTouchForce;//[Offset: 0x21c, Size: 4]
	float RepulsionForce;//[Offset: 0x220, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x228, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x22c, Size: 4]
	Vector Acceleration;//[Offset: 0x230, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x23c, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x250, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x260, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x26c, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x270, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x27c, Size: 12]
	float AnalogInputModifier;//[Offset: 0x288, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x294, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x298, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x29c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2a0, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2a4, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2a8, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2ac, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2b0, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2b4, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2b8, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2bc, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2c0, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2c4, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2c8, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2cd, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2d0, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2d4, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2d8, Size: 160]
	unsigned char DefaultLandMovementMode;//[Offset: 0x378, Size: 1]
	unsigned char DefaultWaterMovementMode;//[Offset: 0x379, Size: 1]
	unsigned char GroundMovementMode;//[Offset: 0x37a, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37b, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37b, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37b, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37b, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37b, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37b, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x380, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x380, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x380, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x380, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x380, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x380, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x380, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x381, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x381, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x381, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x381, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x381, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x381, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x381, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x382, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x382, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x382, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x382, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x382, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x394, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x398, Size: 12]
	int AvoidanceUID;//[Offset: 0x3a4, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3a8, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3ac, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b0, Size: 4]
	float AvoidanceWeight;//[Offset: 0x3b4, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x3b8, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4cc, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4d0, Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5f0, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x630, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63d, Size: 1]
};

class PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
{
	Pawn* PawnOwner;//[Offset: 0x128, Size: 4]
};

class NavMovementComponent.MovementComponent.ActorComponent.Object
{
	NavAgentProperties NavAgentProps;//[Offset: 0xfc, Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x114, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118, Size: 1]
	MovementProperties MovementState;//[Offset: 0x11c, Size: 4]
};

class MovementComponent.ActorComponent.Object
{
	SceneComponent* UpdatedComponent;//[Offset: 0xc4, Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc8, Size: 4]
	Vector Velocity;//[Offset: 0xd0, Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xdd, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xe0, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xec, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf8, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf8, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf8, Size: 1]
};

class NavAgentProperties.MovementProperties
{
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14, Size: 4]
};

class MovementProperties
{
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
};

class NavigationData.Actor.Object
{
	PrimitiveComponent* RenderingComp;//[Offset: 0x310, Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x318, Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x368, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x368, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x368, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x368, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x369, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x36c, Size: 4]
	uint32 DataVersion;//[Offset: 0x370, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3fc, Size: 12]
};

class NavDataConfig.NavAgentProperties.MovementProperties
{
	FName Name;//[Offset: 0x18, Size: 8]
	Color Color;//[Offset: 0x20, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30, Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38, Size: 24]
};

class SoftClassPath.SoftObjectPath
{
};

class SupportedAreaData
{
	FString AreaClassName;//[Offset: 0x0, Size: 12]
	int AreaID;//[Offset: 0xc, Size: 4]
	class Object* AreaClass;//[Offset: 0x10, Size: 4]
};

class FindFloorResult
{
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 144]
};

class HitResult
{
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]
	Vector[] TriangleVertexLocationArray;//[Offset: 0x84, Size: 12]
};

class Vector_NetQuantize.Vector
{
};

class Vector_NetQuantizeNormal.Vector
{
};

class NavAvoidanceMask
{
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
};

class CharacterMovementComponentPostPhysicsTickFunction.TickFunction
{
};

class RootMotionSourceGroup
{
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 1]
};

class Vector_NetQuantize10.Vector
{
};

class RootMotionSourceSettings
{
	unsigned char Flags;//[Offset: 0x0, Size: 1]
};

class RootMotionMovementParams
{
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]
};

class CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	float CapsuleHalfHeight;//[Offset: 0x694, Size: 4]
	float CapsuleRadius;//[Offset: 0x698, Size: 4]
	float CapsuleHeight;//[Offset: 0x69c, Size: 4]
};

class ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	Color ShapeColor;//[Offset: 0x684, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x688, Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68c, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68c, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68c, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x690, Size: 4]
};

class BasedMovementInfo
{
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	bool bNearPushBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bPushedByBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 12]
	Rotator Rotation;//[Offset: 0x20, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
};

class SimulatedRootMotionReplicatedMove
{
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 224]
};

class RepRootMotionMontage
{
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 4]
	float Position;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 12]
};

class PlayerState.Info.Actor.Object
{
	float Score;//[Offset: 0x310, Size: 4]
	unsigned char Ping;//[Offset: 0x314, Size: 1]
	FString PlayerName;//[Offset: 0x318, Size: 12]
	int PlayerID;//[Offset: 0x330, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x334, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x334, Size: 1]
	int StartTime;//[Offset: 0x338, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x33c, Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x344, Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x350, Size: 12]
	Pawn* PawnPrivate;//[Offset: 0x368, Size: 4]
};

class Info.Actor.Object
{
};

class LocalMessage.Object
{
};

class UniqueNetIdRepl.UniqueNetIdWrapper
{
};

class UniqueNetIdWrapper
{
};

class MatineeActor.Actor.Object
{
	InterpData* MatineeData;//[Offset: 0x310, Size: 4]
	FName MatineeControllerName;//[Offset: 0x318, Size: 8]
	float PlayRate;//[Offset: 0x320, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	float ForceStartPosition;//[Offset: 0x328, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x32c, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x32c, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x32c, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x32c, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x330, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x334, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x338, Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x348, Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x354, Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x360, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x360, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x360, Size: 1]
	float InterpPosition;//[Offset: 0x364, Size: 4]
	unsigned char ReplicationForceIsPlaying;//[Offset: 0x36c, Size: 1]
	delegate OnPlay;//[Offset: 0x370, Size: 12]
	delegate OnStop;//[Offset: 0x37c, Size: 12]
	delegate OnPause;//[Offset: 0x388, Size: 12]
};

class InterpData.Object
{
	float InterpLength;//[Offset: 0x1c, Size: 4]
	float PathBuildTime;//[Offset: 0x20, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 4]
	float EdSectionStart;//[Offset: 0x34, Size: 4]
	float EdSectionEnd;//[Offset: 0x38, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 12]
};

class InterpGroup.Object
{
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 12]
	FName GroupName;//[Offset: 0x30, Size: 8]
	Color GroupColor;//[Offset: 0x38, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 1]
};

class InterpTrack.Object
{
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 4]
	unsigned char ActiveCondition;//[Offset: 0x34, Size: 1]
	FString TrackTitle;//[Offset: 0x38, Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 1]
};

class InterpTrackInst.Object
{
};

class InterpCurveEdSetup.Object
{
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 12]
	int ActiveTab;//[Offset: 0x28, Size: 4]
};

class CurveEdTab
{
	FString TabName;//[Offset: 0x0, Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 12]
	float ViewStartInput;//[Offset: 0x18, Size: 4]
	float ViewEndInput;//[Offset: 0x1c, Size: 4]
	float ViewStartOutput;//[Offset: 0x20, Size: 4]
	float ViewEndOutput;//[Offset: 0x24, Size: 4]
};

class CurveEdEntry
{
	Object* CurveObject;//[Offset: 0x0, Size: 4]
	Color CurveColor;//[Offset: 0x4, Size: 4]
	FString CurveName;//[Offset: 0x8, Size: 12]
	int bHideCurve;//[Offset: 0x14, Size: 4]
	int bColorCurve;//[Offset: 0x18, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 4]
	int bClamp;//[Offset: 0x20, Size: 4]
	float ClampLow;//[Offset: 0x24, Size: 4]
	float ClampHigh;//[Offset: 0x28, Size: 4]
};

class InterpGroupDirector.InterpGroup.Object
{
};

class InterpGroupActorInfo
{
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 12]
};

class InterpGroupInst.Object
{
	InterpGroup* Group;//[Offset: 0x1c, Size: 4]
	Actor* GroupActor;//[Offset: 0x20, Size: 4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 12]
};

class CameraCutInfo
{
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]
};

class ChildActorComponent.SceneComponent.ActorComponent.Object
{
	class Actor* ChildActorClass;//[Offset: 0x2c0, Size: 4]
	Actor* ChildActor;//[Offset: 0x2c4, Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x2c8, Size: 4]
};

class GeomSelection
{
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]
};

class ActorComponentTickFunction.TickFunction
{
};

class SimpleMemberReference
{
	Object* MemberParent;//[Offset: 0x0, Size: 4]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]
};

class LightingChannels
{
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
};

class PrimitiveComponentPostPhysicsTickFunction.TickFunction
{
};

class LevelActorContainer.Object
{
	Actor*[] Actors;//[Offset: 0x1c, Size: 12]
};

class LevelScriptActor.Actor.Object
{
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 1]
};

class NavigationObjectBase.Actor.Object
{
	CapsuleComponent* CapsuleComponent;//[Offset: 0x314, Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x318, Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x31c, Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
};

class BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	Texture2D* Sprite;//[Offset: 0x684, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x688, Size: 1]
	float ScreenSize;//[Offset: 0x68c, Size: 4]
	float U;//[Offset: 0x690, Size: 4]
	float UL;//[Offset: 0x694, Size: 4]
	float V;//[Offset: 0x698, Size: 4]
	float VL;//[Offset: 0x69c, Size: 4]
};

class Texture2D.Texture.Object
{
	int StreamingIndex;//[Offset: 0xa8, Size: 4]
	int LevelIndex;//[Offset: 0xac, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xb0, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xb4, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xc0, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xca, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xca, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xca, Size: 1]
	unsigned char AddressX;//[Offset: 0xcb, Size: 1]
	unsigned char AddressY;//[Offset: 0xcc, Size: 1]
};

class Texture.Object
{
	Guid LightingGuid;//[Offset: 0x20, Size: 16]
	int LODBias;//[Offset: 0x30, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x48, Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x54, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	unsigned char CompressionSettings;//[Offset: 0x59, Size: 1]
	unsigned char Filter;//[Offset: 0x5a, Size: 1]
	unsigned char LODGroup;//[Offset: 0x5b, Size: 1]
	unsigned char CrunchSetting;//[Offset: 0x5c, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x60, Size: 4]
	unsigned char BasisSetting;//[Offset: 0x64, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x68, Size: 4]
};

class NavigationDataChunk.Object
{
	FName NavigationDataName;//[Offset: 0x20, Size: 8]
};

class MapBuildDataRegistry.Object
{
	unsigned char LevelLightingQuality;//[Offset: 0x1c, Size: 1]
};

class IntVector
{
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]
};

class WorldSettings.Info.Actor.Object
{
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x318, Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x324, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x324, Size: 1]
	bool bEnableParallelWorld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x324, Size: 1]
	int[] ParallelWorldIds;//[Offset: 0x328, Size: 12]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x334, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x334, Size: 1]
	float KillZ;//[Offset: 0x338, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x33c, Size: 4]
	float WorldGravityZ;//[Offset: 0x340, Size: 4]
	float GlobalGravityZ;//[Offset: 0x344, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x348, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x34c, Size: 4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x350, Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x354, Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x358, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35c, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x360, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x36c, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x370, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 1]
	float MaxWorldSize;//[Offset: 0x378, Size: 4]
	int RegionSizeNear;//[Offset: 0x37c, Size: 4]
	int RegionSizeFar;//[Offset: 0x380, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 1]
	int Graduation;//[Offset: 0x388, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x38c, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x390, Size: 1]
	int VisibilityCellSize;//[Offset: 0x394, Size: 4]
	unsigned char VisibilityAggressiveness;//[Offset: 0x398, Size: 1]
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x399, Size: 1]
	unsigned char CurrentDSPVSCategory;//[Offset: 0x39a, Size: 1]
	<unsigned char,DSPVSParameter> DSPVSCategorys;//[Offset: 0x39c, Size: 60]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x3dc, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x42c, Size: 100]
	SurfelRayTracingSettings SurfelRayTracingSettings;//[Offset: 0x490, Size: 64]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x4d0, Size: 16]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x4e0, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x504, Size: 4]
	float WorldToMeters;//[Offset: 0x508, Size: 4]
	float MonoCullingDistance;//[Offset: 0x50c, Size: 4]
	BookMark* BookMarks;//[Offset: 0x510, Size: 4]
	float TimeDilation;//[Offset: 0x538, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x53c, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x540, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x544, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x548, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x54c, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x550, Size: 4]
	PlayerState* Pauser;//[Offset: 0x554, Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x55c, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x568, Size: 12]
	bool bEnableUnLoadLevelGCMemoryOptimitize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	float[] LODRelativeDistances;//[Offset: 0x578, Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	int WorldCompositionNums;//[Offset: 0x588, Size: 4]
	int CompositionBlockLength;//[Offset: 0x58c, Size: 4]
};

class Vector2D
{
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
};

class DamageType.Object
{
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	float DamageImpulse;//[Offset: 0x20, Size: 4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 4]
	float DamageFalloff;//[Offset: 0x2c, Size: 4]
};

class DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object
{
};

class PhysicsCollisionHandler.Object
{
	float ImpactThreshold;//[Offset: 0x1c, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 4]
};

class SoundBase.Object
{
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x24, Size: 4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x28, Size: 12]
	unsigned char MaxConcurrentResolutionRule;//[Offset: 0x34, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x40, Size: 4]
	float Priority;//[Offset: 0x44, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x48, Size: 4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x4c, Size: 12]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x58, Size: 4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x5c, Size: 12]
};

class SoundClass.Object
{
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 12]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 12]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 4]
};

class SoundClassProperties
{
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	unsigned char OutputTarget;//[Offset: 0x25, Size: 1]
};

class PassiveSoundMixModifier
{
	SoundMix* SoundMix;//[Offset: 0x0, Size: 4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 4]
};

class SoundMix.Object
{
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float EQPriority;//[Offset: 0x20, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 12]
	float InitialDelay;//[Offset: 0x6c, Size: 4]
	float FadeInTime;//[Offset: 0x70, Size: 4]
	float Duration;//[Offset: 0x74, Size: 4]
	float FadeOutTime;//[Offset: 0x78, Size: 4]
};

class AudioEQEffect
{
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]
};

class SoundClassAdjuster
{
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 4]
	float PitchAdjuster;//[Offset: 0x8, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 4]
};

class SoundConcurrency.Object
{
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 12]
};

class SoundConcurrencySettings
{
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	unsigned char ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]
};

class SoundAttenuation.Object
{
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 532]
};

class SoundAttenuationSettings.BaseAttenuationSettings
{
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	unsigned char DistanceType;//[Offset: 0x7e, Size: 1]
	float OmniRadius;//[Offset: 0x80, Size: 4]
	float StereoSpread;//[Offset: 0x84, Size: 4]
	unsigned char SpatializationAlgorithm;//[Offset: 0x88, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0x8c, Size: 4]
	float RadiusMin;//[Offset: 0x90, Size: 4]
	float RadiusMax;//[Offset: 0x94, Size: 4]
	float LPFRadiusMin;//[Offset: 0x98, Size: 4]
	float LPFRadiusMax;//[Offset: 0x9c, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xa0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xa4, Size: 88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xfc, Size: 88]
	float LPFFrequencyAtMin;//[Offset: 0x154, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x158, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x15c, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x160, Size: 4]
	float FocusAzimuth;//[Offset: 0x164, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x168, Size: 4]
	float FocusDistanceScale;//[Offset: 0x16c, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x170, Size: 4]
	float FocusPriorityScale;//[Offset: 0x174, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x178, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x17c, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x180, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x184, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x188, Size: 4]
	unsigned char OcclusionTraceChannel;//[Offset: 0x18c, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x190, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x194, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x198, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x19c, Size: 4]
	enum ReverbSendMethod;//[Offset: 0x1a0, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x1a4, Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x1a8, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x1ac, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x1b0, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x1b4, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1b8, Size: 88]
	float ManualReverbSendLevel;//[Offset: 0x210, Size: 4]
};

class BaseAttenuationSettings
{
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8, Size: 88]
	unsigned char AttenuationShape;//[Offset: 0x60, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x64, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x68, Size: 12]
	float ConeOffset;//[Offset: 0x74, Size: 4]
	float FalloffDistance;//[Offset: 0x78, Size: 4]
};

class SpatializationPluginSourceSettingsBase.Object
{
};

class RuntimeFloatCurve
{
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 4]
};

class OcclusionPluginSourceSettingsBase.Object
{
};

class ReverbPluginSourceSettingsBase.Object
{
};

class SoundSubmix.Object
{
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 12]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 4]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x2c, Size: 12]
};

class SoundEffectSubmixPreset.SoundEffectPreset.Object
{
};

class SoundEffectPreset.Object
{
};

class SoundSubmixSendInfo
{
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 4]
};

class SoundEffectSourcePresetChain.Object
{
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 12]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
};

class SourceEffectChainEntry
{
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
};

class SoundEffectSourcePreset.SoundEffectPreset.Object
{
};

class SoundSourceBusSendInfo
{
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 4]
};

class SoundSourceBus.SoundWave.SoundBase.Object
{
	enum SourceBusChannels;//[Offset: 0x1cc, Size: 1]
	float SourceBusDuration;//[Offset: 0x1d0, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 1]
};

class SoundWave.SoundBase.Object
{
	int CompressionQuality;//[Offset: 0x6c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	int StreamingPriority;//[Offset: 0x74, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 1]
	unsigned char SoundGroup;//[Offset: 0x7a, Size: 1]
	FString SpokenText;//[Offset: 0x7c, Size: 12]
	float SubtitlePriority;//[Offset: 0x88, Size: 4]
	float Volume;//[Offset: 0x8c, Size: 4]
	float Pitch;//[Offset: 0x90, Size: 4]
	int NumChannels;//[Offset: 0x94, Size: 4]
	int SampleRate;//[Offset: 0x98, Size: 4]
	int RawPCMDataSize;//[Offset: 0x9c, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xa0, Size: 12]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xac, Size: 12]
	CurveTable* Curves;//[Offset: 0xb8, Size: 4]
	CurveTable* InternalCurves;//[Offset: 0xbc, Size: 4]
};

class SubtitleCue
{
	FText Text;//[Offset: 0x0, Size: 12]
	float Time;//[Offset: 0xc, Size: 4]
};

class LocalizedSubtitle
{
	FString LanguageExt;//[Offset: 0x0, Size: 12]
	SubtitleCue[] Subtitles;//[Offset: 0xc, Size: 12]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
};

class CurveTable.Object
{
};

class GameModeBase.Info.Actor.Object
{
	FString OptionsString;//[Offset: 0x310, Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x31c, Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x320, Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x324, Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x328, Size: 4]
	class HUD* HUDClass;//[Offset: 0x32c, Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x330, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x334, Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x338, Size: 4]
	GameSession* GameSession;//[Offset: 0x33c, Size: 4]
	GameStateBase* GameState;//[Offset: 0x340, Size: 4]
	FText DefaultPlayerName;//[Offset: 0x344, Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x350, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x350, Size: 1]
};

class GameSession.Info.Actor.Object
{
	int MaxSpectators;//[Offset: 0x310, Size: 4]
	int MaxPlayers;//[Offset: 0x314, Size: 4]
	int MaxPartySize;//[Offset: 0x318, Size: 4]
	unsigned char MaxSplitscreensPerConnection;//[Offset: 0x31c, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	FName SessionName;//[Offset: 0x320, Size: 8]
};

class GameStateBase.Info.Actor.Object
{
	class GameModeBase* GameModeClass;//[Offset: 0x310, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x314, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x318, Size: 4]
	PlayerState*[] PlayerArray;//[Offset: 0x31c, Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x32c, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x330, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x334, Size: 4]
};

class SpectatorPawn.DefaultPawn.Pawn.Actor.Object
{
};

class DefaultPawn.Pawn.Actor.Object
{
	float BaseTurnRate;//[Offset: 0x354, Size: 4]
	float BaseLookUpRate;//[Offset: 0x358, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x35c, Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x360, Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x364, Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
};

class SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	float SphereRadius;//[Offset: 0x694, Size: 4]
};

class StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	int ForcedLodModel;//[Offset: 0x6a4, Size: 4]
	int LowDeviceForcedLodModel;//[Offset: 0x6a8, Size: 4]
	int PreviousLODLevel;//[Offset: 0x6ac, Size: 4]
	int MinLOD;//[Offset: 0x6b0, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x6b4, Size: 4]
	unsigned char TileLength;//[Offset: 0x6f4, Size: 1]
	unsigned char TileNum;//[Offset: 0x6f5, Size: 1]
	Texture2D* TileTexture;//[Offset: 0x6f8, Size: 4]
	Vector2D TileLocalMin;//[Offset: 0x6fc, Size: 8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x704, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x704, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x704, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x704, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x704, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x704, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x704, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x704, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x705, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x705, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x705, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x705, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x705, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x705, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x705, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x708, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x70c, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x710, Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x724, Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x734, Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x770, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x788, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x79c, Size: 12]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x7a8, Size: 12]
};

class StaticMeshComponentLODInfo
{
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 12]
};

class PaintedVertex
{
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]
};

class PackedNormal
{
	unsigned char X;//[Offset: 0x0, Size: 1]
	unsigned char Y;//[Offset: 0x1, Size: 1]
	unsigned char Z;//[Offset: 0x2, Size: 1]
	unsigned char W;//[Offset: 0x3, Size: 1]
};

class StreamingTextureBuildInfo
{
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]
};

class LightmassPrimitiveSettings
{
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]
};

class IdeaBakingPrimitiveSettings
{
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]
};

class StaticMeshPointLightVertexDataBuffer
{
	unsigned char[] VertexData;//[Offset: 0x0, Size: 12]
};

class PlayerController.Controller.Actor.Object
{
	Player* Player;//[Offset: 0x360, Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x368, Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x36c, Size: 4]
	HUD* MyHUD;//[Offset: 0x374, Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x378, Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x37c, Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x384, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x39c, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x3a0, Size: 12]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x3ac, Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x3bc, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x3c0, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3cc, Size: 12]
	int ClientCap;//[Offset: 0x3d8, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x3dc, Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x3e0, Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x3e4, Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3e8, Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x456, Size: 1]
	unsigned char NetPlayerIndex;//[Offset: 0x457, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x484, Size: 4]
	NetConnection* NetConnection;//[Offset: 0x488, Size: 4]
	float InputYawScale;//[Offset: 0x498, Size: 4]
	float InputPitchScale;//[Offset: 0x49c, Size: 4]
	float InputRollScale;//[Offset: 0x4a0, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a4, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a4, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4a4, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4a4, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4a4, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4a4, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x4a8, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x4ac, Size: 12]
	unsigned char DefaultMouseCursor;//[Offset: 0x4b8, Size: 1]
	unsigned char CurrentMouseCursor;//[Offset: 0x4b9, Size: 1]
	unsigned char DefaultClickTraceChannel;//[Offset: 0x4ba, Size: 1]
	unsigned char CurrentClickTraceChannel;//[Offset: 0x4bb, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x4bc, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d0, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x540, Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x544, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x550, Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x594, Size: 4]
	Vector SpawnLocation;//[Offset: 0x598, Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x5aa, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x5ac, Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
};

class Player.Object
{
	PlayerController* PlayerController;//[Offset: 0x20, Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 4]
};

class InterpTrackInstDirector.InterpTrackInst.Object
{
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 4]
};

class HUD.Actor.Object
{
	PlayerController* PlayerOwner;//[Offset: 0x310, Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x314, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x318, Size: 12]
	FName[] DebugDisplay;//[Offset: 0x32c, Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x338, Size: 12]
	Canvas* Canvas;//[Offset: 0x344, Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x348, Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x34c, Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x358, Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x35c, Size: 4]
};

class Canvas.Object
{
	float OrgX;//[Offset: 0x1c, Size: 4]
	float OrgY;//[Offset: 0x20, Size: 4]
	float ClipX;//[Offset: 0x24, Size: 4]
	float ClipY;//[Offset: 0x28, Size: 4]
	Color DrawColor;//[Offset: 0x2c, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	int SizeX;//[Offset: 0x34, Size: 4]
	int SizeY;//[Offset: 0x38, Size: 4]
	Plane ColorModulate;//[Offset: 0x40, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 4]
};

class ReporterGraph.ReporterBase.Object
{
};

class ReporterBase.Object
{
};

class DebugTextInfo
{
	Actor* SrcActor;//[Offset: 0x0, Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 12]
	FString DebugText;//[Offset: 0x1c, Size: 12]
	float TimeRemaining;//[Offset: 0x28, Size: 4]
	float Duration;//[Offset: 0x2c, Size: 4]
	Color TextColor;//[Offset: 0x30, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float FontScale;//[Offset: 0x48, Size: 4]
};

class Font.Object
{
	enum FontCacheType;//[Offset: 0x20, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 12]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 12]
	int IsRemapped;//[Offset: 0x3c, Size: 4]
	float EmScale;//[Offset: 0x40, Size: 4]
	float Ascent;//[Offset: 0x44, Size: 4]
	float Descent;//[Offset: 0x48, Size: 4]
	float Leading;//[Offset: 0x4c, Size: 4]
	int Kerning;//[Offset: 0x50, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 144]
	int NumCharacters;//[Offset: 0xe4, Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 12]
	float ScalingFactor;//[Offset: 0xf4, Size: 4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 4]
	FName LegacyFontName;//[Offset: 0x100, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 24]
};

class FontCharacter
{
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	unsigned char TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]
};

class FontImportOptionsData
{
	FString FontName;//[Offset: 0x0, Size: 12]
	float Height;//[Offset: 0xc, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	unsigned char CharacterSet;//[Offset: 0x11, Size: 1]
	FString Chars;//[Offset: 0x14, Size: 12]
	FString UnicodeRange;//[Offset: 0x20, Size: 12]
	FString CharsFilePath;//[Offset: 0x2c, Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 4]
	int XPadding;//[Offset: 0x64, Size: 4]
	int YPadding;//[Offset: 0x68, Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int Kerning;//[Offset: 0x80, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 4]
};

class CompositeFont
{
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc, Size: 12]
};

class Typeface
{
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 12]
};

class TypefaceEntry
{
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 20]
};

class FontData
{
	FString FontFilename;//[Offset: 0x0, Size: 12]
	enum Hinting;//[Offset: 0xc, Size: 1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10, Size: 4]
};

class CompositeSubFont
{
	Typeface Typeface;//[Offset: 0x0, Size: 12]
	Int32Range[] CharacterRanges;//[Offset: 0xc, Size: 12]
	float ScalingFactor;//[Offset: 0x18, Size: 4]
};

class Int32Range
{
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]
};

class Int32RangeBound
{
	unsigned char Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]
};

class PlayerCameraManager.Actor.Object
{
	PlayerController* PCOwner;//[Offset: 0x310, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x314, Size: 4]
	float DefaultFOV;//[Offset: 0x320, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x328, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x330, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x380, Size: 1424]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x910, Size: 1424]
	TViewTarget ViewTarget;//[Offset: 0xea0, Size: 1440]
	TViewTarget PendingViewTarget;//[Offset: 0x1440, Size: 1440]
	CameraModifier*[] ModifierList;//[Offset: 0x19f4, Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x1a00, Size: 12]
	float FreeCamDistance;//[Offset: 0x1a0c, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x1a10, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x1a1c, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1a38, Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1a44, Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1a48, Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1a68, Size: 12]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1a80, Size: 12]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1a8c, Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x1a98, Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a9c, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a9c, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a9c, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a9d, Size: 1]
	float ViewPitchMin;//[Offset: 0x1aa0, Size: 4]
	float ViewPitchMax;//[Offset: 0x1aa4, Size: 4]
	float ViewYawMin;//[Offset: 0x1aa8, Size: 4]
	float ViewYawMax;//[Offset: 0x1aac, Size: 4]
	float ViewRollMin;//[Offset: 0x1ab0, Size: 4]
	float ViewRollMax;//[Offset: 0x1ab4, Size: 4]
};

class CameraCacheEntry
{
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]
};

class MinimalViewInfo
{
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	unsigned char ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1328]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x570, Size: 8]
};

class PostProcessSettings
{
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTDefaultOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSkyLightScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTDirectionalLightScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	unsigned char BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc, Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2d4, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2dc, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e0, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 4]
	unsigned char AutoExposureMethod;//[Offset: 0x2fc, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x300, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x304, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x308, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x30c, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x310, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x314, Size: 4]
	bool BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]
	Texture2D* BlindWatermarkingTexture;//[Offset: 0x31c, Size: 4]
	bool bOverride_BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	bool bOverride_ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 1]
	bool bOverride_BlindWatermarkingTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 1]
	float AutoExposureBias;//[Offset: 0x324, Size: 4]
	float HistogramLogMin;//[Offset: 0x328, Size: 4]
	float HistogramLogMax;//[Offset: 0x32c, Size: 4]
	float LensFlareIntensity;//[Offset: 0x330, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x334, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x344, Size: 4]
	int LensFlareCount;//[Offset: 0x348, Size: 4]
	float LensFlareThreshold;//[Offset: 0x34c, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x350, Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x354, Size: 16]
	float VignetteIntensity;//[Offset: 0x3d4, Size: 4]
	float GrainJitter;//[Offset: 0x3d8, Size: 4]
	float GrainIntensity;//[Offset: 0x3dc, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3e0, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3e4, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3e8, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ec, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3f0, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3f4, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3f8, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x404, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x408, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x40c, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x410, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x414, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x424, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x428, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x42c, Size: 4]
	float SRTDefaultOcclusion;//[Offset: 0x430, Size: 4]
	float SRTSkyLightScale;//[Offset: 0x434, Size: 4]
	float SRTDirectionalLightScale;//[Offset: 0x438, Size: 4]
	float SRTFilterSmoothness;//[Offset: 0x43c, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x440, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x450, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x454, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x458, Size: 4]
	unsigned char DepthOfFieldMethod;//[Offset: 0x45c, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45d, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x460, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x464, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x468, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x46c, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x470, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x474, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x478, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x480, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x484, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x488, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x48c, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x490, Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x494, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x498, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a0, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4a4, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4a8, Size: 4]
	float MotionBlurMax;//[Offset: 0x4ac, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4b0, Size: 4]
	float LPVIntensity;//[Offset: 0x4b4, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4b8, Size: 4]
	float LPVSize;//[Offset: 0x4bc, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c0, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4c4, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4c8, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4cc, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d0, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4d4, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4d8, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4dc, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e0, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4e4, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4e8, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4ec, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4f0, Size: 4]
	float LPVFadeRange;//[Offset: 0x4f4, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4f8, Size: 4]
	float ScreenPercentage;//[Offset: 0x4fc, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x500, Size: 12]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x50c, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x510, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x514, Size: 4]
	Object*[] Blendables;//[Offset: 0x518, Size: 12]
};

class TextureCube.Texture.Object
{
};

class WeightedBlendables
{
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 12]
};

class WeightedBlendable
{
	float Weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x4, Size: 4]
};

class TViewTarget
{
	Actor* Target;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]
	PlayerState* PlayerState;//[Offset: 0x590, Size: 4]
};

class CameraModifier.Object
{
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	unsigned char Priority;//[Offset: 0x1d, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 4]
	float AlphaInTime;//[Offset: 0x24, Size: 4]
	float AlphaOutTime;//[Offset: 0x28, Size: 4]
	float Alpha;//[Offset: 0x2c, Size: 4]
};

class EmitterCameraLensEffectBase.Emitter.Actor.Object
{
	ParticleSystem* PS_CameraEffect;//[Offset: 0x354, Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x358, Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x35c, Size: 4]
	Transform RelativeTransform;//[Offset: 0x360, Size: 48]
	float BaseFOV;//[Offset: 0x390, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x394, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x398, Size: 12]
	float DistFromCamera;//[Offset: 0x3a4, Size: 4]
};

class Emitter.Actor.Object
{
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x310, Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x318, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x324, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x330, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x33c, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x348, Size: 12]
};

class ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	ParticleSystem* Template;//[Offset: 0x684, Size: 4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x688, Size: 12]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x694, Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a1, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a1, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6a1, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6a1, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a2, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a2, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a2, Size: 1]
	unsigned char LODMethod;//[Offset: 0x6a4, Size: 1]
	enum RequiredSignificance;//[Offset: 0x6a5, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x6a8, Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x6b4, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x6c0, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x6cc, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x6d8, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x6e4, Size: 12]
	Vector OldPosition;//[Offset: 0x6f0, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x6fc, Size: 12]
	float WarmupTime;//[Offset: 0x708, Size: 4]
	float WarmupTickRate;//[Offset: 0x70c, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x714, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x71c, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x73c, Size: 12]
	float CustomTimeDilation;//[Offset: 0x750, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x794, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x7a0, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x7a8, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x7a9, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x7aa, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x7d4, Size: 12]
};

class FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
};

class ParticleSystem.Object
{
	unsigned char SystemUpdateMode;//[Offset: 0x1c, Size: 1]
	bool bAlwaysUpdateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 4]
	float WarmupTime;//[Offset: 0x28, Size: 4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bUseNewLodFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	unsigned char LODMethod;//[Offset: 0x4e, Size: 1]
	float[] LODDistances;//[Offset: 0x50, Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x60, Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70, Size: 28]
	bool bIgnoreMisFrameSubmit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0x90, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 1]
	float Delay;//[Offset: 0x98, Size: 4]
	float DelayLow;//[Offset: 0x9c, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa4, Size: 4]
	enum InsignificantReaction;//[Offset: 0xa8, Size: 1]
	float InsignificanceDelay;//[Offset: 0xac, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xb0, Size: 1]
	bool bEnableTransparentRenderOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb4, Size: 12]
	float MacroUVRadius;//[Offset: 0xc0, Size: 4]
	unsigned char OcclusionBoundsMethod;//[Offset: 0xc4, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc8, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe4, Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf0, Size: 12]
};

class ParticleEmitter.Object
{
	FName EmitterName;//[Offset: 0x20, Size: 8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 4]
	unsigned char EmitterRenderMode;//[Offset: 0x2c, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x50, Size: 4]
	unsigned char DetailMode;//[Offset: 0x54, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	enum SignificanceLevel;//[Offset: 0x56, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]
};

class ParticleLODLevel.Object
{
	int Level;//[Offset: 0x1c, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 12]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 12]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 12]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 12]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 4]
};

class ParticleModuleRequired.ParticleModule.Object
{
	MaterialInterface* Material;//[Offset: 0x2c, Size: 4]
	MaterialInterface* MaterialPath;//[Offset: 0x30, Size: 40]
	Vector EmitterOrigin;//[Offset: 0x58, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x64, Size: 12]
	unsigned char ScreenAlignment;//[Offset: 0x70, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x74, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x78, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	unsigned char SortMode;//[Offset: 0x7d, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e, Size: 1]
	float EmitterDuration;//[Offset: 0x80, Size: 4]
	float EmitterDurationLow;//[Offset: 0x84, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	int EmitterLoops;//[Offset: 0x8c, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x90, Size: 40]
	unsigned char ParticleBurstMethod;//[Offset: 0xb8, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xbc, Size: 12]
	float EmitterDelay;//[Offset: 0xc8, Size: 4]
	float EmitterDelayLow;//[Offset: 0xcc, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 1]
	unsigned char InterpolationMethod;//[Offset: 0xd1, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xd4, Size: 4]
	int SubImages_Vertical;//[Offset: 0xd8, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	float RandomImageTime;//[Offset: 0xe0, Size: 4]
	int RandomImageChanges;//[Offset: 0xe4, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xec, Size: 12]
	float MacroUVRadius;//[Offset: 0xf8, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	int MaxDrawCount;//[Offset: 0x100, Size: 4]
	enum UVFlippingMode;//[Offset: 0x104, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0x108, Size: 4]
	Texture2D* CutoutTexturePath;//[Offset: 0x110, Size: 40]
	unsigned char BoundingMode;//[Offset: 0x138, Size: 1]
	unsigned char OpacitySourceMode;//[Offset: 0x139, Size: 1]
	float AlphaThreshold;//[Offset: 0x13c, Size: 4]
	int CutoutSubImagesX;//[Offset: 0x140, Size: 4]
	int CutoutSubImagesY;//[Offset: 0x144, Size: 4]
	unsigned char EmitterNormalsMode;//[Offset: 0x148, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0x14c, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0x158, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x168, Size: 12]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x174, Size: 12]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]
};

class ParticleModule.Object
{
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	unsigned char LODValidity;//[Offset: 0x1e, Size: 1]
};

class RawDistributionFloat.RawDistribution
{
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 4]
};

class RawDistribution
{
	DistributionLookupTable Table;//[Offset: 0x0, Size: 28]
};

class DistributionFloat.Distribution.Object
{
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
};

class Distribution.Object
{
};

class DistributionLookupTable
{
	unsigned char Op;//[Offset: 0x0, Size: 1]
	unsigned char EntryCount;//[Offset: 0x1, Size: 1]
	unsigned char EntryStride;//[Offset: 0x2, Size: 1]
	unsigned char SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0xc, Size: 12]
	unsigned char LockFlag;//[Offset: 0x18, Size: 1]
};

class ParticleBurst
{
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]
};

class ParticleModuleTypeDataBase.ParticleModule.Object
{
};

class ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
{
	RawDistributionFloat rate;//[Offset: 0x30, Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x58, Size: 40]
	unsigned char ParticleBurstMethod;//[Offset: 0x80, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x84, Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x90, Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]
};

class ParticleModuleSpawnBase.ParticleModule.Object
{
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
};

class ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
{
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x2c, Size: 12]
};

class ParticleModuleEventBase.ParticleModule.Object
{
};

class ParticleEvent_GenerateInfo
{
	unsigned char Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 12]
};

class ParticleModuleEventSendToGame.Object
{
};

class ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
{
	unsigned char ChainMode;//[Offset: 0x2d, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x70, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x74, Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xb4, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xb8, Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xf8, Size: 4]
};

class ParticleModuleOrbitBase.ParticleModule.Object
{
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
};

class RawDistributionVector.RawDistribution
{
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	Vector MinValueVec;//[Offset: 0x24, Size: 12]
	Vector MaxValueVec;//[Offset: 0x30, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 4]
};

class DistributionVector.Distribution.Object
{
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
};

class OrbitOptions
{
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
};

class ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
{
	unsigned char EventGeneratorType;//[Offset: 0x2c, Size: 1]
	FName EventName;//[Offset: 0x30, Size: 8]
};

class ParticleSystemLOD
{
};

class LODSoloTrack
{
	unsigned char[] SoloEnableSetting;//[Offset: 0x0, Size: 12]
};

class NamedEmitterMaterial
{
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 4]
};

class ParticleSysParam
{
	FName Name;//[Offset: 0x0, Size: 8]
	unsigned char ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 4]
};

class ParticleSystemReplay.Object
{
	int ClipIDNumber;//[Offset: 0x1c, Size: 4]
};

class CameraModifier_CameraShake.CameraModifier.Object
{
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x30, Size: 12]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakeMap;//[Offset: 0x3c, Size: 60]
	float SplitScreenShakeScale;//[Offset: 0x78, Size: 4]
};

class ActiveCameraShakeInfo
{
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 4]
};

class CameraShake.Object
{
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float OscillationDuration;//[Offset: 0x20, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 12]
	float AnimPlayRate;//[Offset: 0x80, Size: 4]
	float AnimScale;//[Offset: 0x84, Size: 4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 4]
	float ShakeScale;//[Offset: 0x134, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 4]
};

class ROscillator
{
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]
};

class FOscillator
{
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	unsigned char InitialOffset;//[Offset: 0x8, Size: 1]
};

class VOscillator
{
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]
};

class CameraAnim.Object
{
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 4]
	float AnimLength;//[Offset: 0x20, Size: 4]
	Box BoundingBox;//[Offset: 0x24, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float BaseFOV;//[Offset: 0x44, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 1328]
	float BasePostProcessBlendWeight;//[Offset: 0x580, Size: 4]
};

class CameraAnimInst.Object
{
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 4]
	float PlayRate;//[Offset: 0x3c, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 4]
	unsigned char PlaySpace;//[Offset: 0x58, Size: 1]
};

class InterpTrackMove.InterpTrack.Object
{
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 12]
	FName LookAtGroupName;//[Offset: 0x80, Size: 8]
	float LinCurveTension;//[Offset: 0x88, Size: 4]
	float AngCurveTension;//[Offset: 0x8c, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	unsigned char RotMode;//[Offset: 0x91, Size: 1]
};

class InterpCurveVector
{
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]
};

class InterpCurvePointVector
{
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	unsigned char InterpMode;//[Offset: 0x28, Size: 1]
};

class InterpLookupTrack
{
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 12]
};

class InterpLookupPoint
{
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]
};

class InterpTrackInstMove.InterpTrackInst.Object
{
	Vector ResetLocation;//[Offset: 0x1c, Size: 12]
	Rotator ResetRotation;//[Offset: 0x28, Size: 12]
};

class PooledCameraShakes
{
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 12]
};

class CameraActor.Actor.Object
{
	unsigned char AutoActivateForPlayer;//[Offset: 0x310, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x314, Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x318, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	float AspectRatio;//[Offset: 0x328, Size: 4]
	float FOVAngle;//[Offset: 0x32c, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x330, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x340, Size: 1328]
};

class CameraComponent.SceneComponent.ActorComponent.Object
{
	float FieldOfView;//[Offset: 0x2c0, Size: 4]
	float OrthoWidth;//[Offset: 0x2c4, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c8, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x2cc, Size: 4]
	float AspectRatio;//[Offset: 0x2d0, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4, Size: 1]
	bool bAutoFixFovByAspectRatio;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d4, Size: 1]
	unsigned char ProjectionMode;//[Offset: 0x2d5, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x2d8, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 1328]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x870, Size: 1]
};

class CheatManager.Object
{
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 4]
};

class DebugCameraController.PlayerController.Controller.Actor.Object
{
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b5, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b5, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5b8, Size: 4]
	float SpeedScale;//[Offset: 0x5cc, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x5d0, Size: 4]
	float InitialAccel;//[Offset: 0x5d4, Size: 4]
	float InitialDecel;//[Offset: 0x5d8, Size: 4]
};

class DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	Color FrustumColor;//[Offset: 0x684, Size: 4]
	float FrustumAngle;//[Offset: 0x688, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x68c, Size: 4]
	float FrustumStartDist;//[Offset: 0x690, Size: 4]
	float FrustumEndDist;//[Offset: 0x694, Size: 4]
	Texture* Texture;//[Offset: 0x698, Size: 4]
};

class PlayerInput.Object
{
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160, Size: 12]
	FName[] InvertedAxis;//[Offset: 0x190, Size: 12]
};

class KeyBind
{
	Key Key;//[Offset: 0x0, Size: 16]
	FString Command;//[Offset: 0x10, Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
};

class Key
{
	FName KeyName;//[Offset: 0x0, Size: 8]
};

class ActiveForceFeedbackEffect
{
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 4]
};

class ForceFeedbackEffect.Object
{
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 12]
	float Duration;//[Offset: 0x28, Size: 4]
};

class ForceFeedbackChannelDetails
{
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 88]
};

class NetConnection.Player.Object
{
	ChildConnection*[] Children;//[Offset: 0x30, Size: 12]
	NetDriver* Driver;//[Offset: 0x3c, Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 12]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 12]
	Actor* ViewTarget;//[Offset: 0x60, Size: 4]
	Actor* OwningActor;//[Offset: 0x64, Size: 4]
	Actor* ObserveTarget;//[Offset: 0x68, Size: 4]
	int MaxPacket;//[Offset: 0x6c, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool RecordLifetimeChangelist;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool BackwardsCompatible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xf0, Size: 12]
	double LastReceiveTime;//[Offset: 0x148, Size: 8]
	bool bOpenClampBandwidthDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29798, Size: 1]
	float MaxBandwitdhDeltaTime;//[Offset: 0x2979c, Size: 4]
	Channel*[] ChannelsToTick;//[Offset: 0x2994c, Size: 12]
	int MaxPacketFaultCountPerMinute;//[Offset: 0x2b444, Size: 4]
	int MaxPacketFaultCountTotal;//[Offset: 0x2b448, Size: 4]
};

class ChildConnection.NetConnection.Player.Object
{
	NetConnection* Parent;//[Offset: 0x2b458, Size: 4]
};

class NetDriver.Object
{
	FString NetConnectionClassName;//[Offset: 0x20, Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38, Size: 4]
	int MaxClientRate;//[Offset: 0x3c, Size: 4]
	float ServerTravelPause;//[Offset: 0x40, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44, Size: 4]
	float RelevantTimeout;//[Offset: 0x48, Size: 4]
	float KeepAliveTime;//[Offset: 0x4c, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50, Size: 4]
	float ConnectionTimeout;//[Offset: 0x54, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x58, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x60, Size: 4]
	NetConnection*[] ClientConnections;//[Offset: 0x64, Size: 12]
	World* World;//[Offset: 0x7c, Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x90, Size: 4]
	Property* RoleProperty;//[Offset: 0x94, Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x98, Size: 4]
	FName NetDriverName;//[Offset: 0xa0, Size: 8]
	float Time;//[Offset: 0xcc, Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x404, Size: 60]
	NetOptimConfig* NetOptimConfig;//[Offset: 0x490, Size: 4]
};

class Property.Field.Object
{
};

class NetOptimConfig.WorldSubsystem.Subsystem.Object
{
	<unsigned char,ActorReplicateFreqLODGroup> ActorReplicateFreqLODGroups;//[Offset: 0x20, Size: 60]
	<FName,LocationNetSerializeLODDetailInfo> LocationSerializeLODGroup;//[Offset: 0x5c, Size: 60]
};

class WorldSubsystem.Subsystem.Object
{
};

class Subsystem.Object
{
};

class ActorReplicateFreqLODGroup
{
	FName Category;//[Offset: 0x0, Size: 8]
	bool LODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool LODDistEnhancedOnBack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float LODBackEnhanceMinDistSq;//[Offset: 0xc, Size: 4]
	float LODBackEnhanceFactor;//[Offset: 0x10, Size: 4]
	float LODLongDistViewFactor;//[Offset: 0x14, Size: 4]
	ActorReplicateFreqLODConfig[] LODDistConfigs;//[Offset: 0x18, Size: 12]
};

class ActorReplicateFreqLODConfig
{
	float DistSquared;//[Offset: 0x0, Size: 4]
	float NetUpdateFreq;//[Offset: 0x4, Size: 4]
};

class LocationNetSerializeLODDetailInfo
{
	float DistSqLOD1;//[Offset: 0x0, Size: 4]
	float DistSqLOD2;//[Offset: 0x4, Size: 4]
};

class PackageMap.Object
{
};

class Channel.Object
{
	NetConnection* Connection;//[Offset: 0x1c, Size: 4]
};

class TouchInterface.Object
{
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 12]
	float ActiveOpacity;//[Offset: 0x28, Size: 4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 4]
	float TimeUntilReset;//[Offset: 0x34, Size: 4]
	float ActivationDelay;//[Offset: 0x38, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float StartupDelay;//[Offset: 0x40, Size: 4]
};

class TouchInputControl
{
	Texture2D* Image1;//[Offset: 0x0, Size: 4]
	Texture2D* Image2;//[Offset: 0x4, Size: 4]
	SlateBrush Brush1;//[Offset: 0x8, Size: 152]
	SlateBrush Brush2;//[Offset: 0xa0, Size: 152]
	Vector2D Center;//[Offset: 0x138, Size: 8]
	Vector2D VisualSize;//[Offset: 0x140, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x148, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x150, Size: 8]
	Vector2D InputScale;//[Offset: 0x158, Size: 8]
	Key MainInputKey;//[Offset: 0x160, Size: 16]
	Key AltInputKey;//[Offset: 0x170, Size: 16]
};

class SlateBrush
{
	Vector2D ImageSize;//[Offset: 0x4, Size: 8]
	Margin Margin;//[Offset: 0xc, Size: 16]
	SlateColor TintColor;//[Offset: 0x1c, Size: 28]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Object* ResourceObject;//[Offset: 0x3c, Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40, Size: 40]
	FName ResourceName;//[Offset: 0x68, Size: 8]
	Box2D UVRegion;//[Offset: 0x70, Size: 20]
	unsigned char DrawAs;//[Offset: 0x84, Size: 1]
	unsigned char Tiling;//[Offset: 0x85, Size: 1]
	unsigned char Mirroring;//[Offset: 0x86, Size: 1]
	unsigned char ImageType;//[Offset: 0x87, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
};

class Margin
{
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]
};

class SlateColor
{
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	unsigned char ColorUseRule;//[Offset: 0x10, Size: 1]
};

class Box2D
{
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	unsigned char bIsValid;//[Offset: 0x10, Size: 1]
};

class GameNetworkManager.Info.Actor.Object
{
	int AdjustedNetSpeed;//[Offset: 0x310, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x314, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x318, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x31c, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x320, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x328, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x32c, Size: 4]
	int BadPingThreshold;//[Offset: 0x330, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x334, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x338, Size: 4]
	float PercentForBadPing;//[Offset: 0x33c, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x340, Size: 4]
	float MoveRepSize;//[Offset: 0x344, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x348, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x34c, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x350, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x354, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x358, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x35c, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x360, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x364, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x368, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x36c, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x374, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x37c, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x380, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x384, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x388, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
};

class DSPVSParameter
{
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	int DSVisibilityCellSize;//[Offset: 0x4, Size: 4]
	unsigned char DSVisibilityAggressiveness;//[Offset: 0x8, Size: 1]
	int[] DSDebugGroups;//[Offset: 0xc, Size: 12]
};

class LightmassWorldInfoSettings
{
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	unsigned char VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
};

class IdeaBakingWorldInfoSettings
{
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
};

class SurfelRayTracingSettings
{
	bool bAllowSurfelRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	Vector SurfelVoxelSize;//[Offset: 0x4, Size: 12]
	IntVector SurfelHierarchyDimension;//[Offset: 0x10, Size: 12]
	Vector IrradianceVolumeCellSize;//[Offset: 0x1c, Size: 12]
	IntVector IrradianceVolumeDimension;//[Offset: 0x28, Size: 12]
	uint32 IrradianceVolumeCellDim;//[Offset: 0x34, Size: 4]
	uint32 SurfelInjectSingleSize;//[Offset: 0x38, Size: 4]
	uint32 SurfelPoolInitScale;//[Offset: 0x3c, Size: 4]
};

class ReverbSettings
{
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	unsigned char ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 4]
	float Volume;//[Offset: 0x8, Size: 4]
	float FadeTime;//[Offset: 0xc, Size: 4]
};

class ReverbEffect.Object
{
	float Density;//[Offset: 0x1c, Size: 4]
	float Diffusion;//[Offset: 0x20, Size: 4]
	float Gain;//[Offset: 0x24, Size: 4]
	float GainHF;//[Offset: 0x28, Size: 4]
	float DecayTime;//[Offset: 0x2c, Size: 4]
	float DecayHFRatio;//[Offset: 0x30, Size: 4]
	float ReflectionsGain;//[Offset: 0x34, Size: 4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 4]
	float LateGain;//[Offset: 0x3c, Size: 4]
	float LateDelay;//[Offset: 0x40, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 4]
};

class InteriorSettings
{
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]
};

class BookMark.Object
{
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 12]
};

class NetViewer
{
	NetConnection* Connection;//[Offset: 0x0, Size: 4]
	Actor* InViewer;//[Offset: 0x4, Size: 4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 4]
	Vector ViewLocation;//[Offset: 0xc, Size: 12]
	Vector ViewDir;//[Offset: 0x18, Size: 12]
};

class LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
};

class LevelStreaming.Object
{
	FName PackageName;//[Offset: 0x20, Size: 8]
	World* WorldAsset;//[Offset: 0x28, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 12]
	Transform LevelTransform;//[Offset: 0x70, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa3, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa3, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa3, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa3, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 1]
	int LevelLODIndex;//[Offset: 0xb0, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	Color DrawColor;//[Offset: 0xb8, Size: 4]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xcc, Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xd8, Size: 4]
	FString[] Keywords;//[Offset: 0xe0, Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xec, Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 12]
	delegate OnLevelShown;//[Offset: 0x104, Size: 12]
	delegate OnLevelHidden;//[Offset: 0x110, Size: 12]
	delegate OnStatusChanged;//[Offset: 0x11c, Size: 12]
	Level* LoadedLevel;//[Offset: 0x134, Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 4]
	Level*[] UnloadingLevels;//[Offset: 0x13c, Size: 12]
};

class LevelStreamingVolume.Volume.Brush.Actor.Object
{
	FName[] StreamingLevelNames;//[Offset: 0x338, Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 1]
	unsigned char StreamingUsage;//[Offset: 0x345, Size: 1]
};

class DemoNetDriver.NetDriver.Object
{
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x534, Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x7b4, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x838, Size: 4]
};

class RollbackNetStartupActorInfo
{
	Object* Archetype;//[Offset: 0x8, Size: 4]
	Level* Level;//[Offset: 0x24, Size: 4]
};

class GameInstance.Object
{
	int64[] EncryptedLocalPlayers;//[Offset: 0x24, Size: 12]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30, Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c, Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
};

class LocalPlayer.Player.Object
{
	GameViewportClient* ViewportClient;//[Offset: 0x38, Size: 4]
	unsigned char AspectRatioAxisConstraint;//[Offset: 0x58, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c, Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	int ControllerId;//[Offset: 0xa0, Size: 4]
};

class GameViewportClient.ScriptViewportClient.Object
{
	Console* ViewportConsole;//[Offset: 0x24, Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28, Size: 12]
	World* World;//[Offset: 0x58, Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c, Size: 4]
};

class ScriptViewportClient.Object
{
};

class Console.Object
{
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 12]
};

class DebugDisplayProperty
{
	Object* Obj;//[Offset: 0x0, Size: 4]
	class Object* WithinClass;//[Offset: 0x4, Size: 4]
};

class OnlineSession.Object
{
};

class ParticleEventManager.Actor.Object
{
};

class ObjectPoolManager
{
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4, Size: 60]
	<FName,ObjectPoolClassConfig> mapClassConfigs;//[Offset: 0x40, Size: 60]
	Actor* Holder;//[Offset: 0x84, Size: 4]
};

class ObjectPool
{
	class Object* ObjectClass;//[Offset: 0x0, Size: 4]
	int ObjectLifePeriodTime;//[Offset: 0x4, Size: 4]
	Object*[] Pool;//[Offset: 0x8, Size: 12]
	<Object*,uint32> RecycleTime;//[Offset: 0x14, Size: 60]
	int Size;//[Offset: 0x50, Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
};

class ObjectPoolClassConfig
{
	FName ObjectClassName;//[Offset: 0x0, Size: 8]
	bool ObjectPoolEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool ObjectPoolEnableForComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int PoolSize;//[Offset: 0xc, Size: 4]
	int LifePeriodTime;//[Offset: 0x10, Size: 4]
	bool UseOldPoolLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool DisableOnLowMemDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	int BackendSwitchType;//[Offset: 0x18, Size: 4]
};

class NavigationSystem.BlueprintFunctionLibrary.Object
{
	NavigationData* MainNavData;//[Offset: 0x1c, Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20, Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x28, Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	enum DataGatheringMode;//[Offset: 0x2d, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x30, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x34, Size: 12]
	float UpdateInterval;//[Offset: 0x40, Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x44, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x48, Size: 12]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x54, Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa8, Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb4, Size: 12]
	enum OperationMode;//[Offset: 0x15c, Size: 1]
};

class BlueprintFunctionLibrary.Object
{
};

class CrowdManagerBase.Object
{
};

class AISystemBase.Object
{
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 24]
	FName AISystemModuleName;//[Offset: 0x38, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
};

class AvoidanceManager.Object
{
	float DefaultTimeToLive;//[Offset: 0x20, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 4]
	float TestHeightDifference;//[Offset: 0x34, Size: 4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 4]
};

class LevelCollection
{
	GameStateBase* GameState;//[Offset: 0x4, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 4]
	<Level*> Levels;//[Offset: 0x14, Size: 60]
};

class MaterialParameterCollectionInstance.Object
{
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 4]
	World* World;//[Offset: 0x24, Size: 4]
};

class MaterialParameterCollection.Object
{
	Guid stateID;//[Offset: 0x1c, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 12]
};

class CollectionScalarParameter.CollectionParameterBase
{
	float DefaultValue;//[Offset: 0x18, Size: 4]
};

class CollectionParameterBase
{
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]
};

class CollectionVectorParameter.CollectionParameterBase
{
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]
};

class WorldComposition.Object
{
	LevelStreaming*[] TilesStreaming;//[Offset: 0xd4, Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xe0, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xec, Size: 4]
	FString PVEBordersName;//[Offset: 0xf0, Size: 12]
	FString[] UnloadTileOnServer;//[Offset: 0xfc, Size: 12]
	<FString> UnloadTileSet;//[Offset: 0x108, Size: 60]
	bool bClientUseInitViewpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	Vector ClientInitViewPoint;//[Offset: 0x160, Size: 12]
	LevelStreaming*[] LandScapeStreamingLevel;//[Offset: 0x16c, Size: 12]
};

class InstancedFoliageActor.Actor.Object
{
};

class AkAmbientSound.Actor.Object
{
	AkAudioEvent* AkAudioEvent;//[Offset: 0x310, Size: 4]
	AkComponent* AkComponent;//[Offset: 0x314, Size: 4]
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
};

class AkAudioEvent.Object
{
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MinimumDuration;//[Offset: 0x28, Size: 4]
	float MaximumDuration;//[Offset: 0x2c, Size: 4]
};

class AkAudioBank.Object
{
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
};

class AkComponent.SceneComponent.ActorComponent.Object
{
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2c0, Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2c4, Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x2d0, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x2d4, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2d8, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e2, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e2, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x2e4, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x2e8, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2ec, Size: 4]
	FString EventName;//[Offset: 0x2f0, Size: 12]
};

class AkAuxBus.Object
{
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]
};

class PostProcessVolume.Volume.Brush.Actor.Object
{
	PostProcessSettings Settings;//[Offset: 0x340, Size: 1328]
	float Priority;//[Offset: 0x870, Size: 4]
	float BlendRadius;//[Offset: 0x874, Size: 4]
	float BlendWeight;//[Offset: 0x878, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x87c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x87c, Size: 1]
};

class PointLight.Light.Actor.Object
{
	PointLightComponent* PointLightComponent;//[Offset: 0x318, Size: 4]
};

class Light.Actor.Object
{
	LightComponent* LightComponent;//[Offset: 0x310, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
};

class PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
{
	float Radius;//[Offset: 0x3bc, Size: 4]
	float AttenuationRadius;//[Offset: 0x3c0, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c4, Size: 1]
	float LightFalloffExponent;//[Offset: 0x3c8, Size: 4]
	float SourceRadius;//[Offset: 0x3cc, Size: 4]
	float SoftSourceRadius;//[Offset: 0x3d0, Size: 4]
	float SourceLength;//[Offset: 0x3d4, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d8, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x3dc, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x3e0, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e4, Size: 1]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e4, Size: 1]
	float ShadowControl;//[Offset: 0x3e8, Size: 4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x3ec, Size: 12]
};

class LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
{
	float Temperature;//[Offset: 0x2e8, Size: 4]
	float MaxDrawDistance;//[Offset: 0x2ec, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x2f0, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 1]
	int ShadowMapChannel;//[Offset: 0x2f8, Size: 4]
	float MinRoughness;//[Offset: 0x300, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x304, Size: 4]
	int LightPriority;//[Offset: 0x308, Size: 4]
	float ShadowBias;//[Offset: 0x30c, Size: 4]
	float ShadowSharpen;//[Offset: 0x310, Size: 4]
	float ContactShadowLength;//[Offset: 0x314, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x318, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x318, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x318, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x319, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x31c, Size: 4]
	Vector LightFunctionScale;//[Offset: 0x320, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x32c, Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	float IESBrightnessScale;//[Offset: 0x334, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x338, Size: 4]
	float DisabledBrightness;//[Offset: 0x33c, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 1]
	float BloomScale;//[Offset: 0x344, Size: 4]
	float BloomThreshold;//[Offset: 0x348, Size: 4]
	Color BloomTint;//[Offset: 0x34c, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x354, Size: 4]
};

class LightComponentBase.SceneComponent.ActorComponent.Object
{
	Guid LightGuid;//[Offset: 0x2c0, Size: 16]
	float Brightness;//[Offset: 0x2d0, Size: 4]
	float Intensity;//[Offset: 0x2d4, Size: 4]
	Color LightColor;//[Offset: 0x2d8, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dc, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dc, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2dc, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dc, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x2e0, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x2e4, Size: 4]
};

class TextureLightProfile.Texture2D.Texture.Object
{
	float Brightness;//[Offset: 0xe4, Size: 4]
	float TextureMultiplier;//[Offset: 0xe8, Size: 4]
};

class LightmassPointLightSettings.LightmassLightSettings
{
};

class LightmassLightSettings
{
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
};

class DirectionalLight.Light.Actor.Object
{
};

class SkyLight.Info.Actor.Object
{
	SkyLightComponent* LightComponent;//[Offset: 0x310, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
};

class SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
{
	unsigned char SourceType;//[Offset: 0x2e8, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x2ec, Size: 4]
	TextureCube* ProcessedCubemap;//[Offset: 0x2f0, Size: 4]
	float SourceCubemapAngle;//[Offset: 0x2f4, Size: 4]
	int CubemapResolution;//[Offset: 0x2f8, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x2fc, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x304, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x314, Size: 4]
	float Contrast;//[Offset: 0x318, Size: 4]
	float OcclusionExponent;//[Offset: 0x31c, Size: 4]
	float MinOcclusion;//[Offset: 0x320, Size: 4]
	Color OcclusionTint;//[Offset: 0x324, Size: 4]
	unsigned char OcclusionCombineMode;//[Offset: 0x328, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3c8, Size: 4]
};

class SphereReflectionCapture.ReflectionCapture.Actor.Object
{
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x314, Size: 4]
};

class ReflectionCapture.Actor.Object
{
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x310, Size: 4]
};

class DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
};

class ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
{
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x2c0, Size: 4]
	enum ReflectionSourceType;//[Offset: 0x2c4, Size: 1]
	float Brightness;//[Offset: 0x2c8, Size: 4]
	float RealtimeBrightness;//[Offset: 0x2cc, Size: 4]
	float RealtimeAngle;//[Offset: 0x2d0, Size: 4]
	Vector RealtimeColor;//[Offset: 0x2d4, Size: 12]
	Vector CaptureOffset;//[Offset: 0x2e0, Size: 12]
	bool bUseHighPrecisionNormalize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	float DesaturatedNormalizeRatio;//[Offset: 0x2f4, Size: 4]
	Vector4 IrradianceMap;//[Offset: 0x300, Size: 16]
	Guid stateID;//[Offset: 0x380, Size: 16]
};

class DecalBakingActorMgr.DecalBakingActor.Actor.Object
{
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x354, Size: 12]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x360, Size: 12]
	float RTCacheLifeTime;//[Offset: 0x36c, Size: 4]
	int MaxRTCacheCount;//[Offset: 0x370, Size: 4]
	float RTCacheLifeTimeII;//[Offset: 0x374, Size: 4]
	int MaxRTCacheCountII;//[Offset: 0x378, Size: 4]
	float TickUpdateCacheInterval;//[Offset: 0x37c, Size: 4]
};

class DecalBakingActor.Actor.Object
{
	uint32 MaxDecalProcessPerFame;//[Offset: 0x310, Size: 4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x314, Size: 12]
};

class DecalBakingRequest
{
	Object* Mesh;//[Offset: 0x4, Size: 4]
	DecalParameter[] DecalParams;//[Offset: 0xc, Size: 12]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x18, Size: 4]
};

class DecalParameter
{
	Texture2D* DecalTexture;//[Offset: 0x0, Size: 4]
};

class TextureRenderTarget2D.TextureRenderTarget.Texture.Object
{
	int SizeX;//[Offset: 0xb0, Size: 4]
	int SizeY;//[Offset: 0xb4, Size: 4]
	LinearColor ClearColor;//[Offset: 0xb8, Size: 16]
	unsigned char AddressX;//[Offset: 0xc8, Size: 1]
	unsigned char AddressY;//[Offset: 0xc9, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xca, Size: 1]
	unsigned char RenderTargetFormat;//[Offset: 0xcb, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 1]
	unsigned char OverrideFormat;//[Offset: 0xcd, Size: 1]
};

class TextureRenderTarget.Texture.Object
{
	float TargetGamma;//[Offset: 0xa8, Size: 4]
};

class DecalBakingRTCache
{
	enum DecalBakingType;//[Offset: 0x0, Size: 1]
	FString PlayerUID;//[Offset: 0x4, Size: 12]
	int WeaponAvatarID;//[Offset: 0x10, Size: 4]
	TextureRenderTarget2D* TextureRenderTarget;//[Offset: 0x14, Size: 4]
	float LastActiveTime;//[Offset: 0x18, Size: 4]
	bool bMainRoleRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
};

class SceneCaptureCameraActor.CameraActor.Actor.Object
{
	WidgetCaptureComponent2D* SceneCaptureComponent;//[Offset: 0x870, Size: 4]
};

class WidgetCaptureComponent2D.SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
{
};

class SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
{
	unsigned char ProjectionType;//[Offset: 0x324, Size: 1]
	float FOVAngle;//[Offset: 0x328, Size: 4]
	float OrthoWidth;//[Offset: 0x32c, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x330, Size: 4]
	unsigned char CaptureSource;//[Offset: 0x334, Size: 1]
	unsigned char CompositeMode;//[Offset: 0x335, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x340, Size: 1328]
	float PostProcessBlendWeight;//[Offset: 0x870, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x880, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x8c4, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x8d0, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8dc, Size: 1]
};

class SceneCaptureComponent.SceneComponent.ActorComponent.Object
{
	enum PrimitiveRenderMode;//[Offset: 0x2bd, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2c0, Size: 12]
	Actor*[] HiddenActors;//[Offset: 0x2cc, Size: 12]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2d8, Size: 12]
	Actor*[] ShowOnlyActors;//[Offset: 0x2e4, Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 1]
	float LODDistanceFactor;//[Offset: 0x2f4, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x2f8, Size: 4]
	int CaptureSortPriority;//[Offset: 0x2fc, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x300, Size: 12]
};

class EngineShowFlagsSetting
{
	FString ShowFlagName;//[Offset: 0x0, Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
};

class ExponentialHeightFog.Info.Actor.Object
{
	ExponentialHeightFogComponent* Component;//[Offset: 0x310, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
};

class ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
{
	float FogDensity;//[Offset: 0x2c0, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x2c4, Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x2d4, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x2d8, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x2dc, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x2ec, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x2f0, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x2f4, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x304, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x314, Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x318, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x31c, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x32c, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x330, Size: 4]
	float DirectionalInscatteringGapControl;//[Offset: 0x334, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x338, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x33c, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x340, Size: 16]
	float FogHeightFalloff;//[Offset: 0x350, Size: 4]
	float FogMaxOpacity;//[Offset: 0x354, Size: 4]
	float StartDistance;//[Offset: 0x358, Size: 4]
	float FogCutoffDistance;//[Offset: 0x35c, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x364, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x368, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x36c, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x37c, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x380, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x384, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x38c, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x390, Size: 4]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x3a0, Size: 48]
};

class CustomHeightFog
{
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]
};

class SpotLight.Light.Actor.Object
{
	SpotLightComponent* SpotLightComponent;//[Offset: 0x318, Size: 4]
};

class SpotLightComponent.PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
{
	float InnerConeAngle;//[Offset: 0x3f8, Size: 4]
	float OuterConeAngle;//[Offset: 0x3fc, Size: 4]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 1]
	float NearPlaneOffset;//[Offset: 0x404, Size: 4]
	float FarPlaneOffset;//[Offset: 0x408, Size: 4]
	float LightShaftConeAngle;//[Offset: 0x40c, Size: 4]
};

class Bp_MInitv_RandomEvent_Trigger_C.Actor.Object
{
	BoxComponent* Box;//[Offset: 0x310, Size: 4]
	FString EventName;//[Offset: 0x314, Size: 12]
};

class BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	Vector BoxExtent;//[Offset: 0x694, Size: 12]
};

class BP_MiniTVSpline_C.Actor.Object
{
	SplineComponent* Spline;//[Offset: 0x310, Size: 4]
	bool MoveActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
};

class SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	SplineCurves SplineCurves;//[Offset: 0x684, Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x6d4, Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x6e8, Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x6fc, Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x710, Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x728, Size: 4]
	float Duration;//[Offset: 0x72c, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x731, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x732, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x733, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x736, Size: 1]
	float LoopPosition;//[Offset: 0x738, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x73c, Size: 12]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	bool bIgnorePositionDerivative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x749, Size: 1]
};

class SplineCurves
{
	InterpCurveVector Position;//[Offset: 0x0, Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 20]
};

class InterpCurveQuat
{
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]
};

class InterpCurvePointQuat
{
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	unsigned char InterpMode;//[Offset: 0x40, Size: 1]
};

class InterpCurveFloat
{
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]
};

class InterpCurvePointFloat
{
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	unsigned char InterpMode;//[Offset: 0x10, Size: 1]
};

class Halloween_CarPosition_C.Actor.Object
{
	ArrowComponent* Arrow;//[Offset: 0x310, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 4]
};

class ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	Color ArrowColor;//[Offset: 0x684, Size: 4]
	float ArrowSize;//[Offset: 0x688, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	float ScreenSize;//[Offset: 0x690, Size: 4]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x694, Size: 1]
};

class Lobby_Main_int_C.LuaLevelScriptActor.LevelScriptActor.Actor.Object
{
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x368, Size: 4]
	FrontendUtils* frontUtils;//[Offset: 0x36c, Size: 4]
	bool blockBackScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	FName lastSceneCamera;//[Offset: 0x378, Size: 8]
	SettingConfig_C* SetConfig;//[Offset: 0x380, Size: 4]
	delegate Dispatcher_OpenBox;//[Offset: 0x384, Size: 12]
	Vector2D viewportSize;//[Offset: 0x390, Size: 8]
	float accumTime;//[Offset: 0x398, Size: 4]
	int folderDevice;//[Offset: 0x39c, Size: 4]
	SkyLight* SkyLight_1_EdGraph_4_RefProperty;//[Offset: 0x3a0, Size: 4]
	PointLight* PointLight_0_EdGraph_4_RefProperty;//[Offset: 0x3a4, Size: 4]
	DirectionalLight* DirectionalLight_0_EdGraph_4_RefProperty;//[Offset: 0x3a8, Size: 4]
	CameraActor* LobbySecondCam_EdGraph_4_RefProperty;//[Offset: 0x3ac, Size: 4]
	CameraActor* LobbyFirstCam_EdGraph_4_RefProperty;//[Offset: 0x3b0, Size: 4]
};

class LuaLevelScriptActor.LevelScriptActor.Actor.Object
{
	FString LuaFilePath;//[Offset: 0x354, Size: 12]
};

class PointerToUberGraphFrame
{
};

class FrontendUtils.Object
{
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 4]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x20, Size: 12]
	FName CurrentSceneCameraName;//[Offset: 0x30, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x38, Size: 12]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x44, Size: 60]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x80, Size: 12]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x8c, Size: 60]
	PointLight*[] ScenePointLightList;//[Offset: 0xc8, Size: 12]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xd4, Size: 60]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x110, Size: 60]
	FString GlobalUIContainerClassName;//[Offset: 0x1a8, Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x1b4, Size: 12]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x1c0, Size: 60]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x1fc, Size: 12]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x208, Size: 60]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x26c, Size: 60]
};

class FrontendHUD.Object
{
	GameInstance* GameInstance;//[Offset: 0x2c, Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34, Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40, Size: 4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44, Size: 12]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50, Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0, Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4, Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8, Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac, Size: 4]
	FString CurrentGameStatus;//[Offset: 0xb0, Size: 12]
	FString LastGameStatus;//[Offset: 0xbc, Size: 12]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	FString PendingGameStatus;//[Offset: 0xcc, Size: 12]
	FString LatestGameStatusURL;//[Offset: 0xd8, Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xe4, Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xf0, Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xfc, Size: 12]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x114, Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x120, Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x12c, Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x138, Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x144, Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x150, Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x15c, Size: 4]
};

class LogicManagerBase.Object
{
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	int iUIControlState;//[Offset: 0x38, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x3c, Size: 4]
	FName[] GameStatusList;//[Offset: 0x4c, Size: 12]
	class Object[] WidgetUClassList;//[Offset: 0x7c, Size: 12]
	UAEUserWidget*[] WidgetList;//[Offset: 0x88, Size: 12]
	Object*[] DelayMessage_Obj;//[Offset: 0xa4, Size: 12]
};

class UAEUserWidget.UserWidget.Widget.Visual.Object
{
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x204, Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x208, Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x20c, Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x210, Size: 4]
	Property*[] Params;//[Offset: 0x28c, Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x2a0, Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x2b0, Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x2d0, Size: 32]
	float TickRate;//[Offset: 0x2f0, Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f7, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2f8, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x300, Size: 8]
	enum FadingStatus;//[Offset: 0x310, Size: 1]
	float CurrentOpacity;//[Offset: 0x314, Size: 4]
	float FadingInTime;//[Offset: 0x318, Size: 4]
	float FadingOutTime;//[Offset: 0x31c, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 1]
	FString UIMsgPrefix;//[Offset: 0x324, Size: 12]
	FString[] UIMsgFunctionList;//[Offset: 0x330, Size: 12]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	FString MoudleToRegisted;//[Offset: 0x340, Size: 12]
};

class UserWidget.Widget.Visual.Object
{
	LinearColor ColorAndOpacity;//[Offset: 0xd4, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe8, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf8, Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x118, Size: 16]
	Margin Padding;//[Offset: 0x128, Size: 16]
	WAnimTime WAnimTime;//[Offset: 0x138, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x148, Size: 12]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x154, Size: 12]
	delegate OnTouchStart;//[Offset: 0x160, Size: 16]
	delegate OnTouchMove;//[Offset: 0x170, Size: 16]
	delegate OnTouchEnd;//[Offset: 0x180, Size: 16]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x190, Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x19c, Size: 4]
	int Priority;//[Offset: 0x1a0, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a4, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a4, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a4, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a4, Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a4, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a4, Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	FName[] autoPlayNameList;//[Offset: 0x1a8, Size: 12]
	enum TickFrequency;//[Offset: 0x1b4, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1b8, Size: 4]
};

class Widget.Visual.Object
{
	PanelSlot* Slot;//[Offset: 0x1c, Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 16]
	FText ToolTipText;//[Offset: 0x30, Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 1]
	bool bDisableVolatileInSlateGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBufferNew;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9c, Size: 1]
	unsigned char UsedLayerPolicy;//[Offset: 0x9d, Size: 1]
	unsigned char PreservedLayerNum;//[Offset: 0x9e, Size: 1]
	unsigned char Cursor;//[Offset: 0x9f, Size: 1]
	enum Clipping;//[Offset: 0xa0, Size: 1]
	enum Visibility;//[Offset: 0xa1, Size: 1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	enum WidgetVisible;//[Offset: 0xa3, Size: 1]
	bool bOpenReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	bool bReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa8, Size: 4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc4, Size: 12]
};

class Visual.Object
{
};

class PanelSlot.Visual.Object
{
	PanelWidget* Parent;//[Offset: 0x1c, Size: 4]
	Widget* Content;//[Offset: 0x20, Size: 4]
};

class PanelWidget.Widget.Visual.Object
{
	PanelSlot*[] Slots;//[Offset: 0xd0, Size: 12]
};

class UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
{
	UserWidget*[] WidgetList;//[Offset: 0x354, Size: 12]
	CanvasPanel* ContainerCache;//[Offset: 0x360, Size: 4]
};

class CanvasPanel.PanelWidget.Widget.Visual.Object
{
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
};

class WidgetTransform
{
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float Angle;//[Offset: 0x18, Size: 4]
};

class WidgetNavigation.Object
{
	WidgetNavigationData Up;//[Offset: 0x20, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98, Size: 24]
};

class WidgetNavigationData
{
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]
};

class PropertyBinding.Object
{
	Object* SourceObject;//[Offset: 0x1c, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 12]
	FName DestinationProperty;//[Offset: 0x30, Size: 8]
};

class DynamicPropertyPath
{
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 12]
};

class PropertyPathSegment
{
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0xc, Size: 4]
	Field* Field;//[Offset: 0x10, Size: 4]
};

class WAnimTime
{
	float PlayTime;//[Offset: 0x0, Size: 4]
	float PlayTime;//[Offset: 0x4, Size: 4]
	float PlayTime;//[Offset: 0x8, Size: 4]
	float PlayTime;//[Offset: 0xc, Size: 4]
};

class UMGSequencePlayer.Object
{
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 4]
};

class WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
{
	delegate OnAnimationStarted;//[Offset: 0x220, Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c, Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238, Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c, Size: 12]
};

class MovieSceneSequence.MovieSceneSignedObject.Object
{
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x40, Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1d4, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1d8, Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
};

class MovieSceneSignedObject.Object
{
	Guid Signature;//[Offset: 0x1c, Size: 16]
};

class MovieScene.MovieSceneSignedObject.Object
{
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 12]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 4]
	FloatRange SelectionRange;//[Offset: 0x74, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x84, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float FixedFrameInterval;//[Offset: 0x98, Size: 4]
	float InTime;//[Offset: 0x9c, Size: 4]
	float OutTime;//[Offset: 0xa0, Size: 4]
	float StartTime;//[Offset: 0xa4, Size: 4]
	float EndTime;//[Offset: 0xa8, Size: 4]
	bool bLowDeviceFrameRateLimitEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int LowDeviceFrameLimit;//[Offset: 0xb0, Size: 4]
};

class MovieSceneSpawnable
{
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c, Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20, Size: 12]
	enum Ownership;//[Offset: 0x2c, Size: 1]
	enum DeviceLevel;//[Offset: 0x2d, Size: 1]
	enum UserQualitySettingLevel;//[Offset: 0x2e, Size: 1]
};

class MovieScenePossessable
{
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c, Size: 4]
	Guid ParentGuid;//[Offset: 0x20, Size: 16]
};

class MovieSceneBinding
{
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 12]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 12]
};

class MovieSceneTrack.MovieSceneSignedObject.Object
{
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 4]
};

class MovieSceneTrackEvalOptions
{
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
};

class FloatRange
{
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]
};

class FloatRangeBound
{
	unsigned char Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]
};

class CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate
{
};

class MovieSceneEvaluationTemplate
{
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114, Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 1]
};

class MovieSceneEvaluationTrack
{
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x14, Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 56]
	FName EvaluationGroup;//[Offset: 0x68, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
};

class MovieSceneSegment
{
};

class MovieSceneEvalTemplatePtr
{
};

class MovieSceneTrackImplementationPtr
{
};

class MovieSceneEvaluationField
{
	FloatRange[] Ranges;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 12]
};

class MovieSceneEvaluationGroup
{
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 12]
};

class MovieSceneEvaluationGroupLUTIndex
{
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]
};

class MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
{
	int SegmentIndex;//[Offset: 0x8, Size: 4]
};

class MovieSceneEvaluationFieldTrackPtr
{
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
};

class MovieSceneSequenceID
{
	uint32 Value;//[Offset: 0x0, Size: 4]
};

class MovieSceneTrackIdentifier
{
	uint32 Value;//[Offset: 0x0, Size: 4]
};

class MovieSceneEvaluationMetaData
{
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 12]
};

class MovieSceneOrderedEvaluationKey
{
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]
};

class MovieSceneEvaluationKey
{
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]
};

class MovieSceneSequenceHierarchy
{
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 60]
};

class MovieSceneSubSequenceData
{
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4, Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34, Size: 16]
	int HierarchicalBias;//[Offset: 0x44, Size: 4]
};

class MovieSceneSequenceTransform
{
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]
};

class MovieSceneSequenceHierarchyNode
{
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 12]
};

class MovieSceneTemplateGenerationLedger
{
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4, Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40, Size: 60]
};

class MovieSceneTrackIdentifiers
{
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 12]
};

class MovieSceneTrackCompilationParams
{
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
};

class WidgetAnimationBinding
{
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
};

class NamedSlotBinding
{
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 4]
};

class WidgetTree.Object
{
	Widget* RootWidget;//[Offset: 0x1c, Size: 4]
	Widget*[] AllWidgets;//[Offset: 0x20, Size: 12]
};

class UserWidgetState
{
	FString WidgetName;//[Offset: 0x0, Size: 12]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c, Size: 4]
};

class SettingConfig_C.SaveGame.Object
{
	int CrossHairColor;//[Offset: 0x20, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	int LeftHandFire;//[Offset: 0x28, Size: 4]
	int Gyroscope;//[Offset: 0x2c, Size: 4]
	int ArtQuality;//[Offset: 0x30, Size: 4]
	float ViewPercentage;//[Offset: 0x34, Size: 4]
	int FireMode;//[Offset: 0x38, Size: 4]
	int VehicleControlMode;//[Offset: 0x3c, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	int CameraLensSensibility;//[Offset: 0x44, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float MainVolumValue;//[Offset: 0x90, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float EffectVolumValue;//[Offset: 0x98, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float UIVolumValue;//[Offset: 0xa0, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float BGMVolumValue;//[Offset: 0xa8, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int VoiceChannel;//[Offset: 0xb0, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float SocialIslandOtherVolume;//[Offset: 0xc0, Size: 4]
	float SpeakerVolumValue;//[Offset: 0xc4, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	int LimitBandage;//[Offset: 0xdc, Size: 4]
	int LimitMedical;//[Offset: 0xe0, Size: 4]
	int LimitAnodyne;//[Offset: 0xe4, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xe8, Size: 4]
	int LimitAdrenaline;//[Offset: 0xec, Size: 4]
	int LimitShouliudan;//[Offset: 0xf0, Size: 4]
	int LimitYanwudan;//[Offset: 0xf4, Size: 4]
	int LimitZhenbaodan;//[Offset: 0xf8, Size: 4]
	int LimitRanshaodan;//[Offset: 0xfc, Size: 4]
	int LimitBullet9mm;//[Offset: 0x100, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x104, Size: 4]
	int Limit12koujing;//[Offset: 0x108, Size: 4]
	int Limit45koujing;//[Offset: 0x10c, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x110, Size: 4]
	int Limitbolt;//[Offset: 0x114, Size: 4]
	int LimitBullet5;//[Offset: 0x118, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int FPSLevel;//[Offset: 0x120, Size: 4]
	int ArtStyle;//[Offset: 0x124, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x128, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x12c, Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x168, Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a8, Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	int[] DefaultPlayerChatQuickTextIDList;//[Offset: 0x1e8, Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1f4, Size: 12]
	int LRShootMode;//[Offset: 0x200, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x208, Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x214, Size: 12]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	int NewGetActorID;//[Offset: 0x224, Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	float 3DTouchValue;//[Offset: 0x22c, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	int ShotGunShootMode;//[Offset: 0x234, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x238, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x23c, Size: 4]
	float VehicleEye;//[Offset: 0x240, Size: 4]
	float ParachuteEye;//[Offset: 0x244, Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x248, Size: 12]
	int RepeatingWeaponShootMode;//[Offset: 0x254, Size: 4]
	int DrivingViewMode;//[Offset: 0x258, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	int FpViewValue;//[Offset: 0x260, Size: 4]
	float CamFpFreeEye;//[Offset: 0x264, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x268, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x26c, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x270, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x278, Size: 4]
	FString currentLanguage;//[Offset: 0x27c, Size: 12]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	FString lastViewDayTime;//[Offset: 0x28c, Size: 12]
	FString lastViewWeekTime;//[Offset: 0x298, Size: 12]
	bool DoblySwitch2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool DoblySwitch1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x2a8, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x2ac, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x2b0, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b4, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b8, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x2bc, Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	int RedDotCHColor;//[Offset: 0x2c4, Size: 4]
	int RedDotCHType;//[Offset: 0x2c8, Size: 4]
	int HolographicCHColor;//[Offset: 0x2cc, Size: 4]
	int HolographicCHType;//[Offset: 0x2d0, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x2d4, Size: 4]
	int Sinper2xCHType;//[Offset: 0x2d8, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2dc, Size: 4]
	int Sniper3xCHType;//[Offset: 0x2e0, Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e8, Size: 60]
	int LimitFirstAidKit;//[Offset: 0x324, Size: 4]
	FString XGLanguageTag;//[Offset: 0x328, Size: 12]
	FString XGTimezoneTag;//[Offset: 0x334, Size: 12]
	FString XGPushNightTag;//[Offset: 0x340, Size: 12]
	FString XGPushDayTag;//[Offset: 0x34c, Size: 12]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x35c, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x360, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x364, Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	int LimitSniper2X;//[Offset: 0x36c, Size: 4]
	int LimitSniper3X;//[Offset: 0x370, Size: 4]
	int LimitSniper4X;//[Offset: 0x374, Size: 4]
	int LimitSniper6X;//[Offset: 0x378, Size: 4]
	int LimitSniper8X;//[Offset: 0x37c, Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	int SidewaysMode;//[Offset: 0x384, Size: 4]
	int OpenMirrorMode;//[Offset: 0x388, Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool OBSTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool OBSPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool OBSBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	int LobbyStyleID;//[Offset: 0x394, Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	float ScreenLightness;//[Offset: 0x39c, Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	FString FirstChargeVersion;//[Offset: 0x3a4, Size: 12]
	FString RechargePosSave;//[Offset: 0x3b0, Size: 12]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3c0, Size: 60]
	int LimitViscidityBomb;//[Offset: 0x3fc, Size: 4]
	int LimitZombieGrenade;//[Offset: 0x400, Size: 4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x408, Size: 4]
	int SideMirrorMode;//[Offset: 0x40c, Size: 4]
	int[] DefaultPlayerWheelChatQuickTextIDList;//[Offset: 0x410, Size: 12]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41f, Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x420, Size: 4]
	int LimitAntidote;//[Offset: 0x424, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x42c, Size: 12]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x43c, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	int FPPFireMode;//[Offset: 0x444, Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x448, Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x44c, Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x450, Size: 4]
	unsigned char TurboLastQuality;//[Offset: 0x454, Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x458, Size: 60]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x494, Size: 60]
	int[] UselessWeakGuidIDs;//[Offset: 0x4d0, Size: 12]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de, Size: 1]
	int[] ChatOptiongList5;//[Offset: 0x4e0, Size: 12]
	int[] ChatOptiongList6;//[Offset: 0x4ec, Size: 12]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	int TD_FireMode;//[Offset: 0x4fc, Size: 4]
	int TD_FPPFireMode;//[Offset: 0x500, Size: 4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	float TD_3DTouchValue;//[Offset: 0x508, Size: 4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x510, Size: 4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	int LimitSnowMan;//[Offset: 0x518, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
	int ColorBlindnessType;//[Offset: 0x520, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x528, Size: 4]
	float UAVScopePercent;//[Offset: 0x52c, Size: 4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	int SideMirrorType;//[Offset: 0x534, Size: 4]
	int SideMirrorColor;//[Offset: 0x538, Size: 4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x540, Size: 12]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	bool DisableAutoPickDropMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	int AutoPickClipType;//[Offset: 0x558, Size: 4]
	int[] QuickSignIDList;//[Offset: 0x55c, Size: 12]
	int[] QuickSignWheelIDList;//[Offset: 0x568, Size: 12]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 1]
	int HitEffectColor;//[Offset: 0x578, Size: 4]
	int HurtEffectColor;//[Offset: 0x57c, Size: 4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	int ProfiledScreenSwitch;//[Offset: 0x584, Size: 4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	int BuildDoubleClick;//[Offset: 0x58c, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x590, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x594, Size: 4]
	int DoubleClickDistance;//[Offset: 0x598, Size: 4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	int BattleFPS;//[Offset: 0x5a0, Size: 4]
	int BattleRenderStyle;//[Offset: 0x5a4, Size: 4]
	int BattleRenderQuality;//[Offset: 0x5a8, Size: 4]
	int LobbyFPS;//[Offset: 0x5ac, Size: 4]
	int LobbyRenderStyle;//[Offset: 0x5b0, Size: 4]
	int LobbyRenderQuality;//[Offset: 0x5b4, Size: 4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 1]
	bool OBSLogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bb, Size: 1]
	bool OBSHitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x5c0, Size: 60]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x5fc, Size: 60]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x638, Size: 60]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x674, Size: 60]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x6b0, Size: 60]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x6ec, Size: 60]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72f, Size: 1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x734, Size: 60]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x770, Size: 60]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x7ac, Size: 60]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x7e8, Size: 60]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool OBSCustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x826, Size: 1]
	bool SettingDisableAutoPickupDropMirrorRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x827, Size: 1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	float CamLensSenShoulderTPP;//[Offset: 0x82c, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x830, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x834, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x838, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x83c, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x840, Size: 4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	int ShoulderMode;//[Offset: 0x848, Size: 4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	bool OBSSmokeGrenadeCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84e, Size: 1]
	bool OBSSmokeGrenadeAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84f, Size: 1]
	bool bGunAccessoriesAddDefauleM4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool bGunAccessoriesGuidedRemoveSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	bool bGunAccessoriesGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x852, Size: 1]
	bool bGunAccessoriesGuidedSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x853, Size: 1]
	bool bGunAccessoriesGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	bool bAddedGunAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 1]
	bool bGunSensitivityGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x856, Size: 1]
	bool bGunSensitivityGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x857, Size: 1]
	bool bGunSensitivityGuidedCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	int GunSensitivitySingleTrainingGuideCount;//[Offset: 0x85c, Size: 4]
	bool bGunSensitivitySingleTrainingGuideTiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	bool OBSShowOwnWeaponKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	bool isCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 1]
	FString CloudSensitivityPlayerId_Custom;//[Offset: 0x864, Size: 12]
	bool isOtherCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	bool IsCloudAndLocalSame_SensitivityCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 1]
	bool isCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x872, Size: 1]
	FString CloudAccessoriesPlayerId_Custom;//[Offset: 0x874, Size: 12]
	bool isOtherCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	bool IsCloudAndLocalSame_AccessoriesCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 1]
	int TpViewValue;//[Offset: 0x884, Size: 4]
	bool bHasCloudCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	int PickUpListMode;//[Offset: 0x88c, Size: 4]
	bool GyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	bool bHasCloudCustomAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 1]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x894, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x898, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x89c, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x8a0, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x8a4, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x8a8, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x8ac, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x8b0, Size: 4]
	bool AutoParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 1]
	bool MapMarkEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b5, Size: 1]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x8b8, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x8bc, Size: 4]
	bool FireGyroscopeRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	bool HasOperateRingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 1]
	bool HasOperatedRingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c2, Size: 1]
	bool SettingBasicGyroRverseRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c3, Size: 1]
	bool bLbsNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bLbsWarZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	bool AutoContinueHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c6, Size: 1]
	bool FocalLengthModifySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c7, Size: 1]
	bool FocalLengthModifySwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool bRecordWonderfulReplayOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	int AntiAliasingValue;//[Offset: 0x8cc, Size: 4]
	bool OneKeyProneAndCrouchSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	bool HasOperateOneKeyProneAndCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 1]
	bool bLbsMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d2, Size: 1]
	bool bLbsChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d3, Size: 1]
	bool bOpenBattleNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 1]
	bool bOpenLobbyNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d5, Size: 1]
	int JoystickSprintSensitity;//[Offset: 0x8d8, Size: 4]
	bool bHideIngameUIAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	bool bCloseHitHeadAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 1]
	int HightLightReshowAirLineTimes;//[Offset: 0x8e0, Size: 4]
	bool bHasSetWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	bool bIsShowedHideUIGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e5, Size: 1]
	bool bAmericanCustomSettingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e6, Size: 1]
	float CamLensSenNoneSniper;//[Offset: 0x8e8, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8ec, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x8f0, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x8f4, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x8f8, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x8fc, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x900, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x904, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x908, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x90c, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x910, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x914, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x918, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x91c, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x920, Size: 4]
	float VehicleEye;//[Offset: 0x924, Size: 4]
	float ParachuteEye;//[Offset: 0x928, Size: 4]
	float CamFpFreeEye;//[Offset: 0x92c, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x930, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x934, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x938, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x93c, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x940, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x944, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x948, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x94c, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x950, Size: 4]
	float CamLensSenShoulderTPP;//[Offset: 0x954, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x958, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x95c, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x960, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x964, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x968, Size: 4]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x96c, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x970, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x974, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x978, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x97c, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x980, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x984, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x988, Size: 4]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x98c, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x990, Size: 4]
	bool bInitedCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 1]
	bool bFireGyroSenUseGryo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x995, Size: 1]
	bool bFireCamSenUseCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x996, Size: 1]
	bool AutoHitMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x997, Size: 1]
	bool bResetDeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998, Size: 1]
	bool SwitchSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x999, Size: 1]
	bool bConsumeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99a, Size: 1]
	int[] MaxACCount;//[Offset: 0x99c, Size: 12]
	int[] DefaultACCount;//[Offset: 0x9a8, Size: 12]
	bool HasOperateSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 1]
	bool UseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 1]
	<FString,int> OpenStoreTimes;//[Offset: 0x9b8, Size: 60]
	<int,int> setting_ver_info;//[Offset: 0x9f4, Size: 60]
	bool bIsBackpackExpand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	bool OpenMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 1]
	int HapticSwitch;//[Offset: 0xa34, Size: 4]
	int HapticVoiceSwitch;//[Offset: 0xa38, Size: 4]
	int HapticCharacterSwitch;//[Offset: 0xa3c, Size: 4]
	int HapticWeaponSwitch;//[Offset: 0xa40, Size: 4]
	int HapticVehicleSwitch;//[Offset: 0xa44, Size: 4]
	bool bHapticVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 1]
	bool bHapticVoiceGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa49, Size: 1]
	bool bHapticVoiceGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4a, Size: 1]
	bool bHapticVoiceVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4b, Size: 1]
	bool bHapticCharacterBeGunAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 1]
	bool bHapticCharacterBeOtherAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4d, Size: 1]
	bool bHapticCharacterFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4e, Size: 1]
	bool bHapticWeaponAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4f, Size: 1]
	bool bHapticWeaponAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	bool bHapticWeaponSemiAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa51, Size: 1]
	bool bHapticWeaponSniper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa52, Size: 1]
	bool bHapticWeaponOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa53, Size: 1]
	bool bHapticVehicleDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa54, Size: 1]
	bool bHapticVehicleBeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa55, Size: 1]
	bool bHapticVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa56, Size: 1]
	bool bIsOpenMapTaskUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa57, Size: 1]
	bool AmmoRemain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	bool ReshowAirlineRouteBtnChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa59, Size: 1]
	bool OBMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5a, Size: 1]
	bool OBTeammateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5b, Size: 1]
	bool OBPlayerInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa60, Size: 12]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa6c, Size: 12]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xa78, Size: 12]
	int PlayerChatIndex;//[Offset: 0xa84, Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xa88, Size: 12]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xa94, Size: 12]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xaa0, Size: 12]
	int PlayerChatActorID;//[Offset: 0xaac, Size: 4]
	bool bHasCloudBasicSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 1]
	bool isCloudSettingBasicUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab1, Size: 1]
	FString NewbieGuideDailyLimit;//[Offset: 0xab4, Size: 12]
	int LastSaveSettingBasicTM;//[Offset: 0xac0, Size: 4]
	bool OpenSilentChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 1]
	bool DoubleIntimacyHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac5, Size: 1]
	bool backgroundChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac6, Size: 1]
	bool bCanMapLongPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac7, Size: 1]
	float NoUIOpacity;//[Offset: 0xac8, Size: 4]
	int OldMarkStyle;//[Offset: 0xacc, Size: 4]
	<FString,FString> PlayerFeatureVoiceCfg;//[Offset: 0xad0, Size: 60]
	int SoundVisualizationType;//[Offset: 0xb0c, Size: 4]
	bool OBSSwitchOBHttpComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 1]
	bool LocalHideMetroArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb11, Size: 1]
	int TargetNameGuideTimes;//[Offset: 0xb14, Size: 4]
	int DangerousGuideTimes;//[Offset: 0xb18, Size: 4]
	int HunterTaskGuideTimes;//[Offset: 0xb1c, Size: 4]
	FString SynthesizeFormula;//[Offset: 0xb20, Size: 12]
	bool GrenadeSettingPredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	bool AutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2d, Size: 1]
	bool LocalHideMetroBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2e, Size: 1]
	int LevelPreLoadSetting;//[Offset: 0xb30, Size: 4]
	bool bSpectatingPetVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 1]
	int DBCollectGuideNum;//[Offset: 0xb38, Size: 4]
	int preTeamUpChat;//[Offset: 0xb3c, Size: 4]
	bool bLastIsPreTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 1]
	bool bLastMicPreTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb42, Size: 1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb43, Size: 1]
	int NewVar;//[Offset: 0xb44, Size: 4]
	int AutoPickMeleeType;//[Offset: 0xb48, Size: 4]
	bool AutoUseMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4c, Size: 1]
	int AuxiliaryVoice;//[Offset: 0xb50, Size: 4]
	int InterruptReloadType;//[Offset: 0xb54, Size: 4]
	bool OpenPetSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb58, Size: 1]
	int DefaultMeleeWeaponType;//[Offset: 0xb5c, Size: 4]
	float WeaponVolumValue;//[Offset: 0xb60, Size: 4]
	float VehicleVolumValue;//[Offset: 0xb64, Size: 4]
	float VoiceVolumValue;//[Offset: 0xb68, Size: 4]
	bool ShowMapGunLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 1]
	bool PCOBHotKeyF7LeftLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6d, Size: 1]
	bool PCOBHotKeyF7RightLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6e, Size: 1]
	bool PCOBHotKeyF7Center;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6f, Size: 1]
	bool EntireMapGuideRedDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 1]
	int ManorRenderQuality;//[Offset: 0xb74, Size: 4]
	bool bMotorGliderFlipJoystick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78, Size: 1]
	int ShowSingleTrainingSensitivityTipsCount;//[Offset: 0xb7c, Size: 4]
	bool bCanIntelligentSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 1]
};

class SaveGame.Object
{
};

class DateTime
{
};

class UAELobbyGamePawnMode_C.UAELobbyGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object
{
	SceneComponent* DefaultSceneRoot;//[Offset: 0x398, Size: 4]
};

class UAELobbyGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object
{
};

class UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object
{
};

class GameMode.GameModeBase.Info.Actor.Object
{
	FName MatchState;//[Offset: 0x360, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
	int NumSpectators;//[Offset: 0x36c, Size: 4]
	int NumPlayers;//[Offset: 0x370, Size: 4]
	int NumBots;//[Offset: 0x374, Size: 4]
	float MinRespawnDelay;//[Offset: 0x378, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x37c, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x380, Size: 4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x384, Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x390, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
};

class GameState.GameStateBase.Info.Actor.Object
{
	FName MatchState;//[Offset: 0x340, Size: 8]
	FName PreviousMatchState;//[Offset: 0x348, Size: 8]
	int ElapsedTime;//[Offset: 0x350, Size: 4]
};

class AbstractNavData.NavigationData.Actor.Object
{
};

class StatHUD.HUD.Actor.Object
{
};

class BP_PlayerLobbyPawn_C.STExtraLobbyCharacter.Character.Pawn.Actor.Object
{
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7c0, Size: 4]
	CameraComponent* Camera;//[Offset: 0x7c4, Size: 4]
	BP_LobbyWeaponManager_C* BP_LobbyWeaponManager;//[Offset: 0x7c8, Size: 4]
	LobbyPlayEmoteComponent_BP_C* LobbyPlayEmoteComponent_BP;//[Offset: 0x7cc, Size: 4]
	LobbyWeaponAnimationComponent_C* LobbyWeaponAnimationComponent;//[Offset: 0x7d0, Size: 4]
	SkeletalMeshComponent* WeaponSkeletalMesh;//[Offset: 0x7d4, Size: 4]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x7d8, Size: 4]
	AELobbyCharAnimListComp* AELobbyCharAnimListComp;//[Offset: 0x7dc, Size: 4]
	float Timeline_0_Time_DFD4E0A94A64AF2CC7AD9DB7F31CA12E;//[Offset: 0x7e0, Size: 4]
	unsigned char Timeline_0__Direction_DFD4E0A94A64AF2CC7AD9DB7F31CA12E;//[Offset: 0x7e4, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x7e8, Size: 4]
	int HeadID;//[Offset: 0x7ec, Size: 4]
	int resID;//[Offset: 0x7f0, Size: 4]
	bool press;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4, Size: 1]
	float LocationX;//[Offset: 0x7f8, Size: 4]
	unsigned char FingerIndex;//[Offset: 0x7fc, Size: 1]
	int LobbyPosition;//[Offset: 0x800, Size: 4]
	STExtraWeapon* curEquipingWeapon;//[Offset: 0x804, Size: 4]
	<int,BackpackEmoteHandle*> EmoteItemIDToHandleMap;//[Offset: 0x808, Size: 60]
	FString PlayerKey;//[Offset: 0x844, Size: 12]
	bool HeadIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool canRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	int LuaID;//[Offset: 0x854, Size: 4]
	delegate OnPlayAction;//[Offset: 0x858, Size: 12]
	delegate OnStopAction;//[Offset: 0x864, Size: 12]
	delegate OnChangeEquipment;//[Offset: 0x870, Size: 12]
	BackpackEmoteHandle* CurEmoteHandle;//[Offset: 0x87c, Size: 4]
	bool bIsEmoteLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	int CurrentActionID;//[Offset: 0x884, Size: 4]
	bool IsChangingHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	int PlayOnChangingHeadAcionID;//[Offset: 0x88c, Size: 4]
	int CurPlayEmoteId;//[Offset: 0x890, Size: 4]
	bool IsPlayingAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 1]
	float RotateTime;//[Offset: 0x898, Size: 4]
	float TargetRotation;//[Offset: 0x89c, Size: 4]
	bool StartRotateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	float ClothAnimDyAlpha;//[Offset: 0x8a4, Size: 4]
	float CurClothAnimDyAlpha;//[Offset: 0x8a8, Size: 4]
	float ClothAnimDyAlphaDiff;//[Offset: 0x8ac, Size: 4]
	bool isMVPMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	delegate OnchangeGender;//[Offset: 0x8b4, Size: 12]
	delegate OnChangeWeapon;//[Offset: 0x8c0, Size: 12]
	bool bEquipingSkateAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	bool isAutoTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cd, Size: 1]
	Vector LocationBeforeEmote;//[Offset: 0x8d0, Size: 12]
	int AvatarLevel;//[Offset: 0x8dc, Size: 4]
	float Inten;//[Offset: 0x8e0, Size: 4]
	delegate OnEquipClothStateChange;//[Offset: 0x8e4, Size: 12]
	bool ForceUseDefaultIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 1]
	delegate OnSetForceUseDefaultIdle;//[Offset: 0x8f4, Size: 12]
	<int,int> DynamicMatClothMap;//[Offset: 0x900, Size: 60]
	float WindSpeed_Editor;//[Offset: 0x93c, Size: 4]
	float WindStrength_Editor;//[Offset: 0x940, Size: 4]
	float WindRadius_Editor;//[Offset: 0x944, Size: 4]
	CurveFloat* WindSpeed;//[Offset: 0x948, Size: 4]
	float AccumelateWindTime;//[Offset: 0x94c, Size: 4]
	delegate OnAvatarComponentAllMeshLoaded;//[Offset: 0x950, Size: 12]
	delegate OnSceneType2Change;//[Offset: 0x95c, Size: 12]
	int SceneType2;//[Offset: 0x968, Size: 4]
	bool NeedLookAtCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c, Size: 1]
};

class STExtraLobbyCharacter.Character.Pawn.Actor.Object
{
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	FString LobbyPlayerKey;//[Offset: 0x668, Size: 12]
	FString PlayerUID;//[Offset: 0x674, Size: 12]
	bool bWeaponAnimOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x684, Size: 12]
	unsigned char charSceneType;//[Offset: 0x690, Size: 1]
	unsigned char lobbyPosIdx;//[Offset: 0x691, Size: 1]
	int LocalLobbyPos;//[Offset: 0x694, Size: 4]
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x698, Size: 12]
	delegate LobbyCharWeaponChangeDelegate;//[Offset: 0x6a4, Size: 12]
	delegate ChangeWeaponVisibilityDelegate;//[Offset: 0x6b0, Size: 12]
	unsigned char lobbyGender;//[Offset: 0x6bc, Size: 1]
	class AnimInstance* LobbyMaleAnimClass;//[Offset: 0x6c0, Size: 40]
	class AnimInstance* LobbyFemaleAnimClass;//[Offset: 0x6e8, Size: 40]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x710, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x714, Size: 4]
	int resultAvatarPoseIndex;//[Offset: 0x718, Size: 4]
	LobbyCharacterWeaponAnimData[] AddCharacterWeaponAnimList;//[Offset: 0x71c, Size: 12]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x728, Size: 12]
	BackpackEmoteHandle* curHandle;//[Offset: 0x734, Size: 4]
	delegate EmoteMontageStartEvent;//[Offset: 0x738, Size: 12]
	delegate EmoteStartWithMainCharacterConfigEvent;//[Offset: 0x744, Size: 12]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x750, Size: 12]
	AkComponent* emoteSound_Comp;//[Offset: 0x75c, Size: 4]
	LobbyGodEffectComponent* GodEffectComponent;//[Offset: 0x760, Size: 4]
	class LobbyGodEffectComponent* GodEffectComponentPath;//[Offset: 0x768, Size: 40]
	bool IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x794, Size: 1]
	delegate LobbyPoseWithFriend;//[Offset: 0x798, Size: 12]
	delegate LobbyCancelPoseWithFriend;//[Offset: 0x7a4, Size: 12]
	FString LuaFilePath;//[Offset: 0x7b0, Size: 12]
};

class STExtraWeapon.LuaActor.Actor.Object
{
	int iRegionWeapon;//[Offset: 0x3e8, Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x3ec, Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f3, Size: 1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x3f8, Size: 16]
	Transform WeaponAttachMeshOffset;//[Offset: 0x410, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x440, Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x470, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x4a0, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x4d0, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x500, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x530, Size: 48]
	int CrossHairType;//[Offset: 0x560, Size: 4]
	bool EnableOBReloadBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	bool EnableOBReloadMagazineCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 1]
	Vector OBUpMagazineTranslateOffset;//[Offset: 0x568, Size: 12]
	Rotator OBUpMagazineRotationOffset;//[Offset: 0x574, Size: 12]
	Vector OBDownMagazineTranslateOffset;//[Offset: 0x580, Size: 12]
	Rotator OBDownMagazineRotationOffset;//[Offset: 0x58c, Size: 12]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x598, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x59c, Size: 4]
	PredictLineComponent* PredictLine;//[Offset: 0x5a0, Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x5a8, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x5b0, Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x5b4, Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x5c0, Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x5cc, Size: 12]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x5d8, Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x5e4, Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x5f0, Size: 12]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x5fc, Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x608, Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x614, Size: 12]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x620, Size: 12]
	delegate OnWeaponBaseEquipDelegate;//[Offset: 0x62c, Size: 12]
	delegate OnWeaponBaseUnEquipDelegate;//[Offset: 0x638, Size: 12]
	delegate OnEquipOrUnEuipAttachmentDelegate;//[Offset: 0x644, Size: 12]
	delegate OnPressingWeaponFuncBtnDelegate;//[Offset: 0x650, Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x65c, Size: 4]
	WeaponSpecificHandler* WeaponSpecHandler;//[Offset: 0x660, Size: 4]
	unsigned char CurFreshWeaponState;//[Offset: 0x664, Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x668, Size: 12]
	unsigned char SyncFreshWeaponStateForRep;//[Offset: 0x674, Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x678, Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 1]
	float StartReconnectTime;//[Offset: 0x684, Size: 4]
	int ReconnectOpIndex;//[Offset: 0x688, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x690, Size: 104]
	enum WeaponAttachState;//[Offset: 0x700, Size: 1]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x704, Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x718, Size: 80]
	float ServerStartCreateWeaponTime;//[Offset: 0x768, Size: 4]
	float ServerFinishCreateWeaponTime;//[Offset: 0x76c, Size: 4]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x774, Size: 4]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x77c, Size: 4]
	unsigned char CurWeaponState;//[Offset: 0x780, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x784, Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x788, Size: 4]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x790, Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x7d8, Size: 4]
	MeshSynData[] synData;//[Offset: 0x7e0, Size: 12]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ec, Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x7f0, Size: 4]
	float WaitMeshInitTime;//[Offset: 0x7f4, Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x7fc, Size: 12]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x814, Size: 4]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x81c, Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	bool bNeedHiddenWhenOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x82c, Size: 12]
	unsigned char WeaponUIType;//[Offset: 0x838, Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x840, Size: 48]
	Rotator RotForSimulate;//[Offset: 0x870, Size: 12]
	int FuncFlag;//[Offset: 0x87c, Size: 4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	unsigned char AppActiveWeaponAction;//[Offset: 0x885, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> WeaponCompOutOfVisionOptimizationDataMap;//[Offset: 0x888, Size: 60]
	FString[] ComponentTickWhiteList;//[Offset: 0x8c4, Size: 12]
	<ActorComponent*,bool> CompTickStateMap;//[Offset: 0x8d0, Size: 60]
	bool bIsInValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90c, Size: 1]
	bool bForceDisableHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90d, Size: 1]
	bool bSkipPostReloadAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90e, Size: 1]
};

class LuaActor.Actor.Object
{
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x350, Size: 60]
	FString LuaFilePath;//[Offset: 0x38c, Size: 12]
};

class LuaNetSerialization
{
};

class MainWeaponTableStruct
{
	int KeyID;//[Offset: 0x0, Size: 4]
	int[] SkillIDList;//[Offset: 0x4, Size: 12]
};

class WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
};

class WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	STExtraWeapon* OwnerWeapon;//[Offset: 0x490, Size: 4]
	bool EnablePhotoShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	delegate OnScopeEquipDelegate;//[Offset: 0x498, Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x4a4, Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x4b0, Size: 12]
	delegate OnWeaponAvatarLoaded2;//[Offset: 0x4bc, Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x4c8, Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x4d4, Size: 12]
	delegate OnWeaponAvatarPutOnSlot;//[Offset: 0x4e0, Size: 12]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x4f0, Size: 12]
	delegate OnWeaponPartsRender;//[Offset: 0x4fc, Size: 12]
	delegate OnWeaponEffectParticleCreate;//[Offset: 0x508, Size: 12]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x52c, Size: 60]
	<int,HandleMeshPack> DefaultAttachmentMeshOverride;//[Offset: 0x568, Size: 60]
	MeshSynData[] DefaultSynData;//[Offset: 0x5a4, Size: 12]
	FString OwnerPlayerUID;//[Offset: 0x5b4, Size: 12]
	bool IsLobbySeparate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	WeaponDIYData WeaponDIYData;//[Offset: 0x5c4, Size: 60]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x608, Size: 12]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	ItemDefineID WeaponDefineID;//[Offset: 0x618, Size: 24]
};

class AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x22c, Size: 12]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x238, Size: 60]
	int[] PendingDeleteSlotID;//[Offset: 0x274, Size: 12]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x280, Size: 4]
	<int,FName> SlotToSocket;//[Offset: 0x284, Size: 60]
	int StepCount;//[Offset: 0x2c0, Size: 4]
	delegate AsyncLoadAvatarAllMeshDone;//[Offset: 0x2c4, Size: 12]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x2d0, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x378, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x37c, Size: 4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	enum DisplayQuality;//[Offset: 0x391, Size: 1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x394, Size: 60]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	<int,bool> OutlineEnableList;//[Offset: 0x3f8, Size: 60]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x438, Size: 60]
	int CurrentDecalBakingRequestID;//[Offset: 0x474, Size: 4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x478, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x484, Size: 12]
};

class AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	MeshComponent* MasterBoneComponent;//[Offset: 0x1b0, Size: 4]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b6, Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7, Size: 1]
	FName LightVectorName;//[Offset: 0x1b8, Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x1c0, Size: 4]
	delegate OnItemDownloadDelegate;//[Offset: 0x1c8, Size: 16]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x1d8, Size: 16]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x1e8, Size: 60]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	enum AvatarEnum;//[Offset: 0x225, Size: 1]
};

class LuaActorComponent.ActorComponent.Object
{
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x104, Size: 60]
	FString LuaFilePath;//[Offset: 0x140, Size: 12]
};

class AvatarDIYEntity.Object
{
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x1c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x20, Size: 4]
	MeshGroup MeshGroup;//[Offset: 0x24, Size: 36]
	ItemDefineID ParentDefineID;//[Offset: 0x48, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x60, Size: 60]
	int SlotID;//[Offset: 0xb4, Size: 4]
	int SubSlotID;//[Offset: 0xb8, Size: 4]
	FName SocketName;//[Offset: 0xc0, Size: 8]
	enum meshType;//[Offset: 0xc8, Size: 1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0xcc, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0xd0, Size: 4]
	MeshData EntityMeshData;//[Offset: 0xd8, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x138, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b, Size: 1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x1a0, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x1b0, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x1c8, Size: 60]
};

class MeshGroup
{
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 12]
	Object*[] MeshObjectList;//[Offset: 0xc, Size: 12]
	MeshComponent*[] MeshCompList;//[Offset: 0x18, Size: 12]
};

class MeshAsset
{
	Transform Transform;//[Offset: 0x0, Size: 48]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 40]
	FName AttachSocket;//[Offset: 0x80, Size: 8]
	enum meshType;//[Offset: 0x88, Size: 1]
	bool bKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	class AnimInstance* animBP;//[Offset: 0x8c, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x90, Size: 40]
	bool bAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bUpdateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
};

class ItemDefineID
{
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]
};

class BattleItemHandleBase.ItemHandleBase.Object
{
	FString LuaFilePath;//[Offset: 0xc4, Size: 12]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	enum ItemStoreArea;//[Offset: 0xd1, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0xd4, Size: 12]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	float UnitWeight;//[Offset: 0xe4, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 1]
	int ItemAttrsFlag;//[Offset: 0xec, Size: 4]
};

class ItemHandleBase.Object
{
	int Count;//[Offset: 0x1c, Size: 4]
	int MaxCount;//[Offset: 0x20, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	<int,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68, Size: 24]
};

class BattleItemAdditionalData
{
	enum EDataType;//[Offset: 0x0, Size: 1]
	int IntData;//[Offset: 0x4, Size: 4]
	FString StringData;//[Offset: 0x8, Size: 12]
	float FloatData;//[Offset: 0x14, Size: 4]
};

class ItemAssociation
{
	int AssociationType;//[Offset: 0x0, Size: 4]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 4]
};

class MeshData
{
	StaticMesh* stMesh;//[Offset: 0x0, Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4, Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8, Size: 4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc, Size: 12]
	enum meshType;//[Offset: 0x18, Size: 1]
	int[] hiddenSlots;//[Offset: 0x1c, Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28, Size: 12]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34, Size: 12]
	ItemDefineID definedID;//[Offset: 0x40, Size: 24]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
};

class MaterialInstance.MaterialInterface.Object
{
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	MaterialInterface* Parent;//[Offset: 0x54, Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x5c, Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x68, Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x74, Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x80, Size: 12]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x8c, Size: 60]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xcc, Size: 16]
	float ClearCoatDefaultIBLBrightness;//[Offset: 0xdc, Size: 4]
	float ClearCoatDefaultIBLAngle;//[Offset: 0xe0, Size: 4]
	Texture*[] PermutationTextureReferences;//[Offset: 0x100, Size: 12]
	bool bEnableTexture2DArrayShaderVariant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 1]
};

class FontParameterValue
{
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 4]
	int FontPage;//[Offset: 0xc, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]
};

class ScalarParameterValue
{
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]
};

class TextureParameterValue
{
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]
};

class VectorParameterValue
{
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]
};

class MaterialInstanceBasePropertyOverrides
{
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	unsigned char BlendMode;//[Offset: 0xc, Size: 1]
	unsigned char ShadingModel;//[Offset: 0xd, Size: 1]
	unsigned char ShadingRate;//[Offset: 0xe, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
};

class ReplacedSlotInfo
{
};

class HideBoneData
{
};

class AvatarDIYEntityFactory.Object
{
};

class HandleMeshPack
{
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 4]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 328]
};

class WeaponMeshCfg
{
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 40]
	FName MeshMatSlotName;//[Offset: 0xc8, Size: 8]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xd0, Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0x100, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x128, Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x134, Size: 12]
	enum meshType;//[Offset: 0x140, Size: 1]
};

class ParticleRes
{
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
};

class UIWidgetRes
{
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector2D DrawSize;//[Offset: 0x40, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
};

class MeshSynData
{
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	int AdditionalItemID;//[Offset: 0x20, Size: 4]
	int DIYPlanID;//[Offset: 0x24, Size: 4]
};

class WeaponDIYData.ResponResult
{
	int WeaponId;//[Offset: 0x4, Size: 4]
	int PlanID;//[Offset: 0x8, Size: 4]
	DIYMergedTexData[] DIYData;//[Offset: 0xc, Size: 12]
	int[] MatParam;//[Offset: 0x18, Size: 12]
	int[] MirroParam;//[Offset: 0x24, Size: 12]
	int[] SlotMatParam;//[Offset: 0x30, Size: 12]
};

class ResponResult
{
	bool bResponed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
};

class DIYMergedTexData
{
	DIYOneTexData[] TextureList;//[Offset: 0x0, Size: 12]
	int TexPathID;//[Offset: 0xc, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x10, Size: 48]
	int SlotID;//[Offset: 0x40, Size: 4]
};

class DIYOneTexData
{
	int TexPathID;//[Offset: 0x0, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x4, Size: 48]
};

class DIYParamData
{
	int Direction;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	float Opacity;//[Offset: 0x8, Size: 4]
	float Rotation;//[Offset: 0xc, Size: 4]
	float ScaleX;//[Offset: 0x10, Size: 4]
	float ScaleY;//[Offset: 0x14, Size: 4]
	float OffSetX;//[Offset: 0x18, Size: 4]
	float OffSetY;//[Offset: 0x1c, Size: 4]
	float UClipX;//[Offset: 0x20, Size: 4]
	float UClipY;//[Offset: 0x24, Size: 4]
	float VClipX;//[Offset: 0x28, Size: 4]
	float VClipY;//[Offset: 0x2c, Size: 4]
};

class DIYEnableLevel
{
	int DeviceLevel;//[Offset: 0x0, Size: 4]
	int EnableLevel;//[Offset: 0x4, Size: 4]
};

class PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	bool bCharacterComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 1]
	class Actor* PredictActorTemplate;//[Offset: 0x790, Size: 4]
	StaticMesh* MeshTemplate;//[Offset: 0x798, Size: 40]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x7c0, Size: 40]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x7e8, Size: 40]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x810, Size: 112]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x880, Size: 12]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x890, Size: 16]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x8a0, Size: 16]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x8b0, Size: 16]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0x8c0, Size: 16]
	LinearColor PredictLineColor;//[Offset: 0x8d0, Size: 16]
	PredictLineConfigParams PredictLineConfigParams;//[Offset: 0x8e0, Size: 12]
	PredictProjectilePathResult PredictResult;//[Offset: 0x8f8, Size: 184]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0x9b0, Size: 4]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0x9b4, Size: 4]
	StaticMesh* SplineMeshTemplate;//[Offset: 0x9b8, Size: 4]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0x9c0, Size: 12]
	int RedrawCounter;//[Offset: 0x9cc, Size: 4]
	FString LuaFilePath;//[Offset: 0x9d0, Size: 12]
};

class PredictProjectilePathParams
{
	Vector StartLocation;//[Offset: 0x0, Size: 12]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 12]
	Vector LaunchAcceleration;//[Offset: 0x18, Size: 12]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float ProjectileRadius;//[Offset: 0x28, Size: 4]
	float MaxSimTime;//[Offset: 0x2c, Size: 4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	unsigned char TraceChannel;//[Offset: 0x31, Size: 1]
	unsigned char[] ObjectTypes;//[Offset: 0x34, Size: 12]
	Actor*[] ActorsToIgnore;//[Offset: 0x40, Size: 12]
	float SimFrequency;//[Offset: 0x4c, Size: 4]
	float OverrideGravityZ;//[Offset: 0x50, Size: 4]
	float GravityScale;//[Offset: 0x54, Size: 4]
	float IgnoreGravityDis;//[Offset: 0x58, Size: 4]
	unsigned char DrawDebugType;//[Offset: 0x5c, Size: 1]
	float DrawDebugTime;//[Offset: 0x60, Size: 4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
};

class PredictLineMaterialParams
{
	MaterialParameterCollection* MaterialParamCollection;//[Offset: 0x0, Size: 4]
	FName ParamName;//[Offset: 0x8, Size: 8]
};

class PredictLineConfigParams
{
	bool bShowEndPointEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ShowSplineCount;//[Offset: 0x4, Size: 4]
	float ShowSplineCountPercent;//[Offset: 0x8, Size: 4]
};

class PredictProjectilePathResult
{
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 12]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0xc, Size: 28]
	HitResult HitResult;//[Offset: 0x28, Size: 144]
};

class PredictProjectilePathPointData
{
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector Velocity;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]
};

class SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	SplineMeshParams SplineParams;//[Offset: 0x7b8, Size: 88]
	Vector SplineUpDir;//[Offset: 0x810, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81c, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x81c, Size: 1]
	unsigned char ForwardAxis;//[Offset: 0x81d, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x820, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x824, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x828, Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x82c, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83c, Size: 1]
};

class SplineMeshParams
{
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]
};

class WeaponOwnerProxy.Object
{
	delegate OnWeaponStopFireDelegate;//[Offset: 0x1c, Size: 12]
	delegate OnWeaponInitProxyDelegate;//[Offset: 0x28, Size: 12]
	Actor* OwnerActor;//[Offset: 0x34, Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x38, Size: 4]
	Controller* OwnerController;//[Offset: 0x3c, Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x40, Size: 4]
};

class WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
{
	int WeaponId;//[Offset: 0x108, Size: 4]
	int SkillID;//[Offset: 0x10c, Size: 4]
	unsigned char WeaponType;//[Offset: 0x110, Size: 1]
	unsigned char WeaponTypeNew;//[Offset: 0x111, Size: 1]
	unsigned char WeaponHoldType;//[Offset: 0x112, Size: 1]
	unsigned char WeaponSingleHandType;//[Offset: 0x113, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0x118, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x128, Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x134, Size: 4]
	float LaunchGravityScale;//[Offset: 0x138, Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bUseAnimWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool bForceFinishPreviousSwitchWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x140, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 1]
	bool bEnableVaultHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	bool bPendingKillAttrModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x14c, Size: 4]
	int UnableVehicleHoldingTipID;//[Offset: 0x150, Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	int UnablePeekTipID;//[Offset: 0x158, Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	<unsigned char,bool> PlugComponentSlotMap;//[Offset: 0x160, Size: 60]
	<unsigned char,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x19c, Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x1d8, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x1dc, Size: 4]
	float BackToIdleAttachMeshTimePer;//[Offset: 0x1e0, Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x1e4, Size: 12]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x1f0, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x1f4, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x200, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x230, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x260, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x290, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x2c0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2f0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x320, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x350, Size: 48]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x380, Size: 60]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x3bc, Size: 60]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x3f8, Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 1]
	float StandbyAnimTimeInterval;//[Offset: 0x400, Size: 4]
	unsigned char[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x404, Size: 12]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool bOwnerClientPreCreateBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	int OwnerClientPreCreateBulletNum;//[Offset: 0x414, Size: 4]
	float OwnerClientPreCreateBulletDelay;//[Offset: 0x418, Size: 4]
};

class WeaponLogicBaseComponent.ActorComponent.Object
{
	STExtraWeapon* OwnerWeapon;//[Offset: 0xfc, Size: 4]
	STExtraPlayerController* GlobalController;//[Offset: 0x104, Size: 4]
};

class STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
{
	float FreeCameraStartMinPitchMin;//[Offset: 0xde8, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xdec, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf0, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xdf4, Size: 60]
	unsigned char OnFireTouchFingerIndex;//[Offset: 0xe30, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xe34, Size: 4]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0xe38, Size: 12]
	delegate OnPlayerControllerTouchEnd;//[Offset: 0xe44, Size: 12]
	delegate OnPlayerControllerTouchedStartInArea;//[Offset: 0xe50, Size: 12]
	delegate OnPlayerRotationChanged;//[Offset: 0xe5c, Size: 12]
	int RotationChangedBroadcastInterval;//[Offset: 0xe6c, Size: 4]
	delegate OnPlayerCameraChanged;//[Offset: 0xe70, Size: 12]
	int CameraChangedBroadcastInterval;//[Offset: 0xe80, Size: 4]
	delegate OnAvatarInfoRep;//[Offset: 0xe84, Size: 12]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0xed0, Size: 60]
	float MinOBRelevancyJudgeDissquared;//[Offset: 0xf0c, Size: 4]
	bool bGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf10, Size: 1]
	FName FeatureActorName;//[Offset: 0xf18, Size: 8]
	ValidTouchMoveFrameConfig[] ValidTouchMoveFrameConfig;//[Offset: 0xf20, Size: 12]
	ValidTouchMoveFrameConfig CurValidTouchMoveFrameConfig;//[Offset: 0xf2c, Size: 24]
	unsigned char[] IgnoreCameraMovingIndexArray;//[Offset: 0xf44, Size: 12]
	unsigned char[] IgnoreCameraMovePendingArray;//[Offset: 0xf50, Size: 12]
	unsigned char[] AddTouchMoveFingerArray;//[Offset: 0xf5c, Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf68, Size: 1]
	unsigned char OnFreeCameraFingerIndex;//[Offset: 0xf69, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xf6c, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xf70, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xf74, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xf78, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xf7c, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xf80, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xf84, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xf88, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xf8c, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xf90, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xf94, Size: 4]
	Vector2D StartPosition;//[Offset: 0xf98, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xfa0, Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xfa8, Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xfb4, Size: 12]
	FString FollowCandidateName;//[Offset: 0xfc4, Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xfd0, Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0x100c, Size: 12]
	Rotator PCFreeCameraStartRotation;//[Offset: 0x1018, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0x1030, Size: 48]
	unsigned char FreeCameraFigerIndex;//[Offset: 0x1060, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0x1061, Size: 1]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1062, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1064, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0x1068, Size: 12]
	LinearColor CrossHairColor;//[Offset: 0x1074, Size: 16]
	unsigned char AutoAimType;//[Offset: 0x1084, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108d, Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1098, Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1099, Size: 1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109a, Size: 1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0x109c, Size: 12]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0x10a8, Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0x10b4, Size: 168]
	SensibilityConfig SensibilityConfig;//[Offset: 0x115c, Size: 236]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c0, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c1, Size: 1]
	int UseMotionControlType;//[Offset: 0x12c4, Size: 4]
	bool IsGyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c8, Size: 1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x12cc, Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0x12d8, Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x12e4, Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0x12f0, Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0x12fc, Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0x1308, Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0x1314, Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0x1320, Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0x132c, Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0x1338, Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0x1344, Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0x1350, Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0x135c, Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x1368, Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x1374, Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1380, Size: 12]
	delegate OnShowHideSelfMarkDelegate;//[Offset: 0x138c, Size: 12]
	delegate OnShowAllTeammatePosDelegate;//[Offset: 0x1398, Size: 12]
	delegate OnShowAliasInfoDelegate;//[Offset: 0x13a4, Size: 12]
	delegate OnCongregationFlagDelegate;//[Offset: 0x13b0, Size: 12]
	delegate OnTeamFollowStageChangeDelegate;//[Offset: 0x13bc, Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0x13c8, Size: 12]
	delegate OnHideFollowPanelAndBtnDelegate;//[Offset: 0x13d4, Size: 12]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x13e0, Size: 12]
	delegate OnRemindTeammateShoot;//[Offset: 0x13ec, Size: 12]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x13f8, Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0x1404, Size: 12]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x1410, Size: 12]
	delegate OnNightBeggan;//[Offset: 0x141c, Size: 12]
	delegate OnNightEnded;//[Offset: 0x1428, Size: 12]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x1434, Size: 12]
	delegate OnPlayerSwitchToDeadBox;//[Offset: 0x1440, Size: 12]
	delegate OnShowFollowEmoteDelegate;//[Offset: 0x144c, Size: 12]
	delegate OnShowMovableEmoteDelegate;//[Offset: 0x1458, Size: 12]
	delegate OnCoopEmoteChange;//[Offset: 0x1464, Size: 12]
	delegate OnServerStateTypeChanged;//[Offset: 0x1470, Size: 12]
	int SelectedNightRenderConfig;//[Offset: 0x147c, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x1480, Size: 12]
	delegate OnInitCollectionData;//[Offset: 0x148c, Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0x1498, Size: 12]
	delegate OnPlayerEnterArea;//[Offset: 0x14a4, Size: 12]
	delegate OnPlayerKilling;//[Offset: 0x14b0, Size: 12]
	delegate OnPickupItem;//[Offset: 0x14bc, Size: 12]
	delegate OnDropItem;//[Offset: 0x14c8, Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0x14d4, Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x1500, Size: 128]
	delegate OnKillOrPutDownMessage;//[Offset: 0x1580, Size: 12]
	delegate OnStartFireEvent;//[Offset: 0x158c, Size: 12]
	delegate OnStopFireEvent;//[Offset: 0x1598, Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0x15a4, Size: 12]
	delegate OnReleaseScreen;//[Offset: 0x15b0, Size: 12]
	delegate OnFingerMove;//[Offset: 0x15bc, Size: 12]
	delegate OnHandleCameraModeChanged;//[Offset: 0x15c8, Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0x15d4, Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x15e0, Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0x15ec, Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0x15f8, Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x1604, Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0x1610, Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0x161c, Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0x1628, Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0x1634, Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x1640, Size: 12]
	delegate OnDamageToOther;//[Offset: 0x164c, Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1658, Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0x1664, Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0x1670, Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x167c, Size: 12]
	delegate OnRank;//[Offset: 0x1688, Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0x1694, Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0x16a0, Size: 12]
	delegate OnRepPlayerState;//[Offset: 0x16ac, Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0x16b8, Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x16c4, Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x16d4, Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0x16e0, Size: 12]
	delegate OnHideSkillPrompt;//[Offset: 0x16ec, Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x16f8, Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0x1704, Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x1710, Size: 12]
	delegate OnPlayerChangePetDone;//[Offset: 0x171c, Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x1728, Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x1734, Size: 12]
	delegate OnConsumableAvatarChange;//[Offset: 0x1740, Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0x174c, Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x1758, Size: 12]
	delegate OnGameStateChange;//[Offset: 0x1764, Size: 12]
	delegate OnPlayerKilledOthersPlayer;//[Offset: 0x1770, Size: 12]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x177c, Size: 12]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x1788, Size: 12]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x1794, Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x17a0, Size: 12]
	delegate OnSetViewTarget;//[Offset: 0x17b4, Size: 12]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x17c8, Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x17e4, Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x17e8, Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x17f4, Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x1800, Size: 12]
	delegate OnPostTakeDamageDelegate;//[Offset: 0x180c, Size: 12]
	delegate OnPostTakeDamageForBP;//[Offset: 0x1818, Size: 12]
	delegate OnLostConnection;//[Offset: 0x1824, Size: 12]
	delegate OnReconnected;//[Offset: 0x1830, Size: 12]
	delegate OnExitGame;//[Offset: 0x183c, Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x1848, Size: 12]
	delegate OnSpectatorToFreeView;//[Offset: 0x185c, Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1868, Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1874, Size: 12]
	delegate MoveForwarDelegate;//[Offset: 0x1880, Size: 12]
	delegate MoveRightDelegate;//[Offset: 0x188c, Size: 12]
	delegate MoveUpDelegate;//[Offset: 0x1898, Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x18a4, Size: 4]
	int MaternalZombieWeight;//[Offset: 0x18a8, Size: 4]
	PVSComponent* PVSComponent;//[Offset: 0x18ac, Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x18b0, Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x18b4, Size: 4]
	SpectatorComponent* SpectatorComponent;//[Offset: 0x18b8, Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18bc, Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x1a7c, Size: 12]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x1a88, Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a98, Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a99, Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9a, Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9b, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9c, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x1aa0, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1aa4, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1aa8, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x1aac, Size: 4]
	float GOOGLE_CameraMoveRateX;//[Offset: 0x1ab0, Size: 4]
	float GOOGLE_CameraMoveRateY;//[Offset: 0x1ab4, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1ab8, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1abc, Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac0, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x1ac4, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1ae8, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1b0c, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1b14, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1b1c, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x1b40, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x1b48, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x1b50, Size: 36]
	<unsigned char,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x1b74, Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1bb0, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1bb4, Size: 4]
	float MoveCameraMaxDistanceThreshold;//[Offset: 0x1bb8, Size: 4]
	<unsigned char,int> PlayerClothLODLevel;//[Offset: 0x1bbc, Size: 60]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x1bf8, Size: 12]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c04, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c05, Size: 1]
	unsigned char CurCameraMode;//[Offset: 0x1c0c, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x1c10, Size: 12]
	FName AutoScopeAimCompName;//[Offset: 0x1c20, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1c28, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2c, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2d, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2e, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2f, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1c30, Size: 4]
	float CanMoveCDTime;//[Offset: 0x1c34, Size: 4]
	float CanSprintCDTime;//[Offset: 0x1c38, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1c3c, Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1c40, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x1c44, Size: 4]
	float AutoSprintFireRequestCD;//[Offset: 0x1c48, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4c, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1c50, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x1c5c, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x1c60, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1c64, Size: 60]
	bool bAutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca0, Size: 1]
	bool bAutoEquipMelleeWeaponLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca1, Size: 1]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca2, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca3, Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca4, Size: 1]
	bool bMelleeWeaponAutoCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca6, Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x1ca8, Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cac, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cad, Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x1cb0, Size: 8]
	float AccumulateYawInput;//[Offset: 0x1cb8, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x1cbc, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc0, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc1, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc2, Size: 1]
	float NoRespondArea;//[Offset: 0x1cc4, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x1cc8, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ccc, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ccd, Size: 1]
	unsigned char sprintOptType;//[Offset: 0x1cce, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x1cd0, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x1cd4, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x1cd8, Size: 4]
	int JoystickSprintSensitity;//[Offset: 0x1cdc, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x1ce0, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce4, Size: 1]
	unsigned char JoystickOperatingMode;//[Offset: 0x1ce5, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x1ce8, Size: 4]
	float AssistAreaHalfHeight;//[Offset: 0x1cec, Size: 4]
	float AssistAreaRadius;//[Offset: 0x1cf0, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf4, Size: 1]
	<unsigned char,float> TouchForceMap;//[Offset: 0x1cf8, Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x1d34, Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x1d38, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x1d3c, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1d40, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x1d44, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d48, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x1d4c, Size: 4]
	unsigned char TouchFireType;//[Offset: 0x1d50, Size: 1]
	float TestForce;//[Offset: 0x1d54, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x1d58, Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x1d64, Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d70, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d71, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d72, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d73, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x1d74, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x1d78, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x1d7c, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x1d80, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x1d84, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1d88, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8c, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x1d90, Size: 4]
	float MinFovChangeView;//[Offset: 0x1d94, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1d98, Size: 32]
	int GameTipMsgID;//[Offset: 0x1db8, Size: 4]
	FString GameTipParam1;//[Offset: 0x1dbc, Size: 12]
	FString GameTipParam2;//[Offset: 0x1dc8, Size: 12]
	float AutoSprintCD;//[Offset: 0x1e10, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x1e14, Size: 60]
	<unsigned char,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x1e50, Size: 60]
	<unsigned char,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x1e8c, Size: 60]
	float TeamInfoForceUpdateInterval;//[Offset: 0x1ecc, Size: 4]
	float MaxDeltaYawBetweenControlAndActor;//[Offset: 0x1ed0, Size: 4]
	bool bWaistFollowingController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed4, Size: 1]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1ef0, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1fb8, Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x1fbc, Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1fc0, Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1fc4, Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x2010, Size: 4]
	bool bTempDeadBoxIgnoreTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2014, Size: 1]
	FString[] ForbitPickList;//[Offset: 0x2018, Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2030, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x2034, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2038, Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2039, Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x203c, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x2040, Size: 4]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x2044, Size: 12]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2050, Size: 1]
	float FreeViewUpRate;//[Offset: 0x2054, Size: 4]
	unsigned char MaxTouchMoveDelayFrame;//[Offset: 0x2058, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x205c, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2060, Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2061, Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x2064, Size: 12]
	bool bSyncMLAIStateInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2070, Size: 1]
	bool bNeedUpdateAITeamMateState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2071, Size: 1]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x2074, Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2088, Size: 1]
	unsigned char CurTouchAimAndFireFingerIndex;//[Offset: 0x2089, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208a, Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208b, Size: 1]
	unsigned char CurSightZoomFingerIndex;//[Offset: 0x20d4, Size: 1]
	unsigned char CurAimFireFingerIndex;//[Offset: 0x20d5, Size: 1]
	unsigned char ValidTouchMove;//[Offset: 0x2118, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x2144, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x21d0, Size: 4]
	BackpackRepActor* BackpackRepActor;//[Offset: 0x21d4, Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x21d8, Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x21dc, Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x21e0, Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x21e4, Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x21e8, Size: 4]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x21f0, Size: 12]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2209, Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x220a, Size: 1]
	delegate OnOBPlayerItemChangedDelegate;//[Offset: 0x220c, Size: 12]
	delegate OnOBPlayerWeaponChangedDelegate;//[Offset: 0x2218, Size: 12]
	delegate OnOBPlayerBulletChangedDelegate;//[Offset: 0x2224, Size: 12]
	delegate OnViewTargetAttachedToVehicleDelegate;//[Offset: 0x2230, Size: 12]
	delegate OnViewTargetDetachedFromVehicleDelegate;//[Offset: 0x223c, Size: 12]
	BattleItemSpectatingData[] ObservedItemList;//[Offset: 0x2264, Size: 12]
	bool bIsSendingObserveReq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2270, Size: 1]
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x22b0, Size: 12]
	delegate OnSetObserveCharacter;//[Offset: 0x22bc, Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x22c8, Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x22d4, Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x22e0, Size: 12]
	delegate OnCharacterStatesChangeWithState;//[Offset: 0x22ec, Size: 12]
	delegate OnCharacterStatesChangeWithoutState;//[Offset: 0x22f8, Size: 12]
	bool bIsCheckLevelStreamingReturnBeforeFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2304, Size: 1]
	bool bIsLevelLoadedSetGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2305, Size: 1]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x2308, Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2314, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x2318, Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x2328, Size: 4]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x232c, Size: 4]
	AIPlayerInfoInOB[] NearAIPlayerList;//[Offset: 0x2330, Size: 12]
	FString TPPFollowAIPlayerKey;//[Offset: 0x2340, Size: 12]
	<FString,AllStarReportData> AllStarReportInfoCache;//[Offset: 0x234c, Size: 60]
	ObservedData ObservedData;//[Offset: 0x2388, Size: 72]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23dd, Size: 1]
	delegate OnToggleOBMapShowHide;//[Offset: 0x23e4, Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x23f0, Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x2404, Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x2410, Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x241c, Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x2428, Size: 12]
	delegate WeaponEquipAttachment;//[Offset: 0x2434, Size: 12]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x2440, Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x244c, Size: 12]
	delegate OnOBVehicleViewChangedDelegate;//[Offset: 0x2458, Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x2474, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x2478, Size: 4]
	bool IsSmoothlyVehicleViewSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2488, Size: 1]
	bool NeedCheckChangeToVehicleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2489, Size: 1]
	CurveVector* OBVehicleViewArmOffset;//[Offset: 0x248c, Size: 8]
	int OBVehicleViewAcceRecordsNum;//[Offset: 0x2494, Size: 4]
	class CameraShake* OnHitCameraShake;//[Offset: 0x24a4, Size: 4]
	CurveVector* OBVehicleImpulseClamp;//[Offset: 0x24b0, Size: 8]
	CurveFloat* OBVehicleImpulseRollClamp;//[Offset: 0x24b8, Size: 8]
	float CurrentOBVehicleViewArmLength;//[Offset: 0x24c0, Size: 4]
	float OBVehicleViewArmLengthMax;//[Offset: 0x24c4, Size: 4]
	float OBVehicleViewArmLengthMin;//[Offset: 0x24c8, Size: 4]
	Vector OBVehicleRelativeLocation;//[Offset: 0x24cc, Size: 12]
	float OBVehicleViewFOV;//[Offset: 0x24d8, Size: 4]
	float LastOMATime;//[Offset: 0x24dc, Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x24e0, Size: 4]
	unsigned char iPlayerAliasInfoCount;//[Offset: 0x24e4, Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e5, Size: 1]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x24e8, Size: 12]
	delegate OnLiveStateChanged;//[Offset: 0x24f4, Size: 12]
	int FireMode;//[Offset: 0x2500, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2504, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2505, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2506, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2507, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x2508, Size: 12]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x2514, Size: 12]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2520, Size: 12]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x252c, Size: 12]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x2538, Size: 12]
	Actor*[] nowGrenadeList;//[Offset: 0x2544, Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2550, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x2554, Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x2560, Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x256c, Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2578, Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x2584, Size: 12]
	delegate tirggerParachuteVoiceCheckDelegate;//[Offset: 0x2590, Size: 12]
	delegate tirggerLandingVoiceCheckDelegate;//[Offset: 0x259c, Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a8, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x25ac, Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x25b8, Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c4, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x25c8, Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x25d4, Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e0, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x25e4, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x25e8, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x25ec, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x25f0, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x25f4, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x2604, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x2620, Size: 20]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x2634, Size: 12]
	Actor* ThePlane;//[Offset: 0x2640, Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x264c, Size: 4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x2650, Size: 12]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x265c, Size: 12]
	delegate OnNotifyServerOpenAnyPickUpBox;//[Offset: 0x2668, Size: 12]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2674, Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x2678, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x2690, Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x26a0, Size: 4]
	FString LastBreathMurder;//[Offset: 0x26a8, Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b4, Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x26b8, Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x26c0, Size: 4]
	FString murderName;//[Offset: 0x26c4, Size: 12]
	FString FinalMurderName;//[Offset: 0x26d0, Size: 12]
	uint64 MurderUID;//[Offset: 0x26e0, Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e8, Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e9, Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ea, Size: 1]
	bool bDisableItemOperationSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271f, Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x2730, Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x276c, Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x27b0, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x27b4, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x27b8, Size: 4]
	<unsigned char,FString> EndTouchScreenCommandMap;//[Offset: 0x27bc, Size: 60]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27f8, Size: 1]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x28cc, Size: 4]
	AkAudioEvent* HitVehicleSoundFlesh;//[Offset: 0x28d0, Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d4, Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x28d8, Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x2920, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2924, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x2928, Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292c, Size: 1]
	enum ServerStateType;//[Offset: 0x292d, Size: 1]
	enum ClientStateType;//[Offset: 0x292e, Size: 1]
	enum GameStateMsgType;//[Offset: 0x292f, Size: 1]
	enum LastStateType;//[Offset: 0x2933, Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2937, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2938, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2939, Size: 1]
	float ObservingTime;//[Offset: 0x293c, Size: 4]
	KillerTracker* KillerCameraTracker;//[Offset: 0x2940, Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2954, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2955, Size: 1]
	FString DefaultHUDClassPath;//[Offset: 0x2964, Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x2984, Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x2990, Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2994, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2995, Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x2998, Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x299c, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x29a0, Size: 56]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x29d8, Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x29e4, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x29e8, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x29ec, Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x2a28, Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x2a68, Size: 4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x2a6c, Size: 12]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x2a78, Size: 60]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x2acc, Size: 4]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x2af8, Size: 12]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x2b04, Size: 12]
	delegate SetCaptureIDCardStatusDelegate;//[Offset: 0x2b10, Size: 16]
	delegate OnPlayerExitGameDelegate;//[Offset: 0x2b20, Size: 12]
	delegate OnEnterVehicleDelegate;//[Offset: 0x2b3c, Size: 12]
	delegate ClientOnEnterVehicle;//[Offset: 0x2b48, Size: 12]
	delegate ClientOnLeaveVehicle;//[Offset: 0x2b54, Size: 12]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x2b60, Size: 12]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x2b6c, Size: 12]
	delegate ClientOnDeathReplayDataWhenFatalDamagedDelegate;//[Offset: 0x2b78, Size: 12]
	delegate OnViewTargetChange;//[Offset: 0x2b8c, Size: 12]
	delegate OnPreViewTargetChange;//[Offset: 0x2b98, Size: 12]
	delegate OnImprisonStateChange;//[Offset: 0x2ba4, Size: 12]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bb0, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bb1, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x2bb4, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x2bb8, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x2bc4, Size: 8]
	int IdCardMarkType;//[Offset: 0x2bd0, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bda, Size: 1]
	int VehicleControlMode;//[Offset: 0x2bdc, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be0, Size: 1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x2be4, Size: 12]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x2bf0, Size: 12]
	float StreamingDistanceScaleFlying;//[Offset: 0x2bfc, Size: 4]
	bool bClearWeaponRecordOnPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c00, Size: 1]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c01, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x2c04, Size: 12]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c10, Size: 1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x2c14, Size: 12]
	float MoveDistanceThreshold;//[Offset: 0x2c20, Size: 4]
	float SpeedRecordTime;//[Offset: 0x2c24, Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x2c28, Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x2c2c, Size: 12]
	delegate OnChangeToWalkingDead;//[Offset: 0x2c38, Size: 12]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c44, Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x2c48, Size: 12]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x2c54, Size: 12]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c60, Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c61, Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x2c64, Size: 12]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x2c70, Size: 12]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x2c7c, Size: 12]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x2c88, Size: 12]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x2c94, Size: 12]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x2ca0, Size: 4]
	uint32 LastKillerKey;//[Offset: 0x2ca4, Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca8, Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca9, Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cb4, Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cb5, Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cb6, Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x2cb8, Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x2cbc, Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x2cc8, Size: 12]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd4, Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x2cd8, Size: 12]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x2ce4, Size: 12]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x2cf0, Size: 12]
	delegate OnMemberVoiceDelegate;//[Offset: 0x2cfc, Size: 12]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x2d08, Size: 12]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x2d14, Size: 12]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x2d20, Size: 12]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x2d2c, Size: 12]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x2d38, Size: 12]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x2d44, Size: 4]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x2d5c, Size: 12]
	<unsigned char,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x2d68, Size: 60]
	enum CurrentWeaponFunction;//[Offset: 0x2da4, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x2da8, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dac, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x2db0, Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x2db4, Size: 4]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc0, Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd0, Size: 1]
	double LastFlyLeapPlatfromTime;//[Offset: 0x2e10, Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e54, Size: 1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e55, Size: 1]
	bool InWateringRange_bp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e56, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x2e58, Size: 60]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x2ea8, Size: 16]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x2eb8, Size: 16]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x2ec8, Size: 48]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef8, Size: 1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2efa, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2efb, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x2efc, Size: 4]
	float ParachuteSlideReportDuration;//[Offset: 0x2f04, Size: 4]
	float ParachuteReportLocationDiffSq;//[Offset: 0x2f08, Size: 4]
	ParachuteData ParachuteData;//[Offset: 0x2f10, Size: 128]
	float TrustClientSinceEnterParachuteJump;//[Offset: 0x2f98, Size: 4]
	float ClientParachuteLandedFinishTimeMax;//[Offset: 0x2fa0, Size: 4]
	VehicleMoveDragData DragData;//[Offset: 0x2fb0, Size: 24]
	float ReportSimulatedDragInterval;//[Offset: 0x2fc8, Size: 4]
	delegate OnTeammateRescueStateChanged;//[Offset: 0x2fd4, Size: 12]
	TimerHandle LocalRescueEndedTimer;//[Offset: 0x2fe0, Size: 8]
	delegate OnSwimDistanceChange;//[Offset: 0x2ffc, Size: 12]
	ScreenAppearanceActor* ScreenAppearanceMgr;//[Offset: 0x3008, Size: 4]
	bool bIsInFreeBuildState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3010, Size: 1]
	PlayerPetSpectatorComponent* PetSpectatorComp;//[Offset: 0x3014, Size: 4]
	CacheSACData[] CacheSACDataArray;//[Offset: 0x3020, Size: 12]
};

class UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
{
	FName PlayerType;//[Offset: 0x650, Size: 8]
	FString PlayerName;//[Offset: 0x658, Size: 12]
	uint32 PlayerKey;//[Offset: 0x664, Size: 4]
	uint64 UID;//[Offset: 0x668, Size: 8]
	FString PlayerOpenID;//[Offset: 0x670, Size: 12]
	int TeamID;//[Offset: 0x67c, Size: 4]
	int64 IdxInTeam;//[Offset: 0x680, Size: 8]
	int CampID;//[Offset: 0x688, Size: 4]
	Vector CharacterLocation;//[Offset: 0x68c, Size: 12]
	int RoomMode;//[Offset: 0x698, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x69c, Size: 20]
	int planeAvatarId;//[Offset: 0x6b0, Size: 4]
	int DyeDebugFlag;//[Offset: 0x6b4, Size: 4]
	int PlayerStartID;//[Offset: 0x6b8, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x6c0, Size: 48]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x6f4, Size: 12]
	int InPacketLossRate;//[Offset: 0x700, Size: 4]
	int OutPacketLossRate;//[Offset: 0x704, Size: 4]
	int ClientNetworkType;//[Offset: 0x708, Size: 4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	int GameReplayType;//[Offset: 0x728, Size: 4]
	bool bDisableProcessPlayerInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool bNoAttenuationGlobalVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x730, Size: 48]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x760, Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x76c, Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x778, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	FString Nation;//[Offset: 0x780, Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x794, Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x798, Size: 4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x79c, Size: 12]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x7a8, Size: 12]
	int RolewearIndex;//[Offset: 0x7b4, Size: 4]
	int[] equip_plating_list;//[Offset: 0x7b8, Size: 12]
	GameModePlayerItem[] InitialSharedSkin;//[Offset: 0x7c4, Size: 12]
	GameModePlayerKnapsackSingleInfo InitialSharedKnapsack;//[Offset: 0x7d0, Size: 84]
	bool bSharedSkinOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool bUsingSharedSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 1]
	bool bSubscribeBagOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x826, Size: 1]
	int FashionBagStartIndex;//[Offset: 0x828, Size: 4]
	int VehicleSkinInReady;//[Offset: 0x82c, Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x834, Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x840, Size: 28]
	GameModePlayerPetInfo[] AdditionalPetInfo;//[Offset: 0x85c, Size: 12]
	int UsingAdditionalPetIndex;//[Offset: 0x868, Size: 4]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x86c, Size: 12]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0x878, Size: 12]
	delegate OnInitialWeaponScheme;//[Offset: 0x884, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x890, Size: 4]
	int PveLevel;//[Offset: 0x894, Size: 4]
	int[] InitialCharSkillList;//[Offset: 0x898, Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x8a4, Size: 12]
	GameModePlayerItems[] InitialVehicleAvatarSkinList;//[Offset: 0x8b0, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x8bc, Size: 4]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0x8c0, Size: 12]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x8cc, Size: 12]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0x8d8, Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x8e4, Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x8f4, Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0x900, Size: 60]
	<int,int> GrenadeAvatarItemList;//[Offset: 0x978, Size: 60]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x9b4, Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0x9c0, Size: 60]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x9fc, Size: 60]
	<int,VehicleAvatarSkinList> VehicleAvatarSkinList;//[Offset: 0xa38, Size: 60]
	int[] VehicleMusicList;//[Offset: 0xa74, Size: 12]
	int[] DefaultVehicleMusic;//[Offset: 0xa80, Size: 12]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0xa8c, Size: 12]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0xa98, Size: 12]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0xaa4, Size: 60]
	<int,int> InitialWeaponPendantList;//[Offset: 0xae0, Size: 60]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xb1c, Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xb28, Size: 12]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xb34, Size: 12]
	uint32 TaskSyncToDsTs;//[Offset: 0xb40, Size: 4]
	delegate OnPlayerGotoSpectatingDelegate;//[Offset: 0xb44, Size: 12]
	delegate OnReceiveUIMessage;//[Offset: 0xb58, Size: 12]
	int64 LastGameResultTime;//[Offset: 0xb68, Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb71, Size: 1]
	FString IpCountryStr;//[Offset: 0xb74, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb81, Size: 1]
	uint32 ObserverFlags;//[Offset: 0xb84, Size: 4]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 1]
	LobbyWatchInfo LobbyWatchInfo;//[Offset: 0xb8c, Size: 8]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0xb94, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0xb98, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9c, Size: 1]
	float UpdateOBCircleCounter;//[Offset: 0xba0, Size: 4]
	float UpdateOBCircleInterval;//[Offset: 0xba4, Size: 4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 1]
	bool bWaitRetryGotoSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba9, Size: 1]
	FString[] FriendObservers;//[Offset: 0xbac, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb9, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xc08, Size: 8]
	bool bExited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc13, Size: 1]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc14, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc15, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xc24, Size: 12]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xc30, Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xc3c, Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xc48, Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xc54, Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xc60, Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xc6c, Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xc78, Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0xc84, Size: 12]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0xc90, Size: 12]
	delegate OnInitGameUI;//[Offset: 0xc9c, Size: 12]
	bool bCanWatchEnemyInRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc0, Size: 1]
	Object*[] SecurityObjs;//[Offset: 0xd18, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0xd24, Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 1]
	float NotifyTimeOut;//[Offset: 0xd34, Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0xd38, Size: 4]
	FString NeedLoadLevelName;//[Offset: 0xd3c, Size: 12]
	FString NeedLoadedLevelFullName;//[Offset: 0xd48, Size: 12]
	bool IsTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd54, Size: 1]
	int AntiDataCD;//[Offset: 0xd60, Size: 4]
	int ModeID;//[Offset: 0xd64, Size: 4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd68, Size: 1]
	float ClientToDSFlowLimitTime;//[Offset: 0xd8c, Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0xd90, Size: 4]
	FString UsingNetObjectPathNameMappingCSV;//[Offset: 0xda4, Size: 12]
	NetworkReportActor* NetworkReportActor;//[Offset: 0xdc8, Size: 4]
};

class LuaPlayerController.PlayerController.Controller.Actor.Object
{
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x5f8, Size: 60]
	FString LuaFilePath;//[Offset: 0x634, Size: 12]
};

class STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
{
	float AirLaunchApexTime;//[Offset: 0xcf0, Size: 4]
	delegate OnPlayerTeleport;//[Offset: 0xcf4, Size: 12]
	delegate OnDeath;//[Offset: 0xd00, Size: 12]
	delegate OnBulletChange;//[Offset: 0xd0c, Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0xd18, Size: 12]
	delegate OnAnimAssetSkeletonMatch;//[Offset: 0xd24, Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0xd30, Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0xd3c, Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0xd48, Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0xd54, Size: 12]
	delegate OnPlayerWeaponReloadLastBullet;//[Offset: 0xd60, Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0xd6c, Size: 12]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0xd78, Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0xd84, Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xd90, Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0xd9c, Size: 12]
	delegate OnFollowStateChanged;//[Offset: 0xda8, Size: 12]
	delegate OnPlayerStartRescue;//[Offset: 0xddc, Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0xde8, Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0xdf4, Size: 12]
	delegate OnServerPerspectiveChanged;//[Offset: 0xe00, Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xe0c, Size: 12]
	delegate OnDeathDelegate;//[Offset: 0xe18, Size: 12]
	delegate OnPostTakeDamage;//[Offset: 0xe24, Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0xe30, Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0xe3c, Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0xe48, Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0xe54, Size: 12]
	delegate OnClientCurrentVehicleChange;//[Offset: 0xe60, Size: 12]
	delegate PostAttrModifiedDelegate;//[Offset: 0xe6c, Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xea8, Size: 12]
	delegate AnimMontagePlayExtraDelegate;//[Offset: 0xeb4, Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xec0, Size: 12]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0xecc, Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xed8, Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xee4, Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xef0, Size: 12]
	delegate OnCharacterShootBulletDelegate;//[Offset: 0xefc, Size: 12]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xf08, Size: 12]
	delegate OnCharacterEndViewTarget;//[Offset: 0xf14, Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xf20, Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xf2c, Size: 12]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0xf38, Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0xf44, Size: 12]
	delegate OnRequestPaintDecalDelegate;//[Offset: 0xf50, Size: 12]
	delegate OnPawnExitParachute;//[Offset: 0xf5c, Size: 12]
	delegate SetClimbAnimationDelegate;//[Offset: 0xf68, Size: 12]
	delegate OnCanVaultFlagChangeDelegate;//[Offset: 0xf74, Size: 12]
	delegate OnPreRepAttachment;//[Offset: 0xf80, Size: 12]
	delegate OnPostRepAttachment;//[Offset: 0xf8c, Size: 12]
	delegate OnCalcPickUpItemFlow;//[Offset: 0xf98, Size: 12]
	delegate OnCalcUseItemFlow;//[Offset: 0xfa4, Size: 12]
	delegate OnReceivePlayerKey;//[Offset: 0xfb0, Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xfbc, Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xfc0, Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xfc4, Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xfc8, Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xfcc, Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xfd0, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd4, Size: 1]
	bool bOnlyInvincibleToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd5, Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd6, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd6, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xfd8, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdc, Size: 1]
	float Money;//[Offset: 0xfe0, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe4, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfe5, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfe5, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe6, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe7, Size: 1]
	bool bShootSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe8, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xfec, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xff0, Size: 1]
	bool bStandAloneUnlimitBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff1, Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff2, Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff3, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff4, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xffc, Size: 4]
	bool bCanBeHitWhenHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1001, Size: 1]
	float PreviousValueToSetForHealthPredict;//[Offset: 0x1004, Size: 4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0x1008, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0x100c, Size: 4]
	FName HeadSocketName;//[Offset: 0x1010, Size: 8]
	FName LFootSocketName;//[Offset: 0x1018, Size: 8]
	FName RFootSocketName;//[Offset: 0x1020, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0x1028, Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0x102c, Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0x1030, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0x1034, Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0x1038, Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0x103c, Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0x1040, Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1044, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0x1048, Size: 12]
	unsigned char PoseState;//[Offset: 0x1054, Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0x1058, Size: 4]
	Actor* ThePlane;//[Offset: 0x105c, Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0x1060, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0x1064, Size: 12]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 1]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1071, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1072, Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	float VaultCheckBroadcastInterval;//[Offset: 0x1084, Size: 4]
	bool bEnableSinkEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1088, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x108c, Size: 4]
	RepMovementKeyLoc RepMovementKeyLoc;//[Offset: 0x1094, Size: 36]
	unsigned char ClientSidePoseState;//[Offset: 0x10bc, Size: 1]
	float RadialDamageScale;//[Offset: 0x10c0, Size: 4]
	float RadialDamageReduce;//[Offset: 0x10c4, Size: 4]
	float MomentumResistanceScale;//[Offset: 0x10c8, Size: 4]
	float MomentumResistanceFixed;//[Offset: 0x10cc, Size: 4]
	float ProcessServerLastTransformUpdateTimeStamp;//[Offset: 0x10d0, Size: 4]
	RepMovement ProcessReplicatedMovement;//[Offset: 0x10d8, Size: 72]
	RepMovement NetReplicatedMovement;//[Offset: 0x1120, Size: 72]
	bool bHasNetRepMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1168, Size: 1]
	bool bHasProcessRepMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1169, Size: 1]
	float NetServerLastTransformUpdateTimeStamp;//[Offset: 0x116c, Size: 4]
	float MoveOptimizeChangeCD;//[Offset: 0x1174, Size: 4]
	unsigned char LastPoseState;//[Offset: 0x117c, Size: 1]
	float LastSwitchCharPoseTime;//[Offset: 0x1180, Size: 4]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1198, Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0x119c, Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a4, Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a5, Size: 1]
	bool bAttachmentRepNotifyAlways;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a6, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a7, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0x11a8, Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ac, Size: 1]
	bool bRespawnResetAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ad, Size: 1]
	bool bRespawnClearAttrModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ae, Size: 1]
	bool bRespawnClearAllbuffs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11af, Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0x11b0, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x11b4, Size: 12]
	Actor*[] PlayerSlotData;//[Offset: 0x11c0, Size: 12]
	Actor*[] InventoryData;//[Offset: 0x11cc, Size: 12]
	AkComponent* SoundComp;//[Offset: 0x122c, Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0x1230, Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1234, Size: 1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1235, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0x1238, Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0x123c, Size: 4]
	AkAudioEvent* AkHitHeadWithHelmet;//[Offset: 0x1240, Size: 4]
	AkAudioEvent* AkHitHeadWithoutHelmet;//[Offset: 0x1244, Size: 4]
	enum[] ModesIgnoreHitHead;//[Offset: 0x1248, Size: 12]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x1254, Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0x1290, Size: 4]
	Vector2D MeshContainerDefaultOffsetXY;//[Offset: 0x1294, Size: 8]
	int CurrentTaskTriggerAreaID;//[Offset: 0x129c, Size: 4]
	float ProduceSoundInterval;//[Offset: 0x12a0, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0x12a4, Size: 4]
	float HearRadius;//[Offset: 0x12a8, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b8, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b9, Size: 1]
	unsigned char EnsureStyle;//[Offset: 0x12ba, Size: 1]
	uint32 EnsureLevel;//[Offset: 0x12bc, Size: 4]
	int MLEnsureStyle;//[Offset: 0x12c0, Size: 4]
	Actor* WaterObj;//[Offset: 0x12c4, Size: 4]
	unsigned char DSHitPartJudgment;//[Offset: 0x12c9, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x12cc, Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x12d0, Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x12d4, Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d8, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0x12dc, Size: 4]
	float NearDeathBreath;//[Offset: 0x12e0, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e4, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x12e8, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f0, Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0x12f4, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x12f8, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x1300, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x1308, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x1310, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x1318, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1320, Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0x135c, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x1368, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x1374, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x1378, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x1384, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x1388, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x138c, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x1394, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x13a0, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x13a4, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x13a8, Size: 4]
	float ScopeLagScale;//[Offset: 0x13b0, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x13b4, Size: 4]
	float ScopeFov;//[Offset: 0x13b8, Size: 4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13bc, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x13c0, Size: 4]
	bool bAIDropToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c4, Size: 1]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x13c8, Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x13cc, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x13d0, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x13d4, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x13d8, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x13e4, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f0, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x13f4, Size: 4]
	bool bFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f8, Size: 1]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x13fc, Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x1400, Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0x1404, Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x1408, Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0x140c, Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x1410, Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1414, Size: 1]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x1418, Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x1424, Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x1430, Size: 12]
	delegate OnMovementBaseChanged;//[Offset: 0x143c, Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1448, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1449, Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144a, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x144c, Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0x1450, Size: 4]
	Rotator ProneCapsuleRelativeRotation;//[Offset: 0x1454, Size: 12]
	Vector ProneBoxRelativeLocation;//[Offset: 0x1460, Size: 12]
	float DamageCauserRecordKeepTime;//[Offset: 0x146c, Size: 4]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x1470, Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x147c, Size: 12]
	<STExtraPlayerState*,int> PlayerLastDamageTime;//[Offset: 0x1488, Size: 60]
	int MaxRecordOvertimeAssistTime;//[Offset: 0x14c4, Size: 4]
	float LastDamageTime;//[Offset: 0x14c8, Size: 4]
	float OutOfContestConfig;//[Offset: 0x14cc, Size: 4]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x14d0, Size: 4]
	bool AttackerNeedReceiveDamageRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d4, Size: 1]
	float PickUpRadius;//[Offset: 0x14d8, Size: 4]
	bool bSyncCameraByChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14dc, Size: 1]
	SimLocalViewData SimulateViewData;//[Offset: 0x14e0, Size: 16]
	SimViewData NetSimulateViewData;//[Offset: 0x14f0, Size: 6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1504, Size: 1]
	bool bShouldIgnorePVSTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c0, Size: 1]
	<int,class AnimInstance> SkillSubAnimInstances;//[Offset: 0x15dc, Size: 60]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1620, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1648, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x165c, Size: 12]
	float JumpCheckImmediatelyBlockZVelocityRate;//[Offset: 0x1668, Size: 4]
	bool bLandedHitVehicleSameTeamIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166c, Size: 1]
	float fLandedHitVehicleSameTeamIgnoreDamageCount;//[Offset: 0x1670, Size: 4]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x1674, Size: 12]
	bool bCanSwitchUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1680, Size: 1]
	bool bCanSwitchToSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1681, Size: 1]
	float LastPlayFallSoundTime;//[Offset: 0x1684, Size: 4]
	delegate OnPlayWeaponSound;//[Offset: 0x1688, Size: 12]
	float MaxDispalyFootprintDistance;//[Offset: 0x1694, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x1698, Size: 12]
	Vector DefaultMeshLoc;//[Offset: 0x16a4, Size: 12]
	InteractiveMoveActor* CurrentInteractiveMoveActor;//[Offset: 0x16b0, Size: 4]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x16b4, Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x16b8, Size: 4]
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x16bc, Size: 4]
	class AnimInstance* AvatarAnimClassCache;//[Offset: 0x16c0, Size: 4]
	bool IsNetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c4, Size: 1]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c5, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x16c8, Size: 4]
	float EmoteAnimLastTime;//[Offset: 0x16cc, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x16d0, Size: 12]
	delegate EmoteReadyToPlayNext;//[Offset: 0x16dc, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x16e8, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x16f4, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x1700, Size: 40]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1728, Size: 1]
	bool bStopEmoteLoadCallbackWhenCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1729, Size: 1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x172c, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x1730, Size: 4]
	<int,bool> DanceEmoteMap;//[Offset: 0x1734, Size: 60]
	bool bEnablePlayerPickUpAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1798, Size: 1]
	bool bEnablePlayerDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1799, Size: 1]
	bool bRecordKillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179a, Size: 1]
	float AIThrowPitch;//[Offset: 0x179c, Size: 4]
	Vector2D AISpeedScale;//[Offset: 0x17a0, Size: 8]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0x17a8, Size: 4]
	bool bValidCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ac, Size: 1]
	bool bExtraSwitchToGrenadeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ad, Size: 1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x17b0, Size: 60]
	<int,enum> PawnStateRelatedBuffIDMap;//[Offset: 0x17ec, Size: 60]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x1828, Size: 12]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1834, Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1835, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x1838, Size: 4]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x183c, Size: 12]
	float LastSyncHealthChange;//[Offset: 0x1848, Size: 4]
	StaticMeshComponent* ScopComp;//[Offset: 0x184c, Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x185c, Size: 4]
	int[] DisableConfigAttrPoseMoveIndexs;//[Offset: 0x1860, Size: 12]
	float voiceCheckCD;//[Offset: 0x186c, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x1870, Size: 4]
	float voiceCheckDis;//[Offset: 0x1874, Size: 4]
	float voiceCheckDisInParachute;//[Offset: 0x1878, Size: 4]
	bool voiceCheckInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x187c, Size: 1]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x1880, Size: 4]
	<unsigned char> DanyinCompletedIDSet;//[Offset: 0x189c, Size: 60]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x18d8, Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x18e8, Size: 4]
	unsigned char MovementModeBeforeNearDeath;//[Offset: 0x18ec, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x18f0, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x18f4, Size: 4]
	int HandFolderRatio;//[Offset: 0x18f8, Size: 4]
	float SwimUpRate;//[Offset: 0x18fc, Size: 4]
	PlayerSwimComponent* SwimComponet;//[Offset: 0x1900, Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1905, Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1906, Size: 1]
	WeaponRecordDataForReplay WeaponRecordDataForReplay;//[Offset: 0x1910, Size: 12]
	bool SkipCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191c, Size: 1]
	bool bIsOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191d, Size: 1]
	float UpdateAIPawnInfoTime;//[Offset: 0x1920, Size: 4]
	PickUpItemData[] CacheDropList;//[Offset: 0x1934, Size: 12]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1940, Size: 1]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1941, Size: 1]
	bool bForceDiffStateOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1942, Size: 1]
	Vector MoveInputState;//[Offset: 0x197c, Size: 12]
	unsigned char MovementInputReplication;//[Offset: 0x1988, Size: 1]
	float SwitchPoseCD;//[Offset: 0x19b0, Size: 4]
	float SwitchPoseStartTime;//[Offset: 0x19b4, Size: 4]
	float SwitchPerspectiveStartTime;//[Offset: 0x19b8, Size: 4]
	bool bWatchProneStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19bc, Size: 1]
	bool bHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d8, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x19ec, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x19f4, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x1a10, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1a40, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1a88, Size: 4]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x1a8c, Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1a90, Size: 4]
	float DelayHideDuration;//[Offset: 0x1a94, Size: 4]
	float DelayResetStandDuration;//[Offset: 0x1a98, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1a9c, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa0, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x1aa4, Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac8, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1acc, Size: 192]
	AnimParamList CurAnimParamList;//[Offset: 0x1b8c, Size: 316]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1cc8, Size: 184]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x1d80, Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x1db0, Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x1dd0, Size: 32]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x1df0, Size: 12]
	unsigned char ThrowGrenadeMode;//[Offset: 0x1dfc, Size: 1]
	bool bShowHPFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0c, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0d, Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0e, Size: 1]
	bool IsClientPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0f, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x1e10, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e18, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1e1c, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1e20, Size: 4]
	float HighWalkSpeed;//[Offset: 0x1e38, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1e3c, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x1e40, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1e44, Size: 4]
	float MaxProneSpeed;//[Offset: 0x1e48, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1e4c, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x1e50, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1e54, Size: 4]
	float HealthPredict;//[Offset: 0x1e58, Size: 4]
	float BreathAmount;//[Offset: 0x1e5c, Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e60, Size: 1]
	int PoisonSmogStage;//[Offset: 0x1e64, Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1e68, Size: 4]
	float AntidoteExeTime;//[Offset: 0x1e6c, Size: 4]
	float AntidoteMaxTime;//[Offset: 0x1e70, Size: 4]
	float SpeedDynamicScale;//[Offset: 0x1e74, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1e78, Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1e7c, Size: 12]
	unsigned char HealthStatus;//[Offset: 0x1e88, Size: 1]
	unsigned char LastHealthStatus;//[Offset: 0x1e89, Size: 1]
	delegate OnHealthStatusChangeDelegate;//[Offset: 0x1e8c, Size: 12]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x1e98, Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed4, Size: 1]
	float SpeedRate;//[Offset: 0x1ed8, Size: 4]
	float EnergySpeedScale;//[Offset: 0x1edc, Size: 4]
	float RecoveryScale;//[Offset: 0x1ee0, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x1ee4, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x1ee8, Size: 4]
	float SwitchWeaponSpeedScale;//[Offset: 0x1eec, Size: 4]
	BackpackReplayData BackpackReplayData;//[Offset: 0x1ef0, Size: 32]
	CharacterEnergyData Energy;//[Offset: 0x1f10, Size: 52]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x1f44, Size: 12]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f50, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1f54, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1f58, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1f5c, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x1f60, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1f68, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1f6c, Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x1f74, Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f78, Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x1f7c, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1f80, Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1f84, Size: 4]
	float StandHalfHeight;//[Offset: 0x1f88, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x1f8c, Size: 4]
	float ProneHalfHeight;//[Offset: 0x1f90, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1f94, Size: 4]
	float StandRadius;//[Offset: 0x1f98, Size: 4]
	float DyingRadius;//[Offset: 0x1f9c, Size: 4]
	float DyingBeCarriedRadius;//[Offset: 0x1fa0, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x1fa4, Size: 12]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x1fb0, Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x1fbc, Size: 4]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fcc, Size: 1]
	delegate InAssistantStateDelegate;//[Offset: 0x1fd0, Size: 12]
	Actor* CurrentAttachParent;//[Offset: 0x1fdc, Size: 8]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe4, Size: 1]
	RepVehicleAttachment VehicleReplication;//[Offset: 0x1fe8, Size: 24]
	RepVehicleAttachment CurrentVehicleAttachment;//[Offset: 0x2000, Size: 24]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x201c, Size: 4]
	float LastVehicleDamageCD;//[Offset: 0x2020, Size: 4]
	float LastLeaveVehicleTime;//[Offset: 0x2024, Size: 4]
	int VehicleSeatIdx;//[Offset: 0x2028, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2032, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x2034, Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2050, Size: 1]
	PredictLineComponent* PredictLineComp;//[Offset: 0x2054, Size: 4]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x2058, Size: 4]
	PlayEmoteComponent* PlayEmoteComponent;//[Offset: 0x205c, Size: 4]
	CharacterPlayEmoteComponent* CharacterPlayEmoteComponent;//[Offset: 0x2060, Size: 4]
	CharacterFormationComponent* FormationComponent;//[Offset: 0x2064, Size: 4]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x2068, Size: 4]
	delegate OnAttachedToVehicle;//[Offset: 0x20a8, Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x20b4, Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x20c0, Size: 12]
	delegate OnPlayerStateUpdated;//[Offset: 0x20cc, Size: 12]
	float MaxLeaveVehicleVelocity;//[Offset: 0x20f0, Size: 4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x2100, Size: 12]
	Rotator AngledSightRotOffset;//[Offset: 0x210c, Size: 12]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x221c, Size: 4]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2220, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x2224, Size: 4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x2240, Size: 60]
	STParachuteState STReplicateParchuteState;//[Offset: 0x227c, Size: 24]
	SlideMoveData SlideMoveData;//[Offset: 0x2294, Size: 20]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x22a8, Size: 4]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x22ac, Size: 48]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22dc, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x22e0, Size: 4]
	float MoveRightInputValue;//[Offset: 0x22e4, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e8, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x22ec, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f0, Size: 1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f1, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x22f4, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x22f8, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x2300, Size: 4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x2304, Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x2310, Size: 4]
	enum FollowState;//[Offset: 0x2314, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x2318, Size: 12]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x2324, Size: 12]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x2330, Size: 12]
	FString LatestInviter;//[Offset: 0x233c, Size: 12]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2348, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x238c, Size: 4]
	float maxShowAlpha;//[Offset: 0x2394, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x2398, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x239c, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x23a0, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x23cc, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x23d0, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x23d4, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241c, Size: 1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x242c, Size: 12]
	float CollectPlayerRouteInterval;//[Offset: 0x243c, Size: 4]
	int IsEnableReportRoute;//[Offset: 0x24c0, Size: 4]
	int CurrentPlayEmoteId;//[Offset: 0x24c8, Size: 4]
	bool IsHandedWeaponBeforePlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d4, Size: 1]
	Vector EmoteColBox;//[Offset: 0x2508, Size: 12]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x2514, Size: 60]
	int IsEnableLogAIPlayerPos;//[Offset: 0x2558, Size: 4]
	float CompVisionOpDis;//[Offset: 0x255c, Size: 4]
	float CompVisionOpDelay;//[Offset: 0x2560, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2564, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x2574, Size: 60]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b0, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x25b8, Size: 4]
	float MaxRelavantDistanceSquared;//[Offset: 0x25bc, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x25c0, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x25c4, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x25c8, Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x25cc, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x25d0, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x25d4, Size: 4]
	bool EnableDyingInVehicleMeshCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d8, Size: 1]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d9, Size: 1]
	BaseFPPComponent* FPPComp;//[Offset: 0x25e0, Size: 4]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x25e4, Size: 4]
	UAEChaCustomAnimListComponent* OwnedChaCustomAnimComp;//[Offset: 0x25e8, Size: 4]
	float ClientSwitchWeaponDeltaTime;//[Offset: 0x25f4, Size: 4]
	float ClientCallSwitchWeaponDur;//[Offset: 0x25f8, Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25fc, Size: 1]
	bool bExitingParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25fd, Size: 1]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25fe, Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x2600, Size: 12]
	float CharacterFallingVelocityZFactor;//[Offset: 0x2610, Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2628, Size: 1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2629, Size: 1]
	int AloneDistance;//[Offset: 0x2630, Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x2634, Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x2640, Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x2668, Size: 4]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x266c, Size: 4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x2670, Size: 12]
	SoftObjectPath ChangeWearingIconPath;//[Offset: 0x26c0, Size: 24]
	Vector ChangeWearingColBox;//[Offset: 0x26d8, Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x26e8, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ec, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ed, Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x26f0, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x26f4, Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x26f8, Size: 4]
	Actor* DecalActor;//[Offset: 0x26fc, Size: 4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2700, Size: 1]
	float OutBattleStateTime;//[Offset: 0x2704, Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x270c, Size: 12]
	delegate OnCharacterPlayEmote;//[Offset: 0x2718, Size: 12]
	delegate OnAutonomousCharacterPlayEmote;//[Offset: 0x2724, Size: 12]
	delegate OnCharacterWin;//[Offset: 0x2730, Size: 12]
	delegate OnCharacterFallingModeChange;//[Offset: 0x273c, Size: 12]
	Vector LastServerHitImpactPoint;//[Offset: 0x2748, Size: 12]
	unsigned char RemainUseSupplySpotTimes;//[Offset: 0x2754, Size: 1]
	unsigned char RemainUseEnhancerSpotTimes;//[Offset: 0x2755, Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2756, Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x2758, Size: 12]
	int MonsterDamageReduceSkillID;//[Offset: 0x2764, Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x2768, Size: 60]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x27a4, Size: 4]
	STExtraBaseCharacter* InteractionEmoteReceiver;//[Offset: 0x27a8, Size: 4]
	float DSMaxSpeedForReplay;//[Offset: 0x27b8, Size: 4]
	float DSSpeedModifierForReplay;//[Offset: 0x27bc, Size: 4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c5, Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x27c8, Size: 12]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x27d4, Size: 4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x27d8, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x27ec, Size: 252]
	unsigned char MeleeAutoAimType;//[Offset: 0x28e8, Size: 1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f4, Size: 1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x28f8, Size: 32]
	CharacterHide CharacterHide;//[Offset: 0x2918, Size: 12]
	float CharacterShowWeaponTime;//[Offset: 0x2924, Size: 4]
	bool bForbiddenRespawnAfterConstructSetClientLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292a, Size: 1]
	enum CharacterMainType;//[Offset: 0x292b, Size: 1]
	enum CharacterSubType;//[Offset: 0x292c, Size: 1]
	delegate BulletTrackShowDelegate;//[Offset: 0x2930, Size: 12]
	delegate OnClientHoldGrenadeStateChange;//[Offset: 0x293c, Size: 12]
	delegate MarkPlayerPosDelegate;//[Offset: 0x2948, Size: 12]
	delegate OnPlayerOpenDoorDelegate;//[Offset: 0x2954, Size: 12]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x2960, Size: 4]
	PlayerMantleComponent* VaultControllerComp;//[Offset: 0x2964, Size: 4]
	CharacterAnimShareParamsComp* AnimParamsComponent;//[Offset: 0x2968, Size: 4]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296c, Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296d, Size: 1]
	bool bEnableSetMeshUpdateFlagInBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296e, Size: 1]
	delegate OnUseSpringJump;//[Offset: 0x2970, Size: 12]
	float LastSprintTriggerTime;//[Offset: 0x297c, Size: 4]
	float FallingTime;//[Offset: 0x2984, Size: 4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2988, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2989, Size: 1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298a, Size: 1]
	Actor* MyConstActor;//[Offset: 0x298c, Size: 4]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2990, Size: 1]
	unsigned char[] ShowSnowAreaTypes;//[Offset: 0x2994, Size: 12]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x29a0, Size: 4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x29a8, Size: 4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x29b4, Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x29b8, Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x29bc, Size: 4]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c9, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29ca, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x29cc, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x29d4, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x29e0, Size: 48]
	unsigned char DefaultParticleAttachLocationType;//[Offset: 0x2a10, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x2a14, Size: 12]
	float ParticleShowingInterval;//[Offset: 0x2a20, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a28, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a29, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x2a30, Size: 40]
	Vector MoveAdditionalSpeed;//[Offset: 0x2a58, Size: 12]
	int CharacterMovementReplicatID;//[Offset: 0x2a64, Size: 4]
	int CharacterReplicatID;//[Offset: 0x2a68, Size: 4]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x2a6c, Size: 4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a70, Size: 1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a78, Size: 1]
	float MinWingUpControlTime;//[Offset: 0x2a88, Size: 4]
	WidgetComponent* PlayerInfoWidgetComp;//[Offset: 0x2a8c, Size: 4]
	FString DebugInfoWidgetPath;//[Offset: 0x2a90, Size: 12]
	FString DebugInfoWidgetRefreshFunName;//[Offset: 0x2a9c, Size: 12]
	Vector DebugInfoLocation;//[Offset: 0x2aa8, Size: 12]
	Actor* ACurrentFloor;//[Offset: 0x2ab4, Size: 8]
	bool IsMotifyAutoUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2abc, Size: 1]
	bool IsMotifyAttackerByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2abd, Size: 1]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x2ac0, Size: 4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x2ac4, Size: 4]
	float[] AIHotValueDebugInfo;//[Offset: 0x2ac8, Size: 12]
	Actor*[] OverlapDarkAreas;//[Offset: 0x2ad4, Size: 12]
	float SwimmingSwitchMovementModeCD;//[Offset: 0x2ae0, Size: 4]
	int PrepareEmoteId;//[Offset: 0x2ae8, Size: 4]
	FString EmoteSouceEventName;//[Offset: 0x2aec, Size: 12]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2af8, Size: 4]
	bool bIsInUnderGroundArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2afc, Size: 1]
	bool bIsAroundUndergroundEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2afd, Size: 1]
	bool bIsSkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2afe, Size: 1]
	bool bMoveHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aff, Size: 1]
	uint32 SightVisionMask;//[Offset: 0x2b00, Size: 4]
	bool bUnderWaterPoseCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b05, Size: 1]
	bool bReviseIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b06, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b07, Size: 1]
	int nRepShoulderState;//[Offset: 0x2b08, Size: 4]
	int nCurShoulderStateCount;//[Offset: 0x2b0c, Size: 4]
	bool bForceChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b10, Size: 1]
	bool bSkillLockChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b11, Size: 1]
	bool bEmoteLockChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b12, Size: 1]
	float SimulateFootstepQueryInternal;//[Offset: 0x2ba8, Size: 4]
	<int> NotDownloadPetIDs;//[Offset: 0x2bb4, Size: 60]
	bool bDisableAttachRepInBeCarried;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf0, Size: 1]
	NetCarryBackState NetCarryBackState;//[Offset: 0x2bf4, Size: 12]
	STCharacterCarryBackComp* CarryBackComponent;//[Offset: 0x2c00, Size: 4]
	DynamicOptimizeActorComponents* DynamicOptimizeActorComponent;//[Offset: 0x2c04, Size: 4]
	delegate OnCharacterHiddenStateChange;//[Offset: 0x2c08, Size: 12]
	BattleRoyaleGameMode* CachedGameMode;//[Offset: 0x2c14, Size: 4]
	bool EnablePlayEmoteAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c19, Size: 1]
	float DefaultEmoteFollowCheckTime;//[Offset: 0x2c1c, Size: 4]
	float DefaultEmoteFollowCheckRange;//[Offset: 0x2c20, Size: 4]
	float DefaultCoopEmoteCheckInterval;//[Offset: 0x2c24, Size: 4]
	float DefaultCoopEmoteCheckRange;//[Offset: 0x2c28, Size: 4]
	float CoopEmoteTargetOffset;//[Offset: 0x2c2c, Size: 4]
	float CoopEmoteCheckGroundHeight;//[Offset: 0x2c30, Size: 4]
	bool bFollowEmoteNeedRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c34, Size: 1]
	STExtraBaseCharacter* CachedCoopEmotePlayer;//[Offset: 0x2c44, Size: 8]
	BlowUpData CurrentBlowUpData;//[Offset: 0x2c60, Size: 44]
	delegate OnBlowUpCharacter;//[Offset: 0x2c8c, Size: 12]
	bool bNeedPlayVehicleEnterMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca0, Size: 1]
	bool EnableAireBorneAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca1, Size: 1]
	bool UseNewParachuteMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca2, Size: 1]
	float AirBornCanCurrentAbsoluteMaxHight;//[Offset: 0x2ca4, Size: 4]
	float PawnCreateTime;//[Offset: 0x2ca8, Size: 4]
	float PawnDestroyTime;//[Offset: 0x2cac, Size: 4]
	float CheckCanStandOffset;//[Offset: 0x2cb0, Size: 4]
	unsigned char MoveSpeedParamMonitorStrategy;//[Offset: 0x2cb4, Size: 1]
	NetMoveSpeedParameter ReplicatedServerMoveSpeedParam;//[Offset: 0x2cb8, Size: 20]
	NetMoveSpeedParameter ReplicatedClientMoveSpeedParam;//[Offset: 0x2ccc, Size: 20]
	float ExceptionMonitorInterval;//[Offset: 0x2ce4, Size: 4]
	int ExceptionMonitorHitTimes;//[Offset: 0x2ce8, Size: 4]
	<int,enum> AttrStateMap;//[Offset: 0x2cec, Size: 60]
	float LowMoveSpeedThreshold;//[Offset: 0x2d28, Size: 4]
	bool bReportedModifierException;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2c, Size: 1]
	bool bReportedSpeedException;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2d, Size: 1]
	SplineMoveInfo SplineMoveInfo;//[Offset: 0x2d3c, Size: 8]
	delegate OnServerPlayerTryEnterSpline;//[Offset: 0x2d44, Size: 12]
	delegate OnClientPlayerLeaveSpline;//[Offset: 0x2d50, Size: 12]
	delegate CanOpenWorldPawnCollision;//[Offset: 0x2d60, Size: 16]
	delegate OnCharacterCameraModeChange;//[Offset: 0x2d70, Size: 12]
	bool bInVerticalZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7c, Size: 1]
	delegate CharacterDoJump;//[Offset: 0x2d80, Size: 12]
	bool bViewSelfWhenDeathReplayFakeAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8c, Size: 1]
	AnimInstance*[] PawnCachedSubInstances;//[Offset: 0x2d90, Size: 12]
	bool bIsOpenWeaponSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9c, Size: 1]
	bool ParachuteJumpFromBornPlan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9d, Size: 1]
};

class STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
{
	delegate OnEditorKeyPressedDelegate;//[Offset: 0x8f8, Size: 12]
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 1]
	delegate CharacterAnimEventDelegate;//[Offset: 0x908, Size: 12]
	delegate CharacterCommonEventDelegate;//[Offset: 0x914, Size: 12]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0x948, Size: 12]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0x954, Size: 12]
	delegate OnPreTakeDamageDynamicDelegate;//[Offset: 0x960, Size: 12]
	delegate OnAttackerPreTakeDamageDelegate;//[Offset: 0x96c, Size: 12]
	delegate OnVictimPreTakeDamageDelegate;//[Offset: 0x978, Size: 12]
	delegate OnClientPushDamageEvent;//[Offset: 0x984, Size: 12]
	delegate OnAttrChangeEventDelegate;//[Offset: 0xa08, Size: 12]
	float Health;//[Offset: 0xa14, Size: 4]
	float HealthMax;//[Offset: 0xa18, Size: 4]
	int[] TypeIds;//[Offset: 0xa1c, Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0xa28, Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2c, Size: 1]
	bool bAIIgnore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2d, Size: 1]
	float threatenValue;//[Offset: 0xa30, Size: 4]
	float HurtParticleOffset;//[Offset: 0xa34, Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0xa40, Size: 12]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xa4c, Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0xa50, Size: 8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0xa58, Size: 8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0xa60, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xa64, Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 1]
	FString CharacterStateType;//[Offset: 0xa70, Size: 12]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 1]
	FString BehaviorServiceDebugInfo;//[Offset: 0xabc, Size: 12]
	FString ServiceDebugInfoForShow;//[Offset: 0xac8, Size: 12]
	int DebugInfoDetailLv;//[Offset: 0xad4, Size: 4]
	delegate OnHandleSkillStartDelegate;//[Offset: 0xad8, Size: 12]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xae4, Size: 12]
	float SkillPromptStartTime;//[Offset: 0xaf0, Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xaf8, Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xafc, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xb00, Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xb04, Size: 4]
	delegate StateEnterHandler;//[Offset: 0xb08, Size: 12]
	delegate StateLeaveHandler;//[Offset: 0xb14, Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0xb2c, Size: 12]
	delegate OnSimulateCharacterStatesChange;//[Offset: 0xb38, Size: 12]
	uint64 CurrentStates;//[Offset: 0xb58, Size: 8]
	uint64 DisabledStates;//[Offset: 0xb60, Size: 8]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xb68, Size: 12]
	enum[] AllowStates;//[Offset: 0xb74, Size: 12]
	float RencentStatesValidRange;//[Offset: 0xb80, Size: 4]
	<float,uint64> RencentStatesMap;//[Offset: 0xb84, Size: 60]
	delegate OnPawnStateDisabled;//[Offset: 0xbc0, Size: 12]
	delegate OnPawnStateEnabled;//[Offset: 0xbcc, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xbd8, Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0xbe4, Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe9, Size: 1]
	TurnAroundViewComponent* TurnAroundViewComp;//[Offset: 0xbf0, Size: 4]
	unsigned char TeamNum;//[Offset: 0xbf8, Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0xbfc, Size: 4]
	float SpeedScale;//[Offset: 0xc08, Size: 4]
	float SpeedValue;//[Offset: 0xc0c, Size: 4]
	float Temperature;//[Offset: 0xc10, Size: 4]
	float TemperatureMax;//[Offset: 0xc14, Size: 4]
	float TemperatureMin;//[Offset: 0xc18, Size: 4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc29, Size: 1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0xc30, Size: 4]
	float VehicleDetailedTraceDist;//[Offset: 0xc34, Size: 4]
	float SpringArmTraceDist;//[Offset: 0xc38, Size: 4]
	<unsigned char,CharacterHasGunBodyOffsetList> BodyRelativeOffsetConfig;//[Offset: 0xc3c, Size: 60]
	ActivitySyncData ActicitySyncData;//[Offset: 0xc78, Size: 28]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 1]
};

class UAECharacter.Character.Pawn.Actor.Object
{
	int iRegionCharacter;//[Offset: 0x664, Size: 4]
	FName RepPropertyCategory;//[Offset: 0x670, Size: 8]
	FName PlayerType;//[Offset: 0x678, Size: 8]
	FString PlayerName;//[Offset: 0x680, Size: 12]
	FString Nation;//[Offset: 0x68c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x698, Size: 4]
	FString PlayerUID;//[Offset: 0x69c, Size: 12]
	FString MLAIPlayerUID;//[Offset: 0x6a8, Size: 12]
	int TeamID;//[Offset: 0x6b4, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	int CampID;//[Offset: 0x6bc, Size: 4]
	int resID;//[Offset: 0x6c0, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x6c4, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x6c8, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x6d4, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x704, Size: 28]
	int planeAvatarId;//[Offset: 0x720, Size: 4]
	int DyeDebugFlag;//[Offset: 0x724, Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x728, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x736, Size: 1]
	bool bAINeedCheckBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x737, Size: 1]
	float DestinyValue;//[Offset: 0x738, Size: 4]
	float RatingScore;//[Offset: 0x748, Size: 4]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 1]
	bool bEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74d, Size: 1]
	bool bMEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74e, Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74f, Size: 1]
	FString LuaFilePath;//[Offset: 0x75c, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x768, Size: 60]
};

class STExtraVehicleBase.Pawn.Actor.Object
{
	int iRegionVehicle;//[Offset: 0x460, Size: 4]
	class AnimInstance[] CharacterInVehicleAnimBPs;//[Offset: 0x464, Size: 12]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 1]
	bool bAIBehaviorVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x472, Size: 1]
	enum VehicleType;//[Offset: 0x473, Size: 1]
	enum VehicleShapeType;//[Offset: 0x474, Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x478, Size: 24]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x490, Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x4a8, Size: 4]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x4b0, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x4d8, Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x4dc, Size: 60]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x518, Size: 60]
	Texture2D* VehicleIcon;//[Offset: 0x554, Size: 4]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x55c, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x560, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x568, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool bCanHandBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 1]
	float DefaultLeaveVelocityScale;//[Offset: 0x570, Size: 4]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x578, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x580, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	int MainMaterialIndex;//[Offset: 0x588, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x58c, Size: 12]
	bool ShowVehicleEnterButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	bool bStopAnimWhenDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59a, Size: 1]
	Vector AirDropVelocity;//[Offset: 0x59c, Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x5a8, Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x5b0, Size: 8]
	float AirdropOvertime;//[Offset: 0x5b8, Size: 4]
	delegate OnVehicleStartAirdrop;//[Offset: 0x5bc, Size: 12]
	delegate OnVehicleEndAirdrop;//[Offset: 0x5c8, Size: 12]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 1]
	bool bHasBeenCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 1]
	bool bEnableBuffComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d6, Size: 1]
	bool bEnableAttrModifyComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d7, Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 1]
	float BackpackCapacity;//[Offset: 0x5dc, Size: 4]
	FName BackpackName;//[Offset: 0x5e0, Size: 8]
	int[] marr_MidIndexes;//[Offset: 0x5e8, Size: 12]
	float EnterVehicleCameraBlendTime;//[Offset: 0x5f4, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x5f8, Size: 4]
	bool bEnableVehicleSteeringCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x600, Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 1]
	float StaticForceFixInterval;//[Offset: 0x608, Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	int[] SwitchSeatWithItemTypeList;//[Offset: 0x618, Size: 12]
	Vector[] RouteList;//[Offset: 0x624, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x630, Size: 12]
	int AutoDrive_CurrentTargetWaypointIdx;//[Offset: 0x63c, Size: 4]
	Vector AutoDriverTargetPosition;//[Offset: 0x640, Size: 12]
	Vector AutoDriverStartPosition;//[Offset: 0x64c, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x658, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x664, Size: 12]
	delegate OnSeatChange;//[Offset: 0x670, Size: 12]
	delegate OnStartResolveStuck;//[Offset: 0x67c, Size: 12]
	delegate OnEndResolveStuck;//[Offset: 0x688, Size: 12]
	RepMovementKeyLoc RepMovementKeyLoc;//[Offset: 0x694, Size: 36]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	FString LuaFilePath;//[Offset: 0x6c0, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x6cc, Size: 60]
	bool bEnableVoiceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	float voiceCheckCD;//[Offset: 0x70c, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x710, Size: 4]
	float voiceCheckDis;//[Offset: 0x714, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x718, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x71c, Size: 4]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x738, Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 1]
	bool CanPushUpCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73d, Size: 1]
	bool CanSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73e, Size: 1]
	uint16 ReplicatedFuelRatio;//[Offset: 0x740, Size: 2]
	ParticleSystem* ParticleExplosion;//[Offset: 0x778, Size: 4]
	enum VehicleHealthState;//[Offset: 0x77c, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77d, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77e, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77f, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x784, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x790, Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x794, Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x798, Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x79c, Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x7a0, Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x7a4, Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x7a8, Size: 4]
	VehicleComponent*[] TickedComponents;//[Offset: 0x7ac, Size: 12]
	VehicleComponent*[] WeakTickedComponents;//[Offset: 0x7b8, Size: 12]
	bool bClearComponentTickWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c4, Size: 1]
	float EnActiveTimeThreshold;//[Offset: 0x7cc, Size: 4]
	float FreezeVehicleThreshold;//[Offset: 0x7d0, Size: 4]
	bool bFreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dc, Size: 1]
	float VehicleHitThreshold;//[Offset: 0x7ec, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x7f0, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x800, Size: 4]
	int EnableTickEffectsDevciveLevel;//[Offset: 0x804, Size: 4]
	float EffectUpdateInterval;//[Offset: 0x80c, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x810, Size: 12]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81d, Size: 1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81e, Size: 1]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81f, Size: 1]
	float lastForwardSpeed;//[Offset: 0x820, Size: 4]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x824, Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x830, Size: 12]
	delegate OnClientChangeVehicleSeatEvent;//[Offset: 0x83c, Size: 12]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	bool bEnableEnterDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 1]
	float VehicleEnterDistance;//[Offset: 0x84c, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x850, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x854, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x864, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x868, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x874, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x878, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x87c, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x888, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x894, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x898, Size: 4]
	float PeneTerrainProtectionInterval;//[Offset: 0x8a4, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x8a8, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x8ac, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x8f0, Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x8f4, Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x8f8, Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x8fc, Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x900, Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x904, Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x908, Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x90c, Size: 4]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x910, Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x914, Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x918, Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x91c, Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x920, Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x924, Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x928, Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x92c, Size: 4]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0x930, Size: 4]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x934, Size: 4]
	float EngineSfxEndDelayTime;//[Offset: 0x938, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0x940, Size: 92]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0x99c, Size: 92]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0x9f8, Size: 92]
	AkComponent* SoundComponent;//[Offset: 0xa54, Size: 4]
	float RPMSfxScale;//[Offset: 0xa8c, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0xa90, Size: 4]
	enum VehicleSyncTag;//[Offset: 0xaa9, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xaac, Size: 4]
	delegate OnVehiclePossessed;//[Offset: 0xab0, Size: 12]
	delegate OnVehicleUnPossessed;//[Offset: 0xabc, Size: 12]
	VehicleSimViewData SimulateViewData;//[Offset: 0xad8, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xadc, Size: 4]
	VehicleSpringArmComponent* SpringArmComponent;//[Offset: 0xae0, Size: 4]
	VehiclePickableComponent* VehiclePickupComp;//[Offset: 0xae4, Size: 4]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8, Size: 1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xb20, Size: 12]
	delegate OnVehicleTakeDamageDelegate;//[Offset: 0xb2c, Size: 12]
	delegate OnVehicleHealthDestroy;//[Offset: 0xb38, Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb44, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xb48, Size: 4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4c, Size: 1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb58, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb59, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xb5c, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xb60, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 1]
	float StuckMinImpulse;//[Offset: 0xb8c, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xb90, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xb94, Size: 4]
	float StuckResovingTime;//[Offset: 0xb98, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xba0, Size: 4]
	float StuckResovingTimer;//[Offset: 0xba4, Size: 4]
	float PenePercent;//[Offset: 0xba8, Size: 4]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xbf4, Size: 4]
	float RespawnTickInterval;//[Offset: 0xbf8, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbfc, Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xc8c, Size: 12]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xc98, Size: 12]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xca4, Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xd00, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xd04, Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xd08, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xd30, Size: 4]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd0, Size: 1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd1, Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd2, Size: 1]
	Vector SeekLockOffset;//[Offset: 0xdd4, Size: 12]
	FName SeekLockSocket;//[Offset: 0xde0, Size: 8]
	float ProduceSoundInterval;//[Offset: 0xde8, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xdf0, Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xdfc, Size: 4]
	delegate OnEnterVehicle;//[Offset: 0xe00, Size: 12]
	float OverlapCameraShakeInterval;//[Offset: 0xe14, Size: 4]
	float OverlapDamageRate;//[Offset: 0xe1c, Size: 4]
	float OverlapImpulseRate;//[Offset: 0xe20, Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xe24, Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xe28, Size: 4]
	float MinOverlapSpeed;//[Offset: 0xe2c, Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xe30, Size: 4]
	Vector OverrideOverlapSimpleCharBoxExtent;//[Offset: 0xe34, Size: 12]
	float OverlapVehicleDamageRate;//[Offset: 0xe44, Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xe48, Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xe50, Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xe60, Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xe68, Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xe6c, Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe7d, Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0xe80, Size: 4]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0xe84, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xe88, Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xe8c, Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xe90, Size: 12]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xe9c, Size: 12]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xea8, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xeac, Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	delegate OnAdvanceAvatarChanged;//[Offset: 0xeb4, Size: 12]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 1]
	int CandidateAvatarID;//[Offset: 0xec4, Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0xed4, Size: 4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 1]
	float MaxLinearVelocity;//[Offset: 0xedc, Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 1]
	int TeamID;//[Offset: 0xee4, Size: 4]
	int CampID;//[Offset: 0xee8, Size: 4]
	float VehicleGoStraight;//[Offset: 0xeec, Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0xef4, Size: 4]
	float ExchangeVehicleSeatInterval;//[Offset: 0xef8, Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0xf00, Size: 12]
	delegate OnControlRotationInit;//[Offset: 0xf0c, Size: 12]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xf18, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xf1c, Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf20, Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf21, Size: 1]
	int WeaponReconnectIdx;//[Offset: 0xf24, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xf28, Size: 4]
	enum UAVOperateState;//[Offset: 0xf30, Size: 1]
	float SingleMoveRate;//[Offset: 0xf34, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xf38, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xf50, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0xf68, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xf78, Size: 12]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xf84, Size: 12]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf90, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xf98, Size: 8]
	float TombBoxTraceLength;//[Offset: 0xfa0, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0xfa4, Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa8, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa9, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfaa, Size: 1]
	float SleepVehicleTolerance;//[Offset: 0xfac, Size: 4]
	float StaticFixAngel;//[Offset: 0xfb0, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0xfb4, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0xfb8, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0xfc0, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0xfc4, Size: 4]
	bool CharacterFollowVehicleViewLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfcd, Size: 1]
	int CannotEnterTips;//[Offset: 0xfd0, Size: 4]
	int CannotDriveTips;//[Offset: 0xfd4, Size: 4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0xfdc, Size: 12]
	Vector AttachedRelLoc;//[Offset: 0xfe8, Size: 12]
	Actor* AttachedActor;//[Offset: 0xff4, Size: 4]
	int HasAttachedActorTips;//[Offset: 0xff8, Size: 4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1004, Size: 1]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0x1008, Size: 4]
	float LandTraceMaxHeight;//[Offset: 0x100c, Size: 4]
	bool bNeedPlayVehicleEnterMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1010, Size: 1]
	delegate VehicleSkillCDChanged;//[Offset: 0x1014, Size: 12]
	delegate VehicleSkillDurationChanged;//[Offset: 0x1020, Size: 12]
	delegate VehicleSkillStateChanged;//[Offset: 0x102c, Size: 12]
	FName ChassisBoneName;//[Offset: 0x1040, Size: 8]
	Actor*[] VehicleIgnoreActors;//[Offset: 0x1048, Size: 12]
	delegate OnVehicleStateChanged;//[Offset: 0x1054, Size: 12]
	TrailerRepMovement TrailerMovement;//[Offset: 0x1060, Size: 24]
	unsigned char CameraDataType;//[Offset: 0x1080, Size: 1]
	bool bBlockForwardInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1081, Size: 1]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1082, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x1084, Size: 4]
	bool bVehicleSimualetdPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ac, Size: 1]
	FName DecalSocketName;//[Offset: 0x10b0, Size: 8]
	IdeaDecalActor*[] DecalActors;//[Offset: 0x10b8, Size: 12]
	float Timer_HitEffect;//[Offset: 0x10c4, Size: 4]
	bool bMinimalTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	bool bRepPhysicsSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 1]
};

class ParticleSoftWrapperArray
{
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 12]
};

class ParticleSoftWrapper
{
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ValidDeviceLevel;//[Offset: 0x5c, Size: 4]
};

class ParticleRuntimeDataArray
{
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 12]
};

class ParticleRuntimeData
{
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 4]
};

class RepMovementKeyLoc
{
	enum LocationQuantizationLevel;//[Offset: 0x1c, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x1d, Size: 1]
};

class VehicleSeatComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
{
	float VaildExitVehicleHeight;//[Offset: 0x150, Size: 4]
	float PassengerHeightOffset;//[Offset: 0x154, Size: 4]
	STExtraVehicleSeat[] Seats;//[Offset: 0x158, Size: 12]
	VHSeatCharacterCameraOffsetData[] SeatsCameraConfigs;//[Offset: 0x164, Size: 12]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x170, Size: 12]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x17c, Size: 12]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x188, Size: 12]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x194, Size: 12]
	delegate OnSeatOccupiersChanged;//[Offset: 0x1a0, Size: 12]
	delegate OnSeatSocketChanged;//[Offset: 0x1ac, Size: 12]
	delegate OnVehicleWeaponRep;//[Offset: 0x1b8, Size: 12]
	delegate OnClientDriverChange;//[Offset: 0x1c4, Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x1d0, Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x1dc, Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0x1e8, Size: 4]
	bool bOnlyAliveApplyLeaveVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	bool bCheckLeaveLocationSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 1]
	float LeaveLocationSpaceInflation;//[Offset: 0x1f0, Size: 4]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	bool bHidenCharacterOnSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5, Size: 1]
	bool bCanChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f6, Size: 1]
	enum[] SeatGUITypes;//[Offset: 0x200, Size: 12]
	STExtraPlayerCharacter*[] LastOccupiers;//[Offset: 0x20c, Size: 12]
	delegate OnPlayEnterVehicleAnim;//[Offset: 0x218, Size: 12]
	delegate OnPlayExitVehicleAnim;//[Offset: 0x224, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x230, Size: 12]
	delegate OnSeatDetachedBefore;//[Offset: 0x23c, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x248, Size: 12]
	delegate OnSeatChanged;//[Offset: 0x254, Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x260, Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x26c, Size: 12]
	delegate OnDriverChange;//[Offset: 0x278, Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x284, Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x294, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x29c, Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x2a4, Size: 4]
	delegate BeginEnterVehicleEvent;//[Offset: 0x2a8, Size: 12]
	delegate EndEnterVehicleEvent;//[Offset: 0x2b4, Size: 12]
	delegate BeginExitVehicleEvent;//[Offset: 0x2c0, Size: 12]
	delegate EndExitVehicleEvent;//[Offset: 0x2cc, Size: 12]
	bool bShowSeatUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bLeaveFailedTipsNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
};

class VehicleComponent.LuaActorComponent.ActorComponent.Object
{
};

class STExtraVehicleSeat
{
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	bool bHasUpPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bHasDownPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	unsigned char OccupyMovementMode;//[Offset: 0x22, Size: 1]
	enum HoldWeaponType;//[Offset: 0x23, Size: 1]
	enum SeatSpecialType;//[Offset: 0x24, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x28, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x2c, Size: 4]
	Vector2D ViewPitchLimit;//[Offset: 0x30, Size: 8]
	Rotator CharRotVsVehiRot;//[Offset: 0x38, Size: 12]
	enum SeatSideType;//[Offset: 0x44, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x48, Size: 12]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x58, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float Radius;//[Offset: 0x64, Size: 4]
	float HalfHeight;//[Offset: 0x68, Size: 4]
	Transform CollisionOffset;//[Offset: 0x70, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float OnSeatCameraSpringArmLength;//[Offset: 0xa4, Size: 4]
	Vector2D CharacterPitchLimit;//[Offset: 0xa8, Size: 8]
};

class STExtraVehicleWeaponConfig
{
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 4]
	Vector2D ViewYawLimit;//[Offset: 0xc, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x14, Size: 8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float MuzzleDirTor;//[Offset: 0x20, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x28, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x30, Size: 28]
	float DistTorSquared;//[Offset: 0x4c, Size: 4]
	bool UseByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int VehicleWeaponParentIndex;//[Offset: 0x54, Size: 4]
};

class VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
{
	delegate OnVehWeaponUseStateChange;//[Offset: 0xfec, Size: 12]
	float RotateSpeedOnVehicle;//[Offset: 0xff8, Size: 4]
	bool bDoWeaponYawOnComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xffc, Size: 1]
	bool bDoWeaponRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xffd, Size: 1]
	float WeaponRotationLagYawThreshold;//[Offset: 0x1000, Size: 4]
	float WeaponRotationLagPitchThreshold;//[Offset: 0x1004, Size: 4]
	bool bUseWeaponRotationLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1008, Size: 1]
	bool bEquipOnDriversSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1009, Size: 1]
	float WeaponRotationLagMaxTimeStep;//[Offset: 0x100c, Size: 4]
	float WeaponRotationLagSpeed;//[Offset: 0x1010, Size: 4]
	float WeaponRotationScopingScale;//[Offset: 0x1014, Size: 4]
	float WeaponRotationYawScopingScale;//[Offset: 0x1018, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101c, Size: 1]
	bool bWeaponStateNotifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101d, Size: 1]
	unsigned char FireMode;//[Offset: 0x101e, Size: 1]
	enum CameraSpace;//[Offset: 0x101f, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1020, Size: 1]
	bool bUseOwnerActorView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1021, Size: 1]
	bool bIgnorePawnControlView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1022, Size: 1]
	bool bDebugCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1023, Size: 1]
	FName CameraParentComponentTag;//[Offset: 0x1028, Size: 8]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1030, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0x1038, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0x1040, Size: 44]
	bool bUseAnimRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106c, Size: 1]
	float AnimRotationLimitOffset;//[Offset: 0x1070, Size: 4]
	CameraOffsetData OwnerActorViewCameraData;//[Offset: 0x1074, Size: 44]
	Vector2D PitchRange;//[Offset: 0x10a0, Size: 8]
	Vector2D YawRange;//[Offset: 0x10a8, Size: 8]
	bool bUseSeatLimitCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	bool bShowCrosshairUsedByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 1]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b2, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0x10b8, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0x10c0, Size: 4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0x10c4, Size: 4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0x10c8, Size: 4]
	float VehicleWeaponReloadRate;//[Offset: 0x10cc, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x10d0, Size: 4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d4, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0x10d8, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0x10e0, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e9, Size: 1]
	bool bVehicleWeaponUseParentRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ea, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10eb, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ec, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ed, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fc, Size: 1]
	bool bSyncVehicleSimulateBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fd, Size: 1]
	bool bEnableSyncShootInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10fe, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ff, Size: 1]
	bool bEnableMoveCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1100, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1101, Size: 1]
	float UnEquipTime;//[Offset: 0x1104, Size: 4]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110a, Size: 1]
	FName CharacterSocket;//[Offset: 0x1110, Size: 8]
	float TimeDelayAttachCharacter;//[Offset: 0x1118, Size: 4]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111c, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111d, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111e, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111f, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1120, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1121, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0x1124, Size: 4]
	FName GrenadePredictLineSocket;//[Offset: 0x1128, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0x1130, Size: 4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1134, Size: 1]
	float FuelConsumptionRate;//[Offset: 0x1138, Size: 4]
	Rotator MuzzleShootDirection;//[Offset: 0x1140, Size: 12]
	float LastUseTimeStamp;//[Offset: 0x114c, Size: 4]
	Vector MuzzleShootTarget;//[Offset: 0x1150, Size: 12]
	Vector2D MuzzleShootTargetOnScreenLoc;//[Offset: 0x115c, Size: 8]
	Vector4 Limit;//[Offset: 0x1170, Size: 16]
	Vector2D UIOffset;//[Offset: 0x1180, Size: 8]
	float StartReloadDelayTime;//[Offset: 0x1198, Size: 4]
	float EndReloadDelayTime;//[Offset: 0x11a8, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0x11ac, Size: 4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b0, Size: 1]
	Actor* OwnerActor;//[Offset: 0x11b4, Size: 4]
	WeaponSyncData VehicleWeaponSyncData;//[Offset: 0x11b8, Size: 8]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x11c0, Size: 4]
	WeaponOverHeatingComponent* WeaponOverHeatingComp;//[Offset: 0x11e0, Size: 4]
	int BulletTypeTipMsgID;//[Offset: 0x11e4, Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0x11e8, Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0x11ec, Size: 4]
};

class STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
{
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x961, Size: 1]
	float voiceCheckCD;//[Offset: 0x964, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x968, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c, Size: 1]
	unsigned char[] CanAutoTryingToFireStateList;//[Offset: 0x970, Size: 12]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x994, Size: 64]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d4, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d5, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x9d8, Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x9e4, Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x9f0, Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x9fc, Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0xa08, Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0xa14, Size: 12]
	delegate OnServerWeaponShootDelegate;//[Offset: 0xa20, Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0xa2c, Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xa38, Size: 12]
	delegate OnWeaponReloadReplayDelegate;//[Offset: 0xa44, Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xa50, Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0xa5c, Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xa68, Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0xa74, Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0xa80, Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0xa8c, Size: 12]
	delegate OnReloadScuccessDelegate;//[Offset: 0xa98, Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0xaa4, Size: 12]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0xab0, Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0xac8, Size: 12]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0xad4, Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0xae0, Size: 12]
	delegate OnShootWeaponAutoDrop;//[Offset: 0xaec, Size: 12]
	delegate OnWeaponDropStart;//[Offset: 0xaf8, Size: 12]
	delegate OnWeaponDropFinished;//[Offset: 0xb04, Size: 12]
	delegate OnBulletLaunch;//[Offset: 0xb10, Size: 12]
	delegate OnBulletImpact;//[Offset: 0xb1c, Size: 12]
	delegate OnBulletImpactFX;//[Offset: 0xb28, Size: 12]
	delegate OnSpawnBulletImpactFX;//[Offset: 0xb34, Size: 12]
	delegate OnChangeShootType;//[Offset: 0xb40, Size: 12]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xb4c, Size: 4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xb50, Size: 4]
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xb54, Size: 4]
	delegate OnScopeIn;//[Offset: 0xb58, Size: 12]
	delegate OnScopeOut;//[Offset: 0xb64, Size: 12]
	delegate OnScopeInContinue;//[Offset: 0xb70, Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xb7c, Size: 4]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0xb80, Size: 4]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0xb84, Size: 4]
	EnergyAccumulateShootComponent* EnergyAccumulateShootComponent;//[Offset: 0xb88, Size: 4]
	FillGasComponent* FillGasComponent;//[Offset: 0xb8c, Size: 4]
	int CurBulletNumInClip;//[Offset: 0xb90, Size: 4]
	BulletInClip CurBulletInClip;//[Offset: 0xb94, Size: 16]
	int CurMaxBulletNumInOneClip;//[Offset: 0xba4, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0xba8, Size: 4]
	bool bBulletPreUseFromPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbac, Size: 1]
	int DynamicReloadType;//[Offset: 0xbb0, Size: 4]
	unsigned char ShootMode;//[Offset: 0xbb4, Size: 1]
	unsigned char CurShootType;//[Offset: 0xbb5, Size: 1]
	unsigned char LastShootType;//[Offset: 0xbb6, Size: 1]
	int CurShootTotalType;//[Offset: 0xbb8, Size: 4]
	unsigned char SpecialFixShootType;//[Offset: 0xbbc, Size: 1]
	float voiceCheckDis;//[Offset: 0xbc0, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0xbc4, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0xbc8, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0xbcc, Size: 12]
	int AngledSightID;//[Offset: 0xbe4, Size: 4]
	unsigned char TraceChannel;//[Offset: 0xbe8, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0xbec, Size: 12]
	float LastImpactEffectTime;//[Offset: 0xbf8, Size: 4]
	int CurBurstShootIndex;//[Offset: 0xc00, Size: 4]
	Transform BoltActionTransform;//[Offset: 0xc10, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	int ClientShootTimes;//[Offset: 0xc44, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xc48, Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xc4c, Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xc50, Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0xc54, Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xc58, Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0xc5c, Size: 4]
	Vector BulletDecalScale;//[Offset: 0xc60, Size: 12]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xc6c, Size: 16]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7d, Size: 1]
	float DropDuration;//[Offset: 0xc80, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xc84, Size: 4]
	float AIShootLoudness;//[Offset: 0xc88, Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0xc8c, Size: 4]
	float AIShootMaxDis;//[Offset: 0xc90, Size: 4]
	float AISilenceShootLoudness;//[Offset: 0xc94, Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xc98, Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0xc9c, Size: 4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 1]
	FireWeaponState* _FireWeaponState;//[Offset: 0xca4, Size: 4]
	unsigned char CurShootWeaponState;//[Offset: 0xca9, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xcb8, Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xcbc, Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0xcc0, Size: 4]
	enum CurShootIntervalMode;//[Offset: 0xcc4, Size: 1]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc5, Size: 1]
	bool IsEquipACCore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc6, Size: 1]
	bool IsEquipBezel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc7, Size: 1]
	bool IsTacticalAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc8, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc9, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcca, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xccc, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xcd8, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xce4, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xcf0, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xcfc, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xd08, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xd14, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0xd20, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xd2c, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xd38, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xd44, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xd50, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd5c, Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0xd68, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd74, Size: 1]
	bool bBezelUnFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd75, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xd80, Size: 12]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xd8c, Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xd90, Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0xd9c, Size: 12]
	<int64,int> AttachedAttachmentInstanceID;//[Offset: 0xda8, Size: 60]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xde4, Size: 12]
	int[] DynamicDefaultAttachedAttachmentID;//[Offset: 0xdf0, Size: 12]
	uint32 ShootID;//[Offset: 0xdfc, Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xe00, Size: 4]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0xe04, Size: 12]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe14, Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe15, Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf08, Size: 1]
	bool bPostFireReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf09, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0a, Size: 1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0xf0c, Size: 12]
	float WeaponDurability;//[Offset: 0xf18, Size: 4]
	int8 CurRearSightIndex;//[Offset: 0xf1c, Size: 1]
	bool bEquipmentModifierOnlyRepOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf24, Size: 1]
	int UpgradeInfoID;//[Offset: 0xf28, Size: 4]
	uint32[] UpgradeBModifyIdArray;//[Offset: 0xf2c, Size: 12]
	bool bUseNewUploadData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf38, Size: 1]
	bool bUseHitDataFlowOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf39, Size: 1]
	ReplayStartFireInfo ReplayStartFireInfo;//[Offset: 0xf3c, Size: 44]
	BulletHitInfoUploadDataInReplay[] RepRelpayHitDataArray;//[Offset: 0xfa8, Size: 12]
	NextFireMinShootDataInReplay[] NextFireMinShootData;//[Offset: 0xfb4, Size: 12]
	NextFireMinShootDataInReplay[] RepNextFireMinShootData;//[Offset: 0xfc0, Size: 12]
	SACData[] SACDataArray;//[Offset: 0xfe0, Size: 12]
};

class WeaponVerifyConfig
{
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]
	bool bVerifyRpgShootInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bVerifyRpgShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
};

class CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0x108, Size: 60]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x144, Size: 12]
	LinearColor MainTargetColor;//[Offset: 0x150, Size: 16]
	LinearColor SecondaryTargetColor;//[Offset: 0x160, Size: 16]
	LinearColor WeaponSightLockColor;//[Offset: 0x170, Size: 16]
	LinearColor WeaponSightLockHDRColor;//[Offset: 0x180, Size: 16]
	<int,int> SightTypeToIndex;//[Offset: 0x190, Size: 60]
	WeaponCrossHairPerformData[] CrossHairDataOverride;//[Offset: 0x1cc, Size: 12]
	float PistolCenterDownDis;//[Offset: 0x1d8, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x1e0, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x1e8, Size: 4]
	bool bForceHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	float RotateAngle;//[Offset: 0x1f0, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x1f4, Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x1fc, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x200, Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x204, Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x208, Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x20c, Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x210, Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x214, Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x218, Size: 4]
	bool bInitAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237, Size: 1]
};

class WeaponCrossHairPerformData
{
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 12]
	enum SpreadType;//[Offset: 0xc, Size: 1]
};

class WeaponCrossHairIconData
{
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 20]
	float Offset;//[Offset: 0x14, Size: 4]
	Vector2D IconOffset;//[Offset: 0x18, Size: 8]
	float Alpha;//[Offset: 0x20, Size: 4]
	float Scale;//[Offset: 0x24, Size: 4]
	float IconRotate;//[Offset: 0x28, Size: 4]
	float LogicRotate;//[Offset: 0x2c, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x34, Size: 4]
};

class CanvasIcon2D
{
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]
};

class ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
{
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x41c, Size: 4]
	float BulletFireSpeed;//[Offset: 0x420, Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x42c, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x430, Size: 4]
	int ExtraBulletNumInOneClip;//[Offset: 0x434, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x438, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x43c, Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x440, Size: 12]
	float ShootInterval;//[Offset: 0x44c, Size: 4]
	int ShootIntervalShowNumber;//[Offset: 0x450, Size: 4]
	float ExtraShootInterval;//[Offset: 0x454, Size: 4]
	int ExtraShootIntervalShowNumber;//[Offset: 0x458, Size: 4]
	<int,float> VolatileShootIntervalMap;//[Offset: 0x45c, Size: 60]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49b, Size: 1]
	bool bIsReasonable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x4a0, Size: 4]
	FName[] ExtraAvailableMuzzleSocketNameList;//[Offset: 0x4a4, Size: 12]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0x4b4, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0x4b8, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x4bc, Size: 12]
	float BurstShootInterval;//[Offset: 0x4c8, Size: 4]
	float BurstShootCD;//[Offset: 0x4cc, Size: 4]
	int BulletNumSingleShot;//[Offset: 0x4d0, Size: 4]
	FName MuzzleSocketName;//[Offset: 0x4d8, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x4e0, Size: 8]
	FName SilencerSocketName;//[Offset: 0x4e8, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x4f0, Size: 8]
	FName ShellDropSocketName;//[Offset: 0x4f8, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x500, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x508, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x50c, Size: 4]
	unsigned char ShootType;//[Offset: 0x510, Size: 1]
	int ShootTotalType;//[Offset: 0x514, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x51c, Size: 4]
	bool ClientShootIntervalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	bool ClientPreVerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 1]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x524, Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x538, Size: 20]
	float BaseImpactDamage;//[Offset: 0x54c, Size: 4]
	float VehicleDamageScale;//[Offset: 0x550, Size: 4]
	float BulletMomentum;//[Offset: 0x554, Size: 4]
	float MomentumAdditionScale;//[Offset: 0x558, Size: 4]
	float MomentumAdditionFixed;//[Offset: 0x55c, Size: 4]
	float BreakDurabilityExtraRatio;//[Offset: 0x560, Size: 4]
	float BulletRange;//[Offset: 0x564, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x568, Size: 4]
	unsigned char ImpactDirType;//[Offset: 0x56c, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x570, Size: 12]
	float RangeModifier;//[Offset: 0x57c, Size: 4]
	float ReferenceDistance;//[Offset: 0x580, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x584, Size: 4]
	class DamageType* DamageType;//[Offset: 0x588, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x590, Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x5a8, Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 1]
	int InitBulletInClip;//[Offset: 0x5c4, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	float TraceDistance;//[Offset: 0x5cc, Size: 4]
	float MaxValidHitTime;//[Offset: 0x5d0, Size: 4]
	<unsigned char,float> BreakThroughDampRateConfig;//[Offset: 0x5d4, Size: 60]
	FName SpesificWeaponBulletCanBreakThroughTargetTag;//[Offset: 0x610, Size: 8]
	float MaxDamageRate;//[Offset: 0x618, Size: 4]
	<unsigned char,int> BreakThroughMaxNumConfig;//[Offset: 0x61c, Size: 60]
	BulletThroughBodyConfig BulletThroughBodyCfg;//[Offset: 0x658, Size: 68]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x6a0, Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x6a4, Size: 88]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x6fc, Size: 8]
	Vector2D LocalSimulateBulletLaunchRangeFromMuzzle;//[Offset: 0x704, Size: 8]
	float BulletTrackDistanceFix;//[Offset: 0x70c, Size: 4]
	float DamageImpulse;//[Offset: 0x710, Size: 4]
	unsigned char ReloadType;//[Offset: 0x714, Size: 1]
	float PreFireTime;//[Offset: 0x718, Size: 4]
	float PreFireAnimScale;//[Offset: 0x71c, Size: 4]
	float PostFireTime;//[Offset: 0x720, Size: 4]
	float PostReloadTime;//[Offset: 0x724, Size: 4]
	bool bNeedMagAnimationWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	float ReloadDurationStart;//[Offset: 0x72c, Size: 4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x730, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x734, Size: 4]
	float ReloadDurationEnd;//[Offset: 0x738, Size: 4]
	float ReloadTime;//[Offset: 0x73c, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x740, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x744, Size: 4]
	float ReloadTimeMagOutTactical;//[Offset: 0x748, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x74c, Size: 4]
	float ReloadTimeMagInTactical;//[Offset: 0x750, Size: 4]
	float ReloadRate;//[Offset: 0x754, Size: 4]
	<unsigned char,WeaponReloadCfg> SpecialReloadCfgData;//[Offset: 0x758, Size: 60]
	FName ReloadAllTIDName;//[Offset: 0x798, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x7a0, Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x7ac, Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b1, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b2, Size: 1]
	bool bAutoSwitchWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b3, Size: 1]
	float DropDuration;//[Offset: 0x7b4, Size: 4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x7bc, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x7c0, Size: 252]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0x8bc, Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x8cc, Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x930, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x934, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x938, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x948, Size: 68]
	float ShotGunCenterPerc;//[Offset: 0x98c, Size: 4]
	float ShotGunVerticalSpread;//[Offset: 0x990, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x994, Size: 4]
	float GameDeviationFactor;//[Offset: 0x998, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x99c, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x9a0, Size: 4]
	unsigned char CrossHairType;//[Offset: 0x9a4, Size: 1]
	float CrossHairInitialSize;//[Offset: 0x9a8, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x9ac, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x9b0, Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x9b4, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x9c0, Size: 8]
	FName DefaultGripSocket;//[Offset: 0x9c8, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x9d0, Size: 8]
	FName DefaultMagSocket;//[Offset: 0x9d8, Size: 8]
	float WeaponBodyLength;//[Offset: 0x9e0, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x9e4, Size: 12]
	float WeaponAimFOV;//[Offset: 0x9f4, Size: 4]
	float WeaponAimInTime;//[Offset: 0x9f8, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x9fc, Size: 4]
	float WeaponAimYawRate;//[Offset: 0xa00, Size: 4]
	float GameMotionYawRate;//[Offset: 0xa04, Size: 4]
	float GameMotionPitchRate;//[Offset: 0xa08, Size: 4]
	float ForegripParam;//[Offset: 0xa0c, Size: 4]
	float MagParam;//[Offset: 0xa10, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa14, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0xa18, Size: 4]
	unsigned char SightType;//[Offset: 0xa1c, Size: 1]
	float SensitiveFirePitchRate;//[Offset: 0xa20, Size: 4]
	unsigned char SightVisionType;//[Offset: 0xa24, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0xa28, Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0xa40, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0xa44, Size: 4]
	float RecoilKickADS;//[Offset: 0xa48, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0xa4c, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0xa50, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa54, Size: 1]
	enum ReleaseFireType;//[Offset: 0xa55, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa56, Size: 1]
	bool bEnableShoulderScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa57, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0xa5c, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0xa60, Size: 4]
	float AnimationKick;//[Offset: 0xa64, Size: 4]
	int ReloadAnimSlot;//[Offset: 0xa68, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6d, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0xa70, Size: 4]
	float SwitchAimAnimTime;//[Offset: 0xa74, Size: 4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa79, Size: 1]
	int ConstantWeaponDurability;//[Offset: 0xa7c, Size: 4]
	float ShootReduceDurabilityAmount;//[Offset: 0xa80, Size: 4]
	Rotator[] RearSightRotConfig;//[Offset: 0xa84, Size: 12]
	FName[] RearSightSocketConfig;//[Offset: 0xa90, Size: 12]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xa9c, Size: 12]
	int RearSightRotIndex;//[Offset: 0xaa8, Size: 4]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaac, Size: 1]
	int MaxFireNumPerFrame;//[Offset: 0xab0, Size: 4]
	OpenCollisionLODAngle[] ShootCollisionDistSqAngles;//[Offset: 0xab4, Size: 12]
	bool bCachedDefaultConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 1]
	unsigned char[] CoronaEffectCfg;//[Offset: 0xe6c, Size: 12]
};

class STExtraShootWeaponBulletBase.Actor.Object
{
	BulletMovementComponent* PMComp;//[Offset: 0x348, Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool bUseSimulateOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x350, Size: 4]
	float LaunchGravityScale;//[Offset: 0x354, Size: 4]
	int PunctureTimes;//[Offset: 0x358, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x35c, Size: 4]
	class DamageType* DamageType;//[Offset: 0x360, Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x364, Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x36c, Size: 4]
	Vector RootScale;//[Offset: 0x370, Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	Vector ShootDir;//[Offset: 0x380, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	float ShowBulletEffectMinDistance;//[Offset: 0x390, Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x480, Size: 4]
	delegate OnRecycleBullet;//[Offset: 0x484, Size: 12]
	delegate OnResetBullet;//[Offset: 0x490, Size: 12]
	delegate OnBulletImpact;//[Offset: 0x49c, Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x4a8, Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x4b4, Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x4b8, Size: 4]
	int ThroughBoneCount;//[Offset: 0x56c, Size: 4]
	float WeaponFloorHeight;//[Offset: 0x570, Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x574, Size: 12]
	unsigned char CachedOwnerRole;//[Offset: 0x580, Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x584, Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	int MaxTraceTimes;//[Offset: 0x58c, Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 1]
};

class BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
{
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x164, Size: 4]
};

class ProjectileMovementComponent.MovementComponent.ActorComponent.Object
{
	float InitialSpeed;//[Offset: 0xfc, Size: 4]
	float MaxSpeed;//[Offset: 0x100, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x104, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x104, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x104, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x104, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x104, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x104, Size: 1]
	float PreviousHitTime;//[Offset: 0x108, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x10c, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x118, Size: 4]
	float Buoyancy;//[Offset: 0x11c, Size: 4]
	float Bounciness;//[Offset: 0x120, Size: 4]
	float Friction;//[Offset: 0x124, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x128, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x12c, Size: 12]
	delegate OnProjectileStop;//[Offset: 0x138, Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x144, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x148, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x150, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x154, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x158, Size: 4]
};

class STEShootWeaponBulletImpactEffect.Actor.Object
{
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x310, Size: 60]
	ParticleSystem* DefaultFX;//[Offset: 0x34c, Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x350, Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x354, Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x358, Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x35c, Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x360, Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x364, Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x368, Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x36c, Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x370, Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x374, Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x378, Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x37c, Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x380, Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x384, Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x388, Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x38c, Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x390, Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x394, Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x398, Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x39c, Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x3a0, Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x3a4, Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x3a8, Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x3ac, Size: 4]
	ParticleSystem* BallCarFX;//[Offset: 0x3b0, Size: 4]
	ParticleSystem* FleshFXNormal;//[Offset: 0x3b4, Size: 4]
	ParticleSystem* FleshFXExpand;//[Offset: 0x3b8, Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x3c0, Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x3c4, Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x3c8, Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x3cc, Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x3d0, Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x3d4, Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x3d8, Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x3dc, Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x3e0, Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x3e4, Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x3e8, Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x3ec, Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x3f0, Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x3f4, Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x3f8, Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x3fc, Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x400, Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x404, Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x408, Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x40c, Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x410, Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x414, Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x418, Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x41c, Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x420, Size: 4]
	AkAudioEvent* WindBreakSound;//[Offset: 0x424, Size: 4]
	AkAudioEvent* BallCarSound;//[Offset: 0x428, Size: 4]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x42c, Size: 4]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x430, Size: 4]
	DecalData DefaultDecal;//[Offset: 0x434, Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x450, Size: 28]
	DecalData DirtDecal;//[Offset: 0x46c, Size: 28]
	DecalData WaterDecal;//[Offset: 0x488, Size: 28]
	DecalData MetalDecal;//[Offset: 0x4a4, Size: 28]
	DecalData WoodDecal;//[Offset: 0x4c0, Size: 28]
	DecalData GrassDecal;//[Offset: 0x4dc, Size: 28]
	DecalData GlassDecal;//[Offset: 0x4f8, Size: 28]
	DecalData FleshDecal;//[Offset: 0x514, Size: 28]
	DecalData SteelDecal;//[Offset: 0x530, Size: 28]
	DecalData SandbagDecal;//[Offset: 0x54c, Size: 28]
	DecalData SandDecal;//[Offset: 0x568, Size: 28]
	DecalData ClothDecal;//[Offset: 0x584, Size: 28]
	DecalData PlasticDecal;//[Offset: 0x5a0, Size: 28]
	DecalData LeatherDecal;//[Offset: 0x5bc, Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x5d8, Size: 28]
	DecalData PaperDecal;//[Offset: 0x5f4, Size: 28]
	DecalData StoneDecal;//[Offset: 0x610, Size: 28]
	DecalData SnowDecal;//[Offset: 0x62c, Size: 28]
	DecalData PopCanDecal;//[Offset: 0x648, Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x664, Size: 28]
	DecalData LeafDecal;//[Offset: 0x680, Size: 28]
	DecalData CarDecal;//[Offset: 0x69c, Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x6b8, Size: 28]
	DecalData IceDecal;//[Offset: 0x6d4, Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x6f0, Size: 216]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ca, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x7cc, Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x7d0, Size: 4]
	Vector DecalScale;//[Offset: 0x7d8, Size: 12]
	SceneComponent* TargetImpactComp;//[Offset: 0x7f8, Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x86c, Size: 4]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0x870, Size: 60]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 1]
};

class HitEffectItemDataList
{
	<unsigned char,ParticleSystem*> ItemDataListMap;//[Offset: 0x0, Size: 60]
};

class DecalData
{
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 4]
};

class Material.MaterialInterface.Object
{
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x58, Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x90, Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc8, Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0x100, Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x138, Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x170, Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a8, Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e8, Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x220, Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x258, Size: 56]
	unsigned char MaterialDomain;//[Offset: 0x290, Size: 1]
	unsigned char BlendMode;//[Offset: 0x291, Size: 1]
	unsigned char DecalBlendMode;//[Offset: 0x292, Size: 1]
	unsigned char MaterialDecalResponse;//[Offset: 0x293, Size: 1]
	unsigned char ShadingModel;//[Offset: 0x294, Size: 1]
	unsigned char ShadingRate;//[Offset: 0x295, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x298, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x29c, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	unsigned char OITBlendMode;//[Offset: 0x2a1, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8, Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8, Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328, Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360, Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398, Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0, Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408, Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x440, Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478, Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678, Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0, Size: 56]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x6f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x740, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x790, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x790, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x790, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x790, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x790, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x790, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x790, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x794, Size: 4]
	unsigned char TranslucencyLightingMode;//[Offset: 0x798, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x79c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x7a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x7a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x7ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x7b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x7b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x7b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x7c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7ce, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cf, Size: 1]
	bool bProcessInGammaSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d1, Size: 1]
	bool bShadowUseTentFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d1, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d1, Size: 1]
	bool bUsedWithLandscapeShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d1, Size: 1]
	bool bUseLandscapeMultiLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d2, Size: 1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d2, Size: 1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d2, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d2, Size: 1]
	unsigned char ShadowOverride;//[Offset: 0x7d3, Size: 1]
	unsigned char SimpleVertexNormalSituation;//[Offset: 0x7d4, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d5, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d5, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d5, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d5, Size: 1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d5, Size: 1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d5, Size: 1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d5, Size: 1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d5, Size: 1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d6, Size: 1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d6, Size: 1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d6, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d6, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d6, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d6, Size: 1]
	bool bApplyFogInscattering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d6, Size: 1]
	bool bSeparateShadowControl;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d6, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d7, Size: 1]
	unsigned char D3D11TessellationMode;//[Offset: 0x7d8, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d9, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d9, Size: 1]
	bool bUsedWithTexture2DArrayShaderVariant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d9, Size: 1]
	float MaxDisplacement;//[Offset: 0x7dc, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e0, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e0, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e0, Size: 1]
	int EditorX;//[Offset: 0x7e4, Size: 4]
	int EditorY;//[Offset: 0x7e8, Size: 4]
	int EditorPitch;//[Offset: 0x7ec, Size: 4]
	int EditorYaw;//[Offset: 0x7f0, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x7f4, Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x800, Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x80c, Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x818, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x818, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x818, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x818, Size: 1]
	bool bClearCoatBottomIBLOptClose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x818, Size: 1]
	bool bUsedWithMobileTAA;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x818, Size: 1]
	bool bUsedWithLandscapeVT;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x818, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x819, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x819, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x819, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x819, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x819, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x819, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x81c, Size: 4]
	bool bUsedMobileDynamicAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x820, Size: 1]
	unsigned char BlendableLocation;//[Offset: 0x821, Size: 1]
	int BlendablePriority;//[Offset: 0x824, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	unsigned char RefractionMode;//[Offset: 0x829, Size: 1]
	float RefractionDepthBias;//[Offset: 0x82c, Size: 4]
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x830, Size: 1]
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x830, Size: 1]
	bool bEnableMeshDiscard;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x830, Size: 1]
	bool bEnableMeshArcPlaneClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x830, Size: 1]
	bool bUsedWithMultiPassInstanceID;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x830, Size: 1]
	bool bUsedWithMobileReadScene;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x830, Size: 1]
	bool bIsEnhancedUImage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x830, Size: 1]
	Guid stateID;//[Offset: 0x834, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x8dc, Size: 12]
};

class ColorMaterialInput.MaterialInput
{
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Color Constant;//[Offset: 0x34, Size: 4]
};

class MaterialInput
{
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]
};

class ScalarMaterialInput.MaterialInput
{
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float Constant;//[Offset: 0x34, Size: 4]
};

class VectorMaterialInput.MaterialInput
{
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector Constant;//[Offset: 0x34, Size: 12]
};

class Vector2MaterialInput.MaterialInput
{
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float ConstantX;//[Offset: 0x34, Size: 4]
	float ConstantY;//[Offset: 0x38, Size: 4]
};

class MaterialAttributesInput.ExpressionInput
{
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 4]
};

class ExpressionInput
{
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]
};

class Vector4MaterialInput.MaterialInput
{
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]
};

class MaterialExpression.Object
{
	Material* Material;//[Offset: 0x1c, Size: 4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 4]
	FString Desc;//[Offset: 0x24, Size: 12]
	Color BorderColor;//[Offset: 0x30, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38, Size: 12]
};

class MaterialFunction.Object
{
	Guid stateID;//[Offset: 0x1c, Size: 16]
	FString Description;//[Offset: 0x2c, Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c, Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
};

class ExpressionOutput
{
	FString OutputName;//[Offset: 0x0, Size: 12]
	int Mask;//[Offset: 0xc, Size: 4]
	int MaskR;//[Offset: 0x10, Size: 4]
	int MaskG;//[Offset: 0x14, Size: 4]
	int MaskB;//[Offset: 0x18, Size: 4]
	int MaskA;//[Offset: 0x1c, Size: 4]
};

class MaterialFunctionInfo
{
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 4]
};

class MaterialParameterCollectionInfo
{
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 4]
};

class BulletHitInfoUploadData
{
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize VictimLocation;//[Offset: 0x24, Size: 12]
	Vector_NetQuantize BulletPos;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x3c, Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x48, Size: 8]
	unsigned char SurfaceType;//[Offset: 0x50, Size: 1]
	uint32 ShootID;//[Offset: 0x54, Size: 4]
	int BulletTypeSpecialID;//[Offset: 0x58, Size: 4]
	uint16 CompensationTime;//[Offset: 0x5c, Size: 2]
	Actor* Actor;//[Offset: 0x60, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x68, Size: 8]
	int TimeStamp;//[Offset: 0x70, Size: 4]
	int ClientShootTime;//[Offset: 0x74, Size: 4]
	unsigned char SpecialBulletID;//[Offset: 0x78, Size: 1]
	unsigned char HitBodyType;//[Offset: 0x79, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x7c, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x80, Size: 4]
	Vector_NetQuantize WeaponOwnerHeadPos;//[Offset: 0x84, Size: 12]
	float DamageRate;//[Offset: 0x90, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	Vector_NetQuantize GunTailPos;//[Offset: 0x98, Size: 12]
	FName BoneName;//[Offset: 0xa8, Size: 8]
	unsigned char ImpactEffectMask;//[Offset: 0xb0, Size: 1]
	unsigned char DataSub;//[Offset: 0xb1, Size: 1]
	unsigned char ClientShootCheck;//[Offset: 0xb2, Size: 1]
};

class DecalComponent.SceneComponent.ActorComponent.Object
{
	MaterialInterface* DecalMaterial;//[Offset: 0x2c0, Size: 4]
	int SortOrder;//[Offset: 0x2c4, Size: 4]
	float FadeScreenSize;//[Offset: 0x2c8, Size: 4]
	float FadeStartDelay;//[Offset: 0x2cc, Size: 4]
	float FadeDuration;//[Offset: 0x2d0, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 1]
	Vector DecalSize;//[Offset: 0x2d8, Size: 12]
};

class ExtendBulletNumAttachment
{
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 4]
};

class WeaponHitPartCoff
{
	float Head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]
};

class SRangeAttenuateConfig
{
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]
};

class BulletThroughBodyConfig
{
	<enum,bool> BodyMap;//[Offset: 0x0, Size: 60]
	float Attenuation;//[Offset: 0x3c, Size: 4]
	int MaxTime;//[Offset: 0x40, Size: 4]
};

class WeaponVisualBulletClientModeConfig
{
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletCameraModeConfig ReplayPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x48, Size: 8]
	WeaponVisualBulletItemConfig ReplayDefaultSetting;//[Offset: 0x50, Size: 8]
};

class WeaponVisualBulletCameraModeConfig
{
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8, Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10, Size: 8]
};

class WeaponVisualBulletItemConfig
{
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4, Size: 4]
};

class WeaponReloadCfg
{
	float Time;//[Offset: 0x0, Size: 4]
	float TimeMagOut;//[Offset: 0x4, Size: 4]
	float TimeMagIn;//[Offset: 0x8, Size: 4]
};

class AutoAimingConfig
{
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 76]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c, Size: 76]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98, Size: 76]
	float followTimeMax;//[Offset: 0xe4, Size: 4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	CurveFloat* SpeedCurve;//[Offset: 0xec, Size: 4]
	CurveFloat* DistanceSpeedCurve;//[Offset: 0xf0, Size: 4]
	CurveFloat* SensitiveSpeedCurve;//[Offset: 0xf4, Size: 4]
	float MaxAngle;//[Offset: 0xf8, Size: 4]
};

class AutoAimingRangeConfig
{
	float Speed;//[Offset: 0x0, Size: 4]
	float CenterSpeedRate;//[Offset: 0x4, Size: 4]
	float RangeRate;//[Offset: 0x8, Size: 4]
	float SpeedRate;//[Offset: 0xc, Size: 4]
	float RangeRateSight;//[Offset: 0x10, Size: 4]
	float SpeedRateSight;//[Offset: 0x14, Size: 4]
	float CrouchRate;//[Offset: 0x18, Size: 4]
	float ProneRate;//[Offset: 0x1c, Size: 4]
	float DyingRate;//[Offset: 0x20, Size: 4]
	float DriveVehicleRate;//[Offset: 0x24, Size: 4]
	float InVehicleRate;//[Offset: 0x28, Size: 4]
	float FreeFallRate;//[Offset: 0x2c, Size: 4]
	float OpeningRate;//[Offset: 0x30, Size: 4]
	float LandingRate;//[Offset: 0x34, Size: 4]
	float adsorbMaxRange;//[Offset: 0x38, Size: 4]
	float adsorbMinRange;//[Offset: 0x3c, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x44, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x48, Size: 4]
};

class AutoAimingConfigByGameMode
{
	class GameStateBase* GameStateClass;//[Offset: 0x0, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x4, Size: 252]
};

class SRecoilInfo
{
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24, Size: 4]
	int BulletPerSwitch;//[Offset: 0x28, Size: 4]
	float TimePerSwitch;//[Offset: 0x2c, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilValueClimb;//[Offset: 0x40, Size: 4]
	float RecoilValueFail;//[Offset: 0x44, Size: 4]
	float RecoilModifierStand;//[Offset: 0x48, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c, Size: 4]
	float RecoilModifierProne;//[Offset: 0x50, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60, Size: 4]
};

class SDeviation
{
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x40, Size: 4]
};

class OpenCollisionLODAngle
{
	float DistSq;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
};

class BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x108, Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x10c, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x110, Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x180, Size: 100]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x1e4, Size: 68]
};

class BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	float UploadInterval;//[Offset: 0x108, Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x114, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x170, Size: 4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
};

class STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	float LastCalcShootTime;//[Offset: 0x10c, Size: 4]
	HitResult CalcShootHitRet;//[Offset: 0x110, Size: 144]
	bool bShootIDNotMatchReportKillflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1a4, Size: 4]
	<unsigned char,ShootWeaponCustomDamageList> CustomBulletDamage;//[Offset: 0x1a8, Size: 60]
	FName NormalBulletsTrackCompTag;//[Offset: 0x1e8, Size: 8]
	bool bJumpInitClipIDAndShootID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bUseMuzzleRotWhenHandFolder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	bool bChangeShootStartWhenReversedDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 1]
	float UseCameraRotReverBlockDistance;//[Offset: 0x1f4, Size: 4]
	bool bSkipVerifyShootIDValidity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool bSkipVerifyStartFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x1fc, Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x200, Size: 4]
	delegate OnShoot;//[Offset: 0x204, Size: 12]
	delegate OnBulletHitConstRefDelegate;//[Offset: 0x210, Size: 12]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x710, Size: 12]
	AIActingComponent* CacheAIActingComp;//[Offset: 0x738, Size: 4]
	int LastFireID;//[Offset: 0x748, Size: 4]
};

class ShootWeaponCustomDamageList
{
	<enum,ShootWeaponCustomDamage> Data;//[Offset: 0x0, Size: 60]
	float RangeModifier;//[Offset: 0x3c, Size: 4]
	float ReferenceDistance;//[Offset: 0x40, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x44, Size: 4]
	float BaseImpactDamage;//[Offset: 0x48, Size: 4]
	class STExtraShootWeaponBulletBase* BulletClass;//[Offset: 0x4c, Size: 4]
};

class ShootWeaponCustomDamage
{
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 40]
	float DamageRate;//[Offset: 0x28, Size: 4]
};

class VolleyShootInfoCache
{
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]
};

class AIActingComponent.LuaInstancedActorComponent.ActorComponent.Object
{
	FString AIActingLuaConfig;//[Offset: 0x114, Size: 12]
	FString DefaultLuaFilePath;//[Offset: 0x120, Size: 12]
	int WillKilledBotNum;//[Offset: 0x12c, Size: 4]
	int PlayersOnSquare;//[Offset: 0x130, Size: 4]
	int OriginalTotalAINum;//[Offset: 0x134, Size: 4]
	int OriginalTotalCandidateAINum;//[Offset: 0x138, Size: 4]
	int OriginalTotalCandidateMLAINum;//[Offset: 0x13c, Size: 4]
	bool bSimulateKillConsiderMLAINum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int[] SimulateKillNums;//[Offset: 0x144, Size: 12]
	int OriginalDeliveryMLAINum;//[Offset: 0x150, Size: 4]
	int OriginalFakePlayerMLAINum;//[Offset: 0x154, Size: 4]
	int TransMLAINum;//[Offset: 0x158, Size: 4]
	int FightingStateMaxActiveAINum;//[Offset: 0x15c, Size: 4]
	AIWayPointActor*[] WayPointActorList;//[Offset: 0x168, Size: 12]
	bool bUseCacheWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0x178, Size: 12]
	AIActingCandidateData[] CandidateMLDeliveryList;//[Offset: 0x184, Size: 12]
	bool bCheckTeleportLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float AverageRating;//[Offset: 0x228, Size: 4]
	bool bUseMlAICondCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	float MlAIHpCheckValue;//[Offset: 0x230, Size: 4]
	float AIDeliveryWaveInterval;//[Offset: 0x234, Size: 4]
	bool bNewPrepareBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	bool bSimulateKilledByServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 1]
	bool bSimulateJumpingByServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 1]
	bool bAIDeadSpawnCandidateAIByServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23b, Size: 1]
	bool bForceExitPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool bOpenMarkOccupiedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	int MaxActiveAI;//[Offset: 0x240, Size: 4]
	int ActiveAI_n;//[Offset: 0x244, Size: 4]
	int ActiveAI_m;//[Offset: 0x248, Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x24c, Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x250, Size: 4]
	float SelectActionPeriod;//[Offset: 0x254, Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x258, Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x25c, Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x260, Size: 12]
	int[] SuicideDamagesType;//[Offset: 0x2a8, Size: 12]
	int[] HomicideDamagesType;//[Offset: 0x2b4, Size: 12]
	int[] NoKillerDamagesType;//[Offset: 0x2c0, Size: 12]
	int SimulateKillMinIntervalNum;//[Offset: 0x2d0, Size: 4]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x2d4, Size: 12]
	float MinKilledFreqScale;//[Offset: 0x2e0, Size: 4]
	float MaxKilledFreqScale;//[Offset: 0x2e4, Size: 4]
	bool bEnableClassicDeliveryAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	bool bEnableHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 1]
	int FullFeedLimit;//[Offset: 0x2ec, Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x2f0, Size: 12]
	float DeliveryBeginTime;//[Offset: 0x2fc, Size: 4]
	float DeliveryFreq;//[Offset: 0x300, Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x304, Size: 4]
	float MinimumWarmScore;//[Offset: 0x308, Size: 4]
	float SpecialAIHpCondition;//[Offset: 0x30c, Size: 4]
	float SpecialAICircleDistanceScale;//[Offset: 0x310, Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x314, Size: 12]
	DeliveryCondition[] DeliveryChecks;//[Offset: 0x320, Size: 12]
	float TeammateDistanceThresholdSqr;//[Offset: 0x32c, Size: 4]
	float EnemyDistanceThresholdSqr;//[Offset: 0x330, Size: 4]
	float DeliveryCoolDown;//[Offset: 0x334, Size: 4]
	SpecialAIDeliveryNumContainer[] SpAINumWitmTeammateCfg;//[Offset: 0x338, Size: 12]
	FString HotValuePrefix;//[Offset: 0x344, Size: 12]
	HotValueAttenuation HotValueAttenuation;//[Offset: 0x350, Size: 12]
	HotValueScale HotValueScale;//[Offset: 0x35c, Size: 12]
	float DeliveryHotValueThreshold;//[Offset: 0x368, Size: 4]
	float HotValueUpdateBeginTime;//[Offset: 0x36c, Size: 4]
	float HotValueUpdateDeltaTime;//[Offset: 0x370, Size: 4]
	bool bDebugHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	Vector2D HotValueLocationOffset;//[Offset: 0x380, Size: 8]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x3a0, Size: 12]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x3ac, Size: 12]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x3b8, Size: 12]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x3c4, Size: 12]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x3d0, Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x3d4, Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x3d8, Size: 4]
	int CommonAIDeliverInWave;//[Offset: 0x3dc, Size: 4]
	float DeliveryWaveCD;//[Offset: 0x3e0, Size: 4]
	<enum,int> StrategyLimit;//[Offset: 0x3e4, Size: 60]
	<enum,int> StrategyNums;//[Offset: 0x420, Size: 60]
	bool bOpenDestroyBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x460, Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x464, Size: 4]
	STExtraPlayerCharacter*[] CachedCandidatePlayers;//[Offset: 0x468, Size: 12]
	FakePlayerAIController*[] CachedCandidateAICs;//[Offset: 0x4c8, Size: 12]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x508, Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x50c, Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool bCheckTargetLocationDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]
	float TargetLocationDistanceThreshold;//[Offset: 0x52c, Size: 4]
	float MaxAILocationTraceHeightZ;//[Offset: 0x530, Size: 4]
	AIActingBPAssit* m_BPAssit;//[Offset: 0x534, Size: 4]
	FString AIActingBPAssitClassPath;//[Offset: 0x538, Size: 12]
	Actor*[] WaterSwimActors;//[Offset: 0x544, Size: 12]
	bool bEnableAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	delegate CustomDeliveryActDelegate;//[Offset: 0x554, Size: 12]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x5a0, Size: 12]
};

class LuaInstancedActorComponent.ActorComponent.Object
{
	FString LuaFilePath;//[Offset: 0x104, Size: 12]
};

class AIWayPointActor.Actor.Object
{
	int ID;//[Offset: 0x310, Size: 4]
	bool bOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x318, Size: 12]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x324, Size: 4]
	BillboardComponent* ShowSprite;//[Offset: 0x328, Size: 4]
};

class TeamWayPointLink
{
	int TeamID;//[Offset: 0x0, Size: 4]
	WayPointLink[] Links;//[Offset: 0x4, Size: 12]
};

class WayPointLink
{
	int NextPointID;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]
};

class AIActingCandidateData
{
	int TeamID;//[Offset: 0x0, Size: 4]
	uint32 AIPlayerKey;//[Offset: 0x4, Size: 4]
	FString AIPlayerName;//[Offset: 0x8, Size: 12]
	FString AIPlayerNation;//[Offset: 0x14, Size: 12]
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x20, Size: 4]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
};

class FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
{
	GameModePlayerItem[] InitialAIWeaponAvatarList;//[Offset: 0xc2c, Size: 12]
	<int,int> AIWeaponAvatarItemList;//[Offset: 0xc74, Size: 60]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0xcb0, Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0xcbc, Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0xcc8, Size: 60]
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0xd04, Size: 4]
	delegate OnEnterJumping;//[Offset: 0xd08, Size: 12]
	delegate OnFakePlayerRespawn;//[Offset: 0xd14, Size: 12]
	delegate FakeAIJumpFromPlane;//[Offset: 0xd20, Size: 12]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0xd4c, Size: 4]
	int PlayerTeamId;//[Offset: 0xd50, Size: 4]
	uint32 PlayerKey;//[Offset: 0xd54, Size: 4]
	FString PlayerName;//[Offset: 0xd58, Size: 12]
	unsigned char AIType;//[Offset: 0xd64, Size: 1]
	int resID;//[Offset: 0xd68, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6c, Size: 1]
	enum ParachuteType;//[Offset: 0xd6d, Size: 1]
	bool bForceRecordKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6e, Size: 1]
	float TeleportRandomAngle;//[Offset: 0xd70, Size: 4]
	bool bUnPossessStopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd74, Size: 1]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd75, Size: 1]
	FString DropItemCfgTableName;//[Offset: 0xd78, Size: 12]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0xd84, Size: 4]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 1]
	GameModePlayerItem[] OverrideInitialItemList;//[Offset: 0xd94, Size: 12]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0xda0, Size: 4]
	int CurWeaponSchemeIndex;//[Offset: 0xda4, Size: 4]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0xda8, Size: 12]
	bool EnableAIAttachItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb4, Size: 1]
};

class BaseAIController.BasicAIController.AIController.Controller.Actor.Object
{
	delegate OnCustomSpawnItemDelegate;//[Offset: 0x5b8, Size: 16]
	float CheckPeriod;//[Offset: 0x5c8, Size: 4]
	float RandomDeviation;//[Offset: 0x5cc, Size: 4]
	float ProtectCountdownTime;//[Offset: 0x5d0, Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x5d4, Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x5d8, Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x5dc, Size: 8]
	float TurnVelocity;//[Offset: 0x5e4, Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x5e8, Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x5f0, Size: 60]
	bool bSyncViewRotationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	bool bAimOffsetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 1]
	GameModeAIPlayerParams AIParams;//[Offset: 0x638, Size: 832]
	unsigned char AIActionType;//[Offset: 0x9b4, Size: 1]
	unsigned char FakePlayerBornType;//[Offset: 0x9b5, Size: 1]
	bool IsVaultBreakWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b6, Size: 1]
	float ValidPlayerControllerDist;//[Offset: 0x9b8, Size: 4]
	float DelayAIVaultBreakWindowTime;//[Offset: 0x9bc, Size: 4]
	int AIParachuteStyle;//[Offset: 0x9c0, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x9c4, Size: 4]
	SpectatorComponent* SpectatorComponent;//[Offset: 0x9c8, Size: 4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x9cc, Size: 56]
	AIShootMissInfo AIShootMissInfo;//[Offset: 0xa04, Size: 24]
	AIConditionHearingComponent* AIConditionHearingComponent;//[Offset: 0xa1c, Size: 4]
	AIParachuteJumpComponent* AIParachuteComp;//[Offset: 0xa20, Size: 4]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0xa64, Size: 4]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0xa68, Size: 4]
	bool IsRespawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa75, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0xa78, Size: 12]
	Actor* Plane;//[Offset: 0xa84, Size: 4]
	int FlightNo;//[Offset: 0xa88, Size: 4]
	int DefaultAIFeatureConfigID;//[Offset: 0xa8c, Size: 4]
	AIFeatureInfo AIFeatureInfo;//[Offset: 0xa90, Size: 320]
	bool IsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c, Size: 1]
	STExtraBaseCharacter* RescuedByWho;//[Offset: 0xc10, Size: 8]
	uint32 CurAILevel;//[Offset: 0xc1c, Size: 4]
	int MLAIStyle;//[Offset: 0xc20, Size: 4]
	bool bSkipCreateBackpackEveryTimePossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc24, Size: 1]
	bool bFullyRandomEveryTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc25, Size: 1]
	bool bConsiderBlueCircleWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc26, Size: 1]
	bool bConsiderWaterWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc27, Size: 1]
	bool bSkipUpdateRotationDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28, Size: 1]
};

class BasicAIController.AIController.Controller.Actor.Object
{
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x404, Size: 4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x408, Size: 4]
	SpawnerBase* TeamZoneSpawner;//[Offset: 0x40c, Size: 4]
	SpawnerBase* CurSpawner;//[Offset: 0x410, Size: 4]
	uint32 OwnedSpawnerID;//[Offset: 0x414, Size: 4]
	bool bAsyncLoadBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	enum AIAttackType;//[Offset: 0x419, Size: 1]
	bool IsAdvancedAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 1]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x41c, Size: 12]
	BehaviorTree*[] NewBehaviorTreePath;//[Offset: 0x428, Size: 12]
	BehaviorTree*[] AdvancedBehaviorTreePath;//[Offset: 0x434, Size: 12]
	int BehaviorTreeIndexRunWhenPossess;//[Offset: 0x440, Size: 4]
	float ActorLocationTetherDistance;//[Offset: 0x444, Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x448, Size: 4]
	FString AIFeatureInfoTableName;//[Offset: 0x44c, Size: 12]
	FString AIWeaponRangeTableName;//[Offset: 0x458, Size: 12]
	int HitRateConfigNum;//[Offset: 0x464, Size: 4]
	int AIFeatureID;//[Offset: 0x468, Size: 4]
	AITargetInViewOffset AITargetInViewOffset;//[Offset: 0x46c, Size: 44]
	delegate OnBehaviorTreeLoaded;//[Offset: 0x4e4, Size: 12]
	AIShootingPoseOffsetInfo shootingPoseOffsetInfo;//[Offset: 0x4f0, Size: 84]
	delegate OnCollectionHearSoundDelegate;//[Offset: 0x544, Size: 12]
	bool InterpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	enum AICharacterRotateInterpType;//[Offset: 0x551, Size: 1]
	float RotationSpeedOfInterpControlRotation;//[Offset: 0x554, Size: 4]
	Pawn* DebugWatcher;//[Offset: 0x560, Size: 4]
	FString LuaFilePath;//[Offset: 0x564, Size: 12]
};

class AIController.Controller.Actor.Object
{
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x380, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x380, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x380, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x380, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x380, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x384, Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x388, Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x38c, Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x390, Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x394, Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x398, Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x39c, Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x3a0, Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ae, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x3b0, Size: 12]
	bool bEnableActiveRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
};

class PathFollowingComponent.ActorComponent.Object
{
	NavMovementComponent* MovementComp;//[Offset: 0xf8, Size: 4]
	NavigationData* MyNavData;//[Offset: 0x104, Size: 4]
};

class BrainComponent.ActorComponent.Object
{
	BlackboardComponent* BlackboardComp;//[Offset: 0xc8, Size: 4]
	AIController* AIOwner;//[Offset: 0xcc, Size: 4]
};

class BlackboardComponent.ActorComponent.Object
{
	BrainComponent* BrainComp;//[Offset: 0xc4, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc8, Size: 4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe4, Size: 12]
};

class BlackboardData.DataAsset.Object
{
	BlackboardData* Parent;//[Offset: 0x20, Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
};

class BlackboardEntry
{
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
};

class BlackboardKeyType.Object
{
};

class BehaviorTreeComponent.BrainComponent.ActorComponent.Object
{
	BTNode*[] NodeInstances;//[Offset: 0x118, Size: 12]
};

class BTNode.Object
{
	FString NodeName;//[Offset: 0x20, Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 4]
};

class BehaviorTree.Object
{
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 12]
};

class BTCompositeNode.BTNode.Object
{
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 12]
	BTService*[] Services;//[Offset: 0x48, Size: 12]
};

class BTCompositeChild
{
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 12]
};

class BTTaskNode.BTNode.Object
{
	BTService*[] Services;//[Offset: 0x3c, Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
};

class BTService.BTAuxiliaryNode.BTNode.Object
{
	float Interval;//[Offset: 0x3c, Size: 4]
	float RandomDeviation;//[Offset: 0x40, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
};

class BTAuxiliaryNode.BTNode.Object
{
};

class BTDecorator.BTAuxiliaryNode.BTNode.Object
{
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 1]
	unsigned char FlowAbortMode;//[Offset: 0x3d, Size: 1]
};

class BTDecoratorLogic
{
	unsigned char Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]
};

class SpawnerBase.Actor.Object
{
	UnitTransformGenerator* TransformGenerator;//[Offset: 0x350, Size: 4]
	UnitSpeciesGenerator* SpeciesGenerator;//[Offset: 0x354, Size: 4]
	FString LuaFilePath;//[Offset: 0x358, Size: 12]
	Pawn*[] AliveBots;//[Offset: 0x364, Size: 12]
	SpawnerInfo SpawnerInfo;//[Offset: 0x370, Size: 52]
};

class UnitTransformGenerator.Object
{
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
};

class UnitSpeciesGenerator.Object
{
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	FString SpeciesConfigLuaPath;//[Offset: 0x6c, Size: 12]
};

class SpawnerInfo
{
	Guid SpawnerID;//[Offset: 0x0, Size: 16]
	int ConfigId;//[Offset: 0x10, Size: 4]
	FString State;//[Offset: 0x14, Size: 12]
	bool bAutoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	FString OwnerZone;//[Offset: 0x28, Size: 12]
};

class OnlyActorCompManagerComponent.ActorComponent.Object
{
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0xc4, Size: 60]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0x100, Size: 12]
};

class OnlyActorComponent.ActorComponent.Object
{
	unsigned char bCanEverUpdate;//[Offset: 0xc4, Size: 1]
};

class AIPerceptionComponent.ActorComponent.Object
{
	AISenseConfig*[] SensesConfig;//[Offset: 0xc4, Size: 12]
	class AISense* DominantSense;//[Offset: 0xd0, Size: 4]
	AIController* AIOwner;//[Offset: 0xe8, Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x148, Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x154, Size: 12]
};

class AISenseConfig.Object
{
	Color DebugColor;//[Offset: 0x1c, Size: 4]
	float MaxAge;//[Offset: 0x20, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
};

class AISense.Object
{
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 4]
	enum NotifyType;//[Offset: 0x20, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 4]
};

class AIPerceptionSystem.Object
{
	AISense*[] Senses;//[Offset: 0x5c, Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 4]
};

class PawnActionsComponent.ActorComponent.Object
{
	Pawn* ControlledPawn;//[Offset: 0xc4, Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xc8, Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xd4, Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xe0, Size: 4]
};

class PawnActionStack
{
	PawnAction* TopAction;//[Offset: 0x0, Size: 4]
};

class PawnAction.Object
{
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 4]
	Object* Instigator;//[Offset: 0x28, Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 1]
};

class PawnActionEvent
{
	PawnAction* Action;//[Offset: 0x0, Size: 4]
};

class GameplayTasksComponent.ActorComponent.Object
{
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc8, Size: 12]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd4, Size: 12]
	GameplayTask*[] TickingTasks;//[Offset: 0xec, Size: 12]
	GameplayTask*[] KnownTasks;//[Offset: 0xf8, Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x108, Size: 12]
};

class GameplayTask.Object
{
	FName InstanceName;//[Offset: 0x20, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 4]
};

class NavigationQueryFilter.Object
{
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 4]
};

class NavigationFilterArea
{
	class NavArea* AreaClass;//[Offset: 0x0, Size: 4]
	float TravelCostOverride;//[Offset: 0x4, Size: 4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
};

class NavigationFilterFlags
{
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
};

class GameModePlayerItem
{
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 12]
	bool bDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
};

class AITargetInViewOffset
{
	Vector[] Offset;//[Offset: 0x0, Size: 12]
	Vector[] CrouchOffset;//[Offset: 0xc, Size: 12]
	Vector TargetLoc;//[Offset: 0x18, Size: 12]
	int CurrentOffsetIndex;//[Offset: 0x24, Size: 4]
	bool bTargetInViewDueToOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum TargetPawnState;//[Offset: 0x29, Size: 1]
};

class AIShootingPoseOffsetInfo
{
	AIShootingPoseOffsetDetailInfo[] ShootingPoseShootPointOffsetArray;//[Offset: 0x0, Size: 12]
	float CrouchToStandHeightOffset;//[Offset: 0xc, Size: 4]
	float ProneToStandHeightOffset;//[Offset: 0x10, Size: 4]
	<enum,Vector> ShootingPoseShootPointOffsetMap;//[Offset: 0x18, Size: 60]
};

class AIShootingPoseOffsetDetailInfo
{
	enum shootingPose;//[Offset: 0x0, Size: 1]
	Vector offsetInfo;//[Offset: 0x4, Size: 12]
};

class GameModePlayerEquipmentAvatar
{
	int BagAvatar;//[Offset: 0x0, Size: 4]
	int HelmetAvatar;//[Offset: 0x4, Size: 4]
	int ArmorAvatar;//[Offset: 0x8, Size: 4]
};

class NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
{
	bool bPathDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bUpdatePathOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	float maxCheckDis;//[Offset: 0x278, Size: 4]
	float maxCheckDisTime;//[Offset: 0x27c, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x288, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x28c, Size: 4]
	float MaxTransferDis;//[Offset: 0x290, Size: 4]
};

class PlayerSecurityInfoCollector.ActorComponent.Object
{
	int[] EnergyItemIDList;//[Offset: 0xc4, Size: 12]
	int[] EnergySpeedUpPhaseIndexList;//[Offset: 0xd0, Size: 12]
	bool bEnableDetailFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool bEnableDetailHurtFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	ClientCircleFlow CurCircleFlow;//[Offset: 0xe0, Size: 304]
	ClientCircleFlow CollectCircleFlow;//[Offset: 0x210, Size: 304]
	DSCircleFlow CurDSCircleFlow;//[Offset: 0x340, Size: 40]
	DSCircleFlow CollectDSCircleFlow;//[Offset: 0x368, Size: 40]
	HurtFlow CurHurtFlow;//[Offset: 0x390, Size: 256]
	ClientJumpFlow JumpFlow;//[Offset: 0x490, Size: 168]
	ClientSecPlayerKillFlow SecPlayerKillFlow;//[Offset: 0x538, Size: 136]
	InexistentAvatarFlow InexistentAvatarFlow;//[Offset: 0xeb0, Size: 360]
};

class ClientCircleFlow
{
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString PicUrl;//[Offset: 0x14, Size: 12]
	uint32 GameStartTime;//[Offset: 0x20, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x24, Size: 4]
	int NewCirclePositionX;//[Offset: 0x28, Size: 4]
	int NewCirclePositionY;//[Offset: 0x2c, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x30, Size: 4]
	int NewCircleCount;//[Offset: 0x34, Size: 4]
	int PlayerPositionX;//[Offset: 0x38, Size: 4]
	int PlayerPositionY;//[Offset: 0x3c, Size: 4]
	int PlayerPositionZ;//[Offset: 0x40, Size: 4]
	int PlayerHP;//[Offset: 0x44, Size: 4]
	uint32 OldCircleMoveTime;//[Offset: 0x48, Size: 4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x4c, Size: 4]
	uint32 PlayerOutTime;//[Offset: 0x50, Size: 4]
	int CirclePoisonCount;//[Offset: 0x54, Size: 4]
	int CirclePoisonMin;//[Offset: 0x58, Size: 4]
	int CirclePoisonMax;//[Offset: 0x5c, Size: 4]
	int CirclePoisonAvg;//[Offset: 0x60, Size: 4]
	int CirclePoisonTotal;//[Offset: 0x64, Size: 4]
	int CirclePoisonDrop;//[Offset: 0x68, Size: 4]
	int CirclePoisonDead;//[Offset: 0x6c, Size: 4]
	int RecoveryCount;//[Offset: 0x70, Size: 4]
	int RecoveryMin;//[Offset: 0x74, Size: 4]
	int RecoveryMax;//[Offset: 0x78, Size: 4]
	int RecoveryTotal;//[Offset: 0x7c, Size: 4]
	int EnergyRecoveryCount;//[Offset: 0x80, Size: 4]
	RecoveryItemCount[] RecoveryItemCounts;//[Offset: 0x84, Size: 12]
	int EnergyRecoveryMin;//[Offset: 0x90, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x94, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x98, Size: 4]
	int EnergyStartLv;//[Offset: 0x9c, Size: 4]
	int EnergyStartTime;//[Offset: 0xa0, Size: 4]
	FString EnergyItemUse;//[Offset: 0xa4, Size: 12]
	int EnergyLvTimeInfo;//[Offset: 0xb0, Size: 4]
	FString EnergyRunFastTime;//[Offset: 0xb4, Size: 12]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xc0, Size: 12]
	int EnergyEndLv;//[Offset: 0xcc, Size: 4]
	int EnergyEndTime;//[Offset: 0xd0, Size: 4]
	int PlayerMoveDis;//[Offset: 0xd4, Size: 4]
	int PlayerSpeedMax;//[Offset: 0xd8, Size: 4]
	int PlayerSpeedAvg;//[Offset: 0xdc, Size: 4]
	int PlayerCarSpeedMax;//[Offset: 0xe0, Size: 4]
	int PlayerCarSpeedAvg;//[Offset: 0xe4, Size: 4]
	int PlayerSquatMoveDis;//[Offset: 0xe8, Size: 4]
	int PlayerSquatMoveTime;//[Offset: 0xec, Size: 4]
	int PlayerCreepMoveDis;//[Offset: 0xf0, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0xf4, Size: 4]
	int PlayerRunMoveDis;//[Offset: 0xf8, Size: 4]
	int PlayerRunMoveTime;//[Offset: 0xfc, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0x100, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0x104, Size: 4]
	int PlayerCar;//[Offset: 0x108, Size: 4]
	int PlayerCameraDistanceMax;//[Offset: 0x10c, Size: 4]
	uint32 SecCircleFlowID;//[Offset: 0x110, Size: 4]
	int RecordType;//[Offset: 0x114, Size: 4]
	unsigned char AutoAimType;//[Offset: 0x118, Size: 1]
	int AutoAimTime;//[Offset: 0x11c, Size: 4]
	unsigned char[] MrpcsFlowData;//[Offset: 0x120, Size: 12]
};

class RecoveryItemCount
{
	uint32 ItemId;//[Offset: 0x0, Size: 4]
	uint32 Count;//[Offset: 0x4, Size: 4]
};

class DSCircleFlow
{
	uint32 GameStartTime;//[Offset: 0x0, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x4, Size: 4]
	int NewCircleCount;//[Offset: 0x8, Size: 4]
	int RecoveryTotal;//[Offset: 0xc, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x10, Size: 4]
	int PlayerMoveDis;//[Offset: 0x14, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0x18, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0x1c, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0x20, Size: 4]
	int RecordType;//[Offset: 0x24, Size: 4]
};

class HurtFlow
{
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString EnemyOpenID;//[Offset: 0x7c, Size: 12]
	FString EnemyUserName;//[Offset: 0x88, Size: 12]
	uint64 EnemyRoleID;//[Offset: 0x98, Size: 8]
	int EnemyRoleType;//[Offset: 0xa0, Size: 4]
	uint32 HurtTime;//[Offset: 0xa4, Size: 4]
	int HurtType;//[Offset: 0xa8, Size: 4]
	int HitType;//[Offset: 0xac, Size: 4]
	int DamageStart;//[Offset: 0xb0, Size: 4]
	int DamageReduce;//[Offset: 0xb4, Size: 4]
	int ArmorDef;//[Offset: 0xb8, Size: 4]
	int HPstart;//[Offset: 0xbc, Size: 4]
	int HPEnd;//[Offset: 0xc0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xc4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xc8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xcc, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xd0, Size: 4]
	int CarHPStart;//[Offset: 0xd4, Size: 4]
	int CarHPEnd;//[Offset: 0xd8, Size: 4]
	int FallHeight;//[Offset: 0xdc, Size: 4]
	int HypoxiaTime;//[Offset: 0xe0, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0xe4, Size: 4]
	int PlayerKilled;//[Offset: 0xe8, Size: 4]
	int ArmorKill;//[Offset: 0xec, Size: 4]
	int CarKill;//[Offset: 0xf0, Size: 4]
	int IfIsAI;//[Offset: 0xf4, Size: 4]
	int CircleIndex;//[Offset: 0xf8, Size: 4]
	uint32 HurtFlowID;//[Offset: 0xfc, Size: 4]
};

class ClientJumpFlow
{
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherId;//[Offset: 0x20, Size: 1]
	int64 GameStartTime;//[Offset: 0x28, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x30, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x34, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x38, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x40, Size: 4]
	FString FollowPlayerUID;//[Offset: 0x44, Size: 12]
	uint32 ExitFollowTime;//[Offset: 0x50, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x54, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x58, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x5c, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x60, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x64, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x68, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x6c, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x70, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x74, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x78, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x7c, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x80, Size: 4]
	FString AntsVoiceTeamID;//[Offset: 0x84, Size: 12]
	FString AntsVoiceRoomID;//[Offset: 0x90, Size: 12]
	int AntsVoiceTeamMemberID;//[Offset: 0x9c, Size: 4]
	int AntsVoiceRoomMemberID;//[Offset: 0xa0, Size: 4]
};

class ClientSecPlayerKillFlow
{
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]
	int LocationX;//[Offset: 0x4c, Size: 4]
	int LocationY;//[Offset: 0x50, Size: 4]
	int LocationZ;//[Offset: 0x54, Size: 4]
	int KilledLocationX;//[Offset: 0x58, Size: 4]
	int KilledLocationY;//[Offset: 0x5c, Size: 4]
	int KilledLocationZ;//[Offset: 0x60, Size: 4]
	int KilledTeamID;//[Offset: 0x64, Size: 4]
	int TeamID;//[Offset: 0x68, Size: 4]
	FString GameModeID;//[Offset: 0x6c, Size: 12]
	uint64 PawnState;//[Offset: 0x78, Size: 8]
	uint64 KilledPawnState;//[Offset: 0x80, Size: 8]
};

class RecoilInfo
{
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]
};

class InexistentAvatarFlow
{
};

class GameModePlayeWeaponSchemeInfo
{
	int SchemeIndex;//[Offset: 0x0, Size: 4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	GameModePlayeWeaponSchemeSlotInfo[] SlotList;//[Offset: 0x8, Size: 12]
};

class GameModePlayeWeaponSchemeSlotInfo
{
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemId;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int[] AttachList;//[Offset: 0xc, Size: 12]
};

class GameModeAIPlayerParams.GameModePlayerParams
{
	int8 AIType;//[Offset: 0x328, Size: 1]
	uint32 AILevel;//[Offset: 0x32c, Size: 4]
	bool bMLAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	uint32 MLBotType;//[Offset: 0x334, Size: 4]
	bool bBornIslandAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
};

class GameModePlayerParams
{
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x4, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	int ZoneID;//[Offset: 0x24, Size: 4]
	int8 PlatID;//[Offset: 0x28, Size: 1]
	FName PlayerType;//[Offset: 0x30, Size: 8]
	FString PlayerName;//[Offset: 0x38, Size: 12]
	uint32 PlayerKey;//[Offset: 0x44, Size: 4]
	int TeamID;//[Offset: 0x48, Size: 4]
	int64 IdxInTeam;//[Offset: 0x50, Size: 8]
	uint64 PreTeamID;//[Offset: 0x58, Size: 8]
	int PlayerBornPointID;//[Offset: 0x60, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]
	unsigned char gender;//[Offset: 0x66, Size: 1]
	FString PIC_URL;//[Offset: 0x68, Size: 12]
	int Level;//[Offset: 0x74, Size: 4]
	int Segment_Level;//[Offset: 0x78, Size: 4]
	int AceImprintShowId;//[Offset: 0x7c, Size: 4]
	int AceImprintBaseId;//[Offset: 0x80, Size: 4]
	int AvatarBoxId;//[Offset: 0x84, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	uint64 MLAIDisplayUID;//[Offset: 0x90, Size: 8]
	GameModePlayerItem[] ItemList;//[Offset: 0x98, Size: 12]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0xa4, Size: 12]
	int[] equip_plating_list;//[Offset: 0xb0, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0xbc, Size: 12]
	int RolewearIndex;//[Offset: 0xc8, Size: 4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xcc, Size: 12]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xd8, Size: 12]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0xe4, Size: 12]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xf0, Size: 12]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0xfc, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x108, Size: 12]
	GameModeWeaponDIYPlanData[] WeaponDIYPlanData;//[Offset: 0x114, Size: 12]
	int VehicleSkinInReady;//[Offset: 0x120, Size: 4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x124, Size: 52]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x158, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x188, Size: 28]
	GameModePlayerPetInfo[] AdditionalPetInfo;//[Offset: 0x1a4, Size: 12]
	int UsingAdditionalPetIndex;//[Offset: 0x1b0, Size: 4]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x1b4, Size: 12]
	GameModePlayeWeaponSchemeInfo[] WeaponSchemeInfoList;//[Offset: 0x1c0, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x1cc, Size: 4]
	int PveLevel;//[Offset: 0x1d0, Size: 4]
	int[] CharSkillList;//[Offset: 0x1d4, Size: 12]
	GameModePlayerBanChat banChat;//[Offset: 0x1e0, Size: 16]
	GameModePlayerBanChat banTarget;//[Offset: 0x1f0, Size: 16]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x200, Size: 12]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x20c, Size: 12]
	int[] audioChat;//[Offset: 0x218, Size: 12]
	FName CurrentPlayerState;//[Offset: 0x228, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x230, Size: 8]
	float SyncedTimestamp;//[Offset: 0x238, Size: 4]
	float DestinyValue;//[Offset: 0x23c, Size: 4]
	float WarmScore;//[Offset: 0x240, Size: 4]
	float AIAllocMarkValue;//[Offset: 0x244, Size: 4]
	int LeaderCount;//[Offset: 0x248, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x250, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x258, Size: 12]
	uint64 LastGameBattleID;//[Offset: 0x268, Size: 8]
	float RatingScore;//[Offset: 0x270, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	float MaxRankingScore;//[Offset: 0x278, Size: 4]
	uint32 ObserverFlags;//[Offset: 0x27c, Size: 4]
	uint64 WatchPlayerKey;//[Offset: 0x280, Size: 8]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0x28c, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0x290, Size: 4]
	unsigned char PlatformGender;//[Offset: 0x294, Size: 1]
	int planeAvatarId;//[Offset: 0x298, Size: 4]
	int DyeDebugFlag;//[Offset: 0x29c, Size: 4]
	FString Nation;//[Offset: 0x2a0, Size: 12]
	int MatchLabel;//[Offset: 0x2ac, Size: 4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x2b8, Size: 8]
	int64 CorpsID;//[Offset: 0x2c0, Size: 8]
	int64 CampID;//[Offset: 0x2c8, Size: 8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]
	FString IpCountryStr;//[Offset: 0x2d4, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int VeteranRecruitIndex;//[Offset: 0x2e4, Size: 4]
	int MatchStrategyLabel;//[Offset: 0x2e8, Size: 4]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x2ec, Size: 12]
	int LandId;//[Offset: 0x2f8, Size: 4]
	int FollowType;//[Offset: 0x2fc, Size: 4]
	uint64 FollowUID;//[Offset: 0x300, Size: 8]
	uint32 TaskSyncToDsTs;//[Offset: 0x308, Size: 4]
	uint64 LuckmateUID;//[Offset: 0x310, Size: 8]
	FString GameAPPIDFromDS;//[Offset: 0x318, Size: 12]
	float RealHiddenScore;//[Offset: 0x324, Size: 4]
};

class GameModePlayerRolewearInfo
{
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 12]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
};

class GameModePlayerExpressionItem.GameModePlayerItem
{
};

class GameModePlayerTaskData
{
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 12]
};

class VehicleAvatarData
{
	int VehicleSkinID;//[Offset: 0x0, Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x4, Size: 12]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10, Size: 12]
};

class VehicleAvatarStyle
{
	int ModelID;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int ParticleID;//[Offset: 0xc, Size: 4]
};

class GameModeWeaponDIYPlanData
{
	int WeaponAvatarID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]
};

class GameModePlayerAliasInfo
{
	int AliasID;//[Offset: 0x0, Size: 4]
	FString AliasTitle;//[Offset: 0x4, Size: 12]
	FString AliasNation;//[Offset: 0x10, Size: 12]
	int AliasRank;//[Offset: 0x1c, Size: 4]
	FString AliasPartnerName;//[Offset: 0x20, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x2c, Size: 4]
	int AliasRankID;//[Offset: 0x30, Size: 4]
};

class GameModePlayerUpassInfo
{
	int updateTime;//[Offset: 0x0, Size: 4]
	int upassLevel;//[Offset: 0x4, Size: 4]
	int upassScore;//[Offset: 0x8, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	FString iconUrl;//[Offset: 0x10, Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int upassKeepBuy;//[Offset: 0x20, Size: 4]
	int upassCurValue;//[Offset: 0x24, Size: 4]
	int pass_type;//[Offset: 0x28, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x2c, Size: 4]
};

class GameModePlayerPetInfo
{
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]
	int PetCfgId;//[Offset: 0x8, Size: 4]
	int PetColor;//[Offset: 0xc, Size: 4]
	int[] PetAvatarList;//[Offset: 0x10, Size: 12]
};

class GameModePlayerKnapsackExtInfo
{
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 84]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	int WearIndex;//[Offset: 0x58, Size: 4]
};

class GameModePlayerKnapsackSingleInfo
{
	int Parachute;//[Offset: 0x0, Size: 4]
	int ParachuteGlider;//[Offset: 0x4, Size: 4]
	int BagSkin;//[Offset: 0x8, Size: 4]
	int HelmetSkin;//[Offset: 0xc, Size: 4]
	int FlySkin;//[Offset: 0x10, Size: 4]
	int GrenadeSkin;//[Offset: 0x14, Size: 4]
	GameModePlayerConsumableAvatar ConsumableAvatarList;//[Offset: 0x18, Size: 16]
	GameModePlayerItem[] WeaponList;//[Offset: 0x28, Size: 12]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x34, Size: 12]
	GameModePlayerItem[] BackPackPendantList;//[Offset: 0x40, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x4c, Size: 4]
	int WingmanSkin;//[Offset: 0x50, Size: 4]
};

class GameModePlayerConsumableAvatar
{
	int GrenadeAvatarShoulei;//[Offset: 0x0, Size: 4]
	int GrenadeAvatarSmoke;//[Offset: 0x4, Size: 4]
	int GrenadeAvatarStun;//[Offset: 0x8, Size: 4]
	int GrenadeAvatarBurn;//[Offset: 0xc, Size: 4]
};

class GameModePlayerBanChat
{
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]
};

class SpecialPickItem
{
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]
};

class AchievementPrize
{
	int MedalAvatarID;//[Offset: 0x0, Size: 4]
	int NotifyTitleAvatarID;//[Offset: 0x4, Size: 4]
	int ScoreBoardAvatarID;//[Offset: 0x8, Size: 4]
};

class DailyTaskStoreInfo
{
	int TaskId;//[Offset: 0x0, Size: 4]
	int State;//[Offset: 0x4, Size: 4]
	int Progress;//[Offset: 0x8, Size: 4]
};

class BackpackComponent.LuaActorComponent.ActorComponent.Object
{
	delegate ItemListUpdatedDelegate;//[Offset: 0x158, Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x164, Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0x170, Size: 12]
	delegate BatchItemUpdateDelegate;//[Offset: 0x17c, Size: 12]
	delegate BatchItemDeleteDelegate;//[Offset: 0x188, Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0x194, Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0x1a0, Size: 12]
	delegate ItemOperationInfoDelegate;//[Offset: 0x1ac, Size: 12]
	delegate AssociationOperationDelegate;//[Offset: 0x1b8, Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x1c4, Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x1d0, Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x1dc, Size: 12]
	delegate ItemHandleAddDelegate;//[Offset: 0x1e8, Size: 12]
	<int,int> PickupLimitSetting;//[Offset: 0x1f4, Size: 60]
	delegate ItemUpdatedDelegate;//[Offset: 0x230, Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x23c, Size: 12]
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0x248, Size: 12]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x254, Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x260, Size: 12]
	int CoinsNum;//[Offset: 0x26c, Size: 4]
	delegate CoinsChangedDelegate;//[Offset: 0x270, Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x288, Size: 24]
	IncNetArray ItemListNetCache;//[Offset: 0x2a0, Size: 24]
	<int,BattleItemData> CacheBattleItemMap;//[Offset: 0x2b8, Size: 60]
	ItemDefineID[] BroadcastInsertItemList;//[Offset: 0x2f4, Size: 12]
	ItemDefineID[] BroadcastUpdateItemList;//[Offset: 0x300, Size: 12]
	ItemDefineID[] BroadcastDeleteItemList;//[Offset: 0x30c, Size: 12]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x31c, Size: 12]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x328, Size: 60]
	int CapacityThreshold;//[Offset: 0x364, Size: 4]
	float Capacity;//[Offset: 0x368, Size: 4]
	float OccupiedCapacity;//[Offset: 0x36c, Size: 4]
	float SafetyBoxCapacity;//[Offset: 0x370, Size: 4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x374, Size: 4]
	int virtualitemid;//[Offset: 0x388, Size: 4]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	int[] NeedToShowTypeList;//[Offset: 0x398, Size: 12]
	bool bVerifyWeaponPackageData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x3a8, Size: 12]
};

class CustomAccessoriesData
{
	int WeaponId;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int ItemId;//[Offset: 0x8, Size: 4]
};

class BattleItemPickupAfterLand
{
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	BattleItemPickupInfo PickupInfo;//[Offset: 0x18, Size: 64]
	enum Reason;//[Offset: 0x58, Size: 1]
	enum BattleItemClientPickupType;//[Offset: 0x59, Size: 1]
};

class BattleItemPickupInfo
{
	Object* Source;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 32]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
};

class BattleItemUseTarget
{
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	int TargetAssociationType;//[Offset: 0x18, Size: 4]
	Actor* TargetActor;//[Offset: 0x1c, Size: 4]
};

class SpecialPickInfo
{
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]
};

class IncNetArray
{
	NetArrayUnit[] IncArray;//[Offset: 0x0, Size: 12]
};

class NetArrayUnit
{
	BattleItemNet Unit;//[Offset: 0x0, Size: 64]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
};

class BattleItemNet
{
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	enum ItemStoreArea;//[Offset: 0x1d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x2c, Size: 12]
	int Durability;//[Offset: 0x38, Size: 4]
};

class BattleItemData.ItemData
{
	int Count;//[Offset: 0x48, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50, Size: 12]
	int Durability;//[Offset: 0x5c, Size: 4]
	enum ItemStoreArea;//[Offset: 0x60, Size: 1]
	BattleItemFeatureData FeatureData;//[Offset: 0x64, Size: 44]
	ItemAssociation[] Associations;//[Offset: 0x90, Size: 12]
};

class ItemData
{
	ItemDefineID DefineID;//[Offset: 0x8, Size: 24]
	FString Name;//[Offset: 0x20, Size: 12]
	FString Desc;//[Offset: 0x2c, Size: 12]
	FString Icon;//[Offset: 0x38, Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44, Size: 4]
};

class BattleItemFeatureData
{
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	int CountLimit;//[Offset: 0x8, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemAttrsFlag;//[Offset: 0x14, Size: 4]
	int SortingPriority;//[Offset: 0x18, Size: 4]
	int Worth;//[Offset: 0x1c, Size: 4]
	int ItemCapacity;//[Offset: 0x20, Size: 4]
	int ItemDurability;//[Offset: 0x24, Size: 4]
	int itemType;//[Offset: 0x28, Size: 4]
};

class SpectatorComponent.LuaActorComponent.ActorComponent.Object
{
	bool bCheckNetSaturate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	float CheckNetSaturateInterval;//[Offset: 0x150, Size: 4]
	float ReportNetSaturateInterval;//[Offset: 0x154, Size: 4]
	delegate OnServerSpectatorChange;//[Offset: 0x184, Size: 12]
	int MinExtraLocDeviceLevel;//[Offset: 0x190, Size: 4]
	uint32 MinTotalMemInGB;//[Offset: 0x194, Size: 4]
	float ExtraRadius;//[Offset: 0x198, Size: 4]
	float MinDisFromMyLoc;//[Offset: 0x19c, Size: 4]
	float MinDisFromExtraLoc;//[Offset: 0x1a0, Size: 4]
	float DelayReportTime;//[Offset: 0x1a4, Size: 4]
	float MaxDeltaReceiveTime;//[Offset: 0x1a8, Size: 4]
	int64 MinDeltaUTCTime;//[Offset: 0x1b0, Size: 8]
	uint64 MinDeltaFrameNum;//[Offset: 0x1b8, Size: 8]
	int MaxInvalidCnt;//[Offset: 0x1c4, Size: 4]
};

class AIControllerCachedData
{
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 4]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool TargetIsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	STExtraPlayerController* CacheNearPlayerController;//[Offset: 0x2c, Size: 4]
	STExtraBaseCharacter* CacheDeliveryActingTarget;//[Offset: 0x30, Size: 4]
};

class AIShootMissInfo
{
	float MissMaxRangeTime;//[Offset: 0x0, Size: 4]
	float MissMinRangeTime;//[Offset: 0x4, Size: 4]
	float MissCDTime;//[Offset: 0x8, Size: 4]
	float MissResetTime;//[Offset: 0xc, Size: 4]
	float MissResetConfig;//[Offset: 0x10, Size: 4]
	bool bCanMissShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
};

class AIConditionHearingComponent.ActorComponent.Object
{
	SoundShieldForAI* CurrentSoundShield;//[Offset: 0xc4, Size: 8]
};

class SoundShieldForAI.Actor.Object
{
	Actor*[] PlayerPawns;//[Offset: 0x310, Size: 12]
	Actor*[] AIPawns;//[Offset: 0x31c, Size: 12]
	int MaxCacheNum;//[Offset: 0x328, Size: 4]
};

class AIParachuteJumpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
{
	Vector FocusTargetPos;//[Offset: 0xcc, Size: 12]
	enum JumpStrategy;//[Offset: 0xd8, Size: 1]
	float JumpTime;//[Offset: 0xdc, Size: 4]
	bool bUseSpecificInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bOpenParachuteNotClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	bool bLandingPhaseSetControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 1]
	bool bOpenDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 1]
	float TargetDistanceThresholdForInput;//[Offset: 0xe4, Size: 4]
	float MoveForwardInputValue;//[Offset: 0xe8, Size: 4]
	float MoveRightInputValue;//[Offset: 0xec, Size: 4]
	float ClearFocusHeight;//[Offset: 0xf0, Size: 4]
	float OpenParachuteHeight;//[Offset: 0xf4, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0xf8, Size: 4]
	FString TargetCityName;//[Offset: 0xfc, Size: 12]
	float TargetDistance2Route;//[Offset: 0x108, Size: 4]
	int CityLevel;//[Offset: 0x10c, Size: 4]
	float Deviation;//[Offset: 0x110, Size: 4]
	int[] Groups;//[Offset: 0x114, Size: 12]
	int AIStyle;//[Offset: 0x120, Size: 4]
	float ChangeTargetHeight;//[Offset: 0x128, Size: 4]
	Vector ChangeTargetPos;//[Offset: 0x12c, Size: 12]
	bool bTargetPosChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	int PlayerNumThresholdForChangeTarget;//[Offset: 0x13c, Size: 4]
	float AroundPlayerRange;//[Offset: 0x140, Size: 4]
	int CheckChangeTargetRemainTimes;//[Offset: 0x144, Size: 4]
	float TickShowDebugInfoDeltaTime;//[Offset: 0x148, Size: 4]
	float CurTickShowDebugInfoTime;//[Offset: 0x14c, Size: 4]
	Color DebugLineColor;//[Offset: 0x150, Size: 4]
	float JumpTimePassed;//[Offset: 0x154, Size: 4]
	STExtraPlayerCharacter* FollowTarget;//[Offset: 0x158, Size: 4]
	float FollowDelayTime;//[Offset: 0x15c, Size: 4]
	float ForwardDelayTime;//[Offset: 0x160, Size: 4]
	bool IsSmoothFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	float TurnVelocity;//[Offset: 0x168, Size: 4]
	bool JumpFromFixedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	Vector JumpPoint;//[Offset: 0x170, Size: 12]
};

class AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
{
};

class STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
{
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x2de8, Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x2df4, Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x2e00, Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x2e0c, Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x2e18, Size: 12]
	delegate OnNewWeaponDelegate;//[Offset: 0x2e24, Size: 12]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x2e30, Size: 12]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x2e3c, Size: 12]
	delegate OnParachuteStateChanged;//[Offset: 0x2e48, Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x2e54, Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x2e58, Size: 4]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x2e5c, Size: 12]
	delegate HandleParachuteStateChangedOver;//[Offset: 0x2e68, Size: 12]
	BoxComponent* BoxEar;//[Offset: 0x2e74, Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x2e78, Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x2e7c, Size: 4]
	float IndoorCheckDistance;//[Offset: 0x2e80, Size: 4]
	float IndoorCheckTime;//[Offset: 0x2e84, Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x2e88, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x2e8c, Size: 4]
	class CameraShake* VehicleHitSimpleCharacterShaker;//[Offset: 0x2e90, Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e94, Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x2e98, Size: 4]
	float fTickDuration;//[Offset: 0x2e9c, Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x2ea0, Size: 24]
	class PlayerGunCollosionComp* PlayerGunCollisionComponentClass;//[Offset: 0x2eb8, Size: 4]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ebc, Size: 1]
	bool IgnoreGliderOneTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ebd, Size: 1]
	enum ParachuteState;//[Offset: 0x2ecc, Size: 1]
	bool bClientParachuteLandedFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2eec, Size: 1]
	float LandDistanceCanAjustWhenParachuteLanded;//[Offset: 0x2ef0, Size: 4]
	float CheckCanLandMaxSeconds;//[Offset: 0x2f14, Size: 4]
	unsigned char MoveUploadTimeout;//[Offset: 0x2f1c, Size: 1]
	float DSParachuteLandedFinishTimeMax;//[Offset: 0x2f28, Size: 4]
	bool bIsPendingCaptived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2c, Size: 1]
	enum LastParachuteState;//[Offset: 0x2f2d, Size: 1]
	enum LastHandleParachuteState;//[Offset: 0x2f2e, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x2f30, Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f34, Size: 1]
	float SwimZDir;//[Offset: 0x2f38, Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3c, Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3d, Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x2f40, Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x2f44, Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x2f48, Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x2f4c, Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x2f50, Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x2f54, Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x2f58, Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x2f5c, Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x2f60, Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x2f64, Size: 4]
	AkAudioEvent* AK_ParachuteLocalOverride;//[Offset: 0x2f68, Size: 4]
	AkAudioEvent* AK_ParachuteRemoteOverride;//[Offset: 0x2f6c, Size: 4]
	AkAudioEvent* AK_LandingLocalOverride;//[Offset: 0x2f70, Size: 4]
	AkAudioEvent* AK_LandingRemotelOverride;//[Offset: 0x2f74, Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x2f78, Size: 80]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x2fc8, Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x3018, Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x3068, Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x30d0, Size: 4]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d4, Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d5, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x30d8, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x30dc, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e0, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x30ec, Size: 4]
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x30f0, Size: 1408]
	float CameraInfoAdditiveWeight;//[Offset: 0x3670, Size: 4]
	SpringArmParams DefaultFreeFallSpringArmParam;//[Offset: 0x3678, Size: 80]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x36c8, Size: 4]
	bool bEnableCheckAttachedOrDetachedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36cc, Size: 1]
	bool bUsingVehicleParachuteProp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e3, Size: 1]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e4, Size: 1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e5, Size: 1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x36e8, Size: 4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36ec, Size: 1]
	enum GoldenSuitSlot;//[Offset: 0x36ed, Size: 1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x36f0, Size: 4]
	float GoldenSuitCheckDelta;//[Offset: 0x36f4, Size: 4]
	float GoldenSuitTestFistDamage;//[Offset: 0x36f8, Size: 4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x36fc, Size: 72]
	FName FeatureActorName;//[Offset: 0x3760, Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3768, Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3769, Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376a, Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x376c, Size: 4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x3778, Size: 4]
	InteractiveComponentBase*[] InteractiveComponentList;//[Offset: 0x3780, Size: 12]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378c, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378d, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x378e, Size: 2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x3790, Size: 4]
	int TrySightCorrectionTime;//[Offset: 0x379c, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x37a0, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a4, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a5, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x37a8, Size: 4]
	bool ForceSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37b4, Size: 1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37bc, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x37c0, Size: 12]
	int CurrentActivityID;//[Offset: 0x37cc, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x37d0, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x37d4, Size: 4]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d8, Size: 1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x37e0, Size: 16]
	int[] InjuryFreeData;//[Offset: 0x37f0, Size: 12]
	float RecentlyGunADSOrProneTimeThresholdInSeconds;//[Offset: 0x3854, Size: 4]
	bool bAllowToInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590c, Size: 1]
};

class WeaponAutoAimingComponent.ActorComponent.Object
{
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xd0, Size: 32]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xf0, Size: 32]
	Vector2D AimTargetScreenPos;//[Offset: 0x110, Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	STExtraPlayerController* ExtraPlayerController;//[Offset: 0x11c, Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x120, Size: 4]
	float LastSelectAimEnemyTime;//[Offset: 0x124, Size: 4]
	float LastFindAimEnemyTime;//[Offset: 0x128, Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x12c, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x130, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x134, Size: 4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x138, Size: 4]
	float OPEN_COLLISION_TIME;//[Offset: 0x13c, Size: 4]
	float AIM_CROSSHAIR_CHECK_DELTA;//[Offset: 0x140, Size: 4]
	float LOCK_TARGET_TOLERANCE;//[Offset: 0x144, Size: 4]
	float RANGE_SCALE;//[Offset: 0x148, Size: 4]
	float RANGE_SCALE_MAX;//[Offset: 0x14c, Size: 4]
	float AC_AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x16c, Size: 4]
	float AC_AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x170, Size: 4]
	float AC_DEFAULT_CD_TIME;//[Offset: 0x174, Size: 4]
	float AC_SCOPE_AUTO_AIM_TIME;//[Offset: 0x178, Size: 4]
	float AC_RANGE_SCALE;//[Offset: 0x17c, Size: 4]
	float AC_RANGE_SCALE_MAX;//[Offset: 0x180, Size: 4]
	float AC_AutoAimBreakThroughRatio;//[Offset: 0x184, Size: 4]
	FName[] AC_Bones;//[Offset: 0x188, Size: 12]
	FName[] Bones;//[Offset: 0x194, Size: 12]
	<FName,Vector> BonesOffset;//[Offset: 0x1a0, Size: 60]
	float TargetScreenWidth;//[Offset: 0x1dc, Size: 4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	float AutoAimSensitiveScreenRatio;//[Offset: 0x1e4, Size: 4]
	bool bEnableAimSensitiveOnlyInGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	float AutoAimSensitiveAngle;//[Offset: 0x1ec, Size: 4]
	float AutoAimBreakThroughAngle;//[Offset: 0x1f0, Size: 4]
	float AutoAimBreakThroughRatio;//[Offset: 0x1f4, Size: 4]
	float AutoAimBreakThroughStart;//[Offset: 0x1f8, Size: 4]
	float AutoAimBreakThroughSensitiveScale;//[Offset: 0x1fc, Size: 4]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool bModifyCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	WeaponCrossHairPerformData[] CrossHairDataRifle;//[Offset: 0x3c8, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataPistol;//[Offset: 0x3d4, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataShotGun;//[Offset: 0x3e0, Size: 12]
};

class AutoAimEnemyInfo
{
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x18, Size: 8]
};

class STScreenAppearanceComponent.ActorComponent.Object
{
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xfc, Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0x100, Size: 12]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x10c, Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x110, Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x11c, Size: 12]
	FName ScreenPlane;//[Offset: 0x128, Size: 8]
	bool FollwCameraManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x134, Size: 12]
	delegate OnPlayScreenAppearance;//[Offset: 0x140, Size: 12]
	delegate OnStopScreenAppearance;//[Offset: 0x14c, Size: 12]
	delegate OnPlayScreenParticle;//[Offset: 0x158, Size: 12]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x164, Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x170, Size: 4]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x180, Size: 12]
};

class AppearanceMatData
{
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	float LifeSpan;//[Offset: 0xc, Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44, Size: 4]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x50, Size: 48]
	FName MatInstParamName;//[Offset: 0x80, Size: 8]
	CurveFloat* ParamCurve;//[Offset: 0x88, Size: 4]
};

class MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
{
};

class AppearanceMeshData
{
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 4]
};

class ScreenParticleEffectData
{
	unsigned char EffectType;//[Offset: 0x0, Size: 1]
	FString ScreenParticleEffectName;//[Offset: 0x4, Size: 12]
	ParticleSystem* ParticleEffect;//[Offset: 0x10, Size: 40]
	FName ParticleParamName;//[Offset: 0x38, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x40, Size: 12]
	Vector ScreenParticleEffectLoc;//[Offset: 0x4c, Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x58, Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bNeedReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	float CurrentParamValue;//[Offset: 0x60, Size: 4]
	unsigned char DisableDeviceLevel;//[Offset: 0x64, Size: 1]
};

class MltAppearanceMatData
{
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	FName AppearanceTag;//[Offset: 0x10, Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 4]
	float MatialAlpha;//[Offset: 0x54, Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58, Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c, Size: 4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	float GradualFrag;//[Offset: 0x64, Size: 4]
	float DelayTime;//[Offset: 0x68, Size: 4]
};

class MultiAppearanceMeshData
{
	StaticMeshComponent* MultiAppearanceMesh;//[Offset: 0x0, Size: 4]
};

class NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	Transform TPPRelativeTransform;//[Offset: 0x7c0, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x7f0, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x820, Size: 48]
};

class PlayerGunCollosionComp.ActorComponent.Object
{
	float DetectInterval;//[Offset: 0xc4, Size: 4]
	int DetectThreshold;//[Offset: 0xc8, Size: 4]
	float FoldFactor;//[Offset: 0xcc, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xd0, Size: 4]
	Vector BoxHalfSize;//[Offset: 0xdc, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe8, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xf4, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0x100, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x10c, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x118, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x11c, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x128, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x134, Size: 12]
	int FoldFactorDelt;//[Offset: 0x140, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x144, Size: 4]
	int TraceDis;//[Offset: 0x148, Size: 4]
	float TickDeltTime;//[Offset: 0x14c, Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	float OBPitchLimitRangeMin;//[Offset: 0x154, Size: 4]
	float OBPitchLimitRangeMax;//[Offset: 0x158, Size: 4]
	Actor*[] SweepIgnoreActors;//[Offset: 0x160, Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
};

class CustomParticleSystemComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	Actor*[] CollisionIgnoreActors;//[Offset: 0x8d4, Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
};

class SpringArmParams
{
	CameraParams CameraParam;//[Offset: 0x0, Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 4]
	FName ParentSocketName;//[Offset: 0x10, Size: 8]
	float TargetArmALength;//[Offset: 0x18, Size: 4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 12]
	Vector TargetOffset;//[Offset: 0x28, Size: 12]
	Vector RelativeLocation;//[Offset: 0x34, Size: 12]
	float ProbeSize;//[Offset: 0x40, Size: 4]
	unsigned char ProbeChannel;//[Offset: 0x44, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
};

class CameraParams
{
	float FieldOfView;//[Offset: 0x0, Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
};

class AirAttackLocatorComponent.ActorComponent.Object
{
	float AALOpenMotionSensibility;//[Offset: 0xc4, Size: 4]
	float AALOpenSensibility;//[Offset: 0xc8, Size: 4]
	float OpenAALFOV;//[Offset: 0xcc, Size: 4]
	int MaxDist;//[Offset: 0xd0, Size: 4]
	int minDist;//[Offset: 0xd4, Size: 4]
	int DangerDist;//[Offset: 0xd8, Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xe0, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x108, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x130, Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x134, Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x138, Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x140, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x144, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x148, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x14c, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x150, Size: 4]
	float ShortDis;//[Offset: 0x154, Size: 4]
	unsigned char ChannelType;//[Offset: 0x158, Size: 1]
	Vector TargetLocation;//[Offset: 0x15c, Size: 12]
};

class AirAttackLocatorCalledActor.Pawn.Actor.Object
{
	float DestoryTime;//[Offset: 0x354, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x358, Size: 4]
	int SkillID;//[Offset: 0x35c, Size: 4]
	int IconID;//[Offset: 0x360, Size: 4]
	float AttackAreaRadius;//[Offset: 0x364, Size: 4]
};

class FanPickerConfigData
{
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float CapsuleRadius;//[Offset: 0x8, Size: 4]
	Vector Offset;//[Offset: 0xc, Size: 12]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsHeadJudgeWithoutOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 12]
	bool bForwardHitAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	enum PickerType;//[Offset: 0x2d, Size: 1]
	enum PickerTargetType;//[Offset: 0x2e, Size: 1]
	int PickerMaxCount;//[Offset: 0x30, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Actor*[] IgnoreTargets;//[Offset: 0x3c, Size: 12]
};

class ActivityAnimationRepData
{
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 4]
};

class InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
{
	delegate OnAllowToInteract;//[Offset: 0x150, Size: 16]
	delegate OnAllowToClickButton;//[Offset: 0x160, Size: 16]
	delegate OnInteractionEffective;//[Offset: 0x170, Size: 16]
	delegate OnClientShowInteractiveUI;//[Offset: 0x180, Size: 12]
	delegate OnServerAddOrDeleteComponent;//[Offset: 0x18c, Size: 12]
	delegate OnServerClickInteractiveButton;//[Offset: 0x198, Size: 12]
	delegate OnServerRPCSetOccupied;//[Offset: 0x1a4, Size: 12]
	delegate OnStartCoolDown;//[Offset: 0x1b0, Size: 12]
	delegate OnRepOccupied;//[Offset: 0x1bc, Size: 12]
	delegate OnRepCoolDown;//[Offset: 0x1c8, Size: 12]
	delegate OnRepCurrentCharacter;//[Offset: 0x1d4, Size: 12]
	delegate OnRepCurrentCharacterArray;//[Offset: 0x1e0, Size: 12]
	delegate OnRepEnabled;//[Offset: 0x1ec, Size: 12]
	delegate OnAllowToInteractFailed;//[Offset: 0x1f8, Size: 12]
	delegate OnHideUIWhenOverlapping;//[Offset: 0x204, Size: 12]
	delegate OnResetSkillAction;//[Offset: 0x210, Size: 12]
	delegate OnStartedSkillAction;//[Offset: 0x21c, Size: 12]
	delegate OnFinishedSkillAction;//[Offset: 0x228, Size: 12]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x234, Size: 4]
	PrimitiveComponent*[] PrimitiveComponentArray;//[Offset: 0x238, Size: 12]
	Character* OccupyingCharacter;//[Offset: 0x244, Size: 8]
	Character*[] OccupyingCharacterArray;//[Offset: 0x24c, Size: 12]
	bool bIsCooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	int CoolDownLeftTimeForShow;//[Offset: 0x25c, Size: 4]
	bool bOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	FName PrimitiveComponentTag;//[Offset: 0x268, Size: 8]
	int CollisionsNum;//[Offset: 0x270, Size: 4]
	bool bCanInteractMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bShowedMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	bool bOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 1]
	bool bCheckBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 1]
	int CheckBlockCharacterIncrement;//[Offset: 0x278, Size: 4]
	int CheckBlockActorIncrement;//[Offset: 0x27c, Size: 4]
	bool bCanInteractInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bCanInteractWhenNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bCanInteractInCarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	bool bCanInteractInBeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 1]
	bool bCanAIInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool bAllowWhenCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	int TipsIdWhenClickedInCoolDown;//[Offset: 0x288, Size: 4]
	float CoolDownTime;//[Offset: 0x28c, Size: 4]
	float MaxOccupyingTime;//[Offset: 0x290, Size: 4]
	int MaxOccupyingCharacterNum;//[Offset: 0x294, Size: 4]
	int TLogKey;//[Offset: 0x298, Size: 4]
	bool bTLogCountReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	bool bNotUseOverlapTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 1]
	Volume* CustomTriggerVolume;//[Offset: 0x2a0, Size: 4]
	int DebugParameter;//[Offset: 0x2a4, Size: 4]
	int SkillID;//[Offset: 0x2a8, Size: 4]
	bool bResetSkillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	float LoadingDuration;//[Offset: 0x2b0, Size: 4]
	SoftObjectPath LoadingIcon;//[Offset: 0x2b8, Size: 24]
	AnimMontage* FPS_AnimMontage_Stand;//[Offset: 0x2d0, Size: 40]
	AnimMontage* FPS_AnimMontage_Crouch;//[Offset: 0x2f8, Size: 40]
	AnimMontage* FPS_AnimMontage_Prone;//[Offset: 0x320, Size: 40]
	AnimMontage* FPS_AnimMontage_Vehicle;//[Offset: 0x348, Size: 40]
	AnimMontage* TPS_AnimMontage_Stand;//[Offset: 0x370, Size: 40]
	AnimMontage* TPS_AnimMontage_Crouch;//[Offset: 0x398, Size: 40]
	AnimMontage* TPS_AnimMontage_Prone;//[Offset: 0x3c0, Size: 40]
	AnimMontage* TPS_AnimMontage_Vehicle;//[Offset: 0x3e8, Size: 40]
};

class AngledSightRepData
{
	unsigned char AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
};

class ActicityDisallowedData
{
	enum[] DisallowedStates;//[Offset: 0x0, Size: 12]
	int ActivityID;//[Offset: 0xc, Size: 4]
};

class WarteringAreaCPP.UAERegionActor.LuaActor.Actor.Object
{
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x3f0, Size: 12]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x3fc, Size: 12]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x408, Size: 12]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x418, Size: 12]
	float CurrentScale;//[Offset: 0x424, Size: 4]
	int CurActTime;//[Offset: 0x428, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x42c, Size: 12]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	FName SocketBaseTags;//[Offset: 0x440, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x448, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x44c, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x450, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x454, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x458, Size: 12]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x464, Size: 12]
	int AttachedNumber;//[Offset: 0x474, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x478, Size: 60]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x4b4, Size: 12]
	Vector[] DropOffLocations;//[Offset: 0x4cc, Size: 12]
	enum DropOffLocationType;//[Offset: 0x4d8, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d9, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x4dc, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x4e0, Size: 12]
	unsigned char IsDayTime;//[Offset: 0x4ec, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x4f0, Size: 12]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x4fd, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x500, Size: 12]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
};

class UAERegionActor.LuaActor.Actor.Object
{
	unsigned char AutoDormancyType;//[Offset: 0x3a0, Size: 1]
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	enum RegionSize;//[Offset: 0x3a2, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
};

class BunnyDanceSyncData
{
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]
};

class SocketAttachmentInternalData
{
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 4]
	Actor* AttachedPlayer;//[Offset: 0xc, Size: 4]
	Vector OffsetLoc;//[Offset: 0x10, Size: 12]
	Rotator OffsetRot;//[Offset: 0x1c, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x28, Size: 4]
};

class SocketAttachmentNameTable
{
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 4]
};

class SkeletalAnimationSyncData
{
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 4]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
};

class PlayerRoleCacheFrameData
{
};

class AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
{
	float OccludeBuildingActorByRemoveTime;//[Offset: 0x104, Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x108, Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x10c, Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x110, Size: 4]
};

class AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
{
	<int,int> CanBuildActorNums;//[Offset: 0xec, Size: 60]
	float TotalCD;//[Offset: 0x128, Size: 4]
	float SoloCD;//[Offset: 0x12c, Size: 4]
};

class AIFeatureInfo
{
	float HP;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]
	float TakeDamageScale;//[Offset: 0x8, Size: 4]
	int DropID;//[Offset: 0xc, Size: 4]
	float[] HitRates;//[Offset: 0x10, Size: 12]
	<int,float> ThrownUsingProbability;//[Offset: 0x1c, Size: 60]
	<float,float> EnemyHpHitRateMap;//[Offset: 0x58, Size: 60]
	<float,float> EnemyHpDamageRateMap;//[Offset: 0x94, Size: 60]
	<float,float> ReviveEnemyHpDamageRateMap;//[Offset: 0xd0, Size: 60]
	bool bNeedNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bHasDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	Vector2D MissOnPurposeTimeRange;//[Offset: 0x110, Size: 8]
	Vector2D OutViewMissOnPurposeTimeRange;//[Offset: 0x118, Size: 8]
	float MissOnPurposeCD;//[Offset: 0x120, Size: 4]
	float MissOnPurposeResetTime;//[Offset: 0x124, Size: 4]
	float MissOnPurposeHitRate;//[Offset: 0x128, Size: 4]
	float NearDeathTargetStopFireTime;//[Offset: 0x12c, Size: 4]
	float NearDeathTargetFixedHitRate;//[Offset: 0x130, Size: 4]
	bool bDoMissOnPurposeWhenNearDeathToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	float NearDeathTargetFixedDamageRate;//[Offset: 0x138, Size: 4]
	float SenseRadiusScale;//[Offset: 0x13c, Size: 4]
};

class AIActingItem
{
	float StartSeconds;//[Offset: 0x0, Size: 4]
	float EndSeconds;//[Offset: 0x4, Size: 4]
	float DeadPercent;//[Offset: 0x8, Size: 4]
	int PlayerNumScale;//[Offset: 0xc, Size: 4]
	bool IsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int[] WeaponIdList;//[Offset: 0x14, Size: 12]
	int FinalRestBotNum;//[Offset: 0x20, Size: 4]
};

class AIBeginAttackEachOther
{
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]
};

class DeliveryRatingConfig
{
	float DeliveryInterval;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]
};

class AIDeliveryAreaLimit
{
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]
};

class DeliveryCondition
{
	DeliveryConditionCheck* CheckCnd;//[Offset: 0x0, Size: 4]
};

class DeliveryConditionCheck.Object
{
	STExtraBaseCharacter* TargetPawn;//[Offset: 0x1c, Size: 4]
};

class SpecialAIDeliveryNumContainer
{
	int TeammateNum;//[Offset: 0x0, Size: 4]
	SpecialAIDeliveryNum[] DeliverNumCfg;//[Offset: 0x4, Size: 12]
};

class SpecialAIDeliveryNum
{
	int DeliveryNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]
};

class HotValueAttenuation
{
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]
};

class HotValueScale
{
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]
};

class AIRatingDamage
{
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float SpecialRatingDamageScale;//[Offset: 0x4, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x8, Size: 4]
	float SpecialFiringAccuracyRadius;//[Offset: 0xc, Size: 4]
	int AIFeedLimit;//[Offset: 0x10, Size: 4]
	float SectionRightValue;//[Offset: 0x14, Size: 4]
};

class AIAttackAIRatingDamage
{
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]
};

class DeliveryPlayerConfig
{
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 12]
	float RightRatingSection;//[Offset: 0xc, Size: 4]
};

class DeliveryItem
{
	int percent;//[Offset: 0x0, Size: 4]
	int DeliveryNum;//[Offset: 0x4, Size: 4]
};

class AIAttackAnimalRatingDamage
{
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]
};

class CirleAreaVolume.Actor.Object
{
	BoxComponent* CircleBoxArea;//[Offset: 0x310, Size: 4]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bFixMayBeInOcean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	FName AvoidObjectTag;//[Offset: 0x318, Size: 8]
	Vector2D PointInsidePolygon;//[Offset: 0x320, Size: 8]
	Vector2D[] PolygonPointArray;//[Offset: 0x328, Size: 12]
};

class CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
{
	FString LuaFilePath;//[Offset: 0x14c, Size: 12]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	bool bUseDIYCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 1]
	int CustomBeginIndex;//[Offset: 0x15c, Size: 4]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x164, Size: 12]
	float DestinyThreshold;//[Offset: 0x170, Size: 4]
	int RoundNum;//[Offset: 0x174, Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	Vector2D LowProbCenter;//[Offset: 0x17c, Size: 8]
	float LowProbCenterRadius;//[Offset: 0x184, Size: 4]
	float LowProbRatio;//[Offset: 0x188, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	class Actor* InnerCircleClass;//[Offset: 0x190, Size: 4]
	float TimeForForbidMakePain;//[Offset: 0x194, Size: 4]
	Actor* InnerCircle;//[Offset: 0x198, Size: 4]
	Vector InnerCircleInfo;//[Offset: 0x19c, Size: 12]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	Vector BlueCircle;//[Offset: 0x1d4, Size: 12]
	Vector WhiteCircle;//[Offset: 0x1e0, Size: 12]
	int CurrentIndex;//[Offset: 0x1ec, Size: 4]
	Actor* ContainActor;//[Offset: 0x1f0, Size: 4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	CirCleCfg[] TempCircleConfigs;//[Offset: 0x264, Size: 12]
	delegate OnCircleBegin;//[Offset: 0x2b4, Size: 12]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x2c0, Size: 12]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x2cc, Size: 12]
	delegate OnCircleInfoChanged;//[Offset: 0x2d8, Size: 12]
	delegate OnWaveEnded;//[Offset: 0x2e4, Size: 12]
	delegate OnCircleEnded;//[Offset: 0x2f0, Size: 12]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x2fc, Size: 4]
	bool bPreCalculateFirstWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	delegate OnFinishedPreCalculateFirstWhiteCircle;//[Offset: 0x304, Size: 12]
};

class TimerRegistComponent.ActorComponent.Object
{
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xc8, Size: 12]
	FString TimerName;//[Offset: 0xd4, Size: 12]
};

class CirCleCfg
{
	int CircleID;//[Offset: 0x0, Size: 4]
	float DelayTime;//[Offset: 0x4, Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 4]
	bool bIsCircleWarningUseFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float[] BlueCirclePreWarning;//[Offset: 0x14, Size: 12]
	CircleWarningConfig[] BlueCirclePreWarningWithFilter;//[Offset: 0x20, Size: 12]
	float LastTime;//[Offset: 0x2c, Size: 4]
	float Pain;//[Offset: 0x30, Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector2D bluepoint;//[Offset: 0x38, Size: 8]
	float blueradius;//[Offset: 0x40, Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	Actor* CustomWhiteActor;//[Offset: 0x48, Size: 4]
	bool bUseCustomWhiteStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	Vector[] Whitepoints;//[Offset: 0x50, Size: 12]
	float whiteradius;//[Offset: 0x5c, Size: 4]
	float Alpha;//[Offset: 0x60, Size: 4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float DestinyChance;//[Offset: 0x68, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x70, Size: 4]
	float ExtraRadius;//[Offset: 0x74, Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	float DamageMagnifierRange;//[Offset: 0x7c, Size: 4]
	float DamageMagnifier;//[Offset: 0x80, Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x84, Size: 4]
	Vector[] AvoidPoints;//[Offset: 0x88, Size: 12]
	float EdgeDistance;//[Offset: 0x94, Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
};

class CircleWarningConfig
{
	float WarningTime;//[Offset: 0x0, Size: 4]
	enum WarningState;//[Offset: 0x4, Size: 1]
};

class RegisterTimer
{
	int waveIndex;//[Offset: 0x0, Size: 4]
	float[] Times;//[Offset: 0x4, Size: 12]
};

class AIActingBPAssit.Object
{
};

class MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	int FirstAddBulletID;//[Offset: 0x108, Size: 4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0x10c, Size: 12]
	delegate OnFirstBulletChangeDelegate;//[Offset: 0x118, Size: 12]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0x128, Size: 24]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x140, Size: 4]
};

class SupportUpBullet
{
	int UpBulletID;//[Offset: 0x0, Size: 4]
	int DefaultPriority;//[Offset: 0x4, Size: 4]
};

class GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x108, Size: 4]
	float BulletSpeed;//[Offset: 0x10c, Size: 4]
	int CurBulletNum;//[Offset: 0x110, Size: 4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	int MaxBulletNumInClip;//[Offset: 0x118, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x120, Size: 24]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x13c, Size: 12]
	class CameraShake* ShootCameraShake;//[Offset: 0x148, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x14c, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x150, Size: 4]
	float CameraShakFalloff;//[Offset: 0x154, Size: 4]
	AkAudioEvent* ShootSound;//[Offset: 0x158, Size: 4]
	float ReloadTime;//[Offset: 0x15c, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x160, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x164, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x168, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x16c, Size: 4]
	BackpackComponent* OwnerBackPack;//[Offset: 0x170, Size: 4]
};

class EnergyAccumulateShootComponent.NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	float StartAccMinThreshold;//[Offset: 0x8b0, Size: 4]
	float ReachMaxAccTime;//[Offset: 0x8b4, Size: 4]
	int BulletNumPerShoot;//[Offset: 0x8b8, Size: 4]
	int BulletImpactDamageEnergy;//[Offset: 0x8bc, Size: 4]
	float MaxOffsetShootDegree;//[Offset: 0x8c0, Size: 4]
	int BulletNumPerShootMaxEnergy;//[Offset: 0x8c4, Size: 4]
	int ComsumeBulletNumPerShootMaxEnergy;//[Offset: 0x8c8, Size: 4]
	int BulletImpactDamageMaxEnergy;//[Offset: 0x8cc, Size: 4]
	class STExtraShootWeaponBulletBase* EnergyBulletTemplate;//[Offset: 0x8d0, Size: 4]
	class STExtraShootWeaponBulletBase* MaxEnergyBulletTemplate;//[Offset: 0x8d4, Size: 4]
	unsigned char PreShootWeaponStateToChange;//[Offset: 0x8d8, Size: 1]
	bool bSpawnBulletOnSimulateClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d9, Size: 1]
	float CurAccEnergyPercent;//[Offset: 0x8dc, Size: 4]
	Actor*[] NormalBulletCacheList;//[Offset: 0x91c, Size: 12]
	Actor*[] EnergyBulletCacheList;//[Offset: 0x928, Size: 12]
	Actor*[] MaxEnergyBulletCacheList;//[Offset: 0x934, Size: 12]
};

class NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	float AutoRecoverShootLockInterval;//[Offset: 0x7a0, Size: 4]
	bool bUseBulletCachePool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x7a8, Size: 56]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x7e0, Size: 12]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	float CurShootLockInterval;//[Offset: 0x7f4, Size: 4]
	float ShooterSpeedPrediction;//[Offset: 0x7f8, Size: 4]
};

class STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	Actor*[] BulletCacheList;//[Offset: 0x788, Size: 12]
};

class NormalProjectileVerifyConfig
{
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bVerifyImpactPointDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	float VerifyWeaponFireInfoTimeTorelate;//[Offset: 0x24, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x2c, Size: 4]
	bool bVerifyMuzzleBlockTail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bVerifyBulletPosReverseDirBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	float VerifyTailExtend;//[Offset: 0x34, Size: 4]
};

class FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	float UpGasSpeed;//[Offset: 0x108, Size: 4]
	float DownGasSpeed;//[Offset: 0x10c, Size: 4]
	float CostGasOneShoot;//[Offset: 0x110, Size: 4]
	float MaxGas;//[Offset: 0x114, Size: 4]
	float GasAddDamageRate;//[Offset: 0x118, Size: 4]
	float MaxGasAngle;//[Offset: 0x11c, Size: 4]
	float PostFillGasTime;//[Offset: 0x120, Size: 4]
	float GasUpdateInterval;//[Offset: 0x124, Size: 4]
	int CurGas;//[Offset: 0x128, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x12c, Size: 4]
};

class BulletInClip
{
	int CurBulletNumInClip;//[Offset: 0x0, Size: 4]
	BulletInWeapon[] CurBulletIDList;//[Offset: 0x4, Size: 12]
};

class BulletInWeapon
{
	int BulletID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
};

class FireWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
{
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x134, Size: 4]
	Pawn* WeaponOwner;//[Offset: 0x158, Size: 4]
	bool OpenPressBtnStay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
};

class WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
{
	delegate OnBeginState;//[Offset: 0x108, Size: 12]
	delegate OnEndState;//[Offset: 0x114, Size: 12]
	bool bCanEnterAnyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	unsigned char FreshWeaponStateType;//[Offset: 0x122, Size: 1]
	unsigned char[] ConditionGateMap;//[Offset: 0x124, Size: 12]
	unsigned char SpesificTargetState;//[Offset: 0x130, Size: 1]
	bool bSyncSpesificStateToServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
};

class ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x158, Size: 60]
	AkAudioEvent* GunAdsShootSound;//[Offset: 0x194, Size: 4]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x198, Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x19c, Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x1a0, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x1a4, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x1a8, Size: 4]
	float CameraShakFalloff;//[Offset: 0x1ac, Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2, Size: 1]
	bool bFixedMuzzleFXScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3, Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x1b4, Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x1b8, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x1c4, Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x1c8, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x1d4, Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x1d8, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x1e4, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x1f4, Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x1f8, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x204, Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x208, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x214, Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x218, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x224, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x234, Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x238, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x244, Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x248, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x254, Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x258, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x264, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x274, Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x278, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x284, Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x288, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x294, Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x298, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x2a8, Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x2ac, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x2b8, Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x2bc, Size: 12]
	float ShootLightCD;//[Offset: 0x2c8, Size: 4]
	float LastShootLightTime;//[Offset: 0x2cc, Size: 4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x2d0, Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x2d4, Size: 4]
	float MaxFlyAngel;//[Offset: 0x2d8, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x2dc, Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x2e0, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2e4, Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x2e8, Size: 4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x2ec, Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x2f8, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x304, Size: 4]
	float LastMuzzleEffectTime;//[Offset: 0x308, Size: 4]
	float MuzzleEffectTimeInterval;//[Offset: 0x30c, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x320, Size: 12]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	Rotator ShellDropRot;//[Offset: 0x330, Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x340, Size: 8]
	bool bSimulateBulletOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float bSimulateBulletMaxDistance;//[Offset: 0x34c, Size: 4]
	float SnipperStayDistance;//[Offset: 0x350, Size: 4]
	float bSimulateBulletRadius;//[Offset: 0x354, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
};

class WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	<unsigned char,AkAudioEvent*> SoundDataMap;//[Offset: 0x108, Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0x144, Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x148, Size: 4]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x14c, Size: 4]
	AkAudioEvent* ScopeSound;//[Offset: 0x150, Size: 4]
	AkAudioEvent* ScopeOutSound;//[Offset: 0x154, Size: 4]
};

class FXDistancaScaleStruct
{
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]
};

class OBEffectBullet.Actor.Object
{
	float MaxMovingTime;//[Offset: 0x310, Size: 4]
	bool bIgnoreEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x318, Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x328, Size: 4]
	float CurMovingTime;//[Offset: 0x354, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x358, Size: 4]
};

class AttrModifyComponent.ActorComponent.Object
{
	int ConfigAutoAddAttId;//[Offset: 0x178, Size: 4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x1f8, Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0x204, Size: 4]
	RepAttributeModify DynamicModifierRep;//[Offset: 0x260, Size: 16]
	RepAttributeModify DynamicModifierRepOnlyOwner;//[Offset: 0x270, Size: 16]
	delegate OnAttrModified;//[Offset: 0x294, Size: 12]
	delegate OnAttrRemoved;//[Offset: 0x2a0, Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x2ac, Size: 124]
	AttributeExpand[] AttributeExpands;//[Offset: 0x364, Size: 12]
	bool bAddReserveNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x374, Size: 60]
	enum ActorAttrType;//[Offset: 0x3b0, Size: 1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x478, Size: 12]
	delegate OnNeedSetSpeedOverLimit;//[Offset: 0x54c, Size: 12]
	AttrModifyRecordItem[] ExceptionAttrModifyRecords_DS;//[Offset: 0x614, Size: 12]
	AttrModifyRecordItem[] ExceptionAttrModifyRecords_Client;//[Offset: 0x620, Size: 12]
};

class AttrModifyItem
{
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 12]
	FString AttrModifyItemName;//[Offset: 0xc, Size: 12]
	FString AttrName;//[Offset: 0x18, Size: 12]
	int AttrId;//[Offset: 0x24, Size: 4]
	int CompareId;//[Offset: 0x28, Size: 4]
	enum ModifierOp;//[Offset: 0x2c, Size: 1]
	float ModifierValue;//[Offset: 0x30, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
};

class CacheAffactTargetInfo
{
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	float FinalAddValue;//[Offset: 0x8, Size: 4]
	uint32 CModifyUid;//[Offset: 0xc, Size: 4]
};

class RepAttributeModify
{
};

class AttrDynamicModifier
{
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 60]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c, Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78, Size: 4]
};

class AttrDynamicModifyTarget
{
	AttrDynamicModifyItem[] List;//[Offset: 0x8, Size: 12]
};

class AttrDynamicModifyItem
{
	Object* Causer;//[Offset: 0x18, Size: 8]
};

class AttrDynamicModifyConfig
{
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	FString AttrName;//[Offset: 0x4, Size: 12]
	FString LimitAttrName;//[Offset: 0x10, Size: 12]
	FString MaxAttrName;//[Offset: 0x1c, Size: 12]
};

class AttributeExpand
{
	FString AttrName;//[Offset: 0x0, Size: 12]
	FString AttrDesc;//[Offset: 0xc, Size: 12]
	int RelateTypeId;//[Offset: 0x18, Size: 4]
	FString RelateGroup;//[Offset: 0x1c, Size: 12]
	float Value;//[Offset: 0x28, Size: 4]
	int nValue;//[Offset: 0x2c, Size: 4]
	unsigned char bValue;//[Offset: 0x30, Size: 1]
};

class RelateAttributeGroup
{
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 60]
};

class ModAttrSimulateSyncItem
{
	int AttrId;//[Offset: 0x0, Size: 4]
	float FinalValue;//[Offset: 0x4, Size: 4]
};

class AttrModifyRecordItem
{
	AttrDesc AttrDesc;//[Offset: 0x0, Size: 20]
	AttrModifyRecordDetails[] DetailsArray;//[Offset: 0x14, Size: 12]
};

class AttrDesc
{
	FString AttrName;//[Offset: 0x0, Size: 12]
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float CurValue;//[Offset: 0x10, Size: 4]
};

class AttrModifyRecordDetails
{
	FString ModifyDesc;//[Offset: 0x0, Size: 12]
	int NextIndex;//[Offset: 0xc, Size: 4]
	AttrModifyRecordDetail[] Data;//[Offset: 0x10, Size: 12]
};

class AttrModifyRecordDetail
{
	float PreModifyValue;//[Offset: 0x0, Size: 4]
	float AfterModifyValue;//[Offset: 0x4, Size: 4]
	float WorldTime;//[Offset: 0x8, Size: 4]
	int ModifyType;//[Offset: 0xc, Size: 4]
};

class WeaponAttrModifyConfig
{
	int ID;//[Offset: 0x0, Size: 4]
	FString ModifyConfigID;//[Offset: 0x4, Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x10, Size: 12]
};

class WeaponAttrModifyData
{
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]
};

class WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
{
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x108, Size: 8]
	float ShootRateCheckInterval;//[Offset: 0x128, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x130, Size: 4]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x134, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x178, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x17c, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x180, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x184, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x188, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x18c, Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x190, Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x194, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x19c, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x1a0, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x1a4, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x1ac, Size: 4]
	float TolerateFlyTime;//[Offset: 0x1b0, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1b4, Size: 4]
	float DeCon6SpanTime;//[Offset: 0x274, Size: 4]
};

class SimulateBulletHitInfoData
{
	Vector_NetQuantize10 ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize10 ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	unsigned char SurfaceType;//[Offset: 0x30, Size: 1]
	Actor* Actor;//[Offset: 0x34, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x3c, Size: 8]
	unsigned char HitBodyType;//[Offset: 0x44, Size: 1]
	unsigned char ImpactEffectMask;//[Offset: 0x45, Size: 1]
};

class ReplayStartFireInfo
{
	StartFireInfo ClientStartFire;//[Offset: 0x0, Size: 24]
	enum DsLastRequestFireRet;//[Offset: 0x18, Size: 1]
	uint32 DsNextFireMiniShootID;//[Offset: 0x1c, Size: 4]
	uint32 DsCurClipID;//[Offset: 0x20, Size: 4]
	int DsCurClipNum;//[Offset: 0x24, Size: 4]
	int ClientRequestClipNum;//[Offset: 0x28, Size: 4]
};

class StartFireInfo
{
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	unsigned char ShootMode;//[Offset: 0xc, Size: 1]
	unsigned char ShootType;//[Offset: 0xd, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	int StartFireID;//[Offset: 0x14, Size: 4]
};

class BulletHitInfoUploadDataInReplay
{
	enum VertifyRes;//[Offset: 0x0, Size: 1]
	enum VertifySubType;//[Offset: 0x1, Size: 1]
	BulletHitInfoUploadData UploadData;//[Offset: 0x8, Size: 216]
	CharacterHistoryData VictimHistoryData;//[Offset: 0xe0, Size: 160]
	ShootTimeData ShootTimeData;//[Offset: 0x180, Size: 160]
	uint32 CurrentUserCmdSequence;//[Offset: 0x220, Size: 4]
	uint32 UniqueId;//[Offset: 0x224, Size: 4]
	float VictimNewestTimeStamp;//[Offset: 0x228, Size: 4]
	float ShooterPing;//[Offset: 0x22c, Size: 4]
	float VictimPing;//[Offset: 0x230, Size: 4]
	enum[] StatData;//[Offset: 0x234, Size: 12]
};

class CharacterHistoryData
{
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	Rotator VehicleRotation;//[Offset: 0x60, Size: 12]
	Vector VehicleRotVelocity;//[Offset: 0x6c, Size: 12]
	bool VehicleIsCorrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bUseServerWorldTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	Vector Velocity;//[Offset: 0x7c, Size: 12]
	uint32 UserCmdSequenceNew;//[Offset: 0x88, Size: 4]
	uint32 UserCmdSequenceOld;//[Offset: 0x8c, Size: 4]
	uint32 LastAckBadMoveSequence;//[Offset: 0x90, Size: 4]
	float MoveServerTimeNew;//[Offset: 0x94, Size: 4]
	float MoveServerTimeOld;//[Offset: 0x98, Size: 4]
	unsigned char PoseStateNew;//[Offset: 0x9c, Size: 1]
	unsigned char PoseStateOld;//[Offset: 0x9d, Size: 1]
	enum MoveBaseState;//[Offset: 0x9e, Size: 1]
};

class ShootTimeData
{
	Vector_NetQuantize ShootPos;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	unsigned char CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	float SkeletonLength;//[Offset: 0x34, Size: 4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 64]
	uint32 UserCmdSequence;//[Offset: 0x80, Size: 4]
	unsigned char ShootTimeConDelta;//[Offset: 0x84, Size: 1]
	float ShootLevelTime;//[Offset: 0x88, Size: 4]
	Vector_NetQuantize GunTailPos;//[Offset: 0x8c, Size: 12]
	unsigned char ShotFlags;//[Offset: 0x98, Size: 1]
};

class Vector_NetQuantizeNormalSv.Vector
{
};

class ShootTimeInfo_NetQuantize
{
};

class NextFireMinShootDataInReplay
{
	uint32 NextFireMinShootID;//[Offset: 0x0, Size: 4]
	BulletHitInfoUploadData UploadData;//[Offset: 0x8, Size: 216]
};

class SACData
{
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 12]
	BulletHitInfoUploadBinaray[] HitBinarayArray;//[Offset: 0xc, Size: 12]
	BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray;//[Offset: 0x18, Size: 12]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0x24, Size: 12]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x30, Size: 12]
	unsigned char[] CopmpressBinarayData;//[Offset: 0x3c, Size: 12]
	uint32[] CopmpressBinaraySectionLen;//[Offset: 0x48, Size: 12]
	int ShootTimes;//[Offset: 0x54, Size: 4]
	unsigned char[] TssSdkAntiData;//[Offset: 0x58, Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0x64, Size: 4]
	int NetworkStatus;//[Offset: 0x68, Size: 4]
	int Sequence;//[Offset: 0x6c, Size: 4]
};

class BulletHitInfoUploadBinaray
{
	unsigned char[] Data;//[Offset: 0x0, Size: 12]
	uint16 CompensationTime;//[Offset: 0xc, Size: 2]
	Actor* Actor;//[Offset: 0x10, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x18, Size: 8]
};

class BulletHitInfoWithoutDamage
{
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	unsigned char SurfaceType;//[Offset: 0x30, Size: 1]
	uint32 ShootID;//[Offset: 0x34, Size: 4]
	Actor* Actor;//[Offset: 0x38, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x40, Size: 8]
	unsigned char HitBodyType;//[Offset: 0x48, Size: 1]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	unsigned char ImpactEffectMask;//[Offset: 0x4a, Size: 1]
};

class LocalShootHitData
{
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	unsigned char bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 12]
	int AutoAimSpeed;//[Offset: 0x64, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x68, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x70, Size: 4]
};

class CameraOffsetData
{
	Vector SocketOffset;//[Offset: 0x0, Size: 12]
	Vector TargetOffset;//[Offset: 0xc, Size: 12]
	float SpringArmLength;//[Offset: 0x18, Size: 4]
	float AdditiveOffsetFov;//[Offset: 0x1c, Size: 4]
	float FixedFov;//[Offset: 0x20, Size: 4]
	float BeginInterpSpeed;//[Offset: 0x24, Size: 4]
	float EndInterpSpeed;//[Offset: 0x28, Size: 4]
};

class GrenadePredictLine.Actor.Object
{
	Vector HighThrowOffset;//[Offset: 0x310, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x31c, Size: 12]
	unsigned char ThrowMode;//[Offset: 0x328, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x32c, Size: 4]
	float MaxSimTime;//[Offset: 0x330, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x334, Size: 40]
	float GrenadeRadius;//[Offset: 0x35c, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x360, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x36c, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x378, Size: 12]
};

class GrenadePredictResult
{
	Vector[] SplinePoints;//[Offset: 0x0, Size: 12]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector HitActorLocation;//[Offset: 0x10, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x1c, Size: 12]
};

class WeaponSyncData
{
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]
};

class WeaponOverHeatingComponent.WeaponLogicBaseComponent.ActorComponent.Object
{
	float MaxTemperature;//[Offset: 0x108, Size: 4]
	float MinShootInterval;//[Offset: 0x10c, Size: 4]
	float CoolDownSpeed;//[Offset: 0x110, Size: 4]
	float HeatingSpeedPerBullet;//[Offset: 0x114, Size: 4]
	float CoolDownDelay;//[Offset: 0x118, Size: 4]
	float CurrentTemperature;//[Offset: 0x11c, Size: 4]
	CurveFloat* ShootIntervalScaleCurve;//[Offset: 0x120, Size: 4]
	FName MuzzleEffectParam;//[Offset: 0x128, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x130, Size: 4]
};

class VHSeatCharacterCameraOffsetData
{
	bool bAttachAtRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector SocketOffset;//[Offset: 0x4, Size: 12]
	Vector TargetOffset;//[Offset: 0x10, Size: 12]
	float SpringArmLength;//[Offset: 0x1c, Size: 4]
};

class STExtraVehicleWeaponsOnSeat
{
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 12]
	int[] BorrowedSeat;//[Offset: 0xc, Size: 12]
};

class STExtraVehicleAttachment
{
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 4]
};

class VehicleAttachmentBase.Actor.Object
{
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	float HitSelfModifier;//[Offset: 0x324, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x328, Size: 4]
	float HitOthersModifier;//[Offset: 0x32c, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x330, Size: 4]
	float HitCharacterModifier;//[Offset: 0x334, Size: 4]
};

class VehicleDamageComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
{
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x150, Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x154, Size: 4]
	float ImpactModifier;//[Offset: 0x158, Size: 4]
	float ImpactAbsorption;//[Offset: 0x15c, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0x160, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0x164, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x168, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x16c, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x170, Size: 4]
	class Actor[] HitIgnoreClasses;//[Offset: 0x174, Size: 12]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x184, Size: 4]
	float PushCharacterRightVectorStrength;//[Offset: 0x188, Size: 4]
	float PushCharacterTopVectorStrength;//[Offset: 0x18c, Size: 4]
	float ApplyImpluseSpeed;//[Offset: 0x190, Size: 4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x194, Size: 60]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x1d0, Size: 4]
	float DamageCharacterCD;//[Offset: 0x1d4, Size: 4]
	float PassengerProtectTime;//[Offset: 0x1d8, Size: 4]
	float DamageSelfCD;//[Offset: 0x1e0, Size: 4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	float HitDamageSelfMaxFactor;//[Offset: 0x1ec, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x1f0, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x1f8, Size: 4]
	float DamageReduce;//[Offset: 0x1fc, Size: 4]
	float fHitEventInterval;//[Offset: 0x200, Size: 4]
	delegate OnVehicleHitOthers;//[Offset: 0x208, Size: 12]
	bool bEnableVehicleExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	bool bShouldPlayExplosionEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 1]
	float ExplosionBaseDamage;//[Offset: 0x218, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x21c, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x220, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x224, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x228, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x22c, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x230, Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x238, Size: 4]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x23c, Size: 60]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x27c, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x284, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x290, Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x2d4, Size: 4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x2d8, Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x2e0, Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x2e8, Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x2ec, Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x2f0, Size: 4]
	float DotProductRearThreshold;//[Offset: 0x2f4, Size: 4]
	float ImpactModifierFront;//[Offset: 0x2f8, Size: 4]
	float ImpactModifierRear;//[Offset: 0x2fc, Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x300, Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x304, Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x308, Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x310, Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x314, Size: 4]
	bool bDebugVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x31c, Size: 60]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	float CustomImpulseCooldownTime;//[Offset: 0x35c, Size: 4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x360, Size: 60]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x39c, Size: 32]
	float OverlapPushSimpleCharacterMinSpeed;//[Offset: 0x3bc, Size: 4]
	float OverlapHitSimpleCharacterMinSpeed;//[Offset: 0x3c0, Size: 4]
	float ServerValidateDistance;//[Offset: 0x3c4, Size: 4]
	Vector DefaultVehicleHitBoxExtent;//[Offset: 0x3c8, Size: 12]
	<enum,Vector> VehicleHitBoxExtents;//[Offset: 0x3d4, Size: 60]
	float ResponseSimpleCharacterRate;//[Offset: 0x410, Size: 4]
	float ResponseSimpleCharacterAccumulate;//[Offset: 0x414, Size: 4]
};

class RigidBodyState
{
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	unsigned char Flags;//[Offset: 0x38, Size: 1]
};

class VehicleCustomImpulse
{
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 12]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0xc, Size: 12]
	class DamageType* DamageType;//[Offset: 0x18, Size: 4]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
};

class VehicleCustomImpulseFilter
{
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 4]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0x8, Size: 4]
	float MaxImpulseDamage;//[Offset: 0xc, Size: 4]
	float ImpulseStrength;//[Offset: 0x10, Size: 4]
	float RadialImpulseStrength;//[Offset: 0x14, Size: 4]
	float ImpulseRadius;//[Offset: 0x18, Size: 4]
	unsigned char ImpulseFalloffType;//[Offset: 0x1c, Size: 1]
};

class VehicleCommonComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
{
	delegate VehicleHPChangedDelegate;//[Offset: 0x150, Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x15c, Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x168, Size: 12]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x174, Size: 12]
	delegate OnHPPreChange;//[Offset: 0x180, Size: 12]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x18c, Size: 12]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x198, Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	<int,float> DamageFactor;//[Offset: 0x1a8, Size: 60]
	float HPMax;//[Offset: 0x1e4, Size: 4]
	float HP;//[Offset: 0x1e8, Size: 4]
	<enum,float> DamageScaleMap;//[Offset: 0x1ec, Size: 60]
	bool ShowHealthUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	int UGCHUDStatus;//[Offset: 0x22c, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x230, Size: 12]
	bool CanMaintained;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool CanGasCan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 1]
	float FuelMax;//[Offset: 0x240, Size: 4]
	float Fuel;//[Offset: 0x244, Size: 4]
	bool bCanOilInStation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool ShowFuelUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	int FuelIntervalCount;//[Offset: 0x24c, Size: 4]
	float DelayDestroySeconds;//[Offset: 0x254, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x258, Size: 4]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x25c, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x26c, Size: 12]
	VehicleDamageRecord[] DamageRecords;//[Offset: 0x278, Size: 12]
};

class MaterialDamage
{
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]
};

class STExtraVehicleWheelHP
{
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]
};

class VehicleDamageRecord
{
	Controller* Instigator;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int DamageType;//[Offset: 0xc, Size: 4]
	int AdditionalParam;//[Offset: 0x10, Size: 4]
};

class BuoyancyForceComponent.SceneComponent.ActorComponent.Object
{
	delegate OnContactWater;//[Offset: 0x2c0, Size: 12]
	delegate OnEnterWater;//[Offset: 0x2cc, Size: 12]
	bool bUseBuoyancyEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	OceanManager* OceanManager;//[Offset: 0x2dc, Size: 4]
	float MeshDensity;//[Offset: 0x2e0, Size: 4]
	float FluidDensity;//[Offset: 0x2e4, Size: 4]
	float FluidLinearDamping;//[Offset: 0x2e8, Size: 4]
	float FluidAngularDamping;//[Offset: 0x2ec, Size: 4]
	Vector VelocityDamper;//[Offset: 0x2f0, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x300, Size: 4]
	float TestPointRadius;//[Offset: 0x304, Size: 4]
	Vector[] TestPoints;//[Offset: 0x308, Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	bool SnapToSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x318, Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x324, Size: 12]
	bool bEnableZOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 1]
	float StayUprightStiffness;//[Offset: 0x334, Size: 4]
	float StayUprightDamping;//[Offset: 0x338, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x33c, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x34c, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x350, Size: 4]
	unsigned char TickGroup;//[Offset: 0x354, Size: 1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x358, Size: 12]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x364, Size: 12]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x510, Size: 4]
};

class OceanManager.Actor.Object
{
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	Vector GlobalWaveDirection;//[Offset: 0x314, Size: 12]
	float GlobalWaveSpeed;//[Offset: 0x320, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x324, Size: 4]
	float DistanceCheckAbove;//[Offset: 0x328, Size: 4]
	float DistanceCheckBelow;//[Offset: 0x32c, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x330, Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x33c, Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x348, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	float ModulationStartHeight;//[Offset: 0x350, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x354, Size: 4]
	float ModulationPower;//[Offset: 0x358, Size: 4]
	Landscape* Landscape;//[Offset: 0x35c, Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x360, Size: 4]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x388, Size: 12]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x39c, Size: 12]
	Vector[] WaterBoxExtends;//[Offset: 0x3a8, Size: 12]
};

class WaveParameter
{
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]
};

class WaveSetParameters
{
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]
};

class Landscape.LandscapeProxy.Actor.Object
{
};

class LandscapeProxy.Actor.Object
{
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x330, Size: 4]
	Guid LandscapeGuid;//[Offset: 0x334, Size: 16]
	Guid BoundingGuid;//[Offset: 0x344, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x354, Size: 8]
	int MaxLODLevel;//[Offset: 0x35c, Size: 4]
	float LODDistanceFactor;//[Offset: 0x360, Size: 4]
	unsigned char LODFalloff;//[Offset: 0x364, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x368, Size: 4]
	float LODDistributionSetting;//[Offset: 0x36c, Size: 4]
	unsigned char NearMaxLOD_Baked;//[Offset: 0x370, Size: 1]
	float NearFactor_Baked;//[Offset: 0x374, Size: 4]
	float NearExtent_Baked;//[Offset: 0x378, Size: 4]
	float FarFactor_Baked;//[Offset: 0x37c, Size: 4]
	float LandscapeRoughness;//[Offset: 0x380, Size: 4]
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	float[] ImproveLODValues;//[Offset: 0x388, Size: 12]
	unsigned char NearMaxLOD;//[Offset: 0x394, Size: 1]
	float NearFactor;//[Offset: 0x398, Size: 4]
	float NearExtent;//[Offset: 0x39c, Size: 4]
	float FarFactor;//[Offset: 0x3a0, Size: 4]
	int StaticLightingLOD;//[Offset: 0x3a4, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x3a8, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x3ac, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b0, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x3b4, Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x3b8, Size: 4]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x3bc, Size: 60]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x3fc, Size: 12]
	float MinGrassWeightThreshold;//[Offset: 0x408, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x40c, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x410, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x414, Size: 4]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x418, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x420, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x428, Size: 12]
	LandscapeAOTextureDataAsset* LandscapeAOTextureDataAsset;//[Offset: 0x434, Size: 4]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x438, Size: 12]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x444, Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	float StaticLightingResolution;//[Offset: 0x49c, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a0, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a0, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4a0, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x4a1, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a2, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a2, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x4a4, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4a8, Size: 24]
	int CollisionMipLevel;//[Offset: 0x4c0, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x4c4, Size: 4]
	float CollisionThickness;//[Offset: 0x4c8, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x4d0, Size: 320]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x610, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x610, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x610, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x614, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x618, Size: 4]
	int NumSubsections;//[Offset: 0x61c, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x620, Size: 1]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x620, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x621, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x622, Size: 1]
	bool bUseLandscapeVT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x623, Size: 1]
	Texture2D* MaskTextureUsedByGrassClear;//[Offset: 0x624, Size: 4]
};

class LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x684, Size: 12]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x690, Size: 12]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x69c, Size: 12]
};

class LandscapeSplineControlPoint.Object
{
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	float Width;//[Offset: 0x34, Size: 4]
	float SideFalloff;//[Offset: 0x38, Size: 4]
	float EndFalloff;//[Offset: 0x3c, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40, Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c, Size: 12]
	Box Bounds;//[Offset: 0x58, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74, Size: 4]
};

class LandscapeSplineConnection
{
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
};

class LandscapeSplineSegment.Object
{
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20, Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40, Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54, Size: 12]
	Box Bounds;//[Offset: 0x60, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c, Size: 12]
};

class LandscapeSplineSegmentConnection
{
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 4]
	float TangentLen;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]
};

class LandscapeSplineInterpPoint
{
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]
};

class ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
};

class LandscapeGrassType.Object
{
	GrassVariety[] GrassVarieties;//[Offset: 0x1c, Size: 12]
	StaticMesh* GrassMesh;//[Offset: 0x28, Size: 4]
	float GrassDensity;//[Offset: 0x2c, Size: 4]
	float PlacementJitter;//[Offset: 0x30, Size: 4]
	int StartCullDistance;//[Offset: 0x34, Size: 4]
	int EndCullDistance;//[Offset: 0x38, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
};

class GrassVariety
{
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 4]
	float GrassDensity;//[Offset: 0x4, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float PlacementJitter;//[Offset: 0xc, Size: 4]
	int StartCullDistance;//[Offset: 0x10, Size: 4]
	int EndCullDistance;//[Offset: 0x14, Size: 4]
	int MinLOD;//[Offset: 0x18, Size: 4]
	enum Scaling;//[Offset: 0x1c, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x20, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x28, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x30, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3b, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
};

class FloatInterval
{
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]
};

class LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	int SectionBaseX;//[Offset: 0x684, Size: 4]
	int SectionBaseY;//[Offset: 0x688, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x68c, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x690, Size: 4]
	int NumSubsections;//[Offset: 0x694, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x698, Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x69c, Size: 4]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x6a0, Size: 60]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x6dc, Size: 24]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f4, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x6f8, Size: 12]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x704, Size: 12]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x710, Size: 60]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x74c, Size: 12]
	Texture2D*[] WeightmapTextures;//[Offset: 0x758, Size: 12]
	int VisibilityLayerChannel;//[Offset: 0x764, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x768, Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x770, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x780, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x790, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x7a0, Size: 4]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x7a4, Size: 60]
	FString VisibleVisibilityLayer;//[Offset: 0x7e0, Size: 12]
	Box CachedLocalBox;//[Offset: 0x7ec, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x808, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x824, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x834, Size: 12]
	int CollisionMipLevel;//[Offset: 0x840, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x844, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x848, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x84c, Size: 4]
	float StaticLightingResolution;//[Offset: 0x850, Size: 4]
	int ForcedLOD;//[Offset: 0x854, Size: 4]
	int LODBias;//[Offset: 0x858, Size: 4]
	int MobileVertexHoleMaxLOD;//[Offset: 0x85c, Size: 4]
	float[] LODDeltaVertex;//[Offset: 0x86c, Size: 12]
	float MaxDeltaVertex;//[Offset: 0x878, Size: 4]
	Guid stateID;//[Offset: 0x87c, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x88c, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x89c, Size: 4]
	FString OccluderMeshDataPath;//[Offset: 0x8a0, Size: 12]
	unsigned char MobileBlendableLayerMask;//[Offset: 0x8ac, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x8b0, Size: 4]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x8b4, Size: 60]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x8f0, Size: 12]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x8fc, Size: 4]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x900, Size: 1]
	uint16[] CachedHeightData;//[Offset: 0x904, Size: 12]
	bool bUseLandscapeVT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	bool bLandscapeVTNeedHeightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 1]
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x958, Size: 1]
	FName UsedOtherMaterialName;//[Offset: 0x970, Size: 8]
};

class OverridePhyxMaterial
{
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 12]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc, Size: 12]
};

class MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
{
};

class WeightmapLayerAllocationInfo
{
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 4]
	unsigned char WeightmapTextureIndex;//[Offset: 0x4, Size: 1]
	unsigned char WeightmapTextureChannel;//[Offset: 0x5, Size: 1]
};

class LandscapeLayerInfoObject.Object
{
	FName LayerName;//[Offset: 0x20, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28, Size: 4]
	float Hardness;//[Offset: 0x2c, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30, Size: 16]
};

class VisibilityData
{
	unsigned char[] VisibilityData;//[Offset: 0x0, Size: 12]
};

class LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x684, Size: 12]
	int SectionBaseX;//[Offset: 0x690, Size: 4]
	int SectionBaseY;//[Offset: 0x694, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x698, Size: 4]
	float CollisionScale;//[Offset: 0x69c, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x6a0, Size: 4]
	unsigned char[] CollisionQuadFlags;//[Offset: 0x6a4, Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x6b0, Size: 16]
	Box CachedLocalBox;//[Offset: 0x6c0, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x6dc, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x704, Size: 12]
};

class LandscapeAOTextureDataAsset.DataAsset.Object
{
	uint32 DataSize;//[Offset: 0x20, Size: 4]
	unsigned char[] LandscapeAOPlatformData;//[Offset: 0x24, Size: 12]
};

class HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	int[] SortedInstances;//[Offset: 0x8a8, Size: 12]
	int NumBuiltInstances;//[Offset: 0x8b4, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x8bc, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x8d8, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x8f4, Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x900, Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90c, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x92c, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x930, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x954, Size: 4]
};

class InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x7b4, Size: 12]
	int InstancingRandomSeed;//[Offset: 0x7c0, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x7c4, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x7c8, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x7cc, Size: 12]
	int[] RemovedInstances;//[Offset: 0x7d8, Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e5, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x844, Size: 4]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x848, Size: 60]
	int NumPendingLightmaps;//[Offset: 0x888, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x88c, Size: 12]
};

class InstancedStaticMeshInstanceData
{
	Matrix Transform;//[Offset: 0x0, Size: 64]
};

class PhysicsSerializer.Object
{
};

class InstancedStaticMeshMappingInfo
{
};

class StructBoneOverride
{
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]
};

class WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	float AcceptHigherZ;//[Offset: 0x6a0, Size: 4]
	Vector Direction;//[Offset: 0x6a4, Size: 12]
	float SpeedValue;//[Offset: 0x6b0, Size: 4]
	float WaveForceMultiplier;//[Offset: 0x6b4, Size: 4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x6b8, Size: 12]
	float TimeScaleOffset;//[Offset: 0x6c4, Size: 4]
	float Offset;//[Offset: 0x6c8, Size: 4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	float SpeedAttenuationFromSpline;//[Offset: 0x6d0, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	float ZOffset;//[Offset: 0x6d8, Size: 4]
	float CellSizeX;//[Offset: 0x6dc, Size: 4]
	float CellSizeY;//[Offset: 0x6e0, Size: 4]
	<float,WaterBoxCell> Cells;//[Offset: 0x6e4, Size: 60]
	int KeyFactor;//[Offset: 0x720, Size: 4]
};

class TrippleWaveParameter
{
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 20]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 20]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 20]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 8]
};

class WaveAdjust
{
	float TimeScaleOffset;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]
};

class WaterBoxCell
{
	Vector WaveDirection;//[Offset: 0x0, Size: 12]
	float WaveZ;//[Offset: 0xc, Size: 4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 12]
	float Speed;//[Offset: 0x1c, Size: 4]
};

class PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
{
	Actor* ConstraintActor1;//[Offset: 0x2c0, Size: 4]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2c8, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x2d0, Size: 4]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2d8, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x2f0, Size: 4]
	delegate OnConstraintBroken;//[Offset: 0x2f4, Size: 12]
	ConstraintInstance ConstraintInstance;//[Offset: 0x300, Size: 416]
};

class ConstrainComponentPropName
{
	FName ComponentName;//[Offset: 0x0, Size: 8]
};

class VehicleSyncComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
{
	delegate OnActorHit;//[Offset: 0x150, Size: 12]
	delegate OnActorHitFromClient;//[Offset: 0x15c, Size: 12]
	float MinCorrectionInterval;//[Offset: 0x168, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x16c, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x170, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x174, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0x178, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0x17c, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x180, Size: 4]
	float AllowMaxLandDiffSqAtServer;//[Offset: 0x184, Size: 4]
	float AllowMaxLinearSpeedRatio;//[Offset: 0x188, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x18c, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x190, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x194, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x198, Size: 4]
	float MinCorrectionDistanceSqAtClientLessDrag;//[Offset: 0x19c, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x1a0, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x1a4, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x1a8, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x1ac, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	float StaticFixLocation;//[Offset: 0x1b4, Size: 4]
	float StaticFixAngel;//[Offset: 0x1b8, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x1bc, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x1c0, Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c6, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c7, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x1c8, Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x1cc, Size: 4]
	float MaxAllowJumpHeight;//[Offset: 0x1d0, Size: 4]
	float MaxSyncSpeedZDelta;//[Offset: 0x1d4, Size: 4]
	float MaxSyncSpeedZDeltaStep1;//[Offset: 0x1d8, Size: 4]
	ClientSmoothCorrection ClientSmoothData;//[Offset: 0x1dc, Size: 52]
	STExtraVehicleBase* VehicleOwner;//[Offset: 0x230, Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x36c, Size: 60]
	VehicleHitRewindThreshold VehicleHitRewindThreshold;//[Offset: 0x3e8, Size: 24]
	bool bEnableValidateVelNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	float VelZThreshold_ValidateGround;//[Offset: 0x404, Size: 4]
	float GroundSinTolerance;//[Offset: 0x408, Size: 4]
	VehicleStuntComponent* VehicleStunt;//[Offset: 0x500, Size: 4]
};

class ClientSmoothCorrection
{
	float ConfigSmoothSeconds;//[Offset: 0x4, Size: 4]
	float ConfigSmoothMinDistanceSq;//[Offset: 0x8, Size: 4]
	float ConfigSmoothMaxDistanceSq;//[Offset: 0xc, Size: 4]
};

class VehicleSyncPostPhysxTick.TickFunction
{
};

class VehicleHitRewindThreshold
{
	float ValidDeltaSeconds;//[Offset: 0x0, Size: 4]
	float VehicleRewindDistance;//[Offset: 0x4, Size: 4]
	float VehicleRewindAngle;//[Offset: 0x8, Size: 4]
	float VelocitySize;//[Offset: 0xc, Size: 4]
	float AngularVelocityInDegreesSize;//[Offset: 0x10, Size: 4]
	float HitCharacterDistance;//[Offset: 0x14, Size: 4]
};

class VehicleStuntComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
{
	bool bIsHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bEnableJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	delegate OnVehicleJump;//[Offset: 0x15c, Size: 12]
	int[] DisabledWheelsWhenJump;//[Offset: 0x168, Size: 12]
	float DelayToEnableWheelsAfterJump;//[Offset: 0x174, Size: 4]
	int[] LandedWheelsWhenJump;//[Offset: 0x178, Size: 12]
	CurveFloat* JumpSpeedCurve;//[Offset: 0x184, Size: 4]
	CurveFloat* PitchCurveWhenJump;//[Offset: 0x188, Size: 4]
	float MaxJumpDuration;//[Offset: 0x18c, Size: 4]
	bool bEnableSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	float SprintDuration;//[Offset: 0x1ac, Size: 4]
	VehicleSprintProxyBase* SprintProxy;//[Offset: 0x1b0, Size: 4]
	float ServerSprintFactor;//[Offset: 0x1b4, Size: 4]
};

class VehicleSprintProxyBase.Object
{
};

class LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
{
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool GM_VerifyProjectileBulletPosBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	float TolDistanceBulletPosNoBlock;//[Offset: 0xc8, Size: 4]
	float TolDistanceBulletPosBlock;//[Offset: 0xcc, Size: 4]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool bVerifyMuzzleImpactDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool bVerifyMuzzleImpactDirIgnoreCrawl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool bVerifyShootPosInHistory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bVerifyMuzzleLocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool bVerifyShooterHead2PosIsBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool bVerifyClientPreCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	int TolerateMuzzleAndCharacterDisSquare;//[Offset: 0xe4, Size: 4]
	int TolerateMuzzleAndVehicleDisSquare;//[Offset: 0xe8, Size: 4]
	float TolerateShootPointDistanceSqured;//[Offset: 0xec, Size: 4]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0xf0, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xf4, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0xf8, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0xfc, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x100, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x104, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x108, Size: 4]
	float MaxGunPosLength;//[Offset: 0x10c, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x110, Size: 4]
	float TolerateOwnerAndBulletDist;//[Offset: 0x114, Size: 4]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x118, Size: 16]
	float TolerateBulletDirCheckDistance;//[Offset: 0x128, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x12c, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x134, Size: 4]
	float TolerateShootRange;//[Offset: 0x138, Size: 4]
	float TolerateHitDataDelayTime;//[Offset: 0x13c, Size: 4]
	float TolerateHitDataDelayTimeShootCorner;//[Offset: 0x140, Size: 4]
	PingDifVerifyStr[] PingDifVerifyData;//[Offset: 0x144, Size: 12]
	PingDifVerifyStr[] PingDifVerifyDataAI;//[Offset: 0x150, Size: 12]
	VictimPingVerifyStr[] VictimPingVerifyData;//[Offset: 0x15c, Size: 12]
	VictimPingVerifyStr[] VictimPingVerifyDataAI;//[Offset: 0x168, Size: 12]
	float VerifyMuzImpDirIgnoreDis;//[Offset: 0x174, Size: 4]
	float TolMuzImpDir2BulletDir;//[Offset: 0x178, Size: 4]
	float TolMuzImpDir2ControlRot;//[Offset: 0x17c, Size: 4]
	int VerifyMuzImpDirRecordTime;//[Offset: 0x180, Size: 4]
	float TolShootPos2History;//[Offset: 0x184, Size: 4]
	float TolShootPos2History2;//[Offset: 0x188, Size: 4]
	int VerifyShootPosInHistoryRecordTime;//[Offset: 0x18c, Size: 4]
	bool VerifyMuzzleLocusIgnoreFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool VerifyMuzzleLocusIgnoreShotGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	float VerifyMuzzleLocusIgnoreDis;//[Offset: 0x194, Size: 4]
	float TolMuzLocusXMin;//[Offset: 0x198, Size: 4]
	float TolMuzLocusXMax;//[Offset: 0x19c, Size: 4]
	float TolMuzLocusYMin;//[Offset: 0x1a0, Size: 4]
	float TolMuzLocusYMax;//[Offset: 0x1a4, Size: 4]
	float TolMuzLocusZMin;//[Offset: 0x1a8, Size: 4]
	float TolMuzLocusZMax;//[Offset: 0x1ac, Size: 4]
	float TolMuzLocusLengthMax;//[Offset: 0x1b0, Size: 4]
	float TolHead2ShootPosLength3;//[Offset: 0x1b4, Size: 4]
	float TolHead2ShootPosLength4;//[Offset: 0x1b8, Size: 4]
	float TolGun2ShootPosLength1;//[Offset: 0x1bc, Size: 4]
	float TolGun2ShootPosLength2;//[Offset: 0x1c0, Size: 4]
	float VerifyRecentMovementTorelateTime;//[Offset: 0x1c4, Size: 4]
	int VerifyRecentMovementTorelateNum1;//[Offset: 0x1c8, Size: 4]
	int VerifyRecentMovementTorelateNum2;//[Offset: 0x1cc, Size: 4]
	float ShootCornerMinLagTime;//[Offset: 0x1d0, Size: 4]
	float ShootCornerMaxDotValue;//[Offset: 0x1d4, Size: 4]
	float ShootCornerMinPingDiff;//[Offset: 0x1d8, Size: 4]
	float ShootCornerMinDisDiff;//[Offset: 0x1dc, Size: 4]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x1e4, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1e8, Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x1ec, Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x1f0, Size: 4]
	float TolerateVehicleDis;//[Offset: 0x1f4, Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x1f8, Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x1fc, Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x200, Size: 4]
	float TolerateCharacterDis;//[Offset: 0x204, Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x208, Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x20c, Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x210, Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x214, Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x218, Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x21c, Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x220, Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x224, Size: 4]
	float TolerateNetDelay;//[Offset: 0x228, Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x22c, Size: 4]
	float GrayWeaponAndShootAngle;//[Offset: 0x230, Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x234, Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x238, Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x23c, Size: 4]
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x240, Size: 12]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0x24c, Size: 12]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x258, Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x25c, Size: 4]
	float fShootBoxMaxScaleInShootCorner;//[Offset: 0x260, Size: 4]
	Character* CharacterOwner;//[Offset: 0x264, Size: 4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x268, Size: 24]
	Vector LastImpactPoint;//[Offset: 0x280, Size: 12]
	bool CacheIsShooterPosBlockVictimPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	bool CacheIsShootPosBlockImpactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool CacheIsShootCornerSituation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	float CacheShootPingDiff;//[Offset: 0x29c, Size: 4]
	float ShooterNetDelayMinSeconds;//[Offset: 0x2a4, Size: 4]
	float ShooterNetDelayMaxSeconds;//[Offset: 0x2a8, Size: 4]
};

class EntityAntiCheatComponent.ActorComponent.Object
{
};

class ShootVerifyConfig
{
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 4]
};

class PingDifVerifyStr
{
	float MinPingDif;//[Offset: 0x0, Size: 4]
	float MaxPingDif;//[Offset: 0x4, Size: 4]
	float TolLagTime;//[Offset: 0x8, Size: 4]
	float ShootCornerBoxScale;//[Offset: 0xc, Size: 4]
};

class VictimPingVerifyStr
{
	float MinPingDif;//[Offset: 0x0, Size: 4]
	float MaxPingDif;//[Offset: 0x4, Size: 4]
	float TolLagTime;//[Offset: 0x8, Size: 4]
	float ShootCornerBoxScale;//[Offset: 0xc, Size: 4]
};

class ServerCheckBox
{
	unsigned char PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]
};

class WeaponAntiData
{
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 2]
	uint16 NetDelay;//[Offset: 0xc, Size: 2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 4]
};

class VehBackpackItem
{
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
};

class STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
{
	AkAudioEvent* AkEvent;//[Offset: 0x40, Size: 4]
};

class STExtraVehicleSfxLoopBase
{
	AkComponent* AkComp;//[Offset: 0x0, Size: 4]
	<uint32,float> MapRTPC;//[Offset: 0x4, Size: 60]
};

class VehicleSimViewData
{
	unsigned char ViewPitch;//[Offset: 0x0, Size: 1]
	unsigned char ViewYaw;//[Offset: 0x1, Size: 1]
	unsigned char ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
};

class VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
{
	float MinForwardSpeedToRotationKMH;//[Offset: 0x378, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x37c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x380, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	bool bMeshRootVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 1]
	float ArmOriginProbeSize;//[Offset: 0x388, Size: 4]
	Rotator RelativeToOwnerRotator;//[Offset: 0x38c, Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x398, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	float MinPitch;//[Offset: 0x3b0, Size: 4]
	float MinSmartPitch;//[Offset: 0x3b4, Size: 4]
	float MaxPitch;//[Offset: 0x3b8, Size: 4]
	float SmartPitchInputFactor;//[Offset: 0x3bc, Size: 4]
	float SmartYawInputFactor;//[Offset: 0x3c0, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x3c8, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x3ec, Size: 4]
	bool bKeepCameraLagWhenSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool bNoFixCameraLagWhenSpecator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	float ResultMinPitch;//[Offset: 0x414, Size: 4]
	float ResultMaxPitch;//[Offset: 0x418, Size: 4]
	Vector ArmOriginOffset;//[Offset: 0x41c, Size: 12]
	float DefaultFOVInterpSpeed;//[Offset: 0x428, Size: 4]
	float DefaultArmLengthInterpSpeed;//[Offset: 0x42c, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0x430, Size: 4]
	float CurAdditiveOffsetFov;//[Offset: 0x434, Size: 4]
	float LeaveMaxDistance;//[Offset: 0x438, Size: 4]
	float LeaveMaxTime;//[Offset: 0x43c, Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x448, Size: 4]
	float ApproachTime;//[Offset: 0x450, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x460, Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x464, Size: 4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
};

class SpringArmComponent.SceneComponent.ActorComponent.Object
{
	float TargetArmLength;//[Offset: 0x2c0, Size: 4]
	Vector SocketOffset;//[Offset: 0x2c4, Size: 12]
	Vector TargetOffset;//[Offset: 0x2d0, Size: 12]
	float ProbeSize;//[Offset: 0x2dc, Size: 4]
	unsigned char ProbeChannel;//[Offset: 0x2e0, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e1, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e1, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e1, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e1, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e1, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e1, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e1, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e1, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e2, Size: 1]
	float CameraLagSpeed;//[Offset: 0x2e4, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x2e8, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x2ec, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x2f0, Size: 4]
};

class VehiclePickableComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
{
	class PickUpWrapperActor* PickupWrapperClass;//[Offset: 0x150, Size: 4]
	bool bEnablePickupInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	PickUpWrapperActor* PickupVehicle;//[Offset: 0x158, Size: 4]
};

class PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
{
	float NetCullDistanceSquaredRate;//[Offset: 0x3ec, Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x3f8, Size: 24]
	int Count;//[Offset: 0x410, Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bAlwaysPickAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417, Size: 1]
	bool bForceDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 1]
	FName OwnerName;//[Offset: 0x420, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x428, Size: 4]
	float OwnerTime;//[Offset: 0x42c, Size: 4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x434, Size: 12]
	Actor* AttachedActor;//[Offset: 0x440, Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x444, Size: 12]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x454, Size: 4]
	float PickUpColdCountDown;//[Offset: 0x458, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x480, Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x488, Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x48c, Size: 4]
	FString ItemValue;//[Offset: 0x490, Size: 12]
	FString ItemCategory;//[Offset: 0x49c, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	int OverridePickupRule;//[Offset: 0x4ac, Size: 4]
	delegate OnWrapperPickedUp;//[Offset: 0x4b4, Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x4c4, Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x4c8, Size: 4]
	int ObjectPoolSize;//[Offset: 0x4cc, Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 1]
	int InBoxEffectDurationTime;//[Offset: 0x4d4, Size: 4]
	FString EffectPath;//[Offset: 0x4d8, Size: 12]
	FString DurationTime;//[Offset: 0x4e4, Size: 12]
	int ItemId;//[Offset: 0x4f0, Size: 4]
	Color DefaultColor;//[Offset: 0x4f4, Size: 4]
	Vector CustomEffectScale;//[Offset: 0x4f8, Size: 12]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x510, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x590, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x610, Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x650, Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x660, Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x678, Size: 4]
	int SpotDataIndex;//[Offset: 0x688, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	int DropGroupID;//[Offset: 0x698, Size: 4]
	Vector DropStartLocation;//[Offset: 0x69c, Size: 12]
};

class UAENetActor.LuaActor.Actor.Object
{
	int iRegionActor;//[Offset: 0x3a0, Size: 4]
	bool bStaticAddNetworkActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	unsigned char AutoDormancyType;//[Offset: 0x3a7, Size: 1]
};

class ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
{
	int AIGroupID;//[Offset: 0x2d8, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	unsigned char SpotGroupType;//[Offset: 0x2de, Size: 1]
	float RepeatGenerateItemCD;//[Offset: 0x2e0, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2e4, Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x2e8, Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x2f4, Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x2f8, Size: 60]
	Actor*[] CacheItems;//[Offset: 0x334, Size: 12]
};

class SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
{
	unsigned char SpotType;//[Offset: 0x2bd, Size: 1]
	int ID;//[Offset: 0x2c0, Size: 4]
	int WorldCompositionID;//[Offset: 0x2c4, Size: 4]
	float HalfHeight;//[Offset: 0x2c8, Size: 4]
	int SpotProbability;//[Offset: 0x2cc, Size: 4]
	float LineOffsetZ;//[Offset: 0x2d0, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
};

class ItemSceneComponent.SceneComponent.ActorComponent.Object
{
};

class ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
{
	Vector ItemGenerateOffset;//[Offset: 0x210, Size: 12]
	unsigned char BornIslandGroupType;//[Offset: 0x21c, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x220, Size: 208]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x2f0, Size: 60]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x32c, Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	FString[] AreaIDList;//[Offset: 0x33c, Size: 12]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x348, Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x354, Size: 12]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x360, Size: 12]
	<unsigned char,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x36c, Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x3a8, Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x3c8, Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x3cc, Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x3d0, Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x40c, Size: 60]
	Actor*[] BornIslandItems;//[Offset: 0x448, Size: 12]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x454, Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x468, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x470, Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x4b8, Size: 12]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x4d0, Size: 12]
	FString CookedBandFilePath;//[Offset: 0x518, Size: 12]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x528, Size: 12]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x534, Size: 60]
	bool bUseDynamicSpotConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	DynamicSpotConfig[] DynamicSpotConfigs;//[Offset: 0x574, Size: 12]
	int RandomSpotCountPerTick;//[Offset: 0x5bc, Size: 4]
	delegate PreCalculateCompleted;//[Offset: 0x5fc, Size: 12]
	bool bCheckPreCalculateComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 1]
	bool bEnablePrimeItemCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x609, Size: 1]
	PrimeItemCircleConfig[] PrimeItemCircleConfigs;//[Offset: 0x60c, Size: 12]
	<Vector,UAESpotGroupObject*> SpotGroupObjectsMapByLoc;//[Offset: 0x63c, Size: 60]
	bool bRemovableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 1]
	int RemoveGeneratedItemPerTick;//[Offset: 0x6f4, Size: 4]
	int RemoveDropGroundItemPerTick;//[Offset: 0x6f8, Size: 4]
	bool bAddHouseActorSerializeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
};

class BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
{
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0x150, Size: 4]
	FString ItemTableName;//[Offset: 0x154, Size: 12]
	FString[] ItemSpawnTableList;//[Offset: 0x160, Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0x16c, Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	<unsigned char,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x174, Size: 60]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x1b0, Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x1bc, Size: 60]
	FString CookedFilePath;//[Offset: 0x1f8, Size: 12]
	FString[] CookedFileAddPathArray;//[Offset: 0x204, Size: 12]
};

class ItemActorComponent.LuaActorComponent.ActorComponent.Object
{
};

class UAEDataTable.DataTable.Object
{
	<FString,Property*> NameToProperty;//[Offset: 0x80, Size: 60]
};

class DataTable.Object
{
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 4]
};

class ScriptStruct.Struct.Field.Object
{
};

class GroupSpotComponentArray
{
	unsigned char GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4, Size: 12]
};

class GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
{
	unsigned char GroupType;//[Offset: 0x2bd, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 1]
	int WorldCompositionID;//[Offset: 0x2c0, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x2c4, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x2c8, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 1]
};

class WorldTileSpotArray
{
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4, Size: 12]
};

class ItemGenerateStatisticsData
{
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<unsigned char,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c, Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88, Size: 60]
	AreaItemStatisticsData[] AreaItemStatisticsData;//[Offset: 0xc4, Size: 12]
};

class ItemGroupStatisticsData.TableRowBase
{
	unsigned char SpotGroupType;//[Offset: 0x4, Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllSpotCount;//[Offset: 0x10, Size: 4]
	int AllValidSpotCount;//[Offset: 0x14, Size: 4]
};

class TableRowBase
{
};

class BuildingStatisticsData.TableRowBase
{
	FString BuildingName;//[Offset: 0x4, Size: 12]
	float BuildingLocationX;//[Offset: 0x10, Size: 4]
	float BuildingLocationY;//[Offset: 0x14, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c, Size: 4]
	int AllSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidSpotCount;//[Offset: 0x24, Size: 4]
	<unsigned char,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28, Size: 60]
};

class ItemSpotStatisticsData.TableRowBase
{
	unsigned char SpotType;//[Offset: 0x4, Size: 1]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
};

class ItemClassStatisticsData.TableRowBase
{
	FString ItemPath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18, Size: 12]
	int ItemTogetherCount;//[Offset: 0x24, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
};

class AreaItemStatisticsData.TableRowBase
{
	FString ItemName;//[Offset: 0x4, Size: 12]
	int UID;//[Offset: 0x10, Size: 4]
	int ItemId;//[Offset: 0x14, Size: 4]
	int GroupType;//[Offset: 0x18, Size: 4]
	int SpotType;//[Offset: 0x1c, Size: 4]
	FString AreaName;//[Offset: 0x20, Size: 12]
	Vector Location;//[Offset: 0x2c, Size: 12]
	float X;//[Offset: 0x38, Size: 4]
	float Y;//[Offset: 0x3c, Size: 4]
	int GameTime;//[Offset: 0x40, Size: 4]
};

class SpotGroupProperty
{
	unsigned char SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18, Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c, Size: 4]
};

class SpotTypeProperty
{
	unsigned char SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24, Size: 12]
};

class SpotWeight
{
	FString Name;//[Offset: 0x0, Size: 12]
	int Weight;//[Offset: 0xc, Size: 4]
};

class ItemRegionCircle
{
	Vector Center;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float RadiusSquared2D;//[Offset: 0x10, Size: 4]
};

class ExtraItemSpawn
{
	int SpawnPercent;//[Offset: 0x0, Size: 4]
	FString SpawnItemValue;//[Offset: 0x4, Size: 12]
	FString SpawnItemCategory;//[Offset: 0x10, Size: 12]
};

class ItemGenerateSpawnDataArray
{
	FString ValueCatetory;//[Offset: 0x0, Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]
};

class ItemGenerateSpawnData
{
	int KeyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x4, Size: 12]
	FString ItemCategory;//[Offset: 0x10, Size: 12]
	int ItemWeight;//[Offset: 0x1c, Size: 4]
	FString ItemPath;//[Offset: 0x20, Size: 12]
	int ItemStackCount;//[Offset: 0x2c, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x30, Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x3c, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x40, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x44, Size: 4]
};

class ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
{
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2d0, Size: 4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x2d4, Size: 12]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x2e0, Size: 12]
};

class RepeatItemSpotData
{
	float RepeatGenerateCD;//[Offset: 0xa0, Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0xa8, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xb0, Size: 60]
};

class ItemGenerateSpawnClass
{
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x4, Size: 4]
	FString ItemPath;//[Offset: 0x8, Size: 12]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString MetaData;//[Offset: 0x18, Size: 12]
	FString ItemValue;//[Offset: 0x24, Size: 12]
	FString ItemCategory;//[Offset: 0x30, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x40, Size: 12]
	Vector SpotGroupLoc;//[Offset: 0x4c, Size: 12]
	Rotator SpotRotator;//[Offset: 0x58, Size: 12]
	int SpotPercent;//[Offset: 0x64, Size: 4]
	FString SpotDefaultTag;//[Offset: 0x6c, Size: 12]
	Actor* HostActor;//[Offset: 0x80, Size: 4]
	Actor* AttachedActor;//[Offset: 0x84, Size: 4]
	int SpotIndex;//[Offset: 0x9c, Size: 4]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	Vector RelativeLoc;//[Offset: 0xa4, Size: 12]
};

class AreaItemsLimitEdit
{
	int AreaX;//[Offset: 0x0, Size: 4]
	int AreaY;//[Offset: 0x4, Size: 4]
	GenerateItemLimit[] ItemsMaxLimitEdit;//[Offset: 0x8, Size: 12]
	GenerateItemLimit[] ItemsMinLimitEdit;//[Offset: 0x14, Size: 12]
};

class GenerateItemLimit
{
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]
};

class AreaItemsLimit
{
	RegionID RegionID;//[Offset: 0x0, Size: 12]
	bool IsBeginGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool IsCheckRecoverItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	Vector[] AvailablePosi;//[Offset: 0x10, Size: 12]
	<int,AreaItemsNum> ItemsMaxLimit;//[Offset: 0x1c, Size: 60]
	<int,AreaItemsNum> ItemsMinLimit;//[Offset: 0x58, Size: 60]
};

class RegionID
{
};

class AreaItemsNum
{
	int LimitNum;//[Offset: 0x0, Size: 4]
	int CurNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]
};

class DynamicSpotConfig
{
	FString Comment;//[Offset: 0x0, Size: 12]
	bool bDefaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	FString DynamicSpotPath;//[Offset: 0x10, Size: 12]
	CustomSpotConfig CustomSpotConfig;//[Offset: 0x1c, Size: 28]
	SpotGroupProperty[] SpotGroupProperties;//[Offset: 0x38, Size: 12]
};

class CustomSpotConfig
{
	bool bGenerateAtBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int NeedGroupMin;//[Offset: 0x4, Size: 4]
	int NeedGroupMax;//[Offset: 0x8, Size: 4]
	bool bSpotPerGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int NeedSpotPerGroupMin;//[Offset: 0x10, Size: 4]
	int NeedSpotPerGroupMax;//[Offset: 0x14, Size: 4]
	bool bUseCookedRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOverrideNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bUseDefaultSpotGroupProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
};

class PrimeItemCircleConfig
{
	SpotGroupProperty[] PrimeItemCircleProperties;//[Offset: 0x0, Size: 12]
};

class UAESpotGroupObject.Object
{
	Object* Host;//[Offset: 0x58, Size: 4]
};

class DropGroundEffectInfo
{
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 12]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]
};

class UAENetDriver.IpNetDriver.NetDriver.Object
{
	float NetCullChangeTime;//[Offset: 0x524, Size: 4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]
};

class IpNetDriver.NetDriver.Object
{
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a4, Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a4, Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x4a8, Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x4b8, Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x4bc, Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x4c0, Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x4c4, Size: 4]
	float RecreateSocketCooldownTime;//[Offset: 0x514, Size: 4]
	float RecreateSocketMaxTryCount;//[Offset: 0x518, Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
};

class VehicleAntiCheatTask.Object
{
};

class ESTAINoiseEventParams
{
	enum NoiseType;//[Offset: 0x0, Size: 1]
	float Loudness;//[Offset: 0x4, Size: 4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 4]
	float MaxRange;//[Offset: 0xc, Size: 4]
};

class STBuffSystemComponent.ActorComponent.Object
{
	float RPCSyncInterval;//[Offset: 0xc8, Size: 4]
	delegate OnClientAddBuffEvent;//[Offset: 0xcc, Size: 12]
	delegate OnClientRemoveBuffEvent;//[Offset: 0xd8, Size: 12]
	delegate OnClientUpdateBuffEvent;//[Offset: 0xe4, Size: 12]
	delegate OnAddBuffEvent;//[Offset: 0xf0, Size: 12]
	<int,UAEBlackboard*> BuffBlackboardMap;//[Offset: 0xfc, Size: 60]
	BuffIncNetArray SyncBriefs;//[Offset: 0x138, Size: 24]
	BuffIncNetArray SyncRefBriefs;//[Offset: 0x150, Size: 24]
	BuffIncNetArray OwnerSyncBriefs;//[Offset: 0x168, Size: 24]
	BuffIncNetArray OwnerSyncRefBriefs;//[Offset: 0x180, Size: 24]
	<int> BriefRemoveInstIds;//[Offset: 0x198, Size: 60]
};

class UAEBlackboard.Object
{
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x1c, Size: 720]
};

class UAEBlackboardContainer
{
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x3c, Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x78, Size: 60]
	<FName,unsigned char> EnumParamMap;//[Offset: 0xb4, Size: 60]
	<FName,int> IntParamMap;//[Offset: 0xf0, Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x12c, Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x168, Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1a4, Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1e0, Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x21c, Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x258, Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x294, Size: 60]
};

class BuffIncNetArray
{
	BuffNetArrayUnit[] IncArray;//[Offset: 0x0, Size: 12]
};

class BuffNetArrayUnit
{
	ClientSyncBrief Unit;//[Offset: 0x0, Size: 32]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
};

class ClientSyncBrief
{
	int InstID;//[Offset: 0x0, Size: 4]
	unsigned char LayerCount;//[Offset: 0x4, Size: 1]
	unsigned char Level;//[Offset: 0x5, Size: 1]
	int BuffID;//[Offset: 0x8, Size: 4]
	int CauseSkillID;//[Offset: 0xc, Size: 4]
	Actor* CauseActor;//[Offset: 0x10, Size: 4]
	float SyncTime;//[Offset: 0x14, Size: 4]
	float Duration;//[Offset: 0x18, Size: 4]
	float EndTime;//[Offset: 0x1c, Size: 4]
};

class VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	delegate VehicleAvatarEqiuped;//[Offset: 0x3f0, Size: 12]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x3fc, Size: 12]
	delegate OnEndChangeItemAvatar;//[Offset: 0x408, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x414, Size: 12]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	ParticleGroup AppliedParticlesGroup;//[Offset: 0x424, Size: 36]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool CanChangeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x44c, Size: 12]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x45c, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x468, Size: 8]
	FName TailMatSlotName;//[Offset: 0x470, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x478, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x480, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x484, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x488, Size: 4]
	BackpackVehicleAvatarHandle* VehicleAvatarHandle;//[Offset: 0x48c, Size: 4]
	BackpackVehicleAvatarHandle* DefaultVehicleAvatarHandle;//[Offset: 0x490, Size: 4]
	NetHighTireStruct NetHighTireStruct;//[Offset: 0x494, Size: 8]
	VehicleAvatarPropretyHandle* DefaultPropertyHandle;//[Offset: 0x49c, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x4a0, Size: 4]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	bool ForceLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	WheeledVehicleMovementComponent* VehicleMovementComponent;//[Offset: 0x4d0, Size: 4]
	bool NeedTickModifyMatParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 1]
	float DownDetectLength;//[Offset: 0x4d8, Size: 4]
	float LerpForwardSpeed;//[Offset: 0x4dc, Size: 4]
	PlayerController* LocalPC;//[Offset: 0x4e0, Size: 8]
	bool HasWelComeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
};

class ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x228, Size: 12]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x238, Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x254, Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x258, Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x314, Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x318, Size: 4]
	int itemType;//[Offset: 0x31c, Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x320, Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x348, Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x370, Size: 60]
};

class NetItemAvatarData
{
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 24]
	int UpdateFlag;//[Offset: 0x18, Size: 4]
};

class BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
{
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0xf0, Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0x100, Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0x128, Size: 40]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x150, Size: 40]
};

class ItemAvatarData
{
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]
	MaterialInterface* LobbyMatInstance;//[Offset: 0x30, Size: 40]
};

class ParticleGroup
{
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 12]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0xc, Size: 12]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18, Size: 12]
};

class ParticleAsset
{
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x68, Size: 12]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bAutoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]
	bool EnableCullDist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 1]
	float CullDist;//[Offset: 0x78, Size: 4]
};

class BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
{
	enum[] SupportChangeTypes;//[Offset: 0x17c, Size: 12]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x188, Size: 12]
	SkeletalMesh* SkeletalMeshBroken;//[Offset: 0x198, Size: 40]
	StaticMesh* StaticMeshBroken;//[Offset: 0x1c0, Size: 40]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x1e8, Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x210, Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x238, Size: 12]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x244, Size: 60]
	ParticleAsset[] ShowParticles;//[Offset: 0x280, Size: 12]
	ParticleSystem* ExplosionParticle;//[Offset: 0x290, Size: 40]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x2b8, Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x2e0, Size: 40]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x308, Size: 60]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	VehCharAnimDataWrapper[] VehCharAnimData;//[Offset: 0x348, Size: 12]
	VehicleCharacterAnimDataAsset* VehCharAnimDataNew;//[Offset: 0x354, Size: 4]
	class AnimInstance* VehicleAnim;//[Offset: 0x358, Size: 40]
	VehicleMatParamModifyCfg[] MatModifyByVelocityCfg;//[Offset: 0x380, Size: 12]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	VehDecalCfg DecalCfg;//[Offset: 0x390, Size: 120]
	bool bNeedHideExhaustWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
};

class VehCharAnimDataWrapper
{
	FName AnimCompTag;//[Offset: 0x0, Size: 8]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x8, Size: 12]
};

class VehCharAnimData
{
	unsigned char VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]
};

class VehicleCharacterAnimDataAsset.IGAnimData.DataAsset.Object
{
	enum VehicleShapeType;//[Offset: 0x20, Size: 1]
	int AvatarID;//[Offset: 0x24, Size: 4]
	VehicleAnimData[] VehicleAnimData;//[Offset: 0x28, Size: 12]
	<FName,int> SeatCompIndexMap;//[Offset: 0x34, Size: 60]
};

class IGAnimData.DataAsset.Object
{
};

class VehicleAnimData
{
	FName SeatCompTag;//[Offset: 0x0, Size: 8]
	AnimBulkData[] AnimData;//[Offset: 0x8, Size: 12]
};

class AnimBulkData
{
	GameplayTag KeyType;//[Offset: 0x0, Size: 8]
	AnimationAsset* Asset;//[Offset: 0x8, Size: 40]
};

class GameplayTag
{
	FName TagName;//[Offset: 0x0, Size: 8]
};

class VehicleMatParamModifyCfg
{
	FName ParamName;//[Offset: 0x0, Size: 8]
	enum ParamType;//[Offset: 0x8, Size: 1]
	enum Usage;//[Offset: 0x9, Size: 1]
	RuntimeFloatCurve ParamModifyCurve;//[Offset: 0xc, Size: 88]
	enum TargetType;//[Offset: 0x64, Size: 1]
	CurveVector* VectorCurve;//[Offset: 0x68, Size: 4]
	float MaxLerpSpeed;//[Offset: 0x6c, Size: 4]
};

class VehDecalCfg
{
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float NeedParkTime;//[Offset: 0x4, Size: 4]
	MaterialInterface* DecalMaterial;//[Offset: 0x8, Size: 40]
	Texture* DecalTexture;//[Offset: 0x30, Size: 40]
	Vector2D UVScale;//[Offset: 0x58, Size: 8]
	Vector2D UVOffset;//[Offset: 0x60, Size: 8]
	Vector DecalSize;//[Offset: 0x68, Size: 12]
};

class NetHighTireStruct
{
	int ItemId;//[Offset: 0x0, Size: 4]
	bool bEnableHighTire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
};

class VehicleAvatarPropretyHandle.Object
{
	int AvatarID;//[Offset: 0x20, Size: 4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x28, Size: 264]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0x130, Size: 40]
};

class VehicleAvatarProperty
{
	SkeletalMesh* TPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* FPPMesh;//[Offset: 0x28, Size: 40]
	WheelSetup[] WheelSetups;//[Offset: 0x50, Size: 12]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x5c, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x68, Size: 12]
	VehicleTransmissionData GearSetup;//[Offset: 0x74, Size: 40]
	Vector CenterOfMassOffset;//[Offset: 0x9c, Size: 12]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0xa8, Size: 96]
};

class WheelSetup
{
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]
};

class VehicleWheel.Object
{
	StaticMesh* CollisionMesh;//[Offset: 0x1c, Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	Vector Offset;//[Offset: 0x24, Size: 12]
	float ShapeRadius;//[Offset: 0x30, Size: 4]
	float ShapeWidth;//[Offset: 0x34, Size: 4]
	float Mass;//[Offset: 0x38, Size: 4]
	float DampingRate;//[Offset: 0x3c, Size: 4]
	float SteerAngle;//[Offset: 0x40, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	TireType* TireType;//[Offset: 0x48, Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c, Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50, Size: 4]
	float LatStiffValue;//[Offset: 0x54, Size: 4]
	float LongStiffValue;//[Offset: 0x58, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c, Size: 4]
	unsigned char SweepType;//[Offset: 0x70, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c, Size: 4]
	int WheelIndex;//[Offset: 0x80, Size: 4]
	float DebugLongSlip;//[Offset: 0x84, Size: 4]
	float DebugLatSlip;//[Offset: 0x88, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c, Size: 4]
	float DebugWheelTorque;//[Offset: 0x94, Size: 4]
	float DebugLongForce;//[Offset: 0x98, Size: 4]
	float DebugLatForce;//[Offset: 0x9c, Size: 4]
	Vector Location;//[Offset: 0xa0, Size: 12]
	Vector OldLocation;//[Offset: 0xac, Size: 12]
	Vector Velocity;//[Offset: 0xb8, Size: 12]
};

class TireConfig.DataAsset.Object
{
	float FrictionScale;//[Offset: 0x20, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24, Size: 12]
};

class TireConfigMaterialFriction
{
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]
};

class WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
{
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x134, Size: 12]
	float Mass;//[Offset: 0x140, Size: 4]
	float DragCoefficient;//[Offset: 0x144, Size: 4]
	float ChassisWidth;//[Offset: 0x148, Size: 4]
	float ChassisHeight;//[Offset: 0x14c, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bClientSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool bServerSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	float DragArea;//[Offset: 0x154, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x158, Size: 4]
	float MaxEngineRPM;//[Offset: 0x15c, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x160, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x164, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x170, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x174, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x178, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x17c, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x180, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x184, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x188, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x18c, Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1a8, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1ac, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1b0, Size: 4]
	float RVOSteeringStep;//[Offset: 0x1b4, Size: 4]
	float RVOThrottleStep;//[Offset: 0x1b8, Size: 4]
	int AvoidanceUID;//[Offset: 0x1bc, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1c0, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1c4, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c8, Size: 4]
	float AvoidanceWeight;//[Offset: 0x1cc, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1d0, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1e8, Size: 20]
	float RawSteeringInput;//[Offset: 0x200, Size: 4]
	float RawThrottleInput;//[Offset: 0x204, Size: 4]
	float RawBrakeInput;//[Offset: 0x208, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 1]
	float SteeringInput;//[Offset: 0x210, Size: 4]
	float ThrottleInput;//[Offset: 0x214, Size: 4]
	float BrakeInput;//[Offset: 0x218, Size: 4]
	float HandBrakeInput;//[Offset: 0x21c, Size: 4]
	float IdleBrakeInput;//[Offset: 0x220, Size: 4]
	float StopThreshold;//[Offset: 0x224, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x228, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x22c, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x234, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x23c, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x244, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 1]
};

class ReplicatedVehicleState
{
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandBrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]
};

class VehicleInputRate
{
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]
};

class WheelHubSetup
{
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName TireBoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]
};

class VehicleTransmissionData
{
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20, Size: 4]
	float ClutchStrength;//[Offset: 0x24, Size: 4]
};

class VehicleGearData
{
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]
};

class VehicleNeutralThrottleConfig
{
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum DifferentialType;//[Offset: 0x1, Size: 1]
	float CanNeutralThrottleMinSpeed;//[Offset: 0x4, Size: 4]
	float NeutralThrottleToMaxRPMSeconds;//[Offset: 0x8, Size: 4]
	float NeutralThrottleDecelSeconds;//[Offset: 0xc, Size: 4]
	float WheelRPMOverEngineRPMRate;//[Offset: 0x10, Size: 4]
	AkAudioEvent* FrictionAudio;//[Offset: 0x18, Size: 40]
	Vector CameraOffset;//[Offset: 0x40, Size: 12]
	float AccelCameraOffsetSeconds;//[Offset: 0x4c, Size: 4]
	float DecelCameraOffsetSeconds;//[Offset: 0x50, Size: 4]
	class CameraShake* CameraShake;//[Offset: 0x54, Size: 4]
	float CameraShakeDelay;//[Offset: 0x58, Size: 4]
	STVehicleWheelSlipDustConfig* DustConfig;//[Offset: 0x5c, Size: 4]
};

class STVehicleWheelSlipDustConfig.DataAsset.Object
{
	STVehicleSlipWheelDust[] SlipWheelDusts;//[Offset: 0x20, Size: 12]
};

class STVehicleSlipWheelDust
{
	unsigned char ContactSurface;//[Offset: 0x0, Size: 1]
	STVehicleSingleWheelFx[] WheelFx;//[Offset: 0x4, Size: 12]
};

class STVehicleSingleWheelFx
{
	enum Wheel;//[Offset: 0x0, Size: 1]
	ParticleSystem* WheelFx;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]
};

class VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x719, Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71a, Size: 1]
	int MasterCompLODLevel;//[Offset: 0x71c, Size: 4]
	int VehicleSkinID;//[Offset: 0x720, Size: 4]
	delegate OnNetAvatarDataChanged;//[Offset: 0x724, Size: 12]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x738, Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x760, Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x788, Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x794, Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x7a0, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x7ac, Size: 12]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x7b8, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x7c8, Size: 8]
	FName TailMatSlotName;//[Offset: 0x7d0, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x7d8, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x7e0, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x7e4, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x7e8, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x7ec, Size: 4]
};

class SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	<int,FName> SlotToSocket;//[Offset: 0x43c, Size: 60]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x478, Size: 60]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x4b4, Size: 60]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x4f0, Size: 60]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x52c, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x538, Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x544, Size: 12]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x550, Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55d, Size: 1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55e, Size: 1]
	bool IsLoadMeshProcessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55f, Size: 1]
	<int> SlotToUseDefaultMesh;//[Offset: 0x560, Size: 60]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x59c, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x644, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x648, Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x664, Size: 12]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x670, Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x6ac, Size: 4]
	delegate OnRegisterEntityTick;//[Offset: 0x6b0, Size: 12]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	enum[] LoadWithBatchBodyFilterTypes;//[Offset: 0x6c0, Size: 12]
	int[] LoadWithBatchBodyFilterTemplateIDs;//[Offset: 0x6cc, Size: 12]
};

class SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x228, Size: 60]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x264, Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x2a0, Size: 36]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x2c4, Size: 12]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x2d0, Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x2dc, Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x2e8, Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x2f4, Size: 12]
	int itemType;//[Offset: 0x300, Size: 4]
	enum CustomType;//[Offset: 0x304, Size: 1]
	<int,ForceEquipSlotInfo> ForceEquipItemLogic;//[Offset: 0x308, Size: 60]
	bool VehicleForceReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 1]
	int SubSlotStartNum;//[Offset: 0x350, Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x354, Size: 4]
	<int,enum> SlotHideStateMap;//[Offset: 0x358, Size: 60]
	<int,TempAvatarSlotDesc> TempRunningSlotDesc;//[Offset: 0x394, Size: 60]
	int[] AlawysHideResetOperation;//[Offset: 0x418, Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x428, Size: 12]
};

class AvatarSlotDesc
{
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 24]
	int gender;//[Offset: 0x38, Size: 4]
	int HideState;//[Offset: 0x3c, Size: 4]
	int ReplaceState;//[Offset: 0x40, Size: 4]
	bool IsExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x48, Size: 20]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	enum SlotDescDiff;//[Offset: 0x5d, Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 24]
};

class AvatarCustom
{
	enum CustomType;//[Offset: 0x0, Size: 1]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int NumID;//[Offset: 0xc, Size: 4]
	int ParticleID;//[Offset: 0x10, Size: 4]
};

class NetAvatarSyncData
{
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 12]
	AvatarShapeData[] ShapeSyncData;//[Offset: 0xc, Size: 12]
	int gender;//[Offset: 0x18, Size: 4]
	int BaseID;//[Offset: 0x1c, Size: 4]
	int UpdateFlag;//[Offset: 0x20, Size: 4]
};

class AvatarSyncData
{
	int ItemId;//[Offset: 0x0, Size: 4]
	int AdditionalItemID;//[Offset: 0x4, Size: 4]
	int SlotID;//[Offset: 0x8, Size: 4]
	int SubSlotID;//[Offset: 0xc, Size: 4]
	int HideState;//[Offset: 0x10, Size: 4]
	int ReplaceState;//[Offset: 0x14, Size: 4]
	int FakeItemID;//[Offset: 0x18, Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 1]
	enum OperationType;//[Offset: 0x1d, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 20]
	enum ForceHideState;//[Offset: 0x34, Size: 1]
};

class AvatarShapeData
{
	int SlotID;//[Offset: 0x0, Size: 4]
	unsigned char[] ShapeInfoBuffer;//[Offset: 0x4, Size: 12]
};

class ForceEquipSlotInfo
{
};

class TempAvatarSlotDesc
{
	int SlotID;//[Offset: 0x0, Size: 4]
	AvatarTableData RelationData;//[Offset: 0x4, Size: 124]
	int[] ReplaceDesc;//[Offset: 0x80, Size: 12]
	int[] HideDesc;//[Offset: 0x8c, Size: 12]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
};

class AvatarTableData
{
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	int[] HideFlags;//[Offset: 0x8, Size: 12]
	int[] ReplaceFlags;//[Offset: 0x14, Size: 12]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x20, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x2c, Size: 12]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x38, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x44, Size: 12]
	int[] ConflictConfig;//[Offset: 0x50, Size: 12]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x5c, Size: 12]
	int HideBoneSlotID;//[Offset: 0x68, Size: 4]
	int HideBoneType;//[Offset: 0x6c, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x70, Size: 12]
};

class SlotMeshDesc
{
	int SlotID;//[Offset: 0x0, Size: 4]
	MeshComponent* MeshComp;//[Offset: 0x4, Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0xc, Size: 36]
};

class SlotHandleDesc
{
	int SlotID;//[Offset: 0x0, Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0xc, Size: 12]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18, Size: 24]
};

class AvatarCustomBase.CustomBase.Object
{
	CustomMatConfig[] MatConfigs;//[Offset: 0x30, Size: 12]
};

class CustomBase.Object
{
	int CustomID;//[Offset: 0x1c, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20, Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28, Size: 8]
};

class CustomMatConfig
{
	FName SlotName;//[Offset: 0x0, Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 12]
	CustomMatColor[] ColorConfig;//[Offset: 0x14, Size: 12]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20, Size: 12]
};

class CustomMatScalar
{
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	float Scalar;//[Offset: 0x10, Size: 4]
};

class CustomMatColor
{
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	LinearColor Color;//[Offset: 0x10, Size: 16]
};

class CustomMatTextrue
{
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	Texture* Textrue;//[Offset: 0x10, Size: 40]
	FString TextruePath;//[Offset: 0x38, Size: 12]
};

class AvatarEntity.Object
{
	int SlotID;//[Offset: 0x1c, Size: 4]
	int SubSlotID;//[Offset: 0x20, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28, Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 1]
	FName SocketName;//[Offset: 0x100, Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x108, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x148, Size: 60]
};

class AvatarEntityFactory.Object
{
};

class VehicleStyleData
{
	int StyleID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 12]
};

class VehicleStyle
{
	enum StyleType;//[Offset: 0x0, Size: 1]
	int StyleValue;//[Offset: 0x4, Size: 4]
};

class WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
{
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x484, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x490, Size: 12]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x49c, Size: 12]
};

class WeaponManagerComponent.ActorComponent.Object
{
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xfc, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x138, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x140, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x148, Size: 60]
	<FName,unsigned char> LogicSocketToPropSlotMap;//[Offset: 0x184, Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x1c0, Size: 4]
	bool ShowMainWeaponModelOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	FName CurUseWeaponLogicSocket;//[Offset: 0x1c8, Size: 8]
	unsigned char CurUseWeaponLogicSocketRep;//[Offset: 0x1d0, Size: 1]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x1d8, Size: 8]
	FName NextUseWeaponLogicSocket;//[Offset: 0x1e0, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x1f0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x1f8, Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 1]
	float ResyncTimeBias;//[Offset: 0x204, Size: 4]
	float NextResyncTimestamp;//[Offset: 0x208, Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x210, Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x21c, Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x228, Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x234, Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x240, Size: 12]
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x24c, Size: 12]
	delegate WeaponSystemAttachDataChangedDelegate;//[Offset: 0x258, Size: 12]
	delegate NextUseWeaponChangedDelegate;//[Offset: 0x270, Size: 12]
	delegate EquipVehicleShootWeaponDelegate;//[Offset: 0x27c, Size: 12]
	unsigned char SwitchSlotAfterFinishCreatingWeapon;//[Offset: 0x288, Size: 1]
	bool bSwitchSlotAfterCreatIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x28c, Size: 60]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x2c8, Size: 12]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x2d8, Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x2e4, Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x2f0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x328, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x360, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x398, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x3d0, Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x40c, Size: 4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x410, Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x414, Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x418, Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x41c, Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x44c, Size: 4]
};

class WeaponCreateInstance
{
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int SyncTicket;//[Offset: 0x18, Size: 4]
	int CreateFrameCount;//[Offset: 0x1c, Size: 4]
};

class SpawnAndBackpackWeaponReplicatedData
{
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x3c, Size: 4]
	uint32 OwnerCharacterPlayerKey;//[Offset: 0x40, Size: 4]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	int SyncTicket;//[Offset: 0x48, Size: 4]
	bool bHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
};

class WeaponSystemDataOnSimulateClient
{
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	unsigned char PropSocket;//[Offset: 0x10, Size: 1]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	int BagLevel;//[Offset: 0x34, Size: 4]
};

class WeaponReconnectReplicateDataWrapper
{
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 104]
	STExtraWeapon* Weapon;//[Offset: 0x68, Size: 4]
};

class WeaponReconnectReplicateData
{
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4, Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc, Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18, Size: 8]
	BulletInClip WeaponBulletInClip;//[Offset: 0x20, Size: 16]
	uint32 WeaponShootID;//[Offset: 0x30, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x34, Size: 4]
	unsigned char CurWeaponState;//[Offset: 0x38, Size: 1]
	unsigned char CurShootType;//[Offset: 0x39, Size: 1]
	int CurShootTotalType;//[Offset: 0x3c, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x40, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x58, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int OperationIndex;//[Offset: 0x60, Size: 4]
};

class DefaultWeaponHolderInfo
{
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 4]
	FName WeaponSocket;//[Offset: 0x8, Size: 8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 4]
	int WeaponTypeID;//[Offset: 0x14, Size: 4]
};

class EffectComponent.ActorComponent.Object
{
	delegate EffectGraphChangeDelegate;//[Offset: 0x144, Size: 12]
	bool NeedWaitStartFireRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
};

class PlayerTombBox.LuaActor.Actor.Object
{
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x3dc, Size: 12]
	FName TombName;//[Offset: 0x3e8, Size: 8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x3f4, Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x3f8, Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x400, Size: 24]
	int DeadTime;//[Offset: 0x418, Size: 4]
	int BoxLifeSpan;//[Offset: 0x41c, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x424, Size: 12]
	unsigned char AttackRules;//[Offset: 0x430, Size: 1]
	Actor* AttachedActor;//[Offset: 0x434, Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	enum BoxType;//[Offset: 0x439, Size: 1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x43c, Size: 12]
	class PickUpListWrapperActor* CustomPickListWrapperClass;//[Offset: 0x448, Size: 4]
	uint32 OwnerUniqueID;//[Offset: 0x44c, Size: 4]
	int TargetPlayerKey;//[Offset: 0x450, Size: 4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x458, Size: 4]
	float CustomCanPickUpDistance;//[Offset: 0x45c, Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool bAirDropWrapperDynamicRegionNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 1]
	int AvatarID;//[Offset: 0x464, Size: 4]
	Character* BoxOwner;//[Offset: 0x468, Size: 4]
	ProjectileMovementComponent* CacheComp;//[Offset: 0x46c, Size: 4]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x470, Size: 8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x478, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x484, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 1]
	int DropGroupID;//[Offset: 0x48c, Size: 4]
	Vector DropStartLocation;//[Offset: 0x490, Size: 12]
};

class ItemTombParticle
{
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 4]
	<int> ItemSpecificIDArray;//[Offset: 0x2c, Size: 60]
};

class PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
{
	PickUpItemData[] PickUpDataList;//[Offset: 0x6b0, Size: 12]
	enum BoxType;//[Offset: 0x6c8, Size: 1]
	bool bForceNotUsePickUpDataComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	delegate OnWrapperEmpty;//[Offset: 0x6d8, Size: 12]
	delegate OnSomeonePickItem;//[Offset: 0x6e4, Size: 12]
	float PickUpListDataRelevancyDistanceSqrt;//[Offset: 0x6f4, Size: 4]
	PickUpDataComponent* PickUpDataComponent;//[Offset: 0x6f8, Size: 4]
	uint32[] ForbidPickPlayerKeyList;//[Offset: 0x6fc, Size: 12]
};

class PickUpItemData
{
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c, Size: 12]
	int InstanceID;//[Offset: 0x28, Size: 4]
};

class PickUpDataComponent.ActorComponent.Object
{
	PickUpItemData[] PickUpDataList;//[Offset: 0xc8, Size: 12]
};

class VehicleAIComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
{
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x150, Size: 12]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x15c, Size: 12]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x19c, Size: 4]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x1a0, Size: 4]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x1a4, Size: 44]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x1d4, Size: 4]
	float CheckAllowableDistanceInter;//[Offset: 0x1d8, Size: 4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x1dc, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x1e8, Size: 12]
};

class STExtraVehicleAIController.AIController.Controller.Actor.Object
{
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x3c0, Size: 8]
	FName AIPawnTag;//[Offset: 0x3c8, Size: 8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x3d0, Size: 4]
	VehicleAIComponent* VehicleAIComp;//[Offset: 0x3d4, Size: 4]
};

class STExtraVehicleAIManager.Actor.Object
{
	delegate OnPostVehicleBehaviorInit;//[Offset: 0x310, Size: 12]
	bool bOnlySpawnInSafetyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool bQueueSpawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	DataTable* VehicleSpawnDataTable;//[Offset: 0x320, Size: 40]
	FName AIPawnTag;//[Offset: 0x348, Size: 8]
	int MaxConcurrentVehicles;//[Offset: 0x350, Size: 4]
	int MaxVehiclesPerGame;//[Offset: 0x354, Size: 4]
	float SpawnPointCooldown;//[Offset: 0x35c, Size: 4]
	FName CurrentPathKeyName;//[Offset: 0x360, Size: 8]
	FName CurrentPathInputKeyKeyName;//[Offset: 0x368, Size: 8]
	FName PreviousPathInputKeyKeyName;//[Offset: 0x370, Size: 8]
	FName IsPathingInReverseKeyName;//[Offset: 0x378, Size: 8]
	FName IsStoppedKeyName;//[Offset: 0x380, Size: 8]
	FName IsDebugForceStoppedKeyName;//[Offset: 0x388, Size: 8]
	enum AvoidanceMode;//[Offset: 0x390, Size: 1]
	float InitRetryDelay;//[Offset: 0x394, Size: 4]
	int MaxInitRetries;//[Offset: 0x398, Size: 4]
	QueuedVehicleSpawn[] QueuedVehicleSpawns;//[Offset: 0x3a8, Size: 12]
	STExtraVehicleAISpawner*[] VehicleSpawns;//[Offset: 0x3b4, Size: 12]
	STExtraAIWaypointSegment*[] VehiclePaths;//[Offset: 0x3c0, Size: 12]
	<PathPoint,bool> PathPointPlayZoneStatus;//[Offset: 0x3cc, Size: 60]
	<PathPoint,PathInputPlayZoneDistanceQuery> PathPointPlayZoneDistances;//[Offset: 0x408, Size: 60]
	<STExtraVehicleAISpawner*,float> LastVehicleSpawnTimes;//[Offset: 0x444, Size: 60]
	<FString,float> AllVehiclesDestroyedTimeMap;//[Offset: 0x480, Size: 60]
	float PreviousMatchTime;//[Offset: 0x4bc, Size: 4]
	<FName,Object*> CacheUObjectMap;//[Offset: 0x4c0, Size: 60]
	<FString,ActiveVehicleList> ActiveVehiclesMap;//[Offset: 0x508, Size: 60]
	AutoDriveAIDataRow[] AutoDriveAIADataSet;//[Offset: 0x754, Size: 12]
	STExtraAIWaypointSegment* SegmentStart;//[Offset: 0x760, Size: 4]
	int SegmentPointIdxStart;//[Offset: 0x764, Size: 4]
	STExtraAIWaypointSegment* SegmentEnd;//[Offset: 0x768, Size: 4]
	int SegmentPointIdxEnd;//[Offset: 0x76c, Size: 4]
	bool bVehicleAIForcecNoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool bVehicleAIShowIconInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	float fVehicleHPScaleForTowTeam;//[Offset: 0x774, Size: 4]
	float fVehicleHPScaleForFourTeam;//[Offset: 0x778, Size: 4]
	bool bSyncBuildPathGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	bool bDebugAllWayPointKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77d, Size: 1]
	bool bDebugAllLinkPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77e, Size: 1]
	bool bDebugFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77f, Size: 1]
	int DSSwitchId_SemiTruck;//[Offset: 0x780, Size: 4]
	int DSSwitchId_ModelY;//[Offset: 0x784, Size: 4]
};

class QueuedVehicleSpawn
{
	Guid ID;//[Offset: 0x0, Size: 16]
	FString SpawnId;//[Offset: 0x10, Size: 12]
	class Pawn* VehicleClass;//[Offset: 0x1c, Size: 4]
	BehaviorTree* BehaviorTree;//[Offset: 0x20, Size: 4]
	BlackboardData* BlackboardData;//[Offset: 0x24, Size: 4]
	SpawnFilter SpawnSettings;//[Offset: 0x28, Size: 28]
};

class SpawnFilter
{
	bool bLimitSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName[] ValidSpawnPoints;//[Offset: 0x4, Size: 12]
	FName[] InvalidSpawnPoints;//[Offset: 0x10, Size: 12]
};

class STExtraVehicleAISpawner.Actor.Object
{
	Guid ID;//[Offset: 0x310, Size: 16]
	FString SpawnTag;//[Offset: 0x320, Size: 12]
	bool bIsSingleUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	SceneComponent* SpawnPoint;//[Offset: 0x330, Size: 4]
	WaypointNetworkConnection StartingPath;//[Offset: 0x334, Size: 12]
	float InitializeVehicleBehaviorDelay;//[Offset: 0x340, Size: 4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	PathPoint[] spawnWayPaths;//[Offset: 0x348, Size: 12]
	bool bStartEngineWhenSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x358, Size: 4]
};

class WaypointNetworkConnection
{
	STExtraAIWaypointSegment* ConnectedSegment;//[Offset: 0x0, Size: 4]
	int WaypointIndex;//[Offset: 0x4, Size: 4]
	bool bPathSegmentInReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
};

class STExtraAIWaypointSegment.Actor.Object
{
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bAlwaysDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	SplineComponent* WaypointsSpline;//[Offset: 0x314, Size: 4]
	<int,WaypointNetworkConnectionList> ConnectedSegments;//[Offset: 0x318, Size: 60]
	<int,NodeTargetSpeedOverrides> TargetSpeedOverridesMap;//[Offset: 0x354, Size: 60]
	Pawn*[] PawnsOnForwardPath;//[Offset: 0x390, Size: 12]
	Pawn*[] PawnsOnReversePath;//[Offset: 0x39c, Size: 12]
};

class WaypointNetworkConnectionList
{
	WaypointNetworkConnection[] Connections;//[Offset: 0x0, Size: 12]
};

class NodeTargetSpeedOverrides
{
	float ForwardTargetSpeedOverride;//[Offset: 0x0, Size: 4]
	float ForwardMaxSpeedOverride;//[Offset: 0x4, Size: 4]
	float ReverseTargetSpeedOverride;//[Offset: 0x8, Size: 4]
	float ReverseMaxSpeedOverride;//[Offset: 0xc, Size: 4]
};

class PathPoint
{
	STExtraAIWaypointSegment* Path;//[Offset: 0x0, Size: 4]
	int InputKey;//[Offset: 0x4, Size: 4]
};

class PathInputPlayZoneDistanceQuery
{
	int ForwardDistance;//[Offset: 0x0, Size: 4]
	bool bForwardQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int ReverseDistance;//[Offset: 0x8, Size: 4]
	bool bReverseQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
};

class ActiveVehicleList
{
	Pawn*[] Vehicles;//[Offset: 0x10, Size: 12]
};

class AutoDriveAIDataRow
{
	class Pawn* VehicleClass;//[Offset: 0x0, Size: 40]
	BehaviorTree* BehaviorTreeAsset;//[Offset: 0x28, Size: 40]
	BlackboardData* BlackboardDataAsset;//[Offset: 0x50, Size: 40]
};

class AINavStateData
{
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 4]
	Vector TargetPosition;//[Offset: 0x4, Size: 12]
	Vector StartPosition;//[Offset: 0x10, Size: 12]
	int[] PathWayPoints;//[Offset: 0x1c, Size: 12]
	int PathWayPointNum;//[Offset: 0x28, Size: 4]
};

class TrailerRepMovement
{
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
};

class IdeaDecalActor.Actor.Object
{
	SceneComponent* DecalRootComp;//[Offset: 0x310, Size: 4]
	int DecalId;//[Offset: 0x314, Size: 4]
	int TeamID;//[Offset: 0x318, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x320, Size: 176]
	STExtraPlayerState* OwnerPS;//[Offset: 0x3d0, Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x3d4, Size: 8]
	AkComponent* AkComponent;//[Offset: 0x3dc, Size: 4]
	int PostEventID;//[Offset: 0x3e0, Size: 4]
};

class IdeaDecalInfo
{
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	int TranslucentSortPriority;//[Offset: 0x60, Size: 4]
	int ClipPlaneNum;//[Offset: 0x64, Size: 4]
	float DynamicDeepScale;//[Offset: 0x68, Size: 4]
	FName SocketName;//[Offset: 0x70, Size: 8]
	enum ParentType;//[Offset: 0x78, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x7c, Size: 8]
	FName CollisionProfileName;//[Offset: 0x90, Size: 8]
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	FName DecalTag;//[Offset: 0xa0, Size: 8]
};

class STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
{
	int CommonRank;//[Offset: 0xec8, Size: 4]
	enum LiveState;//[Offset: 0xecc, Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xed0, Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xed8, Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0xedc, Size: 4]
	STExtraPetSpectatorCharacter* PetSpectatingCharacterOwner;//[Offset: 0xee0, Size: 4]
	bool bIsRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee4, Size: 1]
	float PlayerHealth;//[Offset: 0xee8, Size: 4]
	float PlayerHealthMax;//[Offset: 0xeec, Size: 4]
	float PlayerTemperature;//[Offset: 0xef0, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xef4, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xef8, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xf10, Size: 24]
	enum EUAVUseType;//[Offset: 0xf28, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf29, Size: 1]
	enum eCurVehicleType;//[Offset: 0xf2a, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xf2b, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xf2c, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xf38, Size: 12]
	Vector MapMark;//[Offset: 0xf44, Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 1]
	Vector RestartLocation;//[Offset: 0xf54, Size: 12]
	Rotator RestartRotate;//[Offset: 0xf60, Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0xf6c, Size: 60]
	<int,int> UseWheelMsgMap;//[Offset: 0xfa8, Size: 60]
	unsigned char PlayerUseQuickSight;//[Offset: 0xfe4, Size: 1]
	unsigned char PlayerUseShoulderCnt;//[Offset: 0xfe5, Size: 1]
	unsigned char ShowMsgCnt;//[Offset: 0xfe6, Size: 1]
	unsigned char UserConfirmCnt;//[Offset: 0xfe7, Size: 1]
	unsigned char UserCancelCnt;//[Offset: 0xfe8, Size: 1]
	unsigned char UserDoNothingCnt;//[Offset: 0xfe9, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xfec, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xff0, Size: 4]
	RescueTime RescueTime;//[Offset: 0xff4, Size: 12]
	int AirDropBoxFirstPickUpNum;//[Offset: 0x1018, Size: 4]
	SyncTeamMatePlayerState[] TeamMatePlayerStateList;//[Offset: 0x101c, Size: 12]
	unsigned char InTeamIndex;//[Offset: 0x1028, Size: 1]
	HistoricalTeammateInfo[] HistoricalTeammateInfoArray;//[Offset: 0x102c, Size: 12]
	HistoricalTeammateInfo[] CurrentNotInTeamHistoricalTeammateInfoArray;//[Offset: 0x1038, Size: 12]
	int PlayerLayerID;//[Offset: 0x1080, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0x1084, Size: 16]
	int Breath;//[Offset: 0x1094, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0x1098, Size: 12]
	float EnegyBuffStage1;//[Offset: 0x10a4, Size: 4]
	float EnegyBuffStage2;//[Offset: 0x10a8, Size: 4]
	float EnegyBuffStage3;//[Offset: 0x10ac, Size: 4]
	float EnegyBuffStage4;//[Offset: 0x10b0, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x10b4, Size: 4]
	float CurEnegyBuff;//[Offset: 0x10b8, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x10bc, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x10c0, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x10c4, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x10c8, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x10cc, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x10d0, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x10d4, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x10d8, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x10dc, Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x10e8, Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f5, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1114, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1115, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0x1118, Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1124, Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1125, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1126, Size: 1]
	uint32 LastInstigatorEnemyKey;//[Offset: 0x112c, Size: 4]
	int PlayersCountOnPlane;//[Offset: 0x1130, Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0x1134, Size: 12]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0x1140, Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0x114c, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x1150, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0x1154, Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1158, Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0x115c, Size: 12]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0x1168, Size: 12]
	int MaxDecalCount;//[Offset: 0x118c, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0x1190, Size: 12]
	float LeanOutL_AimAngle;//[Offset: 0x11f0, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0x11f4, Size: 4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0x11f8, Size: 12]
	int RemainingRevivalTime;//[Offset: 0x1204, Size: 4]
	int RemainingRevivalCount;//[Offset: 0x1208, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120c, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120d, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120e, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120f, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0x1214, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1218, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0x1220, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0x1228, Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0x1234, Size: 12]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x1240, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x124c, Size: 12]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0x1258, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0x1264, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x1270, Size: 12]
	<int> LastMarkInstanceID;//[Offset: 0x127c, Size: 60]
	<int> CurrentMarkInstanceID;//[Offset: 0x12b8, Size: 60]
	<int,MarkSyncData> CurrentMarkInstanceIDMap;//[Offset: 0x12f4, Size: 60]
	<int,MarkSyncData> LastMarkInstanceIDMap;//[Offset: 0x1330, Size: 60]
	float KdValue;//[Offset: 0x136c, Size: 4]
	Vector LastVehicleLocation;//[Offset: 0x1384, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0x1398, Size: 12]
	delegate OnPlayerUnderAttack;//[Offset: 0x13a4, Size: 12]
	delegate OnSetPlane;//[Offset: 0x13b0, Size: 12]
	Vector[] MapMultiMark;//[Offset: 0x13bc, Size: 12]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1404, Size: 1]
	Vector AirplaneStartLoc;//[Offset: 0x1408, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x1414, Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x1420, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x142c, Size: 12]
	Vector LastValidAirplaneCanJumpLoc;//[Offset: 0x1438, Size: 12]
	Vector LastValidAirplaneForceJumpLoc;//[Offset: 0x1444, Size: 12]
	Actor* Plane;//[Offset: 0x1450, Size: 4]
	int FlightNo;//[Offset: 0x1454, Size: 4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1458, Size: 1]
	FName[] CurMapTags;//[Offset: 0x145c, Size: 12]
	FName[] ShowingMapTags;//[Offset: 0x1468, Size: 12]
	delegate OnMapTagsChangedDelegate;//[Offset: 0x1474, Size: 12]
	int TeammateDisappearReportCount;//[Offset: 0x1480, Size: 4]
	float TeammateDisappearReportDistance;//[Offset: 0x1488, Size: 4]
	TeamMateDisappearInfo SelfDisappearInfo;//[Offset: 0x148c, Size: 68]
	<uint64> TeammateKillUIDSet;//[Offset: 0x14d0, Size: 60]
	uint64 LastKnockOutPlayerUID;//[Offset: 0x1510, Size: 8]
	bool bInAFK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1518, Size: 1]
};

class UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
{
	bool IsForcedNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	float surviveTime;//[Offset: 0x408, Size: 4]
	float surviveTimeFromPlane;//[Offset: 0x40c, Size: 4]
	float Pronetime;//[Offset: 0x410, Size: 4]
	int MovingCount;//[Offset: 0x41c, Size: 4]
	float marchDistance;//[Offset: 0x420, Size: 4]
	float travelDistance;//[Offset: 0x424, Size: 4]
	float DriveDistance;//[Offset: 0x428, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x42c, Size: 4]
	int destroyVehicleNum;//[Offset: 0x430, Size: 4]
	int rescueTimes;//[Offset: 0x434, Size: 4]
	uint64[] RescueTeammatesList;//[Offset: 0x438, Size: 12]
	int NormalItemsNum;//[Offset: 0x444, Size: 4]
	int SeniorItemsNum;//[Offset: 0x448, Size: 4]
	int GVMemberID;//[Offset: 0x44c, Size: 4]
	FName PlayerType;//[Offset: 0x450, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x458, Size: 8]
	uint32 PlayerKey;//[Offset: 0x460, Size: 4]
	FString PlayerUID;//[Offset: 0x464, Size: 12]
	FString MLAIStringUID;//[Offset: 0x470, Size: 12]
	bool bPSEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	FString iconUrl;//[Offset: 0x480, Size: 12]
	int gender;//[Offset: 0x48c, Size: 4]
	int PlayerLevel;//[Offset: 0x490, Size: 4]
	int SegmentLevel;//[Offset: 0x494, Size: 4]
	int AceImprintShowId;//[Offset: 0x498, Size: 4]
	int AceImprintBaseId;//[Offset: 0x49c, Size: 4]
	int AvatarBoxId;//[Offset: 0x4a0, Size: 4]
	int planeAvatarId;//[Offset: 0x4a4, Size: 4]
	int CampID;//[Offset: 0x4a8, Size: 4]
	int resID;//[Offset: 0x4ac, Size: 4]
	uint64 UID;//[Offset: 0x4b0, Size: 8]
	uint64 MLAIDisplayUID;//[Offset: 0x4b8, Size: 8]
	FString OpenID;//[Offset: 0x4c0, Size: 12]
	int ZoneID;//[Offset: 0x4cc, Size: 4]
	FString Nation;//[Offset: 0x4d0, Size: 12]
	int TeamID;//[Offset: 0x4dc, Size: 4]
	int64 IdxInTeam;//[Offset: 0x4e0, Size: 8]
	uint64 PreTeamID;//[Offset: 0x4e8, Size: 8]
	int PreTeamChatState;//[Offset: 0x4f0, Size: 4]
	int PlayerBornPointID;//[Offset: 0x4f4, Size: 4]
	int Kills;//[Offset: 0x4f8, Size: 4]
	int KillsBeforeDie;//[Offset: 0x4fc, Size: 4]
	int Knockouts;//[Offset: 0x500, Size: 4]
	int AIKills;//[Offset: 0x504, Size: 4]
	int DeathsCount;//[Offset: 0x508, Size: 4]
	int MlAIDeliverNum;//[Offset: 0x510, Size: 4]
	int OriginalMlAIDeliverNum;//[Offset: 0x514, Size: 4]
	int Assists;//[Offset: 0x518, Size: 4]
	uint64[] AssistTeammatesList;//[Offset: 0x51c, Size: 12]
	int[] OvertimeAssistsTime;//[Offset: 0x564, Size: 12]
	unsigned char PlatformGender;//[Offset: 0x570, Size: 1]
	int MatchStrategyLabel;//[Offset: 0x574, Size: 4]
	int MatchLabel;//[Offset: 0x578, Size: 4]
	uint32 Killer;//[Offset: 0x57c, Size: 4]
	uint32 KillerIGPlayerKey;//[Offset: 0x580, Size: 4]
	FString BeKilledOpenID;//[Offset: 0x584, Size: 12]
	FString KillerName;//[Offset: 0x590, Size: 12]
	uint32 KillerType;//[Offset: 0x59c, Size: 4]
	int KillerWeaponID;//[Offset: 0x5a0, Size: 4]
	uint32 KillerDeliveryType;//[Offset: 0x5a4, Size: 4]
	uint32 DeadCircleIndex;//[Offset: 0x5a8, Size: 4]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x5b0, Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x5b8, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x5bc, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x5c0, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x5c4, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x5c8, Size: 4]
	int HeadShotNum;//[Offset: 0x5cc, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x5d0, Size: 4]
	int KillNumByGrende;//[Offset: 0x5d4, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x5d8, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x5dc, Size: 4]
	int UseFlashGrenadeNum;//[Offset: 0x5e0, Size: 4]
	int UseBurnGrenadeNum;//[Offset: 0x5e4, Size: 4]
	int MaxKillDistance;//[Offset: 0x5e8, Size: 4]
	int HealTimes;//[Offset: 0x5ec, Size: 4]
	float DamageAmount;//[Offset: 0x5f0, Size: 4]
	float RealPlayerDamageAmount;//[Offset: 0x5f4, Size: 4]
	int MeleeKillTimes;//[Offset: 0x5f8, Size: 4]
	float MeleeDamageAmount;//[Offset: 0x5fc, Size: 4]
	float RangedDamagedAmount;//[Offset: 0x600, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x604, Size: 4]
	float HealAmount;//[Offset: 0x608, Size: 4]
	FString[] KillFlow;//[Offset: 0x60c, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x618, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x624, Size: 12]
	float InDamageAmount;//[Offset: 0x630, Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x640, Size: 12]
	int PickUpItemTimes;//[Offset: 0x64c, Size: 4]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x654, Size: 60]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x690, Size: 72]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x6dc, Size: 60]
	GameModeLikeResultData[] Like;//[Offset: 0x718, Size: 12]
	uint32 Switch;//[Offset: 0x724, Size: 4]
	uint32[] Self;//[Offset: 0x728, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x734, Size: 12]
	UseItemFlow[] UseItemFlow;//[Offset: 0x740, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x74c, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x758, Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x764, Size: 12]
	<int,int> TLog_BulletCount;//[Offset: 0x770, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x7ac, Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x7b8, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x7bc, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x7c8, Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x7cc, Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x7d0, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x7d4, Size: 4]
	int[] BuildFlow;//[Offset: 0x7d8, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x7e4, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x7f0, Size: 4]
	float HitShelterDamage;//[Offset: 0x7f4, Size: 4]
	Vector LandLocation;//[Offset: 0x7f8, Size: 12]
	Vector ParachuteLocation;//[Offset: 0x804, Size: 12]
	int LandTime;//[Offset: 0x810, Size: 4]
	Vector DeadLocation;//[Offset: 0x814, Size: 12]
	FString DeadDamangeType;//[Offset: 0x820, Size: 12]
	int PveDeadAttacker;//[Offset: 0x82c, Size: 4]
	int PveStageId;//[Offset: 0x830, Size: 4]
	FString DeadTimeStr;//[Offset: 0x834, Size: 12]
	int NearDeathDamageType;//[Offset: 0x840, Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x844, Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	int BeDownTimes;//[Offset: 0x84c, Size: 4]
	int BeSavedTimes;//[Offset: 0x850, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x854, Size: 80]
	int PersonalRank;//[Offset: 0x8a4, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	int GamePlayingTime;//[Offset: 0x8b4, Size: 4]
	int ObserverTime;//[Offset: 0x8b8, Size: 4]
	int TouchDownAreaID;//[Offset: 0x8bc, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x8c0, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x8c4, Size: 12]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	float ReportTouchDownHeight;//[Offset: 0x8d4, Size: 4]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x8d8, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x8e4, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x8f0, Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x8fc, Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x908, Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x914, Size: 4]
	float InHelicopterTime;//[Offset: 0x918, Size: 4]
	int RevivalNum;//[Offset: 0x91c, Size: 4]
	int BeRevivedNum;//[Offset: 0x920, Size: 4]
	int KillNumInVehicle;//[Offset: 0x924, Size: 4]
	float MaxVehicleToLandHeight;//[Offset: 0x928, Size: 4]
	float MaxVehicleInAirInterval;//[Offset: 0x92c, Size: 4]
	int KillPlayerNum;//[Offset: 0x930, Size: 4]
	int KillAINum;//[Offset: 0x934, Size: 4]
	float TotalSprintDistance;//[Offset: 0x938, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x93c, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x940, Size: 4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x944, Size: 12]
	int ProneTimes;//[Offset: 0x950, Size: 4]
	int CrouchTimes;//[Offset: 0x954, Size: 4]
	int JumpTimes;//[Offset: 0x958, Size: 4]
	int KillMonsterNum;//[Offset: 0x95c, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0x960, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x99c, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x9a0, Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x9a4, Size: 60]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x9e0, Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0xa1c, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0xa20, Size: 4]
	int LightCandleNum;//[Offset: 0xa24, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xa28, Size: 60]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0xa64, Size: 12]
	float BattleStateTime;//[Offset: 0xa70, Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa74, Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0xa78, Size: 4]
	int FistKillingCount;//[Offset: 0xa7c, Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0xa80, Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0xa84, Size: 60]
	FString[] DestroyVehicleFlow;//[Offset: 0xac0, Size: 12]
	int UseHelicoperNum;//[Offset: 0xacc, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0xad0, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0xadc, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0xae8, Size: 32]
	float UseHelicoperDistance;//[Offset: 0xb08, Size: 4]
	unsigned char CharmRankIndex;//[Offset: 0xb0c, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0xb10, Size: 60]
	int FollowState;//[Offset: 0xb4c, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0xb50, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0xb54, Size: 4]
	int KillMagicWalkAI;//[Offset: 0xb58, Size: 4]
	int SendMagicWalkAI;//[Offset: 0xb5c, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0xb60, Size: 12]
	int KillSnowManCount;//[Offset: 0xb6c, Size: 4]
	uint64 LuckmateUID;//[Offset: 0xb70, Size: 8]
	<enum,int> EventCounterMap;//[Offset: 0xb78, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0xbb4, Size: 60]
	delegate OnGenerelCountChanged;//[Offset: 0xbf8, Size: 12]
	int VeteranRecruitIndex;//[Offset: 0xc04, Size: 4]
	delegate PlayerStateTeamChanged;//[Offset: 0xc08, Size: 12]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xc14, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xc20, Size: 52]
	int MemberIdInVoiceRoom;//[Offset: 0xc54, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xc5c, Size: 48]
	int UpassShow;//[Offset: 0xc8c, Size: 4]
	int upassKeepBuy;//[Offset: 0xc90, Size: 4]
	int upassCurValue;//[Offset: 0xc94, Size: 4]
	int pass_type;//[Offset: 0xc98, Size: 4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c, Size: 1]
	TLog_Micphone MicphoneTlog;//[Offset: 0xca0, Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0xcb8, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xcbc, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xcc0, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xcc4, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xcc8, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0xccc, Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0xcd0, Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0xcd4, Size: 4]
	DamageInfo LuaNearDeathDamageInfo;//[Offset: 0xcf0, Size: 144]
	DamageInfo LuaDeathDamageInfo;//[Offset: 0xd80, Size: 144]
	FName RepPropertyCategory;//[Offset: 0xe10, Size: 8]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe40, Size: 120]
	FString RealPlayerName;//[Offset: 0xebc, Size: 12]
};

class LuaPlayerState.PlayerState.Info.Actor.Object
{
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x3bc, Size: 60]
	FString LuaFilePath;//[Offset: 0x3f8, Size: 12]
};

class KnockOutData
{
	uint64 AttackerID;//[Offset: 0x0, Size: 8]
	int Times;//[Offset: 0x8, Size: 4]
};

class TLog_PickUpItemFlow
{
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	FString TimeStr;//[Offset: 0x1c, Size: 12]
	uint64 InstanceID;//[Offset: 0x28, Size: 8]
	uint64 OwnerUID;//[Offset: 0x30, Size: 8]
};

class TLog_BornLandGrenadeData
{
	int PickupCount;//[Offset: 0x0, Size: 4]
	int ThrowCount;//[Offset: 0x4, Size: 4]
	int HitOthersCount;//[Offset: 0x8, Size: 4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 4]
};

class AIDeliveryTlogData
{
	uint64 UID;//[Offset: 0x0, Size: 8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 60]
};

class AIDeliveryInfo
{
	int DeliveryStartTime;//[Offset: 0x0, Size: 4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int DeliveryArrivalTime;//[Offset: 0x8, Size: 4]
	int EventTypeId;//[Offset: 0xc, Size: 4]
};

class GameModeLikeResultData
{
	uint32[] Like;//[Offset: 0x0, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
};

class GameModeTeammateLableCheckData
{
	uint32 Mask;//[Offset: 0x0, Size: 4]
	uint64 UID;//[Offset: 0x8, Size: 8]
};

class UseItemFlow
{
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]
};

class UseBuffFlow
{
	int BuffID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]
};

class BuildingEnterFlow
{
	int BuildingID;//[Offset: 0x0, Size: 4]
	int EnterCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]
};

class TLog_PropEquipUnequipFlow
{
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FString TimeStr;//[Offset: 0x8, Size: 12]
};

class TLog_SpecialStats
{
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 4]
};

class VehicleDriveDisData
{
	uint64 DriverID;//[Offset: 0x0, Size: 8]
	int VehicleType;//[Offset: 0x8, Size: 4]
	int AvatarID;//[Offset: 0xc, Size: 4]
	float DriveDistance;//[Offset: 0x10, Size: 4]
	float DriveTime;//[Offset: 0x14, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x1c, Size: 12]
};

class EquipmentData
{
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20, Size: 12]
	int ViceWeaponID;//[Offset: 0x2c, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30, Size: 12]
	int CloseWeaponID;//[Offset: 0x3c, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40, Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c, Size: 1]
};

class ReportCollection
{
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
};

class WeaponDamageRecord
{
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int HeadShootCount;//[Offset: 0xc, Size: 4]
	int LimbsShootCount;//[Offset: 0x10, Size: 4]
	int BodyShootCount;//[Offset: 0x14, Size: 4]
	int HandShootCount;//[Offset: 0x18, Size: 4]
	int FootShootCount;//[Offset: 0x1c, Size: 4]
	int UniqueHitCount;//[Offset: 0x20, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x24, Size: 12]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int TotalOwnTime;//[Offset: 0x34, Size: 4]
	int KillCount;//[Offset: 0x38, Size: 4]
	int KnockNumber;//[Offset: 0x3c, Size: 4]
	int[] Associations;//[Offset: 0x40, Size: 12]
	int AvatarID;//[Offset: 0x4c, Size: 4]
	int DIYPlanID;//[Offset: 0x50, Size: 4]
};

class SpecialPickItemState
{
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
};

class DestroyVehicleWheelFlow
{
	int AreaID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
};

class ActivityEventReportData
{
	unsigned char EventID;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
};

class TLog_KillInfo
{
	int FakePlayerID;//[Offset: 0x0, Size: 4]
	int DeadTime;//[Offset: 0x4, Size: 4]
	int AILastFightTime;//[Offset: 0x8, Size: 4]
	int[] PlayerAreas;//[Offset: 0xc, Size: 12]
	int ArmorID;//[Offset: 0x18, Size: 4]
	int HelmetID;//[Offset: 0x1c, Size: 4]
};

class PlayEmoteData
{
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
};

class TLog_Micphone
{
	float TeammateMicrophoneTime;//[Offset: 0x0, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x4, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x8, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xc, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x10, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x14, Size: 4]
};

class DamageInfo
{
	uint32 DamageType;//[Offset: 0x0, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float Distance;//[Offset: 0x8, Size: 4]
	uint32 Time;//[Offset: 0xc, Size: 4]
	uint32 DamageValue;//[Offset: 0x10, Size: 4]
	uint32 AttackerID;//[Offset: 0x14, Size: 4]
	Vector AttackerLoc;//[Offset: 0x18, Size: 12]
	uint32 AttackerBulletNumInClip;//[Offset: 0x24, Size: 4]
	uint32 AttackerSightType;//[Offset: 0x28, Size: 4]
	uint32 AttackerWeaponType;//[Offset: 0x2c, Size: 4]
	uint32 AttackerWeaponScopeID;//[Offset: 0x30, Size: 4]
	uint32 AttackerShotTimes;//[Offset: 0x34, Size: 4]
	uint64 AttackerState;//[Offset: 0x38, Size: 8]
	bool bAttackerMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	uint64 VictimID;//[Offset: 0x48, Size: 8]
	uint32 VictimType;//[Offset: 0x50, Size: 4]
	uint32 VictimDeliveryType;//[Offset: 0x54, Size: 4]
	int CircleIndex;//[Offset: 0x58, Size: 4]
	Vector VictimLoc;//[Offset: 0x5c, Size: 12]
	uint32 VictimState;//[Offset: 0x68, Size: 4]
	bool bVictimInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	int VictimVehicleType;//[Offset: 0x70, Size: 4]
	float VictimVelocity;//[Offset: 0x74, Size: 4]
	uint32 AttackerAreaID;//[Offset: 0x78, Size: 4]
	uint32 AlivePlayerNum;//[Offset: 0x7c, Size: 4]
	uint32 VictimTeamID;//[Offset: 0x80, Size: 4]
	int FloorType;//[Offset: 0x84, Size: 4]
	uint32 AttackerWeaponAvatarID;//[Offset: 0x88, Size: 4]
	uint32 AttackerVehicleShapeType;//[Offset: 0x8c, Size: 4]
};

class GameBaseInfo
{
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	FString GameAppID;//[Offset: 0xc, Size: 12]
	FString OpenID;//[Offset: 0x18, Size: 12]
	uint16 AreaID;//[Offset: 0x24, Size: 2]
	int8 PlatID;//[Offset: 0x26, Size: 1]
	FString ZoneID;//[Offset: 0x28, Size: 12]
	uint64 BattleID;//[Offset: 0x38, Size: 8]
	FString UserName;//[Offset: 0x40, Size: 12]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	int8 RoleType;//[Offset: 0x58, Size: 1]
	FString PicUrl;//[Offset: 0x5c, Size: 12]
	FString GameAPPIDFromDS;//[Offset: 0x68, Size: 12]
};

class CharacterAutoFollowStruct
{
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4, Size: 4]
};

class STExtraPetSpectatorCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
{
	delegate OnMovementBaseChanged;//[Offset: 0xcd0, Size: 12]
	PetLevelInfo PetLevelInfo;//[Offset: 0xcdc, Size: 8]
	delegate PetSpectatorStateChangeDelegate;//[Offset: 0xcfc, Size: 12]
	SpectatorPetStateInfo CurrentStateInfo;//[Offset: 0xd08, Size: 8]
	FName FeatureActorName;//[Offset: 0xd10, Size: 8]
	float BornMaxHight;//[Offset: 0xd18, Size: 4]
	float BornMinHight;//[Offset: 0xd1c, Size: 4]
	float BornCamerHight;//[Offset: 0xd20, Size: 4]
	float BornMaxForwardDis;//[Offset: 0xd24, Size: 4]
	float BornMinForwardDis;//[Offset: 0xd28, Size: 4]
	float WarterBornMoreHight;//[Offset: 0xd2c, Size: 4]
	PlayerPetMovementComponent* PetMovementComponent;//[Offset: 0xd30, Size: 4]
	float MaxSpecDistance;//[Offset: 0xd34, Size: 4]
	STExtraPetSpectatorAnimInstance* PetAnimInstance;//[Offset: 0xd3c, Size: 4]
	delegate OnSwimStateChange;//[Offset: 0xd40, Size: 12]
};

class PetLevelInfo
{
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]
};

class SpectatorPetStateInfo
{
	enum CurrentState;//[Offset: 0x0, Size: 1]
	int Param;//[Offset: 0x4, Size: 4]
};

class PlayerPetMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
{
	float ClearIgnoredActorsTime;//[Offset: 0x680, Size: 4]
	STExtraPetSpectatorCharacter* PetOwner;//[Offset: 0x688, Size: 4]
	bool bFollowMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool bEnableSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	float TraceWaterHalfHeight;//[Offset: 0x690, Size: 4]
	float TraceWaterMaxHalfHeight;//[Offset: 0x694, Size: 4]
	bool bEnableServerAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	float SecurityAllowedMoveSpeedRatio;//[Offset: 0x69c, Size: 4]
	float SecurityAllowedJumpHeightRatio;//[Offset: 0x6a0, Size: 4]
};

class STExtraPetSpectatorAnimInstance.AnimInstance.Object
{
	STExtraPetSpectatorCharacter* C_PetCharacter;//[Offset: 0x300, Size: 4]
	int C_DeviceLevel;//[Offset: 0x304, Size: 4]
	bool bIsPetAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	Vector Velocity;//[Offset: 0x30c, Size: 12]
	float PetMoveSpeed;//[Offset: 0x318, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool bIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 1]
	float SwimmingAnimRate;//[Offset: 0x320, Size: 4]
	AnimSequenceBase* C_AppearAnim;//[Offset: 0x324, Size: 4]
	AnimSequenceBase* C_DisppearAnim;//[Offset: 0x328, Size: 4]
	AnimSequenceBase* C_IdleAnim;//[Offset: 0x32c, Size: 4]
	AnimSequenceBase* C_FreeFallAnim;//[Offset: 0x330, Size: 4]
	AnimSequenceBase* C_FastFreeFallAnim;//[Offset: 0x334, Size: 4]
	AnimSequenceBase* C_FollowAnim;//[Offset: 0x338, Size: 4]
	AnimSequenceBase* C_FlyAroundAnim;//[Offset: 0x33c, Size: 4]
	AnimSequenceBase* C_SwimmingAnim;//[Offset: 0x340, Size: 4]
	BlendSpaceBase* C_SwimmingBS;//[Offset: 0x344, Size: 4]
	BlendSpaceBase* C_MovementBS;//[Offset: 0x348, Size: 4]
	AnimSequence* C_JumpAnim;//[Offset: 0x34c, Size: 4]
	AnimSequence* C_InAirAnim;//[Offset: 0x350, Size: 4]
	AnimSequence* C_LandingAnim;//[Offset: 0x354, Size: 4]
};

class BlendSpaceBase.AnimationAsset.Object
{
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float AnimLength;//[Offset: 0x64, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80, Size: 4]
	unsigned char NotifyTriggerMode;//[Offset: 0x84, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88, Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94, Size: 4]
	BlendSample[] SampleData;//[Offset: 0x98, Size: 12]
	EditorElement[] GridSamples;//[Offset: 0xa4, Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0, Size: 24]
};

class InterpolationParameter
{
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	unsigned char InterpolationType;//[Offset: 0x4, Size: 1]
};

class PerBoneInterpolation
{
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]
};

class BlendSample
{
	AnimSequence* Animation;//[Offset: 0x0, Size: 4]
	Vector SampleValue;//[Offset: 0x4, Size: 12]
	float RateScale;//[Offset: 0x10, Size: 4]
};

class EditorElement
{
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]
};

class BlendParameter
{
	FString DisplayName;//[Offset: 0x0, Size: 12]
	float Min;//[Offset: 0xc, Size: 4]
	float Max;//[Offset: 0x10, Size: 4]
	int GridNum;//[Offset: 0x14, Size: 4]
};

class CharacterLocAndRot
{
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]
};

class RescueTime
{
	bool bBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float RescueStartTime;//[Offset: 0x4, Size: 4]
	float RescueExpectedEndTime;//[Offset: 0x8, Size: 4]
};

class SyncTeamMatePlayerState
{
	STExtraPlayerState* TeammatePlayerState;//[Offset: 0x0, Size: 8]
	unsigned char PlayerInTeamIndex;//[Offset: 0x8, Size: 1]
};

class HistoricalTeammateInfo
{
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bIsDeliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	uint64 OriginalUID;//[Offset: 0x28, Size: 8]
	int InTeamIndex;//[Offset: 0x30, Size: 4]
};

class VisualFieldInfo
{
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4, Size: 12]
};

class VisualFieldMetaInfo
{
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]
};

class DriveCarNotify
{
	unsigned char DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8, Size: 4]
};

class STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
{
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0x10d8, Size: 4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0x10dc, Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0x10e8, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0x1110, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0x1118, Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0x1120, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0x1124, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1128, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0x112c, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0x1130, Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0x113c, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0x1140, Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0x1154, Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x1158, Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x115c, Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0x1160, Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x1164, Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x1168, Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x116c, Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x1170, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x1174, Size: 4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x1178, Size: 92]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x11d4, Size: 76]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1220, Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1238, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x123c, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x1264, Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0x126c, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x127c, Size: 4]
	FString LoopSmokeCmpName;//[Offset: 0x1280, Size: 12]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x128c, Size: 12]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 1]
	float ExtraBoostFactor;//[Offset: 0x129c, Size: 4]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x12f0, Size: 8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x12f8, Size: 8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x1300, Size: 8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x1308, Size: 8]
	delegate OnVehicleInputMoveDelegate;//[Offset: 0x1314, Size: 12]
	WheeledNeutralThrottleComponent* NeutralThrottleComp;//[Offset: 0x1320, Size: 4]
	enum RepNeutralThrottleStatus;//[Offset: 0x1324, Size: 1]
	STExtraPlayerCharacter* NeutralThrottleCharacter;//[Offset: 0x1328, Size: 4]
};

class STVehicleWheelDustConfig.DataAsset.Object
{
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20, Size: 12]
};

class STVehicleWheelDust
{
	unsigned char ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x4, Size: 4]
	ParticleSystem* SlipFx;//[Offset: 0x8, Size: 4]
	ParticleSystem* HubFx;//[Offset: 0xc, Size: 4]
	float minSpeed;//[Offset: 0x10, Size: 4]
};

class TrailMarkActor.Actor.Object
{
	int MaxQuadNum;//[Offset: 0x310, Size: 4]
	float MaxQuadLength;//[Offset: 0x314, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x318, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x31c, Size: 4]
	float DefaultTrailWidth;//[Offset: 0x320, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float DefaultTrailLength;//[Offset: 0x328, Size: 4]
	float TextureLength;//[Offset: 0x32c, Size: 4]
	int USegmentNum;//[Offset: 0x330, Size: 4]
	int CoordU;//[Offset: 0x334, Size: 4]
	int SlippingCoordU;//[Offset: 0x338, Size: 4]
	int BrokenCoordU;//[Offset: 0x33c, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x344, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x348, Size: 4]
	int AdditionalCoordU;//[Offset: 0x34c, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x350, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x354, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x35c, Size: 4]
};

class RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	delegate CollisionUpdated;//[Offset: 0x6a8, Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b6, Size: 1]
	enum CollisionMode;//[Offset: 0x6b7, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x6b8, Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x6dc, Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x6e8, Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x6f4, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x710, Size: 60]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x74c, Size: 12]
};

class RuntimeMeshCollisionSection
{
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	int[] IndexBuffer;//[Offset: 0xc, Size: 12]
};

class RuntimeConvexCollisionSection
{
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	Box BoundingBox;//[Offset: 0xc, Size: 28]
};

class RuntimeMeshComponentPrePhysicsTickFunction.TickFunction
{
};

class STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
{
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x384, Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x390, Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x3ac, Size: 4]
	float AntiRollStiffness;//[Offset: 0x3b0, Size: 4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x3b4, Size: 12]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x3c8, Size: 4]
	<uint32,CachedWheelData> mapCachedWheelData;//[Offset: 0x40c, Size: 60]
	float MaxRPMLimit;//[Offset: 0x534, Size: 4]
	float TorqueRate;//[Offset: 0x538, Size: 4]
	unsigned char[] SpecialModifyCollisionList;//[Offset: 0x53c, Size: 12]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x548, Size: 12]
	FName RootBodyName;//[Offset: 0x558, Size: 8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	bool IsInAir_bServerCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 1]
	bool IsInAir_bClientCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 1]
	int IsInAir_ShapeIndexToQuery;//[Offset: 0x564, Size: 4]
	float IsInAir_QueryInterval;//[Offset: 0x568, Size: 4]
	float IsInAir_QueryLength;//[Offset: 0x56c, Size: 4]
	delegate OnIsInAirChange;//[Offset: 0x570, Size: 12]
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	bool DynamicChangeDragCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	float DragCoefficientInAir;//[Offset: 0x588, Size: 4]
	float SmallSpeedIntervalThreshold;//[Offset: 0x598, Size: 4]
	float SmallSpeedThreshold;//[Offset: 0x59c, Size: 4]
};

class WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
{
	VehicleEngineData EngineSetup;//[Offset: 0x278, Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2e4, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x300, Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x328, Size: 88]
	float AckermannAccuracy;//[Offset: 0x380, Size: 4]
};

class CachedWheelData
{
	bool WheelsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float WheelSuspensionOffset;//[Offset: 0x4, Size: 4]
	PhysicalMaterial* WheelContactMaterial;//[Offset: 0x8, Size: 4]
};

class VehicleEngineData
{
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 88]
	float MaxRPM;//[Offset: 0x58, Size: 4]
	float MOI;//[Offset: 0x5c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68, Size: 4]
};

class VehicleDifferential4WData
{
	unsigned char DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]
};

class WheelSfxConfig.DataAsset.Object
{
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20, Size: 12]
};

class WheelSfxOnSurface
{
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 4]
	AkAudioEvent* EventStart;//[Offset: 0x4, Size: 4]
	AkAudioEvent* EventStop;//[Offset: 0x8, Size: 4]
};

class STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
{
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44, Size: 4]
};

class STReplicatedVehicleState
{
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandBrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]
	int Flag;//[Offset: 0x8, Size: 4]
};

class WheeledNeutralThrottleComponent.VehicleEffectComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
{
	delegate NeutralThrottleInit;//[Offset: 0x160, Size: 12]
	delegate OnNeutralThrottle;//[Offset: 0x16c, Size: 12]
	STExtraVehicleSfxLoop NT_WheelFrictionGroundLoop;//[Offset: 0x188, Size: 92]
	STExtraWheeledVehicle* WheeledVehicle;//[Offset: 0x1e4, Size: 4]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0x1e8, Size: 96]
	enum NeutralThrottleStatus;//[Offset: 0x248, Size: 1]
	AkAudioEvent* NT_FrictionAudio;//[Offset: 0x270, Size: 4]
};

class VehicleEffectComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
{
};

class GameModePlayerAliasShowInfo
{
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 52]
	FString PlayerName;//[Offset: 0x34, Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0x40, Size: 4]
};

class MonsterTreasureBoxData
{
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]
};

class BuildMaterialData
{
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]
};

class CharacterBuffRecord
{
	int BuffID;//[Offset: 0x0, Size: 4]
	int CauseSkillID;//[Offset: 0x4, Size: 4]
	int LayerCount;//[Offset: 0x8, Size: 4]
	Actor* Causer;//[Offset: 0xc, Size: 8]
};

class MarkSyncData
{
	enum Status;//[Offset: 0x0, Size: 1]
	enum MapAdded;//[Offset: 0x1, Size: 1]
	unsigned char InstanceID;//[Offset: 0x2, Size: 1]
	int TypeId;//[Offset: 0x4, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x8, Size: 24]
	Vector_NetQuantize Location;//[Offset: 0x20, Size: 12]
	Actor* Actor;//[Offset: 0x2c, Size: 8]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x38, Size: 12]
};

class CustomMarkEventData
{
	enum InWhichMap;//[Offset: 0x0, Size: 1]
	float CreateTime;//[Offset: 0x4, Size: 4]
	int CustomState;//[Offset: 0x8, Size: 4]
	FString CustomString;//[Offset: 0xc, Size: 12]
};

class TeamMateDisappearInfo
{
	bool bHasPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bCanGetPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bMovementCompTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bMovementActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAvatarHeadVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	enum SerializeStatus;//[Offset: 0x6, Size: 1]
	enum NetRelevantStatus;//[Offset: 0x7, Size: 1]
	float PawnCreateTime;//[Offset: 0x8, Size: 4]
	float PawnDestroyTime;//[Offset: 0xc, Size: 4]
	float ReportTime;//[Offset: 0x10, Size: 4]
	Vector Location;//[Offset: 0x14, Size: 12]
	Vector MeshLocation;//[Offset: 0x20, Size: 12]
	Vector ServerLocation;//[Offset: 0x2c, Size: 12]
	FString PlayerUID;//[Offset: 0x38, Size: 12]
};

class MoveAntiCheatComponent.ActorComponent.Object
{
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	float TolerateDistanceFractor;//[Offset: 0xc8, Size: 4]
	float MaxPacketLossRate;//[Offset: 0xcc, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xd0, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xd4, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xd8, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xdc, Size: 4]
	float SecondsSinceLastTeleport2SkipCheckDSAverageSpeed;//[Offset: 0xe0, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xe8, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xec, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xf0, Size: 4]
	int MaxLocusFailTime;//[Offset: 0xf4, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xf8, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0xfc, Size: 4]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x100, Size: 32]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x18c, Size: 140]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x218, Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x290, Size: 60]
	ClientMoveSpeedCheck ClientMoveSpeedCheck;//[Offset: 0x2d0, Size: 40]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x2f8, Size: 36]
	float MaxJumpHeight;//[Offset: 0x320, Size: 4]
	Character* CharacterOwner;//[Offset: 0x324, Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
};

class VerifySwitch
{
	int PunishThresHold;//[Offset: 0x4, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bRecordOnlyIfReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	int VerifyFailedCnt;//[Offset: 0xc, Size: 4]
};

class MoveCheatAntiStrategy
{
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	uint32 bIgnoreCheck;//[Offset: 0x4, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x8, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0xc, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x10, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x14, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x18, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x1c, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x20, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x24, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x28, Size: 4]
	float MaxClientSpeed;//[Offset: 0x2c, Size: 4]
};

class ShovelAntiCheat
{
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74, Size: 4]
};

class ClientTimeSpeedCheck
{
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 4]
};

class ClientMoveSpeedCheck
{
	float ThresholdScale;//[Offset: 0x20, Size: 4]
};

class RealtimeMoveSpeedCheck
{
};

class LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
{
	float KeepStillMinTime;//[Offset: 0x2ac, Size: 4]
	float StillMaxSpeed;//[Offset: 0x2b0, Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x2b4, Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x2c0, Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x2cc, Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x2d8, Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x2e4, Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x2f0, Size: 12]
	float WeaponOffsetStillScale;//[Offset: 0x2fc, Size: 4]
	float StandStilDynamicScale;//[Offset: 0x300, Size: 4]
	Vector StandStillBoundBoxExtentPicth;//[Offset: 0x304, Size: 12]
	Vector StandStillHeadBoundBoxExtentPicth;//[Offset: 0x310, Size: 12]
	Vector CrouchStillBoundBoxExtentPicth;//[Offset: 0x31c, Size: 12]
	Vector CrouchStillHeadBoundBoxExtentPicth;//[Offset: 0x328, Size: 12]
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x334, Size: 44]
};

class DistanceContinueHitCheck
{
	float CheckDisSquared;//[Offset: 0x0, Size: 4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 4]
};

class BaseCharacterEffectCom.ActorComponent.Object
{
	ParticleSystem* DeathFX;//[Offset: 0xc4, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc8, Size: 4]
};

class CharacterParachuteComponent.LuaInstancedActorComponent.ActorComponent.Object
{
	float CurrentFallSpeed;//[Offset: 0x14c, Size: 4]
	float CurrentDiveRate;//[Offset: 0x158, Size: 4]
	float FreeFall_InputForwardTriggerThreshold;//[Offset: 0x16c, Size: 4]
	float FreeFall_InputRightTriggerThreshold;//[Offset: 0x170, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x174, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x178, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x17c, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x180, Size: 4]
	float FreeFall_MinForwardSpeed;//[Offset: 0x184, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x188, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x18c, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x190, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x194, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x198, Size: 4]
	float FreeFall_MinPitchForwardAngle;//[Offset: 0x19c, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x1a0, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x1a4, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x1a8, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x1ac, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x1b0, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x1b4, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x1b8, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	float Opened_AcceFall;//[Offset: 0x1c0, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x1c4, Size: 4]
	float Opened_AcceForward;//[Offset: 0x1c8, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x1cc, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x1d0, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x1d4, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x1d8, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x1dc, Size: 4]
	float Opened_AcceRight;//[Offset: 0x1e0, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x1e4, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x1e8, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x1ec, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x1f0, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x1f4, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x1f8, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x1fc, Size: 4]
	float ReliableRPCInterval;//[Offset: 0x200, Size: 4]
	float UseNewVerifyHeightInParachuteOpen;//[Offset: 0x204, Size: 4]
	float OpenRealMoveAndWallCheckHight;//[Offset: 0x208, Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x21c, Size: 12]
	float Launch_Time;//[Offset: 0x228, Size: 4]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x22c, Size: 12]
	Vector Launch_Accel;//[Offset: 0x238, Size: 12]
	bool Launch_AutoExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	float Launch_YawRandomDelta;//[Offset: 0x248, Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x24c, Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x250, Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x254, Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x258, Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x25c, Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x260, Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x264, Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x268, Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x26c, Size: 4]
	delegate OnInitLaunch;//[Offset: 0x270, Size: 12]
	delegate OnResetLaunch;//[Offset: 0x27c, Size: 12]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x288, Size: 12]
	delegate OnLanded;//[Offset: 0x294, Size: 12]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x2a0, Size: 4]
	float AllowMaxDistanceSqInParachuteOpen;//[Offset: 0x2a4, Size: 4]
	float AllowMaxVelocitySqAtServer;//[Offset: 0x2a8, Size: 4]
	float MaxZAllowDistance;//[Offset: 0x2ac, Size: 4]
	float MaxZAllowDistanceNew;//[Offset: 0x2b0, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	float FollowerDist;//[Offset: 0x2d8, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x2dc, Size: 4]
	bool bLuaSetCheckClientPosVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bGmSetUseServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	bool bGmSetUseMaxForwardInputValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 1]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x358, Size: 40]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x380, Size: 4]
	float DistanceToJumpPlaneLoc;//[Offset: 0x388, Size: 4]
	float AutoParachuteStopMoveForwardDistance;//[Offset: 0x38c, Size: 4]
	float AutoParachuteMoveForwardRate;//[Offset: 0x390, Size: 4]
	float AutoParachuteOpenMoveForwardRate;//[Offset: 0x394, Size: 4]
	float AutoParachutePitchOffset;//[Offset: 0x398, Size: 4]
	float ParachuteContinuTime;//[Offset: 0x3c8, Size: 4]
	float ParachuteContinuTimeDsMore;//[Offset: 0x3cc, Size: 4]
	float ParachuteContinuStartTime;//[Offset: 0x3d0, Size: 4]
	bool ParachuteStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	float CanbeMoreOpened_MaxForwardSpeed;//[Offset: 0x3d8, Size: 4]
	int ParachuteMoveListLength;//[Offset: 0x3dc, Size: 4]
	float AdjustParachuteTimeGap;//[Offset: 0x3e0, Size: 4]
	int ErrorMoveTimeSendMaxTime;//[Offset: 0x3e4, Size: 4]
	ParachuteMoveState[] ParachuteMoveList;//[Offset: 0x3ec, Size: 12]
	bool bUseExtraAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	float ExtraAcceleratdOpened;//[Offset: 0x3fc, Size: 4]
	float ExtraAcceleratdFreeFall;//[Offset: 0x400, Size: 4]
	float ExtraAcceleratdDistanceParam;//[Offset: 0x404, Size: 4]
	Vector ExtraAnimPos;//[Offset: 0x408, Size: 12]
	bool bServerSyncShouldCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bClientSyncShouldSendToFollowerClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
};

class ParachuteMoveState
{
	float TimeStamp;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float SteerInput;//[Offset: 0x8, Size: 4]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]
	Vector Position;//[Offset: 0x18, Size: 12]
	Vector Velocity;//[Offset: 0x24, Size: 12]
	Rotator Rotation;//[Offset: 0x30, Size: 12]
	enum State;//[Offset: 0x3c, Size: 1]
	float GlidingSpeed;//[Offset: 0x40, Size: 4]
};

class NavigationInvokerComponent.ActorComponent.Object
{
	float TileGenerationRadius;//[Offset: 0xc4, Size: 4]
	float TileRemovalRadius;//[Offset: 0xc8, Size: 4]
};

class UnmannedVehicleSyncData
{
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4, Size: 4]
};

class UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
{
	Pawn* OwnerPawn;//[Offset: 0x190, Size: 4]
	bool bEnableSkillCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	bool bEnableSkillBlackboradIDSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 1]
	bool bEnableSkillEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1b0, Size: 4]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x1b8, Size: 60]
	<int,UAEBlackboard*> SkillIDBlackboardMap;//[Offset: 0x1f4, Size: 60]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x230, Size: 60]
	delegate ChangeActorBlackboard;//[Offset: 0x26c, Size: 12]
	<int,UTSkillRuntimeData> SkillBaseDataMaps;//[Offset: 0x278, Size: 60]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x2b4, Size: 12]
	delegate OnSkillCast;//[Offset: 0x2c0, Size: 12]
	SkillActiveRepData SyncSkillActiveStateDatas;//[Offset: 0x2cc, Size: 168]
	SkillAttrRepData SyncSkillAttrRepData;//[Offset: 0x374, Size: 168]
	SkillDynamicRepData SyncDynamicRepData;//[Offset: 0x41c, Size: 168]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x4c4, Size: 60]
	<int,int> ButtonSlotToSkillID;//[Offset: 0x500, Size: 60]
	TeammateSkillCDRepData TeammateSkillCDRepData;//[Offset: 0x53c, Size: 16]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x54c, Size: 12]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x5b8, Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x5e0, Size: 40]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x608, Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x618, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x61c, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x624, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x628, Size: 60]
	SkillParamater[] SkillParamaters;//[Offset: 0x670, Size: 12]
	delegate OnSkillInitSignature;//[Offset: 0x67c, Size: 12]
	delegate SkillStartEvent;//[Offset: 0x688, Size: 12]
	delegate SkillStopEvent;//[Offset: 0x694, Size: 12]
	delegate SkillPhaseChangeEvent;//[Offset: 0x6a0, Size: 12]
	delegate SkillLevelChangeEvent;//[Offset: 0x6ac, Size: 12]
	delegate SkillSkinIDChangeEvent;//[Offset: 0x6b8, Size: 12]
	int[] PendingRemoveSkillID;//[Offset: 0x6c4, Size: 12]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x6d0, Size: 12]
	<int,SkillDisableKeySet> DisableSkillTagsMap;//[Offset: 0x6dc, Size: 60]
	MultiSkillSynData NewSkillSynData;//[Offset: 0x718, Size: 180]
	SkillSinglePhaseData NewSkillSinglePhaseData;//[Offset: 0x7cc, Size: 180]
	<uint64,UTSkillSimulateData> SkillSimulateDataMap;//[Offset: 0x880, Size: 60]
	<uint64> AsyncLoadingSkillInst;//[Offset: 0x8bc, Size: 60]
	UTSkillExecQueue SkillExecQueue;//[Offset: 0x8f8, Size: 132]
	uint64 NetClientSimulateInstID;//[Offset: 0x980, Size: 8]
};

class UTSkill.LuaActor.Actor.Object
{
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	FString SkillName;//[Offset: 0x3b4, Size: 12]
	FName SkillGroup;//[Offset: 0x3c0, Size: 8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	enum SkillCastType;//[Offset: 0x3c9, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb, Size: 1]
	int SkillID;//[Offset: 0x3cc, Size: 4]
	int SkillTemplateID;//[Offset: 0x3d0, Size: 4]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bMoveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d6, Size: 1]
	bool bNeedCheckSimulateCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d7, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x3dc, Size: 68]
	bool bCoolDownWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	int CoolDownWhenStopIndex;//[Offset: 0x424, Size: 4]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	UTSkillBlackboardParameter[] SkillBlackboardParamList;//[Offset: 0x42c, Size: 12]
	bool bSetBlackboardDefaultData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool bRecycleWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool bHasBlackboradSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	FString SkillTimeScaleAttrName;//[Offset: 0x43c, Size: 12]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x448, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x484, Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x488, Size: 12]
	int CurComponentNameIndex;//[Offset: 0x494, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x4d8, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x4e0, Size: 8]
};

class UTSkillCreateData
{
	int SkillGroupIndex;//[Offset: 0x0, Size: 4]
	float Interval;//[Offset: 0x4, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0x8, Size: 4]
	FString CoolDownMessage;//[Offset: 0xc, Size: 12]
	int CoolDownMessageID;//[Offset: 0x18, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x1c, Size: 12]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x28, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x38, Size: 12]
};

class UTSkillPhase.Object
{
	FString PhaseName;//[Offset: 0x2c, Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0x3c, Size: 8]
	int PhaseIndex;//[Offset: 0x44, Size: 4]
	int ActionsTopHalfCount;//[Offset: 0x48, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x4c, Size: 100]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0xb0, Size: 4]
};

class UTSkillPhaseCreateData
{
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x4, Size: 12]
	float AltPhaseDuration;//[Offset: 0x10, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	int CoolDownIndex;//[Offset: 0x18, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x1c, Size: 12]
	UTSkillPicker* Picker;//[Offset: 0x28, Size: 4]
	UTSkillEffect*[] Actions;//[Offset: 0x2c, Size: 12]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x38, Size: 12]
	enum PhaseType;//[Offset: 0x44, Size: 1]
	int JumpPhaseIndex;//[Offset: 0x48, Size: 4]
	UAEBlackboardKeySelector[] SyncBBKArray;//[Offset: 0x4c, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x58, Size: 12]
};

class UTSkillCondition.UTSkillBaseWidget.Object
{
	bool bTickCheckCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
};

class UTSkillBaseWidget.Object
{
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	FString EffectName;//[Offset: 0x34, Size: 12]
	Actor* BuffTargetActor;//[Offset: 0x40, Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0x44, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x4c, Size: 4]
};

class UTSkillPicker.UTSkillBaseWidget.Object
{
	UTSkillPickerCreateData BaseData;//[Offset: 0x50, Size: 32]
	class Object[] FilterTemplates;//[Offset: 0x70, Size: 12]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x88, Size: 12]
	UTSkillPickerFilter*[] Filters;//[Offset: 0x94, Size: 12]
};

class UTSkillPickerCreateData
{
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	enum PickerTargetRole;//[Offset: 0x11, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
};

class UAEBlackboardKeySelector
{
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]
};

class UTSkillPickedTarget
{
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	unsigned char HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	float HitAngleCos;//[Offset: 0x2c, Size: 4]
	unsigned char HitPhysMatType;//[Offset: 0x30, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
};

class UTSkillPickerFilter.Object
{
};

class UTSkillEffect.UTSkillBaseWidget.Object
{
	float fADScale;//[Offset: 0x50, Size: 4]
	float fAPScale;//[Offset: 0x54, Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0x58, Size: 12]
};

class UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
{
	unsigned char SkillEventType;//[Offset: 0x50, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0x54, Size: 12]
	FName PreEventActionTag;//[Offset: 0x60, Size: 8]
	UTSkillEffect* SkillEffect;//[Offset: 0x68, Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0x6c, Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x78, Size: 12]
};

class SkillConditionWarpper
{
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 4]
};

class UTSkillCDBase.LuaObject.Object
{
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x68, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x70, Size: 8]
	unsigned char[] SyncContent;//[Offset: 0x78, Size: 12]
	bool bIgnoreCastSkillCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	enum CDRole;//[Offset: 0x85, Size: 1]
};

class LuaObject.Object
{
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
};

class UTSkillBlackboardParameter.UAEBlackboardParameter
{
	enum[] ResetRuleArray;//[Offset: 0x98, Size: 12]
};

class UAEBlackboardParameter
{
	FName Name;//[Offset: 0x0, Size: 8]
	unsigned char Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]
};

class UAEBlackboardParameterDefaultValue
{
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	unsigned char DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 12]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]
};

class Class.Struct.Field.Object
{
};

class UTSkillRuntimeData
{
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int SkillButtonSlot;//[Offset: 0x4, Size: 4]
	bool bShowSkillMainWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0xc, Size: 12]
};

class UTSkillLastCastInfo
{
	int SkillID;//[Offset: 0x0, Size: 4]
	float LastCastTime;//[Offset: 0x4, Size: 4]
	float LastCastFinishTime;//[Offset: 0x8, Size: 4]
};

class SkillActiveRepData
{
	SkillActiveData[] SkillData;//[Offset: 0x0, Size: 12]
};

class SkillActiveData
{
	int SkillID;//[Offset: 0x0, Size: 4]
	int SkillButtonSlot;//[Offset: 0x4, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
};

class SkillAttrRepData
{
	SkillAttrData[] SkillData;//[Offset: 0x0, Size: 12]
};

class SkillAttrData
{
	int SkillID;//[Offset: 0x0, Size: 4]
	int SkillLevel;//[Offset: 0x4, Size: 4]
	int SkillSkinID;//[Offset: 0x8, Size: 4]
};

class SkillDynamicRepData
{
	int[] SkillData;//[Offset: 0x0, Size: 12]
};

class TeammateSkillCDRepData
{
	int SkillID;//[Offset: 0x0, Size: 4]
	float CDStartTime;//[Offset: 0x4, Size: 4]
	float CDEndTime;//[Offset: 0x8, Size: 4]
	int UseCount;//[Offset: 0xc, Size: 4]
};

class SkillCDRepData
{
	int SkillID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x4, Size: 12]
};

class UTSkillSyncData_CD
{
	int SkillCDIndex;//[Offset: 0x0, Size: 4]
	unsigned char[] SkillSyncDatas;//[Offset: 0x4, Size: 12]
};

class UTSkillHitInfo
{
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	unsigned char HitSurfaceType;//[Offset: 0x1a, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]
};

class UTSkillHitEnvInfo
{
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	unsigned char HitSurfaceType;//[Offset: 0x18, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]
};

class RandomStream
{
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]
};

class TimerHandle
{
	uint64 Handle;//[Offset: 0x0, Size: 8]
};

class SkillParamater
{
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]
};

class UTReplaceSkillData
{
	int OldSkillID;//[Offset: 0x0, Size: 4]
	int NewSkillID;//[Offset: 0x4, Size: 4]
};

class SkillDisableKeySet
{
	<FString> DisableKeySet;//[Offset: 0x0, Size: 60]
};

class MultiSkillSynData
{
	UTMultiSkillSynData[] SkillData;//[Offset: 0x0, Size: 12]
};

class UTMultiSkillSynData
{
	bool bEnableRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]
	int SkillID;//[Offset: 0x10, Size: 4]
	int PhaseIndexes;//[Offset: 0x14, Size: 4]
	unsigned char[] PhaseIndexArray;//[Offset: 0x18, Size: 12]
	unsigned char[] BlackboardContent;//[Offset: 0x24, Size: 12]
};

class SkillSinglePhaseData
{
	UTSkillSynSinglePhaseData[] SkillData;//[Offset: 0x0, Size: 12]
};

class UTSkillSynSinglePhaseData
{
	uint64 InstanceID;//[Offset: 0x0, Size: 8]
	int SkillID;//[Offset: 0x8, Size: 4]
	int CurSkillPhase;//[Offset: 0xc, Size: 4]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	unsigned char[] BlackboardContent;//[Offset: 0x14, Size: 12]
};

class UTSkillSimulateData
{
	uint64 InstanceID;//[Offset: 0x0, Size: 8]
	int SkillID;//[Offset: 0x8, Size: 4]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStopSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	int[] SimlatePhaseIndexs;//[Offset: 0x10, Size: 12]
};

class UTSkillExecQueue
{
};

class ActorAttributeComponent.ActorComponent.Object
{
	FString tableName;//[Offset: 0xc4, Size: 12]
};

class PawnStateDisable
{
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]
};

class PartHitComponent.ActorComponent.Object
{
	STExtraCharacter* OwnerCharacter;//[Offset: 0xc4, Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc8, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	Transform[] StandHitBoxesTransform;//[Offset: 0xd0, Size: 12]
	Transform[] ProneHitBoxesTransform;//[Offset: 0xdc, Size: 12]
	PrimitiveComponent*[] StandHitBoxes;//[Offset: 0xe8, Size: 12]
	PrimitiveComponent*[] ProneHitBoxes;//[Offset: 0xf4, Size: 12]
	FString HitBox_Stand_Tag;//[Offset: 0x104, Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x110, Size: 12]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x120, Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x130, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x134, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x138, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x13c, Size: 4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x144, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x14c, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x154, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x15c, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x164, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x16c, Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x1a8, Size: 4]
	bool bRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x1b0, Size: 4]
	bool bRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	delegate OnOpenCollision;//[Offset: 0x1b8, Size: 12]
};

class BodyTypeDef
{
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]
};

class TurnAroundViewComponent.ActorComponent.Object
{
	FocusTargetItem FocusTurnData;//[Offset: 0x108, Size: 52]
	bool bTurnOnlyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bUseBPConfigMeshRelativeRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	Rotator ConfigMeshRelativeRot;//[Offset: 0x140, Size: 12]
	Character* MyChar;//[Offset: 0x174, Size: 4]
};

class FocusTargetItem
{
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	bool IsStartTurnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float TurnTargetVelocity;//[Offset: 0x18, Size: 4]
	Rotator LastActorRotation;//[Offset: 0x1c, Size: 12]
	FString CurveName;//[Offset: 0x28, Size: 12]
};

class TickControlComponent.ActorComponent.Object
{
	enum CustomTickType;//[Offset: 0xc4, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0xc8, Size: 60]
	TickListItem[] NeedTickComponentList;//[Offset: 0x104, Size: 12]
	unsigned char RoleBits;//[Offset: 0x110, Size: 1]
};

class TickListItem
{
	ActorComponent* Comp;//[Offset: 0x0, Size: 4]
	enum RoleType;//[Offset: 0x4, Size: 1]
};

class CharacterMaterialComponent.ActorComponent.Object
{
};

class CharacterHasGunBodyOffsetList
{
	CharacterPeekBodyOffsetList NormalBodyOffsetList;//[Offset: 0x0, Size: 216]
	CharacterPeekBodyOffsetList HasGunGunBodyOffsetList;//[Offset: 0xd8, Size: 216]
};

class CharacterPeekBodyOffsetList
{
	CharacterBodyOffset NormalBodyOffsetList;//[Offset: 0x0, Size: 72]
	CharacterBodyOffset LeftPeekBodyOffsetList;//[Offset: 0x48, Size: 72]
	CharacterBodyOffset RightPeekBodyOffsetList;//[Offset: 0x90, Size: 72]
};

class CharacterBodyOffset
{
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector FootOffset;//[Offset: 0xc, Size: 12]
	Vector TPPCameraOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]
	Vector UpperArmL;//[Offset: 0x30, Size: 12]
	Vector UpperArmR;//[Offset: 0x3c, Size: 12]
};

class ActivitySyncData
{
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]
};

class WeaponSlotSwitchTimeData
{
	unsigned char EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]
};

class SpecialAmbientData
{
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 4]
	FString SwitchGroupName;//[Offset: 0x4, Size: 12]
	FString SwitchValue;//[Offset: 0x10, Size: 12]
};

class STCharacterNearDeathComp.ActorComponent.Object
{
	bool bHasFallInWaterFully;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf9, Size: 1]
	float BreathMax;//[Offset: 0x10c, Size: 4]
	float AssistAccountableDuration;//[Offset: 0x110, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x114, Size: 4]
	bool bNearDeathOnSinglePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x11c, Size: 4]
	int MaxDeathTimes;//[Offset: 0x120, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	int NDStatusEnterTimes;//[Offset: 0x128, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x12c, Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0x130, Size: 4]
	float Breath;//[Offset: 0x134, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x138, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x13c, Size: 4]
	float NDDecreaseRate;//[Offset: 0x140, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x148, Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x14c, Size: 4]
	DamageEvent DamageEventRecorded;//[Offset: 0x150, Size: 8]
	delegate OnPreEnterNearDeath;//[Offset: 0x15c, Size: 12]
	delegate OnEnterNearDeathState;//[Offset: 0x168, Size: 12]
	delegate OnLeaveNearDeathState;//[Offset: 0x174, Size: 12]
	float BeCarriedReduceRate;//[Offset: 0x180, Size: 4]
	float BeEnemyCarriedReduceRate;//[Offset: 0x184, Size: 4]
	bool bEnableSwimWhileDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	bool bIsBeingRemotelyRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	NearDeathReduceData[] ReduceDataConfig;//[Offset: 0x194, Size: 12]
	int DebugReduceIndex;//[Offset: 0x1a0, Size: 4]
	float DebugReduceFactor;//[Offset: 0x1a4, Size: 4]
};

class DamageEvent
{
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 4]
};

class NearDeathReduceData
{
	NearDeathReduceCondition[] Conditions;//[Offset: 0x0, Size: 12]
	float ConditionsReduceFactor;//[Offset: 0xc, Size: 4]
};

class NearDeathReduceCondition
{
	<enum,bool> AndStatesMap;//[Offset: 0x0, Size: 60]
};

class STCharacterRescueOtherComp.ActorComponent.Object
{
	int WanderingRadius;//[Offset: 0xfc, Size: 4]
	int SelfRescueWanderingRadius;//[Offset: 0x100, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0x104, Size: 4]
	anPickerData FanData;//[Offset: 0x108, Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x138, Size: 4]
	STExtraBaseCharacter* CarryWho;//[Offset: 0x13c, Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x140, Size: 4]
	float RestoringDuration;//[Offset: 0x15c, Size: 4]
	float SelfRestoringDuration;//[Offset: 0x160, Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x164, Size: 12]
	FString SelfDurationAttrModifyRef;//[Offset: 0x170, Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x17c, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x184, Size: 4]
};

class anPickerData
{
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]
};

class STCharacterFollowComp.ActorComponent.Object
{
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xc4, Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc8, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xd0, Size: 4]
	float CanFollowDist;//[Offset: 0xd4, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xd8, Size: 4]
	float QuitFollowDist;//[Offset: 0xdc, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xe0, Size: 4]
	float DistThrehold;//[Offset: 0xe4, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xec, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xf4, Size: 4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x12c, Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x138, Size: 4]
};

class TargetJumpOperation.TargetKeyOperation.Object
{
};

class TargetKeyOperation.Object
{
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x7c, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x80, Size: 4]
};

class CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
{
	float SpringArmLengthModifier1;//[Offset: 0x480, Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x484, Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x488, Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x48c, Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bb, Size: 1]
	float ResultMinPitch;//[Offset: 0x4bc, Size: 4]
	float ResultMaxPitch;//[Offset: 0x4c0, Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	bool bCameraTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c5, Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x4d8, Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x4dc, Size: 44]
	CameraOffsetData ProneCameraData;//[Offset: 0x508, Size: 44]
	CameraOffsetData IndoorCameraData;//[Offset: 0x534, Size: 44]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x560, Size: 44]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x58c, Size: 44]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x5b8, Size: 44]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x5e4, Size: 44]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x610, Size: 44]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x63c, Size: 44]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x668, Size: 44]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x694, Size: 44]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x6c0, Size: 44]
	CameraOffsetData VaultCameraData;//[Offset: 0x6ec, Size: 44]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x718, Size: 44]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x744, Size: 44]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x770, Size: 44]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x79c, Size: 44]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x7c8, Size: 44]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x7f4, Size: 44]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x820, Size: 44]
	CameraOffsetData SplineMoveCameraData;//[Offset: 0x84c, Size: 44]
	CameraOffsetData AirBorneStartCameraData;//[Offset: 0x878, Size: 44]
	CameraOffsetData AirBorneFlyingCameraData;//[Offset: 0x8a4, Size: 44]
	CameraOffsetData AirBorneSuperFlyingCameraData;//[Offset: 0x8d0, Size: 44]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x8fc, Size: 4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x900, Size: 4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x904, Size: 4]
	CameraOffsetData InsectCameraData;//[Offset: 0x908, Size: 44]
	CameraOffsetData SkillCameraData;//[Offset: 0x934, Size: 44]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x961, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x964, Size: 44]
	CameraOffsetData CustomCameraData;//[Offset: 0x990, Size: 44]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc, Size: 1]
	bool bUseFixedTraceTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bd, Size: 1]
	bool bAllwaysDoTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9be, Size: 1]
	bool bTraceRealCameraLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bf, Size: 1]
	Vector TraceTagetLocation;//[Offset: 0x9c0, Size: 12]
	float AdditionalSocketOffetZMax;//[Offset: 0x9d0, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x9d4, Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x9dc, Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x9e0, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x9e4, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 1]
	bool bNoFixCameraLagWhenSpecator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f3, Size: 1]
	float OffsetCountTime;//[Offset: 0x9f4, Size: 4]
	float OffSetDurTime;//[Offset: 0x9f8, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x9fc, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0xa00, Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0xa10, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0xa40, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0xa50, Size: 16]
};

class STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
{
	bool bForceUseTargetArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float GlobalTargetArmLength;//[Offset: 0x37c, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0x380, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x384, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x388, Size: 4]
	bool bConstantLerpSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	float SpringArmInterpSpeedScale;//[Offset: 0x390, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x394, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x3dc, Size: 44]
	CameraOffsetData DefaultCameraData;//[Offset: 0x408, Size: 44]
	float CurAdditiveOffsetFov;//[Offset: 0x434, Size: 4]
	<unsigned char,bool> CurActiveDataMap;//[Offset: 0x438, Size: 60]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x478, Size: 4]
};

class DamageCauserRecordData
{
	Controller* Causer;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int StatusChangeMargin;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int WeaponId;//[Offset: 0x1c, Size: 4]
	int FloorType;//[Offset: 0x20, Size: 4]
};

class STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
{
	float ServerAccumulateErrorBurstSliceSize;//[Offset: 0x6e0, Size: 4]
	float ServerAccumulateErrorBurstDistance3DThreshold;//[Offset: 0x6f8, Size: 4]
	float ServerAccumulateErrorBurstDistance2DRatio;//[Offset: 0x6fc, Size: 4]
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x704, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x708, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x70c, Size: 4]
	bool bUGCServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	bool bServerMoveCheckPassBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x711, Size: 1]
	Box PassBound;//[Offset: 0x714, Size: 28]
	bool bAbandonReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	float MaxPrisonmentMove;//[Offset: 0x734, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x739, Size: 1]
	bool bPlatformIgnoreNullBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73a, Size: 1]
	float MaxFollowPlatformDistance;//[Offset: 0x73c, Size: 4]
	bool bFixedMoveByCurveVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	bool bDisableResetWhenSimulateNoReceive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x741, Size: 1]
	float fStopParachuteForbbitClientAdjustSeconds;//[Offset: 0x744, Size: 4]
	bool bAdjustZErrorForLandscapeFirstLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 1]
	float AdjustZErrorForLandscapeFirstLoadZMax;//[Offset: 0x75c, Size: 4]
	float AdjustZErrorForLandscapeFirstLoadDelay;//[Offset: 0x760, Size: 4]
	float StopActiveMoveSeconds;//[Offset: 0x764, Size: 4]
	float DeactiveSeconds;//[Offset: 0x768, Size: 4]
	Vector LastNotZeroInputVector;//[Offset: 0x76c, Size: 12]
	float CrownWallForwardSpeed;//[Offset: 0x778, Size: 4]
	float CrownWallRightSpeed;//[Offset: 0x77c, Size: 4]
	bool bCrownWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	bool bForbiddenDragOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 1]
	bool bUnderGroundForbiddenDragOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79d, Size: 1]
	bool bDragOnHistoryWalkingPosAndRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79e, Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79f, Size: 1]
	bool bNotUseClientMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	bool bNotUseClientCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x7a4, Size: 4]
	float EnterShovelCD;//[Offset: 0x7a8, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x7ac, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x7b0, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x7b4, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x7b8, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x7bc, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x7c0, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x7c4, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x7c8, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x7cc, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x7d0, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x7d4, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x7d8, Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x7dc, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x7e0, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x7e8, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x7ec, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x7f0, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x7f4, Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x7f8, Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x7fc, Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x800, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x804, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x808, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x80c, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x810, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x814, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x818, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x81c, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x820, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x828, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x840, Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x844, Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x848, Size: 4]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84c, Size: 1]
	bool bIgnoreClientMovementModeSkillChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84c, Size: 1]
	float nowShovelingSpeed;//[Offset: 0x850, Size: 4]
	Vector SimulateRealVelocity;//[Offset: 0x854, Size: 12]
	Rotator ShovelingRotation;//[Offset: 0x860, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86d, Size: 1]
	unsigned char ShovelingPrePoseState;//[Offset: 0x86f, Size: 1]
	float PreShovelFov;//[Offset: 0x870, Size: 4]
	delegate OnClientAdjustPosition;//[Offset: 0x888, Size: 12]
	delegate OnPhysicsFlyForwordAdjust;//[Offset: 0x894, Size: 12]
	delegate OnCharacterServerMoveDelegate;//[Offset: 0x8a0, Size: 12]
	delegate OnShovelStateChangeForBP;//[Offset: 0x8ac, Size: 12]
	delegate PostServerMoveDelegate;//[Offset: 0x8b8, Size: 12]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x8cc, Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x8d4, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d9, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8da, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x8dc, Size: 4]
	bool bIgnoreMovementBaseMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	float JumpOffVelocityFactor;//[Offset: 0x8e4, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e9, Size: 1]
	bool bUseCacheResolveWhenPenetrationVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ea, Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x8ec, Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8f0, Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8f0, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x8f4, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x8f8, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x8fc, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x900, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x904, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x908, Size: 4]
	HitResult WalkHit;//[Offset: 0x910, Size: 144]
	float WalkSpeedCurveScale;//[Offset: 0x9a0, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x9a4, Size: 4]
	float ProneFloorAngle;//[Offset: 0x9a8, Size: 4]
	float ProneFloorZ;//[Offset: 0x9ac, Size: 4]
	float JumpFloorAngle;//[Offset: 0x9b0, Size: 4]
	float JumpFloorZ;//[Offset: 0x9b4, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x9b8, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x9bc, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x9c4, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x9c8, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e4, Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e5, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e6, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x9e8, Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec, Size: 1]
	float AdjustRotationWhenProneFailedThrehold;//[Offset: 0x9f0, Size: 4]
	bool bUGCDragOnGroundEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 1]
	float CurrentEnterShovelCD;//[Offset: 0xad8, Size: 4]
	bool bRejectUnResolveRelativeAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 1]
	float ClientAndDSDiffLocSizeMax;//[Offset: 0xae0, Size: 4]
	float UnResolveRelativeLocSize;//[Offset: 0xae4, Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8, Size: 1]
	float CheckDistanceAhead;//[Offset: 0xaec, Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0xaf4, Size: 4]
	float BaseSolvedWallCheckDistance;//[Offset: 0xb08, Size: 4]
	float BaseSolvedWallTraceDistance;//[Offset: 0xb0c, Size: 4]
	float BaseSolvedWallOutDistance;//[Offset: 0xb10, Size: 4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0xb14, Size: 4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 1]
	float fStepDownEdgeToleranceRate;//[Offset: 0xb1c, Size: 4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0xb20, Size: 4]
	float MaxBaseStepUpHeight;//[Offset: 0xb24, Size: 4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb28, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0xb2c, Size: 12]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3c, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0xb44, Size: 12]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0xb50, Size: 4]
	float AIMovementSimulatePredictTime;//[Offset: 0xb68, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0xb70, Size: 4]
	float SimulateNotReceiveMoveResetSeconds;//[Offset: 0xb84, Size: 4]
	bool bResetSimulateWhenObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 1]
	float ResetSimulateXYDist;//[Offset: 0xb8c, Size: 4]
	float ResetSimulateZDist;//[Offset: 0xb90, Size: 4]
	float SimulateNotReceiveStopPredictionSeconds;//[Offset: 0xb94, Size: 4]
	float MaxFlyAcceleration;//[Offset: 0xba8, Size: 4]
	bool bForceInSkillMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb9, Size: 1]
	bool bOverrideAirControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbba, Size: 1]
	bool bOverrideGravityScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbbb, Size: 1]
	bool bSimulateWeakNetworkOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcd, Size: 1]
	uint32 LastAckBadMoveSequence;//[Offset: 0xbd0, Size: 4]
	bool bAdjustAllowablePositionWithSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd4, Size: 1]
	float ResetAllowablePositionMaxSpeedTime;//[Offset: 0xbd8, Size: 4]
	float DefaultMaxWalkSpeed;//[Offset: 0xbe8, Size: 4]
	SimulateRepData[] CacheSimulateRepMoves;//[Offset: 0xbec, Size: 12]
	float SimulateInterpolateSmoothAccelerateNum;//[Offset: 0xc00, Size: 4]
	int nMaxSimulateCacheNum;//[Offset: 0xc3c, Size: 4]
	float fServerMoveNetLagScaleSecMin;//[Offset: 0xc44, Size: 4]
	float fServerMoveNetLagScaleSecMax;//[Offset: 0xc48, Size: 4]
	float fServerMoveAllowDiscrepancySquare;//[Offset: 0xc4c, Size: 4]
	float fSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xc50, Size: 4]
	float fNoSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xc54, Size: 4]
	float fLessThanSkipProxyPredictionOnNetUpdateCosTheta;//[Offset: 0xc58, Size: 4]
	float fSimulatePredictionNoAttenuationSec;//[Offset: 0xc5c, Size: 4]
	float fSimulatePredictionAttenuationSecMax;//[Offset: 0xc60, Size: 4]
	float fSimulatePredictionAttenuationRate;//[Offset: 0xc64, Size: 4]
	float fSimulatePredictionAttenuationRateNearlyNoChg;//[Offset: 0xc68, Size: 4]
	float ResetSimulateCacheTimeCD;//[Offset: 0xc74, Size: 4]
	SimulateDragThesholds[] SimulateDragThesholds;//[Offset: 0xc78, Size: 12]
	ServerMoveData[] CacheServerMoves;//[Offset: 0xc84, Size: 12]
	ServerMoveData[] BatchServerMoves;//[Offset: 0xc90, Size: 12]
	ServerMoveData LastServerMove;//[Offset: 0xca8, Size: 72]
	ServerMoveData ProcessServerMove;//[Offset: 0xcf0, Size: 72]
	float ServerBatchMoveDeltaTimeRateMax;//[Offset: 0xd38, Size: 4]
	float ServerBatchMoveDeltaMax;//[Offset: 0xd3c, Size: 4]
	ServerReceiveMove LastServerReceiveMove;//[Offset: 0xd58, Size: 28]
	float ServerMoveNetErrorInternal;//[Offset: 0xd74, Size: 4]
	float DSMoveSpeedLimitOverMaxSpeedTimes;//[Offset: 0xd7c, Size: 4]
	float DSMoveSpeedLimitDeltaSecondsMax;//[Offset: 0xd80, Size: 4]
	float DSMoveSpeedLimitIsWeakNetPingMSec;//[Offset: 0xd84, Size: 4]
	float DSMoveSpeedLimitLowFPSRate;//[Offset: 0xd88, Size: 4]
	bool bAllowDSSpeedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 1]
	bool bShouldChekckSpeedOverLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	PenetrationCollisionInvalid PenetrationCollisionInvalid;//[Offset: 0xde4, Size: 8]
	Actor*[] ClientCollisionInvalidActors;//[Offset: 0xdec, Size: 12]
	ResolvePenetrationMoveData ResolvePenetrationData;//[Offset: 0xdf8, Size: 136]
	ResolvePenetrationMoveData ResolvePenetrationWalkingData;//[Offset: 0xe80, Size: 136]
	delegate OnResolvePenetrationDelegate;//[Offset: 0xf08, Size: 12]
	float CacheLastValidMoveDistanceSq;//[Offset: 0xf14, Size: 4]
	float CacheLastValidMaxDistance;//[Offset: 0xf18, Size: 4]
	float CacheLastValidMaxDistanceWalking;//[Offset: 0xf1c, Size: 4]
	ResolvePenetrationParams ResolvePenetrationParams;//[Offset: 0xf20, Size: 80]
	float EngineResolvePenetrationMaxDistanceSq;//[Offset: 0xf70, Size: 4]
	float ResolvePenetrationVehicleMaxDistance;//[Offset: 0xf74, Size: 4]
	float PushAwayForbidSetBaseSeconds;//[Offset: 0xf78, Size: 4]
	int PenetrationUnResolveCount;//[Offset: 0xf7c, Size: 4]
	float PenetrationUnResolveDistanceSq;//[Offset: 0xf80, Size: 4]
	bool bResolvePenetrationAdjustClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf84, Size: 1]
	float CheckResolvePenetrationSeconds;//[Offset: 0xf88, Size: 4]
	float ResolvePenetrationSwitchPoseCD;//[Offset: 0xf94, Size: 4]
	float CheckResolvePenetrationDepth;//[Offset: 0xfa0, Size: 4]
	float CheckResolvePenetrationDistance;//[Offset: 0xfa4, Size: 4]
	DirectMoveData DirectMoveData;//[Offset: 0xfbc, Size: 56]
	CustomSkillMoveData AirJumpData;//[Offset: 0xff4, Size: 48]
	PrimitiveComponent* CurrentClientMovementBase;//[Offset: 0x1038, Size: 4]
	float ComputeFloorConsiderClientPosDiffSizeSqMax;//[Offset: 0x1048, Size: 4]
	float SkilAirJumpJoystickForceSize;//[Offset: 0x1068, Size: 4]
	SimulateDragData SimulateDragData;//[Offset: 0x106c, Size: 40]
	float CanntMoveAdjustFlySpeedSize;//[Offset: 0x10a8, Size: 4]
	bool bTrustClientLandingOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bc, Size: 1]
	bool bPassWallCheckOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bd, Size: 1]
	bool bAllowBeBlewUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10be, Size: 1]
	float BlewSpeedRatio;//[Offset: 0x10c0, Size: 4]
	float IgnoreAllBlowTime;//[Offset: 0x10c4, Size: 4]
	float IgnoreLastBlowTime;//[Offset: 0x10c8, Size: 4]
	float BlendingAdjustTime;//[Offset: 0x10cc, Size: 4]
	bool bAllowBePushedAway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	float NearPushBaseDistance;//[Offset: 0x10d4, Size: 4]
	float TangentialSpeedRatio;//[Offset: 0x10d8, Size: 4]
	float NormalSpeedRatio;//[Offset: 0x10dc, Size: 4]
	bool bBlockedByStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e0, Size: 1]
	bool bIgnoreSelfBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e1, Size: 1]
	float MinMoveDeltaTime;//[Offset: 0x1110, Size: 4]
	float MaxServerMoveDistFrame;//[Offset: 0x1114, Size: 4]
	float MaxServerMoveSpanTimeFrame;//[Offset: 0x1118, Size: 4]
	float MaxServerBurstMoveFrameTime;//[Offset: 0x111c, Size: 4]
	float MaxServerBurstMoveInterval;//[Offset: 0x1120, Size: 4]
	float MaxServerBurstMoveStaticsInterval;//[Offset: 0x1124, Size: 4]
	float BurstQueryAroundCharacterRange;//[Offset: 0x1128, Size: 4]
	float MovableBaseVelocityThreshold;//[Offset: 0x1164, Size: 4]
	bool bUseNewActorMarkTeleportTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1168, Size: 1]
	float SkipMarkTeleportTimeVehicleSpeed;//[Offset: 0x116c, Size: 4]
	<enum,FString> SpecialMovePaths;//[Offset: 0x1170, Size: 60]
	<unsigned char,enum> CustomMoveModeToSpecialMoveType;//[Offset: 0x11ac, Size: 60]
	<enum,SpecialMoveBaseObj*> SpecialObjes;//[Offset: 0x11e8, Size: 60]
};

class CharacterDistanceSquareTickInternal
{
	float DistanceSquare;//[Offset: 0x0, Size: 4]
	float TickInternal;//[Offset: 0x4, Size: 4]
};

class SimulateRepData
{
	RepMovement RepMovement;//[Offset: 0x18, Size: 72]
};

class SimulateDragThesholds
{
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float DragDistanceSq;//[Offset: 0x4, Size: 4]
	float ShakeVelocityDiffSize;//[Offset: 0x8, Size: 4]
};

class ServerMoveData
{
	PrimitiveComponent* ClientMovementBase;//[Offset: 0x14, Size: 4]
};

class ServerReceiveMove
{
};

class PenetrationCollisionInvalid
{
	Actor* ClientCollisionInvalidActor;//[Offset: 0x0, Size: 4]
	bool bClientInvalid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
};

class ResolvePenetrationMoveData
{
	PrimitiveComponent* PushAwayBase;//[Offset: 0xc, Size: 4]
	ResolvePenetrationHistoryMoveData HistoryMoveData;//[Offset: 0x10, Size: 28]
};

class ResolvePenetrationHistoryMoveData
{
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector ValidLocation;//[Offset: 0x4, Size: 12]
	Rotator ValidRotation;//[Offset: 0x10, Size: 12]
};

class ResolvePenetrationParams
{
	bool bLineTracePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bBackDirAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int IterationRounds;//[Offset: 0x4, Size: 4]
	int IterationDirections;//[Offset: 0x8, Size: 4]
	float AdjustRadius;//[Offset: 0xc, Size: 4]
	float AdjustMaxHeight;//[Offset: 0x10, Size: 4]
	FName IgnoreTag;//[Offset: 0x18, Size: 8]
	FName PushupTag;//[Offset: 0x20, Size: 8]
	float OverlapShapeInflation;//[Offset: 0x28, Size: 4]
	float PassWallShapeInflation;//[Offset: 0x2c, Size: 4]
	World* InWorld;//[Offset: 0x30, Size: 4]
	Actor*[] OverlapIgnoreActors;//[Offset: 0x34, Size: 12]
	Actor*[] PassWallIgnoreActors;//[Offset: 0x40, Size: 12]
};

class DirectMoveData.CustomSkillMoveData
{
	bool bOverrideZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bClearZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bGravityZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	bool bHandleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	float InertiaRatio;//[Offset: 0x34, Size: 4]
};

class CustomSkillMoveData
{
	bool bManualExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Distance;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0xc, Size: 4]
	Vector BaseSpeed;//[Offset: 0x24, Size: 12]
};

class SimulateDragData
{
	float ReportSimulateDragConfigSeconds;//[Offset: 0x0, Size: 4]
	float ReportSimulateDragSeconds;//[Offset: 0x4, Size: 4]
	float ReportSimulateDragTimer;//[Offset: 0x8, Size: 4]
};

class SpecialMoveBaseObj.LuaObject.Object
{
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x68, Size: 4]
};

class SimLocalViewData
{
	float ViewPitch;//[Offset: 0x0, Size: 4]
	float ViewYaw;//[Offset: 0x4, Size: 4]
	float ViewRoll;//[Offset: 0x8, Size: 4]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
};

class SimViewData
{
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	unsigned char ViewRoll;//[Offset: 0x4, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
};

class InteractiveMoveActor.LuaActor.Actor.Object
{
	class InteractiveActorMoveComponent* MoveComponent;//[Offset: 0x39c, Size: 4]
	unsigned char InteractiveMoveType;//[Offset: 0x3a0, Size: 1]
	bool InFPPViewPitchLimitMaxEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	float InFPPViewPitchLimitMin;//[Offset: 0x3a4, Size: 4]
	float InFPPViewPitchLimitMax;//[Offset: 0x3a8, Size: 4]
	float InFPPViewYawLimit;//[Offset: 0x3ac, Size: 4]
};

class InteractiveActorMoveComponent.MovementComponent.ActorComponent.Object
{
	InteractiveMoveActor* TargetActor;//[Offset: 0xfc, Size: 4]
};

class PlayerSwimComponent.ActorComponent.Object
{
	delegate OnPlayerTouchWater;//[Offset: 0x108, Size: 12]
	float OnVehicleWaterSufaceOffset;//[Offset: 0x114, Size: 4]
	float MaxBreathAmount;//[Offset: 0x118, Size: 4]
	float DrowningHurtHight;//[Offset: 0x11c, Size: 4]
	float SwimWaterNearHeight;//[Offset: 0x120, Size: 4]
	float SwimWaterBodyOffset;//[Offset: 0x124, Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0x128, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x12c, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x130, Size: 4]
	float BreathDeltaTime;//[Offset: 0x134, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x138, Size: 4]
	float MinSpeedScale;//[Offset: 0x13c, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x140, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x144, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x148, Size: 4]
	float RollMaxAngle;//[Offset: 0x14c, Size: 4]
	float DistoVolume;//[Offset: 0x150, Size: 4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float DefaultWaterHeight;//[Offset: 0x158, Size: 4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x174, Size: 4]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	float CheckCharacterInWaterInternal;//[Offset: 0x17c, Size: 4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x180, Size: 4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x188, Size: 4]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x18c, Size: 4]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x190, Size: 4]
	float DyingSwimSpeedRate;//[Offset: 0x194, Size: 4]
	bool bDyingSwimChangeCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bAutoSyncSwimSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bAutoStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
};

class WeaponRecordDataForReplay
{
	int WeaponId;//[Offset: 0x0, Size: 4]
	unsigned char HeadShoot;//[Offset: 0x4, Size: 1]
	unsigned char LimbsShoot;//[Offset: 0x5, Size: 1]
	unsigned char BodyShoot;//[Offset: 0x6, Size: 1]
	unsigned char HandShoot;//[Offset: 0x7, Size: 1]
	unsigned char FootShoot;//[Offset: 0x8, Size: 1]
};

class PoseChangeTime
{
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]
};

class BaseCharacterPickupProxy.PickupProxy.Object
{
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20, Size: 4]
};

class PickupProxy.Object
{
	Actor* ProxyOwner;//[Offset: 0x1c, Size: 4]
};

class PickupManagerComponent.ActorComponent.Object
{
	float CheckPickUpInterval;//[Offset: 0xfc, Size: 4]
	float PickUpZLimit;//[Offset: 0x100, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x108, Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x114, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0x118, Size: 4]
	float FindPutDownPointZHalfHeightAdjust;//[Offset: 0x11c, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x120, Size: 4]
	Vector2D RegionXRange;//[Offset: 0x124, Size: 8]
	Vector2D RegionYRange;//[Offset: 0x12c, Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x138, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x144, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x148, Size: 4]
	float DrawTime;//[Offset: 0x14c, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x154, Size: 4]
	<SearchedPickUpItemResult,float> RecentAutoPickupMap;//[Offset: 0x158, Size: 60]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x194, Size: 12]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x1a0, Size: 12]
};

class SearchedPickUpItemResult
{
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 48]
};

class CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
{
	float AttachCheckInterval;//[Offset: 0x4c8, Size: 4]
	float AttachCheckDistance;//[Offset: 0x4cc, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x4d0, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x4d4, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4d8, Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4f4, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x500, Size: 12]
	int LastCreateFailedWeaponID;//[Offset: 0x514, Size: 4]
	ItemDefineID LastClientDestroyWeaponID;//[Offset: 0x518, Size: 24]
	int WeaponReconnectOpIndex;//[Offset: 0x530, Size: 4]
};

class PlayerAnimList
{
	int FrameCounter;//[Offset: 0x0, Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4, Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc, Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14, Size: 8]
	PlayerAnimData FillGasAnim;//[Offset: 0x1c, Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x24, Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x2c, Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x34, Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x3c, Size: 8]
	PlayerAnimData FireAccAnim;//[Offset: 0x44, Size: 8]
	PlayerAnimData PostFireAnim;//[Offset: 0x4c, Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x54, Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x5c, Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x64, Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x6c, Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x74, Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x7c, Size: 8]
	PlayerAnimData ShoudlerWeaponIdle;//[Offset: 0x84, Size: 8]
	PlayerAnimData BeCarriedBackMoveAnim;//[Offset: 0x8c, Size: 8]
	PlayerAnimData BeCarriedBackPickUpAnim;//[Offset: 0x94, Size: 8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x9c, Size: 12]
	PlayerAnimData[] ShovelAnimList;//[Offset: 0xa8, Size: 12]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0xb4, Size: 12]
};

class PlayerAnimData
{
	AnimationAsset* Animation;//[Offset: 0x0, Size: 4]
	float rate;//[Offset: 0x4, Size: 4]
};

class AnimParamList
{
	int FrameCounter;//[Offset: 0x0, Size: 4]
	Vector Velocity;//[Offset: 0x4, Size: 12]
	Vector movedir;//[Offset: 0x10, Size: 12]
	unsigned char MovementMode;//[Offset: 0x1c, Size: 1]
	unsigned char CustomMovementMode;//[Offset: 0x1d, Size: 1]
	unsigned char PoseType;//[Offset: 0x1e, Size: 1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 12]
	unsigned char WeaponType;//[Offset: 0x38, Size: 1]
	unsigned char WeaponTypeNew;//[Offset: 0x39, Size: 1]
	unsigned char WeaponHoldType;//[Offset: 0x3a, Size: 1]
	unsigned char WeaponState;//[Offset: 0x3b, Size: 1]
	unsigned char WeaponReloadMethod;//[Offset: 0x3c, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	unsigned char SightType;//[Offset: 0x3e, Size: 1]
	float RecoilKickADS;//[Offset: 0x40, Size: 4]
	float ForegripParam;//[Offset: 0x44, Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	Vector HurtDir;//[Offset: 0xe4, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	unsigned char JumpType;//[Offset: 0xf2, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	float HandleFolderFactor;//[Offset: 0xf8, Size: 4]
	float CharacterYawRotateRate;//[Offset: 0xfc, Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bCarryBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	bool bParachuteNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 1]
	float CarryBlendTimeAccumulator;//[Offset: 0x104, Size: 4]
	float ParachuteNearDeathBlendTimeAccumulator;//[Offset: 0x108, Size: 4]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bAlwaysLandLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
};

class PlayerVehAnimList
{
	int FrameCounter;//[Offset: 0x4, Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0xc, Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x10, Size: 4]
	AnimationAsset* IdleMotorBikeDirverLeaningAnim;//[Offset: 0x14, Size: 4]
	AnimationAsset* IdleMotorBikeDirverLeaningLowSpeedAnim;//[Offset: 0x18, Size: 4]
	AnimationAsset* MotorBikeDirverLeaningGroundPitchAnim;//[Offset: 0x1c, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOffAnim;//[Offset: 0x20, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOffAnim;//[Offset: 0x24, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOffAnim;//[Offset: 0x28, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOffAnim;//[Offset: 0x2c, Size: 4]
	AnimationAsset* PassengerDriverOffAimAim;//[Offset: 0x30, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleLeaningAnim;//[Offset: 0x34, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOnAnim;//[Offset: 0x38, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOnAnim;//[Offset: 0x3c, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOnAnim;//[Offset: 0x40, Size: 4]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOnAnim;//[Offset: 0x44, Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x48, Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x4c, Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x50, Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x54, Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x58, Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x5c, Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x60, Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x64, Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x68, Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x6c, Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x70, Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x74, Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x78, Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x7c, Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x80, Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x84, Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x88, Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x8c, Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x90, Size: 4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x94, Size: 4]
	AnimationAsset* VehicleWeaponEquipAnim;//[Offset: 0x98, Size: 4]
	AnimationAsset* VehicleWeaponUnEquipAnim;//[Offset: 0x9c, Size: 4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0xa0, Size: 4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0xa4, Size: 4]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0xa8, Size: 4]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0xac, Size: 4]
	AnimationAsset* VehicleDriverForwardAnim;//[Offset: 0xb0, Size: 4]
	AnimationAsset* DyingInVehicleIdleAnim;//[Offset: 0xb4, Size: 4]
};

class AnimVehParamList
{
	int FrameCounter;//[Offset: 0x0, Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	float VacateHight;//[Offset: 0x8, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 12]
	enum SeatWeaponHoldType;//[Offset: 0x28, Size: 1]
	enum SeatSpecialType;//[Offset: 0x29, Size: 1]
	enum VehicleType;//[Offset: 0x2a, Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 4]
};

class AnimStatusKeyList
{
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c, Size: 4]
};

class BodyPartCfg
{
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	float DamageReduceScaleExtra;//[Offset: 0xc, Size: 4]
	float DamageReduceScaleIgnoreDurability;//[Offset: 0x10, Size: 4]
	float BrokenArmorDamageReduceScale;//[Offset: 0x14, Size: 4]
	float DurabilityReduceScale;//[Offset: 0x18, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x1c, Size: 12]
	float MomentumResistance;//[Offset: 0x28, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x2c, Size: 4]
};

class BackpackReplayData
{
	float OccupiedCapacity;//[Offset: 0x0, Size: 4]
	float BackpackCapacity;//[Offset: 0x4, Size: 4]
	BackpackReplayItem[] ReplayItems;//[Offset: 0x8, Size: 12]
};

class BackpackReplayItem
{
	int ItemId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]
	uint64 ItemState;//[Offset: 0x10, Size: 8]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
};

class CharacterEnergyData
{
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 12]
	float EnergyMax;//[Offset: 0xc, Size: 4]
	float EnergyCurrent;//[Offset: 0x10, Size: 4]
	float EnergyPredict;//[Offset: 0x14, Size: 4]
	float AttenuationPeriod;//[Offset: 0x18, Size: 4]
	float AttenuationAmount;//[Offset: 0x1c, Size: 4]
	float PassedDeltaTime;//[Offset: 0x20, Size: 4]
};

class CharacterEnergyPhase
{
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FString BuffName;//[Offset: 0x4, Size: 12]
	int BuffID;//[Offset: 0x10, Size: 4]
};

class STDamageCameraShake.CameraShake.Object
{
	float DamageShakeScale;//[Offset: 0x140, Size: 4]
};

class HealthPredictShowData
{
	FString ShowDataKey;//[Offset: 0x0, Size: 12]
	unsigned char ShowType;//[Offset: 0xc, Size: 1]
	float Value;//[Offset: 0x10, Size: 4]
	float LimitValue;//[Offset: 0x14, Size: 4]
	FString MaxAttrName;//[Offset: 0x18, Size: 12]
};

class SecuryInfoComponent.ActorComponent.Object
{
	GameBaseInfo GameBaseInfo;//[Offset: 0x138, Size: 120]
	UAEGameMode* UAEGM;//[Offset: 0x1b0, Size: 4]
};

class UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
{
	Object* UtilsPtr;//[Offset: 0x3e4, Size: 8]
	float GridCheckSize;//[Offset: 0x3ec, Size: 4]
	float DeepCheckSize;//[Offset: 0x3f0, Size: 4]
	float HeightCheckSize;//[Offset: 0x3f4, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x3f8, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 1]
	bool bUseDefaultResultRules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 1]
	int AntiDataCD;//[Offset: 0x410, Size: 4]
	int WeatherId;//[Offset: 0x414, Size: 4]
	FString WeatherName;//[Offset: 0x418, Size: 12]
	int RoomMode;//[Offset: 0x424, Size: 4]
	int SeasonIdx;//[Offset: 0x428, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x42c, Size: 4]
	FString ItemTableName;//[Offset: 0x430, Size: 12]
	FString ItemClassPath;//[Offset: 0x43c, Size: 12]
	FString ReplayPushURL;//[Offset: 0x448, Size: 12]
	int ReplayType;//[Offset: 0x454, Size: 4]
	FString ReplayTitle;//[Offset: 0x458, Size: 12]
	enum EnableObserverEnemyTrace;//[Offset: 0x464, Size: 1]
	FString[] ItemSpawnTableList;//[Offset: 0x468, Size: 12]
	FString[] IgnoreItemClassPathList;//[Offset: 0x474, Size: 12]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x480, Size: 12]
	<uint64,CharacterMoveDragData> CharacterMoveDragDataMap;//[Offset: 0x48c, Size: 60]
	<uint64,ParachuteDragData> ParachuteDragDataMap;//[Offset: 0x4c8, Size: 60]
	<uint64,VehicleMoveDragDataFriendly> VehicleMoveDrag;//[Offset: 0x504, Size: 60]
	<uint64,CharacterShootVerifyData> CharacterShootVerifyDataMap;//[Offset: 0x540, Size: 60]
	<uint64,CharacterShootVerifyStat> CharacterShootVerifyStatMap;//[Offset: 0x57c, Size: 60]
	uint32 ServerStartTime;//[Offset: 0x5b8, Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x5c0, Size: 12]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x5d0, Size: 12]
	FString VehicleTableName;//[Offset: 0x5dc, Size: 12]
	FString VehicleClassPath;//[Offset: 0x5e8, Size: 12]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 1]
	Vector RegionCenter;//[Offset: 0x5f8, Size: 12]
	float RegionRadius;//[Offset: 0x604, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x608, Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x644, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x648, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x64c, Size: 4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x654, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x658, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x65c, Size: 4]
	float RescueSelfRestoreDuration;//[Offset: 0x660, Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x664, Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x668, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66d, Size: 1]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x670, Size: 12]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x67c, Size: 4]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x680, Size: 12]
	Actor*[] DynamicTriggers;//[Offset: 0x68c, Size: 12]
	int IsGameModeFpp;//[Offset: 0x698, Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x6a0, Size: 12]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x6ac, Size: 60]
	VehicleAvatarReplaceCfg[] VehicleAvatarReplaceCfgList;//[Offset: 0x6e8, Size: 12]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f4, Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f5, Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x6f8, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x704, Size: 12]
	int[] DynamicLevelArray;//[Offset: 0x710, Size: 12]
	FString RoomType;//[Offset: 0x71c, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	int ZoneID;//[Offset: 0x72c, Size: 4]
	int nClientType;//[Offset: 0x730, Size: 4]
	int MainModeID;//[Offset: 0x734, Size: 4]
	int RealPlayerNums;//[Offset: 0x738, Size: 4]
	delegate OnGameModeStateChanged;//[Offset: 0x760, Size: 12]
	delegate SendTeammateResultWhenChicken;//[Offset: 0x7e8, Size: 16]
	delegate HaveSentTeamBattleResult;//[Offset: 0x7f8, Size: 16]
	delegate SendTeamBattleResult;//[Offset: 0x808, Size: 12]
	delegate SendGameStopJoin;//[Offset: 0x89c, Size: 12]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 1]
	float OBInfoTimeStep;//[Offset: 0xc08, Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0xc2c, Size: 12]
	UAEPlayerController*[] KickFlagControllerList;//[Offset: 0xc38, Size: 12]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0xc44, Size: 12]
	class UAEAdvertisementActor* AdvertisementActorBP;//[Offset: 0xce4, Size: 4]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0xce8, Size: 12]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0xcf4, Size: 12]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0xd00, Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0xd10, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0xd1c, Size: 12]
	FString GrenadeEffectPath;//[Offset: 0xd28, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd35, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd36, Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd37, Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0xd38, Size: 12]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 1]
	float FestivalAirDropProb;//[Offset: 0xd48, Size: 4]
	float MonsterDropPar;//[Offset: 0xd4c, Size: 4]
	float SceneDropParam;//[Offset: 0xd50, Size: 4]
	uint32 DSOpenSwtich;//[Offset: 0xd54, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xd58, Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xd5c, Size: 4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0xd64, Size: 12]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0xd70, Size: 12]
	FString SeasonStatueClassPath;//[Offset: 0xd7c, Size: 12]
	FString StatueBaseClassPath;//[Offset: 0xd88, Size: 12]
	StatueBaseData StatueBaseInfo;//[Offset: 0xd94, Size: 84]
	int BattleStopJoin;//[Offset: 0xde8, Size: 4]
	int nSignalGunEffectId;//[Offset: 0xdec, Size: 4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0xdf0, Size: 12]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe70, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0xe74, Size: 12]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec1, Size: 1]
	int StandAloneTestPlayerKey;//[Offset: 0xec4, Size: 4]
	FName StandAloneTestPlayerType;//[Offset: 0xec8, Size: 8]
};

class LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
{
	FString LuaFilePath;//[Offset: 0x3d8, Size: 12]
};

class DSSwitchInfo
{
	int KeyNum;//[Offset: 0x0, Size: 4]
	FString SValue;//[Offset: 0x4, Size: 12]
};

class CharacterMoveDragData
{
	CharacterMoveDrag[] Drag;//[Offset: 0x0, Size: 12]
	CharacterSimulateMoveDrag[] SimulateDrag;//[Offset: 0xc, Size: 12]
};

class CharacterMoveDrag
{
	int Minute;//[Offset: 0x0, Size: 4]
	<unsigned char,int> ReasonCount;//[Offset: 0x4, Size: 60]
	DistanceDragData[] ExceedsDistances;//[Offset: 0x40, Size: 12]
};

class DistanceDragData
{
	float CX;//[Offset: 0x0, Size: 4]
	float CY;//[Offset: 0x4, Size: 4]
	float CZ;//[Offset: 0x8, Size: 4]
	float SX;//[Offset: 0xc, Size: 4]
	float SY;//[Offset: 0x10, Size: 4]
	float sz;//[Offset: 0x14, Size: 4]
};

class CharacterSimulateMoveDrag
{
	int Minute;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int DragCount;//[Offset: 0x8, Size: 4]
	int ShakeCount;//[Offset: 0xc, Size: 4]
};

class ParachuteDragData
{
	uint32 MyDrag;//[Offset: 0x0, Size: 4]
	uint32 OtherDrag;//[Offset: 0x4, Size: 4]
};

class VehicleMoveDragDataFriendly
{
	VehicleMoveDragFriendly[] MoveDrag;//[Offset: 0x0, Size: 12]
	VehicleMoveDragFriendly[] SimulatedMoveDrag;//[Offset: 0xc, Size: 12]
};

class VehicleMoveDragFriendly
{
	int Minute;//[Offset: 0x0, Size: 4]
	unsigned char VehicleType;//[Offset: 0x4, Size: 1]
	<unsigned char,int> Counters;//[Offset: 0x8, Size: 60]
};

class CharacterShootVerifyData
{
	<unsigned char,int> ShootVerifyFailed;//[Offset: 0x0, Size: 60]
};

class CharacterShootVerifyStat
{
	<unsigned char,int> ShootVerifyStat;//[Offset: 0x0, Size: 60]
};

class UAEOBState.PlayerState.Info.Actor.Object
{
};

class DynamicTriggerConfig
{
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 12]
	FString TriggerClassPath;//[Offset: 0xc, Size: 12]
};

class DynamicTriggerTransform
{
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]
};

class DynamicLoadItem
{
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 12]
	int ActID;//[Offset: 0xc, Size: 4]
	FString Path;//[Offset: 0x10, Size: 12]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	int[] PosIdxList;//[Offset: 0x20, Size: 12]
};

class DynamicBuildingGroupTransform
{
	float locX;//[Offset: 0x0, Size: 4]
	float locY;//[Offset: 0x4, Size: 4]
	float LocZ;//[Offset: 0x8, Size: 4]
	float RotX;//[Offset: 0xc, Size: 4]
	float RotY;//[Offset: 0x10, Size: 4]
	float RotZ;//[Offset: 0x14, Size: 4]
};

class DynamicLoadActors
{
	Actor*[] ActorArray;//[Offset: 0x0, Size: 12]
};

class VehicleAvatarReplaceCfg
{
	int OriginID;//[Offset: 0x0, Size: 4]
	int[] SkinIDList;//[Offset: 0x4, Size: 12]
	float[] ProbabilityDistribute;//[Offset: 0x10, Size: 12]
	int MaxNum;//[Offset: 0x1c, Size: 4]
	int CurrentNum;//[Offset: 0x20, Size: 4]
};

class AirDropBoxInOb
{
	int boxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector Pos;//[Offset: 0x8, Size: 12]
};

class UAEAdvertisementActor.StaticMeshActor.Actor.Object
{
	FString LuaFilePath;//[Offset: 0x358, Size: 12]
	bool bMultiAdvertisement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	<unsigned char,Texture2D*> IdTextureMap;//[Offset: 0x368, Size: 60]
	StaticMesh* StaticMesh;//[Offset: 0x3a4, Size: 4]
	FString StaticMeshPath;//[Offset: 0x3a8, Size: 12]
	FrontendHUD* FrontendHUD;//[Offset: 0x3b4, Size: 4]
	int ID;//[Offset: 0x3b8, Size: 4]
	float NetCullDistance;//[Offset: 0x3bc, Size: 4]
};

class StaticMeshActor.Actor.Object
{
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x310, Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x315, Size: 1]
};

class AdvertisementActorConfig
{
	FString ResPath;//[Offset: 0x0, Size: 12]
	FString HttpImgPath;//[Offset: 0xc, Size: 12]
	Vector Loc;//[Offset: 0x18, Size: 12]
	Rotator Rot;//[Offset: 0x24, Size: 12]
	Vector Scale;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	int CulDistance;//[Offset: 0x40, Size: 4]
};

class MissionBoardConfig
{
	FString ResPath;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	float Progress;//[Offset: 0x30, Size: 4]
	FString CountOrTime;//[Offset: 0x34, Size: 12]
	int TipId;//[Offset: 0x40, Size: 4]
};

class VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
{
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool bCanBackupVehicleSpotDatas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x214, Size: 12]
	unsigned char RegionType;//[Offset: 0x220, Size: 1]
	BackupVehicleSpotData[] BackupVehicleSpotDatas;//[Offset: 0x224, Size: 12]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x230, Size: 12]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x23c, Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	<unsigned char,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x24c, Size: 60]
	<unsigned char,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x288, Size: 60]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x2c4, Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x300, Size: 72]
	UAEDataTable* VehicleDataTable;//[Offset: 0x348, Size: 4]
	bool bRemovableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	<VehicleSpotObject*> PauseVehicleSpotObjectSet;//[Offset: 0x35c, Size: 60]
	Actor*[] GeneratedActorArray;//[Offset: 0x398, Size: 12]
	delegate OnVehicleGeneratedDelegate;//[Offset: 0x3a8, Size: 12]
	delegate OnVehicleGenerateEndDelegate;//[Offset: 0x3b4, Size: 12]
};

class VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
{
	unsigned char SpotGroupType;//[Offset: 0x2dc, Size: 1]
	unsigned char RegionType;//[Offset: 0x2dd, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2de, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2df, Size: 1]
	float RandomRotationMin;//[Offset: 0x2e0, Size: 4]
	float RandomRotationMax;//[Offset: 0x2e4, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x2e8, Size: 32]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x30c, Size: 4]
};

class VehicleGenerateRandomInfo
{
	FString VehicleType;//[Offset: 0x0, Size: 12]
	FString VehiclePath;//[Offset: 0xc, Size: 12]
	float FuelPercent;//[Offset: 0x18, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
};

class BackupVehicleSpotData
{
	int ID;//[Offset: 0x0, Size: 4]
	unsigned char SpotGroupType;//[Offset: 0x4, Size: 1]
	unsigned char SpotType;//[Offset: 0x5, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x8, Size: 12]
	Rotator SpotRotator;//[Offset: 0x14, Size: 12]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
};

class VehicleSpotProperty
{
	unsigned char SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int FuelPercentMin;//[Offset: 0x10, Size: 4]
	int FuelPercentMax;//[Offset: 0x14, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	unsigned char RandomType;//[Offset: 0x19, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x20, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x24, Size: 4]
	float ProbabilityPersent;//[Offset: 0x28, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c, Size: 4]
};

class TreasureBoxSpotProperty
{
	unsigned char SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int TotalCountRangeMin;//[Offset: 0x10, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x14, Size: 4]
};

class VehicleSpotComponentArray
{
	unsigned char SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4, Size: 12]
};

class VehicleGenerateSpawnDataArray
{
	FString Catetory;//[Offset: 0x0, Size: 12]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]
};

class VehicleGenerateSpawnData
{
	int KeyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x4, Size: 12]
	FString VehiclePath;//[Offset: 0x10, Size: 12]
	int VehicleWeight;//[Offset: 0x1c, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
};

class VehicleGenerateStatisticsData
{
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 12]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc, Size: 60]
};

class VehicleSpotStatisticsData.TableRowBase
{
	unsigned char SpotType;//[Offset: 0x4, Size: 1]
	FString VehiclePath;//[Offset: 0x8, Size: 12]
	float VehicleLocationX;//[Offset: 0x14, Size: 4]
	float VehicleLocationY;//[Offset: 0x18, Size: 4]
	float VehicleLocationZ;//[Offset: 0x1c, Size: 4]
};

class VehicleClassStatisticsData.TableRowBase
{
	FString VehiclePath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int AllVehicleCount;//[Offset: 0x14, Size: 4]
};

class VehicleSpotObject.Object
{
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x58, Size: 32]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0x78, Size: 4]
};

class SeasonStatueData
{
	FString Name;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	FString Nation;//[Offset: 0x30, Size: 12]
	int AGender;//[Offset: 0x3c, Size: 4]
	int Head;//[Offset: 0x40, Size: 4]
	int hair;//[Offset: 0x44, Size: 4]
	int WeaponId;//[Offset: 0x48, Size: 4]
	int[] AvatarList;//[Offset: 0x4c, Size: 12]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x58, Size: 12]
};

class StatueBaseData
{
	FString ClassPath;//[Offset: 0x0, Size: 12]
	FString MatPath;//[Offset: 0xc, Size: 12]
	FString TeamFlag;//[Offset: 0x18, Size: 12]
	FString TeamName;//[Offset: 0x24, Size: 12]
	Vector Loc;//[Offset: 0x30, Size: 12]
	Rotator Rot;//[Offset: 0x3c, Size: 12]
	Vector Scale;//[Offset: 0x48, Size: 12]
};

class CharacterOverrideAttrData
{
	FString AttrName;//[Offset: 0x0, Size: 12]
	float AttrValue;//[Offset: 0xc, Size: 4]
};

class RepVehicleAttachment
{
	STExtraVehicleBase* Vehicle;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	unsigned char SeatIndex;//[Offset: 0x10, Size: 1]
};

class CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	<enum,FName> SlotTypeToSocket;//[Offset: 0x760, Size: 60]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x79c, Size: 60]
	int gender;//[Offset: 0x7d8, Size: 4]
	delegate OnAvatarEquipped;//[Offset: 0x7dc, Size: 12]
	delegate OnAvatarVisibleChanged;//[Offset: 0x7e8, Size: 12]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0x7f4, Size: 120]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0x86c, Size: 60]
	int HeadAvatarID;//[Offset: 0x8b8, Size: 4]
	int PreHeadAvatarID;//[Offset: 0x8bc, Size: 4]
	SoftObjectPath HeadMeshSoftPath;//[Offset: 0x8c0, Size: 24]
	class AnimInstance* HeadAniminstanceClass;//[Offset: 0x8d8, Size: 4]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec, Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ed, Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0x8f0, Size: 60]
	enum[] OpenResetHideBone;//[Offset: 0x92c, Size: 12]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x938, Size: 60]
	int[] ignoreSlots;//[Offset: 0x974, Size: 12]
	int WholeBodyModelID;//[Offset: 0x980, Size: 4]
	int CurrentClothID;//[Offset: 0x984, Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0x988, Size: 12]
	<enum,int> AvatarRectifyData;//[Offset: 0x994, Size: 60]
	delegate OnAvatarRectifyDataChange;//[Offset: 0x9d0, Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9dc, Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x9e0, Size: 60]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0xa1c, Size: 60]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0xa58, Size: 60]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0xa94, Size: 60]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0xad0, Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0xb0c, Size: 12]
	delegate OnClothParticleEquipped;//[Offset: 0xb18, Size: 12]
	delegate OnClothPlaneCutChanged;//[Offset: 0xb24, Size: 12]
	delegate OnEnableEffectTickChanged;//[Offset: 0xb30, Size: 12]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0xb3c, Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0xb78, Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xb7c, Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xb80, Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xb84, Size: 12]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xb90, Size: 12]
	float ConfigBoundScale;//[Offset: 0xb9c, Size: 4]
	int EnableEquipAvatarPendant;//[Offset: 0xba0, Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba4, Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba5, Size: 1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xba8, Size: 60]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xbe8, Size: 56]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xc20, Size: 40]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 1]
	<int,int> OriginEquipCache;//[Offset: 0xc4c, Size: 60]
	bool bEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc89, Size: 1]
	bool HasVehicleAjustHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8a, Size: 1]
	int BodySlotStateChangeCount;//[Offset: 0xc8c, Size: 4]
	float CutPlaneW;//[Offset: 0xc90, Size: 4]
	bool EnableClothPlaneCut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 1]
	SkinnedMeshComponent* ClothSkinMeshTobeCut;//[Offset: 0xcc0, Size: 4]
	bool bEnableAvatarReAttachFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc4, Size: 1]
	bool bVisibleChangeRefreshAvatarReAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc5, Size: 1]
	enum[] AlwaysResetReAttachSlotList;//[Offset: 0xcc8, Size: 12]
	<enum,AvatarReAttachConfigCollection> PendingAvatarReAttachCollectionMap;//[Offset: 0xcd4, Size: 60]
	<enum,ReAttachConfig> FinalWorkingAvatarReAttachMap;//[Offset: 0xd10, Size: 60]
	int BackAircraftType;//[Offset: 0xd4c, Size: 4]
	int BackSkateType;//[Offset: 0xd50, Size: 4]
	bool EnableEffectTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd54, Size: 1]
};

class AvatarSlotNameConfig
{
	<enum,FString> MaleSlotName;//[Offset: 0x0, Size: 60]
	<enum,FString> FemaleSlotName;//[Offset: 0x3c, Size: 60]
};

class AvatarHideBonesDesc
{
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 12]
};

class BackpackAvatarItemColor.CustomHandleBase.Object
{
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24, Size: 12]
};

class CustomHandleBase.Object
{
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c, Size: 8]
};

class SlotToMatColor
{
	enum SlotID;//[Offset: 0x0, Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x4, Size: 12]
	float GrayScale;//[Offset: 0x10, Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x18, Size: 40]
};

class BackpackAvatarItemPattern.CustomHandleBase.Object
{
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24, Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30, Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48, Size: 24]
};

class SlotToMatPattern
{
	enum SlotID;//[Offset: 0x0, Size: 1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 40]
	float IconScale;//[Offset: 0x30, Size: 4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 40]
	float IconScale;//[Offset: 0x60, Size: 4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 16]
};

class AvatarEffectGroup
{
	FXSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 12]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc, Size: 12]
};

class AvatarEffectData
{
	Transform Transform;//[Offset: 0x0, Size: 48]
	Object* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	enum ValidMethod;//[Offset: 0x68, Size: 1]
	enum ValidDevice;//[Offset: 0x69, Size: 1]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool bIsActivateWithMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 1]
	bool IsLobbyActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x70, Size: 12]
	Object* ParticleSystem_F;//[Offset: 0x80, Size: 40]
};

class AvatarAttachMeshGroup
{
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc, Size: 12]
};

class AvatarAttachMeshData.AssetPackage
{
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName AttachSocket;//[Offset: 0x40, Size: 8]
	FName SlotName;//[Offset: 0x48, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
};

class AssetPackage
{
};

class AvatarAttachMeshFrameSkipMap
{
	int LODLevel;//[Offset: 0x0, Size: 4]
	int SkipFrame;//[Offset: 0x4, Size: 4]
};

class AdditonalAvatarStruct
{
	int ItemId;//[Offset: 0x0, Size: 4]
	int[] SlotIDList;//[Offset: 0x4, Size: 12]
};

class FakeHeadInfo
{
	bool bEnableFakeHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SkeletalMesh* SoftFakeHeadMesh;//[Offset: 0x8, Size: 40]
	class AnimInstance* FakeHeadAnimBPClass;//[Offset: 0x30, Size: 4]
};

class AvatarReAttachConfigCollection
{
	ReAttachConfig[] AvatarReAttachList;//[Offset: 0x0, Size: 12]
};

class ReAttachConfig
{
	enum ReAttachSlot;//[Offset: 0x0, Size: 1]
	enum TriggerSlot;//[Offset: 0x1, Size: 1]
	int Priority;//[Offset: 0x4, Size: 4]
	bool bForceRecreateAdaptSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum SlotAdaptSpace;//[Offset: 0x9, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	bool bForceRecreateAdaptAssociatedSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	enum AssociatedSlotAdaptSpace;//[Offset: 0x41, Size: 1]
	Transform AssociatedSlotAdaptTransform;//[Offset: 0x50, Size: 48]
	enum[] AssociatedSlotList;//[Offset: 0x80, Size: 12]
	<FName,Transform> WingClothScaleTransformMap;//[Offset: 0x8c, Size: 60]
};

class PlayEmoteComponent.LuaActorComponent.ActorComponent.Object
{
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x150, Size: 4]
	CharacterFormationComponent* FormationComponent;//[Offset: 0x154, Size: 4]
	int CurrentPlayEmoteId;//[Offset: 0x158, Size: 4]
	int PlayEmoteSkillID;//[Offset: 0x15c, Size: 4]
	bool IsHandedWeaponBeforePlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	bool bReadyToPlayEmoteFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 1]
	Vector EmoteColBox;//[Offset: 0x198, Size: 12]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x1a4, Size: 60]
	int CurrentEmoteIndex;//[Offset: 0x214, Size: 4]
	float EmoteAnimLastTime;//[Offset: 0x218, Size: 4]
	delegate StartEmoteMontageEvent;//[Offset: 0x21c, Size: 12]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x228, Size: 12]
	delegate EmoteReadyToPlayNext;//[Offset: 0x234, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x240, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x24c, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x258, Size: 40]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bStopEmoteLoadCallbackWhenCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x284, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x288, Size: 4]
	EmotePlayer EmotePlayerData;//[Offset: 0x290, Size: 28]
	bool EnablePlayEmoteAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	float DefaultEmoteFollowCheckTime;//[Offset: 0x2b0, Size: 4]
	float DefaultEmoteFollowCheckRange;//[Offset: 0x2b4, Size: 4]
	float DefaultCoopEmoteCheckInterval;//[Offset: 0x2b8, Size: 4]
	float DefaultCoopEmoteCheckRange;//[Offset: 0x2bc, Size: 4]
	float CoopEmoteTargetOffset;//[Offset: 0x2c0, Size: 4]
	float CoopEmoteCheckGroundHeight;//[Offset: 0x2c4, Size: 4]
	bool bFollowEmoteNeedRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	delegate OnAutonomousCharacterPlayEmote;//[Offset: 0x2d0, Size: 12]
	float DelayReInitTime;//[Offset: 0x2e8, Size: 4]
	STExtraBaseCharacter* CachedCoopEmotePlayer;//[Offset: 0x2f8, Size: 8]
};

class CharacterFormationComponent.LuaActorComponent.ActorComponent.Object
{
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x150, Size: 4]
	STCharacterMovementComponent* MovementComponent;//[Offset: 0x154, Size: 4]
	float RightValueThreshold;//[Offset: 0x164, Size: 4]
	delegate OnCharacterJoinFormation;//[Offset: 0x168, Size: 12]
	delegate OnCharacterLeaveFormation;//[Offset: 0x174, Size: 12]
	float MaxAllowedDistance;//[Offset: 0x180, Size: 4]
	STExtraBaseCharacter*[] Followers;//[Offset: 0x190, Size: 12]
	bool bDisableForwardMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bDisableRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	float MoveInputSampleInterval;//[Offset: 0x1a4, Size: 4]
	int MoveInputCacheNum;//[Offset: 0x1a8, Size: 4]
	CharacterFormationComponent* LeaderFormationComp;//[Offset: 0x1ac, Size: 4]
	FormationInfo FormationInfo;//[Offset: 0x1b0, Size: 32]
	FormationInfo ReplicatedFormationInfo;//[Offset: 0x1d0, Size: 32]
	FormationMoveInput NetSyncMoveInput;//[Offset: 0x1f8, Size: 16]
	bool bFollowLeaderMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	float SmoothUpdateTime;//[Offset: 0x20c, Size: 4]
	bool bStopMovementReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool bStopClientMeshSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	bool bStopClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 1]
	bool bUseRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213, Size: 1]
	float MaxAdjustFormationSpeed;//[Offset: 0x214, Size: 4]
};

class FormationInfo
{
	bool bIsFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Leader;//[Offset: 0x4, Size: 4]
	Vector RelativeLocation;//[Offset: 0x8, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x14, Size: 12]
};

class FormationMoveInput
{
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector movedir;//[Offset: 0x4, Size: 12]
};

class EmotePlayer
{
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	uint32 FollowPlayer;//[Offset: 0x4, Size: 4]
	int EmoteId;//[Offset: 0x8, Size: 4]
	Vector Pos;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]
};

class CharacterPlayEmoteComponent.InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
{
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x428, Size: 4]
	CharacterFormationComponent* FormationComponent;//[Offset: 0x42c, Size: 4]
	int CurrentPlayEmoteId;//[Offset: 0x434, Size: 4]
	bool IsHandedWeaponBeforePlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	Vector EmoteColBox;//[Offset: 0x478, Size: 12]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x484, Size: 60]
	int CurrentEmoteIndex;//[Offset: 0x4f4, Size: 4]
	int ReplicatedLeaderEmoteIndex;//[Offset: 0x4f8, Size: 4]
	float EmoteAnimLastTime;//[Offset: 0x4fc, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x500, Size: 12]
	delegate EmoteReadyToPlayNext;//[Offset: 0x50c, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x518, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x524, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x530, Size: 40]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	bool bStopEmoteLoadCallbackWhenCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x55c, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x560, Size: 4]
	bool EnablePlayEmoteAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 1]
	float DefaultEmoteFollowCheckTime;//[Offset: 0x568, Size: 4]
	float DefaultEmoteFollowCheckRange;//[Offset: 0x56c, Size: 4]
	bool bFollowEmoteNeedRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	float DelayReInitTime;//[Offset: 0x580, Size: 4]
	TimerHandle UpdateTimerHandle;//[Offset: 0x590, Size: 8]
	float UpdateDeltaTime;//[Offset: 0x598, Size: 4]
};

class STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
{
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x2c0, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x2c8, Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x2d0, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x300, Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x304, Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x308, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x30c, Size: 4]
	float HDRUnderWaterFogDensity;//[Offset: 0x310, Size: 4]
	float NormalUnderWaterFogDensity;//[Offset: 0x314, Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x318, Size: 4]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x31c, Size: 12]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x328, Size: 12]
	<ExponentialHeightFogComponent*,bool> SceneFogOriginalStates;//[Offset: 0x334, Size: 60]
	CameraComponent* LastActiveCamComp;//[Offset: 0x370, Size: 4]
	PostProcessVolume* UnderWaterPPV;//[Offset: 0x378, Size: 4]
};

class WaterSwimActor.Actor.Object
{
	float Damage;//[Offset: 0x310, Size: 4]
	float Interval;//[Offset: 0x314, Size: 4]
	class DamageType* DamageType;//[Offset: 0x318, Size: 4]
	class Pawn[] DamageFilters;//[Offset: 0x31c, Size: 12]
	int[] BuffIDs;//[Offset: 0x328, Size: 12]
	int[] SkillBuffIDs;//[Offset: 0x334, Size: 12]
	BoxComponent* WaterBoxComp;//[Offset: 0x340, Size: 4]
};

class STParachuteState
{
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]
};

class SlideMoveData
{
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	Vector LocalVelocity;//[Offset: 0x8, Size: 12]
};

class UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
{
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x188, Size: 12]
};

class UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
{
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x17c, Size: 12]
};

class UAEAnimListComponentBase.ActorComponent.Object
{
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x114, Size: 60]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x150, Size: 12]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
};

class AnimListMapValueData
{
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 12]
};

class AnimListData
{
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x4, Size: 4]
};

class CharParachuteAnimData
{
	unsigned char ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 4]
};

class CharacterAsynLoadedTypeAnim
{
	unsigned char AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x4, Size: 12]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x10, Size: 72]
};

class CharacterAnimTypeAsynLoadedPhaseData
{
	FString PhaseName;//[Offset: 0x0, Size: 12]
	<unsigned char,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0xc, Size: 60]
};

class STReplicatedMoveState
{
	Vector_NetQuantizeWithDelta Location;//[Offset: 0x0, Size: 20]
	unsigned char Roll;//[Offset: 0x14, Size: 1]
	uint32 View;//[Offset: 0x18, Size: 4]
	Vector_NetQuantizeWithDelta Velocity;//[Offset: 0x1c, Size: 20]
};

class Vector_NetQuantizeWithDelta.Vector
{
};

class ParachuteFollowComponent.ActorComponent.Object
{
};

class ParachuteFollowState
{
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]
};

class LastEmoteInfo
{
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]
};

class CharacterCompOutOfVisionOptimizationItem
{
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
};

class BaseFPPComponent.ActorComponent.Object
{
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0x108, Size: 4]
	FName ScopeAimCameraSocketName;//[Offset: 0x110, Size: 8]
	FName FPPSocketName;//[Offset: 0x118, Size: 8]
	FName BoltActionCurveName;//[Offset: 0x120, Size: 8]
	bool bResetScopeCameraTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	float ScopeZoomSpringArmLength;//[Offset: 0x12c, Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0x134, Size: 4]
	float BoltActionFov;//[Offset: 0x138, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0x13c, Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x140, Size: 60]
	float ScopeZoomSpeed;//[Offset: 0x17c, Size: 4]
	<int,ScopeZoomConfig> ScopeZoomConfigMap;//[Offset: 0x180, Size: 60]
	float ScopeFovMin;//[Offset: 0x1bc, Size: 4]
	float ScopeFovMax;//[Offset: 0x1c0, Size: 4]
	int CurrentPlayAnimIndex;//[Offset: 0x1c4, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x1c8, Size: 12]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x1d8, Size: 60]
	<FName,float> ScopeZoomMap;//[Offset: 0x214, Size: 60]
	float TanHalfFOV;//[Offset: 0x254, Size: 4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool IsRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x260, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x268, Size: 8]
	<uint64,int> WeaponSightState;//[Offset: 0x270, Size: 60]
};

class ScopeZoomConfig
{
	int DisplayMaxScale;//[Offset: 0x0, Size: 4]
	int DisplayMinScale;//[Offset: 0x4, Size: 4]
	CurveFloat* FovCurve;//[Offset: 0x8, Size: 4]
};

class DollyZoomParam
{
	float FOV;//[Offset: 0x0, Size: 4]
	float Scale;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
};

class UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
{
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x188, Size: 12]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x194, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x1a0, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x1ac, Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x1b8, Size: 4]
	CharacterShovelAnimData[] CharacterShovelEditList;//[Offset: 0x1bc, Size: 12]
	CharacterShovelAnimData[] CharacterShovelEditListFPP;//[Offset: 0x1c8, Size: 12]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x1d4, Size: 12]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x1e0, Size: 12]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 1]
	GetAnimUtil GetAnimUtil;//[Offset: 0x1f4, Size: 20]
};

class CharacterMovementAnimData
{
	unsigned char AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]
};

class ChararacterPoseAnimData
{
	unsigned char PoseType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 40]
};

class CharacterJumpAnimData
{
	unsigned char JumpType;//[Offset: 0x0, Size: 1]
	FName JumpTypeName;//[Offset: 0x8, Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeJump;//[Offset: 0x100, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeJump;//[Offset: 0x130, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeFall;//[Offset: 0x160, Size: 48]
	ChararacterJumpPhaseData JumpPhase_GrenadeFall;//[Offset: 0x190, Size: 48]
};

class ChararacterJumpPhaseData
{
	unsigned char JumpPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]
};

class CharacterShovelAnimData
{
	CharacterShovelPhaseData ShovelPhase_Enter;//[Offset: 0x0, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Shoveling;//[Offset: 0x30, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Leave;//[Offset: 0x60, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Crouch_Leave;//[Offset: 0x90, Size: 48]
};

class CharacterShovelPhaseData
{
	enum ShovelPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]
};

class CharAnimModifyData
{
	int AppliedGameMode;//[Offset: 0x0, Size: 4]
	unsigned char ModifyAnimListType;//[Offset: 0x4, Size: 1]
	unsigned char AnimType;//[Offset: 0x5, Size: 1]
	unsigned char PoseType;//[Offset: 0x6, Size: 1]
	unsigned char JumpType;//[Offset: 0x7, Size: 1]
	unsigned char JumpPhase;//[Offset: 0x8, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 40]
};

class CharacterVehAnimModifyData
{
	enum VehicleType;//[Offset: 0x0, Size: 1]
	int SeatIdx;//[Offset: 0x4, Size: 4]
	unsigned char VehicleAnimType;//[Offset: 0x8, Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 40]
};

class GetAnimUtil
{
	SoftObjectPath[] PendingList;//[Offset: 0x0, Size: 12]
	UAECharacterAnimListSubSystem* AnimListSubSystem;//[Offset: 0xc, Size: 4]
};

class UAECharacterAnimListSubSystem.WorldSubsystem.Subsystem.Object
{
};

class UAEChaCustomAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
{
	bool bLoadAnimOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	int CharacterAnimOverrideType;//[Offset: 0x190, Size: 4]
	<FString,FName> CharAnimEnumName;//[Offset: 0x194, Size: 60]
	CharCustomAnimData[] CharCustomAnimDataList;//[Offset: 0x1d0, Size: 12]
	<FString,FName> CharFeatureAnimInstanceEnumName;//[Offset: 0x1dc, Size: 60]
	CharCustomAnimInstacneData[] CharCustomAnimInstanceDataList;//[Offset: 0x218, Size: 12]
};

class CharCustomAnimData
{
	UAEBlackboardKeySelector CustomAnimType;//[Offset: 0x0, Size: 8]
	AnimationAsset* CustomAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* CustomAnim;//[Offset: 0x30, Size: 4]
	FString CustomAnimName;//[Offset: 0x34, Size: 12]
};

class CharCustomAnimInstacneData
{
	UAEBlackboardKeySelector CustomAnimInstacneType;//[Offset: 0x0, Size: 8]
	class AnimInstance* CustomAnimInstacneSoftPtr;//[Offset: 0x8, Size: 4]
	FString CustomAnimInstanceName;//[Offset: 0xc, Size: 12]
};

class InteractionEmoteConfig
{
	int SelfEmoteId;//[Offset: 0x0, Size: 4]
	int OtherEmoteId;//[Offset: 0x4, Size: 4]
};

class PlayerRespawnData
{
	unsigned char RespawnCount;//[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
};

class CharacterHide
{
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bStopCharacterTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bCloseCharacterCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	unsigned char nRepFlag;//[Offset: 0x3, Size: 1]
	float fScale;//[Offset: 0x4, Size: 4]
};

class PlayerMantleComponent.LuaActorComponent.ActorComponent.Object
{
	bool bPrintLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bCheckState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool bHoldingVaultButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	float NowBlockDis;//[Offset: 0x1cc, Size: 4]
	float NowBlockHeight;//[Offset: 0x1d0, Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x1d4, Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0x1d8, Size: 4]
	float NowBlockLength;//[Offset: 0x1dc, Size: 4]
	Actor* checkActor;//[Offset: 0x1e0, Size: 4]
	Vector HitPoint;//[Offset: 0x1e4, Size: 12]
	PrimitiveComponent* VaultingComponent;//[Offset: 0x1f0, Size: 4]
	Vector BlockDir;//[Offset: 0x1f4, Size: 12]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	float CapsuleRadius;//[Offset: 0x204, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x208, Size: 4]
	float maxCheckDis;//[Offset: 0x20c, Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0x210, Size: 4]
	float UnActiveMaxAngle;//[Offset: 0x214, Size: 4]
	float MaxCheckHeight;//[Offset: 0x218, Size: 4]
	float MaxJumpLength;//[Offset: 0x21c, Size: 4]
	float heightoffsetcheck;//[Offset: 0x220, Size: 4]
	float HeightForwardCheck;//[Offset: 0x224, Size: 4]
	float minVaultHeight;//[Offset: 0x228, Size: 4]
	float minCheckHeight;//[Offset: 0x22c, Size: 4]
	float JumpValueMinDisToland;//[Offset: 0x230, Size: 4]
	float SpeedDisRatio;//[Offset: 0x234, Size: 4]
	float CheckTopHeadHeight;//[Offset: 0x238, Size: 4]
	bool bCrossBlockCheckDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	float JumpOverMinHeightDiff;//[Offset: 0x240, Size: 4]
	float MinCrossBlockDis;//[Offset: 0x244, Size: 4]
	float MinCrossBlockDisForSlide;//[Offset: 0x248, Size: 4]
	float ExtraCheckFallingHeight;//[Offset: 0x24c, Size: 4]
	float OppositeExtraOffset;//[Offset: 0x250, Size: 4]
	float OppositeExtraCheck;//[Offset: 0x254, Size: 4]
	bool bAllowGrabWhenUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool bAllowVaultOnMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	float nowMaxX;//[Offset: 0x25c, Size: 4]
	float nowMinFallingY;//[Offset: 0x260, Size: 4]
	float realStartZ;//[Offset: 0x264, Size: 4]
	Vector oppositeHitPoint;//[Offset: 0x268, Size: 12]
	Vector upHitPoint;//[Offset: 0x274, Size: 12]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x280, Size: 4]
	float blockledgeZ;//[Offset: 0x284, Size: 4]
	float CurHeightToLand;//[Offset: 0x288, Size: 4]
	Actor*[] VaultingIgnoredActors;//[Offset: 0x28c, Size: 12]
	Vector PlayerStartPosition;//[Offset: 0x298, Size: 12]
	Rotator PlayerRotation;//[Offset: 0x2a4, Size: 12]
	Vector PlayerStartDir;//[Offset: 0x2b0, Size: 12]
	float LastStandDis;//[Offset: 0x2bc, Size: 4]
	float lastwalkDis;//[Offset: 0x2c0, Size: 4]
	float lastsprintDis;//[Offset: 0x2c4, Size: 4]
	float DeltaTime;//[Offset: 0x2c8, Size: 4]
	float CountTime;//[Offset: 0x2cc, Size: 4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	float realStartTime;//[Offset: 0x2d4, Size: 4]
	bool IsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	float offsetSpeed;//[Offset: 0x2dc, Size: 4]
	float nowAnimSpeed;//[Offset: 0x2e0, Size: 4]
	float animSpeedChangeTime;//[Offset: 0x2e4, Size: 4]
	float animChangeSpeedRate;//[Offset: 0x2e8, Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	bool waitStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	float stopVaultOppDis;//[Offset: 0x2f0, Size: 4]
	Vector DataStartPos;//[Offset: 0x2f4, Size: 12]
	FString NowVaultKey;//[Offset: 0x300, Size: 12]
	bool bClimbMovableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	STExtraPlayerCharacter* PlayerPawn;//[Offset: 0x310, Size: 4]
	unsigned char NowDrawDebugType;//[Offset: 0x314, Size: 1]
	unsigned char gunSlot;//[Offset: 0x315, Size: 1]
	bool IsPreUseSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 1]
	unsigned char PreUseSkillWeaponSlot;//[Offset: 0x317, Size: 1]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool IsChangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x31c, Size: 4]
	float ShouldAdjustHeight;//[Offset: 0x320, Size: 4]
	float MoveSeconds;//[Offset: 0x324, Size: 4]
	Vector StartOffsetToBase;//[Offset: 0x328, Size: 12]
	float StartZToBase;//[Offset: 0x334, Size: 4]
	<FString,VaultDataParam> VaultDataMap;//[Offset: 0x338, Size: 60]
	VaultDataParam NowVaultData;//[Offset: 0x374, Size: 88]
	VaultCheckRule[] CheckRuleListCPP;//[Offset: 0x3cc, Size: 12]
	UAEWindowComponent*[] VaultWindows;//[Offset: 0x3d8, Size: 12]
	bool bEnableFaceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	bool bEnableSimulatedFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 1]
	float FaceCameraSpeed;//[Offset: 0x3e8, Size: 4]
	bool bEnableNowDisNegative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool bEnableStartPositionSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	float StartPositionSmoothTime;//[Offset: 0x3f0, Size: 4]
	bool bZeroSpeedWhenVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool bControlCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	float CameraUpperThanBlock;//[Offset: 0x410, Size: 4]
	bool bLowerDownCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	float LowerCameraRecoverTime;//[Offset: 0x420, Size: 4]
	FString[] CameraLowerDownKeys;//[Offset: 0x424, Size: 12]
	bool bEnableClimbingMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bEnableAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	bool bAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 1]
	float AutoVaultMaxHeightToLand;//[Offset: 0x434, Size: 4]
	bool bCheckObstacleNotZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	float ServerCheckCrossWallDis;//[Offset: 0x45c, Size: 4]
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	float EndVaultingYaw;//[Offset: 0x464, Size: 4]
	float EndVaultingTime;//[Offset: 0x468, Size: 4]
	float EndVaultingInterpTime;//[Offset: 0x46c, Size: 4]
	bool bJustEndedVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	bool bStartVaultingInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 1]
	bool bResetCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	bool bUseEndPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 1]
	float EndPositionTolerance;//[Offset: 0x478, Size: 4]
	bool bEnableVaultFollowMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	float VaultCheckInterval;//[Offset: 0x480, Size: 4]
	uint32 LastVaultCheckFlag;//[Offset: 0x4a4, Size: 4]
	delegate OnVaultCheckFlagChange;//[Offset: 0x4a8, Size: 12]
	delegate OnVaultFailFromDS;//[Offset: 0x4b4, Size: 12]
	<unsigned char,VaultAnimDataPath> VaultAnimPathMap;//[Offset: 0x4c0, Size: 60]
	AnimMontage* VaultMontage;//[Offset: 0x4fc, Size: 4]
	AnimMontage* TeamVaultMontage;//[Offset: 0x500, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x508, Size: 4]
};

class VaultDataParam
{
	int ID;//[Offset: 0x0, Size: 4]
	FString montageSectionName;//[Offset: 0x4, Size: 12]
	CurveFloat* upCurve;//[Offset: 0x10, Size: 4]
	CurveFloat* forwardCurve;//[Offset: 0x14, Size: 4]
	float blockdis;//[Offset: 0x18, Size: 4]
	float blockheight;//[Offset: 0x1c, Size: 4]
	float blokcThicklength;//[Offset: 0x20, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool forceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	float CountTime;//[Offset: 0x28, Size: 4]
	float playSpeed;//[Offset: 0x2c, Size: 4]
	float speedChangeTime;//[Offset: 0x30, Size: 4]
	float changeSpeedRate;//[Offset: 0x34, Size: 4]
	float StartFaceCameraTime;//[Offset: 0x38, Size: 4]
	bool standState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool walkState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool SprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	bool isPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 1]
	float BreakWindowDelayTime;//[Offset: 0x40, Size: 4]
	bool isCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float MinCancelVTimer;//[Offset: 0x48, Size: 4]
	float MaxCancelVTimer;//[Offset: 0x4c, Size: 4]
	bool fallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	float fallingvaultMinHeight;//[Offset: 0x54, Size: 4]
};

class VaultCheckRule
{
	float CheckHeight;//[Offset: 0x0, Size: 4]
	float standCheckDis;//[Offset: 0x4, Size: 4]
	float walkCheckDis;//[Offset: 0x8, Size: 4]
	float sprintCheckDis;//[Offset: 0xc, Size: 4]
};

class UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	int ID;//[Offset: 0x7b4, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x7bc, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x7c0, Size: 4]
	ParticleSystem* BrokenEffect;//[Offset: 0x7c4, Size: 4]
};

class VaultAnimDataPath
{
	FString VaultAnimPath;//[Offset: 0x0, Size: 12]
	FString TeamVaultAnimPath;//[Offset: 0xc, Size: 12]
};

class CharacterAnimShareParamsComp.DataDriverAnimShareParamsComp.LuaActorComponent.ActorComponent.Object
{
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x378, Size: 4]
	AnimInstanceContainer* LocomotionAnimContainer;//[Offset: 0x37c, Size: 4]
	AnimInstanceContainer* FeatureMoveAnimContainer;//[Offset: 0x380, Size: 4]
	AnimInstanceContainer* FeatureSwimAnimContainer;//[Offset: 0x384, Size: 4]
	AnimInstanceContainer* FeatureNearDeathAnimContainer;//[Offset: 0x388, Size: 4]
	AnimInstanceContainer* FeatureHitAnimContainer;//[Offset: 0x38c, Size: 4]
	AnimInstanceContainer* VehicleAnimContainer;//[Offset: 0x390, Size: 4]
	AnimInstanceContainer* SkillAnimContainer;//[Offset: 0x394, Size: 4]
	AnimInstanceContainer* ParachuteAnimContainer;//[Offset: 0x398, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x3fc, Size: 4]
	float SprintVelocityForward;//[Offset: 0x400, Size: 4]
};

class DataDriverAnimShareParamsComp.LuaActorComponent.ActorComponent.Object
{
	CurveFloat*[] AnimParamSourceCurveFloatValues;//[Offset: 0x1d0, Size: 12]
	IGameAnimAssetManager* AnimAssetMgr;//[Offset: 0x290, Size: 4]
	int ReserveDynamicBoolSourceDataNum;//[Offset: 0x294, Size: 4]
	int ReserveDynamicEnumSourceDataNum;//[Offset: 0x298, Size: 4]
	int ReserveDynamicIntSourceDataNum;//[Offset: 0x29c, Size: 4]
	int ReserveDynamicFloatSourceDataNum;//[Offset: 0x2a0, Size: 4]
	int ReserveDynamicVectorSourceDataNum;//[Offset: 0x2a4, Size: 4]
	int ReserveDynamicRotatorSourceDataNum;//[Offset: 0x2a8, Size: 4]
	int ReserveDynamicCurveFloatSourceDataNum;//[Offset: 0x2ac, Size: 4]
};

class AnimInstanceContainer.Object
{
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x1c, Size: 4]
	<class AnimInstance,AnimInstance*> CacheAnimInstanceMap;//[Offset: 0x20, Size: 60]
	class AnimInstance* TargetClass;//[Offset: 0x5c, Size: 4]
	AnimInstance* TargetAnimInstance;//[Offset: 0x60, Size: 4]
};

class IGameAnimAssetManager.GameInstanceSubsystem.Subsystem.Object
{
	bool EnableAnimAssetManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString AnimDataTableName;//[Offset: 0x24, Size: 12]
	bool EnableReleaseAnimData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bEnableAdAnimParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bEnableBaseCharacterAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	bool bEnableAnimDataTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	SoftObjectPath CharacterAnimDataAssetPrimPath;//[Offset: 0x38, Size: 24]
	CharacterAnimDataAsset* CharacterAnimDataAssets;//[Offset: 0x50, Size: 4]
	AnimAssetDependencies[] LoadingDependencies;//[Offset: 0x54, Size: 12]
	<SoftObjectPath> LoadedPath;//[Offset: 0x60, Size: 60]
	<DataAsset*> LoadedDataAssets;//[Offset: 0x9c, Size: 60]
	<FName,AnimDataChunk> LoadedAnimAssetsMap;//[Offset: 0xd8, Size: 60]
	IGameAnimDataTableRow[] RawDataTableArr;//[Offset: 0x118, Size: 12]
	uint32[] KeyMap;//[Offset: 0x124, Size: 12]
	FString[] AnimParamsListPath;//[Offset: 0x150, Size: 12]
	<GameplayTag,AnimParamValuePrerequisites> AnimParamToPrerequisiteMap;//[Offset: 0x15c, Size: 60]
};

class GameInstanceSubsystem.Subsystem.Object
{
};

class CharacterAnimDataAsset.IGAnimData.DataAsset.Object
{
	AnimCharacterData DataTPP;//[Offset: 0x20, Size: 24]
	AnimCharacterData DataFPP;//[Offset: 0x38, Size: 24]
};

class AnimCharacterData
{
	PawnAnimData[] BaseDatas;//[Offset: 0x0, Size: 12]
	AnimMotionData[] AdditiveDatas;//[Offset: 0xc, Size: 12]
};

class PawnAnimData
{
	GameplayTag KeyType;//[Offset: 0x0, Size: 8]
	AnimationAsset* StandAsset;//[Offset: 0x8, Size: 40]
	AnimationAsset* CrouchAsset;//[Offset: 0x30, Size: 40]
	AnimationAsset* ProneAsset;//[Offset: 0x58, Size: 40]
};

class AnimMotionData
{
	enum MotionType;//[Offset: 0x0, Size: 1]
	AnimBulkData[] Datas;//[Offset: 0x4, Size: 12]
};

class AnimAssetDependencies
{
	Actor* Owner;//[Offset: 0x8, Size: 40]
};

class AnimDataChunk
{
	<int64,AnimationAsset*> Datas;//[Offset: 0x0, Size: 60]
};

class IGameAnimDataTableRow
{
	int ID;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]
	DataAsset* RawDataAsset;//[Offset: 0x8, Size: 40]
};

class AnimParamValuePrerequisites
{
	<int,AnimParamPrerequisites> ValuePrerequisite;//[Offset: 0x0, Size: 60]
};

class AnimParamPrerequisites
{
	GameplayTag[] AssetTags;//[Offset: 0x0, Size: 12]
};

class InjuryParticleAttachOffset
{
	unsigned char MovementMode;//[Offset: 0x0, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	unsigned char AttachLocationType;//[Offset: 0x40, Size: 1]
};

class WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	bool bAntialiased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 1]
	float RTScale;//[Offset: 0x6a4, Size: 4]
	enum Space;//[Offset: 0x6a8, Size: 1]
	enum TimingPolicy;//[Offset: 0x6a9, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x6ac, Size: 4]
	IntPoint DrawSize;//[Offset: 0x6b0, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 1]
	float RedrawTime;//[Offset: 0x6bc, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x6c8, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	Vector2D Pivot;//[Offset: 0x6d8, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x6e4, Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x6e8, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x6f8, Size: 16]
	float OpacityFromTexture;//[Offset: 0x708, Size: 4]
	enum BlendMode;//[Offset: 0x70c, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70e, Size: 1]
	UserWidget* Widget;//[Offset: 0x710, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x724, Size: 4]
	MaterialInterface* TranslucentMaterialAA;//[Offset: 0x728, Size: 4]
	MaterialInterface* TranslucentMaterialAA_OneSided;//[Offset: 0x72c, Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x730, Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x734, Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x738, Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x73c, Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x740, Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x744, Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x748, Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x74c, Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 1]
	FName SharedLayerName;//[Offset: 0x758, Size: 8]
	int LayerZOrder;//[Offset: 0x760, Size: 4]
	enum GeometryMode;//[Offset: 0x764, Size: 1]
	float CylinderArcAngle;//[Offset: 0x768, Size: 4]
};

class NetCarryBackState
{
	enum State;//[Offset: 0x0, Size: 1]
	enum DetachMethod;//[Offset: 0x1, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x8, Size: 4]
};

class STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
{
	FString ActorComponentName;//[Offset: 0x150, Size: 12]
	int CarryBackSkillID;//[Offset: 0x15c, Size: 4]
	int PutDownSkillID;//[Offset: 0x160, Size: 4]
	int DSSwitchId;//[Offset: 0x164, Size: 4]
	enum State;//[Offset: 0x168, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x16c, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x170, Size: 4]
	enum DetachMethod;//[Offset: 0x174, Size: 1]
	delegate OnEnterCarryBackState;//[Offset: 0x178, Size: 12]
	delegate OnExitCarryBackState;//[Offset: 0x184, Size: 12]
	delegate OnEnterBeCarriedBackState;//[Offset: 0x190, Size: 12]
	delegate OnExitBeCarriedBackState;//[Offset: 0x19c, Size: 12]
	bool bEnableBPInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x1c4, Size: 12]
	float CorrectTickInterval;//[Offset: 0x1d0, Size: 4]
	bool bEnableTranformCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bEnableCollisionCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	float FrontAngleRangeThreshold;//[Offset: 0x1d8, Size: 4]
	float BackAngleRangeThreshold;//[Offset: 0x1dc, Size: 4]
	delegate OnStartCorrectCarryBack;//[Offset: 0x1e4, Size: 12]
	STExtraVehicleBase* CarryToTargetVehicle;//[Offset: 0x1f0, Size: 4]
};

class SkillReplaceCharAnimData
{
	unsigned char CharacterAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x4, Size: 12]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x10, Size: 12]
};

class DynamicOptimizeActorComponents.LuaActorComponent.ActorComponent.Object
{
	<ActorComponent*,DynamicOptimizeComponentFull> DormantFullComponents;//[Offset: 0x188, Size: 60]
	<ActorComponent*,DynamicOptimizeComponentTick> DormantTickComponents;//[Offset: 0x1c4, Size: 60]
	ActorComponent*[] DormantFullForDebug;//[Offset: 0x200, Size: 12]
	ActorComponent*[] DormantTickForDebug;//[Offset: 0x20c, Size: 12]
	FName NotDestroy;//[Offset: 0x228, Size: 8]
};

class DynamicOptimizeComponentFull
{
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bSkipUpdateChildTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	unsigned char CollisionType;//[Offset: 0x7, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bReplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bTickEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	FString Reason;//[Offset: 0x14, Size: 12]
};

class DynamicOptimizeComponentTick
{
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString Reason;//[Offset: 0x4, Size: 12]
	bool bTickEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
};

class BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
{
	delegate OnGameModeEnterFlying;//[Offset: 0x1780, Size: 12]
	delegate OnGameModeExitFlying;//[Offset: 0x178c, Size: 12]
	FString LogicAreaDataPath;//[Offset: 0x1798, Size: 12]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b0, Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17bc, Size: 1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17bd, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17be, Size: 1]
	bool bOpenMonsterDamageTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17bf, Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x17c0, Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c4, Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x17c8, Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x17cc, Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x17d0, Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x17d4, Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d8, Size: 1]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x17f0, Size: 4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f4, Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x17f8, Size: 12]
	float GameModeStateReadyEnterTime;//[Offset: 0x1810, Size: 4]
};

class BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
{
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee1, Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee2, Size: 1]
	int DefaultRevivalCount;//[Offset: 0xee4, Size: 4]
	bool ReducePlayersNumAfterDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 1]
	int DefaultBuyLifeCount;//[Offset: 0xeec, Size: 4]
	bool EnableTeamMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	GameModeParms GameModeParms;//[Offset: 0xef4, Size: 216]
	STExtraPlayerStart*[] STEPlayerStartsList;//[Offset: 0xfcc, Size: 12]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0xfd8, Size: 60]
	enum GameModeType;//[Offset: 0x1014, Size: 1]
	enum GameModeSubType;//[Offset: 0x1015, Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0x1018, Size: 4]
	GameStatisComponent* GameStatisComp;//[Offset: 0x101c, Size: 4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0x1020, Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0x1024, Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1028, Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0x102c, Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0x1030, Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0x1034, Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 1]
	FString SubAISuffix;//[Offset: 0x103c, Size: 12]
	int MlAIType;//[Offset: 0x1048, Size: 4]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0x104c, Size: 4]
	class AIController* AIControllerClass;//[Offset: 0x1050, Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0x1054, Size: 4]
	unsigned char WorldLoadedType;//[Offset: 0x1058, Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0x105c, Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0x1060, Size: 4]
	int PlayerNumPerTeam;//[Offset: 0x1064, Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1068, Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1069, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x106c, Size: 12]
	float CircleSpeedMultiplicator;//[Offset: 0x1078, Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107c, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107d, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107e, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107f, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1081, Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1082, Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1083, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1085, Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1086, Size: 1]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1087, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1088, Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0x108c, Size: 12]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0x1098, Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109c, Size: 1]
	bool bEnableArmorEquipmentToBeAutoDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109d, Size: 1]
	FString GameModeConfigPath;//[Offset: 0x10a0, Size: 12]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ac, Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ad, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ae, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10af, Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0x10b4, Size: 80]
	Vector BornLocation;//[Offset: 0x1104, Size: 12]
	Vector AIBornLocation;//[Offset: 0x1110, Size: 12]
	float BornRadius;//[Offset: 0x111c, Size: 4]
	unsigned char LastCircleCountToDestroyActorOnServer;//[Offset: 0x1120, Size: 1]
	unsigned char LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0x1121, Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0x1124, Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0x1128, Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x112c, Size: 4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0x1150, Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0x1154, Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1158, Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0x115c, Size: 4]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1160, Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1161, Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0x1164, Size: 4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0x1168, Size: 4]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0x116c, Size: 4]
	float OverrideBackpackCapacity;//[Offset: 0x1170, Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1174, Size: 1]
	FString LuaModPath;//[Offset: 0x1178, Size: 12]
	FString LuaSubMod;//[Offset: 0x1184, Size: 12]
	FString[] CustomWidgets;//[Offset: 0x1190, Size: 12]
	FString CustomUIName;//[Offset: 0x119c, Size: 12]
	GameModeState* CurrentState;//[Offset: 0x11a8, Size: 4]
	GameModeState*[] AllGameModeStates;//[Offset: 0x11ac, Size: 12]
	GameModeState* GameModeStateActive;//[Offset: 0x11b8, Size: 4]
	GameModeState* GameModeStateReady;//[Offset: 0x11bc, Size: 4]
	GameModeState* GameModeStateFighting;//[Offset: 0x11c0, Size: 4]
	GameModeState* GameModeStateFinished;//[Offset: 0x11c4, Size: 4]
	FName CurGameModeState;//[Offset: 0x11c8, Size: 8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11dc, Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x11e0, Size: 4]
	Actor* PlanePawn;//[Offset: 0x11e4, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e8, Size: 1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0x11ec, Size: 12]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0x11f8, Size: 4]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0x11fc, Size: 4]
	float OutBoundDamage;//[Offset: 0x1200, Size: 4]
	<uint32,unsigned char> AISpawnTypeCache;//[Offset: 0x1284, Size: 60]
	PlaneComponent* PlaneComp;//[Offset: 0x12c0, Size: 4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x12c4, Size: 4]
	ShowVehicleComponent* ShowVehicle;//[Offset: 0x12c8, Size: 4]
	delegate OnVehicleDamageInfo;//[Offset: 0x12cc, Size: 12]
	delegate OnSpawnAISuccessDelegate;//[Offset: 0x12f8, Size: 12]
	delegate OnTerminatorEndGameDelegate;//[Offset: 0x136c, Size: 12]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x1378, Size: 12]
	int MatchGoal;//[Offset: 0x13c8, Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13cc, Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x13e4, Size: 56]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0x141c, Size: 12]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428, Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x142c, Size: 12]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x1438, Size: 4]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x143c, Size: 4]
	FName FeatureDefaultPawnName;//[Offset: 0x1440, Size: 8]
	FName FeaturePlayerControllerName;//[Offset: 0x1448, Size: 8]
	FName FeatureWeaponName;//[Offset: 0x1450, Size: 8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1458, Size: 1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1459, Size: 1]
	int VehicleExplosionLifeSpan;//[Offset: 0x145c, Size: 4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1460, Size: 1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1461, Size: 1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1462, Size: 1]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1463, Size: 1]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1464, Size: 1]
	bool bEnableDSAITickRateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1465, Size: 1]
	DSTickRateOptimize DSTickRateOptimizeConfig;//[Offset: 0x1468, Size: 16]
	float DelaySpawnVehicleTime;//[Offset: 0x1478, Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0x147c, Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x1480, Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1484, Size: 1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0x1488, Size: 60]
	int MaxVehiclesInReady;//[Offset: 0x14c4, Size: 4]
	int MaxVehiclesPerGroupInReady;//[Offset: 0x14c8, Size: 4]
	int MaxWingmanInReady;//[Offset: 0x14cc, Size: 4]
	int MaxWingmanPerGroupInReady;//[Offset: 0x14d0, Size: 4]
	bool EnableSuperCarPreTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d4, Size: 1]
	int SuperCarNum;//[Offset: 0x14d8, Size: 4]
	int MaxGroups;//[Offset: 0x14dc, Size: 4]
	int MaxPlayersPerGroup;//[Offset: 0x14e0, Size: 4]
	<int,GroupPlayers> PlayersInGroup;//[Offset: 0x14e4, Size: 60]
	PVSNetRelevantHelper* PVSNetRelevantHelper;//[Offset: 0x1694, Size: 4]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1698, Size: 1]
	bool bMLAIAsHuman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1699, Size: 1]
	STExtraPlayerController*[] WaitAddWeaponPlayerList;//[Offset: 0x169c, Size: 12]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x16a8, Size: 12]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b4, Size: 1]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0x16b8, Size: 60]
	bool bNeedBroadcastFatalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f4, Size: 1]
	bool bNeedBroadcastLastBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f5, Size: 1]
	<int,AIControllerList> AIDeathResIDToControllerList;//[Offset: 0x16f8, Size: 60]
	AIPawnPoolItem[] AILivingPawnForPool;//[Offset: 0x1734, Size: 12]
	bool bEnablePacketSimulationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1740, Size: 1]
	int MinPacketSimulationLag;//[Offset: 0x1744, Size: 4]
	float CaculateConnectionsAvgLagTimer;//[Offset: 0x1748, Size: 4]
	int ConnectionsAvgLag;//[Offset: 0x174c, Size: 4]
	float CaculateConnectionsAvgLagTime;//[Offset: 0x1750, Size: 4]
	FString[] ReasonsToSend;//[Offset: 0x1754, Size: 12]
	bool bAIDropBulletInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1760, Size: 1]
	bool bDropAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1761, Size: 1]
	bool bOnlyDropMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1762, Size: 1]
	float DistanceCullFactor;//[Offset: 0x1764, Size: 4]
	float CheckDestoryActorTime;//[Offset: 0x1768, Size: 4]
	bool bReCalcCharacterNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176c, Size: 1]
	bool bInvincibleIgnorePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176d, Size: 1]
	float RemainReadyStateTimeForceSpawnMLAI;//[Offset: 0x1770, Size: 4]
	Vector2D TimerSpawnMLAITime;//[Offset: 0x1774, Size: 8]
	bool IsRegisterDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177c, Size: 1]
	bool bMlAITraining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177d, Size: 1]
};

class GamemodeAIDataAsset.DataAsset.Object
{
	bool bUseTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString AIEquipmentTableName;//[Offset: 0x24, Size: 12]
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x30, Size: 12]
	bool bUseSpecificEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int SpecificEquipId;//[Offset: 0x40, Size: 4]
	float RandomStartJumpTime;//[Offset: 0x44, Size: 4]
	float RandomEndJumpTime;//[Offset: 0x48, Size: 4]
	float JumpRadius;//[Offset: 0x4c, Size: 4]
	float JumpHeight;//[Offset: 0x50, Size: 4]
	float RandomAccelerateStart;//[Offset: 0x54, Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x58, Size: 4]
	float OpenParachuteHeight;//[Offset: 0x5c, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x60, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x64, Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x68, Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x6c, Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x70, Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x74, Size: 4]
	float StopdeliverTime;//[Offset: 0x78, Size: 4]
	float NoCirlceRadius;//[Offset: 0x7c, Size: 4]
	float TraceHeight;//[Offset: 0x80, Size: 4]
	float RangeMin;//[Offset: 0x84, Size: 4]
	float RangeMax;//[Offset: 0x88, Size: 4]
	float OriginCheckSquare;//[Offset: 0x8c, Size: 4]
	float DestCheckSquare;//[Offset: 0x90, Size: 4]
	int HouseCheckTimes;//[Offset: 0x94, Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x98, Size: 8]
	float FlyToCircleRadius;//[Offset: 0xa0, Size: 4]
	float FlyToCircleOutRadius;//[Offset: 0xa4, Size: 4]
};

class AIEquipSpawnGroupDataBase
{
	float RightTime;//[Offset: 0x0, Size: 4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x4, Size: 12]
	AIEquipSpawnItem[] AIMustPickUpItemList;//[Offset: 0x10, Size: 12]
};

class AIEquipSpawnGroup
{
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 12]
};

class AIEquipSpawnItem
{
	enum itemType;//[Offset: 0x0, Size: 1]
	int ItemSpecificID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int MaxCount;//[Offset: 0xc, Size: 4]
	Vector2D ExtraConfigValue;//[Offset: 0x10, Size: 8]
};

class CrowdManagerComponent.ActorComponent.Object
{
	float TimeHorizon;//[Offset: 0xc4, Size: 4]
	float AvoidanceWeight;//[Offset: 0xc8, Size: 4]
	float CohesionWeight;//[Offset: 0xcc, Size: 4]
	float AlignmentWeight;//[Offset: 0xd0, Size: 4]
	float ArriveWeight;//[Offset: 0xd4, Size: 4]
	float PushedWeight;//[Offset: 0xd8, Size: 4]
	float SeparationWeight;//[Offset: 0xdc, Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0xe4, Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0xe8, Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0xec, Size: 4]
	<Actor*,int> actor2AgentIndex;//[Offset: 0x504, Size: 60]
};

class GameModeParms
{
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0, Size: 24]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x18, Size: 24]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x30, Size: 24]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x48, Size: 24]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0x60, Size: 24]
	SubSystemConfig SSC_VisualField;//[Offset: 0x78, Size: 24]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x90, Size: 24]
	SubSystemConfig SSC_SuperCold;//[Offset: 0xa8, Size: 24]
	SubSystemConfig SSC_ARWeaponManager;//[Offset: 0xc0, Size: 24]
};

class SubSystemConfig
{
	enum SubSystemId;//[Offset: 0x0, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum ConstructType;//[Offset: 0x2, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x4, Size: 4]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x8, Size: 8]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x10, Size: 8]
};

class DynamicCompConfig
{
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x4, Size: 4]
};

class STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
{
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x334, Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	int PlayerBornPointID;//[Offset: 0x33c, Size: 4]
	bool CheckEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	int CampID;//[Offset: 0x344, Size: 4]
	int TeamID;//[Offset: 0x348, Size: 4]
	bool IsEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool CreativeModeCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
};

class PlayerStart.NavigationObjectBase.Actor.Object
{
	FName PlayerStartTag;//[Offset: 0x328, Size: 8]
};

class BornPlayerStartData
{
	int BornPointID;//[Offset: 0x0, Size: 4]
	STExtraPlayerStart*[] PlayerStarts;//[Offset: 0x4, Size: 12]
};

class GameStatisComponent.ActorComponent.Object
{
};

class ItemsBoxConfigDataAsset.DataAsset.Object
{
	DataTable* DataBase;//[Offset: 0x20, Size: 4]
	FString TablePath;//[Offset: 0x24, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x30, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x3c, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x48, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] UAVAirDropBoxGroupConfigs;//[Offset: 0x54, Size: 12]
};

class ItemsBoxConfigDataAssetConfigGroup
{
	FString GroupName;//[Offset: 0x0, Size: 12]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0xc, Size: 12]
};

class ItemsBoxConfigDataAssetConfigItem
{
	float ProbabilityPercent;//[Offset: 0x0, Size: 4]
	FString CategoryFilter;//[Offset: 0x4, Size: 12]
};

class GameModeParam
{
	float Radius0;//[Offset: 0x0, Size: 4]
	float Radius1;//[Offset: 0x4, Size: 4]
	float Radius3;//[Offset: 0x8, Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float Radius2;//[Offset: 0x10, Size: 4]
	Vector2D[] PolygonPoints;//[Offset: 0x14, Size: 12]
	float BlueCircleRadius;//[Offset: 0x20, Size: 4]
	Vector MapCenter;//[Offset: 0x24, Size: 12]
	float PlaneSpeed;//[Offset: 0x30, Size: 4]
	float PlaneHeight;//[Offset: 0x34, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x38, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x3c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x40, Size: 4]
	bool bCrossCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float CrossCenterRadius;//[Offset: 0x48, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x4c, Size: 4]
};

class AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
{
	FString AIOcclusionFilePath;//[Offset: 0x340, Size: 12]
	FString HousePathFilePath;//[Offset: 0x34c, Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	FString LogicAreaFilePath;//[Offset: 0x35c, Size: 12]
	bool bTestOccupiedOcclusionPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x3a4, Size: 60]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x41c, Size: 4]
	<Actor*,STBuffApplifierSpreading*> AllBuffApplifierSpreadings;//[Offset: 0x59c, Size: 60]
};

class AIWorldVolumeBase.Volume.Brush.Actor.Object
{
	float CellSize;//[Offset: 0x338, Size: 4]
};

class STBuffApplifierSpreading.Actor.Object
{
	Actor* ParentGrenade;//[Offset: 0x310, Size: 4]
	SceneComponent* SceneRoot;//[Offset: 0x320, Size: 4]
	Rotator[] InitialTraceArray;//[Offset: 0x324, Size: 12]
	int StepsPerTick;//[Offset: 0x330, Size: 4]
	int SpreadDirectionCount;//[Offset: 0x334, Size: 4]
	int MaxInstanceCount;//[Offset: 0x338, Size: 4]
	int MaxMaterialAdditiveInstanceCount;//[Offset: 0x33c, Size: 4]
	float InitialTraceLenClamp;//[Offset: 0x340, Size: 4]
	FName BlockingTag;//[Offset: 0x348, Size: 8]
	float NormalLimitZ;//[Offset: 0x350, Size: 4]
	float GroundTraceNormalScale_Start;//[Offset: 0x354, Size: 4]
	float InitialGroundTraceHeightZ;//[Offset: 0x358, Size: 4]
	float ConcurrentGroundTraceHeightZ;//[Offset: 0x35c, Size: 4]
	float ProcessedHitLenClamp;//[Offset: 0x360, Size: 4]
	float SphereRadius;//[Offset: 0x364, Size: 4]
	float SpreadXY;//[Offset: 0x368, Size: 4]
	float SpreadZ;//[Offset: 0x36c, Size: 4]
	class TslDamageField* DamageFieldClass;//[Offset: 0x370, Size: 4]
	float DamageTickInterval;//[Offset: 0x374, Size: 4]
	bool bModifyEffectLifetime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float InitialEffectLifetime;//[Offset: 0x37c, Size: 4]
	float MinEffectLifetimeForStart;//[Offset: 0x380, Size: 4]
	float EffectLifetimeVariation;//[Offset: 0x384, Size: 4]
	unsigned char[] InterestedSurfaceTypes;//[Offset: 0x388, Size: 12]
	float DamageFieldOffGround;//[Offset: 0x394, Size: 4]
	bool bMergeTwoBurningGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	SphereComponent*[] BlockerArray;//[Offset: 0x3ac, Size: 12]
	SphereComponent*[] MaterialBlockerArray;//[Offset: 0x3b8, Size: 12]
	TslDamageField*[] DamageFieldArray;//[Offset: 0x3c4, Size: 12]
	STExtraBaseCharacter*[] CharacterInEffectArray;//[Offset: 0x3d0, Size: 12]
	float VehicleWarOverlapCheckInternal;//[Offset: 0x454, Size: 4]
	int VehicleWarInnerSkillID;//[Offset: 0x458, Size: 4]
	int VehicleWarOuterSkillID;//[Offset: 0x45c, Size: 4]
};

class TslDamageField.Actor.Object
{
	Actor* ParentGrenade;//[Offset: 0x314, Size: 4]
};

class GameModeDataAsset.DataAsset.Object
{
	float[] Probabilities;//[Offset: 0x20, Size: 12]
	GameModeParam[] GameModeParams;//[Offset: 0x2c, Size: 12]
};

class MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
{
	int TimeToSpawnPawn;//[Offset: 0xc4, Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0xc8, Size: 12]
	<int,SpawnTableData> PawnTableData;//[Offset: 0xd4, Size: 60]
};

class GameModeProbeComponent.ActorComponent.Object
{
};

class SpawnGroupItemInfo
{
	int PawnGroupID;//[Offset: 0x0, Size: 4]
	int PawnID;//[Offset: 0x4, Size: 4]
	int PawnPercent;//[Offset: 0x8, Size: 4]
};

class SpawnTableData
{
	int PawnID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x4, Size: 12]
};

class AIWorldSoundManagerComponent.ActorComponent.Object
{
	<enum,SoundConfig> SoundConfig;//[Offset: 0xd8, Size: 60]
	<enum,SoundConfig> MlAISoundConfig;//[Offset: 0x114, Size: 60]
	enum[] HearSoundCharacterTypes;//[Offset: 0x150, Size: 12]
	FName SoundTypeKey;//[Offset: 0x160, Size: 8]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x168, Size: 8]
};

class SoundConfig
{
	float TransDist;//[Offset: 0x0, Size: 4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 12]
};

class SeasonStatueBase.Actor.Object
{
};

class GameModeState.Object
{
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	float StateTime;//[Offset: 0x78, Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x7c, Size: 4]
	GameStateBase* OwningGameState;//[Offset: 0x80, Size: 4]
};

class AIProbeComponent.GameModeProbeComponent.ActorComponent.Object
{
};

class WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
{
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0xc4, Size: 12]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
};

class PlaneComponent.LuaInstancedActorComponent.ActorComponent.Object
{
	int ClassicFlightNo;//[Offset: 0x114, Size: 4]
	<int,PlaneData> PlaneDataMap;//[Offset: 0x118, Size: 60]
	class Pawn* PlaneClass;//[Offset: 0x154, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bEnableClassic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bSyncRouteAfterFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x15c, Size: 12]
	AIController*[] CachedTotalAI;//[Offset: 0x168, Size: 12]
	int FlightTimes;//[Offset: 0x174, Size: 4]
	int NotifyEndFlightDelayTime;//[Offset: 0x178, Size: 4]
	int CustomFlightTimes;//[Offset: 0x188, Size: 4]
};

class PlaneData
{
	int FlightNo;//[Offset: 0x0, Size: 4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Actor* ThePlane;//[Offset: 0x8, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector PlaneVelocity;//[Offset: 0x10, Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x1c, Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x3c, Size: 8]
	float PlaneHeight;//[Offset: 0x44, Size: 4]
	int TotalPlayerNum;//[Offset: 0x48, Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x4c, Size: 12]
	PlayerController*[] CurPlayers;//[Offset: 0x58, Size: 12]
	int TotalAINum;//[Offset: 0x64, Size: 4]
	AIController*[] TotalAIs;//[Offset: 0x68, Size: 12]
	AIController*[] CurAIs;//[Offset: 0x74, Size: 12]
	int CurAINum;//[Offset: 0x80, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x84, Size: 4]
	bool bCanFixedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
};

class PlayerRespawnComponent.ActorComponent.Object
{
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0xc8, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xcc, Size: 4]
	enum RespawnPointType;//[Offset: 0xd0, Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0xd4, Size: 12]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0xe0, Size: 12]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0xec, Size: 12]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0xf8, Size: 60]
	<uint32,RespawnIgnoreItemType> PlayerRespawnIgnoreItemTypes;//[Offset: 0x134, Size: 60]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x170, Size: 24]
	int[] DefaultWeaponList;//[Offset: 0x188, Size: 12]
	float bRestoreDataDelay;//[Offset: 0x194, Size: 4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	delegate OnGlobalRespawnedDelegate;//[Offset: 0x19c, Size: 12]
	delegate OnRespawnedPlayerDelegate;//[Offset: 0x1a8, Size: 12]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x2a4, Size: 4]
	Pawn* RespawningPlayerPawn;//[Offset: 0x2a8, Size: 4]
};

class ReplaceWeaponDataMap
{
	<unsigned char,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0, Size: 60]
};

class ReplaceWeaponData
{
	int WeaponId;//[Offset: 0x0, Size: 4]
	BattleItemData WeaponItemData;//[Offset: 0x8, Size: 160]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0xa8, Size: 12]
};

class RespawnIgnoreItemType
{
};

class RespawnKeepAllItemData
{
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 12]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0xc, Size: 12]
};

class RespawnKeepItemData
{
	int ItemTypeID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
};

class RespawnKeepWeaponData.RespawnKeepItemData
{
	unsigned char WeaponSlot;//[Offset: 0x18, Size: 1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x1c, Size: 12]
	int ClipBulletNum;//[Offset: 0x28, Size: 4]
};

class ShowVehicleComponent.LuaInstancedActorComponent.ActorComponent.Object
{
	class Actor* VehicleSpotClass;//[Offset: 0x114, Size: 4]
	float DropHeightOffset;//[Offset: 0x118, Size: 4]
	float LeftTimeToDestroyVehicles;//[Offset: 0x11c, Size: 4]
	float TimerHzToDestroyVehicles;//[Offset: 0x120, Size: 4]
	bool bUseNewVehicleSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	float LeftTimeToDestroyWingman;//[Offset: 0x128, Size: 4]
	float TimerHzToDestroyWingman;//[Offset: 0x12c, Size: 4]
	int MaxVehicles;//[Offset: 0x130, Size: 4]
	int MaxVehiclesPerGroup;//[Offset: 0x134, Size: 4]
	Actor*[] VehicleSpotActors;//[Offset: 0x138, Size: 12]
	VehicleSpots[] VehicleSpotGroup;//[Offset: 0x15c, Size: 12]
	<uint32,Actor*> VehicleContainers;//[Offset: 0x168, Size: 60]
	<int,Actor*> WingmanMap;//[Offset: 0x1e8, Size: 60]
};

class VehicleSpots
{
	Transform[] Spots;//[Offset: 0x0, Size: 12]
	<int> UsedSpot;//[Offset: 0xc, Size: 60]
	<int,UsedVehicleSpots> GroupIndexUsedVehicleSpotsMap;//[Offset: 0x48, Size: 60]
};

class UsedVehicleSpots
{
	<int> UsedSpot;//[Offset: 0x0, Size: 60]
};

class PlaneTypes
{
	int SeasonIdx;//[Offset: 0x0, Size: 4]
	FString PlaneClassFullPath;//[Offset: 0x4, Size: 12]
};

class ClientSettingBaseOnGameMode
{
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4, Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14, Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 12]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c, Size: 12]
};

class BulletImpactFXTargetCullingByQualityLeveConfigItem
{
	unsigned char QualityLevel;//[Offset: 0x0, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4, Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10, Size: 12]
};

class ItemAttach
{
	int BaseItemID;//[Offset: 0x0, Size: 4]
	AddItemInfo[] AttachItemList;//[Offset: 0x4, Size: 12]
};

class AddItemInfo
{
	int AddItemID;//[Offset: 0x0, Size: 4]
	int AddItemNum;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
};

class RespawnItemConfigInst
{
	int RandomWeight;//[Offset: 0x0, Size: 4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x4, Size: 4]
};

class RespawnItemConfig.DataAsset.Object
{
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x20, Size: 12]
};

class RespawnItemMajorGroup
{
	int RandomTimes;//[Offset: 0x0, Size: 4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x4, Size: 12]
};

class RespawnItemMinorGroup
{
	int RandomWeight;//[Offset: 0x0, Size: 4]
	RespawnItem[] ItemList;//[Offset: 0x4, Size: 12]
};

class RespawnItem
{
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
};

class FakePlayerCustomComponent.ActorComponent.Object
{
	FString tableName;//[Offset: 0xc4, Size: 12]
	FString FakePlayerCampNameTableName;//[Offset: 0xd0, Size: 12]
	FString FakePlayerRandomNameTableName;//[Offset: 0xdc, Size: 12]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0xe8, Size: 60]
	<int,FString> FakePlayerCampNameMap;//[Offset: 0x124, Size: 60]
	FString[] FakePlayerRandomNamePrefixArray;//[Offset: 0x160, Size: 12]
	FString[] FakePlayerRandomNameArray;//[Offset: 0x16c, Size: 12]
};

class FakePlayerCustomRow
{
	int ID;//[Offset: 0x0, Size: 4]
	FString ControllerPath;//[Offset: 0x4, Size: 12]
	FString Name;//[Offset: 0x10, Size: 12]
	int gender;//[Offset: 0x1c, Size: 4]
	FString ItemStr;//[Offset: 0x20, Size: 12]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x2c, Size: 12]
	int IsUseRandomName;//[Offset: 0x38, Size: 4]
	int NameLocalizeId;//[Offset: 0x3c, Size: 4]
};

class DSTickRateOptimize
{
	float TickFrequency;//[Offset: 0x0, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x4, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x8, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0xc, Size: 4]
};

class GroupPlayers
{
	uint32[] Players;//[Offset: 0x0, Size: 12]
};

class PVSNetRelevantHelper.Object
{
	float MaxVoiceSyncDissquaredDeathMatch;//[Offset: 0x9c, Size: 4]
	float MaxVoiceSyncDissquaredBR;//[Offset: 0xa0, Size: 4]
	float MaxVoiceSyncDissquared;//[Offset: 0xa4, Size: 4]
	bool bEnableVoiceLODSector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int VoiceLODSectorCircleDivideCount;//[Offset: 0xbc, Size: 4]
	int VoiceLODSectorBeginDistance;//[Offset: 0xc0, Size: 4]
	int VoiceLODSectorBeginThickness;//[Offset: 0xc4, Size: 4]
	enum GameModeModType;//[Offset: 0xc8, Size: 4]
	bool bEnableCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	float ModdedMinJudgeDistanceSquared;//[Offset: 0xd0, Size: 4]
	float BaseModMinJudgeDistanceSquared;//[Offset: 0xd4, Size: 4]
	float MinJudgeDisquared;//[Offset: 0xd8, Size: 4]
	float MinSprintFootVoiceNeedVelocitySquared;//[Offset: 0xdc, Size: 4]
	bool bAIVoiceSyncSpecial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bHasDecidedMinJudgeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	float CameraStayStillButCharacterMoveDistanceThreshold;//[Offset: 0x124, Size: 4]
};

class GameModeCVarConfigItem
{
	FString Key;//[Offset: 0x0, Size: 12]
	FString Value;//[Offset: 0xc, Size: 12]
};

class AIControllerList
{
};

class AIPawnPoolItem
{
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x0, Size: 4]
};

class BlowUpData
{
	float TimeStamp;//[Offset: 0x0, Size: 4]
	int InternalBlowUpID;//[Offset: 0x4, Size: 4]
	bool bIsBeingBlew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float InternalTime;//[Offset: 0xc, Size: 4]
	Vector LaunchVelocity;//[Offset: 0x10, Size: 12]
	Actor* HitActor;//[Offset: 0x1c, Size: 8]
	PrimitiveComponent* HitComponent;//[Offset: 0x24, Size: 8]
};

class NetMoveSpeedParameter
{
	float MaxWalkSpeed;//[Offset: 0x0, Size: 4]
	float WalkCurveSpeed;//[Offset: 0x4, Size: 4]
	float SpeedValue;//[Offset: 0x8, Size: 4]
	unsigned char SpeedScale;//[Offset: 0xc, Size: 1]
	unsigned char SpeedRate;//[Offset: 0xd, Size: 1]
	unsigned char SwimSpeedDynamicScale;//[Offset: 0xe, Size: 1]
	unsigned char EnergySpeedScale;//[Offset: 0xf, Size: 1]
	int WalkSpeedCurveScale;//[Offset: 0x10, Size: 4]
};

class SplineMoveInfo
{
	SplineComponent* MoveAlongSpline;//[Offset: 0x0, Size: 8]
};

class WeatherInfo
{
	FString WeatherLevelName;//[Offset: 0x0, Size: 12]
	int WeatherId;//[Offset: 0xc, Size: 4]
	float WeatherTime;//[Offset: 0x10, Size: 4]
};

class PlayerNetStats
{
	FString ClientAddr;//[Offset: 0x0, Size: 12]
	FString LocalAddr;//[Offset: 0xc, Size: 12]
	float AvgPing;//[Offset: 0x18, Size: 4]
	float MaxPing;//[Offset: 0x1c, Size: 4]
	float HighPingPercent;//[Offset: 0x20, Size: 4]
};

class PlayerOBInfo
{
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UID;//[Offset: 0x8, Size: 8]
	int ZoneID;//[Offset: 0x10, Size: 4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	int WinCount;//[Offset: 0x24, Size: 4]
	int TopTenCount;//[Offset: 0x28, Size: 4]
	int KillNum;//[Offset: 0x2c, Size: 4]
	float KDNum;//[Offset: 0x30, Size: 4]
	TPlanExtraOBInfo TPlanInfo;//[Offset: 0x38, Size: 32]
};

class TPlanExtraOBInfo
{
	int GameCount;//[Offset: 0x0, Size: 4]
	int Military;//[Offset: 0x4, Size: 4]
	int64 Income;//[Offset: 0x8, Size: 8]
	float EscapeRate;//[Offset: 0x10, Size: 4]
	int KillNum;//[Offset: 0x14, Size: 4]
	float KDNum;//[Offset: 0x18, Size: 4]
};

class GameModePlayerItems
{
	GameModePlayerItem[] Items;//[Offset: 0x0, Size: 12]
};

class GameModeWeaponAvatarData
{
	int ParentID;//[Offset: 0x0, Size: 4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 4]
};

class VehicleAvatarSkinList
{
	int[] SkinList;//[Offset: 0x0, Size: 12]
};

class LobbyWatchInfo
{
	uint32 WatchedPlayerKey;//[Offset: 0x0, Size: 4]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
};

class NetworkReportActor.Actor.Object
{
	int LossRateArrayNum;//[Offset: 0x310, Size: 4]
	int MaxCacheLossRateArrayNum;//[Offset: 0x314, Size: 4]
	FString InPacketLossRateArrayStr;//[Offset: 0x318, Size: 12]
	FString OutPacketLossRateArrayStr;//[Offset: 0x324, Size: 12]
};

class ValidTouchMoveFrameConfig
{
	FString DeviceName;//[Offset: 0x0, Size: 12]
	int Enable;//[Offset: 0xc, Size: 4]
	int Frame;//[Offset: 0x10, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
};

class BattleSceneAvatarDisplayInfo
{
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc, Size: 12]
	int PlayerGender;//[Offset: 0x18, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20, Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c, Size: 12]
};

class ClientFatalDamageRecordData
{
	FString Causer;//[Offset: 0x0, Size: 12]
	FString CauserNation;//[Offset: 0xc, Size: 12]
	FString VictimName;//[Offset: 0x18, Size: 12]
	FString VictimNation;//[Offset: 0x24, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x30, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x3c, Size: 12]
	int DamageType;//[Offset: 0x48, Size: 4]
	int AdditionalParam;//[Offset: 0x4c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x50, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x54, Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ResultHealthStatus;//[Offset: 0x5c, Size: 4]
	unsigned char RecordRelationShip;//[Offset: 0x60, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x64, Size: 4]
	FString RealKillerName;//[Offset: 0x68, Size: 12]
	int RealKillNum;//[Offset: 0x74, Size: 4]
	unsigned char CauserType;//[Offset: 0x78, Size: 1]
	unsigned char VictimType;//[Offset: 0x79, Size: 1]
	int CauserTeamID;//[Offset: 0x7c, Size: 4]
	int VictimTeamID;//[Offset: 0x80, Size: 4]
	bool IsUseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	LinearColor UseColor;//[Offset: 0x88, Size: 16]
	unsigned char[] ExpandDataContent;//[Offset: 0x98, Size: 12]
};

class SensibilityConfig
{
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 40]
	SensibilityMode FireMode;//[Offset: 0x28, Size: 40]
	SensibilityMode MotionMode;//[Offset: 0x50, Size: 40]
	SensibilityMode MotionFireMode;//[Offset: 0x78, Size: 40]
	float VehicleEye;//[Offset: 0xa0, Size: 4]
	float ParachuteEye;//[Offset: 0xa4, Size: 4]
	float FPPEye;//[Offset: 0xa8, Size: 4]
	int SideMirrorModeC;//[Offset: 0xac, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xb0, Size: 60]
};

class SensibilityMode
{
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]
	float Shoulder;//[Offset: 0x20, Size: 4]
	float ShoulderFPP;//[Offset: 0x24, Size: 4]
};

class SightMaterialConfig
{
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]
};

class KillOrPutDownMessage
{
	unsigned char MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x4, Size: 12]
	FString AttackName;//[Offset: 0x10, Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int KillNum;//[Offset: 0x20, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bHideKillIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	FString FullMsg;//[Offset: 0x28, Size: 12]
	FString VictimPlayerName;//[Offset: 0x34, Size: 12]
	FString CauserPlayerName;//[Offset: 0x40, Size: 12]
	FString CauserRealPlayerName;//[Offset: 0x4c, Size: 12]
	bool bIsCauserTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bIsVictimTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bIamCauser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	bool bIamVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 1]
	int ResultHealthStatus;//[Offset: 0x5c, Size: 4]
	int CauserType;//[Offset: 0x60, Size: 4]
	int DamageType;//[Offset: 0x64, Size: 4]
	int AdditionalParam;//[Offset: 0x68, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x6c, Size: 4]
	unsigned char[] ExpandDataContent;//[Offset: 0x70, Size: 12]
	int AssistNum;//[Offset: 0x7c, Size: 4]
};

class NewbieGuideComponent.ActorComponent.Object
{
	int CurTipsID;//[Offset: 0xc4, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	float GuideInterval;//[Offset: 0xcc, Size: 4]
	int MaxGuideLevel;//[Offset: 0xd0, Size: 4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0xd8, Size: 40]
	class Object[] tGuideConfigClassArray;//[Offset: 0x100, Size: 12]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x10c, Size: 12]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x118, Size: 40]
	NewbieGuideItem[] tItems;//[Offset: 0x140, Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0x14c, Size: 4]
	int[] FinishedTips;//[Offset: 0x150, Size: 12]
	int[] FinishedCounts;//[Offset: 0x15c, Size: 12]
	int PlayerLevel;//[Offset: 0x168, Size: 4]
	unsigned char curPlayerCategory;//[Offset: 0x16c, Size: 1]
};

class STNewBieGuideConfig.Object
{
	NewbieGuideItem[] tItems;//[Offset: 0x1c, Size: 12]
};

class NewbieGuideItem
{
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	unsigned char Type;//[Offset: 0x10, Size: 1]
	int MaxGuideCounts;//[Offset: 0x14, Size: 4]
	int MaxGuideLevel;//[Offset: 0x18, Size: 4]
	unsigned char[] SubjectPlayerTypes;//[Offset: 0x1c, Size: 12]
	int Priority;//[Offset: 0x28, Size: 4]
	int MuteFlag;//[Offset: 0x2c, Size: 4]
	int PreconditionID;//[Offset: 0x30, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x34, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x38, Size: 12]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44, Size: 4]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListenerList;//[Offset: 0x48, Size: 12]
	float Duration;//[Offset: 0x54, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x58, Size: 12]
	bool UseNewEdition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
};

class STNewbieGuideConditionBase.Object
{
	Controller* OwnerController;//[Offset: 0x5c, Size: 8]
	FString LuaFilePath;//[Offset: 0x64, Size: 12]
};

class STNewbieGuideSuccessListenerBase.GSListenerBase.Object
{
};

class GSListenerBase.Object
{
	delegate OnGSListenerBaseTrigger;//[Offset: 0x1c, Size: 12]
	Controller* OwnerController;//[Offset: 0x28, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float DelayTime;//[Offset: 0x34, Size: 4]
};

class NewbieGuideUIInfo
{
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString MountName;//[Offset: 0x2c, Size: 12]
	FString MountOuterName;//[Offset: 0x38, Size: 12]
	AnchorData LayoutData;//[Offset: 0x44, Size: 40]
	FString LogicManagerNames;//[Offset: 0x6c, Size: 12]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	int ZOrder;//[Offset: 0x7c, Size: 4]
	Widget* UIWidget;//[Offset: 0x80, Size: 4]
	class Object* UIWidgetClass;//[Offset: 0x84, Size: 4]
};

class AnchorData
{
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]
};

class Anchors
{
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]
};

class PVSComponent.ActorComponent.Object
{
};

class TimeWatchDogComponent.ActorComponent.Object
{
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	float TimeStartDelay;//[Offset: 0xc8, Size: 4]
	float SyncInterval;//[Offset: 0xcc, Size: 4]
};

class PlayerAntiCheatManager.ActorComponent.Object
{
	VerifySwitch CheatStateData2TotalCheatTimes;//[Offset: 0xd0, Size: 32]
	VerifySwitch MoveCheatAntiStrategy3TotalCheatTimes;//[Offset: 0xf4, Size: 32]
	VerifySwitch VsNoHitDetail;//[Offset: 0x12c, Size: 32]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x14c, Size: 32]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x16c, Size: 32]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x18c, Size: 32]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x1ac, Size: 32]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x1cc, Size: 32]
	VerifySwitch VsBoneScale;//[Offset: 0x1ec, Size: 32]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x20c, Size: 32]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x22c, Size: 32]
	VerifySwitch VsBulletID;//[Offset: 0x24c, Size: 32]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x26c, Size: 32]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x28c, Size: 32]
	int MaxShootPointPassWall;//[Offset: 0x2ac, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x2b0, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x2b4, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2b8, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x2bc, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x2c0, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2c4, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2c8, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2cc, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2d0, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2d4, Size: 32]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x2f4, Size: 32]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x314, Size: 32]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x334, Size: 32]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x354, Size: 32]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x374, Size: 32]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x394, Size: 32]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x3b4, Size: 32]
	int MaxMergedStrategy1;//[Offset: 0x3d4, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x3d8, Size: 4]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3dc, Size: 32]
	VerifySwitch VsClientNotConnectShoot;//[Offset: 0x3fc, Size: 32]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x41c, Size: 32]
	VerifySwitch VsShootRpgShootIntervalVerify;//[Offset: 0x43c, Size: 32]
	float MaxFuelConsume;//[Offset: 0x45c, Size: 4]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x4dc, Size: 32]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x4fc, Size: 32]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x520, Size: 32]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x540, Size: 32]
	VerifySwitch VsClientBulletDir;//[Offset: 0x560, Size: 32]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x580, Size: 32]
	VerifySwitch VsClientDownShoot;//[Offset: 0x5a0, Size: 32]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x5c0, Size: 32]
	VerifySwitch FarJump;//[Offset: 0x5e0, Size: 32]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x600, Size: 32]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x620, Size: 32]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x640, Size: 32]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x660, Size: 32]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x680, Size: 32]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x6a0, Size: 32]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x6c0, Size: 32]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x6e0, Size: 32]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x700, Size: 28]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x71c, Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x720, Size: 32]
	float ClientTimeTotalAcc;//[Offset: 0x740, Size: 4]
	float ServerAccumulateErrors;//[Offset: 0x748, Size: 4]
	float ServerAvgErrors;//[Offset: 0x74c, Size: 4]
	VerifySwitch ServerAccumulateErrorReplay;//[Offset: 0x758, Size: 32]
	BurstVerifySwitch ServerAccumulateErrorBurst;//[Offset: 0x778, Size: 100]
	BurstVerifySwitch ServerAccumulateErrorBurstTrial;//[Offset: 0x7dc, Size: 100]
	VerifySwitch DSSpeedOver10FailedCnt;//[Offset: 0x840, Size: 32]
	VerifySwitch DSSpeedOver15FailedCnt;//[Offset: 0x860, Size: 32]
	VerifySwitch DSSpeedOver20FailedCnt;//[Offset: 0x880, Size: 32]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x8a0, Size: 32]
	VerifySwitch BulletDirError;//[Offset: 0x8c0, Size: 32]
	VerifySwitch MuzzleAndOwnerDisOpti;//[Offset: 0x8e0, Size: 32]
	VerifySwitch ImpactAndEnemyDisOpti;//[Offset: 0x900, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirError1;//[Offset: 0x920, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirError2;//[Offset: 0x940, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirSkipPunish1;//[Offset: 0x960, Size: 32]
	VerifySwitch SwitchMuzzleImpactDirSkipPunish2;//[Offset: 0x980, Size: 32]
	VerifySwitch SwitchShootPosHistoryLocusError2;//[Offset: 0x9a0, Size: 32]
	VerifySwitch SwitchShootPosHistoryLocusError3;//[Offset: 0x9c0, Size: 32]
	VerifySwitch SwitchMuzzleLocusError;//[Offset: 0x9e0, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorX;//[Offset: 0xa00, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorY;//[Offset: 0xa20, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorZ;//[Offset: 0xa40, Size: 32]
	VerifySwitch SwitchMuzzleLocusErrorLength;//[Offset: 0xa60, Size: 32]
	VerifySwitch SwitchShooterMovementError1;//[Offset: 0xa80, Size: 32]
	VerifySwitch SwitchShooterMovementError2;//[Offset: 0xaa0, Size: 32]
	VerifySwitch SwitchHeadLocusError3;//[Offset: 0xac0, Size: 32]
	VerifySwitch Gun2ShooterPosError1;//[Offset: 0xae0, Size: 32]
	VerifySwitch Head2GunTailPosError1;//[Offset: 0xb00, Size: 32]
	VerifySwitch ShooterHead2PosBlock;//[Offset: 0xb20, Size: 32]
	float MaxUseOptiArguPing;//[Offset: 0xb40, Size: 4]
	int ShootVerifyTimes;//[Offset: 0xb44, Size: 4]
	float VehicleSpeedZDeltaTotal;//[Offset: 0xb8c, Size: 4]
	int VehicleSpeedZDeltaOver10Times;//[Offset: 0xb90, Size: 4]
	VerifySwitch VehicleSpeedZDeltaOver10TimesWhenNoXY;//[Offset: 0xb94, Size: 32]
	VerifySwitch VehicleVelZCheck1;//[Offset: 0xbb4, Size: 32]
	VerifySwitch VehicleVelZCheck2;//[Offset: 0xbd4, Size: 32]
	VerifySwitch VehicleHitMuzzleCheck;//[Offset: 0xbf4, Size: 32]
	VerifySwitch VehicleHitImpactPointCheck;//[Offset: 0xc14, Size: 32]
	VerifySwitch VehicleHitBlockWall;//[Offset: 0xc34, Size: 32]
	VerifySwitch FarShootInMidAirVehicleExceedThreshold;//[Offset: 0xc54, Size: 32]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceTrial;//[Offset: 0xc74, Size: 32]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceFurtherTrial;//[Offset: 0xc94, Size: 32]
	VerifySwitch FarShootInMidAirVehicleHeightTrial;//[Offset: 0xcb4, Size: 32]
	VerifySwitch FarShootInMidAirVehicleHeightFurtherTrial;//[Offset: 0xcd4, Size: 32]
	VerifySwitch FarShootInMidAirPawnExceedThreshold;//[Offset: 0xcf4, Size: 32]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceTrial;//[Offset: 0xd14, Size: 32]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceFurtherTrial;//[Offset: 0xd34, Size: 32]
	VerifySwitch FarShootInMidAirPawnHeightTrial;//[Offset: 0xd54, Size: 32]
	VerifySwitch FarShootInMidAirPawnHeightFurtherTrial;//[Offset: 0xd74, Size: 32]
	VerifySwitch DSRunning2DSpeedExceededCount;//[Offset: 0xd94, Size: 32]
	VerifySwitch DSRunning2DSpeedTrial;//[Offset: 0xdb4, Size: 32]
	VerifySwitch DSRunning2DSpeedFurtherTrial;//[Offset: 0xdd4, Size: 32]
	VerifySwitch DSIgnoreNetworkDying2DSpeedExceededCount;//[Offset: 0xdf4, Size: 32]
	VerifySwitch DSProneMoveSpeedExceedCount;//[Offset: 0xe14, Size: 32]
	VerifySwitch DSDyingMoveSpeedExceedCount;//[Offset: 0xe34, Size: 32]
	VerifySwitch DSSprintCrouchMoveSpeedExceedCount;//[Offset: 0xe54, Size: 32]
	VerifySwitch DSAimCrouchMoveSpeedExceedCount;//[Offset: 0xe74, Size: 32]
	VerifySwitch DSNonSprintNonAimCrouchMoveSpeedExceedCount;//[Offset: 0xe94, Size: 32]
	VerifySwitch NonGunADSFarShootCount;//[Offset: 0xeb4, Size: 32]
	VerifySwitch NonGunADSFarShootFromClientBulletDataCount;//[Offset: 0xed4, Size: 32]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceTrialCount;//[Offset: 0xef4, Size: 32]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceFurtherTrialCount;//[Offset: 0xf14, Size: 32]
	VerifySwitch ClientUploadFuzzyObjectVerifyFail;//[Offset: 0xf34, Size: 32]
	VerifySwitch ClientMoveTimeStampResetFrequencyExceedThreshold;//[Offset: 0xf54, Size: 32]
	VerifySwitch ShootBirdNonGunADSExceedThreshold;//[Offset: 0xf74, Size: 32]
	VerifySwitch ShootBirdNonGunADSDistanceTrial;//[Offset: 0xf94, Size: 32]
	VerifySwitch ShootBirdNonGunADSDistanceFurtherTrial;//[Offset: 0xfb4, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedExceedThreshold;//[Offset: 0xfd4, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceTrial;//[Offset: 0xff4, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceFurtherTrial;//[Offset: 0x1014, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedTrial;//[Offset: 0x1034, Size: 32]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedFurtherTrial;//[Offset: 0x1054, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKill;//[Offset: 0x1074, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillDistanceTrial;//[Offset: 0x1094, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillTimeTrial;//[Offset: 0x10b4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillMaxTime;//[Offset: 0x10d4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItem;//[Offset: 0x10f4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemDistanceTrial;//[Offset: 0x1114, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemTimeTrial;//[Offset: 0x1134, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemMaxTime;//[Offset: 0x1154, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKill;//[Offset: 0x1174, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillDistanceTrial;//[Offset: 0x1194, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillTimeTrial;//[Offset: 0x11b4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillMaxTime;//[Offset: 0x11d4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicle;//[Offset: 0x11f4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleDistanceTrial;//[Offset: 0x1214, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleTimeTrial;//[Offset: 0x1234, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleMaxTime;//[Offset: 0x1254, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicle;//[Offset: 0x1274, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleTimeTrial;//[Offset: 0x1294, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleMaxTime;//[Offset: 0x12b4, Size: 32]
	VerifySwitch IllegalTeamUpUseObjectTogether;//[Offset: 0x12d4, Size: 32]
	VerifySwitch IllegalTeamUpGetOnEnemyVehicleCount;//[Offset: 0x12f4, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFoot;//[Offset: 0x1314, Size: 32]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFootDistanceTrial;//[Offset: 0x1334, Size: 32]
	VerifySwitch IllegalTeamUpStayOnEnemyVehicle;//[Offset: 0x1354, Size: 32]
	VerifySwitch KillBird;//[Offset: 0x1374, Size: 32]
	VerifySwitch ParachuteLandingSecondsExceedThreshold;//[Offset: 0x1394, Size: 32]
	VerifySwitch ParachuteObliqueLandingSecondsExceedThreshold;//[Offset: 0x13b4, Size: 32]
	VerifySwitch ShootBird;//[Offset: 0x13dc, Size: 32]
	VerifySwitch DSFallingSpeedFailCount;//[Offset: 0x13fc, Size: 32]
	VerifySwitch DSFallingHeightFailCount;//[Offset: 0x141c, Size: 32]
	int PVSInCityKillCount;//[Offset: 0x143c, Size: 4]
	int PVSNotInCityKillCount;//[Offset: 0x1440, Size: 4]
	float PVSInCityKillTotalTime;//[Offset: 0x1444, Size: 4]
	float PVSNotInCityKillTotalTime;//[Offset: 0x1448, Size: 4]
	float PVSInCityKillerTotalMoveDistance;//[Offset: 0x144c, Size: 4]
	float PVSNotInCityKillerTotalMoveDistance;//[Offset: 0x1450, Size: 4]
	int PVSCellHidePercent;//[Offset: 0x1454, Size: 4]
	int PVSTotalHidePercent;//[Offset: 0x1458, Size: 4]
	VerifySwitch ShooterCapsuleCollided;//[Offset: 0x1464, Size: 32]
	VerifySwitch JumpReviewHighJumpExceed;//[Offset: 0x1484, Size: 32]
	VerifySwitch JumpReviewFarJumpExceed;//[Offset: 0x14a4, Size: 32]
	VerifySwitch JumpReviewLowerFarJump;//[Offset: 0x14c4, Size: 32]
	float ActorTimeDilation;//[Offset: 0x14e4, Size: 4]
	VerifySwitch SmallActorTimeDilationCount;//[Offset: 0x14e8, Size: 32]
	VerifySwitch LargeRotateLockShooting;//[Offset: 0x1508, Size: 32]
	VerifySwitch SmallRotateLockShooting;//[Offset: 0x1528, Size: 32]
	VerifySwitch OneClipShootCount;//[Offset: 0x1548, Size: 32]
	VerifySwitch ClientWeaponFastReload;//[Offset: 0x1568, Size: 32]
	VerifySwitch WalkSpeedFailedCnt;//[Offset: 0x1588, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistance2D;//[Offset: 0x16e8, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistance2DTrial;//[Offset: 0x1708, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistance2DFurther;//[Offset: 0x1728, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistanceZ;//[Offset: 0x1748, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistanceZTrial;//[Offset: 0x1768, Size: 32]
	VerifySwitch DSCheckClientTimeMoveDistanceZFurther;//[Offset: 0x1788, Size: 32]
	float MaxFallingSustainTime;//[Offset: 0x17a8, Size: 4]
	VerifySwitch ReplayMaxFallingSustainTime;//[Offset: 0x17ac, Size: 32]
	float MaxCustomMoveModeSustainTime;//[Offset: 0x17cc, Size: 4]
	VerifySwitch ReplayMaxCustomMoveModeSustainTime;//[Offset: 0x17d0, Size: 32]
	float MaxMoveDistance2DPerSecond;//[Offset: 0x17f0, Size: 4]
	float MaxDistanceToGround;//[Offset: 0x17f4, Size: 4]
	float MaxSingleShotDamage;//[Offset: 0x17f8, Size: 4]
	VerifySwitch ReplayMaxSingleShotDamage;//[Offset: 0x17fc, Size: 32]
	VerifySwitch UndergroundCount;//[Offset: 0x181c, Size: 32]
	VerifySwitch MoveDistance2DPerSecondAnomaly;//[Offset: 0x183c, Size: 32]
	VerifySwitch DistanceToGroundAnomaly;//[Offset: 0x185c, Size: 32]
	VerifySwitch SingleShotDamageAnomaly;//[Offset: 0x187c, Size: 32]
	BurstVerifySwitch DSSpeedOver10BurstCount;//[Offset: 0x189c, Size: 100]
	VerifySwitch BandaCount;//[Offset: 0x1900, Size: 32]
	VerifySwitch LargeInstantAimShoot;//[Offset: 0x1920, Size: 32]
	VerifySwitch SmallInstantAimShoot;//[Offset: 0x1940, Size: 32]
	VerifySwitch LargeInstantAimHit;//[Offset: 0x1960, Size: 32]
	VerifySwitch SmallInstantAimHit;//[Offset: 0x1980, Size: 32]
	BurstVerifySwitch ParachuteSpeedBurst;//[Offset: 0x19a0, Size: 100]
	BurstVerifySwitch ClientTimestampBurst;//[Offset: 0x1a04, Size: 100]
	BurstVerifySwitch ClientTimestampBurstTrial;//[Offset: 0x1a68, Size: 100]
	VerifySwitch MetroEnterRadiationTime;//[Offset: 0x1acc, Size: 32]
	VerifySwitch MetroEnterRadiationTimeTrial;//[Offset: 0x1aec, Size: 32]
	VerifySwitch MetroLeaveBornObstacle;//[Offset: 0x1b0c, Size: 32]
	float ParachuteStartTime;//[Offset: 0x1b6c, Size: 4]
	float ParachuteOpenTime;//[Offset: 0x1b70, Size: 4]
	float ParachuteCloseTime;//[Offset: 0x1b74, Size: 4]
	float ParachuteStartHight;//[Offset: 0x1b78, Size: 4]
	float ParachuteOpenHight;//[Offset: 0x1b7c, Size: 4]
	float ParachuteCloseHight;//[Offset: 0x1b80, Size: 4]
	<enum,uint32> ReportMiscMap;//[Offset: 0x1bfc, Size: 60]
	int PlayerBadPingTimes;//[Offset: 0x1c38, Size: 4]
	int BulletTrackComponentUseTss;//[Offset: 0x1c4c, Size: 4]
	VerifySwitch VsPetJumpHeightLimiter;//[Offset: 0x1c50, Size: 32]
	VerifySwitch VsPetMoveSpeedLimiter;//[Offset: 0x1c70, Size: 32]
	VerifySwitch VsBioVehicleMoveSpeedLimiter;//[Offset: 0x1c90, Size: 32]
	VerifySwitch ServerMoveCacheCountOver;//[Offset: 0x1cb0, Size: 32]
	VerifySwitch ServerMoveBurst;//[Offset: 0x1cd0, Size: 32]
	VerifySwitch KillOtherAfterBurst;//[Offset: 0x1cf0, Size: 32]
	VerifySwitch VerifySwitchCameraRotation;//[Offset: 0x1d10, Size: 32]
	VerifySwitch VerifySwitchPeekShootThroughWall;//[Offset: 0x1d30, Size: 32]
	VerifySwitch VerifySwitchCameraLocation;//[Offset: 0x1d50, Size: 32]
	VerifySwitch VerifySwitchAutoAimByLockView;//[Offset: 0x1d70, Size: 32]
	VerifySwitch VerifySwitchControlRotation;//[Offset: 0x1d90, Size: 32]
	VerifySwitch VerifySwitchRecoilFaildCount;//[Offset: 0x1db0, Size: 32]
	VerifySwitch VerifySwitchMarcoPolo;//[Offset: 0x1dd0, Size: 32]
};

class AntiCheatDetailData
{
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x10, Size: 12]
};

class BurstVerifySwitch.VerifySwitch
{
	float BurstTime;//[Offset: 0x5c, Size: 4]
	int BurstCount;//[Offset: 0x60, Size: 4]
};

class CommonCameraModeData
{
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]
};

class SwitchCameraData.CameraData
{
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]
};

class CameraData
{
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]
};

class AimCameraModeData
{
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]
};

class CameraViewPitchLimitData
{
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]
};

class ServerHitEnemyReplicatedData
{
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 4]
	uint32 EventID;//[Offset: 0x4, Size: 4]
};

class WeaponSystemReconnectReplicateData
{
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x8, Size: 8]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x10, Size: 12]
};

class TeamMateStateInfo
{
	unsigned char DirtyFlags;//[Offset: 0x0, Size: 1]
	STExtraPlayerState* PlayerState;//[Offset: 0x4, Size: 4]
	Vector_NetQuantize10 Location;//[Offset: 0x8, Size: 12]
	Rotator Rotation;//[Offset: 0x14, Size: 12]
	float PlayerHealth;//[Offset: 0x20, Size: 4]
	float PlayerHealthMax;//[Offset: 0x24, Size: 4]
	int MemberIdInVoiceRoom;//[Offset: 0x28, Size: 4]
};

class TeamateStateUAVChangedCompressData
{
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	unsigned char Roll;//[Offset: 0x10, Size: 1]
	unsigned char uavType;//[Offset: 0x11, Size: 1]
};

class BackpackRepActor.PlayerReliableSequentialSyncActor.PlayerActorChannelExActor.Actor.Object
{
	BackpackComponent* BackpackComp;//[Offset: 0x31c, Size: 4]
	IncNetArray ItemListNet;//[Offset: 0x320, Size: 24]
};

class PlayerReliableSequentialSyncActor.PlayerActorChannelExActor.Actor.Object
{
	PlayerController* OwningController;//[Offset: 0x318, Size: 4]
};

class PlayerActorChannelExActor.Actor.Object
{
};

class CommonBtnComponent.ActorComponent.Object
{
	float CheckDoorDistanceSqr;//[Offset: 0xc4, Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0xc8, Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xcc, Size: 4]
};

class PUBGDoor.UAENetActor.LuaActor.Actor.Object
{
	int iRegionDoor;//[Offset: 0x424, Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x42c, Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x434, Size: 4]
	float autoOpenAngel;//[Offset: 0x438, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x43c, Size: 4]
	int DoorState;//[Offset: 0x440, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	float DoorOperateTime;//[Offset: 0x448, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x44c, Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x450, Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x454, Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	int DoorStateEx;//[Offset: 0x45c, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x464, Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x468, Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x46c, Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 1]
	delegate OnDoorBrokenDelegate;//[Offset: 0x474, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x480, Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x48c, Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x498, Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x49c, Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x4a8, Size: 4]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x4b0, Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x4b8, Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x4c8, Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	DoorOpenConfig DoorOpenConfig;//[Offset: 0x4ec, Size: 8]
	ExDoorOpenConfig ExDoorOpenConfig;//[Offset: 0x4f4, Size: 8]
};

class DoorOpenConfig
{
	int DoorState;//[Offset: 0x0, Size: 4]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
};

class ExDoorOpenConfig
{
	int DoorStateEx;//[Offset: 0x0, Size: 4]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
};

class ChatComponent.LuaActorComponent.ActorComponent.Object
{
	int end_time;//[Offset: 0x154, Size: 4]
	FString Reason;//[Offset: 0x158, Size: 12]
	int[] audioChat;//[Offset: 0x164, Size: 12]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0x170, Size: 12]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0x17c, Size: 12]
	QuickChatOption[] allChatOption;//[Offset: 0x188, Size: 12]
	int MinTraceDist;//[Offset: 0x194, Size: 4]
	FString TeammateColor;//[Offset: 0x198, Size: 12]
	FString MyColor;//[Offset: 0x1a4, Size: 12]
	<int,FString> ActorNameList;//[Offset: 0x1b0, Size: 60]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x1ec, Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x228, Size: 12]
	float SendMsgCD;//[Offset: 0x234, Size: 4]
	ReportChatMsgInfo ChatMsgInfo;//[Offset: 0x238, Size: 28]
	float lastShowChatTime;//[Offset: 0x254, Size: 4]
	float ShowChatDuration;//[Offset: 0x258, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x25c, Size: 12]
	FString EndChar;//[Offset: 0x268, Size: 12]
	FString ColonChar;//[Offset: 0x274, Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x280, Size: 60]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x2bc, Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x2c8, Size: 4]
	unsigned char[] ExtendParamsCache;//[Offset: 0x2d0, Size: 12]
	int itemIDOnGround;//[Offset: 0x324, Size: 4]
	int itemOnGroundNetGUID;//[Offset: 0x328, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x32c, Size: 4]
	Vector hitItemPosition;//[Offset: 0x330, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x340, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x34c, Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x358, Size: 12]
	InGameChatMsg CurrMsg;//[Offset: 0x364, Size: 88]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool AutoLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
};

class QuickChatIDAndAudio
{
	int chatTextID;//[Offset: 0x0, Size: 4]
	int RealTextID;//[Offset: 0x4, Size: 4]
	int AlternateTextID;//[Offset: 0x8, Size: 4]
};

class QuickChatOption
{
	int chatTextID;//[Offset: 0x0, Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4, Size: 4]
};

class IngameFriendChat
{
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 12]
};

class IngameFriendChatMsg
{
	FString Name;//[Offset: 0x0, Size: 12]
	FString Content;//[Offset: 0xc, Size: 12]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int MsgType;//[Offset: 0x1c, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
};

class QuickChatFlag
{
	enum Type;//[Offset: 0x0, Size: 1]
	int[] chatIDList;//[Offset: 0x4, Size: 12]
	int AlternateChatID;//[Offset: 0x10, Size: 4]
	int FlagIndex;//[Offset: 0x14, Size: 4]
	int traceDist;//[Offset: 0x18, Size: 4]
	float minDist;//[Offset: 0x1c, Size: 4]
};

class ReportChatMsgInfo
{
	FString msgContent;//[Offset: 0x0, Size: 12]
	uint32 ItemId;//[Offset: 0xc, Size: 4]
	Vector hitPosition;//[Offset: 0x10, Size: 12]
};

class QuickGroundFlag
{
	int Index;//[Offset: 0x0, Size: 4]
	int flagID;//[Offset: 0x4, Size: 4]
	Vector hitPosition;//[Offset: 0x8, Size: 12]
};

class InGameFilterChatMsg
{
	FString PlayerName;//[Offset: 0x0, Size: 12]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
};

class InGameChatMsg
{
	FString PlayerName;//[Offset: 0x0, Size: 12]
	uint32 playerIdentifier;//[Offset: 0xc, Size: 4]
	FString msgContent;//[Offset: 0x10, Size: 12]
	int MsgID;//[Offset: 0x1c, Size: 4]
	int audioID;//[Offset: 0x20, Size: 4]
	int ItemId;//[Offset: 0x24, Size: 4]
	FString PlayerKeyString;//[Offset: 0x28, Size: 12]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector hitPosition;//[Offset: 0x38, Size: 12]
	int itemIDOnGround;//[Offset: 0x44, Size: 4]
	bool bSTTMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	unsigned char[] ExtendParams;//[Offset: 0x4c, Size: 12]
};

class GuideComponent.ActorComponent.Object
{
	GuideInfo[] WidgetList;//[Offset: 0xc4, Size: 12]
	Widget* MaskWidget;//[Offset: 0xd0, Size: 8]
};

class GuideInfo
{
	Widget* Widget;//[Offset: 0x0, Size: 4]
	int guildUI;//[Offset: 0x4, Size: 4]
	Vector2D Offset;//[Offset: 0x8, Size: 8]
	Vector2D Size;//[Offset: 0x10, Size: 8]
	int childData;//[Offset: 0x18, Size: 4]
};

class QuickSignComponent.LuaActorComponent.ActorComponent.Object
{
	delegate OnAddSignMarkDelegate;//[Offset: 0x150, Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0x15c, Size: 12]
	delegate OnDangerousQuickSignDelegate;//[Offset: 0x168, Size: 12]
	delegate FOnSignPickUpActoDelegate;//[Offset: 0x174, Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	int TextID_OutRange;//[Offset: 0x184, Size: 4]
	FString PreFix_Command;//[Offset: 0x188, Size: 12]
	FString PreFix_Command_Res;//[Offset: 0x194, Size: 12]
	FString PreFix_Mark;//[Offset: 0x1a0, Size: 12]
	FString PreFix_MarkBox;//[Offset: 0x1ac, Size: 12]
	FName IgnoreTag;//[Offset: 0x1b8, Size: 8]
	int MinTraceDist;//[Offset: 0x1c0, Size: 4]
	int MaxTraceDist;//[Offset: 0x1c4, Size: 4]
	int ItemTraceDist;//[Offset: 0x1c8, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x1cc, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x1d0, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x1d4, Size: 4]
	float MinHighLightDangerousTime;//[Offset: 0x1d8, Size: 4]
	float MinHighLightDangerousDistance;//[Offset: 0x1dc, Size: 4]
	float DangerousMarkLifeSpan;//[Offset: 0x1e0, Size: 4]
	<int,DangerousSignInfo> LastDangerousID;//[Offset: 0x1e4, Size: 60]
	int MarkMaxNum;//[Offset: 0x220, Size: 4]
	float ReplyDelayTime;//[Offset: 0x224, Size: 4]
	bool bHasSendLongPressTLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x22c, Size: 4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x230, Size: 60]
	<class Object,FString> MarkNameClassMap;//[Offset: 0x26c, Size: 60]
	<int,FString> BoxTypeNameMap;//[Offset: 0x2a8, Size: 60]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x2e4, Size: 60]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x320, Size: 60]
	FString[] HasReplyMsg;//[Offset: 0x35c, Size: 12]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x368, Size: 60]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x3a4, Size: 60]
	int[] ServerCachedNetGUIDs;//[Offset: 0x3e0, Size: 12]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x3ec, Size: 12]
	FString[] TempIDArray;//[Offset: 0x3f8, Size: 12]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x404, Size: 60]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x440, Size: 60]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x4c4, Size: 60]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x500, Size: 60]
	unsigned char MaxSendCountPerSecond;//[Offset: 0x53c, Size: 1]
	ReportQuickSignMsg SignMsgInfo;//[Offset: 0x540, Size: 20]
	float IntelligentSignInterval;//[Offset: 0x554, Size: 4]
	float IntelligentSignTime;//[Offset: 0x558, Size: 4]
	IntelligentSignCheckParam CheckParam;//[Offset: 0x55c, Size: 52]
	int IntelligentSignType;//[Offset: 0x590, Size: 4]
	int IntelligentShowType;//[Offset: 0x594, Size: 4]
	Vector HitOffset;//[Offset: 0x598, Size: 12]
	Actor* IntelligentSignActor;//[Offset: 0x5a8, Size: 8]
	bool bCanIntelligentSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	delegate IntelligentTpeChangedDel;//[Offset: 0x5b4, Size: 12]
	<FString,QuickSignMark> CustomMarkInfoMap;//[Offset: 0x5fc, Size: 60]
};

class DangerousSignInfo
{
	FString MsgID;//[Offset: 0x0, Size: 12]
	Vector LastDangerousLocation;//[Offset: 0xc, Size: 12]
	float LastMarkDangerousTime;//[Offset: 0x18, Size: 4]
};

class QuickSignMark
{
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString MarkType;//[Offset: 0xc, Size: 12]
	FString IconPath;//[Offset: 0x18, Size: 12]
	FString IconBGPath;//[Offset: 0x24, Size: 12]
	FString IconOuterPath;//[Offset: 0x30, Size: 12]
	FString IconOuterBGPath;//[Offset: 0x3c, Size: 12]
	FString IconOutScreenIconPath;//[Offset: 0x48, Size: 12]
	FString IconOutScreenBGPath;//[Offset: 0x54, Size: 12]
	FString IconOutScreenArrowPath;//[Offset: 0x60, Size: 12]
	FString ReplyID;//[Offset: 0x6c, Size: 12]
	Vector Loc;//[Offset: 0x78, Size: 12]
	int MaxNum;//[Offset: 0x84, Size: 4]
	int LifeSpan;//[Offset: 0x88, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	FString SenderPlayerKey;//[Offset: 0x90, Size: 12]
	bool bControlByMaxShowDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
};

class QuickSignIDArray
{
	FString[] InnerArray;//[Offset: 0x0, Size: 12]
};

class ReportQuickSignMsg
{
	Vector HitPos;//[Offset: 0x0, Size: 12]
	uint32 ItemId;//[Offset: 0xc, Size: 4]
	enum MsgType;//[Offset: 0x10, Size: 1]
};

class IntelligentSignCheckParam
{
	unsigned char[] CheckObjectTypes;//[Offset: 0x0, Size: 12]
	class Actor[] ValidActorClass;//[Offset: 0xc, Size: 12]
	float SphereCheckRadius;//[Offset: 0x18, Size: 4]
	float BeginDistance;//[Offset: 0x1c, Size: 4]
	float CheckDistance;//[Offset: 0x20, Size: 4]
	Vector[] SignOffsets;//[Offset: 0x24, Size: 12]
	float Angle;//[Offset: 0x30, Size: 4]
};

class BaseTaskComponent.ActorComponent.Object
{
	STExtraPlayerController* OwningPC;//[Offset: 0xc4, Size: 4]
	FString OwningPlayerName;//[Offset: 0xc8, Size: 12]
};

class BattleItemSpectatingData
{
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int AdditionalData;//[Offset: 0x4, Size: 4]
};

class FriendObserver
{
	FString PlayerName;//[Offset: 0x0, Size: 12]
	unsigned char gender;//[Offset: 0xc, Size: 1]
};

class SyncOBDataActor.Actor.Object
{
	PlayerStaticInfoInOB[] TotalPlayersStatic;//[Offset: 0x310, Size: 12]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x31c, Size: 12]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x328, Size: 12]
	PlayerBreathInfoList PlayerBreathInfoList;//[Offset: 0x338, Size: 32]
	PlayerFiringList PlayerFiringList;//[Offset: 0x358, Size: 16]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x368, Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x374, Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x380, Size: 12]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x38c, Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x398, Size: 60]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bRefreshPosWhenDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
};

class PlayerStaticInfoInOB
{
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerOpenID;//[Offset: 0xc, Size: 12]
	FString PicUrl;//[Offset: 0x18, Size: 12]
	int TeamID;//[Offset: 0x24, Size: 4]
	unsigned char IndexInMap;//[Offset: 0x28, Size: 1]
	uint64 UID;//[Offset: 0x30, Size: 8]
	uint32 PlayerKey;//[Offset: 0x38, Size: 4]
};

class PlayerBaseInfoInOB
{
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 4]
	uint32 PlayerKey;//[Offset: 0x20, Size: 4]
};

class PlayerBreathInfoList
{
	uint64 PlayerIndexLow;//[Offset: 0x0, Size: 8]
	uint64 PlayerIndexHigh;//[Offset: 0x8, Size: 8]
	unsigned char[] BreathList;//[Offset: 0x10, Size: 12]
};

class PlayerFiringList
{
	uint64 PlayerFiringIndexLow;//[Offset: 0x0, Size: 8]
	uint64 PlayerFiringIndexHigh;//[Offset: 0x8, Size: 8]
};

class PlayerInfoInOB.PlayerBaseInfoInOB
{
	uint64 UID;//[Offset: 0x28, Size: 8]
	FString PlayerName;//[Offset: 0x30, Size: 12]
	FString PlayerOpenID;//[Offset: 0x3c, Size: 12]
	FString PicUrl;//[Offset: 0x48, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	int TeamID;//[Offset: 0x58, Size: 4]
	FString TeamName;//[Offset: 0x5c, Size: 12]
	Pawn* Character;//[Offset: 0x68, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]
};

class TeamInfoInOB
{
	int TeamID;//[Offset: 0x0, Size: 4]
	FString TeamName;//[Offset: 0x4, Size: 12]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString LogoPicUrl;//[Offset: 0x14, Size: 12]
	int KillNum;//[Offset: 0x20, Size: 4]
	int LiveMemberNum;//[Offset: 0x24, Size: 4]
};

class AIPlayerInfoInOB
{
	FString PlayerKey;//[Offset: 0x0, Size: 12]
	int TeamID;//[Offset: 0xc, Size: 4]
	Pawn* Character;//[Offset: 0x10, Size: 8]
};

class AllStarReportData
{
	bool bShowReportFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int BeReportedNum;//[Offset: 0x4, Size: 4]
};

class ObservedData
{
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PicUrl;//[Offset: 0xc, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int TeamID;//[Offset: 0x1c, Size: 4]
	uint64 UID;//[Offset: 0x20, Size: 8]
	Vector[] PosList;//[Offset: 0x28, Size: 12]
	uint32 PlayerKey;//[Offset: 0x34, Size: 4]
};

class OwnerClientCreateWeaponCache
{
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 12]
	uint32 CharacterGUID;//[Offset: 0xc, Size: 4]
	int SyncTicket;//[Offset: 0x10, Size: 4]
};

class WeaponMgrInfo
{
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 12]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc, Size: 4]
};

class KillerTracker.Actor.Object
{
	Actor* TargetKiller;//[Offset: 0x310, Size: 4]
	Rotator TargetKillerRotation;//[Offset: 0x314, Size: 12]
	Actor* ReturnActor;//[Offset: 0x320, Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x350, Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x354, Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x358, Size: 12]
	float MinMovingSpeed;//[Offset: 0x364, Size: 4]
	float MaxMovingTime;//[Offset: 0x368, Size: 4]
	float ObservingTime;//[Offset: 0x36c, Size: 4]
	float TrackingDelay;//[Offset: 0x370, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x374, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x378, Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x380, Size: 4]
	float DriverArmLenth;//[Offset: 0x384, Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x38c, Size: 4]
};

class VehicleUserComponent.VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
{
	ItemDefineID LastUsedItemDefineID;//[Offset: 0x1b0, Size: 24]
	float LastFinishCD;//[Offset: 0x1c8, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool bReconnectSkipFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	delegate OnAtomicStateChanged;//[Offset: 0x1d0, Size: 12]
	delegate OnClosestVehicleChanged;//[Offset: 0x1dc, Size: 12]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0x1e8, Size: 4]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x1ec, Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x1f0, Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0x1f8, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x204, Size: 12]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x210, Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x21c, Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x230, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x244, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x254, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x258, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x25c, Size: 4]
	float MaxCanAimAngle;//[Offset: 0x260, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x268, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x26c, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x270, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x274, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x27c, Size: 4]
	float LastSpeed;//[Offset: 0x288, Size: 4]
	float LastHeight;//[Offset: 0x28c, Size: 4]
	float LastLandHeight;//[Offset: 0x290, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x298, Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x29c, Size: 4]
	Rotator InputExtraRot;//[Offset: 0x2a0, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x2ac, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x2bc, Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x2f8, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x300, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x308, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x30c, Size: 4]
	enum CurrentSeatType;//[Offset: 0x310, Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x33c, Size: 4]
	float FastestAllowDistance;//[Offset: 0x340, Size: 4]
	float NearVehicleTickRate;//[Offset: 0x344, Size: 4]
	int VehicleIconID;//[Offset: 0x348, Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x364, Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x374, Size: 12]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x380, Size: 12]
	delegate OnRefuseExchangeVehicleSeat;//[Offset: 0x38c, Size: 12]
	bool bDebugResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	float EnterVehicleCheatingCheckDis;//[Offset: 0x3a0, Size: 4]
};

class VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
{
	delegate OnCanEnterVehicleDelegate;//[Offset: 0x150, Size: 16]
	delegate OnCanExitVehicleDelegate;//[Offset: 0x160, Size: 16]
	STExtraVehicleBase* Vehicle;//[Offset: 0x170, Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0x174, Size: 4]
	enum VehicleUserState;//[Offset: 0x178, Size: 1]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x18c, Size: 4]
};

class ImpactMapValueData
{
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 12]
};

class StateMachineComponent.ActorComponent.Object
{
	State*[] AllStateList;//[Offset: 0xc4, Size: 12]
	enum StartStateType;//[Offset: 0xd0, Size: 1]
	enum FinishStateType;//[Offset: 0xd1, Size: 1]
	State* CurrentState;//[Offset: 0xd4, Size: 4]
	enum CurrentStateType;//[Offset: 0xd8, Size: 1]
	enum LastStateType;//[Offset: 0xd9, Size: 1]
};

class State.Object
{
};

class AvatarCapture.LuaActor.Actor.Object
{
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x39c, Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x3a0, Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x3a4, Size: 4]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x3a8, Size: 12]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x3b4, Size: 60]
	class AnimInstance* animBP;//[Offset: 0x3f0, Size: 4]
	<int,class AnimInstance> AnimBP_SpecialMap;//[Offset: 0x3f4, Size: 60]
	class AnimInstance* AnimBP_Real;//[Offset: 0x430, Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x434, Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x440, Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	bool bShowingAvatarModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 1]
	<int,FName> SlotToSocket;//[Offset: 0x448, Size: 60]
	FName OBPlayerName;//[Offset: 0x488, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x490, Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x494, Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x498, Size: 4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x49c, Size: 12]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x4a8, Size: 12]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x4b4, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x4b8, Size: 12]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x4c4, Size: 12]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x4d0, Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x4dc, Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x4e0, Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
};

class WeaponAnimAsset
{
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]
};

class DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
{
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b9, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x3bc, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x3c0, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x3c4, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x3d0, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x3d4, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x3d8, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x3dc, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x3e0, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x3e4, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x3e8, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ec, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x3f0, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x3f4, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x3fc, Size: 4]
	float FarShadowDistance;//[Offset: 0x400, Size: 4]
	LinearColor ShadowEdgeColor;//[Offset: 0x404, Size: 16]
	float DistanceFieldShadowDistance;//[Offset: 0x414, Size: 4]
	float LightSourceAngle;//[Offset: 0x418, Size: 4]
	float TraceDistance;//[Offset: 0x41c, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x420, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x430, Size: 1]
	bool bCastsLandscapeShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x430, Size: 1]
	float LandscapeShadowColor;//[Offset: 0x434, Size: 4]
	float LandscapeShadowOffset;//[Offset: 0x438, Size: 4]
	float LandscapeShadowSoftHeight;//[Offset: 0x43c, Size: 4]
	float LandscapeShadowPixelPrecision;//[Offset: 0x440, Size: 4]
	LandscapeGeometryAsset* LandscapeGeometry;//[Offset: 0x444, Size: 4]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 1]
	float SoftShadowSoftness;//[Offset: 0x44c, Size: 4]
	float ShadowBlendFactor;//[Offset: 0x450, Size: 4]
	float BoundsScale;//[Offset: 0x454, Size: 4]
	float NearPlaneOffset;//[Offset: 0x458, Size: 4]
	float FarPlaneOffset;//[Offset: 0x45c, Size: 4]
	float SplitNearOffset;//[Offset: 0x460, Size: 4]
	float SplitFarOffset;//[Offset: 0x464, Size: 4]
	float ShadowMapResolution;//[Offset: 0x468, Size: 4]
	Color ModulatedShadowColor;//[Offset: 0x46c, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x470, Size: 12]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47c, Size: 1]
	float ShadowControl;//[Offset: 0x480, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 1]
	int AtmosphereSunLightIndex;//[Offset: 0x488, Size: 4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x48c, Size: 16]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49c, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49c, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x4a0, Size: 4]
	float CloudShadowTileSize;//[Offset: 0x4a4, Size: 4]
	float CloudShadowDensity;//[Offset: 0x4a8, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x4ac, Size: 8]
};

class LightmassDirectionalLightSettings.LightmassLightSettings
{
	float LightSourceAngle;//[Offset: 0xc, Size: 4]
};

class LandscapeGeometryAsset.DataAsset.Object
{
	Vector[] Vertex;//[Offset: 0x20, Size: 12]
	Vector[] Normals;//[Offset: 0x2c, Size: 12]
	Vector2D[] UV;//[Offset: 0x38, Size: 12]
	int[] Indices;//[Offset: 0x44, Size: 12]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x50, Size: 60]
	int ComponentIndexCount;//[Offset: 0x8c, Size: 4]
	int ComponentVertexCount;//[Offset: 0x90, Size: 4]
	<FString,LevelComponentMapValue> SubLevelComponentMap;//[Offset: 0x94, Size: 60]
	StaticMesh* HighQualityMesh;//[Offset: 0xd0, Size: 40]
	float HighQualityMeshDestroyHight;//[Offset: 0xf8, Size: 4]
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0xfc, Size: 60]
};

class LevelComponentMapValue
{
	FString Name;//[Offset: 0x0, Size: 12]
	int[] IndexOffsetArray;//[Offset: 0xc, Size: 12]
	int[] IndexCountArray;//[Offset: 0x18, Size: 12]
	int[] VertexOffsetIndex;//[Offset: 0x24, Size: 12]
	int[] BorderIndex1;//[Offset: 0x30, Size: 12]
	int[] BorderIndex2;//[Offset: 0x3c, Size: 12]
	int[] BorderIndex3;//[Offset: 0x48, Size: 12]
	int[] BorderIndex4;//[Offset: 0x54, Size: 12]
	int[] UnderBorderIndex1;//[Offset: 0x60, Size: 12]
	int[] UnderBorderIndex2;//[Offset: 0x6c, Size: 12]
	int[] UnderBorderIndex3;//[Offset: 0x78, Size: 12]
	int[] UnderBorderIndex4;//[Offset: 0x84, Size: 12]
	int[] BorderIndicesBuffer1;//[Offset: 0x90, Size: 12]
	int[] BorderIndicesBuffer2;//[Offset: 0x9c, Size: 12]
	int[] BorderIndicesBuffer3;//[Offset: 0xa8, Size: 12]
	int[] BorderIndicesBuffer4;//[Offset: 0xb4, Size: 12]
	FString Sibling1Name;//[Offset: 0xc0, Size: 12]
	FString Sibling2Name;//[Offset: 0xcc, Size: 12]
	FString Sibling3Name;//[Offset: 0xd8, Size: 12]
	FString Sibling4Name;//[Offset: 0xe4, Size: 12]
	int Sibling1Idx;//[Offset: 0xf0, Size: 4]
	int Sibling2Idx;//[Offset: 0xf4, Size: 4]
	int Sibling3Idx;//[Offset: 0xf8, Size: 4]
	int Sibling4Idx;//[Offset: 0xfc, Size: 4]
};

class ACESParameter
{
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]
};

class FootprintActorInfo
{
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]
};

class FootprintInstanceActor.Actor.Object
{
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x310, Size: 4]
};

class FootprintActorBlock
{
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c, Size: 4]
};

class TrailMarkActorBlock
{
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 12]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc, Size: 12]
};

class IdeaDecalManager.Actor.Object
{
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x310, Size: 60]
	class Actor[] IgnoreActorClass;//[Offset: 0x34c, Size: 12]
	float DecalLongestDistance;//[Offset: 0x358, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x364, Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x370, Size: 4]
	Transform DecalBoundTransform;//[Offset: 0x380, Size: 48]
};

class DecalBlock
{
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 4]
	Texture* DecalTexure;//[Offset: 0x4, Size: 4]
};

class IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
{
	int ID;//[Offset: 0x768, Size: 4]
};

class BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
{
	MaterialInterface* DecalMaterial;//[Offset: 0xf0, Size: 4]
	Texture* DecalTexure;//[Offset: 0xf4, Size: 4]
	int CoordX;//[Offset: 0xf8, Size: 4]
	int CoordY;//[Offset: 0xfc, Size: 4]
	Vector2D DecalSize;//[Offset: 0x100, Size: 8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	int GifDecalFrameNum;//[Offset: 0x10c, Size: 4]
	float GifDecalFrameTime;//[Offset: 0x110, Size: 4]
	AkAudioEvent* DecalSound;//[Offset: 0x114, Size: 4]
	float AttenuationRadius;//[Offset: 0x118, Size: 4]
	float OutputVolume;//[Offset: 0x11c, Size: 4]
};

class PlayerRevivalComponent.LuaActorComponent.ActorComponent.Object
{
	int RevivalCountDownTime;//[Offset: 0x150, Size: 4]
	int GotoSpectatingTime;//[Offset: 0x154, Size: 4]
	int64 FinishRevivalTime;//[Offset: 0x158, Size: 8]
	int64 StartObserverTime;//[Offset: 0x160, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0x168, Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x16c, Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0x178, Size: 120]
	DateTime BePickupTime;//[Offset: 0x1f0, Size: 8]
};

class RevivalPointActor.LuaActor.Actor.Object
{
	SceneComponent* DefaultRoot;//[Offset: 0x39c, Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x3a4, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x3a8, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x3ac, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x3b0, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	float RevivalCDTime;//[Offset: 0x3b8, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	int RevivalCount;//[Offset: 0x3c0, Size: 4]
	delegate OnHaveRevivedTeammates;//[Offset: 0x3c4, Size: 12]
	int ID;//[Offset: 0x3d0, Size: 4]
	enum CurState;//[Offset: 0x3d4, Size: 1]
	enum preState;//[Offset: 0x3d5, Size: 1]
	int RevivalTime;//[Offset: 0x3d8, Size: 4]
	bool bCanBroadcastFatalDamageInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	int CurRevivalTime;//[Offset: 0x3e0, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	int OperationalDistance;//[Offset: 0x3e8, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x3ec, Size: 60]
	Transform PTowEleTransform;//[Offset: 0x430, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x460, Size: 60]
	FString ExParticleComponentTag;//[Offset: 0x49c, Size: 12]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x4a8, Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x4e4, Size: 4]
	int SmokingdisappearTime;//[Offset: 0x4e8, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	int IconID;//[Offset: 0x4f0, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x4f4, Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x500, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x508, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x520, Size: 8]
};

class FloatingTextComponent.ActorComponent.Object
{
	int MaxWidgetNum;//[Offset: 0xd8, Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0xdc, Size: 4]
	CurveFloat* OffsetYCurve;//[Offset: 0xe0, Size: 4]
	Vector RandomVector;//[Offset: 0xe4, Size: 12]
	float TextScale;//[Offset: 0xf0, Size: 4]
	LinearColor NormalTextColor;//[Offset: 0xf4, Size: 16]
	float HeadShotTextScale;//[Offset: 0x104, Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x108, Size: 16]
	float BigDamageTextScale;//[Offset: 0x118, Size: 4]
	float BigDamage;//[Offset: 0x11c, Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x120, Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x130, Size: 4]
	int FloatTextZorder;//[Offset: 0x134, Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x13c, Size: 12]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x148, Size: 12]
	float[] RecycleTimeList;//[Offset: 0x154, Size: 12]
	float RecycleTime;//[Offset: 0x160, Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x164, Size: 4]
};

class ShowTextWidgetData
{
	UserWidget* FloatingTextWidget;//[Offset: 0x0, Size: 4]
	float RecycleTime;//[Offset: 0x4, Size: 4]
	Vector ShowWorldPos;//[Offset: 0x8, Size: 12]
	Vector RandomOffset;//[Offset: 0x14, Size: 12]
};

class ParachuteAnimAssetData
{
	<unsigned char,AnimationAsset*> AnimAssetCache;//[Offset: 0x0, Size: 60]
	bool IsAnimCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
};

class DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
{
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	int CircleIndex;//[Offset: 0x438, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x43c, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x458, Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x478, Size: 32]
	float TickOBPlayerCD;//[Offset: 0x498, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x49c, Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x4a0, Size: 4]
	DynamicWeatherController* DstController;//[Offset: 0x4a4, Size: 4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x4a8, Size: 4]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x4b0, Size: 68]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x500, Size: 12]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x50c, Size: 12]
};

class DynamicWeatherMgr.Actor.Object
{
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x310, Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x354, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x358, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x374, Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x3b0, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x3cc, Size: 28]
	float ServerElapsedTime;//[Offset: 0x3e8, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3f1, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3f4, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x400, Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x41c, Size: 4]
	enum UICountDownType;//[Offset: 0x432, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 1]
};

class WeatherControllerRepData
{
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
};

class WeatherChangeConfig
{
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24, Size: 12]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30, Size: 12]
	float TimeMultiplier;//[Offset: 0x3c, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
};

class WeatherChangeWeight
{
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float Weight;//[Offset: 0x4, Size: 4]
};

class WeatherChangeSequenceItem
{
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]
};

class WeatherChangeControl
{
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]
};

class DynamicWeatherController.ActorComponent.Object
{
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xc4, Size: 12]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xd0, Size: 12]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xdc, Size: 12]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xe8, Size: 12]
	delegate WeatherRecover;//[Offset: 0xf4, Size: 12]
	enum DynamicWeatherType;//[Offset: 0x100, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0x104, Size: 4]
	CurveFloat* LightCurve;//[Offset: 0x108, Size: 4]
	float TargetLightValue;//[Offset: 0x10c, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x114, Size: 4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x118, Size: 4]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x11c, Size: 4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x120, Size: 4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x124, Size: 4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x128, Size: 4]
	float UINotifyTimeBeforeStart;//[Offset: 0x12c, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x130, Size: 12]
	int ChangeStartUINotifyID;//[Offset: 0x13c, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x140, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x144, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x148, Size: 4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x14c, Size: 4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x150, Size: 4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x158, Size: 28]
	float RuningDirection;//[Offset: 0x174, Size: 4]
	float RuningTime;//[Offset: 0x178, Size: 4]
	float LerpTotalTime;//[Offset: 0x17c, Size: 4]
	FString WeatherName;//[Offset: 0x180, Size: 12]
	DirectionalLight* MainLight;//[Offset: 0x18c, Size: 4]
	SkyLight* SkyLight;//[Offset: 0x190, Size: 4]
	ExponentialHeightFog* Fog;//[Offset: 0x194, Size: 4]
	WeatherObject ObjectValues;//[Offset: 0x198, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x200, Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x26c, Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x2d4, Size: 12]
};

class WeatherObject
{
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]
};

class WeatherDetailStatus
{
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]
};

class STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
{
	AirDropPathData3D AirDropPathData;//[Offset: 0x450, Size: 60]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	Vector BlueCircle;//[Offset: 0x490, Size: 12]
	Vector WhiteCircle;//[Offset: 0x49c, Size: 12]
	float CirclePain;//[Offset: 0x4a8, Size: 4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	Vector AirAttackArea;//[Offset: 0x4b0, Size: 12]
	delegate OnPlayerDamageInfo;//[Offset: 0x4bc, Size: 12]
	delegate OnSimpleCharacterDamageInfo;//[Offset: 0x4c8, Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x4d4, Size: 12]
	delegate OnHideCircle;//[Offset: 0x4e0, Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x4ec, Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x4f8, Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x504, Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x510, Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x51c, Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x528, Size: 12]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x534, Size: 12]
	delegate STExtraCharacterDestroyed;//[Offset: 0x540, Size: 12]
	int PlayerNum;//[Offset: 0x558, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x560, Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x56c, Size: 12]
	delegate OnGameEnd;//[Offset: 0x578, Size: 12]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x586, Size: 1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x587, Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58b, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58e, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58f, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x592, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x593, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x594, Size: 12]
	int TrainingCountdownTimer;//[Offset: 0x5a0, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x5a8, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6, Size: 1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x5b8, Size: 12]
	uint64 DSOptimGrayPublishFlags;//[Offset: 0x600, Size: 8]
	delegate OnDSOptimGrayPublishFlagsChanged;//[Offset: 0x608, Size: 12]
	delegate OnDSSwitchChanged;//[Offset: 0x614, Size: 12]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x622, Size: 1]
	FString RoomType;//[Offset: 0x624, Size: 12]
	int nSignalGunEffectId;//[Offset: 0x630, Size: 4]
	unsigned char nServerZoneId;//[Offset: 0x634, Size: 1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x676, Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x677, Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x67c, Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x680, Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x684, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x688, Size: 4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68e, Size: 1]
	delegate OnAirAttack;//[Offset: 0x690, Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x69c, Size: 12]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x6a8, Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5, Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b6, Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x6b8, Size: 12]
	FName[] EnableMapLayers;//[Offset: 0x6c4, Size: 12]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x6d0, Size: 4]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x6d4, Size: 4]
	class ModAdapter* ModAdapterClass;//[Offset: 0x6d8, Size: 4]
	ModAdapter* ModAdapter;//[Offset: 0x6dc, Size: 4]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x6e4, Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x6e8, Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x6f0, Size: 48]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x720, Size: 4]
	bool bIsShowCircleWarningTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	int ReadyStateTime;//[Offset: 0x730, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x750, Size: 12]
	delegate RetriveDataAfterReconnectingDelegate;//[Offset: 0x75c, Size: 12]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x76c, Size: 12]
	int CurCircleWave;//[Offset: 0x778, Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77d, Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x780, Size: 4]
	FName GameModeState;//[Offset: 0x798, Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	float timeFromLessen;//[Offset: 0x7a4, Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x7a8, Size: 12]
	Vector CircleLessenTo;//[Offset: 0x7b4, Size: 12]
	float timeForLessen;//[Offset: 0x7c0, Size: 4]
	unsigned char CurCircleStatusInfo;//[Offset: 0x7d0, Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x7d4, Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x7d8, Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x7dc, Size: 4]
	enum CurAirAttackType;//[Offset: 0x7e0, Size: 1]
	int CurAirAttackWave;//[Offset: 0x7e4, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x7ec, Size: 4]
	float ExtraRadius;//[Offset: 0x7f0, Size: 4]
	int AlivePlayerNum;//[Offset: 0x7f4, Size: 4]
	int AliveTeamNum;//[Offset: 0x7f8, Size: 4]
	int NoneAIGameTime;//[Offset: 0x7fc, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x800, Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x80c, Size: 12]
	delegate OnGetPlayerLandAreaList;//[Offset: 0x818, Size: 12]
	delegate OnUICustomBehavior;//[Offset: 0x824, Size: 12]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x830, Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x834, Size: 12]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0x840, Size: 136]
	enum GameModeType;//[Offset: 0xae8, Size: 1]
	enum GameModeConfigType;//[Offset: 0xae9, Size: 1]
	enum GameModeConfigSubType;//[Offset: 0xaea, Size: 1]
	enum GameModeSubType;//[Offset: 0xaeb, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0xaec, Size: 4]
	int MaxPlayersPerGroupInReadyState;//[Offset: 0xaf0, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0xaf4, Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01, Size: 1]
	int WeatherId;//[Offset: 0xb0c, Size: 4]
	FString WeatherLevel;//[Offset: 0xb10, Size: 12]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1c, Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0xb2c, Size: 4]
	float WeatherPhaseIndex;//[Offset: 0xb30, Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0xb34, Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0xb40, Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0xb4c, Size: 12]
	enum CurDynamicWeatherState;//[Offset: 0xb58, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xb5c, Size: 60]
	float InviteCountDownTime;//[Offset: 0xb98, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xb9c, Size: 12]
	Vector[] CircleArray;//[Offset: 0xba8, Size: 12]
	GameDataMining GameDataMining;//[Offset: 0xbb4, Size: 60]
	uint64 GameID;//[Offset: 0xbf0, Size: 8]
	FString GameModeID;//[Offset: 0xbf8, Size: 12]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xc04, Size: 12]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xc10, Size: 12]
	Character* CurCastActorMsgOwner;//[Offset: 0xc1c, Size: 8]
	float StartFlyTime;//[Offset: 0xc24, Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xc28, Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xc30, Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xc38, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc51, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc52, Size: 1]
	int EnableNewStateMachine;//[Offset: 0xc54, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xc5c, Size: 4]
	float BroadcastClientDistance;//[Offset: 0xc60, Size: 4]
	int[] FinalWinTeams;//[Offset: 0xc7c, Size: 12]
	uint32[] FinalWinPlayers;//[Offset: 0xc88, Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xc94, Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc99, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xc9c, Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xca8, Size: 12]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb5, Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb6, Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb7, Size: 1]
	FString GuideImageName;//[Offset: 0xcb8, Size: 12]
	FString GuideLuaTableName;//[Offset: 0xcc4, Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0xcd0, Size: 12]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcdc, Size: 1]
	float PlayerNoOperationTime;//[Offset: 0xce0, Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0xce4, Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0xcec, Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 1]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0xcf8, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xcfc, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xd08, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xd14, Size: 12]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xd20, Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xd30, Size: 4]
	FString CommonPrePoolActorPath;//[Offset: 0xd34, Size: 12]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0xd40, Size: 4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd45, Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0xd48, Size: 12]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd54, Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0xd58, Size: 12]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd64, Size: 1]
	FString FServerStartTime;//[Offset: 0xd68, Size: 12]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd74, Size: 1]
	uint32 ServerStartTimestamp;//[Offset: 0xd78, Size: 4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0xd7c, Size: 12]
	FString MainWeaponTableName;//[Offset: 0xd88, Size: 12]
	class Object[] PlaneAvatarClassArray;//[Offset: 0xd94, Size: 12]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0xdb0, Size: 60]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0xdec, Size: 60]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0xe28, Size: 4]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0xe2c, Size: 4]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe30, Size: 1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe31, Size: 1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe32, Size: 1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe33, Size: 1]
	int PlayerAddonCount;//[Offset: 0xe34, Size: 4]
	STExtraBaseCharacter*[] DyingCharacters;//[Offset: 0xe40, Size: 12]
	bool bEnableCarryAllCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 1]
	MapUIMarkManager* MarkMgr;//[Offset: 0xe50, Size: 4]
	FString RenderTargetMgrClassPath;//[Offset: 0xe54, Size: 12]
	WidgetToRenderTarget* RenderTargetMgr;//[Offset: 0xe60, Size: 4]
	GameStateWeaponRule WeaponRule;//[Offset: 0xe64, Size: 32]
	bool bHasUnderEarthWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe84, Size: 1]
	<uint32,EmotePlayer> LocalEmotePlayerList;//[Offset: 0xe88, Size: 60]
	ReplayRecordInfo* ReplayRecordInfo;//[Offset: 0xec4, Size: 4]
	ParallelWorldDebugSummary ParallelWorldDebugSummary;//[Offset: 0xec8, Size: 20]
};

class UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
{
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x42c, Size: 12]
	FString DamageSearchTableName;//[Offset: 0x438, Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
};

class LuaGameState.GameState.GameStateBase.Info.Actor.Object
{
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x3a0, Size: 60]
	FString LuaFilePath;//[Offset: 0x3dc, Size: 12]
};

class AirDropPathData3D
{
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x1c, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector MapCenter;//[Offset: 0x2c, Size: 12]
	float Radius;//[Offset: 0x38, Size: 4]
};

class ViewMaskManager.Object
{
	enum ViewMaskTypeSetting;//[Offset: 0x1c, Size: 1]
	class Actor[] FilterActorClassList;//[Offset: 0x20, Size: 12]
};

class ModAdapter.Object
{
};

class VisualFieldFeatureParam
{
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14, Size: 4]
	unsigned char[] VisualCheckChanelList;//[Offset: 0x18, Size: 12]
	class Character[] ExcludeCheckCharacterClass;//[Offset: 0x24, Size: 12]
};

class VisualFieldFeature.Object
{
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x50, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x58, Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x94, Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xd0, Size: 8]
};

class VisualFieldFrame
{
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 60]
};

class VisualFieldCamp
{
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 12]
};

class VisibleActorInfo
{
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]
};

class GameModeFeatureSetData
{
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]
};

class WeatherChangeEvent
{
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]
};

class GameModePlayerShowUpassInfo
{
	FString PlayerName;//[Offset: 0x0, Size: 12]
	int updateTime;//[Offset: 0xc, Size: 4]
	int upassLevel;//[Offset: 0x10, Size: 4]
	int upassScore;//[Offset: 0x14, Size: 4]
	int planeAvatarId;//[Offset: 0x18, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	FString iconUrl;//[Offset: 0x20, Size: 12]
	FString Nation;//[Offset: 0x2c, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38, Size: 52]
	int upassKeepBuy;//[Offset: 0x6c, Size: 4]
	int upassCurValue;//[Offset: 0x70, Size: 4]
	int pass_type;//[Offset: 0x74, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x78, Size: 4]
	FString PlayerUID;//[Offset: 0x7c, Size: 12]
};

class CircleDataMining
{
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]
};

class GameDataMining
{
	FString BattleID;//[Offset: 0x0, Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24, Size: 12]
	GameWatchReport[] WatchReport;//[Offset: 0x30, Size: 12]
};

class GameWatchReport
{
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	uint64 player_uid;//[Offset: 0x10, Size: 8]
	float total_time;//[Offset: 0x18, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0x1c, Size: 12]
};

class WatchFlow
{
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]
};

class MarkDispatchManager.ActorComponent.Object
{
	unsigned char CurrentInstanceCount;//[Offset: 0x100, Size: 1]
	unsigned char CurrentLocalInstanceCount;//[Offset: 0x101, Size: 1]
	MarkDispatchAction[] ActionQueue;//[Offset: 0x104, Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0x110, Size: 12]
	MarkDispatchAction[] FramingDispatchMarkQueue;//[Offset: 0x11c, Size: 12]
	int MarkCountProcessed;//[Offset: 0x128, Size: 4]
	int OverflowFrameCount;//[Offset: 0x12c, Size: 4]
};

class MarkDispatchAction
{
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4, Size: 68]
	float DispatchDelayTime;//[Offset: 0x48, Size: 4]
	float RangeRad;//[Offset: 0x4c, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x50, Size: 8]
	float DispatchTime;//[Offset: 0x58, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x60, Size: 16]
};

class FieldOfViewNotificationComponentRegistry.Object
{
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c, Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28, Size: 12]
};

class TslSimpleCollisionManager.Actor.Object
{
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x328, Size: 12]
	float DamageFieldUpdatePeriod;//[Offset: 0x38c, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x390, Size: 4]
};

class SimpleSpherePersistentChecker
{
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 4]
	SimpleCollisionSphere Sphere;//[Offset: 0x4, Size: 16]
	float PassedTime;//[Offset: 0x14, Size: 4]
};

class SimpleCollisionSphere
{
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
};

class DestructibleSurfaceManager.Info.Actor.Object
{
};

class MapUIMarkManager.LuaActorComponent.ActorComponent.Object
{
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0x17c, Size: 12]
	class ScreenMarkManager* ScreenMarkMgrClass;//[Offset: 0x188, Size: 4]
	class ScreenRotationMarkManager* ScreenRotationMarkMgrClass;//[Offset: 0x18c, Size: 4]
	MapUIBase* m_pMiniMap;//[Offset: 0x190, Size: 4]
	MapUIBase* m_pEntireMap;//[Offset: 0x194, Size: 4]
	ScreenMarkManager* m_ScreenMarkManager;//[Offset: 0x198, Size: 4]
	ScreenRotationMarkManager* m_ScreenRotationMarkManager;//[Offset: 0x19c, Size: 4]
	int[] CurMarkInstList;//[Offset: 0x1a0, Size: 12]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x224, Size: 12]
	delegate OnMiniMapPointerException;//[Offset: 0x230, Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x23c, Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0x240, Size: 4]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x270, Size: 12]
	float TickRate_Internal;//[Offset: 0x29c, Size: 4]
	float TickRate_Callback;//[Offset: 0x2a0, Size: 4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x2a4, Size: 60]
};

class MarkPathSetting
{
	int UIBPSrcID;//[Offset: 0x0, Size: 4]
	FString UIBPSoftPtr;//[Offset: 0x4, Size: 12]
	FString UIDescription;//[Offset: 0x10, Size: 12]
};

class ScreenMarkManager.LuaObject.Object
{
	<int,ScreenMarkGroupData> ScreenMarkGroupMap;//[Offset: 0x68, Size: 60]
	<FString,ScreenMarkPriorityGroup> ScreenMarkPriorityGroupMap;//[Offset: 0xa4, Size: 60]
	bool bDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bUseLuaWorldOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	Vector2D LimitXY;//[Offset: 0xe4, Size: 8]
	Vector2D LimitZW;//[Offset: 0xec, Size: 8]
	Vector2D UIOffset;//[Offset: 0xf4, Size: 8]
	unsigned char[] CheckObjectTypes;//[Offset: 0xfc, Size: 12]
	ActorVectorPair[] ActorVectorHeapToBind;//[Offset: 0x230, Size: 12]
	ActorVectorPair[] ActorVectorArrayToUnBind;//[Offset: 0x23c, Size: 12]
};

class ScreenMarkGroupData
{
	ScreenMarkGroupConfig Config;//[Offset: 0x0, Size: 120]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x78, Size: 4]
	<int,ScreenMarkInstanceData> MarkInstanceDataMap;//[Offset: 0x7c, Size: 60]
	Widget*[] HidingUIArr;//[Offset: 0xb8, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0xc4, Size: 12]
	<int,Widget*> MarkBindingUIMap;//[Offset: 0xd0, Size: 60]
	UAEUserWidget* ScreenMarkPanel;//[Offset: 0x114, Size: 4]
	CanvasPanel* AddToPanel;//[Offset: 0x118, Size: 4]
	Actor*[] IgnoreBlockArr;//[Offset: 0x11c, Size: 12]
};

class ScreenMarkGroupConfig
{
	int MaxWidgetNum;//[Offset: 0x0, Size: 4]
	float MaxShowDistance;//[Offset: 0x4, Size: 4]
	float MinShowDistance;//[Offset: 0x8, Size: 4]
	float UpdateBindingInterval;//[Offset: 0xc, Size: 4]
	float UpdateBindingIntervalMax;//[Offset: 0x10, Size: 4]
	float ReduseBindingVelocityThreshold;//[Offset: 0x14, Size: 4]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bIsUpdatedByPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bBindOutScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bBindBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	int[] ExtraCheckObjectTypes;//[Offset: 0x1c, Size: 12]
	class Actor[] ExtraCheckClasses;//[Offset: 0x28, Size: 12]
	FString UIPathName;//[Offset: 0x34, Size: 12]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	FName SkeletaSocketName;//[Offset: 0x48, Size: 8]
	Vector WorldPositionOffset;//[Offset: 0x50, Size: 12]
	Vector2D UIOffset;//[Offset: 0x5c, Size: 8]
	bool bNeedUpdateState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	FString PriorityGroupTag;//[Offset: 0x68, Size: 12]
	unsigned char Priority;//[Offset: 0x74, Size: 1]
	bool bNeedOBShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bNeedReplayShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]
};

class UIDuplicatedItemPool.Object
{
	delegate OnAsyncFinishedDelegate;//[Offset: 0x38, Size: 12]
	bool bActiveItemListHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	FString[] TagArray;//[Offset: 0x48, Size: 12]
	FString ItemBPClassPath;//[Offset: 0x54, Size: 12]
	class Object* ItemClass;//[Offset: 0x60, Size: 4]
	UserWidget*[] UsedItemList;//[Offset: 0x64, Size: 12]
	UserWidget*[] IdleItemList;//[Offset: 0x70, Size: 12]
	UserWidget*[] IdleItemListHold;//[Offset: 0x7c, Size: 12]
};

class ScreenMarkInstanceData
{
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	int CustomInt;//[Offset: 0x14, Size: 4]
	float CustomFloat;//[Offset: 0x18, Size: 4]
	FString CustomString;//[Offset: 0x1c, Size: 12]
};

class ScreenMarkPriorityGroup
{
	int MaxShowNum;//[Offset: 0x0, Size: 4]
	int CurShowNum;//[Offset: 0x4, Size: 4]
	int[] GroupTypeArray;//[Offset: 0x8, Size: 12]
};

class ActorVectorPair
{
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]
	int InstanceID;//[Offset: 0x14, Size: 4]
};

class ScreenRotationMarkManager.Object
{
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	<int,ScreenRotationMarkGroupData> ScreenRotationMarkGroupMap;//[Offset: 0x68, Size: 60]
	Vector PlayerLoc;//[Offset: 0xa4, Size: 12]
	Vector PlayerDir;//[Offset: 0xb0, Size: 12]
	class Widget* ImageType;//[Offset: 0x1b8, Size: 4]
};

class ScreenRotationMarkGroupData
{
	ScreenRotationMarkConfig Config;//[Offset: 0x0, Size: 72]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x48, Size: 4]
	Actor*[] WorldObjectArr;//[Offset: 0x4c, Size: 12]
	Vector[] WorldLocationArr;//[Offset: 0x58, Size: 12]
	Widget*[] HidingUIArr;//[Offset: 0x64, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0x70, Size: 12]
	<Actor*,Widget*> BindingActorUIMap;//[Offset: 0x7c, Size: 60]
	<Vector,Widget*> BindingLocationUIMap;//[Offset: 0xb8, Size: 60]
	CanvasPanel* RootPanel;//[Offset: 0xf4, Size: 4]
};

class ScreenRotationMarkConfig
{
	ScreenRotationRangeValue DistanceRange;//[Offset: 0x0, Size: 16]
	ScreenRotationRangeValue AngleRange;//[Offset: 0x10, Size: 16]
	Actor* BindActor;//[Offset: 0x20, Size: 8]
	FString UIPathName;//[Offset: 0x28, Size: 12]
	float AngleOffset;//[Offset: 0x34, Size: 4]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float UpdateBindingInterval;//[Offset: 0x3c, Size: 4]
	int DefaultNum;//[Offset: 0x40, Size: 4]
	float Radius;//[Offset: 0x44, Size: 4]
};

class ScreenRotationRangeValue
{
	float MaxValue;//[Offset: 0x0, Size: 4]
	bool IsCloseOutMaxValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float MinValue;//[Offset: 0x8, Size: 4]
	bool IsCloseInMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
};

class MapUIBase.Object
{
	delegate OnSetupUIMarkRoot;//[Offset: 0x1c, Size: 12]
	delegate OnUpdateMark;//[Offset: 0x28, Size: 12]
	delegate OnUpdateMultiMark;//[Offset: 0x34, Size: 12]
	delegate OnRepositionItemOnMap;//[Offset: 0x40, Size: 12]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x4c, Size: 4]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x50, Size: 12]
	<FString,CanvasPanel*> DynamaicCustomPanelMap;//[Offset: 0x5c, Size: 60]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x98, Size: 60]
	<int,MapImageMarkData> AllImageMarks;//[Offset: 0xd4, Size: 60]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bRepositionMarkerAndPinDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	int UpdateMarkFreq;//[Offset: 0x24c, Size: 4]
	Vector LevelLandScapeCenterC;//[Offset: 0x250, Size: 12]
	Vector2D SelfMarkerAligmentC;//[Offset: 0x25c, Size: 8]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x264, Size: 12]
	float TickRate_Internal;//[Offset: 0x278, Size: 4]
	float TickRate_Callback;//[Offset: 0x27c, Size: 4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x280, Size: 60]
	int[] CurMarkInstList;//[Offset: 0x2bc, Size: 12]
	CanvasPanel* CanvasPanel_ShowAirPlaneRoute;//[Offset: 0x304, Size: 4]
	bool bIsShowAirPlaneRouteAfteHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0x30c, Size: 12]
	float ImageBlueCircleScale;//[Offset: 0x318, Size: 4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x31c, Size: 240]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x40c, Size: 240]
	MapDataBase* CurrentMapData;//[Offset: 0x4fc, Size: 8]
	UserWidget* BindWidget;//[Offset: 0x504, Size: 8]
	MapObjct* ParentMapObject;//[Offset: 0x50c, Size: 8]
	Vector LandscapeCenterCpp;//[Offset: 0x514, Size: 12]
	float LevelToMapScaleC;//[Offset: 0x520, Size: 4]
	float MapScaleCpp;//[Offset: 0x524, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x528, Size: 8]
	float MapScalingRadio;//[Offset: 0x530, Size: 4]
	int LocalPlayerIndexC;//[Offset: 0x534, Size: 4]
	float MapImageExtentC;//[Offset: 0x538, Size: 4]
	float MapWindowExtentC;//[Offset: 0x53c, Size: 4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	bool bNeedDrawSelfGuideLineOutC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 1]
	LinearColor GuideLineColor;//[Offset: 0x544, Size: 16]
	LinearColor WhiteCircleColorC;//[Offset: 0x554, Size: 16]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	float GuideLineDashSizeC;//[Offset: 0x568, Size: 4]
	float DefaultLineThicknessC;//[Offset: 0x56c, Size: 4]
	bool bNeedDrawWhiteCircleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	bool bNeedDrawCircleGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 1]
	Vector2D MapAdjustLocation;//[Offset: 0x574, Size: 8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x57c, Size: 8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x584, Size: 8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x58c, Size: 8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	int AirDropIndex;//[Offset: 0x598, Size: 4]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x5a0, Size: 8]
};

class MapUIMarkBaseWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
{
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x3c4, Size: 8]
	int DefaultZOrder;//[Offset: 0x3cc, Size: 4]
	bool bIsNeedRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	Actor* BindingActor;//[Offset: 0x3d4, Size: 8]
	float MaxShowDistance;//[Offset: 0x3dc, Size: 4]
	TextBlock* CountDownText;//[Offset: 0x3e0, Size: 4]
	FString CountDownFormat;//[Offset: 0x3e4, Size: 12]
	CanvasPanelSlot* ChangeSizeSlot;//[Offset: 0x408, Size: 4]
	float OriginSizeX;//[Offset: 0x410, Size: 4]
	float OriginSizeY;//[Offset: 0x414, Size: 4]
	UpdateStateChangePorperty[] UpdateStatePropertyArray;//[Offset: 0x41c, Size: 12]
};

class LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
{
	FString LuaFilePath;//[Offset: 0x394, Size: 12]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
};

class TextBlock.TextLayoutWidget.Widget.Visual.Object
{
	FText Text;//[Offset: 0xf4, Size: 12]
	delegate TextDelegate;//[Offset: 0x100, Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x110, Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130, Size: 16]
	SlateColor SelectColorAndOpacity;//[Offset: 0x140, Size: 28]
	SlateColor NoSelectColorAndOpacity;//[Offset: 0x15c, Size: 28]
	bool bHaveSelectColorAndOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	SlateFontInfo Font;//[Offset: 0x180, Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x1c0, Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x1c8, Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1d8, Size: 16]
	float MinDesiredWidth;//[Offset: 0x1e8, Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
};

class TextLayoutWidget.Widget.Visual.Object
{
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xd0, Size: 4]
	unsigned char Justification;//[Offset: 0xd4, Size: 1]
	unsigned char VerticalJustification;//[Offset: 0xd5, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	float WrapTextAt;//[Offset: 0xd8, Size: 4]
	enum WrappingPolicy;//[Offset: 0xdc, Size: 1]
	Margin Margin;//[Offset: 0xe0, Size: 16]
	float LineHeightPercentage;//[Offset: 0xf0, Size: 4]
};

class SlateFontInfo
{
	Object* FontObject;//[Offset: 0x0, Size: 4]
	Object* FontMaterial;//[Offset: 0x4, Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8, Size: 28]
	FName TypefaceFontName;//[Offset: 0x30, Size: 8]
	int Size;//[Offset: 0x38, Size: 4]
	bool IsBold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
};

class FontOutlineSettings
{
	int OutlineSize;//[Offset: 0x0, Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4, Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8, Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
};

class ShapedTextOptions
{
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]
};

class CanvasPanelSlot.PanelSlot.Visual.Object
{
	AnchorData LayoutData;//[Offset: 0x24, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	int ZOrder;//[Offset: 0x50, Size: 4]
};

class UpdateStateChangePorperty
{
	Widget* UpdateWidget;//[Offset: 0x0, Size: 4]
	FString[] IconPathArray;//[Offset: 0x4, Size: 12]
	enum[] IconVisibleArray;//[Offset: 0x10, Size: 12]
	LinearColor[] IconColorArray;//[Offset: 0x1c, Size: 12]
};

class MapImageMarkData
{
	int ConfigId;//[Offset: 0x0, Size: 4]
	Image* Image;//[Offset: 0x4, Size: 4]
	Vector CurrentWorldPos;//[Offset: 0x8, Size: 12]
	Vector2D OriginalSize;//[Offset: 0x14, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Vector2D MaxSize;//[Offset: 0x20, Size: 8]
	Actor* BindingActor;//[Offset: 0x28, Size: 8]
	float MaxShowDistance;//[Offset: 0x30, Size: 4]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
};

class Image.Widget.Visual.Object
{
	SlateBrush Brush;//[Offset: 0xd0, Size: 152]
	delegate BrushDelegate;//[Offset: 0x168, Size: 16]
	delegate OnSetBrushAsyncComplete;//[Offset: 0x178, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x188, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x198, Size: 16]
	FString imageSrcPath;//[Offset: 0x1a8, Size: 12]
	Vector2D ScalePivot;//[Offset: 0x1b4, Size: 8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c0, Size: 16]
	SoftObjectPath AsyncLoadResourcePath;//[Offset: 0x1d0, Size: 24]
	float HitTestAreaRadius;//[Offset: 0x1f8, Size: 4]
	bool bIsEnhancedImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 1]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd, Size: 1]
	bool bFixOverScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe, Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff, Size: 1]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	bool bAsyncLoadImageAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 1]
};

class UIBPAsyncParams
{
	MarkSyncData MarkData;//[Offset: 0x4, Size: 68]
	class Widget* UIIconSoftPtr;//[Offset: 0x50, Size: 40]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x78, Size: 40]
	class Object* UIClass;//[Offset: 0xa0, Size: 4]
};

class MapMarkConfig
{
	int ConfigId;//[Offset: 0x0, Size: 4]
	FString UIPath;//[Offset: 0x4, Size: 12]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Vector2D MaxSize;//[Offset: 0x20, Size: 8]
	int ZOrder;//[Offset: 0x28, Size: 4]
	bool bIsControlByLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	FString LegendTags;//[Offset: 0x30, Size: 12]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float MaxShowDistance;//[Offset: 0x40, Size: 4]
};

class MapRealTimeInfo
{
	Vector2D MapCenterToPlayer;//[Offset: 0x0, Size: 8]
	Vector MapCenterToBlueCircle;//[Offset: 0x8, Size: 12]
	Vector MapCenterToWhiteCircle;//[Offset: 0x14, Size: 12]
	Vector2D PlayerCoord;//[Offset: 0x20, Size: 8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x28, Size: 8]
	Vector2D WhiteCircleCoord;//[Offset: 0x30, Size: 8]
	Vector2D BlueCircleCoord;//[Offset: 0x38, Size: 8]
	float WhiteCircleRadius;//[Offset: 0x40, Size: 4]
	float BlueCircleRadius;//[Offset: 0x44, Size: 4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x48, Size: 8]
	enum LastDriveVehicleType;//[Offset: 0x50, Size: 1]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x54, Size: 100]
	AirDropPathData AirDropPathData;//[Offset: 0xb8, Size: 56]
};

class AirplaneRouteData
{
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 8]
	float PlaneRotation;//[Offset: 0x24, Size: 4]
	AirDropPathData[] AirDropPaths;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLocInMapForCamp;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLocInMapForCamp;//[Offset: 0x3c, Size: 8]
	float CampRouteLengthInMap;//[Offset: 0x44, Size: 4]
	float CampRouteWidgetRotateAngle;//[Offset: 0x48, Size: 4]
	Vector2D LastValidCanJumpLocInMap;//[Offset: 0x4c, Size: 8]
	Vector2D LastValidForceJumpLocInMap;//[Offset: 0x54, Size: 8]
	float LastValidRouteWidgetRotateAngle;//[Offset: 0x5c, Size: 4]
	float LastValidRouteLengthInMap;//[Offset: 0x60, Size: 4]
};

class AirDropPathData
{
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector2D StartLoc;//[Offset: 0x4, Size: 8]
	Vector2D TargetLoc;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D[] AirDropLocs;//[Offset: 0x1c, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x28, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
};

class MapDataBase.Object
{
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x1c, Size: 12]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x28, Size: 12]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x34, Size: 12]
	MapUIBase* CurrentMapUI;//[Offset: 0x40, Size: 4]
	Vector PlayerLocOffset;//[Offset: 0x44, Size: 12]
	delegate FinaleChangeCurLocDelegate;//[Offset: 0x50, Size: 12]
	Vector LandscapeOffset;//[Offset: 0x5c, Size: 12]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x68, Size: 8]
};

class MapObjct.Object
{
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	MapUIBase* CurrentHoldMapUI;//[Offset: 0x68, Size: 8]
};

class WidgetToRenderTarget.Object
{
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x1c, Size: 60]
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x58, Size: 12]
};

class TextureRenderTarget2DManagerWidgetInfo
{
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 40]
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 4]
	UserWidget* UserWidget;//[Offset: 0x2c, Size: 4]
	FName UpdateWidgetFunctionName;//[Offset: 0x30, Size: 8]
};

class DrawTextToTextureRenderTarget2DParams
{
	FText Text;//[Offset: 0x0, Size: 12]
	FName WidgetName;//[Offset: 0x10, Size: 8]
	int DrawWidth;//[Offset: 0x18, Size: 4]
	int DrawHeight;//[Offset: 0x1c, Size: 4]
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0x20, Size: 4]
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x28, Size: 40]
	FName TextureParameterName;//[Offset: 0x50, Size: 8]
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x58, Size: 4]
	FString Payload;//[Offset: 0x5c, Size: 12]
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
};

class GameStateWeaponRule
{
	bool bForbidShootTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CheckForbidShootTime;//[Offset: 0x4, Size: 4]
	class Actor[] ForbidShootClassArray;//[Offset: 0x8, Size: 12]
	class Actor[] SwallowBulletClassArray;//[Offset: 0x14, Size: 12]
};

class ReplayRecordInfo.Actor.Object
{
	float WorldTimeSecondsForReplay;//[Offset: 0x310, Size: 4]
};

class ParallelWorldDebugSummary
{
	int WorldNum;//[Offset: 0x0, Size: 4]
	int MaxPlayerNumPerPW;//[Offset: 0x4, Size: 4]
	ParallelWorldDebugEntry[] DebugData;//[Offset: 0x8, Size: 12]
};

class ParallelWorldDebugEntry
{
	int ParallelWorldId;//[Offset: 0x0, Size: 4]
	int PlayerNum;//[Offset: 0x4, Size: 4]
	int AINum;//[Offset: 0x8, Size: 4]
	int TeamNum;//[Offset: 0xc, Size: 4]
	int[] TeamIds;//[Offset: 0x10, Size: 12]
};

class ScreenAppearanceCfg
{
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x4, Size: 12]
	unsigned char ParticleType;//[Offset: 0x10, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x14, Size: 4]
	FName ShaderName;//[Offset: 0x18, Size: 8]
};

class WeatherFogCfg
{
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 12]
	ExponentialHeightFog* Fog;//[Offset: 0xc, Size: 4]
	WeatherDstFog DstWeatherFog;//[Offset: 0x10, Size: 20]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x24, Size: 12]
	float blendTime;//[Offset: 0x30, Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x38, Size: 12]
};

class WeatherDstFog
{
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float StartDistance;//[Offset: 0x4, Size: 4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 4]
};

class WeatherSrcFog
{
	float StartDistance;//[Offset: 0x0, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 4]
};

class PlayerKeyDstWeather
{
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 4]
};

class WeaponHitDetailInfo
{
	int TotalShootNum;//[Offset: 0x0, Size: 4]
	int[] HitNumEveryBodys;//[Offset: 0x4, Size: 12]
};

class LastGameRemainItemData
{
	FName TombName;//[Offset: 0x0, Size: 8]
	Vector DropGroundPoint;//[Offset: 0x8, Size: 12]
	FString TargetPlayerUID;//[Offset: 0x14, Size: 12]
	RemainItemData[] RemainItemDataList;//[Offset: 0x20, Size: 12]
};

class RemainItemData
{
	int ItemId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x8, Size: 12]
	int SlotID;//[Offset: 0x14, Size: 4]
	int8 RemainType;//[Offset: 0x18, Size: 1]
};

class ParachuteData
{
	uint64 UID;//[Offset: 0x0, Size: 8]
	float SlideDuration;//[Offset: 0x8, Size: 4]
	unsigned char FollowState;//[Offset: 0xc, Size: 1]
	Vector ClientLandLocation;//[Offset: 0x10, Size: 12]
	Vector ClientLocation;//[Offset: 0x1c, Size: 12]
	Vector ServerLandLocation;//[Offset: 0x28, Size: 12]
	float SlideStartTime;//[Offset: 0x34, Size: 4]
	float SlideEndTime;//[Offset: 0x38, Size: 4]
	FString InputCount;//[Offset: 0x3c, Size: 12]
	FString PositionCheck;//[Offset: 0x48, Size: 12]
	FString ClientPositionDiff;//[Offset: 0x54, Size: 12]
	float LastCorrectionTime;//[Offset: 0x60, Size: 4]
	float LastCorrectionHeight;//[Offset: 0x64, Size: 4]
	Vector LastCorrectionLocation;//[Offset: 0x68, Size: 12]
	Vector LastCorrectedLocation;//[Offset: 0x74, Size: 12]
};

class VehicleMoveDragData
{
	VehicleMoveDrag[] MoveDrag;//[Offset: 0x0, Size: 12]
	VehicleMoveDrag[] SimulatedMoveDrag;//[Offset: 0xc, Size: 12]
};

class VehicleMoveDrag
{
	int Minute;//[Offset: 0x0, Size: 4]
	unsigned char VehicleType;//[Offset: 0x4, Size: 1]
	unsigned char[] Reasons;//[Offset: 0x8, Size: 12]
	int[] Counters;//[Offset: 0x14, Size: 12]
};

class ScreenAppearanceActor.Actor.Object
{
	ScreenAppearanceProvider*[] DefaultScreenAppearanceProviders;//[Offset: 0x310, Size: 12]
	<Actor*,ScreenAppearanceProviders> SavedPlayerScreenAppearances;//[Offset: 0x31c, Size: 60]
	ScreenAppearanceProviders PersistentScreenAppearances;//[Offset: 0x358, Size: 12]
};

class ScreenAppearanceProvider.Object
{
	FName AppearanceName;//[Offset: 0x20, Size: 8]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	float TickInterval;//[Offset: 0x2c, Size: 4]
	AppearanceParameter[] MaterialParameterCurve;//[Offset: 0x30, Size: 12]
	float LifeSpan;//[Offset: 0x3c, Size: 4]
	ScreenAppearanceScalarParameter[] AppearanceScalarParamters;//[Offset: 0x40, Size: 12]
	ScreenAppearanceColorParameter[] AppearanceColorParameters;//[Offset: 0x4c, Size: 12]
	bool bLobbyUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	ScreenAppearanceActor* OwnerAppearance;//[Offset: 0x70, Size: 4]
	Actor* OwnerActor;//[Offset: 0x74, Size: 4]
	FName[] HighPriorityProviderNames;//[Offset: 0x80, Size: 12]
	Transform AlignRelationTransform;//[Offset: 0x90, Size: 48]
	bool bAttachToActiveCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
};

class AppearanceParameter
{
	FName ParameterName;//[Offset: 0x0, Size: 8]
	CurveBase* ControlCurve;//[Offset: 0x8, Size: 40]
};

class ScreenAppearanceScalarParameter
{
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
};

class ScreenAppearanceColorParameter
{
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
};

class ScreenAppearanceProviders
{
	ScreenAppearanceProvider*[] ScreenAppearances;//[Offset: 0x0, Size: 12]
};

class PlayerPetSpectatorComponent.LuaActorComponent.ActorComponent.Object
{
	STExtraPetSpectatorCharacter* PetSpectatorPawn;//[Offset: 0x150, Size: 4]
	bool bTeammatePetShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
};

class CacheSACData
{
	STExtraShootWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	SACData SACData;//[Offset: 0x4, Size: 112]
};

class WeaponComponentItemData
{
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 352]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x160, Size: 24]
};

class PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
{
	unsigned char SurvivePickUpGlobalCategory;//[Offset: 0xc, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10, Size: 152]
	SlateBrush LargerProfileImage;//[Offset: 0xa8, Size: 152]
	FString Name;//[Offset: 0x140, Size: 12]
	FString Description;//[Offset: 0x14c, Size: 12]
	int DisplayPriority;//[Offset: 0x158, Size: 4]
};

class SurviveTableRowBase.TableRowBase
{
	int ID;//[Offset: 0x4, Size: 4]
	int PickUpSoundID;//[Offset: 0x8, Size: 4]
};

class WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
{
	int WeaponComponentID;//[Offset: 0xc, Size: 4]
	unsigned char Type;//[Offset: 0x10, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14, Size: 4]
};

class WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
{
	ItemDefineID ItemDefineID;//[Offset: 0x108, Size: 24]
	FName LogicSocket;//[Offset: 0x120, Size: 8]
	FName AttachSocket;//[Offset: 0x128, Size: 8]
	unsigned char SurviveWeaponPropSlot;//[Offset: 0x130, Size: 1]
	float AIMinAttackDist;//[Offset: 0x134, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x138, Size: 4]
	float AIAttackDist;//[Offset: 0x13c, Size: 4]
};

class WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
{
};

class WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
{
};

class SceneCompUpdateOptimizationItem
{
};

class WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
{
	WeaponStateBase* CurrentState;//[Offset: 0x108, Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0x10c, Size: 4]
	<unsigned char,WeaponStateBase*> StateMap;//[Offset: 0x110, Size: 60]
};

class GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	int OverrideFXIndex;//[Offset: 0x3ac, Size: 4]
	delegate GrenadeAvatarEqiuped;//[Offset: 0x3b4, Size: 12]
	delegate GrenadeFxOverride;//[Offset: 0x3c0, Size: 12]
};

class LobbyCharacterWeaponAnimData
{
	unsigned char PosIndex;//[Offset: 0x0, Size: 1]
	FString CharPosName;//[Offset: 0x4, Size: 12]
	LobbyCharacterGenderWeaponAnimData[] GenderWeaponAnimList;//[Offset: 0x10, Size: 12]
};

class LobbyCharacterGenderWeaponAnimData
{
	unsigned char GenderType;//[Offset: 0x0, Size: 1]
	FString GenderTypeName;//[Offset: 0x4, Size: 12]
	AnimationAsset* WeaponAnimSoftPtr;//[Offset: 0x10, Size: 40]
	AnimationAsset* WeaponAddAnimSoftPtr;//[Offset: 0x38, Size: 40]
	AnimationAsset*[] WeaponPlayAnimSoftPtrArray;//[Offset: 0x60, Size: 12]
};

class BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
{
	AnimationAsset* AnimAsset;//[Offset: 0xf0, Size: 40]
	unsigned char LoopCount;//[Offset: 0x118, Size: 1]
	float LoopStartTime;//[Offset: 0x11c, Size: 4]
	float blendTime;//[Offset: 0x120, Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x128, Size: 12]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x134, Size: 12]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0x140, Size: 12]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0x14c, Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x158, Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x15c, Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x164, Size: 12]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x170, Size: 12]
};

class LobbyGenderAnimData
{
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]
};

class EmoteAnimConfig
{
	FName GenderStr;//[Offset: 0x0, Size: 8]
	class Character* MainCharacter;//[Offset: 0x8, Size: 40]
	AnimationAsset* MainCharacterAnimAsset;//[Offset: 0x30, Size: 40]
	bool CanRotateMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	Transform MainCharacterTransform;//[Offset: 0x60, Size: 48]
	bool RotateBackToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	LevelSequence* EmoteLevelSequence;//[Offset: 0x94, Size: 4]
	EmoteAnimCharacterConfig[] MultiFollowerCharacters;//[Offset: 0x98, Size: 12]
	class Character* FollowerCharacter;//[Offset: 0xa8, Size: 40]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
};

class LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
{
	MovieScene* MovieScene;//[Offset: 0x220, Size: 4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 60]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x260, Size: 60]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x29c, Size: 60]
};

class LevelSequenceObjectReferenceMap
{
};

class LevelSequenceBindingReferences
{
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 60]
};

class LevelSequenceBindingReferenceArray
{
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 12]
};

class LevelSequenceBindingReference
{
	FString PackageName;//[Offset: 0x0, Size: 12]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 12]
};

class LevelSequenceObject
{
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x1c, Size: 12]
	Object* CachedComponent;//[Offset: 0x28, Size: 8]
};

class EmoteAnimCharacterConfig
{
	class Character* Character;//[Offset: 0x0, Size: 40]
	Transform Transform;//[Offset: 0x30, Size: 48]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
};

class EmoteActionBase.Object
{
	float PropStartShowTime;//[Offset: 0x1c, Size: 4]
	float PropEndShowTime;//[Offset: 0x20, Size: 4]
	bool bOnlyInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bOnlyOneInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	int[] AssociateEmoteIDs;//[Offset: 0x28, Size: 12]
	bool bOnlyInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	delegate OnActionReady;//[Offset: 0x48, Size: 12]
};

class LobbyGodEffectComponent.SceneComponent.ActorComponent.Object
{
	ParticleSystem* ParticleEffect1;//[Offset: 0x2c0, Size: 40]
	ParticleSystem* ParticleEffect2;//[Offset: 0x2e8, Size: 40]
	ParticleSystem* ParticleEffect3;//[Offset: 0x310, Size: 40]
	ParticleSystem* ParticleEffect100;//[Offset: 0x338, Size: 40]
	ParticleSystem* ParticleEffect101;//[Offset: 0x360, Size: 40]
	ParticleSystem* ParticleEffect102;//[Offset: 0x388, Size: 40]
	ParticleSystem* ParticleEffect103;//[Offset: 0x3b0, Size: 40]
	ParticleSystem* ParticleEffect104;//[Offset: 0x3d8, Size: 40]
	class UserWidget* GodEffectWidget;//[Offset: 0x400, Size: 4]
	WidgetComponent* WidgetComponent;//[Offset: 0x404, Size: 4]
	ParticleSystemComponent*[] effects;//[Offset: 0x40c, Size: 12]
};

class BP_LobbyWeaponManager_C.LobbyWeaponManagerComponent.ActorComponent.Object
{
};

class LobbyWeaponManagerComponent.ActorComponent.Object
{
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xc4, Size: 60]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x100, Size: 60]
	<FName,unsigned char> LogicSocketToPropSlotMap;//[Offset: 0x13c, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x178, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x180, Size: 8]
	<int,int> SpecialBagLevelMap;//[Offset: 0x188, Size: 60]
	<int> NoNeedLodOptimizeWeapon;//[Offset: 0x1c4, Size: 60]
	FName CurUseWeaponSocket;//[Offset: 0x200, Size: 8]
	FName LastUseSocket;//[Offset: 0x208, Size: 8]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x210, Size: 60]
	int CurUseWeaponID;//[Offset: 0x24c, Size: 4]
	STExtraWeapon* LastEquipWeapon;//[Offset: 0x2dc, Size: 4]
	BattleItemHandleBase* curHandle;//[Offset: 0x2e0, Size: 4]
};

class LobbyPlayEmoteComponent_BP_C.LobbyPlayEmoteComponent.SceneComponent.ActorComponent.Object
{
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 4]
	LevelSequencePlayer* LevelSequencePlayer;//[Offset: 0x374, Size: 4]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x378, Size: 4]
	UserWidget* levelSequenceMask;//[Offset: 0x37c, Size: 4]
	<int> stopEmoteArray;//[Offset: 0x380, Size: 60]
	bool bFreezeEndFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool bUseSequenceCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
};

class LobbyPlayEmoteComponent.SceneComponent.ActorComponent.Object
{
	BackpackEmoteHandle* curHandle;//[Offset: 0x2c0, Size: 4]
	STExtraLobbyCharacter* OwnerCharacter;//[Offset: 0x2c4, Size: 4]
	GenderMapping[] GenderMappingConfig;//[Offset: 0x2c8, Size: 12]
	Character* MainCharacter;//[Offset: 0x2d4, Size: 4]
	LevelSequencePlayer* CurLevelSequencePlayer;//[Offset: 0x2e4, Size: 4]
	SoftObjectPath[] CurMultiEmotePathList;//[Offset: 0x2e8, Size: 12]
	AnimationAsset*[] CurMultiEmoteAnimList;//[Offset: 0x2f4, Size: 12]
	AnimMontage* CurEmoteMontage;//[Offset: 0x300, Size: 4]
	int CurrentEmoteID;//[Offset: 0x304, Size: 4]
	int DefaultHideAvatarTickCount;//[Offset: 0x308, Size: 4]
	bool isPlayCameraAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	delegate OnEmoteCameraStart;//[Offset: 0x330, Size: 16]
	delegate OnEmoteCameraStop;//[Offset: 0x340, Size: 16]
	delegate OnEmoteCameraTrackEvent;//[Offset: 0x350, Size: 16]
};

class GenderMapping
{
	FName GenderStr;//[Offset: 0x0, Size: 8]
	unsigned char GenderType;//[Offset: 0x8, Size: 1]
};

class LevelSequencePlayer.MovieSceneSequencePlayer.Object
{
	delegate OnCameraCut;//[Offset: 0x644, Size: 12]
	delegate OnTrackEvent;//[Offset: 0x650, Size: 12]
	Object*[] AdditionalEventReceivers;//[Offset: 0x688, Size: 12]
};

class MovieSceneSequencePlayer.Object
{
	delegate OnPlay;//[Offset: 0x2e0, Size: 12]
	delegate OnPlayReverse;//[Offset: 0x2ec, Size: 12]
	delegate OnStop;//[Offset: 0x2f8, Size: 12]
	delegate OnPreStop;//[Offset: 0x304, Size: 12]
	bool FreezeEndFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	delegate OnPause;//[Offset: 0x314, Size: 12]
	delegate OnFinished;//[Offset: 0x320, Size: 12]
	delegate OnObjectSpawnedEvent;//[Offset: 0x32c, Size: 12]
	unsigned char Status;//[Offset: 0x338, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 1]
	bool bPendingFirstUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x33c, Size: 4]
	float TimeCursorPosition;//[Offset: 0x340, Size: 4]
	float StartTime;//[Offset: 0x344, Size: 4]
	float EndTime;//[Offset: 0x348, Size: 4]
	int CurrentNumLoops;//[Offset: 0x34c, Size: 4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x35c, Size: 32]
};

class MovieSceneSequencePlaybackSettings
{
	int LoopCount;//[Offset: 0x0, Size: 4]
	float PlayRate;//[Offset: 0x4, Size: 4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	interface class None* BindingOverrides;//[Offset: 0x18, Size: 8]
};

class LevelSequenceActor.Actor.Object
{
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x318, Size: 32]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x338, Size: 4]
	SoftObjectPath LevelSequence;//[Offset: 0x340, Size: 24]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x358, Size: 12]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x364, Size: 4]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x368, Size: 4]
	bool bReduceFrequency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	int ReduceFrameCount;//[Offset: 0x370, Size: 4]
	float IgnoreFrameTolerance;//[Offset: 0x374, Size: 4]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x37c, Size: 4]
	bool bForceAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x384, Size: 4]
};

class LevelSequenceBurnInOptions.Object
{
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x20, Size: 24]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x38, Size: 4]
};

class LevelSequenceBurnInInitSettings.Object
{
};

class MovieSceneBindingOverrides.Object
{
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x20, Size: 12]
};

class MovieSceneBindingOverrideData
{
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 24]
	Object* Object;//[Offset: 0x18, Size: 8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
};

class MovieSceneObjectBindingID
{
	int SequenceID;//[Offset: 0x0, Size: 4]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 16]
};

class LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
{
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x204, Size: 48]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x234, Size: 4]
};

class LevelSequencePlayerSnapshot
{
	FText MasterName;//[Offset: 0x0, Size: 12]
	float MasterTime;//[Offset: 0xc, Size: 4]
	FText CurrentShotName;//[Offset: 0x10, Size: 12]
	float CurrentShotLocalTime;//[Offset: 0x1c, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x20, Size: 4]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x24, Size: 8]
	MovieSceneSequenceID ShotID;//[Offset: 0x2c, Size: 4]
};

class LevelSequenceSnapshotSettings
{
	unsigned char ZeroPadAmount;//[Offset: 0x0, Size: 1]
	float FrameRate;//[Offset: 0x4, Size: 4]
};

class LobbyWeaponAnimationComponent_C.ActorComponent.Object
{
};

class CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd70, Size: 4]
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0xd74, Size: 4]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0xd78, Size: 4]
	int[] HoodClothSubTypeMap;//[Offset: 0xd7c, Size: 12]
	enum PreEquipClothReason;//[Offset: 0xd88, Size: 1]
	SkeletalMesh* MaleBatchBodySoftPath;//[Offset: 0xd90, Size: 40]
	SkeletalMesh* FemaleBatchBodySoftPath;//[Offset: 0xdb8, Size: 40]
	bool bForbidBindAvatarEquippedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	int[] NeedModifyVehicleID;//[Offset: 0xde4, Size: 12]
	<enum,int> SlotToFakeHandleMap;//[Offset: 0xdf0, Size: 60]
};

class AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
{
	LobbyCharacterWeaponAnimData[] CharacterWeaponAnimEditList;//[Offset: 0x188, Size: 12]
	LobbyCharacterWeaponAnimData[] AvatarSceneCharacterWeaponAnimEditList;//[Offset: 0x194, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbyWithCarCharacterWeaponAnimEditList;//[Offset: 0x1a0, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbySystemCharacterWeaponAnimEditList;//[Offset: 0x1ac, Size: 12]
	int resultAvatarPoseIndex;//[Offset: 0x1b8, Size: 4]
};

class TimelineComponent.ActorComponent.Object
{
	Timeline TheTimeline;//[Offset: 0xc8, Size: 136]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 1]
};

class Timeline
{
	unsigned char LengthMode;//[Offset: 0x0, Size: 1]
	float Length;//[Offset: 0x4, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	float PlayRate;//[Offset: 0xc, Size: 4]
	float Position;//[Offset: 0x10, Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x14, Size: 12]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 12]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x2c, Size: 12]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x38, Size: 12]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48, Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x58, Size: 16]
	Object* PropertySetObject;//[Offset: 0x70, Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 8]
	Property* DirectionProperty;//[Offset: 0x80, Size: 4]
};

class TimelineEventEntry
{
	float Time;//[Offset: 0x0, Size: 4]
	delegate EventFunc;//[Offset: 0x8, Size: 16]
};

class TimelineVectorTrack
{
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 4]
};

class StructProperty.Property.Field.Object
{
};

class TimelineFloatTrack
{
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 4]
};

class FloatProperty.NumericProperty.Property.Field.Object
{
};

class NumericProperty.Property.Field.Object
{
};

class TimelineLinearColorTrack
{
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 4]
};

class BP_Rifle_M16A4_10000_C.BP_LobbyWeapon_C.STExtraLobbyWeapon.STExtraWeapon.LuaActor.Actor.Object
{
	LobbyWeaponAnimList_Rifle_C* LobbyWeaponAnimList_Rifle;//[Offset: 0x980, Size: 4]
};

class BP_LobbyWeapon_C.STExtraLobbyWeapon.STExtraWeapon.LuaActor.Actor.Object
{
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x930, Size: 4]
	WeaponAvatarComp_BP_C* WeaponAvatarComp_BP;//[Offset: 0x934, Size: 4]
	bool bHoldBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	<FString,Transform> WeaponAttachRelativeTransformMap;//[Offset: 0x93c, Size: 60]
	bool WeaponMeshAndMatLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978, Size: 1]
	bool WeaponAnimLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x979, Size: 1]
	bool ForbiddenWeaponIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97a, Size: 1]
	int ShowType;//[Offset: 0x97c, Size: 4]
};

class STExtraLobbyWeapon.STExtraWeapon.LuaActor.Actor.Object
{
	delegate WeaponAnimLoadFinishEvent;//[Offset: 0x918, Size: 12]
	delegate WeaponAllAssetsLoaded;//[Offset: 0x924, Size: 12]
};

class WeaponAvatarComp_BP_C.WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
{
};

class LobbyWeaponAnimList_Rifle_C.AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
{
};

class Lobby_Left_Record_3D_UIBP_C.Actor.Object
{
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 4]
	SceneComponent* Scene6;//[Offset: 0x314, Size: 4]
	SceneComponent* Scene5;//[Offset: 0x318, Size: 4]
	SceneComponent* Scene4;//[Offset: 0x31c, Size: 4]
	SceneComponent* Scene3;//[Offset: 0x320, Size: 4]
	SceneComponent* Scene2;//[Offset: 0x324, Size: 4]
	SceneComponent* Scene1;//[Offset: 0x328, Size: 4]
	WidgetComponent* Widget;//[Offset: 0x32c, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x330, Size: 4]
	Vector Timeline_0_SlotPos6_91D7C1FB4DF4AA9F9C875EB838F820D5;//[Offset: 0x334, Size: 12]
	Vector Timeline_0_SlotPos5_91D7C1FB4DF4AA9F9C875EB838F820D5;//[Offset: 0x340, Size: 12]
	Vector Timeline_0_SlotPos4_91D7C1FB4DF4AA9F9C875EB838F820D5;//[Offset: 0x34c, Size: 12]
	Vector Timeline_0_SlotPos3_91D7C1FB4DF4AA9F9C875EB838F820D5;//[Offset: 0x358, Size: 12]
	Vector Timeline_0_SlotPos2_91D7C1FB4DF4AA9F9C875EB838F820D5;//[Offset: 0x364, Size: 12]
	Vector Timeline_0_SlotPos1_91D7C1FB4DF4AA9F9C875EB838F820D5;//[Offset: 0x370, Size: 12]
	unsigned char Timeline_0__Direction_91D7C1FB4DF4AA9F9C875EB838F820D5;//[Offset: 0x37c, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x380, Size: 4]
	Transform UI_3D_Transform;//[Offset: 0x390, Size: 48]
	Transform UI_3D_Transform_Long;//[Offset: 0x3c0, Size: 48]
	Transform[] Vehicle_3D_Transform;//[Offset: 0x3f0, Size: 12]
	Transform[] Vehicle_UI_3D_Transform;//[Offset: 0x3fc, Size: 12]
	Vector[] Vehicle_UI_Location;//[Offset: 0x408, Size: 12]
	Vector[] Vehicle_Download_Location;//[Offset: 0x414, Size: 12]
	Transform Bag_Transform;//[Offset: 0x420, Size: 48]
	Transform Bag_Transform_Long;//[Offset: 0x450, Size: 48]
	Transform Shelf2_Transform;//[Offset: 0x480, Size: 48]
	Transform Shelf2_Transform_Long;//[Offset: 0x4b0, Size: 48]
	Transform Shelf3_Transform;//[Offset: 0x4e0, Size: 48]
	Transform Shelf3_Transform_Long;//[Offset: 0x510, Size: 48]
	Transform RankIntegral_Transform;//[Offset: 0x540, Size: 48]
	Transform[] AchieveAlias_Transform;//[Offset: 0x570, Size: 12]
	bool IsScrollLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	float targetPositonZ;//[Offset: 0x580, Size: 4]
	float lerpAlpha;//[Offset: 0x584, Size: 4]
};

class Lobby_Left_Gun_3D_UIBP_C.Actor.Object
{
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 4]
	SceneComponent* Scene6;//[Offset: 0x314, Size: 4]
	SceneComponent* Scene5;//[Offset: 0x318, Size: 4]
	SceneComponent* Scene4;//[Offset: 0x31c, Size: 4]
	SceneComponent* Scene3;//[Offset: 0x320, Size: 4]
	SceneComponent* Scene2;//[Offset: 0x324, Size: 4]
	SceneComponent* Scene1;//[Offset: 0x328, Size: 4]
	WidgetComponent* Widget;//[Offset: 0x32c, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x330, Size: 4]
	Vector Timeline_GunSlotScrollAnimation_Scene3_Pos_1D48F59341A91929BE9A47B14C62A65B;//[Offset: 0x334, Size: 12]
	Vector Timeline_GunSlotScrollAnimation_Scene2_Pos_1D48F59341A91929BE9A47B14C62A65B;//[Offset: 0x340, Size: 12]
	Vector Timeline_GunSlotScrollAnimation_Scene1_Pos_1D48F59341A91929BE9A47B14C62A65B;//[Offset: 0x34c, Size: 12]
	float Timeline_GunSlotScrollAnimation_GunSlotScorll_1D48F59341A91929BE9A47B14C62A65B;//[Offset: 0x358, Size: 4]
	unsigned char Timeline_GunSlotScrollAnimation__Direction_1D48F59341A91929BE9A47B14C62A65B;//[Offset: 0x35c, Size: 1]
	TimelineComponent* Timeline_GunSlotScrollAnimation;//[Offset: 0x360, Size: 4]
	Transform Weapon_3D_UI_Transform;//[Offset: 0x370, Size: 48]
	Transform Weapon_3D_UI_Transform_Long;//[Offset: 0x3a0, Size: 48]
	float targetPositonZ;//[Offset: 0x3d0, Size: 4]
	float lerpAlpha;//[Offset: 0x3d4, Size: 4]
	Transform[] Weapon_Transform;//[Offset: 0x3d8, Size: 12]
	SceneComponent*[] SceneArr;//[Offset: 0x3e4, Size: 12]
	bool IsScrollUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	float InitLocation;//[Offset: 0x3f4, Size: 4]
};

class Lobby_Left_Record_Switch_3D_UIBP_C.Actor.Object
{
	WidgetComponent* Widget;//[Offset: 0x310, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 4]
	Transform UI_Transform;//[Offset: 0x320, Size: 48]
	Transform UI_Transform_Long;//[Offset: 0x350, Size: 48]
};

class Lobby_Left_Bag_3D_UIBP_C.Actor.Object
{
	WidgetComponent* Widget;//[Offset: 0x310, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 4]
	Transform UI_Transform;//[Offset: 0x320, Size: 48]
	Transform UI_Transform_Long;//[Offset: 0x350, Size: 48]
	Transform Bag_Transform;//[Offset: 0x380, Size: 48]
	Transform Bag_Transform_Long;//[Offset: 0x3b0, Size: 48]
};

class Lobby_Left_Souvenirs_3D_UIBP_C.Actor.Object
{
	WidgetComponent* Widget;//[Offset: 0x310, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 4]
	Transform UI_Transform;//[Offset: 0x320, Size: 48]
	Transform UI_Transform_Long;//[Offset: 0x350, Size: 48]
	Transform Souvenirs_Transform;//[Offset: 0x380, Size: 48]
	Transform Souvenirs_Transform_Long;//[Offset: 0x3b0, Size: 48]
};

class Lobby_Left_Light_3D_UIBP_C.Actor.Object
{
	WidgetComponent* Widget;//[Offset: 0x310, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 4]
	Transform UI_Transform;//[Offset: 0x320, Size: 48]
	Transform UI_Transform_Long;//[Offset: 0x350, Size: 48]
};

class Lobby_Left_Loop01_3D_UIBP_C.Actor.Object
{
	WidgetComponent* Widget;//[Offset: 0x310, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 4]
	Transform UI_Transform;//[Offset: 0x320, Size: 48]
	Transform UI_Transform_Long;//[Offset: 0x350, Size: 48]
};

class RankIntegralActor_C.Actor.Object
{
	StaticMeshComponent* SubMesh;//[Offset: 0x310, Size: 4]
	StaticMeshComponent* BigMesh;//[Offset: 0x314, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x318, Size: 4]
	Vector[] Locations;//[Offset: 0x31c, Size: 12]
};

class AchievementAliasActor_C.Actor.Object
{
	StaticMeshComponent* TopModel;//[Offset: 0x310, Size: 4]
	StaticMeshComponent* bg;//[Offset: 0x314, Size: 4]
	StaticMeshComponent* Model;//[Offset: 0x318, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x31c, Size: 4]
};

class WeaponShadowBP_C.Actor.Object
{
	StaticMeshComponent* Plane;//[Offset: 0x310, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 4]
};

class Lobby_Left_Edit_Car_Item_3D_C.Actor.Object
{
	WidgetComponent* Widget;//[Offset: 0x310, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x314, Size: 4]
};

class NewLobbyModelShowActorBP_C.LuaActor.Actor.Object
{
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 4]
	StaticMeshComponent* Sphere;//[Offset: 0x3a4, Size: 4]
	CapsuleComponent* Capsule;//[Offset: 0x3a8, Size: 4]
	SceneComponent* Scene;//[Offset: 0x3ac, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3b0, Size: 4]
	float WeaponMatTimeline_time_CC1B41C749E55AE85A5FF0A2EA7DF654;//[Offset: 0x3b4, Size: 4]
	unsigned char WeaponMatTimeline__Direction_CC1B41C749E55AE85A5FF0A2EA7DF654;//[Offset: 0x3b8, Size: 1]
	TimelineComponent* WeaponMatTimeline;//[Offset: 0x3bc, Size: 4]
	STExtraWeapon* WeaponActor;//[Offset: 0x3c0, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x3c4, Size: 4]
	bool press;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	unsigned char FingerIndex;//[Offset: 0x3c9, Size: 1]
	float LocationX;//[Offset: 0x3cc, Size: 4]
	bool canAutoRotateZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	float zRotateSpeed;//[Offset: 0x3d4, Size: 4]
	float LocationY;//[Offset: 0x3d8, Size: 4]
	bool canAutoRotateX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	float backTime;//[Offset: 0x3e0, Size: 4]
	float curBackTime;//[Offset: 0x3e4, Size: 4]
	float disinteractDis;//[Offset: 0x3e8, Size: 4]
	float yIntensity;//[Offset: 0x3ec, Size: 4]
	float yDisinteractRatio;//[Offset: 0x3f0, Size: 4]
	float originX;//[Offset: 0x3f4, Size: 4]
	float originY;//[Offset: 0x3f8, Size: 4]
	bool alreadyRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool alreadyRotateY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	bool canRotateBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 1]
	int ShowType;//[Offset: 0x400, Size: 4]
	bool needXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	Character* PlaneCharacter;//[Offset: 0x408, Size: 4]
	float XRotateMin;//[Offset: 0x40c, Size: 4]
	float XRotateMax;//[Offset: 0x410, Size: 4]
	float YRotateMin;//[Offset: 0x414, Size: 4]
	float YRotateMax;//[Offset: 0x418, Size: 4]
	int CurrentItemID;//[Offset: 0x41c, Size: 4]
	Actor* GrenadeActor;//[Offset: 0x420, Size: 4]
	bool isTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	Vector[] projectilePredictArray;//[Offset: 0x428, Size: 12]
	int projectileTickIndex;//[Offset: 0x434, Size: 4]
	float xRotateSpeed;//[Offset: 0x438, Size: 4]
	Rotator AttachPointDefaultRotate;//[Offset: 0x43c, Size: 12]
	Actor* bagWidgetActor;//[Offset: 0x448, Size: 4]
	Transform SpawnTransform;//[Offset: 0x450, Size: 48]
	STExtraLobbyVehicle* VehicleActor;//[Offset: 0x480, Size: 4]
	bool canRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	int curGrenadeIndex;//[Offset: 0x488, Size: 4]
	int spawnIndex;//[Offset: 0x48c, Size: 4]
	<int,ShowActorData> ShowActorDataArray;//[Offset: 0x490, Size: 60]
	STExtraLobbyVehicle* refitVehicleActor;//[Offset: 0x4cc, Size: 4]
	LobbyModelCommonActor* parachuteActor;//[Offset: 0x4d0, Size: 4]
	int curVehicleIndex;//[Offset: 0x4d4, Size: 4]
	FString[] ExtraData;//[Offset: 0x4d8, Size: 12]
	bool EnableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	bool RotateBackZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	NewLobbyModelShowActorBP_C* nextShowActor;//[Offset: 0x4e8, Size: 4]
	bool isAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	bool weaponDynMatChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 1]
	LobbyModelCommonActor* icon3DActor;//[Offset: 0x4f0, Size: 4]
	<int> HasShakeEffectItem;//[Offset: 0x4f4, Size: 60]
	LobbyModelCommonActor* bagActor;//[Offset: 0x530, Size: 4]
	BP_STRUCT_WeaponMatParamCfg_type WeaponMatParam;//[Offset: 0x534, Size: 76]
	float MatAlpha;//[Offset: 0x580, Size: 4]
	STExtraLobbyWingman* WingmanActor;//[Offset: 0x584, Size: 4]
};

class STExtraLobbyVehicle.Pawn.Actor.Object
{
	SkeletalMeshComponent* Mesh;//[Offset: 0x394, Size: 4]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0x398, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0x39c, Size: 4]
	FString LuaFilePath;//[Offset: 0x3a0, Size: 12]
};

class ShowActorData
{
	float XOffset_15_335B6FB64E64691029499DB91D53AA1B;//[Offset: 0x0, Size: 4]
	FString XRotateLimit_16_7DCE96BC4B110EFA0168E382CB6609C3;//[Offset: 0x4, Size: 12]
	FString YRotateLimit_17_0404EC6E4BADBFF829934994775B2098;//[Offset: 0x10, Size: 12]
	bool NeedResetRotation_7_684BD15842498260989021B083E180BD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Rotator Rotator_10_F22B16E84D6EB79AB51C6C9294C0A08E;//[Offset: 0x20, Size: 12]
	Rotator InitRotate_12_2D3D2DC74733E25DF25F1E8EA6AD9A16;//[Offset: 0x2c, Size: 12]
};

class LobbyModelCommonActor.LuaActor.Actor.Object
{
	MeshComponent* MeshComponent;//[Offset: 0x39c, Size: 4]
	<enum,FString> SlotNameMap;//[Offset: 0x3a0, Size: 60]
	delegate OnCommonActorLoaded;//[Offset: 0x3dc, Size: 12]
};

class BP_STRUCT_WeaponMatParamCfg_type
{
	int ID_0_01306C0006E69B6C5E6CBB190B10ADC4;//[Offset: 0x0, Size: 4]
	FString RotateMax_1_34BDAE003728AED6240ED2BB0B806958;//[Offset: 0x4, Size: 12]
	FString RotateMin_2_2CDAAD805AF7CA44240ED7AF0B80692E;//[Offset: 0x10, Size: 12]
	FString ShakeMax_3_5CDAED403E5A84016FD5821105714F08;//[Offset: 0x1c, Size: 12]
	FString ShakeMin_4_54F7ECC024AD0C3F6FD58F7905714F7E;//[Offset: 0x28, Size: 12]
	FString RotateStartMax_5_1B3031800163A6B0438B0A0A07319588;//[Offset: 0x34, Size: 12]
	FString RotateStartMin_6_134D310064C8066E438B0902073195FE;//[Offset: 0x40, Size: 12]
};

class STExtraLobbyWingman.LuaActor.Actor.Object
{
	SkeletalMeshComponent* Mesh;//[Offset: 0x39c, Size: 4]
};

class LobbyModelCommonActorBP_C.LobbyModelCommonActor.LuaActor.Actor.Object
{
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e8, Size: 4]
	int commonActorResId;//[Offset: 0x3ec, Size: 4]
	int ShowType;//[Offset: 0x3f0, Size: 4]
};

